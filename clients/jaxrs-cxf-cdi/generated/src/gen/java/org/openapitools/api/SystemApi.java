package org.openapitools.api;

import org.openapitools.model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo;
import org.openapitools.model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo;
import org.openapitools.model.AnalyticsComponentQueryCacheServiceInfo;
import org.openapitools.model.ApacheSlingHealthCheckResultHTMLSerializerInfo;
import java.math.BigDecimal;
import org.openapitools.model.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo;
import org.openapitools.model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo;
import org.openapitools.model.ComAdobeCqAccountApiAccountManagementServiceInfo;
import org.openapitools.model.ComAdobeCqAccountImplAccountManagementServletInfo;
import org.openapitools.model.ComAdobeCqAddressImplLocationLocationListServletInfo;
import org.openapitools.model.ComAdobeCqAuditPurgeDamInfo;
import org.openapitools.model.ComAdobeCqAuditPurgePagesInfo;
import org.openapitools.model.ComAdobeCqAuditPurgeReplicationInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplCDNRewriterInfo;
import org.openapitools.model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetVideoHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplPageEventListenerInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo;
import org.openapitools.model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo;
import org.openapitools.model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo;
import org.openapitools.model.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo;
import org.openapitools.model.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo;
import org.openapitools.model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo;
import org.openapitools.model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo;
import org.openapitools.model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo;
import org.openapitools.model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo;
import org.openapitools.model.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo;
import org.openapitools.model.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo;
import org.openapitools.model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo;
import org.openapitools.model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo;
import org.openapitools.model.ComAdobeCqHcContentPackagesHealthCheckInfo;
import org.openapitools.model.ComAdobeCqHistoryImplHistoryRequestFilterInfo;
import org.openapitools.model.ComAdobeCqHistoryImplHistoryServiceImplInfo;
import org.openapitools.model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo;
import org.openapitools.model.ComAdobeCqProjectsImplServletProjectImageServletInfo;
import org.openapitools.model.ComAdobeCqProjectsPurgeSchedulerInfo;
import org.openapitools.model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo;
import org.openapitools.model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensDeviceImplDeviceServiceInfo;
import org.openapitools.model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo;
import org.openapitools.model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo;
import org.openapitools.model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo;
import org.openapitools.model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo;
import org.openapitools.model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo;
import org.openapitools.model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo;
import org.openapitools.model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo;
import org.openapitools.model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo;
import org.openapitools.model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo;
import org.openapitools.model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo;
import org.openapitools.model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo;
import org.openapitools.model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo;
import org.openapitools.model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo;
import org.openapitools.model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo;
import org.openapitools.model.ComAdobeCqSocialGroupImplGroupServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo;
import org.openapitools.model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo;
import org.openapitools.model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo;
import org.openapitools.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo;
import org.openapitools.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo;
import org.openapitools.model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo;
import org.openapitools.model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo;
import org.openapitools.model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo;
import org.openapitools.model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo;
import org.openapitools.model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo;
import org.openapitools.model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo;
import org.openapitools.model.ComAdobeCqSocialScoringImplScoringEventListenerInfo;
import org.openapitools.model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo;
import org.openapitools.model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo;
import org.openapitools.model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo;
import org.openapitools.model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo;
import org.openapitools.model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo;
import org.openapitools.model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo;
import org.openapitools.model.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo;
import org.openapitools.model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo;
import org.openapitools.model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo;
import org.openapitools.model.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo;
import org.openapitools.model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo;
import org.openapitools.model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo;
import org.openapitools.model.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo;
import org.openapitools.model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo;
import org.openapitools.model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo;
import org.openapitools.model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo;
import org.openapitools.model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo;
import org.openapitools.model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo;
import org.openapitools.model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo;
import org.openapitools.model.ComAdobeFormsCommonServletTempCleanUpTaskInfo;
import org.openapitools.model.ComAdobeGraniteAcpPlatformPlatformServletInfo;
import org.openapitools.model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo;
import org.openapitools.model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo;
import org.openapitools.model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo;
import org.openapitools.model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo;
import org.openapitools.model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo;
import org.openapitools.model.ComAdobeGraniteContexthubImplContextHubImplInfo;
import org.openapitools.model.ComAdobeGraniteCorsImplCORSPolicyImplInfo;
import org.openapitools.model.ComAdobeGraniteCsrfImplCSRFFilterInfo;
import org.openapitools.model.ComAdobeGraniteCsrfImplCSRFServletInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo;
import org.openapitools.model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo;
import org.openapitools.model.ComAdobeGraniteFragsImplRandomFeatureInfo;
import org.openapitools.model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo;
import org.openapitools.model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo;
import org.openapitools.model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo;
import org.openapitools.model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo;
import org.openapitools.model.ComAdobeGraniteInfocollectorInfoCollectorInfo;
import org.openapitools.model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo;
import org.openapitools.model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo;
import org.openapitools.model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo;
import org.openapitools.model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo;
import org.openapitools.model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo;
import org.openapitools.model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo;
import org.openapitools.model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo;
import org.openapitools.model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo;
import org.openapitools.model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo;
import org.openapitools.model.ComAdobeGraniteRestImplServletDefaultGETServletInfo;
import org.openapitools.model.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo;
import org.openapitools.model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo;
import org.openapitools.model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo;
import org.openapitools.model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo;
import org.openapitools.model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo;
import org.openapitools.model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo;
import org.openapitools.model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowPurgeSchedulerInfo;
import org.openapitools.model.ComAdobeOctopusNcommBootstrapInfo;
import org.openapitools.model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo;
import org.openapitools.model.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo;
import org.openapitools.model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo;
import org.openapitools.model.ComDayCommonsHttpclientInfo;
import org.openapitools.model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo;
import org.openapitools.model.ComDayCqAuthImplCugCugSupportImplInfo;
import org.openapitools.model.ComDayCqAuthImplLoginSelectorHandlerInfo;
import org.openapitools.model.ComDayCqCommonsImplExternalizerImplInfo;
import org.openapitools.model.ComDayCqCommonsServletsRootMappingServletInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo;
import org.openapitools.model.ComDayCqContentsyncImplContentSyncManagerImplInfo;
import org.openapitools.model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo;
import org.openapitools.model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo;
import org.openapitools.model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssetMoveListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamEventPurgeServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamEventRecorderImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo;
import org.openapitools.model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerJpegHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplLightboxLightboxServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo;
import org.openapitools.model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo;
import org.openapitools.model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo;
import org.openapitools.model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo;
import org.openapitools.model.ComDayCqDamCoreImplRenditionMakerImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplReportsReportExportServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetDownloadServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetStatusServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletBatchMetadataServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletBinaryProviderServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCollectionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCollectionsServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCompanionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCreateAssetServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletGuidLookupFilterInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletHealthCheckServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletMetadataGetServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletResourceCollectionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplUnzipUnzipConfigInfo;
import org.openapitools.model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo;
import org.openapitools.model.ComDayCqDamCoreProcessExtractMetadataProcessInfo;
import org.openapitools.model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo;
import org.openapitools.model.ComDayCqDamHandlerFfmpegLocatorImplInfo;
import org.openapitools.model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo;
import org.openapitools.model.ComDayCqDamIdsImplIDSJobProcessorInfo;
import org.openapitools.model.ComDayCqDamIdsImplIDSPoolManagerImplInfo;
import org.openapitools.model.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo;
import org.openapitools.model.ComDayCqDamInddImplServletSnippetCreationServletInfo;
import org.openapitools.model.ComDayCqDamInddProcessINDDMediaExtractProcessInfo;
import org.openapitools.model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo;
import org.openapitools.model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo;
import org.openapitools.model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo;
import org.openapitools.model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo;
import org.openapitools.model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo;
import org.openapitools.model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo;
import org.openapitools.model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7APIClientImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo;
import org.openapitools.model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo;
import org.openapitools.model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo;
import org.openapitools.model.ComDayCqDamVideoImplServletVideoTestServletInfo;
import org.openapitools.model.ComDayCqExtwidgetServletsImageSpriteServletInfo;
import org.openapitools.model.ComDayCqImageInternalFontFontHelperInfo;
import org.openapitools.model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo;
import org.openapitools.model.ComDayCqMailerDefaultMailServiceInfo;
import org.openapitools.model.ComDayCqMailerImplCqMailingServiceInfo;
import org.openapitools.model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo;
import org.openapitools.model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo;
import org.openapitools.model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo;
import org.openapitools.model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo;
import org.openapitools.model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo;
import org.openapitools.model.ComDayCqMcmImplMCMConfigurationInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo;
import org.openapitools.model.ComDayCqNotificationImplNotificationServiceImplInfo;
import org.openapitools.model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo;
import org.openapitools.model.ComDayCqPollingImporterImplManagedPollConfigImplInfo;
import org.openapitools.model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo;
import org.openapitools.model.ComDayCqPollingImporterImplPollingImporterImplInfo;
import org.openapitools.model.ComDayCqReplicationAuditReplicationEventListenerInfo;
import org.openapitools.model.ComDayCqReplicationContentStaticContentBuilderInfo;
import org.openapitools.model.ComDayCqReplicationImplAgentManagerImplInfo;
import org.openapitools.model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo;
import org.openapitools.model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicationReceiverImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicatorImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReverseReplicatorInfo;
import org.openapitools.model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo;
import org.openapitools.model.ComDayCqReplicationImplTransportHttpInfo;
import org.openapitools.model.ComDayCqReportingImplCacheCacheImplInfo;
import org.openapitools.model.ComDayCqReportingImplConfigServiceImplInfo;
import org.openapitools.model.ComDayCqReportingImplRLogAnalyzerInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo;
import org.openapitools.model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo;
import org.openapitools.model.ComDayCqSearchImplBuilderQueryBuilderImplInfo;
import org.openapitools.model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo;
import org.openapitools.model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo;
import org.openapitools.model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo;
import org.openapitools.model.ComDayCqSecurityACLSetupInfo;
import org.openapitools.model.ComDayCqStatisticsImplStatisticsServiceImplInfo;
import org.openapitools.model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo;
import org.openapitools.model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo;
import org.openapitools.model.ComDayCqTaggingImplTagGarbageCollectorInfo;
import org.openapitools.model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo;
import org.openapitools.model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventPagePostProcessorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplLanguageManagerImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsThumbnailServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVersionManagerImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVersionPurgeTaskInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWCMDebugFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreMvtMVTStatisticsImplInfo;
import org.openapitools.model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo;
import org.openapitools.model.ComDayCqWcmCoreWCMRequestFilterInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterDesignPackageImporterInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplMailServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplPageRedirectServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo;
import org.openapitools.model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo;
import org.openapitools.model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo;
import org.openapitools.model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo;
import org.openapitools.model.ComDayCqWcmMsmImplRolloutManagerImplInfo;
import org.openapitools.model.ComDayCqWcmMsmImplServletsAuditLogServletInfo;
import org.openapitools.model.ComDayCqWcmNotificationEmailImplEmailChannelInfo;
import org.openapitools.model.ComDayCqWcmNotificationImplNotificationManagerImplInfo;
import org.openapitools.model.ComDayCqWcmScriptingImplBVPManagerInfo;
import org.openapitools.model.ComDayCqWcmUndoUndoConfigInfo;
import org.openapitools.model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo;
import org.openapitools.model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo;
import org.openapitools.model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo;
import org.openapitools.model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo;
import org.openapitools.model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo;
import org.openapitools.model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo;
import org.openapitools.model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo;
import org.openapitools.model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo;
import org.openapitools.model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo;
import org.openapitools.model.GuideLocalizationServiceInfo;
import org.openapitools.model.MessagingUserComponentFactoryInfo;
import org.openapitools.model.OrgApacheAriesJmxFrameworkStateConfigInfo;
import org.openapitools.model.OrgApacheFelixEventadminImplEventAdminInfo;
import org.openapitools.model.OrgApacheFelixHttpInfo;
import org.openapitools.model.OrgApacheFelixHttpSslfilterSslFilterInfo;
import org.openapitools.model.OrgApacheFelixJaasConfigurationFactoryInfo;
import org.openapitools.model.OrgApacheFelixJaasConfigurationSpiInfo;
import org.openapitools.model.OrgApacheFelixScrScrServiceInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplComponentsCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServicesCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo;
import org.openapitools.model.OrgApacheFelixSystemreadySystemReadyMonitorInfo;
import org.openapitools.model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo;
import org.openapitools.model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo;
import org.openapitools.model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo;
import org.openapitools.model.OrgApacheHttpProxyconfiguratorInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo;
import org.openapitools.model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo;
import org.openapitools.model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo;
import org.openapitools.model.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo;
import org.openapitools.model.OrgApacheSlingAuthCoreImplLogoutServletInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo;
import org.openapitools.model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo;
import org.openapitools.model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo;
import org.openapitools.model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo;
import org.openapitools.model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerInfo;
import org.openapitools.model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo;
import org.openapitools.model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo;
import org.openapitools.model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo;
import org.openapitools.model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo;
import org.openapitools.model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo;
import org.openapitools.model.OrgApacheSlingDatasourceDataSourceFactoryInfo;
import org.openapitools.model.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo;
import org.openapitools.model.OrgApacheSlingDiscoveryOakConfigInfo;
import org.openapitools.model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo;
import org.openapitools.model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo;
import org.openapitools.model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo;
import org.openapitools.model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo;
import org.openapitools.model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo;
import org.openapitools.model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo;
import org.openapitools.model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo;
import org.openapitools.model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo;
import org.openapitools.model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo;
import org.openapitools.model.OrgApacheSlingEngineImplLogRequestLoggerInfo;
import org.openapitools.model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo;
import org.openapitools.model.OrgApacheSlingEngineImplSlingMainServletInfo;
import org.openapitools.model.OrgApacheSlingEngineParametersInfo;
import org.openapitools.model.OrgApacheSlingEventImplEventingThreadPoolInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo;
import org.openapitools.model.OrgApacheSlingEventJobsQueueConfigurationInfo;
import org.openapitools.model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo;
import org.openapitools.model.OrgApacheSlingFeatureflagsFeatureInfo;
import org.openapitools.model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo;
import org.openapitools.model.OrgApacheSlingHapiImplHApiUtilImplInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo;
import org.openapitools.model.OrgApacheSlingI18nImplI18NFilterInfo;
import org.openapitools.model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo;
import org.openapitools.model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo;
import org.openapitools.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo;
import org.openapitools.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo;
import org.openapitools.model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo;
import org.openapitools.model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo;
import org.openapitools.model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo;
import org.openapitools.model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo;
import org.openapitools.model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo;
import org.openapitools.model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo;
import org.openapitools.model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo;
import org.openapitools.model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo;
import org.openapitools.model.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo;
import org.openapitools.model.OrgApacheSlingModelsImplModelAdapterFactoryInfo;
import org.openapitools.model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo;
import org.openapitools.model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo;
import org.openapitools.model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo;
import org.openapitools.model.OrgApacheSlingResourcemergerPickerOverridingInfo;
import org.openapitools.model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo;
import org.openapitools.model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo;
import org.openapitools.model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo;
import org.openapitools.model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo;
import org.openapitools.model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo;
import org.openapitools.model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo;
import org.openapitools.model.OrgApacheSlingSecurityImplContentDispositionFilterInfo;
import org.openapitools.model.OrgApacheSlingSecurityImplReferrerFilterInfo;
import org.openapitools.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo;
import org.openapitools.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo;
import org.openapitools.model.OrgApacheSlingServletsGetDefaultGetServletInfo;
import org.openapitools.model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo;
import org.openapitools.model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo;
import org.openapitools.model.OrgApacheSlingServletsPostImplSlingPostServletInfo;
import org.openapitools.model.OrgApacheSlingServletsResolverSlingServletResolverInfo;
import org.openapitools.model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo;
import org.openapitools.model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo;
import org.openapitools.model.OrgApacheSlingTenantInternalTenantProviderImplInfo;
import org.openapitools.model.OrgApacheSlingTracerInternalLogTracerInfo;
import org.openapitools.model.OrgApacheSlingXssImplXSSFilterImplInfo;
import org.openapitools.api.SystemApiService;

import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;

import io.swagger.annotations.*;
import java.io.InputStream;

import org.apache.cxf.jaxrs.ext.multipart.Attachment;
import org.apache.cxf.jaxrs.ext.multipart.Multipart;

import java.util.Map;
import java.util.List;
import javax.validation.constraints.*;
@Path("/system")
@RequestScoped

@Api(description = "the system API")


@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJAXRSCXFCDIServerCodegen", date = "2019-08-05T00:58:05.920Z[GMT]")

public class SystemApi  {

  @Context SecurityContext securityContext;

  @Inject SystemApiService delegate;


    @POST
    @Path("/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response adaptiveFormAndInteractiveCommunicationWebChannelConfiguration( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("showPlaceholder") Boolean showPlaceholder,  @ApiParam(value = "")  @QueryParam("maximumCacheEntries") Integer maximumCacheEntries,  @ApiParam(value = "")  @QueryParam("af.scripting.compatversion") String afScriptingCompatversion,  @ApiParam(value = "")  @QueryParam("makeFileNameUnique") Boolean makeFileNameUnique,  @ApiParam(value = "")  @QueryParam("generatingCompliantData") Boolean generatingCompliantData) {
        return delegate.adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post, apply, delete, action, $location, propertylist, showPlaceholder, maximumCacheEntries, afScriptingCompatversion, makeFileNameUnique, generatingCompliantData, securityContext);
    }

    @POST
    @Path("/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fontList") List<String> fontList) {
        return delegate.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post, apply, delete, action, $location, propertylist, fontList, securityContext);
    }

    @POST
    @Path("/console/configMgr/Analytics Component Query Cache Service")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = AnalyticsComponentQueryCacheServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = AnalyticsComponentQueryCacheServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response analyticsComponentQueryCacheService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.analytics.component.query.cache.size") Integer cqAnalyticsComponentQueryCacheSize) {
        return delegate.analyticsComponentQueryCacheService(post, apply, delete, action, $location, propertylist, cqAnalyticsComponentQueryCacheSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/Apache Sling Health Check Result HTML Serializer")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ApacheSlingHealthCheckResultHTMLSerializerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ApacheSlingHealthCheckResultHTMLSerializerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response apacheSlingHealthCheckResultHTMLSerializer( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("styleString") String styleString) {
        return delegate.apacheSlingHealthCheckResultHTMLSerializer(post, apply, delete, action, $location, propertylist, styleString, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("formsManagerConfig.includeOOTBTemplates") Boolean formsManagerConfigIncludeOOTBTemplates,  @ApiParam(value = "")  @QueryParam("formsManagerConfig.includeDeprecatedTemplates") Boolean formsManagerConfigIncludeDeprecatedTemplates) {
        return delegate.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post, apply, delete, action, $location, propertylist, formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeAemTransactionCoreImplTransactionRecorderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemTransactionCoreImplTransactionRecorderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemTransactionCoreImplTransactionRecorder( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("isTransactionRecordingEnabled") Boolean isTransactionRecordingEnabled) {
        return delegate.comAdobeAemTransactionCoreImplTransactionRecorder(post, apply, delete, action, $location, propertylist, isTransactionRecordingEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.name") String hcName,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("hc.mbean.name") String hcMbeanName) {
        return delegate.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.name") String hcName,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("hc.mbean.name") String hcMbeanName) {
        return delegate.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("pre-upgrade.maintenance.tasks") List<String> preUpgradeMaintenanceTasks,  @ApiParam(value = "")  @QueryParam("pre-upgrade.hc.tags") List<String> preUpgradeHcTags) {
        return delegate.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post, apply, delete, action, $location, propertylist, preUpgradeMaintenanceTasks, preUpgradeHcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("root.path") String rootPath,  @ApiParam(value = "")  @QueryParam("fix.inconsistencies") Boolean fixInconsistencies) {
        return delegate.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post, apply, delete, action, $location, propertylist, rootPath, fixInconsistencies, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.account.api.AccountManagementService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqAccountApiAccountManagementServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAccountApiAccountManagementServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAccountApiAccountManagementService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.accountmanager.token.validity.period") Integer cqAccountmanagerTokenValidityPeriod,  @ApiParam(value = "")  @QueryParam("cq.accountmanager.config.requestnewaccount.mail") String cqAccountmanagerConfigRequestnewaccountMail,  @ApiParam(value = "")  @QueryParam("cq.accountmanager.config.requestnewpwd.mail") String cqAccountmanagerConfigRequestnewpwdMail) {
        return delegate.comAdobeCqAccountApiAccountManagementService(post, apply, delete, action, $location, propertylist, cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqAccountImplAccountManagementServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAccountImplAccountManagementServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAccountImplAccountManagementServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.accountmanager.config.informnewaccount.mail") String cqAccountmanagerConfigInformnewaccountMail,  @ApiParam(value = "")  @QueryParam("cq.accountmanager.config.informnewpwd.mail") String cqAccountmanagerConfigInformnewpwdMail) {
        return delegate.comAdobeCqAccountImplAccountManagementServlet(post, apply, delete, action, $location, propertylist, cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqAddressImplLocationLocationListServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAddressImplLocationLocationListServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAddressImplLocationLocationListServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.address.location.default.maxResults") Integer cqAddressLocationDefaultMaxResults) {
        return delegate.comAdobeCqAddressImplLocationLocationListServlet(post, apply, delete, action, $location, propertylist, cqAddressLocationDefaultMaxResults, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.audit.purge.Dam")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqAuditPurgeDamInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAuditPurgeDamInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAuditPurgeDam( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("auditlog.rule.name") String auditlogRuleName,  @ApiParam(value = "")  @QueryParam("auditlog.rule.contentpath") String auditlogRuleContentpath,  @ApiParam(value = "")  @QueryParam("auditlog.rule.minimumage") Integer auditlogRuleMinimumage,  @ApiParam(value = "")  @QueryParam("auditlog.rule.types") String auditlogRuleTypes) {
        return delegate.comAdobeCqAuditPurgeDam(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.audit.purge.Pages")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqAuditPurgePagesInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAuditPurgePagesInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAuditPurgePages( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("auditlog.rule.name") String auditlogRuleName,  @ApiParam(value = "")  @QueryParam("auditlog.rule.contentpath") String auditlogRuleContentpath,  @ApiParam(value = "")  @QueryParam("auditlog.rule.minimumage") Integer auditlogRuleMinimumage,  @ApiParam(value = "")  @QueryParam("auditlog.rule.types") String auditlogRuleTypes) {
        return delegate.comAdobeCqAuditPurgePages(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.audit.purge.Replication")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqAuditPurgeReplicationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAuditPurgeReplicationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAuditPurgeReplication( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("auditlog.rule.name") String auditlogRuleName,  @ApiParam(value = "")  @QueryParam("auditlog.rule.contentpath") String auditlogRuleContentpath,  @ApiParam(value = "")  @QueryParam("auditlog.rule.minimumage") Integer auditlogRuleMinimumage,  @ApiParam(value = "")  @QueryParam("auditlog.rule.types") String auditlogRuleTypes) {
        return delegate.comAdobeCqAuditPurgeReplication(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCdnRewriterImplAWSCloudFrontRewriter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("keypair.id") String keypairId,  @ApiParam(value = "")  @QueryParam("keypair.alias") String keypairAlias,  @ApiParam(value = "")  @QueryParam("cdnrewriter.attributes") List<String> cdnrewriterAttributes,  @ApiParam(value = "")  @QueryParam("cdn.rewriter.distribution.domain") String cdnRewriterDistributionDomain) {
        return delegate.comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, keypairId, keypairAlias, cdnrewriterAttributes, cdnRewriterDistributionDomain, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCdnRewriterImplCDNConfigServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cdn.config.distribution.domain") String cdnConfigDistributionDomain,  @ApiParam(value = "")  @QueryParam("cdn.config.enable.rewriting") Boolean cdnConfigEnableRewriting,  @ApiParam(value = "")  @QueryParam("cdn.config.path.prefixes") List<String> cdnConfigPathPrefixes,  @ApiParam(value = "")  @QueryParam("cdn.config.cdnttl") Integer cdnConfigCdnttl,  @ApiParam(value = "")  @QueryParam("cdn.config.application.protocol") String cdnConfigApplicationProtocol) {
        return delegate.comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post, apply, delete, action, $location, propertylist, cdnConfigDistributionDomain, cdnConfigEnableRewriting, cdnConfigPathPrefixes, cdnConfigCdnttl, cdnConfigApplicationProtocol, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCdnRewriterImplCDNRewriterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCdnRewriterImplCDNRewriterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCdnRewriterImplCDNRewriter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("cdnrewriter.attributes") List<String> cdnrewriterAttributes,  @ApiParam(value = "")  @QueryParam("cdn.rewriter.distribution.domain") String cdnRewriterDistributionDomain) {
        return delegate.comAdobeCqCdnRewriterImplCDNRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, cdnrewriterAttributes, cdnRewriterDistributionDomain, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("flush.agents") List<String> flushAgents) {
        return delegate.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post, apply, delete, action, $location, propertylist, flushAgents, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommerceImplAssetDynamicImageHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.commerce.asset.handler.active") Boolean cqCommerceAssetHandlerActive,  @ApiParam(value = "")  @QueryParam("cq.commerce.asset.handler.name") String cqCommerceAssetHandlerName) {
        return delegate.comAdobeCqCommerceImplAssetDynamicImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.commerce.asset.handler.fallback") String cqCommerceAssetHandlerFallback) {
        return delegate.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerFallback, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommerceImplAssetStaticImageHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.commerce.asset.handler.active") Boolean cqCommerceAssetHandlerActive,  @ApiParam(value = "")  @QueryParam("cq.commerce.asset.handler.name") String cqCommerceAssetHandlerName) {
        return delegate.comAdobeCqCommerceImplAssetStaticImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCommerceImplAssetVideoHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetVideoHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommerceImplAssetVideoHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.commerce.asset.handler.active") Boolean cqCommerceAssetHandlerActive,  @ApiParam(value = "")  @QueryParam("cq.commerce.asset.handler.name") String cqCommerceAssetHandlerName) {
        return delegate.comAdobeCqCommerceImplAssetVideoHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommerceImplPromotionPromotionManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.commerce.promotion.root") String cqCommercePromotionRoot) {
        return delegate.comAdobeCqCommerceImplPromotionPromotionManagerImpl(post, apply, delete, action, $location, propertylist, cqCommercePromotionRoot, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.commerce.cataloggenerator.bucketsize") Integer cqCommerceCataloggeneratorBucketsize,  @ApiParam(value = "")  @QueryParam("cq.commerce.cataloggenerator.bucketname") String cqCommerceCataloggeneratorBucketname,  @ApiParam(value = "")  @QueryParam("cq.commerce.cataloggenerator.excludedtemplateproperties") List<String> cqCommerceCataloggeneratorExcludedtemplateproperties) {
        return delegate.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post, apply, delete, action, $location, propertylist, cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCommercePimImplPageEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommercePimImplPageEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommercePimImplPageEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.commerce.pageeventlistener.enabled") Boolean cqCommercePageeventlistenerEnabled) {
        return delegate.comAdobeCqCommercePimImplPageEventListener(post, apply, delete, action, $location, propertylist, cqCommercePageeventlistenerEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("Feed generator algorithm") String feedGeneratorAlgorithm) {
        return delegate.comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post, apply, delete, action, $location, propertylist, feedGeneratorAlgorithm, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqContentinsightImplReportingServicesSettingsProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("reportingservices.url") String reportingservicesUrl) {
        return delegate.comAdobeCqContentinsightImplReportingServicesSettingsProvider(post, apply, delete, action, $location, propertylist, reportingservicesUrl, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("brightedge.url") String brightedgeUrl) {
        return delegate.comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post, apply, delete, action, $location, propertylist, brightedgeUrl, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqContentinsightImplServletsReportingServicesProxyServle( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("reportingservices.proxy.whitelist") List<String> reportingservicesProxyWhitelist) {
        return delegate.comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post, apply, delete, action, $location, propertylist, reportingservicesProxyWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamCfmImplComponentComponentConfigImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("dam.cfm.component.resourceType") String damCfmComponentResourceType,  @ApiParam(value = "")  @QueryParam("dam.cfm.component.fileReferenceProp") String damCfmComponentFileReferenceProp,  @ApiParam(value = "")  @QueryParam("dam.cfm.component.elementsProp") String damCfmComponentElementsProp,  @ApiParam(value = "")  @QueryParam("dam.cfm.component.variationProp") String damCfmComponentVariationProp) {
        return delegate.comAdobeCqDamCfmImplComponentComponentConfigImpl(post, apply, delete, action, $location, propertylist, damCfmComponentResourceType, damCfmComponentFileReferenceProp, damCfmComponentElementsProp, damCfmComponentVariationProp, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamCfmImplConfFeatureConfigImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("dam.cfm.resourceTypes") List<String> damCfmResourceTypes,  @ApiParam(value = "")  @QueryParam("dam.cfm.referenceProperties") List<String> damCfmReferenceProperties) {
        return delegate.comAdobeCqDamCfmImplConfFeatureConfigImpl(post, apply, delete, action, $location, propertylist, damCfmResourceTypes, damCfmReferenceProperties, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamCfmImplContentRewriterAssetProcessor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("pipeline.type") String pipelineType) {
        return delegate.comAdobeCqDamCfmImplContentRewriterAssetProcessor(post, apply, delete, action, $location, propertylist, pipelineType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamCfmImplContentRewriterParRangeFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("pipeline.type") String pipelineType) {
        return delegate.comAdobeCqDamCfmImplContentRewriterParRangeFilter(post, apply, delete, action, $location, propertylist, pipelineType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamCfmImplContentRewriterPayloadFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("pipeline.type") String pipelineType) {
        return delegate.comAdobeCqDamCfmImplContentRewriterPayloadFilter(post, apply, delete, action, $location, propertylist, pipelineType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamDmProcessImagePTiffManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("maxMemory") Integer maxMemory) {
        return delegate.comAdobeCqDamDmProcessImagePTiffManagerImpl(post, apply, delete, action, $location, propertylist, maxMemory, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("dmreplicateonmodify.enabled") Boolean dmreplicateonmodifyEnabled,  @ApiParam(value = "")  @QueryParam("dmreplicateonmodify.forcesyncdeletes") Boolean dmreplicateonmodifyForcesyncdeletes) {
        return delegate.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post, apply, delete, action, $location, propertylist, dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamMacSyncHelperImplMACSyncClientImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.dam.mac.sync.client.so.timeout") Integer comAdobeDamMacSyncClientSoTimeout) {
        return delegate.comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post, apply, delete, action, $location, propertylist, comAdobeDamMacSyncClientSoTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamMacSyncImplDAMSyncServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths") List<String> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions") Boolean comAdobeCqDamMacSyncDamsyncserviceSyncRenditions,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms") Integer comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.platform") String comAdobeCqDamMacSyncDamsyncservicePlatform) {
        return delegate.comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamProcessorNuiImplNuiAssetProcessor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("nuiEnabled") Boolean nuiEnabled,  @ApiParam(value = "")  @QueryParam("nuiServiceUrl") String nuiServiceUrl,  @ApiParam(value = "")  @QueryParam("nuiApiKey") String nuiApiKey) {
        return delegate.comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post, apply, delete, action, $location, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamS7imagingImplIsImageServerComponent( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("TcpPort") String tcpPort,  @ApiParam(value = "")  @QueryParam("AllowRemoteAccess") Boolean allowRemoteAccess,  @ApiParam(value = "")  @QueryParam("MaxRenderRgnPixels") String maxRenderRgnPixels,  @ApiParam(value = "")  @QueryParam("MaxMessageSize") String maxMessageSize,  @ApiParam(value = "")  @QueryParam("RandomAccessUrlTimeout") Integer randomAccessUrlTimeout,  @ApiParam(value = "")  @QueryParam("WorkerThreads") Integer workerThreads) {
        return delegate.comAdobeCqDamS7imagingImplIsImageServerComponent(post, apply, delete, action, $location, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamS7imagingImplPsPlatformServerServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cache.enable") Boolean cacheEnable,  @ApiParam(value = "")  @QueryParam("cache.rootPaths") List<String> cacheRootPaths,  @ApiParam(value = "")  @QueryParam("cache.maxSize") Integer cacheMaxSize,  @ApiParam(value = "")  @QueryParam("cache.maxEntries") Integer cacheMaxEntries) {
        return delegate.comAdobeCqDamS7imagingImplPsPlatformServerServlet(post, apply, delete, action, $location, propertylist, cacheEnable, cacheRootPaths, cacheMaxSize, cacheMaxEntries, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamWebdavImplIoAssetIOHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("pathPrefix") String pathPrefix,  @ApiParam(value = "")  @QueryParam("createVersion") Boolean createVersion) {
        return delegate.comAdobeCqDamWebdavImplIoAssetIOHandler(post, apply, delete, action, $location, propertylist, serviceRanking, pathPrefix, createVersion, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.webdav.version.linking.enable") Boolean cqDamWebdavVersionLinkingEnable,  @ApiParam(value = "")  @QueryParam("cq.dam.webdav.version.linking.scheduler.period") Integer cqDamWebdavVersionLinkingSchedulerPeriod,  @ApiParam(value = "")  @QueryParam("cq.dam.webdav.version.linking.staging.timeout") Integer cqDamWebdavVersionLinkingStagingTimeout) {
        return delegate.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post, apply, delete, action, $location, propertylist, cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamWebdavImplIoSpecialFilesHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters") List<String> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters) {
        return delegate.comAdobeCqDamWebdavImplIoSpecialFilesHandler(post, apply, delete, action, $location, propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDeserfwImplDeserializationFirewallImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("firewall.deserialization.whitelist") List<String> firewallDeserializationWhitelist,  @ApiParam(value = "")  @QueryParam("firewall.deserialization.blacklist") List<String> firewallDeserializationBlacklist,  @ApiParam(value = "")  @QueryParam("firewall.deserialization.diagnostics") String firewallDeserializationDiagnostics) {
        return delegate.comAdobeCqDeserfwImplDeserializationFirewallImpl(post, apply, delete, action, $location, propertylist, firewallDeserializationWhitelist, firewallDeserializationBlacklist, firewallDeserializationDiagnostics, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDtmImplServiceDTMWebServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("connection.timeout") Integer connectionTimeout,  @ApiParam(value = "")  @QueryParam("socket.timeout") Integer socketTimeout) {
        return delegate.comAdobeCqDtmImplServiceDTMWebServiceImpl(post, apply, delete, action, $location, propertylist, connectionTimeout, socketTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDtmImplServletsDTMDeployHookServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("dtm.staging.ip.whitelist") List<String> dtmStagingIpWhitelist,  @ApiParam(value = "")  @QueryParam("dtm.production.ip.whitelist") List<String> dtmProductionIpWhitelist) {
        return delegate.comAdobeCqDtmImplServletsDTMDeployHookServlet(post, apply, delete, action, $location, propertylist, dtmStagingIpWhitelist, dtmProductionIpWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDtmReactorImplServiceWebServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("endpointUri") String endpointUri,  @ApiParam(value = "")  @QueryParam("connectionTimeout") Integer connectionTimeout,  @ApiParam(value = "")  @QueryParam("socketTimeout") Integer socketTimeout) {
        return delegate.comAdobeCqDtmReactorImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqExperiencelogImplExperienceLogConfigServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("disabledForGroups") List<String> disabledForGroups) {
        return delegate.comAdobeCqExperiencelogImplExperienceLogConfigServlet(post, apply, delete, action, $location, propertylist, enabled, disabledForGroups, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqHcContentPackagesHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqHcContentPackagesHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqHcContentPackagesHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.name") String hcName,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("hc.mbean.name") String hcMbeanName,  @ApiParam(value = "")  @QueryParam("package.names") List<String> packageNames) {
        return delegate.comAdobeCqHcContentPackagesHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, packageNames, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqHistoryImplHistoryRequestFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqHistoryImplHistoryRequestFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqHistoryImplHistoryRequestFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("history.requestFilter.excludedSelectors") List<String> historyRequestFilterExcludedSelectors,  @ApiParam(value = "")  @QueryParam("history.requestFilter.excludedExtensions") List<String> historyRequestFilterExcludedExtensions) {
        return delegate.comAdobeCqHistoryImplHistoryRequestFilter(post, apply, delete, action, $location, propertylist, historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqHistoryImplHistoryServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqHistoryImplHistoryServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqHistoryImplHistoryServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("history.service.resourceTypes") List<String> historyServiceResourceTypes,  @ApiParam(value = "")  @QueryParam("history.service.pathFilter") List<String> historyServicePathFilter) {
        return delegate.comAdobeCqHistoryImplHistoryServiceImpl(post, apply, delete, action, $location, propertylist, historyServiceResourceTypes, historyServicePathFilter, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqInboxImplTypeproviderItemTypeProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("inbox.impl.typeprovider.registrypaths") List<String> inboxImplTypeproviderRegistrypaths,  @ApiParam(value = "")  @QueryParam("inbox.impl.typeprovider.legacypaths") List<String> inboxImplTypeproviderLegacypaths,  @ApiParam(value = "")  @QueryParam("inbox.impl.typeprovider.defaulturl.failureitem") String inboxImplTypeproviderDefaulturlFailureitem,  @ApiParam(value = "")  @QueryParam("inbox.impl.typeprovider.defaulturl.workitem") String inboxImplTypeproviderDefaulturlWorkitem,  @ApiParam(value = "")  @QueryParam("inbox.impl.typeprovider.defaulturl.task") String inboxImplTypeproviderDefaulturlTask) {
        return delegate.comAdobeCqInboxImplTypeproviderItemTypeProvider(post, apply, delete, action, $location, propertylist, inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqProjectsImplServletProjectImageServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqProjectsImplServletProjectImageServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqProjectsImplServletProjectImageServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("image.quality") String imageQuality,  @ApiParam(value = "")  @QueryParam("image.supported.resolutions") String imageSupportedResolutions) {
        return delegate.comAdobeCqProjectsImplServletProjectImageServlet(post, apply, delete, action, $location, propertylist, imageQuality, imageSupportedResolutions, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.projects.purge.Scheduler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqProjectsPurgeSchedulerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqProjectsPurgeSchedulerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqProjectsPurgeScheduler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduledpurge.name") String scheduledpurgeName,  @ApiParam(value = "")  @QueryParam("scheduledpurge.purgeActive") Boolean scheduledpurgePurgeActive,  @ApiParam(value = "")  @QueryParam("scheduledpurge.templates") List<String> scheduledpurgeTemplates,  @ApiParam(value = "")  @QueryParam("scheduledpurge.purgeGroups") Boolean scheduledpurgePurgeGroups,  @ApiParam(value = "")  @QueryParam("scheduledpurge.purgeAssets") Boolean scheduledpurgePurgeAssets,  @ApiParam(value = "")  @QueryParam("scheduledpurge.terminateRunningWorkflows") Boolean scheduledpurgeTerminateRunningWorkflows,  @ApiParam(value = "")  @QueryParam("scheduledpurge.daysold") Integer scheduledpurgeDaysold,  @ApiParam(value = "")  @QueryParam("scheduledpurge.saveThreshold") Integer scheduledpurgeSaveThreshold) {
        return delegate.comAdobeCqProjectsPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgePurgeActive, scheduledpurgeTemplates, scheduledpurgePurgeGroups, scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold, scheduledpurgeSaveThreshold, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScheduledExporterImplScheduledExporterImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("include.paths") List<String> includePaths,  @ApiParam(value = "")  @QueryParam("exporter.user") String exporterUser) {
        return delegate.comAdobeCqScheduledExporterImplScheduledExporterImpl(post, apply, delete, action, $location, propertylist, includePaths, exporterUser, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.analytics.impl.url") String comAdobeCqScreensAnalyticsImplUrl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.analytics.impl.apikey") String comAdobeCqScreensAnalyticsImplApikey,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.analytics.impl.project") String comAdobeCqScreensAnalyticsImplProject,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.analytics.impl.environment") String comAdobeCqScreensAnalyticsImplEnvironment,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.analytics.impl.sendFrequency") Integer comAdobeCqScreensAnalyticsImplSendFrequency) {
        return delegate.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensDeviceImplDeviceServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensDeviceImplDeviceServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensDeviceImplDeviceService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.aem.screens.player.pingfrequency") Integer comAdobeAemScreensPlayerPingfrequency,  @ApiParam(value = "")  @QueryParam("com.adobe.aem.screens.device.pasword.specialchars") String comAdobeAemScreensDevicePaswordSpecialchars,  @ApiParam(value = "")  @QueryParam("com.adobe.aem.screens.device.pasword.minlowercasechars") Integer comAdobeAemScreensDevicePaswordMinlowercasechars,  @ApiParam(value = "")  @QueryParam("com.adobe.aem.screens.device.pasword.minuppercasechars") Integer comAdobeAemScreensDevicePaswordMinuppercasechars,  @ApiParam(value = "")  @QueryParam("com.adobe.aem.screens.device.pasword.minnumberchars") Integer comAdobeAemScreensDevicePaswordMinnumberchars,  @ApiParam(value = "")  @QueryParam("com.adobe.aem.screens.device.pasword.minspecialchars") Integer comAdobeAemScreensDevicePaswordMinspecialchars,  @ApiParam(value = "")  @QueryParam("com.adobe.aem.screens.device.pasword.minlength") Integer comAdobeAemScreensDevicePaswordMinlength) {
        return delegate.comAdobeCqScreensDeviceImplDeviceService(post, apply, delete, action, $location, propertylist, comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("deviceRegistrationTimeout") Integer deviceRegistrationTimeout) {
        return delegate.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post, apply, delete, action, $location, propertylist, deviceRegistrationTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensImplHandlerChannelsUpdateHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.pagesupdatehandler.imageresourcetypes") List<String> cqPagesupdatehandlerImageresourcetypes,  @ApiParam(value = "")  @QueryParam("cq.pagesupdatehandler.productresourcetypes") List<String> cqPagesupdatehandlerProductresourcetypes,  @ApiParam(value = "")  @QueryParam("cq.pagesupdatehandler.videoresourcetypes") List<String> cqPagesupdatehandlerVideoresourcetypes,  @ApiParam(value = "")  @QueryParam("cq.pagesupdatehandler.dynamicsequenceresourcetypes") List<String> cqPagesupdatehandlerDynamicsequenceresourcetypes,  @ApiParam(value = "")  @QueryParam("cq.pagesupdatehandler.previewmodepaths") List<String> cqPagesupdatehandlerPreviewmodepaths) {
        return delegate.comAdobeCqScreensImplHandlerChannelsUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression) {
        return delegate.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post, apply, delete, action, $location, propertylist, schedulerExpression, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.aem.screens.impl.remote.request_timeout") Integer comAdobeAemScreensImplRemoteRequestTimeout) {
        return delegate.comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post, apply, delete, action, $location, propertylist, comAdobeAemScreensImplRemoteRequestTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensImplScreensChannelPostProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplScreensChannelPostProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensImplScreensChannelPostProcessor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("screens.channels.properties.to.remove") List<String> screensChannelsPropertiesToRemove) {
        return delegate.comAdobeCqScreensImplScreensChannelPostProcessor(post, apply, delete, action, $location, propertylist, screensChannelsPropertiesToRemove, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath") List<String> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency") String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout") Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients") String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver") String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport") Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls") Boolean comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username") String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password") String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword) {
        return delegate.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensMqActivemqImplArtemisJMSProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("global.size") Integer globalSize,  @ApiParam(value = "")  @QueryParam("max.disk.usage") Integer maxDiskUsage,  @ApiParam(value = "")  @QueryParam("persistence.enabled") Boolean persistenceEnabled,  @ApiParam(value = "")  @QueryParam("thread.pool.max.size") Integer threadPoolMaxSize,  @ApiParam(value = "")  @QueryParam("scheduled.thread.pool.max.size") Integer scheduledThreadPoolMaxSize,  @ApiParam(value = "")  @QueryParam("graceful.shutdown.timeout") Integer gracefulShutdownTimeout,  @ApiParam(value = "")  @QueryParam("queues") List<String> queues,  @ApiParam(value = "")  @QueryParam("topics") List<String> topics,  @ApiParam(value = "")  @QueryParam("addresses.max.delivery.attempts") Integer addressesMaxDeliveryAttempts,  @ApiParam(value = "")  @QueryParam("addresses.expiry.delay") Integer addressesExpiryDelay,  @ApiParam(value = "")  @QueryParam("addresses.address.full.message.policy") String addressesAddressFullMessagePolicy,  @ApiParam(value = "")  @QueryParam("addresses.max.size.bytes") Integer addressesMaxSizeBytes,  @ApiParam(value = "")  @QueryParam("addresses.page.size.bytes") Integer addressesPageSizeBytes,  @ApiParam(value = "")  @QueryParam("addresses.page.cache.max.size") Integer addressesPageCacheMaxSize,  @ApiParam(value = "")  @QueryParam("cluster.user") String clusterUser,  @ApiParam(value = "")  @QueryParam("cluster.password") String clusterPassword,  @ApiParam(value = "")  @QueryParam("cluster.call.timeout") Integer clusterCallTimeout,  @ApiParam(value = "")  @QueryParam("cluster.call.failover.timeout") Integer clusterCallFailoverTimeout,  @ApiParam(value = "")  @QueryParam("cluster.client.failure.check.period") Integer clusterClientFailureCheckPeriod,  @ApiParam(value = "")  @QueryParam("cluster.notification.attempts") Integer clusterNotificationAttempts,  @ApiParam(value = "")  @QueryParam("cluster.notification.interval") Integer clusterNotificationInterval,  @ApiParam(value = "")  @QueryParam("id.cache.size") Integer idCacheSize,  @ApiParam(value = "")  @QueryParam("cluster.confirmation.window.size") Integer clusterConfirmationWindowSize,  @ApiParam(value = "")  @QueryParam("cluster.connection.ttl") Integer clusterConnectionTtl,  @ApiParam(value = "")  @QueryParam("cluster.duplicate.detection") Boolean clusterDuplicateDetection,  @ApiParam(value = "")  @QueryParam("cluster.initial.connect.attempts") Integer clusterInitialConnectAttempts,  @ApiParam(value = "")  @QueryParam("cluster.max.retry.interval") Integer clusterMaxRetryInterval,  @ApiParam(value = "")  @QueryParam("cluster.min.large.message.size") Integer clusterMinLargeMessageSize,  @ApiParam(value = "")  @QueryParam("cluster.producer.window.size") Integer clusterProducerWindowSize,  @ApiParam(value = "")  @QueryParam("cluster.reconnect.attempts") Integer clusterReconnectAttempts,  @ApiParam(value = "")  @QueryParam("cluster.retry.interval") Integer clusterRetryInterval,  @ApiParam(value = "")  @QueryParam("cluster.retry.interval.multiplier") BigDecimal clusterRetryIntervalMultiplier) {
        return delegate.comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post, apply, delete, action, $location, propertylist, serviceRanking, globalSize, maxDiskUsage, persistenceEnabled, threadPoolMaxSize, scheduledThreadPoolMaxSize, gracefulShutdownTimeout, queues, topics, addressesMaxDeliveryAttempts, addressesExpiryDelay, addressesAddressFullMessagePolicy, addressesMaxSizeBytes, addressesPageSizeBytes, addressesPageCacheMaxSize, clusterUser, clusterPassword, clusterCallTimeout, clusterCallFailoverTimeout, clusterClientFailureCheckPeriod, clusterNotificationAttempts, clusterNotificationInterval, idCacheSize, clusterConfirmationWindowSize, clusterConnectionTtl, clusterDuplicateDetection, clusterInitialConnectAttempts, clusterMaxRetryInterval, clusterMinLargeMessageSize, clusterProducerWindowSize, clusterReconnectAttempts, clusterRetryInterval, clusterRetryIntervalMultiplier, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath") List<String> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency") String comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency) {
        return delegate.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("disableSmartSync") Boolean disableSmartSync) {
        return delegate.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post, apply, delete, action, $location, propertylist, disableSmartSync, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensSegmentationImplSegmentationFeatureFlag( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enableDataTriggeredContent") Boolean enableDataTriggeredContent) {
        return delegate.comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post, apply, delete, action, $location, propertylist, enableDataTriggeredContent, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("dispatcher.address") String dispatcherAddress,  @ApiParam(value = "")  @QueryParam("dispatcher.filter.allowed") List<String> dispatcherFilterAllowed,  @ApiParam(value = "")  @QueryParam("dispatcher.filter.blocked") List<String> dispatcherFilterBlocked) {
        return delegate.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, dispatcherAddress, dispatcherFilterAllowed, dispatcherFilterBlocked, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("webserver.address") String webserverAddress) {
        return delegate.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, webserverAddress, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialAccountverificationImplAccountManagementConfigIm( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enable") Boolean enable,  @ApiParam(value = "")  @QueryParam("ttl1") Integer ttl1,  @ApiParam(value = "")  @QueryParam("ttl2") Integer ttl2) {
        return delegate.comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post, apply, delete, action, $location, propertylist, enable, ttl1, ttl2, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priority") Integer priority) {
        return delegate.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post, apply, delete, action, $location, propertylist, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priority") Integer priority) {
        return delegate.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post, apply, delete, action, $location, propertylist, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.topics") String eventTopics,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter) {
        return delegate.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsListenerImplModerationEventExten( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("accepted") Boolean accepted,  @ApiParam(value = "")  @QueryParam("ranked") Integer ranked) {
        return delegate.comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post, apply, delete, action, $location, propertylist, accepted, ranked, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("ranking") Integer ranking,  @ApiParam(value = "")  @QueryParam("enable") Boolean enable) {
        return delegate.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post, apply, delete, action, $location, propertylist, ranking, enable, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("streamPath") String streamPath,  @ApiParam(value = "")  @QueryParam("streamName") String streamName) {
        return delegate.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post, apply, delete, action, $location, propertylist, streamPath, streamName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("MaxRetry") Integer maxRetry,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist) {
        return delegate.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post, apply, delete, action, $location, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") String attachmentTypeBlacklist,  @ApiParam(value = "")  @QueryParam("extension.order") Integer extensionOrder) {
        return delegate.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post, apply, delete, action, $location, propertylist, attachmentTypeBlacklist, extensionOrder, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCalendarServletsTimeZoneServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("timezones.expirytime") Integer timezonesExpirytime) {
        return delegate.comAdobeCqSocialCalendarServletsTimeZoneServlet(post, apply, delete, action, $location, propertylist, timezonesExpirytime, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("ranking") Integer ranking) {
        return delegate.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post, apply, delete, action, $location, propertylist, ranking, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist) {
        return delegate.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist) {
        return delegate.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("numUserLimit") Integer numUserLimit) {
        return delegate.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post, apply, delete, action, $location, propertylist, numUserLimit, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enableScheduledPostsSearch") Boolean enableScheduledPostsSearch,  @ApiParam(value = "")  @QueryParam("numberOfMinutes") Integer numberOfMinutes,  @ApiParam(value = "")  @QueryParam("maxSearchLimit") Integer maxSearchLimit) {
        return delegate.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post, apply, delete, action, $location, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCorsCORSAuthenticationFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cors.enabling") Boolean corsEnabling) {
        return delegate.comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post, apply, delete, action, $location, propertylist, corsEnabling, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priorityOrder") Integer priorityOrder,  @ApiParam(value = "")  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("context.path") String contextPath) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post, apply, delete, action, $location, propertylist, contextPath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.topics") String eventTopics) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post, apply, delete, action, $location, propertylist, eventTopics, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priorityOrder") Integer priorityOrder,  @ApiParam(value = "")  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("pattern.time") String patternTime,  @ApiParam(value = "")  @QueryParam("pattern.newline") String patternNewline,  @ApiParam(value = "")  @QueryParam("pattern.dayOfMonth") String patternDayOfMonth,  @ApiParam(value = "")  @QueryParam("pattern.month") String patternMonth,  @ApiParam(value = "")  @QueryParam("pattern.year") String patternYear,  @ApiParam(value = "")  @QueryParam("pattern.date") String patternDate,  @ApiParam(value = "")  @QueryParam("pattern.dateTime") String patternDateTime,  @ApiParam(value = "")  @QueryParam("pattern.email") String patternEmail) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post, apply, delete, action, $location, propertylist, patternTime, patternNewline, patternDayOfMonth, patternMonth, patternYear, patternDate, patternDateTime, patternEmail, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("email.name") String emailName,  @ApiParam(value = "")  @QueryParam("email.createPostFromReply") Boolean emailCreatePostFromReply,  @ApiParam(value = "")  @QueryParam("email.addCommentIdTo") String emailAddCommentIdTo,  @ApiParam(value = "")  @QueryParam("email.subjectMaximumLength") Integer emailSubjectMaximumLength,  @ApiParam(value = "")  @QueryParam("email.replyToAddress") String emailReplyToAddress,  @ApiParam(value = "")  @QueryParam("email.replyToDelimiter") String emailReplyToDelimiter,  @ApiParam(value = "")  @QueryParam("email.trackerIdPrefixInSubject") String emailTrackerIdPrefixInSubject,  @ApiParam(value = "")  @QueryParam("email.trackerIdPrefixInBody") String emailTrackerIdPrefixInBody,  @ApiParam(value = "")  @QueryParam("email.asHTML") Boolean emailAsHTML,  @ApiParam(value = "")  @QueryParam("email.defaultUserName") String emailDefaultUserName,  @ApiParam(value = "")  @QueryParam("email.templates.rootPath") String emailTemplatesRootPath) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post, apply, delete, action, $location, propertylist, emailName, emailCreatePostFromReply, emailAddCommentIdTo, emailSubjectMaximumLength, emailReplyToAddress, emailReplyToDelimiter, emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody, emailAsHTML, emailDefaultUserName, emailTemplatesRootPath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("connectProtocol") String connectProtocol) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post, apply, delete, action, $location, propertylist, connectProtocol, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priorityOrder") Integer priorityOrder,  @ApiParam(value = "")  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priorityOrder") Integer priorityOrder,  @ApiParam(value = "")  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priorityOrder") Integer priorityOrder,  @ApiParam(value = "")  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priorityOrder") Integer priorityOrder,  @ApiParam(value = "")  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns,  @ApiParam(value = "")  @QueryParam("priorityOrder") Integer priorityOrder) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post, apply, delete, action, $location, propertylist, replyEmailPatterns, priorityOrder, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priorityOrder") Integer priorityOrder,  @ApiParam(value = "")  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns) {
        return delegate.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("numberOfDays") Integer numberOfDays,  @ApiParam(value = "")  @QueryParam("ageOfFile") Integer ageOfFile) {
        return delegate.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post, apply, delete, action, $location, propertylist, numberOfDays, ageOfFile, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.topics") String eventTopics,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter,  @ApiParam(value = "")  @QueryParam("verbs") List<String> verbs) {
        return delegate.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, verbs, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enable") Boolean enable,  @ApiParam(value = "")  @QueryParam("UGCLimit") Integer ugCLimit,  @ApiParam(value = "")  @QueryParam("ugcLimitDuration") Integer ugcLimitDuration,  @ApiParam(value = "")  @QueryParam("domains") List<String> domains,  @ApiParam(value = "")  @QueryParam("toList") List<String> toList) {
        return delegate.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post, apply, delete, action, $location, propertylist, enable, ugCLimit, ugcLimitDuration, domains, toList, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialConnectOauthImplFacebookProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.provider.id") String oauthProviderId,  @ApiParam(value = "")  @QueryParam("oauth.cloud.config.root") String oauthCloudConfigRoot,  @ApiParam(value = "")  @QueryParam("provider.config.root") String providerConfigRoot,  @ApiParam(value = "")  @QueryParam("provider.config.create.tags.enabled") Boolean providerConfigCreateTagsEnabled,  @ApiParam(value = "")  @QueryParam("provider.config.user.folder") String providerConfigUserFolder,  @ApiParam(value = "")  @QueryParam("provider.config.facebook.fetch.fields") Boolean providerConfigFacebookFetchFields,  @ApiParam(value = "")  @QueryParam("provider.config.facebook.fields") List<String> providerConfigFacebookFields,  @ApiParam(value = "")  @QueryParam("provider.config.refresh.userdata.enabled") Boolean providerConfigRefreshUserdataEnabled) {
        return delegate.comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigCreateTagsEnabled, providerConfigUserFolder, providerConfigFacebookFetchFields, providerConfigFacebookFields, providerConfigRefreshUserdataEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") List<String> path,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking) {
        return delegate.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post, apply, delete, action, $location, propertylist, path, serviceRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("facebook") List<String> facebook,  @ApiParam(value = "")  @QueryParam("twitter") List<String> twitter,  @ApiParam(value = "")  @QueryParam("provider.config.user.folder") String providerConfigUserFolder) {
        return delegate.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post, apply, delete, action, $location, propertylist, facebook, twitter, providerConfigUserFolder, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialConnectOauthImplTwitterProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.provider.id") String oauthProviderId,  @ApiParam(value = "")  @QueryParam("oauth.cloud.config.root") String oauthCloudConfigRoot,  @ApiParam(value = "")  @QueryParam("provider.config.root") String providerConfigRoot,  @ApiParam(value = "")  @QueryParam("provider.config.user.folder") String providerConfigUserFolder,  @ApiParam(value = "")  @QueryParam("provider.config.twitter.enable.params") Boolean providerConfigTwitterEnableParams,  @ApiParam(value = "")  @QueryParam("provider.config.twitter.params") List<String> providerConfigTwitterParams,  @ApiParam(value = "")  @QueryParam("provider.config.refresh.userdata.enabled") Boolean providerConfigRefreshUserdataEnabled) {
        return delegate.comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigUserFolder, providerConfigTwitterEnableParams, providerConfigTwitterParams, providerConfigRefreshUserdataEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.social.content.fragments.services.enabled") Boolean cqSocialContentFragmentsServicesEnabled,  @ApiParam(value = "")  @QueryParam("cq.social.content.fragments.services.waitTimeSeconds") Integer cqSocialContentFragmentsServicesWaitTimeSeconds) {
        return delegate.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post, apply, delete, action, $location, propertylist, cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialDatastoreAsImplASResourceProviderFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("version.id") String versionId,  @ApiParam(value = "")  @QueryParam("cache.on") Boolean cacheOn,  @ApiParam(value = "")  @QueryParam("concurrency.level") Integer concurrencyLevel,  @ApiParam(value = "")  @QueryParam("cache.start.size") Integer cacheStartSize,  @ApiParam(value = "")  @QueryParam("cache.ttl") Integer cacheTtl,  @ApiParam(value = "")  @QueryParam("cache.size") Integer cacheSize,  @ApiParam(value = "")  @QueryParam("time.limit") Integer timeLimit) {
        return delegate.comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post, apply, delete, action, $location, propertylist, versionId, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, timeLimit, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("solr.zk.timeout") String solrZkTimeout,  @ApiParam(value = "")  @QueryParam("solr.commit") String solrCommit,  @ApiParam(value = "")  @QueryParam("cache.on") Boolean cacheOn,  @ApiParam(value = "")  @QueryParam("concurrency.level") Integer concurrencyLevel,  @ApiParam(value = "")  @QueryParam("cache.start.size") Integer cacheStartSize,  @ApiParam(value = "")  @QueryParam("cache.ttl") Integer cacheTtl,  @ApiParam(value = "")  @QueryParam("cache.size") Integer cacheSize) {
        return delegate.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("solr.zk.timeout") String solrZkTimeout,  @ApiParam(value = "")  @QueryParam("solr.commit") String solrCommit,  @ApiParam(value = "")  @QueryParam("cache.on") Boolean cacheOn,  @ApiParam(value = "")  @QueryParam("concurrency.level") Integer concurrencyLevel,  @ApiParam(value = "")  @QueryParam("cache.start.size") Integer cacheStartSize,  @ApiParam(value = "")  @QueryParam("cache.ttl") Integer cacheTtl,  @ApiParam(value = "")  @QueryParam("cache.size") Integer cacheSize) {
        return delegate.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("isMemberCheck") Boolean isMemberCheck) {
        return delegate.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post, apply, delete, action, $location, propertylist, isMemberCheck, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("isMemberCheck") Boolean isMemberCheck) {
        return delegate.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post, apply, delete, action, $location, propertylist, isMemberCheck, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist) {
        return delegate.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post, apply, delete, action, $location, propertylist, fieldWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist) {
        return delegate.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post, apply, delete, action, $location, propertylist, fieldWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking) {
        return delegate.comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post, apply, delete, action, $location, propertylist, serviceRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.selectors") String slingServletSelectors,  @ApiParam(value = "")  @QueryParam("sling.servlet.extensions") String slingServletExtensions) {
        return delegate.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist) {
        return delegate.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialForumClientEndpointsImplForumOperationsService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist) {
        return delegate.comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialForumDispatcherImplFlushOperations( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("extension.order") Integer extensionOrder,  @ApiParam(value = "")  @QueryParam("flush.forumontopic") Boolean flushForumontopic) {
        return delegate.comAdobeCqSocialForumDispatcherImplFlushOperations(post, apply, delete, action, $location, propertylist, extensionOrder, flushForumontopic, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("group.listing.pagination.enable") Boolean groupListingPaginationEnable,  @ApiParam(value = "")  @QueryParam("group.listing.lazyloading.enable") Boolean groupListingLazyloadingEnable,  @ApiParam(value = "")  @QueryParam("page.size") Integer pageSize,  @ApiParam(value = "")  @QueryParam("priority") Integer priority) {
        return delegate.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post, apply, delete, action, $location, propertylist, groupListingPaginationEnable, groupListingLazyloadingEnable, pageSize, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialGroupImplGroupServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialGroupImplGroupServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialGroupImplGroupServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("maxWaitTime") Integer maxWaitTime,  @ApiParam(value = "")  @QueryParam("minWaitBetweenRetries") Integer minWaitBetweenRetries) {
        return delegate.comAdobeCqSocialGroupImplGroupServiceImpl(post, apply, delete, action, $location, propertylist, maxWaitTime, minWaitBetweenRetries, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("parameter.guava.cache.enabled") Boolean parameterGuavaCacheEnabled,  @ApiParam(value = "")  @QueryParam("parameter.guava.cache.params") String parameterGuavaCacheParams,  @ApiParam(value = "")  @QueryParam("parameter.guava.cache.reload") Boolean parameterGuavaCacheReload,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking) {
        return delegate.comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post, apply, delete, action, $location, propertylist, parameterGuavaCacheEnabled, parameterGuavaCacheParams, parameterGuavaCacheReload, serviceRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist) {
        return delegate.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist) {
        return delegate.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist) {
        return delegate.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post, apply, delete, action, $location, propertylist, fieldWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist) {
        return delegate.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post, apply, delete, action, $location, propertylist, fieldWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("everyoneLimit") Integer everyoneLimit,  @ApiParam(value = "")  @QueryParam("priority") Integer priority) {
        return delegate.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post, apply, delete, action, $location, propertylist, everyoneLimit, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("message.properties") List<String> messageProperties,  @ApiParam(value = "")  @QueryParam("messageBoxSizeLimit") Integer messageBoxSizeLimit,  @ApiParam(value = "")  @QueryParam("messageCountLimit") Integer messageCountLimit,  @ApiParam(value = "")  @QueryParam("notifyFailure") Boolean notifyFailure,  @ApiParam(value = "")  @QueryParam("failureMessageFrom") String failureMessageFrom,  @ApiParam(value = "")  @QueryParam("failureTemplatePath") String failureTemplatePath,  @ApiParam(value = "")  @QueryParam("maxRetries") Integer maxRetries,  @ApiParam(value = "")  @QueryParam("minWaitBetweenRetries") Integer minWaitBetweenRetries,  @ApiParam(value = "")  @QueryParam("countUpdatePoolSize") Integer countUpdatePoolSize,  @ApiParam(value = "")  @QueryParam("inbox.path") String inboxPath,  @ApiParam(value = "")  @QueryParam("sentitems.path") String sentitemsPath,  @ApiParam(value = "")  @QueryParam("supportAttachments") Boolean supportAttachments,  @ApiParam(value = "")  @QueryParam("supportGroupMessaging") Boolean supportGroupMessaging,  @ApiParam(value = "")  @QueryParam("maxTotalRecipients") Integer maxTotalRecipients,  @ApiParam(value = "")  @QueryParam("batchSize") Integer batchSize,  @ApiParam(value = "")  @QueryParam("maxTotalAttachmentSize") Integer maxTotalAttachmentSize,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,  @ApiParam(value = "")  @QueryParam("allowedAttachmentTypes") List<String> allowedAttachmentTypes,  @ApiParam(value = "")  @QueryParam("serviceSelector") String serviceSelector,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist) {
        return delegate.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post, apply, delete, action, $location, propertylist, messageProperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPath, sentitemsPath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("resourceType.filters") List<String> resourceTypeFilters,  @ApiParam(value = "")  @QueryParam("priority") Integer priority) {
        return delegate.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialModerationDashboardApiModerationDashboardSocial( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priority") Integer priority) {
        return delegate.comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post, apply, delete, action, $location, propertylist, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priority") Integer priority) {
        return delegate.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post, apply, delete, action, $location, propertylist, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("resourceType.filters") List<String> resourceTypeFilters,  @ApiParam(value = "")  @QueryParam("priority") Integer priority) {
        return delegate.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialNotificationsImplMentionsRouterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialNotificationsImplMentionsRouterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialNotificationsImplMentionsRouter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.topics") String eventTopics,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter) {
        return delegate.comAdobeCqSocialNotificationsImplMentionsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialNotificationsImplNotificationManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("max.unread.notification.count") Integer maxUnreadNotificationCount) {
        return delegate.comAdobeCqSocialNotificationsImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, maxUnreadNotificationCount, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialNotificationsImplNotificationsRouter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.topics") String eventTopics,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter) {
        return delegate.comAdobeCqSocialNotificationsImplNotificationsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist) {
        return delegate.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.social.reporting.analytics.polling.importer.interval") Integer cqSocialReportingAnalyticsPollingImporterInterval,  @ApiParam(value = "")  @QueryParam("cq.social.reporting.analytics.polling.importer.pageSize") Integer cqSocialReportingAnalyticsPollingImporterPageSize) {
        return delegate.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post, apply, delete, action, $location, propertylist, cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("report.fetch.delay") Integer reportFetchDelay) {
        return delegate.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post, apply, delete, action, $location, propertylist, reportFetchDelay, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.social.console.analytics.sites.mapping") List<String> cqSocialConsoleAnalyticsSitesMapping,  @ApiParam(value = "")  @QueryParam("priority") Integer priority) {
        return delegate.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsSitesMapping, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @ApiParam(value = "")  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist) {
        return delegate.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.selectors") String slingServletSelectors,  @ApiParam(value = "")  @QueryParam("sling.servlet.extensions") String slingServletExtensions) {
        return delegate.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.selectors") List<String> slingServletSelectors,  @ApiParam(value = "")  @QueryParam("sling.servlet.extensions") String slingServletExtensions) {
        return delegate.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialScoringImplScoringEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialScoringImplScoringEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialScoringImplScoringEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.topics") String eventTopics,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter) {
        return delegate.comAdobeCqSocialScoringImplScoringEventListener(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enableFallback") Boolean enableFallback) {
        return delegate.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post, apply, delete, action, $location, propertylist, enableFallback, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSiteEndpointsImplSiteOperationService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @ApiParam(value = "")  @QueryParam("sitePathFilters") List<String> sitePathFilters,  @ApiParam(value = "")  @QueryParam("sitePackageGroup") String sitePackageGroup) {
        return delegate.comAdobeCqSocialSiteEndpointsImplSiteOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.social.console.analytics.components") List<String> cqSocialConsoleAnalyticsComponents) {
        return delegate.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsComponents, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSiteImplSiteConfiguratorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("componentsUsingTags") List<String> componentsUsingTags) {
        return delegate.comAdobeCqSocialSiteImplSiteConfiguratorImpl(post, apply, delete, action, $location, propertylist, componentsUsingTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSrpImplSocialSolrConnector( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("srp.type") String srpType) {
        return delegate.comAdobeCqSocialSrpImplSocialSolrConnector(post, apply, delete, action, $location, propertylist, srpType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSyncImplDiffChangesObserverInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplDiffChangesObserverInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSyncImplDiffChangesObserver( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("agentName") String agentName,  @ApiParam(value = "")  @QueryParam("diffPath") String diffPath,  @ApiParam(value = "")  @QueryParam("propertyNames") String propertyNames) {
        return delegate.comAdobeCqSocialSyncImplDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, propertyNames, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSyncImplGroupSyncListenerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("nodetypes") List<String> nodetypes,  @ApiParam(value = "")  @QueryParam("ignorableprops") List<String> ignorableprops,  @ApiParam(value = "")  @QueryParam("ignorablenodes") String ignorablenodes,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("distfolders") String distfolders) {
        return delegate.comAdobeCqSocialSyncImplGroupSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSyncImplPublisherSyncServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("activeRunModes") List<String> activeRunModes) {
        return delegate.comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post, apply, delete, action, $location, propertylist, activeRunModes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSyncImplUserSyncListenerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("nodetypes") List<String> nodetypes,  @ApiParam(value = "")  @QueryParam("ignorableprops") List<String> ignorableprops,  @ApiParam(value = "")  @QueryParam("ignorablenodes") List<String> ignorablenodes,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("distfolders") List<String> distfolders) {
        return delegate.comAdobeCqSocialSyncImplUserSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialTranslationImplTranslationServiceConfigManager( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("translate.language") String translateLanguage,  @ApiParam(value = "")  @QueryParam("translate.display") String translateDisplay,  @ApiParam(value = "")  @QueryParam("translate.attribution") Boolean translateAttribution,  @ApiParam(value = "")  @QueryParam("translate.caching") String translateCaching,  @ApiParam(value = "")  @QueryParam("translate.smart.rendering") String translateSmartRendering,  @ApiParam(value = "")  @QueryParam("translate.caching.duration") String translateCachingDuration,  @ApiParam(value = "")  @QueryParam("translate.session.save.interval") String translateSessionSaveInterval,  @ApiParam(value = "")  @QueryParam("translate.session.save.batchLimit") String translateSessionSaveBatchLimit) {
        return delegate.comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post, apply, delete, action, $location, propertylist, translateLanguage, translateDisplay, translateAttribution, translateCaching, translateSmartRendering, translateCachingDuration, translateSessionSaveInterval, translateSessionSaveBatchLimit, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialTranslationImplUGCLanguageDetector( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.topics") String eventTopics,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter,  @ApiParam(value = "")  @QueryParam("translate.listener.type") List<String> translateListenerType,  @ApiParam(value = "")  @QueryParam("translate.property.list") List<String> translatePropertyList,  @ApiParam(value = "")  @QueryParam("poolSize") Integer poolSize,  @ApiParam(value = "")  @QueryParam("maxPoolSize") Integer maxPoolSize,  @ApiParam(value = "")  @QueryParam("queueSize") Integer queueSize,  @ApiParam(value = "")  @QueryParam("keepAliveTime") Integer keepAliveTime) {
        return delegate.comAdobeCqSocialTranslationImplUGCLanguageDetector(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, translateListenerType, translatePropertyList, poolSize, maxPoolSize, queueSize, keepAliveTime, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("threadPoolSize") Integer threadPoolSize,  @ApiParam(value = "")  @QueryParam("delayTime") Integer delayTime,  @ApiParam(value = "")  @QueryParam("workerSleepTime") Integer workerSleepTime) {
        return delegate.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post, apply, delete, action, $location, propertylist, threadPoolSize, delayTime, workerSleepTime, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("poolSize") Integer poolSize,  @ApiParam(value = "")  @QueryParam("maxPoolSize") Integer maxPoolSize,  @ApiParam(value = "")  @QueryParam("queueSize") Integer queueSize,  @ApiParam(value = "")  @QueryParam("keepAliveTime") Integer keepAliveTime) {
        return delegate.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post, apply, delete, action, $location, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("isPrimaryPublisher") Boolean isPrimaryPublisher) {
        return delegate.comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post, apply, delete, action, $location, propertylist, isPrimaryPublisher, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseImplSocialUtilsImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("legacyCloudUGCPathMapping") Boolean legacyCloudUGCPathMapping) {
        return delegate.comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post, apply, delete, action, $location, propertylist, legacyCloudUGCPathMapping, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("automoderation.sequence") List<String> automoderationSequence,  @ApiParam(value = "")  @QueryParam("automoderation.onfailurestop") Boolean automoderationOnfailurestop) {
        return delegate.comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post, apply, delete, action, $location, propertylist, automoderationSequence, automoderationOnfailurestop, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseModerationImplSentimentProcess( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("watchwords.positive") List<String> watchwordsPositive,  @ApiParam(value = "")  @QueryParam("watchwords.negative") List<String> watchwordsNegative,  @ApiParam(value = "")  @QueryParam("watchwords.path") String watchwordsPath,  @ApiParam(value = "")  @QueryParam("sentiment.path") String sentimentPath) {
        return delegate.comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post, apply, delete, action, $location, propertylist, watchwordsPositive, watchwordsNegative, watchwordsPath, sentimentPath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("default.attachment.type.blacklist") List<String> defaultAttachmentTypeBlacklist,  @ApiParam(value = "")  @QueryParam("baseline.attachment.type.blacklist") List<String> baselineAttachmentTypeBlacklist) {
        return delegate.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("parameter.whitelist") List<String> parameterWhitelist,  @ApiParam(value = "")  @QueryParam("parameter.whitelist.prefixes") List<String> parameterWhitelistPrefixes,  @ApiParam(value = "")  @QueryParam("binary.parameter.whitelist") List<String> binaryParameterWhitelist,  @ApiParam(value = "")  @QueryParam("modifier.whitelist") List<String> modifierWhitelist,  @ApiParam(value = "")  @QueryParam("operation.whitelist") List<String> operationWhitelist,  @ApiParam(value = "")  @QueryParam("operation.whitelist.prefixes") List<String> operationWhitelistPrefixes,  @ApiParam(value = "")  @QueryParam("typehint.whitelist") List<String> typehintWhitelist,  @ApiParam(value = "")  @QueryParam("resourcetype.whitelist") List<String> resourcetypeWhitelist) {
        return delegate.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.extensions") String slingServletExtensions,  @ApiParam(value = "")  @QueryParam("sling.servlet.paths") String slingServletPaths,  @ApiParam(value = "")  @QueryParam("sling.servlet.methods") String slingServletMethods) {
        return delegate.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post, apply, delete, action, $location, propertylist, slingServletExtensions, slingServletPaths, slingServletMethods, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUserImplTransportHttpToPublisher( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enable") Boolean enable,  @ApiParam(value = "")  @QueryParam("agent.configuration") List<String> agentConfiguration,  @ApiParam(value = "")  @QueryParam("context.path") String contextPath,  @ApiParam(value = "")  @QueryParam("disabled.cipher.suites") List<String> disabledCipherSuites,  @ApiParam(value = "")  @QueryParam("enabled.cipher.suites") List<String> enabledCipherSuites) {
        return delegate.comAdobeCqSocialUserImplTransportHttpToPublisher(post, apply, delete, action, $location, propertylist, enable, agentConfiguration, contextPath, disabledCipherSuites, enabledCipherSuites, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("resource.types") List<String> resourceTypes) {
        return delegate.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post, apply, delete, action, $location, propertylist, resourceTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqUpgradesCleanupImplUpgradeContentCleanup( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("delete.path.regexps") List<String> deletePathRegexps,  @ApiParam(value = "")  @QueryParam("delete.sql2.query") String deleteSql2Query) {
        return delegate.comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post, apply, delete, action, $location, propertylist, deletePathRegexps, deleteSql2Query, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("delete.name.regexps") List<String> deleteNameRegexps) {
        return delegate.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post, apply, delete, action, $location, propertylist, deleteNameRegexps, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("threshold") Integer threshold,  @ApiParam(value = "")  @QueryParam("jobTopicName") String jobTopicName,  @ApiParam(value = "")  @QueryParam("emailEnabled") Boolean emailEnabled) {
        return delegate.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression,  @ApiParam(value = "")  @QueryParam("job.purge.threshold") Integer jobPurgeThreshold,  @ApiParam(value = "")  @QueryParam("job.purge.max.jobs") Integer jobPurgeMaxJobs) {
        return delegate.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, jobPurgeThreshold, jobPurgeMaxJobs, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("threshold") Integer threshold,  @ApiParam(value = "")  @QueryParam("jobTopicName") String jobTopicName,  @ApiParam(value = "")  @QueryParam("emailEnabled") Boolean emailEnabled) {
        return delegate.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("threshold") Integer threshold,  @ApiParam(value = "")  @QueryParam("jobTopicName") String jobTopicName,  @ApiParam(value = "")  @QueryParam("emailEnabled") Boolean emailEnabled) {
        return delegate.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmLaunchesImplLaunchesEventHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter,  @ApiParam(value = "")  @QueryParam("launches.eventhandler.threadpool.maxsize") Integer launchesEventhandlerThreadpoolMaxsize,  @ApiParam(value = "")  @QueryParam("launches.eventhandler.threadpool.priority") String launchesEventhandlerThreadpoolPriority,  @ApiParam(value = "")  @QueryParam("launches.eventhandler.updatelastmodification") Boolean launchesEventhandlerUpdatelastmodification) {
        return delegate.comAdobeCqWcmLaunchesImplLaunchesEventHandler(post, apply, delete, action, $location, propertylist, eventFilter, launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.wcm.qrcode.servlet.whitelist") List<String> cqWcmQrcodeServletWhitelist) {
        return delegate.comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post, apply, delete, action, $location, propertylist, cqWcmQrcodeServletWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("size") Integer size) {
        return delegate.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post, apply, delete, action, $location, propertylist, size, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("syncTranslationState.schedulingFormat") String syncTranslationStateSchedulingFormat,  @ApiParam(value = "")  @QueryParam("schedulingRepeatTranslation.schedulingFormat") String schedulingRepeatTranslationSchedulingFormat,  @ApiParam(value = "")  @QueryParam("syncTranslationState.lockTimeoutInMinutes") String syncTranslationStateLockTimeoutInMinutes,  @ApiParam(value = "")  @QueryParam("export.format") String exportFormat) {
        return delegate.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post, apply, delete, action, $location, propertylist, syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes, exportFormat, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("portal.outboxes") List<String> portalOutboxes,  @ApiParam(value = "")  @QueryParam("draft.data.service") String draftDataService,  @ApiParam(value = "")  @QueryParam("draft.metadata.service") String draftMetadataService,  @ApiParam(value = "")  @QueryParam("submit.data.service") String submitDataService,  @ApiParam(value = "")  @QueryParam("submit.metadata.service") String submitMetadataService,  @ApiParam(value = "")  @QueryParam("pendingSign.data.service") String pendingSignDataService,  @ApiParam(value = "")  @QueryParam("pendingSign.metadata.service") String pendingSignMetadataService) {
        return delegate.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post, apply, delete, action, $location, propertylist, portalOutboxes, draftDataService, draftMetadataService, submitDataService, submitMetadataService, pendingSignDataService, pendingSignMetadataService, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeFdFpConfigFormsPortalSchedulerService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("formportal.interval") String formportalInterval) {
        return delegate.comAdobeFdFpConfigFormsPortalSchedulerService(post, apply, delete, action, $location, propertylist, formportalInterval, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeFormsCommonServiceImplDefaultDataProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("alloweddataFileLocations") List<String> alloweddataFileLocations) {
        return delegate.comAdobeFormsCommonServiceImplDefaultDataProvider(post, apply, delete, action, $location, propertylist, alloweddataFileLocations, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("tempStorageConfig") String tempStorageConfig) {
        return delegate.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post, apply, delete, action, $location, propertylist, tempStorageConfig, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeFormsCommonServletTempCleanUpTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFormsCommonServletTempCleanUpTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeFormsCommonServletTempCleanUpTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression,  @ApiParam(value = "")  @QueryParam("Duration for Temporary Storage") String durationForTemporaryStorage,  @ApiParam(value = "")  @QueryParam("Duration for Anonymous Storage") String durationForAnonymousStorage) {
        return delegate.comAdobeFormsCommonServletTempCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, durationForTemporaryStorage, durationForAnonymousStorage, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAcpPlatformPlatformServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAcpPlatformPlatformServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAcpPlatformPlatformServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("query.limit") Integer queryLimit,  @ApiParam(value = "")  @QueryParam("file.type.extension.map") List<String> fileTypeExtensionMap) {
        return delegate.comAdobeGraniteAcpPlatformPlatformServlet(post, apply, delete, action, $location, propertylist, queryLimit, fileTypeExtensionMap, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteActivitystreamsImplActivityManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("aggregate.relationships") List<String> aggregateRelationships,  @ApiParam(value = "")  @QueryParam("aggregate.descend.virtual") Boolean aggregateDescendVirtual) {
        return delegate.comAdobeGraniteActivitystreamsImplActivityManagerImpl(post, apply, delete, action, $location, propertylist, aggregateRelationships, aggregateDescendVirtual, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAnalyzerBaseSystemStatusServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("disabled") Boolean disabled) {
        return delegate.comAdobeGraniteAnalyzerBaseSystemStatusServlet(post, apply, delete, action, $location, propertylist, disabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("disabled") Boolean disabled) {
        return delegate.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post, apply, delete, action, $location, propertylist, disabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteApicontrollerFilterResolverHookFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cdn.cdn-rewriter") String comAdobeCqCdnCdnRewriter,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cloud-config.components") String comAdobeCqCloudConfigComponents,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cloud-config.core") String comAdobeCqCloudConfigCore,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cloud-config.ui") String comAdobeCqCloudConfigUi,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.com.adobe.cq.editor") String comAdobeCqComAdobeCqEditor,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.com.adobe.cq.projects.core") String comAdobeCqComAdobeCqProjectsCore,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.com.adobe.cq.projects.wcm.core") String comAdobeCqComAdobeCqProjectsWcmCore,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.com.adobe.cq.ui.commons") String comAdobeCqComAdobeCqUiCommons,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.com.adobe.cq.wcm.style") String comAdobeCqComAdobeCqWcmStyle,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cq-activitymap-integration") String comAdobeCqCqActivitymapIntegration,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cq-contexthub-commons") String comAdobeCqCqContexthubCommons,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cq-dtm") String comAdobeCqCqDtm,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cq-healthcheck") String comAdobeCqCqHealthcheck,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cq-multisite-targeting") String comAdobeCqCqMultisiteTargeting,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cq-pre-upgrade-cleanup") String comAdobeCqCqPreUpgradeCleanup,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cq-product-info-provider") String comAdobeCqCqProductInfoProvider,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cq-rest-sites") String comAdobeCqCqRestSites,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.cq-security-hc") String comAdobeCqCqSecurityHc,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.dam.cq-dam-svg-handler") String comAdobeCqDamCqDamSvgHandler,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.dam.cq-scene7-imaging") String comAdobeCqDamCqScene7Imaging,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.dtm-reactor.core") String comAdobeCqDtmReactorCore,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.dtm-reactor.ui") String comAdobeCqDtmReactorUi,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.exp-jspel-resolver") String comAdobeCqExpJspelResolver,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.inbox.cq-inbox") String comAdobeCqInboxCqInbox,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.json-schema-parser") String comAdobeCqJsonSchemaParser,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.media.cq-media-publishing-dps-fp-core") String comAdobeCqMediaCqMediaPublishingDpsFpCore,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.mobile.cq-mobile-caas") String comAdobeCqMobileCqMobileCaas,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.mobile.cq-mobile-index-builder") String comAdobeCqMobileCqMobileIndexBuilder,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.mobile.cq-mobile-phonegap-build") String comAdobeCqMobileCqMobilePhonegapBuild,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.myspell") String comAdobeCqMyspell,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.sample.we.retail.core") String comAdobeCqSampleWeRetailCore,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.com.adobe.cq.screens.dcc") String comAdobeCqScreensComAdobeCqScreensDcc,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.screens.com.adobe.cq.screens.mq.core") String comAdobeCqScreensComAdobeCqScreensMqCore,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-as-provider") String comAdobeCqSocialCqSocialAsProvider,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-badging-basic-impl") String comAdobeCqSocialCqSocialBadgingBasicImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-badging-impl") String comAdobeCqSocialCqSocialBadgingImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-calendar-impl") String comAdobeCqSocialCqSocialCalendarImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-content-fragments-impl") String comAdobeCqSocialCqSocialContentFragmentsImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-enablement-impl") String comAdobeCqSocialCqSocialEnablementImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-graph-impl") String comAdobeCqSocialCqSocialGraphImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-ideation-impl") String comAdobeCqSocialCqSocialIdeationImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-jcr-provider") String comAdobeCqSocialCqSocialJcrProvider,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-members-impl") String comAdobeCqSocialCqSocialMembersImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-ms-provider") String comAdobeCqSocialCqSocialMsProvider,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-notifications-channels-web") String comAdobeCqSocialCqSocialNotificationsChannelsWeb,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-notifications-impl") String comAdobeCqSocialCqSocialNotificationsImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-rdb-provider") String comAdobeCqSocialCqSocialRdbProvider,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-scf-impl") String comAdobeCqSocialCqSocialScfImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-scoring-basic-impl") String comAdobeCqSocialCqSocialScoringBasicImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-scoring-impl") String comAdobeCqSocialCqSocialScoringImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-serviceusers-impl") String comAdobeCqSocialCqSocialServiceusersImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-srp-impl") String comAdobeCqSocialCqSocialSrpImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.cq.social.cq-social-ugcbase-impl") String comAdobeCqSocialCqSocialUgcbaseImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.dam.cq-dam-cfm-impl") String comAdobeDamCqDamCfmImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.forms.foundation-forms-foundation-base") String comAdobeFormsFoundationFormsFoundationBase,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.apicontroller") String comAdobeGraniteApicontroller,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.asset.core") String comAdobeGraniteAssetCore,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.auth.sso") String comAdobeGraniteAuthSso,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.bundles.hc.impl") String comAdobeGraniteBundlesHcImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.compat-router") String comAdobeGraniteCompatRouter,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.conf") String comAdobeGraniteConf,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.conf.ui.core") String comAdobeGraniteConfUiCore,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.cors") String comAdobeGraniteCors,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.crx-explorer") String comAdobeGraniteCrxExplorer,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.crxde-lite") String comAdobeGraniteCrxdeLite,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.crypto.config") String comAdobeGraniteCryptoConfig,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.crypto.extension") String comAdobeGraniteCryptoExtension,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.crypto.file") String comAdobeGraniteCryptoFile,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.crypto.jcr") String comAdobeGraniteCryptoJcr,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.csrf") String comAdobeGraniteCsrf,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.distribution.core") String comAdobeGraniteDistributionCore,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.dropwizard.metrics") String comAdobeGraniteDropwizardMetrics,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.frags.impl") String comAdobeGraniteFragsImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.gibson") String comAdobeGraniteGibson,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.infocollector") String comAdobeGraniteInfocollector,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.installer.factory.packages") String comAdobeGraniteInstallerFactoryPackages,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.jetty.ssl") String comAdobeGraniteJettySsl,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.jobs.async") String comAdobeGraniteJobsAsync,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.maintenance.oak") String comAdobeGraniteMaintenanceOak,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.monitoring.core") String comAdobeGraniteMonitoringCore,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.queries") String comAdobeGraniteQueries,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.replication.hc.impl") String comAdobeGraniteReplicationHcImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.repository.checker") String comAdobeGraniteRepositoryChecker,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.repository.hc.impl") String comAdobeGraniteRepositoryHcImpl,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.rest.assets") String comAdobeGraniteRestAssets,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.security.ui") String comAdobeGraniteSecurityUi,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.startup") String comAdobeGraniteStartup,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.tagsoup") String comAdobeGraniteTagsoup,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.taskmanagement.core") String comAdobeGraniteTaskmanagementCore,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.taskmanagement.workflow") String comAdobeGraniteTaskmanagementWorkflow,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.ui.clientlibs.compiler.less") String comAdobeGraniteUiClientlibsCompilerLess,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.ui.clientlibs.processor.gcc") String comAdobeGraniteUiClientlibsProcessorGcc,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.webconsole.plugins") String comAdobeGraniteWebconsolePlugins,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.workflow.console") String comAdobeGraniteWorkflowConsole,  @ApiParam(value = "")  @QueryParam("com.adobe.xmp.worker.files.native.fragment.linux") String comAdobeXmpWorkerFilesNativeFragmentLinux,  @ApiParam(value = "")  @QueryParam("com.adobe.xmp.worker.files.native.fragment.macosx") String comAdobeXmpWorkerFilesNativeFragmentMacosx,  @ApiParam(value = "")  @QueryParam("com.adobe.xmp.worker.files.native.fragment.win") String comAdobeXmpWorkerFilesNativeFragmentWin,  @ApiParam(value = "")  @QueryParam("com.day.commons.osgi.wrapper.simple-jndi") String comDayCommonsOsgiWrapperSimpleJndi,  @ApiParam(value = "")  @QueryParam("com.day.cq.cq-authhandler") String comDayCqCqAuthhandler,  @ApiParam(value = "")  @QueryParam("com.day.cq.cq-compat-configupdate") String comDayCqCqCompatConfigupdate,  @ApiParam(value = "")  @QueryParam("com.day.cq.cq-licensebranding") String comDayCqCqLicensebranding,  @ApiParam(value = "")  @QueryParam("com.day.cq.cq-notifcation-impl") String comDayCqCqNotifcationImpl,  @ApiParam(value = "")  @QueryParam("com.day.cq.cq-replication-audit") String comDayCqCqReplicationAudit,  @ApiParam(value = "")  @QueryParam("com.day.cq.cq-search-ext") String comDayCqCqSearchExt,  @ApiParam(value = "")  @QueryParam("com.day.cq.dam.cq-dam-annotation-print") String comDayCqDamCqDamAnnotationPrint,  @ApiParam(value = "")  @QueryParam("com.day.cq.dam.cq-dam-asset-usage") String comDayCqDamCqDamAssetUsage,  @ApiParam(value = "")  @QueryParam("com.day.cq.dam.cq-dam-s7dam") String comDayCqDamCqDamS7dam,  @ApiParam(value = "")  @QueryParam("com.day.cq.dam.cq-dam-similaritysearch") String comDayCqDamCqDamSimilaritysearch,  @ApiParam(value = "")  @QueryParam("com.day.cq.dam.dam-webdav-support") String comDayCqDamDamWebdavSupport,  @ApiParam(value = "")  @QueryParam("com.day.cq.pre-upgrade-tasks") String comDayCqPreUpgradeTasks,  @ApiParam(value = "")  @QueryParam("com.day.cq.replication.extensions") String comDayCqReplicationExtensions,  @ApiParam(value = "")  @QueryParam("com.day.cq.wcm.cq-msm-core") String comDayCqWcmCqMsmCore,  @ApiParam(value = "")  @QueryParam("com.day.cq.wcm.cq-wcm-translation") String comDayCqWcmCqWcmTranslation,  @ApiParam(value = "")  @QueryParam("day-commons-jrawio") String dayCommonsJrawio,  @ApiParam(value = "")  @QueryParam("org.apache.aries.jmx.whiteboard") String orgApacheAriesJmxWhiteboard,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.sslfilter") String orgApacheFelixHttpSslfilter,  @ApiParam(value = "")  @QueryParam("org.apache.felix.org.apache.felix.threaddump") String orgApacheFelixOrgApacheFelixThreaddump,  @ApiParam(value = "")  @QueryParam("org.apache.felix.webconsole.plugins.ds") String orgApacheFelixWebconsolePluginsDs,  @ApiParam(value = "")  @QueryParam("org.apache.felix.webconsole.plugins.event") String orgApacheFelixWebconsolePluginsEvent,  @ApiParam(value = "")  @QueryParam("org.apache.felix.webconsole.plugins.memoryusage") String orgApacheFelixWebconsolePluginsMemoryusage,  @ApiParam(value = "")  @QueryParam("org.apache.felix.webconsole.plugins.packageadmin") String orgApacheFelixWebconsolePluginsPackageadmin,  @ApiParam(value = "")  @QueryParam("org.apache.jackrabbit.oak-auth-ldap") String orgApacheJackrabbitOakAuthLdap,  @ApiParam(value = "")  @QueryParam("org.apache.jackrabbit.oak-segment-tar") String orgApacheJackrabbitOakSegmentTar,  @ApiParam(value = "")  @QueryParam("org.apache.jackrabbit.oak-solr-osgi") String orgApacheJackrabbitOakSolrOsgi,  @ApiParam(value = "")  @QueryParam("org.apache.sling.bundleresource.impl") String orgApacheSlingBundleresourceImpl,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.fsclassloader") String orgApacheSlingCommonsFsclassloader,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.webconsole") String orgApacheSlingCommonsLogWebconsole,  @ApiParam(value = "")  @QueryParam("org.apache.sling.datasource") String orgApacheSlingDatasource,  @ApiParam(value = "")  @QueryParam("org.apache.sling.discovery.base") String orgApacheSlingDiscoveryBase,  @ApiParam(value = "")  @QueryParam("org.apache.sling.discovery.oak") String orgApacheSlingDiscoveryOak,  @ApiParam(value = "")  @QueryParam("org.apache.sling.discovery.support") String orgApacheSlingDiscoverySupport,  @ApiParam(value = "")  @QueryParam("org.apache.sling.distribution.api") String orgApacheSlingDistributionApi,  @ApiParam(value = "")  @QueryParam("org.apache.sling.distribution.core") String orgApacheSlingDistributionCore,  @ApiParam(value = "")  @QueryParam("org.apache.sling.extensions.webconsolesecurityprovider") String orgApacheSlingExtensionsWebconsolesecurityprovider,  @ApiParam(value = "")  @QueryParam("org.apache.sling.hc.webconsole") String orgApacheSlingHcWebconsole,  @ApiParam(value = "")  @QueryParam("org.apache.sling.installer.console") String orgApacheSlingInstallerConsole,  @ApiParam(value = "")  @QueryParam("org.apache.sling.installer.provider.file") String orgApacheSlingInstallerProviderFile,  @ApiParam(value = "")  @QueryParam("org.apache.sling.installer.provider.jcr") String orgApacheSlingInstallerProviderJcr,  @ApiParam(value = "")  @QueryParam("org.apache.sling.jcr.davex") String orgApacheSlingJcrDavex,  @ApiParam(value = "")  @QueryParam("org.apache.sling.jcr.resourcesecurity") String orgApacheSlingJcrResourcesecurity,  @ApiParam(value = "")  @QueryParam("org.apache.sling.jmx.provider") String orgApacheSlingJmxProvider,  @ApiParam(value = "")  @QueryParam("org.apache.sling.launchpad.installer") String orgApacheSlingLaunchpadInstaller,  @ApiParam(value = "")  @QueryParam("org.apache.sling.models.impl") String orgApacheSlingModelsImpl,  @ApiParam(value = "")  @QueryParam("org.apache.sling.repoinit.parser") String orgApacheSlingRepoinitParser,  @ApiParam(value = "")  @QueryParam("org.apache.sling.resource.inventory") String orgApacheSlingResourceInventory,  @ApiParam(value = "")  @QueryParam("org.apache.sling.resourceresolver") String orgApacheSlingResourceresolver,  @ApiParam(value = "")  @QueryParam("org.apache.sling.scripting.javascript") String orgApacheSlingScriptingJavascript,  @ApiParam(value = "")  @QueryParam("org.apache.sling.scripting.jst") String orgApacheSlingScriptingJst,  @ApiParam(value = "")  @QueryParam("org.apache.sling.scripting.sightly.js.provider") String orgApacheSlingScriptingSightlyJsProvider,  @ApiParam(value = "")  @QueryParam("org.apache.sling.scripting.sightly.models.provider") String orgApacheSlingScriptingSightlyModelsProvider,  @ApiParam(value = "")  @QueryParam("org.apache.sling.security") String orgApacheSlingSecurity,  @ApiParam(value = "")  @QueryParam("org.apache.sling.servlets.compat") String orgApacheSlingServletsCompat,  @ApiParam(value = "")  @QueryParam("org.apache.sling.servlets.get") String orgApacheSlingServletsGet,  @ApiParam(value = "")  @QueryParam("org.apache.sling.startupfilter.disabler") String orgApacheSlingStartupfilterDisabler,  @ApiParam(value = "")  @QueryParam("org.apache.sling.tracer") String orgApacheSlingTracer,  @ApiParam(value = "")  @QueryParam("we.retail.client.app.core") String weRetailClientAppCore) {
        return delegate.comAdobeGraniteApicontrollerFilterResolverHookFactory(post, apply, delete, action, $location, propertylist, comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons, comAdobeCqCqDtm, comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites, comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell, comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller, comAdobeGraniteAssetCore, comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter, comAdobeGraniteConf, comAdobeGraniteConfUiCore, comAdobeGraniteCors, comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf, comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl, comAdobeGraniteGibson, comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore, comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi, comAdobeGraniteStartup, comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding, comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit, comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks, comDayCqReplicationExtensions, comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation, dayCommonsJrawio, orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource, orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi, orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory, orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity, orgApacheSlingServletsCompat, orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer, weRetailClientAppCore, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthCertImplClientCertAuthHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking) {
        return delegate.comAdobeGraniteAuthCertImplClientCertAuthHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthIms( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("configid") String configid,  @ApiParam(value = "")  @QueryParam("scope") String scope) {
        return delegate.comAdobeGraniteAuthIms(post, apply, delete, action, $location, propertylist, configid, scope, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.provider.id") String oauthProviderId) {
        return delegate.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post, apply, delete, action, $location, propertylist, oauthProviderId, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("auth.ims.client.secret") String authImsClientSecret,  @ApiParam(value = "")  @QueryParam("customizer.type") String customizerType) {
        return delegate.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post, apply, delete, action, $location, propertylist, authImsClientSecret, customizerType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.provider.id") String oauthProviderId) {
        return delegate.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post, apply, delete, action, $location, propertylist, oauthProviderId, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsImplIMSProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplIMSProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthImsImplIMSProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.provider.id") String oauthProviderId,  @ApiParam(value = "")  @QueryParam("oauth.provider.ims.authorization.url") String oauthProviderImsAuthorizationUrl,  @ApiParam(value = "")  @QueryParam("oauth.provider.ims.token.url") String oauthProviderImsTokenUrl,  @ApiParam(value = "")  @QueryParam("oauth.provider.ims.profile.url") String oauthProviderImsProfileUrl,  @ApiParam(value = "")  @QueryParam("oauth.provider.ims.extended.details.urls") List<String> oauthProviderImsExtendedDetailsUrls,  @ApiParam(value = "")  @QueryParam("oauth.provider.ims.validate.token.url") String oauthProviderImsValidateTokenUrl,  @ApiParam(value = "")  @QueryParam("oauth.provider.ims.session.property") String oauthProviderImsSessionProperty,  @ApiParam(value = "")  @QueryParam("oauth.provider.ims.service.token.client.id") String oauthProviderImsServiceTokenClientId,  @ApiParam(value = "")  @QueryParam("oauth.provider.ims.service.token.client.secret") String oauthProviderImsServiceTokenClientSecret,  @ApiParam(value = "")  @QueryParam("oauth.provider.ims.service.token") String oauthProviderImsServiceToken,  @ApiParam(value = "")  @QueryParam("ims.org.ref") String imsOrgRef,  @ApiParam(value = "")  @QueryParam("ims.group.mapping") List<String> imsGroupMapping,  @ApiParam(value = "")  @QueryParam("oauth.provider.ims.only.license.group") Boolean oauthProviderImsOnlyLicenseGroup) {
        return delegate.comAdobeGraniteAuthImsImplIMSProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl, oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken, imsOrgRef, imsGroupMapping, oauthProviderImsOnlyLicenseGroup, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthImsImplImsConfigProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.configmanager.ims.configid") String oauthConfigmanagerImsConfigid,  @ApiParam(value = "")  @QueryParam("ims.owningEntity") String imsOwningEntity,  @ApiParam(value = "")  @QueryParam("aem.instanceId") String aemInstanceId,  @ApiParam(value = "")  @QueryParam("ims.serviceCode") String imsServiceCode) {
        return delegate.comAdobeGraniteAuthImsImplImsConfigProviderImpl(post, apply, delete, action, $location, propertylist, oauthConfigmanagerImsConfigid, imsOwningEntity, aemInstanceId, imsServiceCode, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthAccesstokenProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthAccesstokenProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthAccesstokenProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("auth.token.provider.title") String authTokenProviderTitle,  @ApiParam(value = "")  @QueryParam("auth.token.provider.default.claims") List<String> authTokenProviderDefaultClaims,  @ApiParam(value = "")  @QueryParam("auth.token.provider.endpoint") String authTokenProviderEndpoint,  @ApiParam(value = "")  @QueryParam("auth.access.token.request") String authAccessTokenRequest,  @ApiParam(value = "")  @QueryParam("auth.token.provider.keypair.alias") String authTokenProviderKeypairAlias,  @ApiParam(value = "")  @QueryParam("auth.token.provider.conn.timeout") Integer authTokenProviderConnTimeout,  @ApiParam(value = "")  @QueryParam("auth.token.provider.so.timeout") Integer authTokenProviderSoTimeout,  @ApiParam(value = "")  @QueryParam("auth.token.provider.client.id") String authTokenProviderClientId,  @ApiParam(value = "")  @QueryParam("auth.token.provider.scope") String authTokenProviderScope,  @ApiParam(value = "")  @QueryParam("auth.token.provider.reuse.access.token") Boolean authTokenProviderReuseAccessToken,  @ApiParam(value = "")  @QueryParam("auth.token.provider.relaxed.ssl") Boolean authTokenProviderRelaxedSsl,  @ApiParam(value = "")  @QueryParam("token.request.customizer.type") String tokenRequestCustomizerType,  @ApiParam(value = "")  @QueryParam("auth.token.validator.type") String authTokenValidatorType) {
        return delegate.comAdobeGraniteAuthOauthAccesstokenProvider(post, apply, delete, action, $location, propertylist, name, authTokenProviderTitle, authTokenProviderDefaultClaims, authTokenProviderEndpoint, authAccessTokenRequest, authTokenProviderKeypairAlias, authTokenProviderConnTimeout, authTokenProviderSoTimeout, authTokenProviderClientId, authTokenProviderScope, authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl, tokenRequestCustomizerType, authTokenValidatorType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplBearerAuthenticationHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("oauth.clientIds.allowed") List<String> oauthClientIdsAllowed,  @ApiParam(value = "")  @QueryParam("auth.bearer.sync.ims") Boolean authBearerSyncIms,  @ApiParam(value = "")  @QueryParam("auth.tokenRequestParameter") String authTokenRequestParameter,  @ApiParam(value = "")  @QueryParam("oauth.bearer.configid") String oauthBearerConfigid,  @ApiParam(value = "")  @QueryParam("oauth.jwt.support") Boolean oauthJwtSupport) {
        return delegate.comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, oauthClientIdsAllowed, authBearerSyncIms, authTokenRequestParameter, oauthBearerConfigid, oauthJwtSupport, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("auth.token.validator.type") String authTokenValidatorType) {
        return delegate.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post, apply, delete, action, $location, propertylist, authTokenValidatorType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplFacebookProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.provider.id") String oauthProviderId) {
        return delegate.comAdobeGraniteAuthOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplGithubProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.provider.id") String oauthProviderId,  @ApiParam(value = "")  @QueryParam("oauth.provider.github.authorization.url") String oauthProviderGithubAuthorizationUrl,  @ApiParam(value = "")  @QueryParam("oauth.provider.github.token.url") String oauthProviderGithubTokenUrl,  @ApiParam(value = "")  @QueryParam("oauth.provider.github.profile.url") String oauthProviderGithubProfileUrl) {
        return delegate.comAdobeGraniteAuthOauthImplGithubProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplGraniteProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplGraniteProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplGraniteProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.provider.id") String oauthProviderId,  @ApiParam(value = "")  @QueryParam("oauth.provider.granite.authorization.url") String oauthProviderGraniteAuthorizationUrl,  @ApiParam(value = "")  @QueryParam("oauth.provider.granite.token.url") String oauthProviderGraniteTokenUrl,  @ApiParam(value = "")  @QueryParam("oauth.provider.granite.profile.url") String oauthProviderGraniteProfileUrl,  @ApiParam(value = "")  @QueryParam("oauth.provider.granite.extended.details.urls") String oauthProviderGraniteExtendedDetailsUrls) {
        return delegate.comAdobeGraniteAuthOauthImplGraniteProvider(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplHelperProviderConfigManager( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.cookie.login.timeout") String oauthCookieLoginTimeout,  @ApiParam(value = "")  @QueryParam("oauth.cookie.max.age") String oauthCookieMaxAge) {
        return delegate.comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.cookie.login.timeout") String oauthCookieLoginTimeout,  @ApiParam(value = "")  @QueryParam("oauth.cookie.max.age") String oauthCookieMaxAge) {
        return delegate.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") String path) {
        return delegate.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplTwitterProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.provider.id") String oauthProviderId) {
        return delegate.comAdobeGraniteAuthOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.provider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.config.id") String oauthConfigId,  @ApiParam(value = "")  @QueryParam("oauth.client.id") String oauthClientId,  @ApiParam(value = "")  @QueryParam("oauth.client.secret") String oauthClientSecret,  @ApiParam(value = "")  @QueryParam("oauth.scope") List<String> oauthScope,  @ApiParam(value = "")  @QueryParam("oauth.config.provider.id") String oauthConfigProviderId,  @ApiParam(value = "")  @QueryParam("oauth.create.users") Boolean oauthCreateUsers,  @ApiParam(value = "")  @QueryParam("oauth.userid.property") String oauthUseridProperty,  @ApiParam(value = "")  @QueryParam("force.strict.username.matching") Boolean forceStrictUsernameMatching,  @ApiParam(value = "")  @QueryParam("oauth.encode.userids") Boolean oauthEncodeUserids,  @ApiParam(value = "")  @QueryParam("oauth.hash.userids") Boolean oauthHashUserids,  @ApiParam(value = "")  @QueryParam("oauth.callBackUrl") String oauthCallBackUrl,  @ApiParam(value = "")  @QueryParam("oauth.access.token.persist") Boolean oauthAccessTokenPersist,  @ApiParam(value = "")  @QueryParam("oauth.access.token.persist.cookie") Boolean oauthAccessTokenPersistCookie,  @ApiParam(value = "")  @QueryParam("oauth.csrf.state.protection") Boolean oauthCsrfStateProtection,  @ApiParam(value = "")  @QueryParam("oauth.redirect.request.params") Boolean oauthRedirectRequestParams,  @ApiParam(value = "")  @QueryParam("oauth.config.siblings.allow") Boolean oauthConfigSiblingsAllow) {
        return delegate.comAdobeGraniteAuthOauthProvider(post, apply, delete, action, $location, propertylist, oauthConfigId, oauthClientId, oauthClientSecret, oauthScope, oauthConfigProviderId, oauthCreateUsers, oauthUseridProperty, forceStrictUsernameMatching, oauthEncodeUserids, oauthHashUserids, oauthCallBackUrl, oauthAccessTokenPersist, oauthAccessTokenPersistCookie, oauthCsrfStateProtection, oauthRedirectRequestParams, oauthConfigSiblingsAllow, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthRequirementImplDefaultRequirementHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("supportedPaths") List<String> supportedPaths) {
        return delegate.comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post, apply, delete, action, $location, propertylist, supportedPaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthSamlSamlAuthenticationHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") List<String> path,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("idpUrl") String idpUrl,  @ApiParam(value = "")  @QueryParam("idpCertAlias") String idpCertAlias,  @ApiParam(value = "")  @QueryParam("idpHttpRedirect") Boolean idpHttpRedirect,  @ApiParam(value = "")  @QueryParam("serviceProviderEntityId") String serviceProviderEntityId,  @ApiParam(value = "")  @QueryParam("assertionConsumerServiceURL") String assertionConsumerServiceURL,  @ApiParam(value = "")  @QueryParam("spPrivateKeyAlias") String spPrivateKeyAlias,  @ApiParam(value = "")  @QueryParam("keyStorePassword") String keyStorePassword,  @ApiParam(value = "")  @QueryParam("defaultRedirectUrl") String defaultRedirectUrl,  @ApiParam(value = "")  @QueryParam("userIDAttribute") String userIDAttribute,  @ApiParam(value = "")  @QueryParam("useEncryption") Boolean useEncryption,  @ApiParam(value = "")  @QueryParam("createUser") Boolean createUser,  @ApiParam(value = "")  @QueryParam("userIntermediatePath") String userIntermediatePath,  @ApiParam(value = "")  @QueryParam("addGroupMemberships") Boolean addGroupMemberships,  @ApiParam(value = "")  @QueryParam("groupMembershipAttribute") String groupMembershipAttribute,  @ApiParam(value = "")  @QueryParam("defaultGroups") List<String> defaultGroups,  @ApiParam(value = "")  @QueryParam("nameIdFormat") String nameIdFormat,  @ApiParam(value = "")  @QueryParam("synchronizeAttributes") List<String> synchronizeAttributes,  @ApiParam(value = "")  @QueryParam("handleLogout") Boolean handleLogout,  @ApiParam(value = "")  @QueryParam("logoutUrl") String logoutUrl,  @ApiParam(value = "")  @QueryParam("clockTolerance") Integer clockTolerance,  @ApiParam(value = "")  @QueryParam("digestMethod") String digestMethod,  @ApiParam(value = "")  @QueryParam("signatureMethod") String signatureMethod,  @ApiParam(value = "")  @QueryParam("identitySyncType") String identitySyncType,  @ApiParam(value = "")  @QueryParam("idpIdentifier") String idpIdentifier) {
        return delegate.comAdobeGraniteAuthSamlSamlAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthSsoImplSsoAuthenticationHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("jaas.controlFlag") String jaasControlFlag,  @ApiParam(value = "")  @QueryParam("jaas.realmName") String jaasRealmName,  @ApiParam(value = "")  @QueryParam("jaas.ranking") Integer jaasRanking,  @ApiParam(value = "")  @QueryParam("headers") List<String> headers,  @ApiParam(value = "")  @QueryParam("cookies") List<String> cookies,  @ApiParam(value = "")  @QueryParam("parameters") List<String> parameters,  @ApiParam(value = "")  @QueryParam("usermap") List<String> usermap,  @ApiParam(value = "")  @QueryParam("format") String format,  @ApiParam(value = "")  @QueryParam("trustedCredentialsAttribute") String trustedCredentialsAttribute) {
        return delegate.comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, jaasControlFlag, jaasRealmName, jaasRanking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplCodeCacheHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("minimum.code.cache.size") Integer minimumCodeCacheSize) {
        return delegate.comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, minimumCodeCacheSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplDavExBundleHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("ignored.bundles") List<String> ignoredBundles) {
        return delegate.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, ignoredBundles, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplJobsHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("max.queued.jobs") Integer maxQueuedJobs) {
        return delegate.comAdobeGraniteBundlesHcImplJobsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, maxQueuedJobs, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("replicate.comment.resourceTypes") List<String> replicateCommentResourceTypes) {
        return delegate.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post, apply, delete, action, $location, propertylist, replicateCommentResourceTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("compatgroups") List<String> compatgroups,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post, apply, delete, action, $location, propertylist, compatgroups, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteCompatrouterImplRoutingConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCompatrouterImplRoutingConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCompatrouterImplRoutingConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("id") String id,  @ApiParam(value = "")  @QueryParam("compatPath") String compatPath,  @ApiParam(value = "")  @QueryParam("newPath") String newPath) {
        return delegate.comAdobeGraniteCompatrouterImplRoutingConfig(post, apply, delete, action, $location, propertylist, id, compatPath, newPath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCompatrouterImplSwitchMappingConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("group") String group,  @ApiParam(value = "")  @QueryParam("ids") List<String> ids) {
        return delegate.comAdobeGraniteCompatrouterImplSwitchMappingConfig(post, apply, delete, action, $location, propertylist, group, ids, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("fallbackPaths") List<String> fallbackPaths) {
        return delegate.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post, apply, delete, action, $location, propertylist, enabled, fallbackPaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteContexthubImplContextHubImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteContexthubImplContextHubImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteContexthubImplContextHubImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.contexthub.silent_mode") Boolean comAdobeGraniteContexthubSilentMode,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.contexthub.show_ui") Boolean comAdobeGraniteContexthubShowUi) {
        return delegate.comAdobeGraniteContexthubImplContextHubImpl(post, apply, delete, action, $location, propertylist, comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteCorsImplCORSPolicyImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCorsImplCORSPolicyImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCorsImplCORSPolicyImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("alloworigin") List<String> alloworigin,  @ApiParam(value = "")  @QueryParam("alloworiginregexp") List<String> alloworiginregexp,  @ApiParam(value = "")  @QueryParam("allowedpaths") List<String> allowedpaths,  @ApiParam(value = "")  @QueryParam("exposedheaders") List<String> exposedheaders,  @ApiParam(value = "")  @QueryParam("maxage") Integer maxage,  @ApiParam(value = "")  @QueryParam("supportedheaders") List<String> supportedheaders,  @ApiParam(value = "")  @QueryParam("supportedmethods") List<String> supportedmethods,  @ApiParam(value = "")  @QueryParam("supportscredentials") Boolean supportscredentials) {
        return delegate.comAdobeGraniteCorsImplCORSPolicyImpl(post, apply, delete, action, $location, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteCsrfImplCSRFFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCsrfImplCSRFFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCsrfImplCSRFFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("filter.methods") List<String> filterMethods,  @ApiParam(value = "")  @QueryParam("filter.enable.safe.user.agents") Boolean filterEnableSafeUserAgents,  @ApiParam(value = "")  @QueryParam("filter.safe.user.agents") List<String> filterSafeUserAgents,  @ApiParam(value = "")  @QueryParam("filter.excluded.paths") List<String> filterExcludedPaths) {
        return delegate.comAdobeGraniteCsrfImplCSRFFilter(post, apply, delete, action, $location, propertylist, filterMethods, filterEnableSafeUserAgents, filterSafeUserAgents, filterExcludedPaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteCsrfImplCSRFServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCsrfImplCSRFServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCsrfImplCSRFServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("csrf.token.expires.in") Integer csrfTokenExpiresIn,  @ApiParam(value = "")  @QueryParam("sling.auth.requirements") String slingAuthRequirements) {
        return delegate.comAdobeGraniteCsrfImplCSRFServlet(post, apply, delete, action, $location, propertylist, csrfTokenExpiresIn, slingAuthRequirements, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("username") String username,  @ApiParam(value = "")  @QueryParam("encryptedPassword") String encryptedPassword) {
        return delegate.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post, apply, delete, action, $location, propertylist, name, username, encryptedPassword, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("agentName") String agentName,  @ApiParam(value = "")  @QueryParam("diffPath") String diffPath,  @ApiParam(value = "")  @QueryParam("observedPath") String observedPath,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName,  @ApiParam(value = "")  @QueryParam("propertyNames") String propertyNames,  @ApiParam(value = "")  @QueryParam("distributionDelay") Integer distributionDelay,  @ApiParam(value = "")  @QueryParam("serviceUser.target") String serviceUserTarget) {
        return delegate.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplDiffDiffEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("diffPath") String diffPath,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName,  @ApiParam(value = "")  @QueryParam("serviceUser.target") String serviceUserTarget) {
        return delegate.comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post, apply, delete, action, $location, propertylist, diffPath, serviceName, serviceUserTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplDistributionToReplicationEven( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("importer.name") List<String> importerName) {
        return delegate.comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post, apply, delete, action, $location, propertylist, importerName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("providerName") String providerName,  @ApiParam(value = "")  @QueryParam("forward.requests") Boolean forwardRequests) {
        return delegate.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post, apply, delete, action, $location, propertylist, providerName, forwardRequests, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplReplicationDistributionTrans( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("forward.requests") Boolean forwardRequests) {
        return delegate.comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post, apply, delete, action, $location, propertylist, forwardRequests, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName,  @ApiParam(value = "")  @QueryParam("userId") String userId,  @ApiParam(value = "")  @QueryParam("accessTokenProvider.target") String accessTokenProviderTarget) {
        return delegate.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post, apply, delete, action, $location, propertylist, name, serviceName, userId, accessTokenProviderTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteFragsImplCheckHttpHeaderFlag( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("feature.name") String featureName,  @ApiParam(value = "")  @QueryParam("feature.description") String featureDescription,  @ApiParam(value = "")  @QueryParam("http.header.name") String httpHeaderName,  @ApiParam(value = "")  @QueryParam("http.header.valuepattern") String httpHeaderValuepattern) {
        return delegate.comAdobeGraniteFragsImplCheckHttpHeaderFlag(post, apply, delete, action, $location, propertylist, featureName, featureDescription, httpHeaderName, httpHeaderValuepattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.frags.impl.RandomFeature")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteFragsImplRandomFeatureInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteFragsImplRandomFeatureInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteFragsImplRandomFeature( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("feature.name") String featureName,  @ApiParam(value = "")  @QueryParam("feature.description") String featureDescription,  @ApiParam(value = "")  @QueryParam("active.percentage") String activePercentage,  @ApiParam(value = "")  @QueryParam("cookie.name") String cookieName,  @ApiParam(value = "")  @QueryParam("cookie.maxAge") Integer cookieMaxAge) {
        return delegate.comAdobeGraniteFragsImplRandomFeature(post, apply, delete, action, $location, propertylist, featureName, featureDescription, activePercentage, cookieName, cookieMaxAge, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteHttpcacheFileFileCacheStore( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.httpcache.file.documentRoot") String comAdobeGraniteHttpcacheFileDocumentRoot,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.httpcache.file.includeHost") String comAdobeGraniteHttpcacheFileIncludeHost) {
        return delegate.comAdobeGraniteHttpcacheFileFileCacheStore(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteHttpcacheImplOuterCacheFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.httpcache.url.paths") List<String> comAdobeGraniteHttpcacheUrlPaths) {
        return delegate.comAdobeGraniteHttpcacheImplOuterCacheFilter(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheUrlPaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteI18nImplBundlePseudoTranslations( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("pseudo.patterns") List<String> pseudoPatterns) {
        return delegate.comAdobeGraniteI18nImplBundlePseudoTranslations(post, apply, delete, action, $location, propertylist, pseudoPatterns, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteI18nImplPreferencesLocaleResolverService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("security.preferences.name") String securityPreferencesName) {
        return delegate.comAdobeGraniteI18nImplPreferencesLocaleResolverService(post, apply, delete, action, $location, propertylist, securityPreferencesName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.infocollector.InfoCollector")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteInfocollectorInfoCollectorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteInfocollectorInfoCollectorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteInfocollectorInfoCollector( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("granite.infocollector.includeThreadDumps") Boolean graniteInfocollectorIncludeThreadDumps,  @ApiParam(value = "")  @QueryParam("granite.infocollector.includeHeapDump") Boolean graniteInfocollectorIncludeHeapDump) {
        return delegate.comAdobeGraniteInfocollectorInfoCollector(post, apply, delete, action, $location, propertylist, graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteJettySslInternalGraniteSslConnectorFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.jetty.ssl.port") Integer comAdobeGraniteJettySslPort,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.jetty.ssl.keystore.user") String comAdobeGraniteJettySslKeystoreUser,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.jetty.ssl.keystore.password") String comAdobeGraniteJettySslKeystorePassword,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.jetty.ssl.ciphersuites.excluded") List<String> comAdobeGraniteJettySslCiphersuitesExcluded,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.jetty.ssl.ciphersuites.included") List<String> comAdobeGraniteJettySslCiphersuitesIncluded,  @ApiParam(value = "")  @QueryParam("com.adobe.granite.jetty.ssl.client.certificate") String comAdobeGraniteJettySslClientCertificate) {
        return delegate.comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post, apply, delete, action, $location, propertylist, comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteLicenseImplLicenseCheckFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("checkInternval") Integer checkInternval,  @ApiParam(value = "")  @QueryParam("excludeIds") List<String> excludeIds,  @ApiParam(value = "")  @QueryParam("encryptPing") Boolean encryptPing) {
        return delegate.comAdobeGraniteLicenseImplLicenseCheckFilter(post, apply, delete, action, $location, propertylist, checkInternval, excludeIds, encryptPing, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteLoggingImplLogAnalyserImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteLoggingImplLogAnalyserImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteLoggingImplLogAnalyserImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("messages.queue.size") Integer messagesQueueSize,  @ApiParam(value = "")  @QueryParam("logger.config") List<String> loggerConfig,  @ApiParam(value = "")  @QueryParam("messages.size") Integer messagesSize) {
        return delegate.comAdobeGraniteLoggingImplLogAnalyserImpl(post, apply, delete, action, $location, propertylist, messagesQueueSize, loggerConfig, messagesSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteLoggingImplLogErrorHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteLoggingImplLogErrorHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("granite.maintenance.mandatory") Boolean graniteMaintenanceMandatory,  @ApiParam(value = "")  @QueryParam("job.topics") String jobTopics) {
        return delegate.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post, apply, delete, action, $location, propertylist, graniteMaintenanceMandatory, jobTopics, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("job.topics") String jobTopics) {
        return delegate.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post, apply, delete, action, $location, propertylist, jobTopics, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("full.gc.days") List<String> fullGcDays) {
        return delegate.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post, apply, delete, action, $location, propertylist, fullGcDays, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteMonitoringImplScriptConfigImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMonitoringImplScriptConfigImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteMonitoringImplScriptConfigImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("script.filename") String scriptFilename,  @ApiParam(value = "")  @QueryParam("script.display") String scriptDisplay,  @ApiParam(value = "")  @QueryParam("script.path") String scriptPath,  @ApiParam(value = "")  @QueryParam("script.platform") List<String> scriptPlatform,  @ApiParam(value = "")  @QueryParam("interval") Integer interval,  @ApiParam(value = "")  @QueryParam("jmxdomain") String jmxdomain) {
        return delegate.comAdobeGraniteMonitoringImplScriptConfigImpl(post, apply, delete, action, $location, propertylist, scriptFilename, scriptDisplay, scriptPath, scriptPlatform, interval, jmxdomain, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("jaas.controlFlag") String jaasControlFlag,  @ApiParam(value = "")  @QueryParam("jaas.realmName") String jaasRealmName,  @ApiParam(value = "")  @QueryParam("jaas.ranking") Integer jaasRanking,  @ApiParam(value = "")  @QueryParam("oauth.offline.validation") Boolean oauthOfflineValidation) {
        return delegate.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post, apply, delete, action, $location, propertylist, path, jaasControlFlag, jaasRealmName, jaasRanking, oauthOfflineValidation, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerImplAccessTokenCleanupTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression) {
        return delegate.comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post, apply, delete, action, $location, propertylist, schedulerExpression, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.client.revocation.active") Boolean oauthClientRevocationActive) {
        return delegate.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post, apply, delete, action, $location, propertylist, oauthClientRevocationActive, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.paths") String slingServletPaths,  @ApiParam(value = "")  @QueryParam("oauth.revocation.active") Boolean oauthRevocationActive) {
        return delegate.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, oauthRevocationActive, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.issuer") String oauthIssuer,  @ApiParam(value = "")  @QueryParam("oauth.access.token.expires.in") String oauthAccessTokenExpiresIn,  @ApiParam(value = "")  @QueryParam("osgi.http.whiteboard.servlet.pattern") String osgiHttpWhiteboardServletPattern,  @ApiParam(value = "")  @QueryParam("osgi.http.whiteboard.context.select") String osgiHttpWhiteboardContextSelect) {
        return delegate.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post, apply, delete, action, $location, propertylist, oauthIssuer, oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("oauth.token.revocation.active") Boolean oauthTokenRevocationActive) {
        return delegate.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post, apply, delete, action, $location, propertylist, oauthTokenRevocationActive, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOffloadingImplOffloadingConfigurator( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("offloading.transporter") String offloadingTransporter,  @ApiParam(value = "")  @QueryParam("offloading.cleanup.payload") Boolean offloadingCleanupPayload) {
        return delegate.comAdobeGraniteOffloadingImplOffloadingConfigurator(post, apply, delete, action, $location, propertylist, offloadingTransporter, offloadingCleanupPayload, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOffloadingImplOffloadingJobCloner( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("offloading.jobcloner.enabled") Boolean offloadingJobclonerEnabled) {
        return delegate.comAdobeGraniteOffloadingImplOffloadingJobCloner(post, apply, delete, action, $location, propertylist, offloadingJobclonerEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOffloadingImplOffloadingJobOffloader( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("offloading.offloader.enabled") Boolean offloadingOffloaderEnabled) {
        return delegate.comAdobeGraniteOffloadingImplOffloadingJobOffloader(post, apply, delete, action, $location, propertylist, offloadingOffloaderEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("offloading.agentmanager.enabled") Boolean offloadingAgentmanagerEnabled) {
        return delegate.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post, apply, delete, action, $location, propertylist, offloadingAgentmanagerEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("default.transport.agent-to-worker.prefix") String defaultTransportAgentToWorkerPrefix,  @ApiParam(value = "")  @QueryParam("default.transport.agent-to-master.prefix") String defaultTransportAgentToMasterPrefix,  @ApiParam(value = "")  @QueryParam("default.transport.input.package") String defaultTransportInputPackage,  @ApiParam(value = "")  @QueryParam("default.transport.output.package") String defaultTransportOutputPackage,  @ApiParam(value = "")  @QueryParam("default.transport.replication.synchronous") Boolean defaultTransportReplicationSynchronous,  @ApiParam(value = "")  @QueryParam("default.transport.contentpackage") Boolean defaultTransportContentpackage,  @ApiParam(value = "")  @QueryParam("offloading.transporter.default.enabled") Boolean offloadingTransporterDefaultEnabled) {
        return delegate.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post, apply, delete, action, $location, propertylist, defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix, defaultTransportInputPackage, defaultTransportOutputPackage, defaultTransportReplicationSynchronous, defaultTransportContentpackage, offloadingTransporterDefaultEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("omnisearch.suggestion.requiretext.min") Integer omnisearchSuggestionRequiretextMin,  @ApiParam(value = "")  @QueryParam("omnisearch.suggestion.spellcheck.require") Boolean omnisearchSuggestionSpellcheckRequire) {
        return delegate.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post, apply, delete, action, $location, propertylist, omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteOptoutImplOptOutServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOptoutImplOptOutServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOptoutImplOptOutServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("optout.cookies") List<String> optoutCookies,  @ApiParam(value = "")  @QueryParam("optout.headers") List<String> optoutHeaders,  @ApiParam(value = "")  @QueryParam("optout.whitelist.cookies") List<String> optoutWhitelistCookies) {
        return delegate.comAdobeGraniteOptoutImplOptOutServiceImpl(post, apply, delete, action, $location, propertylist, optoutCookies, optoutHeaders, optoutWhitelistCookies, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("indexing.critical.threshold") Integer indexingCriticalThreshold,  @ApiParam(value = "")  @QueryParam("indexing.warn.threshold") Integer indexingWarnThreshold,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post, apply, delete, action, $location, propertylist, indexingCriticalThreshold, indexingWarnThreshold, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteQueriesImplHcLargeIndexHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("large.index.critical.threshold") Integer largeIndexCriticalThreshold,  @ApiParam(value = "")  @QueryParam("large.index.warn.threshold") Integer largeIndexWarnThreshold,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post, apply, delete, action, $location, propertylist, largeIndexCriticalThreshold, largeIndexWarnThreshold, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("getPeriod") Integer getPeriod) {
        return delegate.comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post, apply, delete, action, $location, propertylist, getPeriod, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("number.of.retries.allowed") Integer numberOfRetriesAllowed,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post, apply, delete, action, $location, propertylist, numberOfRetriesAllowed, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("exclude.search.path") List<String> excludeSearchPath) {
        return delegate.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post, apply, delete, action, $location, propertylist, hcTags, excludeSearchPath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("account.logins") List<String> accountLogins,  @ApiParam(value = "")  @QueryParam("console.logins") List<String> consoleLogins) {
        return delegate.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, accountLogins, consoleLogins, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("disk.space.warn.threshold") Integer diskSpaceWarnThreshold,  @ApiParam(value = "")  @QueryParam("disk.space.error.threshold") Integer diskSpaceErrorThreshold) {
        return delegate.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, diskSpaceWarnThreshold, diskSpaceErrorThreshold, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryImplCommitStatsConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("intervalSeconds") Integer intervalSeconds,  @ApiParam(value = "")  @QueryParam("commitsPerIntervalThreshold") Integer commitsPerIntervalThreshold,  @ApiParam(value = "")  @QueryParam("maxLocationLength") Integer maxLocationLength,  @ApiParam(value = "")  @QueryParam("maxDetailsShown") Integer maxDetailsShown,  @ApiParam(value = "")  @QueryParam("minDetailsPercentage") Integer minDetailsPercentage,  @ApiParam(value = "")  @QueryParam("threadMatchers") List<String> threadMatchers,  @ApiParam(value = "")  @QueryParam("maxGreedyDepth") Integer maxGreedyDepth,  @ApiParam(value = "")  @QueryParam("greedyStackMatchers") String greedyStackMatchers,  @ApiParam(value = "")  @QueryParam("stackFilters") List<String> stackFilters,  @ApiParam(value = "")  @QueryParam("stackMatchers") List<String> stackMatchers,  @ApiParam(value = "")  @QueryParam("stackCategorizers") List<String> stackCategorizers,  @ApiParam(value = "")  @QueryParam("stackShorteners") List<String> stackShorteners) {
        return delegate.comAdobeGraniteRepositoryImplCommitStatsConfig(post, apply, delete, action, $location, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryServiceUserConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryServiceUserConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryServiceUserConfiguration( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("serviceusers.simpleSubjectPopulation") Boolean serviceusersSimpleSubjectPopulation,  @ApiParam(value = "")  @QueryParam("serviceusers.list") List<String> serviceusersList) {
        return delegate.comAdobeGraniteRepositoryServiceUserConfiguration(post, apply, delete, action, $location, propertylist, serviceRanking, serviceusersSimpleSubjectPopulation, serviceusersList, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteResourcestatusImplCompositeStatusType( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("types") List<String> types) {
        return delegate.comAdobeGraniteResourcestatusImplCompositeStatusType(post, apply, delete, action, $location, propertylist, name, types, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteResourcestatusImplStatusResourceProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("provider.root") String providerRoot) {
        return delegate.comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post, apply, delete, action, $location, propertylist, providerRoot, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRestAssetsImplAssetContentDispositionFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("mime.allowEmpty") Boolean mimeAllowEmpty,  @ApiParam(value = "")  @QueryParam("mime.allowed") List<String> mimeAllowed) {
        return delegate.comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post, apply, delete, action, $location, propertylist, mimeAllowEmpty, mimeAllowed, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("provider.roots") String providerRoots) {
        return delegate.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post, apply, delete, action, $location, propertylist, providerRoots, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteRestImplServletDefaultGETServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRestImplServletDefaultGETServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRestImplServletDefaultGETServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("default.limit") Integer defaultLimit,  @ApiParam(value = "")  @QueryParam("use.absolute.uri") Boolean useAbsoluteUri) {
        return delegate.comAdobeGraniteRestImplServletDefaultGETServlet(post, apply, delete, action, $location, propertylist, defaultLimit, useAbsoluteUri, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags) {
        return delegate.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post, apply, delete, action, $location, propertylist, hcTags, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.security.user.UserPropertiesService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteSecurityUserUserPropertiesService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("adapter.condition") String adapterCondition,  @ApiParam(value = "")  @QueryParam("granite.userproperties.nodetypes") List<String> graniteUserpropertiesNodetypes,  @ApiParam(value = "")  @QueryParam("granite.userproperties.resourcetypes") List<String> graniteUserpropertiesResourcetypes) {
        return delegate.comAdobeGraniteSecurityUserUserPropertiesService(post, apply, delete, action, $location, propertylist, adapterCondition, graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("group2member.relationship.outgoing") String group2memberRelationshipOutgoing,  @ApiParam(value = "")  @QueryParam("group2member.excluded.outgoing") List<String> group2memberExcludedOutgoing,  @ApiParam(value = "")  @QueryParam("group2member.relationship.incoming") String group2memberRelationshipIncoming,  @ApiParam(value = "")  @QueryParam("group2member.excluded.incoming") List<String> group2memberExcludedIncoming) {
        return delegate.comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post, apply, delete, action, $location, propertylist, group2memberRelationshipOutgoing, group2memberExcludedOutgoing, group2memberRelationshipIncoming, group2memberExcludedIncoming, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression,  @ApiParam(value = "")  @QueryParam("jmx.objectname") String jmxObjectname) {
        return delegate.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post, apply, delete, action, $location, propertylist, schedulerExpression, jmxObjectname, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("adapter.condition") String adapterCondition) {
        return delegate.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post, apply, delete, action, $location, propertylist, adapterCondition, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTaskmanagementImplJcrTaskArchiveService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("archiving.enabled") Boolean archivingEnabled,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression,  @ApiParam(value = "")  @QueryParam("archive.since.days.completed") Integer archiveSinceDaysCompleted) {
        return delegate.comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post, apply, delete, action, $location, propertylist, archivingEnabled, schedulerExpression, archiveSinceDaysCompleted, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("purgeCompleted") Boolean purgeCompleted,  @ApiParam(value = "")  @QueryParam("completedAge") Integer completedAge,  @ApiParam(value = "")  @QueryParam("purgeActive") Boolean purgeActive,  @ApiParam(value = "")  @QueryParam("activeAge") Integer activeAge,  @ApiParam(value = "")  @QueryParam("saveThreshold") Integer saveThreshold) {
        return delegate.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post, apply, delete, action, $location, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("adapter.condition") String adapterCondition,  @ApiParam(value = "")  @QueryParam("taskmanager.admingroups") List<String> taskmanagerAdmingroups) {
        return delegate.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post, apply, delete, action, $location, propertylist, adapterCondition, taskmanagerAdmingroups, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteThreaddumpThreadDumpCollector( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.period") Integer schedulerPeriod,  @ApiParam(value = "")  @QueryParam("scheduler.runOn") String schedulerRunOn,  @ApiParam(value = "")  @QueryParam("granite.threaddump.enabled") Boolean graniteThreaddumpEnabled,  @ApiParam(value = "")  @QueryParam("granite.threaddump.dumpsPerFile") Integer graniteThreaddumpDumpsPerFile,  @ApiParam(value = "")  @QueryParam("granite.threaddump.enableGzipCompression") Boolean graniteThreaddumpEnableGzipCompression,  @ApiParam(value = "")  @QueryParam("granite.threaddump.enableDirectoriesCompression") Boolean graniteThreaddumpEnableDirectoriesCompression,  @ApiParam(value = "")  @QueryParam("granite.threaddump.enableJStack") Boolean graniteThreaddumpEnableJStack,  @ApiParam(value = "")  @QueryParam("granite.threaddump.maxBackupDays") Integer graniteThreaddumpMaxBackupDays,  @ApiParam(value = "")  @QueryParam("granite.threaddump.backupCleanTrigger") String graniteThreaddumpBackupCleanTrigger) {
        return delegate.comAdobeGraniteThreaddumpThreadDumpCollector(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerRunOn, graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("translationFactory") String translationFactory,  @ApiParam(value = "")  @QueryParam("defaultConnectorLabel") String defaultConnectorLabel,  @ApiParam(value = "")  @QueryParam("defaultConnectorAttribution") String defaultConnectorAttribution,  @ApiParam(value = "")  @QueryParam("defaultConnectorWorkspaceId") String defaultConnectorWorkspaceId,  @ApiParam(value = "")  @QueryParam("defaultConnectorSubscriptionKey") String defaultConnectorSubscriptionKey,  @ApiParam(value = "")  @QueryParam("languageMapLocation") String languageMapLocation,  @ApiParam(value = "")  @QueryParam("categoryMapLocation") String categoryMapLocation,  @ApiParam(value = "")  @QueryParam("retryAttempts") Integer retryAttempts,  @ApiParam(value = "")  @QueryParam("timeoutCount") Integer timeoutCount) {
        return delegate.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post, apply, delete, action, $location, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTranslationCoreImplTranslationManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("defaultConnectorName") String defaultConnectorName,  @ApiParam(value = "")  @QueryParam("defaultCategory") String defaultCategory) {
        return delegate.comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post, apply, delete, action, $location, propertylist, defaultConnectorName, defaultCategory, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("htmllibmanager.timing") Boolean htmllibmanagerTiming,  @ApiParam(value = "")  @QueryParam("htmllibmanager.debug.init.js") String htmllibmanagerDebugInitJs,  @ApiParam(value = "")  @QueryParam("htmllibmanager.minify") Boolean htmllibmanagerMinify,  @ApiParam(value = "")  @QueryParam("htmllibmanager.debug") Boolean htmllibmanagerDebug,  @ApiParam(value = "")  @QueryParam("htmllibmanager.gzip") Boolean htmllibmanagerGzip,  @ApiParam(value = "")  @QueryParam("htmllibmanager.maxDataUriSize") Integer htmllibmanagerMaxDataUriSize,  @ApiParam(value = "")  @QueryParam("htmllibmanager.maxage") Integer htmllibmanagerMaxage,  @ApiParam(value = "")  @QueryParam("htmllibmanager.forceCQUrlInfo") Boolean htmllibmanagerForceCQUrlInfo,  @ApiParam(value = "")  @QueryParam("htmllibmanager.defaultthemename") String htmllibmanagerDefaultthemename,  @ApiParam(value = "")  @QueryParam("htmllibmanager.defaultuserthemename") String htmllibmanagerDefaultuserthemename,  @ApiParam(value = "")  @QueryParam("htmllibmanager.clientmanager") String htmllibmanagerClientmanager,  @ApiParam(value = "")  @QueryParam("htmllibmanager.path.list") List<String> htmllibmanagerPathList,  @ApiParam(value = "")  @QueryParam("htmllibmanager.excluded.path.list") List<String> htmllibmanagerExcludedPathList,  @ApiParam(value = "")  @QueryParam("htmllibmanager.processor.js") List<String> htmllibmanagerProcessorJs,  @ApiParam(value = "")  @QueryParam("htmllibmanager.processor.css") List<String> htmllibmanagerProcessorCss,  @ApiParam(value = "")  @QueryParam("htmllibmanager.longcache.patterns") List<String> htmllibmanagerLongcachePatterns,  @ApiParam(value = "")  @QueryParam("htmllibmanager.longcache.format") String htmllibmanagerLongcacheFormat,  @ApiParam(value = "")  @QueryParam("htmllibmanager.useFileSystemOutputCache") Boolean htmllibmanagerUseFileSystemOutputCache,  @ApiParam(value = "")  @QueryParam("htmllibmanager.fileSystemOutputCacheLocation") String htmllibmanagerFileSystemOutputCacheLocation,  @ApiParam(value = "")  @QueryParam("htmllibmanager.disable.replacement") List<String> htmllibmanagerDisableReplacement) {
        return delegate.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerTiming, htmllibmanagerDebugInitJs, htmllibmanagerMinify, htmllibmanagerDebug, htmllibmanagerGzip, htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager, htmllibmanagerPathList, htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs, htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post, apply, delete, action, $location, propertylist, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("granite.workflow.WorkflowPublishEventService.enabled") Boolean graniteWorkflowWorkflowPublishEventServiceEnabled) {
        return delegate.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post, apply, delete, action, $location, propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("bucketSize") Integer bucketSize) {
        return delegate.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post, apply, delete, action, $location, propertylist, bucketSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("default.timeout") Integer defaultTimeout,  @ApiParam(value = "")  @QueryParam("max.timeout") Integer maxTimeout,  @ApiParam(value = "")  @QueryParam("default.period") Integer defaultPeriod) {
        return delegate.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post, apply, delete, action, $location, propertylist, defaultTimeout, maxTimeout, defaultPeriod, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreJobJobHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("job.topics") List<String> jobTopics,  @ApiParam(value = "")  @QueryParam("allow.self.process.termination") Boolean allowSelfProcessTermination) {
        return delegate.comAdobeGraniteWorkflowCoreJobJobHandler(post, apply, delete, action, $location, propertylist, jobTopics, allowSelfProcessTermination, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("job.topics") String jobTopics) {
        return delegate.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post, apply, delete, action, $location, propertylist, jobTopics, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCorePayloadMapCache( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("getSystemWorkflowModels") List<String> getSystemWorkflowModels,  @ApiParam(value = "")  @QueryParam("getPackageRootPath") String getPackageRootPath) {
        return delegate.comAdobeGraniteWorkflowCorePayloadMapCache(post, apply, delete, action, $location, propertylist, getSystemWorkflowModels, getPackageRootPath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("payload.move.white.list") List<String> payloadMoveWhiteList,  @ApiParam(value = "")  @QueryParam("payload.move.handle.from.workflow.process") Boolean payloadMoveHandleFromWorkflowProcess) {
        return delegate.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post, apply, delete, action, $location, propertylist, payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreWorkflowConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.workflow.config.workflow.packages.root.path") List<String> cqWorkflowConfigWorkflowPackagesRootPath,  @ApiParam(value = "")  @QueryParam("cq.workflow.config.workflow.process.legacy.mode") Boolean cqWorkflowConfigWorkflowProcessLegacyMode,  @ApiParam(value = "")  @QueryParam("cq.workflow.config.allow.locking") Boolean cqWorkflowConfigAllowLocking) {
        return delegate.comAdobeGraniteWorkflowCoreWorkflowConfig(post, apply, delete, action, $location, propertylist, cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreWorkflowSessionFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("granite.workflowinbox.sort.propertyName") String graniteWorkflowinboxSortPropertyName,  @ApiParam(value = "")  @QueryParam("granite.workflowinbox.sort.order") String graniteWorkflowinboxSortOrder,  @ApiParam(value = "")  @QueryParam("cq.workflow.job.retry") Integer cqWorkflowJobRetry,  @ApiParam(value = "")  @QueryParam("cq.workflow.superuser") List<String> cqWorkflowSuperuser,  @ApiParam(value = "")  @QueryParam("granite.workflow.inboxQuerySize") Integer graniteWorkflowInboxQuerySize,  @ApiParam(value = "")  @QueryParam("granite.workflow.adminUserGroupFilter") Boolean graniteWorkflowAdminUserGroupFilter,  @ApiParam(value = "")  @QueryParam("granite.workflow.enforceWorkitemAssigneePermissions") Boolean graniteWorkflowEnforceWorkitemAssigneePermissions,  @ApiParam(value = "")  @QueryParam("granite.workflow.enforceWorkflowInitiatorPermissions") Boolean graniteWorkflowEnforceWorkflowInitiatorPermissions,  @ApiParam(value = "")  @QueryParam("granite.workflow.injectTenantIdInJobTopics") Boolean graniteWorkflowInjectTenantIdInJobTopics,  @ApiParam(value = "")  @QueryParam("granite.workflow.maxPurgeSaveThreshold") Integer graniteWorkflowMaxPurgeSaveThreshold,  @ApiParam(value = "")  @QueryParam("granite.workflow.maxPurgeQueryCount") Integer graniteWorkflowMaxPurgeQueryCount) {
        return delegate.comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post, apply, delete, action, $location, propertylist, graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder, cqWorkflowJobRetry, cqWorkflowSuperuser, graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.purge.Scheduler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowPurgeSchedulerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowPurgeSchedulerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowPurgeScheduler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduledpurge.name") String scheduledpurgeName,  @ApiParam(value = "")  @QueryParam("scheduledpurge.workflowStatus") String scheduledpurgeWorkflowStatus,  @ApiParam(value = "")  @QueryParam("scheduledpurge.modelIds") List<String> scheduledpurgeModelIds,  @ApiParam(value = "")  @QueryParam("scheduledpurge.daysold") Integer scheduledpurgeDaysold) {
        return delegate.comAdobeGraniteWorkflowPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgeWorkflowStatus, scheduledpurgeModelIds, scheduledpurgeDaysold, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.octopus.ncomm.bootstrap")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeOctopusNcommBootstrapInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeOctopusNcommBootstrapInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeOctopusNcommBootstrap( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("maxConnections") Integer maxConnections,  @ApiParam(value = "")  @QueryParam("maxRequests") Integer maxRequests,  @ApiParam(value = "")  @QueryParam("requestTimeout") Integer requestTimeout,  @ApiParam(value = "")  @QueryParam("requestRetries") Integer requestRetries,  @ApiParam(value = "")  @QueryParam("launchTimeout") Integer launchTimeout) {
        return delegate.comAdobeOctopusNcommBootstrap(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("communities.integration.livefyre.sling.event.filter") String communitiesIntegrationLivefyreSlingEventFilter) {
        return delegate.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post, apply, delete, action, $location, propertylist, communitiesIntegrationLivefyreSlingEventFilter, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeXmpWorkerFilesNcommXMPFilesNComm( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("maxConnections") String maxConnections,  @ApiParam(value = "")  @QueryParam("maxRequests") String maxRequests,  @ApiParam(value = "")  @QueryParam("requestTimeout") String requestTimeout,  @ApiParam(value = "")  @QueryParam("logDir") String logDir) {
        return delegate.comAdobeXmpWorkerFilesNcommXMPFilesNComm(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, logDir, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCommonsDatasourceJdbcpoolJdbcPoolService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("jdbc.driver.class") String jdbcDriverClass,  @ApiParam(value = "")  @QueryParam("jdbc.connection.uri") String jdbcConnectionUri,  @ApiParam(value = "")  @QueryParam("jdbc.username") String jdbcUsername,  @ApiParam(value = "")  @QueryParam("jdbc.password") String jdbcPassword,  @ApiParam(value = "")  @QueryParam("jdbc.validation.query") String jdbcValidationQuery,  @ApiParam(value = "")  @QueryParam("default.readonly") Boolean defaultReadonly,  @ApiParam(value = "")  @QueryParam("default.autocommit") Boolean defaultAutocommit,  @ApiParam(value = "")  @QueryParam("pool.size") Integer poolSize,  @ApiParam(value = "")  @QueryParam("pool.max.wait.msec") Integer poolMaxWaitMsec,  @ApiParam(value = "")  @QueryParam("datasource.name") String datasourceName,  @ApiParam(value = "")  @QueryParam("datasource.svc.properties") List<String> datasourceSvcProperties) {
        return delegate.comDayCommonsDatasourceJdbcpoolJdbcPoolService(post, apply, delete, action, $location, propertylist, jdbcDriverClass, jdbcConnectionUri, jdbcUsername, jdbcPassword, jdbcValidationQuery, defaultReadonly, defaultAutocommit, poolSize, poolMaxWaitMsec, datasourceName, datasourceSvcProperties, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.commons.httpclient")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCommonsHttpclientInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCommonsHttpclientInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCommonsHttpclient( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("proxy.enabled") Boolean proxyEnabled,  @ApiParam(value = "")  @QueryParam("proxy.host") String proxyHost,  @ApiParam(value = "")  @QueryParam("proxy.user") String proxyUser,  @ApiParam(value = "")  @QueryParam("proxy.password") String proxyPassword,  @ApiParam(value = "")  @QueryParam("proxy.ntlm.host") String proxyNtlmHost,  @ApiParam(value = "")  @QueryParam("proxy.ntlm.domain") String proxyNtlmDomain,  @ApiParam(value = "")  @QueryParam("proxy.exceptions") List<String> proxyExceptions) {
        return delegate.comDayCommonsHttpclient(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyUser, proxyPassword, proxyNtlmHost, proxyNtlmDomain, proxyExceptions, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsImplStorePropertiesChangeListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.store.listener.additionalStorePaths") List<String> cqStoreListenerAdditionalStorePaths) {
        return delegate.comDayCqAnalyticsImplStorePropertiesChangeListener(post, apply, delete, action, $location, propertylist, cqStoreListenerAdditionalStorePaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("allowed.paths") List<String> allowedPaths,  @ApiParam(value = "")  @QueryParam("cq.analytics.saint.exporter.pagesize") Integer cqAnalyticsSaintExporterPagesize) {
        return delegate.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post, apply, delete, action, $location, propertylist, allowedPaths, cqAnalyticsSaintExporterPagesize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsSitecatalystImplImporterReportImporter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("report.fetch.attempts") Integer reportFetchAttempts,  @ApiParam(value = "")  @QueryParam("report.fetch.delay") Integer reportFetchDelay) {
        return delegate.comDayCqAnalyticsSitecatalystImplImporterReportImporter(post, apply, delete, action, $location, propertylist, reportFetchAttempts, reportFetchDelay, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.analytics.adapterfactory.contextstores") List<String> cqAnalyticsAdapterfactoryContextstores) {
        return delegate.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post, apply, delete, action, $location, propertylist, cqAnalyticsAdapterfactoryContextstores, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.analytics.sitecatalyst.service.datacenter.url") List<String> cqAnalyticsSitecatalystServiceDatacenterUrl,  @ApiParam(value = "")  @QueryParam("devhostnamepatterns") List<String> devhostnamepatterns,  @ApiParam(value = "")  @QueryParam("connection.timeout") Integer connectionTimeout,  @ApiParam(value = "")  @QueryParam("socket.timeout") Integer socketTimeout) {
        return delegate.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns, connectionTimeout, socketTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.analytics.testandtarget.accountoptionsupdater.enabled") Boolean cqAnalyticsTestandtargetAccountoptionsupdaterEnabled) {
        return delegate.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled") Boolean cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled) {
        return delegate.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled") Boolean cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled) {
        return delegate.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplSegmentImporter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.analytics.testandtarget.segmentimporter.enabled") Boolean cqAnalyticsTestandtargetSegmentimporterEnabled) {
        return delegate.comDayCqAnalyticsTestandtargetImplSegmentImporter(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("endpointUri") String endpointUri,  @ApiParam(value = "")  @QueryParam("connectionTimeout") Integer connectionTimeout,  @ApiParam(value = "")  @QueryParam("socketTimeout") Integer socketTimeout) {
        return delegate.comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("testandtarget.endpoint.url") String testandtargetEndpointUrl) {
        return delegate.comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post, apply, delete, action, $location, propertylist, testandtargetEndpointUrl, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.analytics.testandtarget.api.url") String cqAnalyticsTestandtargetApiUrl,  @ApiParam(value = "")  @QueryParam("cq.analytics.testandtarget.timeout") Integer cqAnalyticsTestandtargetTimeout,  @ApiParam(value = "")  @QueryParam("cq.analytics.testandtarget.sockettimeout") Integer cqAnalyticsTestandtargetSockettimeout,  @ApiParam(value = "")  @QueryParam("cq.analytics.testandtarget.recommendations.url.replace") String cqAnalyticsTestandtargetRecommendationsUrlReplace,  @ApiParam(value = "")  @QueryParam("cq.analytics.testandtarget.recommendations.url.replacewith") String cqAnalyticsTestandtargetRecommendationsUrlReplacewith) {
        return delegate.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAuthImplCugCugSupportImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAuthImplCugCugSupportImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAuthImplCugCugSupportImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cug.exempted.principals") List<String> cugExemptedPrincipals,  @ApiParam(value = "")  @QueryParam("cug.enabled") Boolean cugEnabled,  @ApiParam(value = "")  @QueryParam("cug.principals.regex") String cugPrincipalsRegex,  @ApiParam(value = "")  @QueryParam("cug.principals.replacement") String cugPrincipalsReplacement) {
        return delegate.comDayCqAuthImplCugCugSupportImpl(post, apply, delete, action, $location, propertylist, cugExemptedPrincipals, cugEnabled, cugPrincipalsRegex, cugPrincipalsReplacement, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqAuthImplLoginSelectorHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAuthImplLoginSelectorHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAuthImplLoginSelectorHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("auth.loginselector.mappings") List<String> authLoginselectorMappings,  @ApiParam(value = "")  @QueryParam("auth.loginselector.changepw.mappings") List<String> authLoginselectorChangepwMappings,  @ApiParam(value = "")  @QueryParam("auth.loginselector.defaultloginpage") String authLoginselectorDefaultloginpage,  @ApiParam(value = "")  @QueryParam("auth.loginselector.defaultchangepwpage") String authLoginselectorDefaultchangepwpage,  @ApiParam(value = "")  @QueryParam("auth.loginselector.handle") List<String> authLoginselectorHandle,  @ApiParam(value = "")  @QueryParam("auth.loginselector.handle.all.extensions") Boolean authLoginselectorHandleAllExtensions) {
        return delegate.comDayCqAuthImplLoginSelectorHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, authLoginselectorMappings, authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage, authLoginselectorHandle, authLoginselectorHandleAllExtensions, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqCommonsImplExternalizerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCommonsImplExternalizerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqCommonsImplExternalizerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("externalizer.domains") List<String> externalizerDomains,  @ApiParam(value = "")  @QueryParam("externalizer.host") String externalizerHost,  @ApiParam(value = "")  @QueryParam("externalizer.contextpath") String externalizerContextpath,  @ApiParam(value = "")  @QueryParam("externalizer.encodedpath") Boolean externalizerEncodedpath) {
        return delegate.comDayCqCommonsImplExternalizerImpl(post, apply, delete, action, $location, propertylist, externalizerDomains, externalizerHost, externalizerContextpath, externalizerEncodedpath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqCommonsServletsRootMappingServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCommonsServletsRootMappingServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqCommonsServletsRootMappingServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("rootmapping.target") String rootmappingTarget) {
        return delegate.comDayCqCommonsServletsRootMappingServlet(post, apply, delete, action, $location, propertylist, rootmappingTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("codeupgradetasks") List<String> codeupgradetasks,  @ApiParam(value = "")  @QueryParam("codeupgradetaskfilters") List<String> codeupgradetaskfilters) {
        return delegate.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post, apply, delete, action, $location, propertylist, codeupgradetasks, codeupgradetaskfilters, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("upgradeTaskIgnoreList") List<String> upgradeTaskIgnoreList) {
        return delegate.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post, apply, delete, action, $location, propertylist, upgradeTaskIgnoreList, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("effectiveBundleListPath") String effectiveBundleListPath) {
        return delegate.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post, apply, delete, action, $location, propertylist, effectiveBundleListPath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqContentsyncImplContentSyncManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqContentsyncImplContentSyncManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqContentsyncImplContentSyncManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("contentsync.fallback.authorizable") String contentsyncFallbackAuthorizable,  @ApiParam(value = "")  @QueryParam("contentsync.fallback.updateuser") String contentsyncFallbackUpdateuser) {
        return delegate.comDayCqContentsyncImplContentSyncManagerImpl(post, apply, delete, action, $location, propertylist, contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCommonsHandlerStandardImageHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCommonsHandlerStandardImageHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCommonsHandlerStandardImageHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("large_file_threshold") Integer largeFileThreshold,  @ApiParam(value = "")  @QueryParam("large_comment_threshold") Integer largeCommentThreshold,  @ApiParam(value = "")  @QueryParam("cq.dam.enable.ext.meta.extraction") Boolean cqDamEnableExtMetaExtraction) {
        return delegate.comDayCqDamCommonsHandlerStandardImageHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold, largeCommentThreshold, cqDamEnableExtMetaExtraction, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCommonsMetadataXmpFilterBlackWhite( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("xmp.filter.apply_whitelist") Boolean xmpFilterApplyWhitelist,  @ApiParam(value = "")  @QueryParam("xmp.filter.whitelist") List<String> xmpFilterWhitelist,  @ApiParam(value = "")  @QueryParam("xmp.filter.apply_blacklist") Boolean xmpFilterApplyBlacklist,  @ApiParam(value = "")  @QueryParam("xmp.filter.blacklist") List<String> xmpFilterBlacklist) {
        return delegate.comDayCqDamCommonsMetadataXmpFilterBlackWhite(post, apply, delete, action, $location, propertylist, xmpFilterApplyWhitelist, xmpFilterWhitelist, xmpFilterApplyBlacklist, xmpFilterBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCommonsUtilImplAssetCacheImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCommonsUtilImplAssetCacheImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCommonsUtilImplAssetCacheImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("large.file.min") Integer largeFileMin,  @ApiParam(value = "")  @QueryParam("cache.apply") Boolean cacheApply,  @ApiParam(value = "")  @QueryParam("mime.types") List<String> mimeTypes) {
        return delegate.comDayCqDamCommonsUtilImplAssetCacheImpl(post, apply, delete, action, $location, propertylist, largeFileMin, cacheApply, mimeTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.document.width") Integer cqDamConfigAnnotationPdfDocumentWidth,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.document.height") Integer cqDamConfigAnnotationPdfDocumentHeight,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.document.padding.horizontal") Integer cqDamConfigAnnotationPdfDocumentPaddingHorizontal,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.document.padding.vertical") Integer cqDamConfigAnnotationPdfDocumentPaddingVertical,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.font.size") Integer cqDamConfigAnnotationPdfFontSize,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.font.color") String cqDamConfigAnnotationPdfFontColor,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.font.family") String cqDamConfigAnnotationPdfFontFamily,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.font.light") String cqDamConfigAnnotationPdfFontLight,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.marginTextImage") Integer cqDamConfigAnnotationPdfMarginTextImage,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.minImageHeight") Integer cqDamConfigAnnotationPdfMinImageHeight,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.reviewStatus.width") Integer cqDamConfigAnnotationPdfReviewStatusWidth,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.reviewStatus.color.approved") String cqDamConfigAnnotationPdfReviewStatusColorApproved,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.reviewStatus.color.rejected") String cqDamConfigAnnotationPdfReviewStatusColorRejected,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested") String cqDamConfigAnnotationPdfReviewStatusColorChangesRequested,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.annotationMarker.width") Integer cqDamConfigAnnotationPdfAnnotationMarkerWidth,  @ApiParam(value = "")  @QueryParam("cq.dam.config.annotation.pdf.asset.minheight") Integer cqDamConfigAnnotationPdfAssetMinheight) {
        return delegate.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post, apply, delete, action, $location, propertylist, cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplAssetMoveListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAssetMoveListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplAssetMoveListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.comDayCqDamCoreImplAssetMoveListener(post, apply, delete, action, $location, propertylist, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplAssethomeAssetHomePageConfiguration( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("isEnabled") Boolean isEnabled) {
        return delegate.comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post, apply, delete, action, $location, propertylist, isEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.adhoc.asset.share.prezip.maxcontentsize") Integer cqDamAdhocAssetSharePrezipMaxcontentsize) {
        return delegate.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post, apply, delete, action, $location, propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplCacheCQBufferedImageCache( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.image.cache.max.memory") Integer cqDamImageCacheMaxMemory,  @ApiParam(value = "")  @QueryParam("cq.dam.image.cache.max.age") Integer cqDamImageCacheMaxAge,  @ApiParam(value = "")  @QueryParam("cq.dam.image.cache.max.dimension") String cqDamImageCacheMaxDimension) {
        return delegate.comDayCqDamCoreImplCacheCQBufferedImageCache(post, apply, delete, action, $location, propertylist, cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplDamChangeEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplDamChangeEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplDamChangeEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("changeeventlistener.observed.paths") List<String> changeeventlistenerObservedPaths) {
        return delegate.comDayCqDamCoreImplDamChangeEventListener(post, apply, delete, action, $location, propertylist, changeeventlistenerObservedPaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplDamEventPurgeServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplDamEventPurgeServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplDamEventPurgeService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression,  @ApiParam(value = "")  @QueryParam("maxSavedActivities") Integer maxSavedActivities,  @ApiParam(value = "")  @QueryParam("saveInterval") Integer saveInterval,  @ApiParam(value = "")  @QueryParam("enableActivityPurge") Boolean enableActivityPurge,  @ApiParam(value = "")  @QueryParam("eventTypes") String eventTypes) {
        return delegate.comDayCqDamCoreImplDamEventPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplDamEventRecorderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplDamEventRecorderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplDamEventRecorderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter,  @ApiParam(value = "")  @QueryParam("event.queue.length") Integer eventQueueLength,  @ApiParam(value = "")  @QueryParam("eventrecorder.enabled") Boolean eventrecorderEnabled,  @ApiParam(value = "")  @QueryParam("eventrecorder.blacklist") List<String> eventrecorderBlacklist,  @ApiParam(value = "")  @QueryParam("eventrecorder.eventtypes") String eventrecorderEventtypes) {
        return delegate.comDayCqDamCoreImplDamEventRecorderImpl(post, apply, delete, action, $location, propertylist, eventFilter, eventQueueLength, eventrecorderEnabled, eventrecorderBlacklist, eventrecorderEventtypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplEventDamEventAuditListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplEventDamEventAuditListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplEventDamEventAuditListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.comDayCqDamCoreImplEventDamEventAuditListener(post, apply, delete, action, $location, propertylist, eventFilter, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplExpiryNotificationJobImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplExpiryNotificationJobImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplExpiryNotificationJobImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.expiry.notification.scheduler.istimebased") Boolean cqDamExpiryNotificationSchedulerIstimebased,  @ApiParam(value = "")  @QueryParam("cq.dam.expiry.notification.scheduler.timebased.rule") String cqDamExpiryNotificationSchedulerTimebasedRule,  @ApiParam(value = "")  @QueryParam("cq.dam.expiry.notification.scheduler.period.rule") Integer cqDamExpiryNotificationSchedulerPeriodRule,  @ApiParam(value = "")  @QueryParam("send_email") Boolean sendEmail,  @ApiParam(value = "")  @QueryParam("asset_expired_limit") Integer assetExpiredLimit,  @ApiParam(value = "")  @QueryParam("prior_notification_seconds") Integer priorNotificationSeconds,  @ApiParam(value = "")  @QueryParam("cq.dam.expiry.notification.url.protocol") String cqDamExpiryNotificationUrlProtocol) {
        return delegate.comDayCqDamCoreImplExpiryNotificationJobImpl(post, apply, delete, action, $location, propertylist, cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("isEnabled") Boolean isEnabled) {
        return delegate.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post, apply, delete, action, $location, propertylist, isEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplGfxCommonsGfxRenderer( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("skip.bufferedcache") Boolean skipBufferedcache) {
        return delegate.comDayCqDamCoreImplGfxCommonsGfxRenderer(post, apply, delete, action, $location, propertylist, skipBufferedcache, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplHandlerEPSFormatHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("mimetype") String mimetype) {
        return delegate.comDayCqDamCoreImplHandlerEPSFormatHandler(post, apply, delete, action, $location, propertylist, mimetype, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplHandlerIndesignFormatHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("mimetype") List<String> mimetype) {
        return delegate.comDayCqDamCoreImplHandlerIndesignFormatHandler(post, apply, delete, action, $location, propertylist, mimetype, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplHandlerJpegHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerJpegHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplHandlerJpegHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.enable.ext.meta.extraction") Boolean cqDamEnableExtMetaExtraction,  @ApiParam(value = "")  @QueryParam("large_file_threshold") Integer largeFileThreshold,  @ApiParam(value = "")  @QueryParam("large_comment_threshold") Integer largeCommentThreshold) {
        return delegate.comDayCqDamCoreImplHandlerJpegHandler(post, apply, delete, action, $location, propertylist, cqDamEnableExtMetaExtraction, largeFileThreshold, largeCommentThreshold, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplHandlerXmpNCommXMPHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("xmphandler.cq.formats") List<String> xmphandlerCqFormats) {
        return delegate.comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post, apply, delete, action, $location, propertylist, xmphandlerCqFormats, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplJmxAssetIndexUpdateMonitor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("jmx.objectname") String jmxObjectname,  @ApiParam(value = "")  @QueryParam("property.measure.enabled") Boolean propertyMeasureEnabled,  @ApiParam(value = "")  @QueryParam("property.name") String propertyName,  @ApiParam(value = "")  @QueryParam("property.max.wait.ms") Integer propertyMaxWaitMs,  @ApiParam(value = "")  @QueryParam("property.max.rate") BigDecimal propertyMaxRate,  @ApiParam(value = "")  @QueryParam("fulltext.measure.enabled") Boolean fulltextMeasureEnabled,  @ApiParam(value = "")  @QueryParam("fulltext.name") String fulltextName,  @ApiParam(value = "")  @QueryParam("fulltext.max.wait.ms") Integer fulltextMaxWaitMs,  @ApiParam(value = "")  @QueryParam("fulltext.max.rate") BigDecimal fulltextMaxRate) {
        return delegate.comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post, apply, delete, action, $location, propertylist, jmxObjectname, propertyMeasureEnabled, propertyName, propertyMaxWaitMs, propertyMaxRate, fulltextMeasureEnabled, fulltextName, fulltextMaxWaitMs, fulltextMaxRate, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplJmxAssetMigrationMBeanImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("jmx.objectname") String jmxObjectname) {
        return delegate.comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post, apply, delete, action, $location, propertylist, jmxObjectname, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplJmxAssetUpdateMonitorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("jmx.objectname") String jmxObjectname,  @ApiParam(value = "")  @QueryParam("active") Boolean active) {
        return delegate.comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post, apply, delete, action, $location, propertylist, jmxObjectname, active, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("operation") String operation,  @ApiParam(value = "")  @QueryParam("emailEnabled") Boolean emailEnabled) {
        return delegate.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post, apply, delete, action, $location, propertylist, operation, emailEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("operation") String operation,  @ApiParam(value = "")  @QueryParam("operationIcon") String operationIcon,  @ApiParam(value = "")  @QueryParam("topicName") String topicName,  @ApiParam(value = "")  @QueryParam("emailEnabled") Boolean emailEnabled) {
        return delegate.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post, apply, delete, action, $location, propertylist, operation, operationIcon, topicName, emailEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplLightboxLightboxServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplLightboxLightboxServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplLightboxLightboxServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.paths") String slingServletPaths,  @ApiParam(value = "")  @QueryParam("sling.servlet.methods") List<String> slingServletMethods,  @ApiParam(value = "")  @QueryParam("cq.dam.enable.anonymous") Boolean cqDamEnableAnonymous) {
        return delegate.comDayCqDamCoreImplLightboxLightboxServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods, cqDamEnableAnonymous, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplMetadataEditorSelectComponentHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("granite:data") List<String> graniteColonData) {
        return delegate.comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post, apply, delete, action, $location, propertylist, graniteColonData, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.allow.all.mime") Boolean cqDamAllowAllMime,  @ApiParam(value = "")  @QueryParam("cq.dam.allowed.asset.mimes") List<String> cqDamAllowedAssetMimes) {
        return delegate.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post, apply, delete, action, $location, propertylist, cqDamAllowAllMime, cqDamAllowedAssetMimes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.detect.asset.mime.from.content") Boolean cqDamDetectAssetMimeFromContent) {
        return delegate.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamDetectAssetMimeFromContent, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplMissingMetadataNotificationJob( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.missingmetadata.notification.scheduler.istimebased") Boolean cqDamMissingmetadataNotificationSchedulerIstimebased,  @ApiParam(value = "")  @QueryParam("cq.dam.missingmetadata.notification.scheduler.timebased.rule") String cqDamMissingmetadataNotificationSchedulerTimebasedRule,  @ApiParam(value = "")  @QueryParam("cq.dam.missingmetadata.notification.scheduler.period.rule") Integer cqDamMissingmetadataNotificationSchedulerPeriodRule,  @ApiParam(value = "")  @QueryParam("cq.dam.missingmetadata.notification.recipient") String cqDamMissingmetadataNotificationRecipient) {
        return delegate.comDayCqDamCoreImplMissingMetadataNotificationJob(post, apply, delete, action, $location, propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("process.label") String processLabel,  @ApiParam(value = "")  @QueryParam("Notify on Complete") Boolean notifyOnComplete) {
        return delegate.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post, apply, delete, action, $location, propertylist, processLabel, notifyOnComplete, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplProcessTextExtractionProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplProcessTextExtractionProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplProcessTextExtractionProcess( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("mimeTypes") List<String> mimeTypes,  @ApiParam(value = "")  @QueryParam("maxExtract") Integer maxExtract) {
        return delegate.comDayCqDamCoreImplProcessTextExtractionProcess(post, apply, delete, action, $location, propertylist, mimeTypes, maxExtract, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplRenditionMakerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplRenditionMakerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplRenditionMakerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("xmp.propagate") Boolean xmpPropagate,  @ApiParam(value = "")  @QueryParam("xmp.excludes") List<String> xmpExcludes) {
        return delegate.comDayCqDamCoreImplRenditionMakerImpl(post, apply, delete, action, $location, propertylist, xmpPropagate, xmpExcludes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplReportsReportExportServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplReportsReportExportServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplReportsReportExportService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("queryBatchSize") Integer queryBatchSize) {
        return delegate.comDayCqDamCoreImplReportsReportExportService(post, apply, delete, action, $location, propertylist, queryBatchSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplReportsReportPurgeServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplReportsReportPurgeServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplReportsReportPurgeService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression,  @ApiParam(value = "")  @QueryParam("maxSavedReports") Integer maxSavedReports,  @ApiParam(value = "")  @QueryParam("timeDuration") Integer timeDuration,  @ApiParam(value = "")  @QueryParam("enableReportPurge") Boolean enableReportPurge) {
        return delegate.comDayCqDamCoreImplReportsReportPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedReports, timeDuration, enableReportPurge, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletAssetDownloadServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletAssetDownloadServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletAssetDownloadServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.comDayCqDamCoreImplServletAssetDownloadServlet(post, apply, delete, action, $location, propertylist, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletAssetStatusServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletAssetStatusServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletAssetStatusServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.batch.status.maxassets") Integer cqDamBatchStatusMaxassets) {
        return delegate.comDayCqDamCoreImplServletAssetStatusServlet(post, apply, delete, action, $location, propertylist, cqDamBatchStatusMaxassets, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletAssetXMPSearchServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.batch.indesign.maxassets") Integer cqDamBatchIndesignMaxassets) {
        return delegate.comDayCqDamCoreImplServletAssetXMPSearchServlet(post, apply, delete, action, $location, propertylist, cqDamBatchIndesignMaxassets, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletBatchMetadataServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletBatchMetadataServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletBatchMetadataServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.batch.metadata.asset.default") List<String> cqDamBatchMetadataAssetDefault,  @ApiParam(value = "")  @QueryParam("cq.dam.batch.metadata.collection.default") List<String> cqDamBatchMetadataCollectionDefault,  @ApiParam(value = "")  @QueryParam("cq.dam.batch.metadata.maxresources") Integer cqDamBatchMetadataMaxresources) {
        return delegate.comDayCqDamCoreImplServletBatchMetadataServlet(post, apply, delete, action, $location, propertylist, cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletBinaryProviderServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletBinaryProviderServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletBinaryProviderServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.resourceTypes") List<String> slingServletResourceTypes,  @ApiParam(value = "")  @QueryParam("sling.servlet.methods") List<String> slingServletMethods,  @ApiParam(value = "")  @QueryParam("cq.dam.drm.enable") Boolean cqDamDrmEnable) {
        return delegate.comDayCqDamCoreImplServletBinaryProviderServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, cqDamDrmEnable, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletCollectionServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCollectionServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletCollectionServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.batch.collection.properties") List<String> cqDamBatchCollectionProperties,  @ApiParam(value = "")  @QueryParam("cq.dam.batch.collection.maxcollections") Integer cqDamBatchCollectionMaxcollections) {
        return delegate.comDayCqDamCoreImplServletCollectionServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletCollectionsServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCollectionsServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletCollectionsServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.batch.collections.properties") List<String> cqDamBatchCollectionsProperties,  @ApiParam(value = "")  @QueryParam("cq.dam.batch.collections.limit") Integer cqDamBatchCollectionsLimit) {
        return delegate.comDayCqDamCoreImplServletCollectionsServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletCompanionServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCompanionServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletCompanionServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("More Info") String moreInfo,  @ApiParam(value = "")  @QueryParam("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}") String slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket) {
        return delegate.comDayCqDamCoreImplServletCompanionServlet(post, apply, delete, action, $location, propertylist, moreInfo, slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletCreateAssetServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCreateAssetServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletCreateAssetServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("detect_duplicate") Boolean detectDuplicate) {
        return delegate.comDayCqDamCoreImplServletCreateAssetServlet(post, apply, delete, action, $location, propertylist, detectDuplicate, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletDamContentDispositionFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.mime.type.blacklist") List<String> cqMimeTypeBlacklist,  @ApiParam(value = "")  @QueryParam("cq.dam.empty.mime") Boolean cqDamEmptyMime) {
        return delegate.comDayCqDamCoreImplServletDamContentDispositionFilter(post, apply, delete, action, $location, propertylist, cqMimeTypeBlacklist, cqDamEmptyMime, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletGuidLookupFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletGuidLookupFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletGuidLookupFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.core.guidlookupfilter.enabled") Boolean cqDamCoreGuidlookupfilterEnabled) {
        return delegate.comDayCqDamCoreImplServletGuidLookupFilter(post, apply, delete, action, $location, propertylist, cqDamCoreGuidlookupfilterEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletHealthCheckServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletHealthCheckServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletHealthCheckServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.sync.workflow.id") String cqDamSyncWorkflowId,  @ApiParam(value = "")  @QueryParam("cq.dam.sync.folder.types") List<String> cqDamSyncFolderTypes) {
        return delegate.comDayCqDamCoreImplServletHealthCheckServlet(post, apply, delete, action, $location, propertylist, cqDamSyncWorkflowId, cqDamSyncFolderTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletMetadataGetServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletMetadataGetServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletMetadataGetServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.resourceTypes") String slingServletResourceTypes,  @ApiParam(value = "")  @QueryParam("sling.servlet.methods") String slingServletMethods,  @ApiParam(value = "")  @QueryParam("sling.servlet.extensions") String slingServletExtensions,  @ApiParam(value = "")  @QueryParam("sling.servlet.selectors") String slingServletSelectors) {
        return delegate.comDayCqDamCoreImplServletMetadataGetServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletExtensions, slingServletSelectors, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletMultipleLicenseAcceptServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.drm.enable") Boolean cqDamDrmEnable) {
        return delegate.comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post, apply, delete, action, $location, propertylist, cqDamDrmEnable, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletResourceCollectionServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletResourceCollectionServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletResourceCollectionServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.resourceTypes") List<String> slingServletResourceTypes,  @ApiParam(value = "")  @QueryParam("sling.servlet.methods") String slingServletMethods,  @ApiParam(value = "")  @QueryParam("sling.servlet.selectors") String slingServletSelectors,  @ApiParam(value = "")  @QueryParam("download.config") String downloadConfig,  @ApiParam(value = "")  @QueryParam("view.selector") String viewSelector,  @ApiParam(value = "")  @QueryParam("send_email") Boolean sendEmail) {
        return delegate.comDayCqDamCoreImplServletResourceCollectionServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletSelectors, downloadConfig, viewSelector, sendEmail, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("createPreviewEnabled") Boolean createPreviewEnabled,  @ApiParam(value = "")  @QueryParam("updatePreviewEnabled") Boolean updatePreviewEnabled,  @ApiParam(value = "")  @QueryParam("queueSize") Integer queueSize,  @ApiParam(value = "")  @QueryParam("folderPreviewRenditionRegex") String folderPreviewRenditionRegex) {
        return delegate.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post, apply, delete, action, $location, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplUnzipUnzipConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplUnzipUnzipConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplUnzipUnzipConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.config.unzip.maxuncompressedsize") Integer cqDamConfigUnzipMaxuncompressedsize,  @ApiParam(value = "")  @QueryParam("cq.dam.config.unzip.encoding") String cqDamConfigUnzipEncoding) {
        return delegate.comDayCqDamCoreImplUnzipUnzipConfig(post, apply, delete, action, $location, propertylist, cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreProcessExifToolExtractMetadataProcess( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("process.label") String processLabel,  @ApiParam(value = "")  @QueryParam("cq.dam.enable.sha1") Boolean cqDamEnableSha1) {
        return delegate.comDayCqDamCoreProcessExifToolExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreProcessExtractMetadataProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreProcessExtractMetadataProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreProcessExtractMetadataProcess( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("process.label") String processLabel,  @ApiParam(value = "")  @QueryParam("cq.dam.enable.sha1") Boolean cqDamEnableSha1) {
        return delegate.comDayCqDamCoreProcessExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamCoreProcessMetadataProcessorProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreProcessMetadataProcessorProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreProcessMetadataProcessorProcess( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("process.label") String processLabel,  @ApiParam(value = "")  @QueryParam("cq.dam.enable.sha1") Boolean cqDamEnableSha1,  @ApiParam(value = "")  @QueryParam("cq.dam.metadata.xssprotected.properties") List<String> cqDamMetadataXssprotectedProperties) {
        return delegate.comDayCqDamCoreProcessMetadataProcessorProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1, cqDamMetadataXssprotectedProperties, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamHandlerFfmpegLocatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerFfmpegLocatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamHandlerFfmpegLocatorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("executable.searchpath") List<String> executableSearchpath) {
        return delegate.comDayCqDamHandlerFfmpegLocatorImpl(post, apply, delete, action, $location, propertylist, executableSearchpath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter,  @ApiParam(value = "")  @QueryParam("fontmgr.system.font.dir") List<String> fontmgrSystemFontDir,  @ApiParam(value = "")  @QueryParam("fontmgr.adobe.font.dir") String fontmgrAdobeFontDir,  @ApiParam(value = "")  @QueryParam("fontmgr.customer.font.dir") String fontmgrCustomerFontDir) {
        return delegate.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, fontmgrSystemFontDir, fontmgrAdobeFontDir, fontmgrCustomerFontDir, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamHandlerStandardPdfPdfHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerStandardPdfPdfHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamHandlerStandardPdfPdfHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("raster.annotation") Boolean rasterAnnotation) {
        return delegate.comDayCqDamHandlerStandardPdfPdfHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamHandlerStandardPsPostScriptHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("raster.annotation") Boolean rasterAnnotation) {
        return delegate.comDayCqDamHandlerStandardPsPostScriptHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamHandlerStandardPsdPsdHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerStandardPsdPsdHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamHandlerStandardPsdPsdHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("large_file_threshold") Integer largeFileThreshold) {
        return delegate.comDayCqDamHandlerStandardPsdPsdHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamIdsImplIDSJobProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamIdsImplIDSJobProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamIdsImplIDSJobProcessor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enable.multisession") Boolean enableMultisession,  @ApiParam(value = "")  @QueryParam("ids.cc.enable") Boolean idsCcEnable,  @ApiParam(value = "")  @QueryParam("enable.retry") Boolean enableRetry,  @ApiParam(value = "")  @QueryParam("enable.retry.scripterror") Boolean enableRetryScripterror,  @ApiParam(value = "")  @QueryParam("externalizer.domain.cqhost") String externalizerDomainCqhost,  @ApiParam(value = "")  @QueryParam("externalizer.domain.http") String externalizerDomainHttp) {
        return delegate.comDayCqDamIdsImplIDSJobProcessor(post, apply, delete, action, $location, propertylist, enableMultisession, idsCcEnable, enableRetry, enableRetryScripterror, externalizerDomainCqhost, externalizerDomainHttp, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamIdsImplIDSPoolManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamIdsImplIDSPoolManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamIdsImplIDSPoolManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("max.errors.to.blacklist") Integer maxErrorsToBlacklist,  @ApiParam(value = "")  @QueryParam("retry.interval.to.whitelist") Integer retryIntervalToWhitelist,  @ApiParam(value = "")  @QueryParam("connect.timeout") Integer connectTimeout,  @ApiParam(value = "")  @QueryParam("socket.timeout") Integer socketTimeout,  @ApiParam(value = "")  @QueryParam("process.label") String processLabel,  @ApiParam(value = "")  @QueryParam("connection.use.max") Integer connectionUseMax) {
        return delegate.comDayCqDamIdsImplIDSPoolManagerImpl(post, apply, delete, action, $location, propertylist, maxErrorsToBlacklist, retryIntervalToWhitelist, connectTimeout, socketTimeout, processLabel, connectionUseMax, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamInddImplHandlerIndesignXMPHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("process.label") String processLabel,  @ApiParam(value = "")  @QueryParam("extract.pages") Boolean extractPages) {
        return delegate.comDayCqDamInddImplHandlerIndesignXMPHandler(post, apply, delete, action, $location, propertylist, processLabel, extractPages, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamInddImplServletSnippetCreationServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamInddImplServletSnippetCreationServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamInddImplServletSnippetCreationServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("snippetcreation.maxcollections") Integer snippetcreationMaxcollections) {
        return delegate.comDayCqDamInddImplServletSnippetCreationServlet(post, apply, delete, action, $location, propertylist, snippetcreationMaxcollections, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamInddProcessINDDMediaExtractProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamInddProcessINDDMediaExtractProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamInddProcessINDDMediaExtractProcess( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("process.label") String processLabel,  @ApiParam(value = "")  @QueryParam("cq.dam.indd.pages.regex") String cqDamInddPagesRegex,  @ApiParam(value = "")  @QueryParam("ids.job.decoupled") Boolean idsJobDecoupled,  @ApiParam(value = "")  @QueryParam("ids.job.workflow.model") String idsJobWorkflowModel) {
        return delegate.comDayCqDamInddProcessINDDMediaExtractProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamInddPagesRegex, idsJobDecoupled, idsJobWorkflowModel, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("batch.commit.size") Integer batchCommitSize) {
        return delegate.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post, apply, delete, action, $location, propertylist, batchCommitSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression) {
        return delegate.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post, apply, delete, action, $location, propertylist, schedulerExpression, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("delete.zip.file") Boolean deleteZipFile) {
        return delegate.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post, apply, delete, action, $location, propertylist, deleteZipFile, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled") Boolean cqDamS7damDynamicmediaconfigeventlistenerEnabled) {
        return delegate.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post, apply, delete, action, $location, propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression,  @ApiParam(value = "")  @QueryParam("scheduler.concurrent") Boolean schedulerConcurrent) {
        return delegate.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonPostServletsSetCreateHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.post.operation") String slingPostOperation,  @ApiParam(value = "")  @QueryParam("sling.servlet.methods") String slingServletMethods) {
        return delegate.comDayCqDamS7damCommonPostServletsSetCreateHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonPostServletsSetModifyHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.post.operation") String slingPostOperation,  @ApiParam(value = "")  @QueryParam("sling.servlet.methods") String slingServletMethods) {
        return delegate.comDayCqDamS7damCommonPostServletsSetModifyHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("process.label") String processLabel) {
        return delegate.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post, apply, delete, action, $location, propertylist, processLabel, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonS7damDamChangeEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.s7dam.damchangeeventlistener.enabled") Boolean cqDamS7damDamchangeeventlistenerEnabled) {
        return delegate.comDayCqDamS7damCommonS7damDamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamS7damDamchangeeventlistenerEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonServletsS7damProductInfoServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.paths") String slingServletPaths,  @ApiParam(value = "")  @QueryParam("sling.servlet.methods") String slingServletMethods) {
        return delegate.comDayCqDamS7damCommonServletsS7damProductInfoServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name") Integer cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName,  @ApiParam(value = "")  @QueryParam("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name") Integer cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName,  @ApiParam(value = "")  @QueryParam("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name") Integer cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName,  @ApiParam(value = "")  @QueryParam("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name") Integer cqDamS7damVideoproxyclientserviceHttpReadtimeoutName,  @ApiParam(value = "")  @QueryParam("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name") Integer cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName,  @ApiParam(value = "")  @QueryParam("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name") Integer cqDamS7damVideoproxyclientserviceHttpMaxretrycountName,  @ApiParam(value = "")  @QueryParam("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name") Integer cqDamS7damVideoproxyclientserviceUploadprogressIntervalName) {
        return delegate.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post, apply, delete, action, $location, propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7APIClientImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7APIClientImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7APIClientImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.scene7.apiclient.recordsperpage.nofilter.name") Integer cqDamScene7ApiclientRecordsperpageNofilterName,  @ApiParam(value = "")  @QueryParam("cq.dam.scene7.apiclient.recordsperpage.withfilter.name") Integer cqDamScene7ApiclientRecordsperpageWithfilterName) {
        return delegate.comDayCqDamScene7ImplScene7APIClientImpl(post, apply, delete, action, $location, propertylist, cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.scene7.assetmimetypeservice.mapping") List<String> cqDamScene7AssetmimetypeserviceMapping) {
        return delegate.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7AssetmimetypeserviceMapping, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7ConfigurationEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.scene7.configurationeventlistener.enabled") Boolean cqDamScene7ConfigurationeventlistenerEnabled) {
        return delegate.comDayCqDamScene7ImplScene7ConfigurationEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7ConfigurationeventlistenerEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7DamChangeEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.scene7.damchangeeventlistener.enabled") Boolean cqDamScene7DamchangeeventlistenerEnabled,  @ApiParam(value = "")  @QueryParam("cq.dam.scene7.damchangeeventlistener.observed.paths") List<String> cqDamScene7DamchangeeventlistenerObservedPaths) {
        return delegate.comDayCqDamScene7ImplScene7DamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scene7FlashTemplates.rti") String scene7FlashTemplatesRti,  @ApiParam(value = "")  @QueryParam("scene7FlashTemplates.rsi") String scene7FlashTemplatesRsi,  @ApiParam(value = "")  @QueryParam("scene7FlashTemplates.rb") String scene7FlashTemplatesRb,  @ApiParam(value = "")  @QueryParam("scene7FlashTemplates.rurl") String scene7FlashTemplatesRurl,  @ApiParam(value = "")  @QueryParam("scene7FlashTemplate.urlFormatParameter") String scene7FlashTemplateUrlFormatParameter) {
        return delegate.comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post, apply, delete, action, $location, propertylist, scene7FlashTemplatesRti, scene7FlashTemplatesRsi, scene7FlashTemplatesRb, scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7UploadServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7UploadServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7UploadServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.dam.scene7.uploadservice.activejobtimeout.label") Integer cqDamScene7UploadserviceActivejobtimeoutLabel,  @ApiParam(value = "")  @QueryParam("cq.dam.scene7.uploadservice.connectionmaxperroute.label") Integer cqDamScene7UploadserviceConnectionmaxperrouteLabel) {
        return delegate.comDayCqDamScene7ImplScene7UploadServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("getCacheExpirationUnit") String getCacheExpirationUnit,  @ApiParam(value = "")  @QueryParam("getCacheExpirationValue") Integer getCacheExpirationValue) {
        return delegate.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post, apply, delete, action, $location, propertylist, getCacheExpirationUnit, getCacheExpirationValue, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamStockIntegrationImplConfigurationStockConfiguration( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("locale") String locale,  @ApiParam(value = "")  @QueryParam("imsConfig") String imsConfig) {
        return delegate.comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post, apply, delete, action, $location, propertylist, name, locale, imsConfig, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqDamVideoImplServletVideoTestServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamVideoImplServletVideoTestServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamVideoImplServletVideoTestServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.comDayCqDamVideoImplServletVideoTestServlet(post, apply, delete, action, $location, propertylist, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqExtwidgetServletsImageSpriteServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqExtwidgetServletsImageSpriteServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqExtwidgetServletsImageSpriteServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("maxWidth") Integer maxWidth,  @ApiParam(value = "")  @QueryParam("maxHeight") Integer maxHeight) {
        return delegate.comDayCqExtwidgetServletsImageSpriteServlet(post, apply, delete, action, $location, propertylist, maxWidth, maxHeight, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.image.internal.font.FontHelper")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqImageInternalFontFontHelperInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqImageInternalFontFontHelperInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqImageInternalFontFontHelper( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("fontpath") List<String> fontpath,  @ApiParam(value = "")  @QueryParam("oversamplingFactor") Integer oversamplingFactor) {
        return delegate.comDayCqImageInternalFontFontHelper(post, apply, delete, action, $location, propertylist, fontpath, oversamplingFactor, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqJcrclustersupportClusterStartLevelControllerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqJcrclustersupportClusterStartLevelControllerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqJcrclustersupportClusterStartLevelController( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cluster.level.enable") Boolean clusterLevelEnable,  @ApiParam(value = "")  @QueryParam("cluster.master.level") Integer clusterMasterLevel,  @ApiParam(value = "")  @QueryParam("cluster.slave.level") Integer clusterSlaveLevel) {
        return delegate.comDayCqJcrclustersupportClusterStartLevelController(post, apply, delete, action, $location, propertylist, clusterLevelEnable, clusterMasterLevel, clusterSlaveLevel, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mailer.DefaultMailService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMailerDefaultMailServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerDefaultMailServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMailerDefaultMailService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("smtp.host") String smtpHost,  @ApiParam(value = "")  @QueryParam("smtp.port") Integer smtpPort,  @ApiParam(value = "")  @QueryParam("smtp.user") String smtpUser,  @ApiParam(value = "")  @QueryParam("smtp.password") String smtpPassword,  @ApiParam(value = "")  @QueryParam("from.address") String fromAddress,  @ApiParam(value = "")  @QueryParam("smtp.ssl") Boolean smtpSsl,  @ApiParam(value = "")  @QueryParam("smtp.starttls") Boolean smtpStarttls,  @ApiParam(value = "")  @QueryParam("debug.email") Boolean debugEmail) {
        return delegate.comDayCqMailerDefaultMailService(post, apply, delete, action, $location, propertylist, smtpHost, smtpPort, smtpUser, smtpPassword, fromAddress, smtpSsl, smtpStarttls, debugEmail, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mailer.impl.CqMailingService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMailerImplCqMailingServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerImplCqMailingServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMailerImplCqMailingService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("max.recipient.count") String maxRecipientCount) {
        return delegate.comDayCqMailerImplCqMailingService(post, apply, delete, action, $location, propertylist, maxRecipientCount, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMailerImplEmailCqEmailTemplateFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("mailer.email.charset") String mailerEmailCharset) {
        return delegate.comDayCqMailerImplEmailCqEmailTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailCharset, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMailerImplEmailCqRetrieverTemplateFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("mailer.email.embed") Boolean mailerEmailEmbed,  @ApiParam(value = "")  @QueryParam("mailer.email.charset") String mailerEmailCharset,  @ApiParam(value = "")  @QueryParam("mailer.email.retrieverUserID") String mailerEmailRetrieverUserID,  @ApiParam(value = "")  @QueryParam("mailer.email.retrieverUserPWD") String mailerEmailRetrieverUserPWD) {
        return delegate.comDayCqMailerImplEmailCqRetrieverTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailEmbed, mailerEmailCharset, mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMcmCampaignImplIntegrationConfigImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmCampaignImplIntegrationConfigImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmCampaignImplIntegrationConfigImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("aem.mcm.campaign.formConstraints") List<String> aemMcmCampaignFormConstraints,  @ApiParam(value = "")  @QueryParam("aem.mcm.campaign.publicUrl") String aemMcmCampaignPublicUrl,  @ApiParam(value = "")  @QueryParam("aem.mcm.campaign.relaxedSSL") Boolean aemMcmCampaignRelaxedSSL) {
        return delegate.comDayCqMcmCampaignImplIntegrationConfigImpl(post, apply, delete, action, $location, propertylist, aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("from.address") String fromAddress,  @ApiParam(value = "")  @QueryParam("sender.host") String senderHost,  @ApiParam(value = "")  @QueryParam("max.bounce.count") String maxBounceCount) {
        return delegate.comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post, apply, delete, action, $location, propertylist, fromAddress, senderHost, maxBounceCount, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMcmImplMCMConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmImplMCMConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmImplMCMConfiguration( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("experience.indirection") List<String> experienceIndirection,  @ApiParam(value = "")  @QueryParam("touchpoint.indirection") List<String> touchpointIndirection) {
        return delegate.comDayCqMcmImplMCMConfiguration(post, apply, delete, action, $location, propertylist, experienceIndirection, touchpointIndirection, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern,  @ApiParam(value = "")  @QueryParam("component.resourceType") String componentResourceType) {
        return delegate.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern,  @ApiParam(value = "")  @QueryParam("component.resourceType") String componentResourceType) {
        return delegate.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern,  @ApiParam(value = "")  @QueryParam("component.resourceType") String componentResourceType) {
        return delegate.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqNotificationImplNotificationServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqNotificationImplNotificationServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqNotificationImplNotificationServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter) {
        return delegate.comDayCqNotificationImplNotificationServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqPersonalizationImplServletsTargetingConfigurationServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("forcelocation") Boolean forcelocation) {
        return delegate.comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post, apply, delete, action, $location, propertylist, forcelocation, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqPollingImporterImplManagedPollConfigImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPollingImporterImplManagedPollConfigImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqPollingImporterImplManagedPollConfigImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("id") String id,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("reference") Boolean reference,  @ApiParam(value = "")  @QueryParam("interval") Integer interval,  @ApiParam(value = "")  @QueryParam("expression") String expression,  @ApiParam(value = "")  @QueryParam("source") String source,  @ApiParam(value = "")  @QueryParam("target") String target,  @ApiParam(value = "")  @QueryParam("login") String login,  @ApiParam(value = "")  @QueryParam("password") String password) {
        return delegate.comDayCqPollingImporterImplManagedPollConfigImpl(post, apply, delete, action, $location, propertylist, id, enabled, reference, interval, expression, source, target, login, password, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqPollingImporterImplManagedPollingImporterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPollingImporterImplManagedPollingImporterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqPollingImporterImplManagedPollingImporterImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("importer.user") String importerUser) {
        return delegate.comDayCqPollingImporterImplManagedPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerUser, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqPollingImporterImplPollingImporterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPollingImporterImplPollingImporterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqPollingImporterImplPollingImporterImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("importer.min.interval") Integer importerMinInterval,  @ApiParam(value = "")  @QueryParam("importer.user") String importerUser,  @ApiParam(value = "")  @QueryParam("exclude.paths") List<String> excludePaths,  @ApiParam(value = "")  @QueryParam("include.paths") List<String> includePaths) {
        return delegate.comDayCqPollingImporterImplPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerMinInterval, importerUser, excludePaths, includePaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationAuditReplicationEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationAuditReplicationEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationAuditReplicationEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking) {
        return delegate.comDayCqReplicationAuditReplicationEventListener(post, apply, delete, action, $location, propertylist, serviceRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.content.StaticContentBuilder")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationContentStaticContentBuilderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationContentStaticContentBuilderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationContentStaticContentBuilder( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("host") String host,  @ApiParam(value = "")  @QueryParam("port") Integer port) {
        return delegate.comDayCqReplicationContentStaticContentBuilder(post, apply, delete, action, $location, propertylist, host, port, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplAgentManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplAgentManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplAgentManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("job.topics") String jobTopics,  @ApiParam(value = "")  @QueryParam("serviceUser.target") String serviceUserTarget,  @ApiParam(value = "")  @QueryParam("agentProvider.target") String agentProviderTarget) {
        return delegate.comDayCqReplicationImplAgentManagerImpl(post, apply, delete, action, $location, propertylist, jobTopics, serviceUserTarget, agentProviderTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplContentDurboBinaryLessContentBuilder( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("binary.threshold") Integer binaryThreshold) {
        return delegate.comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post, apply, delete, action, $location, propertylist, binaryThreshold, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplContentDurboDurboImportConfigurationProv( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("preserve.hierarchy.nodes") Boolean preserveHierarchyNodes,  @ApiParam(value = "")  @QueryParam("ignore.versioning") Boolean ignoreVersioning,  @ApiParam(value = "")  @QueryParam("import.acl") Boolean importAcl,  @ApiParam(value = "")  @QueryParam("save.threshold") Integer saveThreshold,  @ApiParam(value = "")  @QueryParam("preserve.user.paths") Boolean preserveUserPaths,  @ApiParam(value = "")  @QueryParam("preserve.uuid") Boolean preserveUuid,  @ApiParam(value = "")  @QueryParam("preserve.uuid.nodetypes") List<String> preserveUuidNodetypes,  @ApiParam(value = "")  @QueryParam("preserve.uuid.subtrees") List<String> preserveUuidSubtrees,  @ApiParam(value = "")  @QueryParam("auto.commit") Boolean autoCommit) {
        return delegate.comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post, apply, delete, action, $location, propertylist, preserveHierarchyNodes, ignoreVersioning, importAcl, saveThreshold, preserveUserPaths, preserveUuid, preserveUuidNodetypes, preserveUuidSubtrees, autoCommit, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplReplicationContentFactoryProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("replication.content.useFileStorage") Boolean replicationContentUseFileStorage,  @ApiParam(value = "")  @QueryParam("replication.content.maxCommitAttempts") Integer replicationContentMaxCommitAttempts) {
        return delegate.comDayCqReplicationImplReplicationContentFactoryProviderImpl(post, apply, delete, action, $location, propertylist, replicationContentUseFileStorage, replicationContentMaxCommitAttempts, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplReplicationReceiverImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReplicationReceiverImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplReplicationReceiverImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("receiver.tmpfile.threshold") Integer receiverTmpfileThreshold,  @ApiParam(value = "")  @QueryParam("receiver.packages.use.install") Boolean receiverPackagesUseInstall) {
        return delegate.comDayCqReplicationImplReplicationReceiverImpl(post, apply, delete, action, $location, propertylist, receiverTmpfileThreshold, receiverPackagesUseInstall, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplReplicatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReplicatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplReplicatorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("distribute_events") Boolean distributeEvents) {
        return delegate.comDayCqReplicationImplReplicatorImpl(post, apply, delete, action, $location, propertylist, distributeEvents, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.ReverseReplicator")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplReverseReplicatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReverseReplicatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplReverseReplicator( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.period") Integer schedulerPeriod) {
        return delegate.comDayCqReplicationImplReverseReplicator(post, apply, delete, action, $location, propertylist, schedulerPeriod, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplTransportBinaryLessTransportHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("disabled.cipher.suites") List<String> disabledCipherSuites,  @ApiParam(value = "")  @QueryParam("enabled.cipher.suites") List<String> enabledCipherSuites) {
        return delegate.comDayCqReplicationImplTransportBinaryLessTransportHandler(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.transport.Http")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplTransportHttpInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplTransportHttpInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplTransportHttp( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("disabled.cipher.suites") List<String> disabledCipherSuites,  @ApiParam(value = "")  @QueryParam("enabled.cipher.suites") List<String> enabledCipherSuites) {
        return delegate.comDayCqReplicationImplTransportHttp(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReportingImplCacheCacheImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReportingImplCacheCacheImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReportingImplCacheCacheImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("repcache.enable") Boolean repcacheEnable,  @ApiParam(value = "")  @QueryParam("repcache.ttl") Integer repcacheTtl,  @ApiParam(value = "")  @QueryParam("repcache.max") Integer repcacheMax) {
        return delegate.comDayCqReportingImplCacheCacheImpl(post, apply, delete, action, $location, propertylist, repcacheEnable, repcacheTtl, repcacheMax, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReportingImplConfigServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReportingImplConfigServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReportingImplConfigServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("repconf.timezone") String repconfTimezone,  @ApiParam(value = "")  @QueryParam("repconf.locale") String repconfLocale,  @ApiParam(value = "")  @QueryParam("repconf.snapshots") String repconfSnapshots,  @ApiParam(value = "")  @QueryParam("repconf.repdir") String repconfRepdir,  @ApiParam(value = "")  @QueryParam("repconf.hourofday") Integer repconfHourofday,  @ApiParam(value = "")  @QueryParam("repconf.minofhour") Integer repconfMinofhour,  @ApiParam(value = "")  @QueryParam("repconf.maxrows") Integer repconfMaxrows,  @ApiParam(value = "")  @QueryParam("repconf.fakedata") Boolean repconfFakedata,  @ApiParam(value = "")  @QueryParam("repconf.snapshotuser") String repconfSnapshotuser,  @ApiParam(value = "")  @QueryParam("repconf.enforcesnapshotuser") Boolean repconfEnforcesnapshotuser) {
        return delegate.comDayCqReportingImplConfigServiceImpl(post, apply, delete, action, $location, propertylist, repconfTimezone, repconfLocale, repconfSnapshots, repconfRepdir, repconfHourofday, repconfMinofhour, repconfMaxrows, repconfFakedata, repconfSnapshotuser, repconfEnforcesnapshotuser, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqReportingImplRLogAnalyzerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReportingImplRLogAnalyzerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReportingImplRLogAnalyzer( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("request.log.output") String requestLogOutput) {
        return delegate.comDayCqReportingImplRLogAnalyzer(post, apply, delete, action, $location, propertylist, requestLogOutput, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqRewriterLinkcheckerImplLinkCheckerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.period") Integer schedulerPeriod,  @ApiParam(value = "")  @QueryParam("scheduler.concurrent") Boolean schedulerConcurrent,  @ApiParam(value = "")  @QueryParam("service.bad_link_tolerance_interval") Integer serviceBadLinkToleranceInterval,  @ApiParam(value = "")  @QueryParam("service.check_override_patterns") List<String> serviceCheckOverridePatterns,  @ApiParam(value = "")  @QueryParam("service.cache_broken_internal_links") Boolean serviceCacheBrokenInternalLinks,  @ApiParam(value = "")  @QueryParam("service.special_link_prefix") List<String> serviceSpecialLinkPrefix,  @ApiParam(value = "")  @QueryParam("service.special_link_patterns") List<String> serviceSpecialLinkPatterns) {
        return delegate.comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, serviceBadLinkToleranceInterval, serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix, serviceSpecialLinkPatterns, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqRewriterLinkcheckerImplLinkCheckerTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.period") Integer schedulerPeriod,  @ApiParam(value = "")  @QueryParam("scheduler.concurrent") Boolean schedulerConcurrent,  @ApiParam(value = "")  @QueryParam("good_link_test_interval") Integer goodLinkTestInterval,  @ApiParam(value = "")  @QueryParam("bad_link_test_interval") Integer badLinkTestInterval,  @ApiParam(value = "")  @QueryParam("link_unused_interval") Integer linkUnusedInterval,  @ApiParam(value = "")  @QueryParam("connection.timeout") Integer connectionTimeout) {
        return delegate.comDayCqRewriterLinkcheckerImplLinkCheckerTask(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("linkcheckertransformer.disableRewriting") Boolean linkcheckertransformerDisableRewriting,  @ApiParam(value = "")  @QueryParam("linkcheckertransformer.disableChecking") Boolean linkcheckertransformerDisableChecking,  @ApiParam(value = "")  @QueryParam("linkcheckertransformer.mapCacheSize") Integer linkcheckertransformerMapCacheSize,  @ApiParam(value = "")  @QueryParam("linkcheckertransformer.strictExtensionCheck") Boolean linkcheckertransformerStrictExtensionCheck,  @ApiParam(value = "")  @QueryParam("linkcheckertransformer.stripHtmltExtension") Boolean linkcheckertransformerStripHtmltExtension,  @ApiParam(value = "")  @QueryParam("linkcheckertransformer.rewriteElements") List<String> linkcheckertransformerRewriteElements,  @ApiParam(value = "")  @QueryParam("linkcheckertransformer.stripExtensionPathBlacklist") List<String> linkcheckertransformerStripExtensionPathBlacklist) {
        return delegate.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post, apply, delete, action, $location, propertylist, linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.max_links_per_host") Integer serviceMaxLinksPerHost,  @ApiParam(value = "")  @QueryParam("service.save_external_link_references") Boolean serviceSaveExternalLinkReferences) {
        return delegate.comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post, apply, delete, action, $location, propertylist, serviceMaxLinksPerHost, serviceSaveExternalLinkReferences, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqRewriterProcessorImplHtmlParserFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("htmlparser.processTags") List<String> htmlparserProcessTags,  @ApiParam(value = "")  @QueryParam("htmlparser.preserveCamelCase") Boolean htmlparserPreserveCamelCase) {
        return delegate.comDayCqRewriterProcessorImplHtmlParserFactory(post, apply, delete, action, $location, propertylist, htmlparserProcessTags, htmlparserPreserveCamelCase, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqSearchImplBuilderQueryBuilderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchImplBuilderQueryBuilderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqSearchImplBuilderQueryBuilderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("excerpt.properties") List<String> excerptProperties,  @ApiParam(value = "")  @QueryParam("cache.max.entries") Integer cacheMaxEntries,  @ApiParam(value = "")  @QueryParam("cache.entry.lifetime") Integer cacheEntryLifetime,  @ApiParam(value = "")  @QueryParam("xpath.union") Boolean xpathUnion) {
        return delegate.comDayCqSearchImplBuilderQueryBuilderImpl(post, apply, delete, action, $location, propertylist, excerptProperties, cacheMaxEntries, cacheEntryLifetime, xpathUnion, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqSearchSuggestImplSuggestionIndexManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("pathBuilder.target") String pathBuilderTarget,  @ApiParam(value = "")  @QueryParam("suggest.basepath") String suggestBasepath) {
        return delegate.comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post, apply, delete, action, $location, propertylist, pathBuilderTarget, suggestBasepath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.searchpromote.confighandler.enabled") Boolean cqSearchpromoteConfighandlerEnabled) {
        return delegate.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfighandlerEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqSearchpromoteImplSearchPromoteServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.searchpromote.configuration.server.uri") String cqSearchpromoteConfigurationServerUri,  @ApiParam(value = "")  @QueryParam("cq.searchpromote.configuration.environment") String cqSearchpromoteConfigurationEnvironment,  @ApiParam(value = "")  @QueryParam("connection.timeout") Integer connectionTimeout,  @ApiParam(value = "")  @QueryParam("socket.timeout") Integer socketTimeout) {
        return delegate.comDayCqSearchpromoteImplSearchPromoteServiceImpl(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment, connectionTimeout, socketTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.security.ACLSetup")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqSecurityACLSetupInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSecurityACLSetupInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqSecurityACLSetup( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.aclsetup.rules") List<String> cqAclsetupRules) {
        return delegate.comDayCqSecurityACLSetup(post, apply, delete, action, $location, propertylist, cqAclsetupRules, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqStatisticsImplStatisticsServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqStatisticsImplStatisticsServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqStatisticsImplStatisticsServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.period") Integer schedulerPeriod,  @ApiParam(value = "")  @QueryParam("scheduler.concurrent") Boolean schedulerConcurrent,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("workspace") String workspace,  @ApiParam(value = "")  @QueryParam("keywordsPath") String keywordsPath,  @ApiParam(value = "")  @QueryParam("asyncEntries") Boolean asyncEntries) {
        return delegate.comDayCqStatisticsImplStatisticsServiceImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, path, workspace, keywordsPath, asyncEntries, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqTaggingImplJcrTagManagerFactoryImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("validation.enabled") Boolean validationEnabled) {
        return delegate.comDayCqTaggingImplJcrTagManagerFactoryImpl(post, apply, delete, action, $location, propertylist, validationEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqTaggingImplSearchTagPredicateEvaluator( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("ignore_path") Boolean ignorePath) {
        return delegate.comDayCqTaggingImplSearchTagPredicateEvaluator(post, apply, delete, action, $location, propertylist, ignorePath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqTaggingImplTagGarbageCollectorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqTaggingImplTagGarbageCollectorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqTaggingImplTagGarbageCollector( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression) {
        return delegate.comDayCqTaggingImplTagGarbageCollector(post, apply, delete, action, $location, propertylist, schedulerExpression, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmContentsyncImplHandlerPagesUpdateHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.pagesupdatehandler.imageresourcetypes") List<String> cqPagesupdatehandlerImageresourcetypes) {
        return delegate.comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.contentsync.pathrewritertransformer.mapping.links") List<String> cqContentsyncPathrewritertransformerMappingLinks,  @ApiParam(value = "")  @QueryParam("cq.contentsync.pathrewritertransformer.mapping.clientlibs") List<String> cqContentsyncPathrewritertransformerMappingClientlibs,  @ApiParam(value = "")  @QueryParam("cq.contentsync.pathrewritertransformer.mapping.images") List<String> cqContentsyncPathrewritertransformerMappingImages,  @ApiParam(value = "")  @QueryParam("cq.contentsync.pathrewritertransformer.attribute.pattern") String cqContentsyncPathrewritertransformerAttributePattern,  @ApiParam(value = "")  @QueryParam("cq.contentsync.pathrewritertransformer.clientlibrary.pattern") String cqContentsyncPathrewritertransformerClientlibraryPattern,  @ApiParam(value = "")  @QueryParam("cq.contentsync.pathrewritertransformer.clientlibrary.replace") String cqContentsyncPathrewritertransformerClientlibraryReplace) {
        return delegate.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post, apply, delete, action, $location, propertylist, cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplAuthoringUIModeServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("authoringUIModeService.default") String authoringUIModeServiceDefault) {
        return delegate.comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post, apply, delete, action, $location, propertylist, authoringUIModeServiceDefault, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplCommandsWCMCommandServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("wcmcommandservlet.delete_whitelist") List<String> wcmcommandservletDeleteWhitelist) {
        return delegate.comDayCqWcmCoreImplCommandsWCMCommandServlet(post, apply, delete, action, $location, propertylist, wcmcommandservletDeleteWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("dim.default.mode") String dimDefaultMode,  @ApiParam(value = "")  @QueryParam("dim.appcache.enabled") Boolean dimAppcacheEnabled) {
        return delegate.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post, apply, delete, action, $location, propertylist, dimDefaultMode, dimAppcacheEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplEventPageEventAuditListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("configured") String configured) {
        return delegate.comDayCqWcmCoreImplEventPageEventAuditListener(post, apply, delete, action, $location, propertylist, configured, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplEventPagePostProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventPagePostProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplEventPagePostProcessor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("paths") List<String> paths) {
        return delegate.comDayCqWcmCoreImplEventPagePostProcessor(post, apply, delete, action, $location, propertylist, paths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplEventRepositoryChangeEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("paths") List<String> paths,  @ApiParam(value = "")  @QueryParam("excludedPaths") List<String> excludedPaths) {
        return delegate.comDayCqWcmCoreImplEventRepositoryChangeEventListener(post, apply, delete, action, $location, propertylist, paths, excludedPaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplEventTemplatePostProcessor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("paths") String paths) {
        return delegate.comDayCqWcmCoreImplEventTemplatePostProcessor(post, apply, delete, action, $location, propertylist, paths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplLanguageManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplLanguageManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplLanguageManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("langmgr.list.path") String langmgrListPath,  @ApiParam(value = "")  @QueryParam("langmgr.country.default") List<String> langmgrCountryDefault) {
        return delegate.comDayCqWcmCoreImplLanguageManagerImpl(post, apply, delete, action, $location, propertylist, langmgrListPath, langmgrCountryDefault, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("link.expired.prefix") String linkExpiredPrefix,  @ApiParam(value = "")  @QueryParam("link.expired.remove") Boolean linkExpiredRemove,  @ApiParam(value = "")  @QueryParam("link.expired.suffix") String linkExpiredSuffix,  @ApiParam(value = "")  @QueryParam("link.invalid.prefix") String linkInvalidPrefix,  @ApiParam(value = "")  @QueryParam("link.invalid.remove") Boolean linkInvalidRemove,  @ApiParam(value = "")  @QueryParam("link.invalid.suffix") String linkInvalidSuffix,  @ApiParam(value = "")  @QueryParam("link.predated.prefix") String linkPredatedPrefix,  @ApiParam(value = "")  @QueryParam("link.predated.remove") Boolean linkPredatedRemove,  @ApiParam(value = "")  @QueryParam("link.predated.suffix") String linkPredatedSuffix,  @ApiParam(value = "")  @QueryParam("link.wcmmodes") List<String> linkWcmmodes) {
        return delegate.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post, apply, delete, action, $location, propertylist, linkExpiredPrefix, linkExpiredRemove, linkExpiredSuffix, linkInvalidPrefix, linkInvalidRemove, linkInvalidSuffix, linkPredatedPrefix, linkPredatedRemove, linkPredatedSuffix, linkWcmmodes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplPagePageInfoAggregatorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("page.info.provider.property.regex.default") String pageInfoProviderPropertyRegexDefault,  @ApiParam(value = "")  @QueryParam("page.info.provider.property.name") String pageInfoProviderPropertyName) {
        return delegate.comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post, apply, delete, action, $location, propertylist, pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplPagePageManagerFactoryImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("illegalCharMapping") String illegalCharMapping,  @ApiParam(value = "")  @QueryParam("pageSubTreeActivationCheck") Boolean pageSubTreeActivationCheck) {
        return delegate.comDayCqWcmCoreImplPagePageManagerFactoryImpl(post, apply, delete, action, $location, propertylist, illegalCharMapping, pageSubTreeActivationCheck, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplReferencesContentContentReferenceConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("contentReferenceConfig.resourceTypes") List<String> contentReferenceConfigResourceTypes) {
        return delegate.comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post, apply, delete, action, $location, propertylist, contentReferenceConfigResourceTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsContentfinderAssetViewHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("dam.showexpired") Boolean damShowexpired,  @ApiParam(value = "")  @QueryParam("dam.showhidden") Boolean damShowhidden,  @ApiParam(value = "")  @QueryParam("tagTitleSearch") Boolean tagTitleSearch,  @ApiParam(value = "")  @QueryParam("guessTotal") String guessTotal,  @ApiParam(value = "")  @QueryParam("dam.expiryProperty") String damExpiryProperty) {
        return delegate.comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post, apply, delete, action, $location, propertylist, damShowexpired, damShowhidden, tagTitleSearch, guessTotal, damExpiryProperty, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("item.resource.types") List<String> itemResourceTypes) {
        return delegate.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post, apply, delete, action, $location, propertylist, itemResourceTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsContentfinderPageViewHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("guessTotal") String guessTotal,  @ApiParam(value = "")  @QueryParam("tagTitleSearch") Boolean tagTitleSearch) {
        return delegate.comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post, apply, delete, action, $location, propertylist, guessTotal, tagTitleSearch, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsFindReplaceServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsFindReplaceServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsFindReplaceServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scope") List<String> scope) {
        return delegate.comDayCqWcmCoreImplServletsFindReplaceServlet(post, apply, delete, action, $location, propertylist, scope, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsReferenceSearchServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("referencesearchservlet.maxReferencesPerPage") Integer referencesearchservletMaxReferencesPerPage,  @ApiParam(value = "")  @QueryParam("referencesearchservlet.maxPages") Integer referencesearchservletMaxPages) {
        return delegate.comDayCqWcmCoreImplServletsReferenceSearchServlet(post, apply, delete, action, $location, propertylist, referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsThumbnailServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsThumbnailServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsThumbnailServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("workspace") String workspace,  @ApiParam(value = "")  @QueryParam("dimensions") List<String> dimensions) {
        return delegate.comDayCqWcmCoreImplServletsThumbnailServlet(post, apply, delete, action, $location, propertylist, workspace, dimensions, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplUtilsDefaultPageNameValidator( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("nonValidChars") String nonValidChars) {
        return delegate.comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post, apply, delete, action, $location, propertylist, nonValidChars, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplVariantsPageVariantsProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("default.externalizer.domain") String defaultExternalizerDomain) {
        return delegate.comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post, apply, delete, action, $location, propertylist, defaultExternalizerDomain, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplVersionManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplVersionManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplVersionManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("versionmanager.createVersionOnActivation") Boolean versionmanagerCreateVersionOnActivation,  @ApiParam(value = "")  @QueryParam("versionmanager.purgingEnabled") Boolean versionmanagerPurgingEnabled,  @ApiParam(value = "")  @QueryParam("versionmanager.purgePaths") List<String> versionmanagerPurgePaths,  @ApiParam(value = "")  @QueryParam("versionmanager.ivPaths") List<String> versionmanagerIvPaths,  @ApiParam(value = "")  @QueryParam("versionmanager.maxAgeDays") Integer versionmanagerMaxAgeDays,  @ApiParam(value = "")  @QueryParam("versionmanager.maxNumberVersions") Integer versionmanagerMaxNumberVersions,  @ApiParam(value = "")  @QueryParam("versionmanager.minNumberVersions") Integer versionmanagerMinNumberVersions) {
        return delegate.comDayCqWcmCoreImplVersionManagerImpl(post, apply, delete, action, $location, propertylist, versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled, versionmanagerPurgePaths, versionmanagerIvPaths, versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplVersionPurgeTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplVersionPurgeTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplVersionPurgeTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("versionpurge.paths") List<String> versionpurgePaths,  @ApiParam(value = "")  @QueryParam("versionpurge.recursive") Boolean versionpurgeRecursive,  @ApiParam(value = "")  @QueryParam("versionpurge.maxVersions") Integer versionpurgeMaxVersions,  @ApiParam(value = "")  @QueryParam("versionpurge.minVersions") Integer versionpurgeMinVersions,  @ApiParam(value = "")  @QueryParam("versionpurge.maxAgeDays") Integer versionpurgeMaxAgeDays) {
        return delegate.comDayCqWcmCoreImplVersionPurgeTask(post, apply, delete, action, $location, propertylist, versionpurgePaths, versionpurgeRecursive, versionpurgeMaxVersions, versionpurgeMinVersions, versionpurgeMaxAgeDays, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplWCMDebugFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplWCMDebugFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplWCMDebugFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("wcmdbgfilter.enabled") Boolean wcmdbgfilterEnabled,  @ApiParam(value = "")  @QueryParam("wcmdbgfilter.jspDebug") Boolean wcmdbgfilterJspDebug) {
        return delegate.comDayCqWcmCoreImplWCMDebugFilter(post, apply, delete, action, $location, propertylist, wcmdbgfilterEnabled, wcmdbgfilterJspDebug, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplWCMDeveloperModeFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("wcmdevmodefilter.enabled") Boolean wcmdevmodefilterEnabled) {
        return delegate.comDayCqWcmCoreImplWCMDeveloperModeFilter(post, apply, delete, action, $location, propertylist, wcmdevmodefilterEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplWarpTimeWarpFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("filter.order") String filterOrder,  @ApiParam(value = "")  @QueryParam("filter.scope") String filterScope) {
        return delegate.comDayCqWcmCoreImplWarpTimeWarpFilter(post, apply, delete, action, $location, propertylist, filterOrder, filterScope, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreMvtMVTStatisticsImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreMvtMVTStatisticsImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreMvtMVTStatisticsImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("mvtstatistics.trackingurl") String mvtstatisticsTrackingurl) {
        return delegate.comDayCqWcmCoreMvtMVTStatisticsImpl(post, apply, delete, action, $location, propertylist, mvtstatisticsTrackingurl, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreStatsPageViewStatisticsImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("pageviewstatistics.trackingurl") String pageviewstatisticsTrackingurl,  @ApiParam(value = "")  @QueryParam("pageviewstatistics.trackingscript.enabled") String pageviewstatisticsTrackingscriptEnabled) {
        return delegate.comDayCqWcmCoreStatsPageViewStatisticsImpl(post, apply, delete, action, $location, propertylist, pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreWCMRequestFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreWCMRequestFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreWCMRequestFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("wcmfilter.mode") String wcmfilterMode) {
        return delegate.comDayCqWcmCoreWCMRequestFilter(post, apply, delete, action, $location, propertylist, wcmfilterMode, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterDesignPackageImporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterDesignPackageImporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterDesignPackageImporter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("extract.filter") List<String> extractFilter) {
        return delegate.comDayCqWcmDesignimporterDesignPackageImporter(post, apply, delete, action, $location, propertylist, extractFilter, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterImplCanvasBuilderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("filepattern") String filepattern,  @ApiParam(value = "")  @QueryParam("build.page.nodes") Boolean buildPageNodes,  @ApiParam(value = "")  @QueryParam("build.client.libs") Boolean buildClientLibs,  @ApiParam(value = "")  @QueryParam("build.canvas.component") Boolean buildCanvasComponent) {
        return delegate.comDayCqWcmDesignimporterImplCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, buildPageNodes, buildClientLibs, buildCanvasComponent, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterImplCanvasPageDeleteHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("minThreadPoolSize") Integer minThreadPoolSize,  @ApiParam(value = "")  @QueryParam("maxThreadPoolSize") Integer maxThreadPoolSize) {
        return delegate.comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post, apply, delete, action, $location, propertylist, minThreadPoolSize, maxThreadPoolSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterImplEntryPreprocessorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("search.pattern") String searchPattern,  @ApiParam(value = "")  @QueryParam("replace.pattern") String replacePattern) {
        return delegate.comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post, apply, delete, action, $location, propertylist, searchPattern, replacePattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("filepattern") String filepattern,  @ApiParam(value = "")  @QueryParam("device.groups") List<String> deviceGroups,  @ApiParam(value = "")  @QueryParam("build.page.nodes") Boolean buildPageNodes,  @ApiParam(value = "")  @QueryParam("build.client.libs") Boolean buildClientLibs,  @ApiParam(value = "")  @QueryParam("build.canvas.component") Boolean buildCanvasComponent) {
        return delegate.comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, deviceGroups, buildPageNodes, buildClientLibs, buildCanvasComponent, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern,  @ApiParam(value = "")  @QueryParam("component.resourceType") String componentResourceType) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern,  @ApiParam(value = "")  @QueryParam("component.resourceType") String componentResourceType) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern,  @ApiParam(value = "")  @QueryParam("component.resourceType") String componentResourceType) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern,  @ApiParam(value = "")  @QueryParam("component.resourceType") String componentResourceType) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("tagpattern") String tagpattern) {
        return delegate.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationFormsImplFormChooserServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplFormChooserServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationFormsImplFormChooserServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.name") String serviceName,  @ApiParam(value = "")  @QueryParam("sling.servlet.resourceTypes") String slingServletResourceTypes,  @ApiParam(value = "")  @QueryParam("sling.servlet.selectors") String slingServletSelectors,  @ApiParam(value = "")  @QueryParam("sling.servlet.methods") List<String> slingServletMethods,  @ApiParam(value = "")  @QueryParam("forms.formchooserservlet.advansesearch.require") Boolean formsFormchooserservletAdvansesearchRequire) {
        return delegate.comDayCqWcmFoundationFormsImplFormChooserServlet(post, apply, delete, action, $location, propertylist, serviceName, slingServletResourceTypes, slingServletSelectors, slingServletMethods, formsFormchooserservletAdvansesearchRequire, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationFormsImplFormParagraphPostProcessor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("forms.formparagraphpostprocessor.enabled") Boolean formsFormparagraphpostprocessorEnabled,  @ApiParam(value = "")  @QueryParam("forms.formparagraphpostprocessor.formresourcetypes") List<String> formsFormparagraphpostprocessorFormresourcetypes) {
        return delegate.comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post, apply, delete, action, $location, propertylist, formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationFormsImplFormsHandlingServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name.whitelist") String nameWhitelist,  @ApiParam(value = "")  @QueryParam("allow.expressions") Boolean allowExpressions) {
        return delegate.comDayCqWcmFoundationFormsImplFormsHandlingServlet(post, apply, delete, action, $location, propertylist, nameWhitelist, allowExpressions, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationFormsImplMailServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplMailServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationFormsImplMailServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.resourceTypes") String slingServletResourceTypes,  @ApiParam(value = "")  @QueryParam("sling.servlet.selectors") String slingServletSelectors,  @ApiParam(value = "")  @QueryParam("resource.whitelist") List<String> resourceWhitelist,  @ApiParam(value = "")  @QueryParam("resource.blacklist") String resourceBlacklist) {
        return delegate.comDayCqWcmFoundationFormsImplMailServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletSelectors, resourceWhitelist, resourceBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationImplAdaptiveImageComponentServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("adapt.supported.widths") List<String> adaptSupportedWidths) {
        return delegate.comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post, apply, delete, action, $location, propertylist, adaptSupportedWidths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationImplHTTPAuthHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("auth.http.nologin") Boolean authHttpNologin,  @ApiParam(value = "")  @QueryParam("auth.http.realm") String authHttpRealm,  @ApiParam(value = "")  @QueryParam("auth.default.loginpage") String authDefaultLoginpage,  @ApiParam(value = "")  @QueryParam("auth.cred.form") List<String> authCredForm,  @ApiParam(value = "")  @QueryParam("auth.cred.utf8") List<String> authCredUtf8) {
        return delegate.comDayCqWcmFoundationImplHTTPAuthHandler(post, apply, delete, action, $location, propertylist, path, authHttpNologin, authHttpRealm, authDefaultLoginpage, authCredForm, authCredUtf8, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationImplPageImpressionsTracker( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.auth.requirements") String slingAuthRequirements) {
        return delegate.comDayCqWcmFoundationImplPageImpressionsTracker(post, apply, delete, action, $location, propertylist, slingAuthRequirements, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationImplPageRedirectServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplPageRedirectServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationImplPageRedirectServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("excluded.resource.types") List<String> excludedResourceTypes) {
        return delegate.comDayCqWcmFoundationImplPageRedirectServlet(post, apply, delete, action, $location, propertylist, excludedResourceTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("default.attachment.type.blacklist") List<String> defaultAttachmentTypeBlacklist,  @ApiParam(value = "")  @QueryParam("baseline.attachment.type.blacklist") List<String> baselineAttachmentTypeBlacklist) {
        return delegate.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("parameter.whitelist") List<String> parameterWhitelist,  @ApiParam(value = "")  @QueryParam("parameter.whitelist.prefixes") List<String> parameterWhitelistPrefixes,  @ApiParam(value = "")  @QueryParam("binary.parameter.whitelist") List<String> binaryParameterWhitelist,  @ApiParam(value = "")  @QueryParam("modifier.whitelist") List<String> modifierWhitelist,  @ApiParam(value = "")  @QueryParam("operation.whitelist") List<String> operationWhitelist,  @ApiParam(value = "")  @QueryParam("operation.whitelist.prefixes") List<String> operationWhitelistPrefixes,  @ApiParam(value = "")  @QueryParam("typehint.whitelist") List<String> typehintWhitelist,  @ApiParam(value = "")  @QueryParam("resourcetype.whitelist") List<String> resourcetypeWhitelist) {
        return delegate.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("device.info.transformer.enabled") Boolean deviceInfoTransformerEnabled,  @ApiParam(value = "")  @QueryParam("device.info.transformer.css.style") String deviceInfoTransformerCssStyle) {
        return delegate.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post, apply, delete, action, $location, propertylist, deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMobileCoreImplRedirectRedirectFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("redirect.enabled") Boolean redirectEnabled,  @ApiParam(value = "")  @QueryParam("redirect.stats.enabled") Boolean redirectStatsEnabled,  @ApiParam(value = "")  @QueryParam("redirect.extensions") List<String> redirectExtensions,  @ApiParam(value = "")  @QueryParam("redirect.paths") List<String> redirectPaths) {
        return delegate.comDayCqWcmMobileCoreImplRedirectRedirectFilter(post, apply, delete, action, $location, propertylist, redirectEnabled, redirectStatsEnabled, redirectExtensions, redirectPaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsContentCopyActionFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,  @ApiParam(value = "")  @QueryParam("contentcopyaction.order.style") String contentcopyactionOrderStyle) {
        return delegate.comDayCqWcmMsmImplActionsContentCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsContentDeleteActionFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops) {
        return delegate.comDayCqWcmMsmImplActionsContentDeleteActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsContentUpdateActionFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.ignoredMixin") List<String> cqWcmMsmActionIgnoredMixin) {
        return delegate.comDayCqWcmMsmImplActionsContentUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsOrderChildrenActionFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops) {
        return delegate.comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsPageMoveActionFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate") Boolean cqWcmMsmImplActionsPagemovePropReferenceUpdate) {
        return delegate.comDayCqWcmMsmImplActionsPageMoveActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsReferencesUpdateActionFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested") Boolean cqWcmMsmImplActionReferencesupdatePropUpdateNested) {
        return delegate.comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsVersionCopyActionFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @ApiParam(value = "")  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops) {
        return delegate.comDayCqWcmMsmImplActionsVersionCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplLiveRelationshipManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("liverelationshipmgr.relationsconfig.default") String liverelationshipmgrRelationsconfigDefault) {
        return delegate.comDayCqWcmMsmImplLiveRelationshipManagerImpl(post, apply, delete, action, $location, propertylist, liverelationshipmgrRelationsconfigDefault, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplRolloutManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplRolloutManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplRolloutManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter,  @ApiParam(value = "")  @QueryParam("rolloutmgr.excludedprops.default") List<String> rolloutmgrExcludedpropsDefault,  @ApiParam(value = "")  @QueryParam("rolloutmgr.excludedparagraphprops.default") List<String> rolloutmgrExcludedparagraphpropsDefault,  @ApiParam(value = "")  @QueryParam("rolloutmgr.excludednodetypes.default") List<String> rolloutmgrExcludednodetypesDefault,  @ApiParam(value = "")  @QueryParam("rolloutmgr.threadpool.maxsize") Integer rolloutmgrThreadpoolMaxsize,  @ApiParam(value = "")  @QueryParam("rolloutmgr.threadpool.maxshutdowntime") Integer rolloutmgrThreadpoolMaxshutdowntime,  @ApiParam(value = "")  @QueryParam("rolloutmgr.threadpool.priority") String rolloutmgrThreadpoolPriority,  @ApiParam(value = "")  @QueryParam("rolloutmgr.commit.size") Integer rolloutmgrCommitSize,  @ApiParam(value = "")  @QueryParam("rolloutmgr.conflicthandling.enabled") Boolean rolloutmgrConflicthandlingEnabled) {
        return delegate.comDayCqWcmMsmImplRolloutManagerImpl(post, apply, delete, action, $location, propertylist, eventFilter, rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority, rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplServletsAuditLogServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplServletsAuditLogServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplServletsAuditLogServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("auditlogservlet.default.events.count") Integer auditlogservletDefaultEventsCount,  @ApiParam(value = "")  @QueryParam("auditlogservlet.default.path") String auditlogservletDefaultPath) {
        return delegate.comDayCqWcmMsmImplServletsAuditLogServlet(post, apply, delete, action, $location, propertylist, auditlogservletDefaultEventsCount, auditlogservletDefaultPath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmNotificationEmailImplEmailChannelInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmNotificationEmailImplEmailChannelInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmNotificationEmailImplEmailChannel( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("email.from") String emailFrom) {
        return delegate.comDayCqWcmNotificationEmailImplEmailChannel(post, apply, delete, action, $location, propertylist, emailFrom, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmNotificationImplNotificationManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmNotificationImplNotificationManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmNotificationImplNotificationManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.topics") List<String> eventTopics) {
        return delegate.comDayCqWcmNotificationImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, eventTopics, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmScriptingImplBVPManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmScriptingImplBVPManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmScriptingImplBVPManager( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("com.day.cq.wcm.scripting.bvp.script.engines") List<String> comDayCqWcmScriptingBvpScriptEngines) {
        return delegate.comDayCqWcmScriptingImplBVPManager(post, apply, delete, action, $location, propertylist, comDayCqWcmScriptingBvpScriptEngines, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.undo.UndoConfig")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmUndoUndoConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmUndoUndoConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmUndoUndoConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cq.wcm.undo.enabled") Boolean cqWcmUndoEnabled,  @ApiParam(value = "")  @QueryParam("cq.wcm.undo.path") String cqWcmUndoPath,  @ApiParam(value = "")  @QueryParam("cq.wcm.undo.validity") Integer cqWcmUndoValidity,  @ApiParam(value = "")  @QueryParam("cq.wcm.undo.steps") Integer cqWcmUndoSteps,  @ApiParam(value = "")  @QueryParam("cq.wcm.undo.persistence") String cqWcmUndoPersistence,  @ApiParam(value = "")  @QueryParam("cq.wcm.undo.persistence.mode") Boolean cqWcmUndoPersistenceMode,  @ApiParam(value = "")  @QueryParam("cq.wcm.undo.markermode") String cqWcmUndoMarkermode,  @ApiParam(value = "")  @QueryParam("cq.wcm.undo.whitelist") List<String> cqWcmUndoWhitelist,  @ApiParam(value = "")  @QueryParam("cq.wcm.undo.blacklist") List<String> cqWcmUndoBlacklist) {
        return delegate.comDayCqWcmUndoUndoConfig(post, apply, delete, action, $location, propertylist, cqWcmUndoEnabled, cqWcmUndoPath, cqWcmUndoValidity, cqWcmUndoSteps, cqWcmUndoPersistence, cqWcmUndoPersistenceMode, cqWcmUndoMarkermode, cqWcmUndoWhitelist, cqWcmUndoBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmWebservicesupportImplReplicationEventListener( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("Flush agents") List<String> flushAgents) {
        return delegate.comDayCqWcmWebservicesupportImplReplicationEventListener(post, apply, delete, action, $location, propertylist, flushAgents, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmWorkflowImplWcmWorkflowServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("event.filter") String eventFilter,  @ApiParam(value = "")  @QueryParam("minThreadPoolSize") Integer minThreadPoolSize,  @ApiParam(value = "")  @QueryParam("maxThreadPoolSize") Integer maxThreadPoolSize,  @ApiParam(value = "")  @QueryParam("cq.wcm.workflow.terminate.on.activate") Boolean cqWcmWorkflowTerminateOnActivate,  @ApiParam(value = "")  @QueryParam("cq.wcm.worklfow.terminate.exclusion.list") List<String> cqWcmWorklfowTerminateExclusionList) {
        return delegate.comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, minThreadPoolSize, maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmWorkflowImplWorkflowPackageInfoProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("workflowpackageinfoprovider.filter") List<String> workflowpackageinfoproviderFilter,  @ApiParam(value = "")  @QueryParam("workflowpackageinfoprovider.filter.rootpath") String workflowpackageinfoproviderFilterRootpath) {
        return delegate.comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post, apply, delete, action, $location, propertylist, workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWidgetImplHtmlLibraryManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWidgetImplHtmlLibraryManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWidgetImplHtmlLibraryManagerImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("htmllibmanager.clientmanager") String htmllibmanagerClientmanager,  @ApiParam(value = "")  @QueryParam("htmllibmanager.debug") Boolean htmllibmanagerDebug,  @ApiParam(value = "")  @QueryParam("htmllibmanager.debug.console") Boolean htmllibmanagerDebugConsole,  @ApiParam(value = "")  @QueryParam("htmllibmanager.debug.init.js") String htmllibmanagerDebugInitJs,  @ApiParam(value = "")  @QueryParam("htmllibmanager.defaultthemename") String htmllibmanagerDefaultthemename,  @ApiParam(value = "")  @QueryParam("htmllibmanager.defaultuserthemename") String htmllibmanagerDefaultuserthemename,  @ApiParam(value = "")  @QueryParam("htmllibmanager.firebuglite.path") String htmllibmanagerFirebuglitePath,  @ApiParam(value = "")  @QueryParam("htmllibmanager.forceCQUrlInfo") Boolean htmllibmanagerForceCQUrlInfo,  @ApiParam(value = "")  @QueryParam("htmllibmanager.gzip") Boolean htmllibmanagerGzip,  @ApiParam(value = "")  @QueryParam("htmllibmanager.maxage") Integer htmllibmanagerMaxage,  @ApiParam(value = "")  @QueryParam("htmllibmanager.maxDataUriSize") Integer htmllibmanagerMaxDataUriSize,  @ApiParam(value = "")  @QueryParam("htmllibmanager.minify") Boolean htmllibmanagerMinify,  @ApiParam(value = "")  @QueryParam("htmllibmanager.path.list") List<String> htmllibmanagerPathList,  @ApiParam(value = "")  @QueryParam("htmllibmanager.timing") Boolean htmllibmanagerTiming) {
        return delegate.comDayCqWidgetImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerClientmanager, htmllibmanagerDebug, htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip, htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize, htmllibmanagerMinify, htmllibmanagerPathList, htmllibmanagerTiming, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWidgetImplWidgetExtensionProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWidgetImplWidgetExtensionProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWidgetImplWidgetExtensionProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("extendable.widgets") List<String> extendableWidgets,  @ApiParam(value = "")  @QueryParam("widgetextensionprovider.debug") Boolean widgetextensionproviderDebug) {
        return delegate.comDayCqWidgetImplWidgetExtensionProviderImpl(post, apply, delete, action, $location, propertylist, extendableWidgets, widgetextensionproviderDebug, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWorkflowImplEmailEMailNotificationService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("from.address") String fromAddress,  @ApiParam(value = "")  @QueryParam("host.prefix") String hostPrefix,  @ApiParam(value = "")  @QueryParam("notify.onabort") Boolean notifyOnabort,  @ApiParam(value = "")  @QueryParam("notify.oncomplete") Boolean notifyOncomplete,  @ApiParam(value = "")  @QueryParam("notify.oncontainercomplete") Boolean notifyOncontainercomplete,  @ApiParam(value = "")  @QueryParam("notify.useronly") Boolean notifyUseronly) {
        return delegate.comDayCqWorkflowImplEmailEMailNotificationService(post, apply, delete, action, $location, propertylist, fromAddress, hostPrefix, notifyOnabort, notifyOncomplete, notifyOncontainercomplete, notifyUseronly, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWorkflowImplEmailTaskEMailNotificationService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("notify.onupdate") Boolean notifyOnupdate,  @ApiParam(value = "")  @QueryParam("notify.oncomplete") Boolean notifyOncomplete) {
        return delegate.comDayCqWorkflowImplEmailTaskEMailNotificationService(post, apply, delete, action, $location, propertylist, notifyOnupdate, notifyOncomplete, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCrxSecurityTokenImplImplTokenAuthenticationHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("token.required.attr") String tokenRequiredAttr,  @ApiParam(value = "")  @QueryParam("token.alternate.url") String tokenAlternateUrl,  @ApiParam(value = "")  @QueryParam("token.encapsulated") Boolean tokenEncapsulated,  @ApiParam(value = "")  @QueryParam("skip.token.refresh") List<String> skipTokenRefresh) {
        return delegate.comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, tokenRequiredAttr, tokenAlternateUrl, tokenEncapsulated, skipTokenRefresh, securityContext);
    }

    @POST
    @Path("/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCrxSecurityTokenImplTokenCleanupTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enable.token.cleanup.task") Boolean enableTokenCleanupTask,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression,  @ApiParam(value = "")  @QueryParam("batch.size") Integer batchSize) {
        return delegate.comDayCrxSecurityTokenImplTokenCleanupTask(post, apply, delete, action, $location, propertylist, enableTokenCleanupTask, schedulerExpression, batchSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/Guide Localization Service")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = GuideLocalizationServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = GuideLocalizationServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response guideLocalizationService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("supportedLocales") List<String> supportedLocales,  @ApiParam(value = "")  @QueryParam("Localizable Properties") List<String> localizableProperties) {
        return delegate.guideLocalizationService(post, apply, delete, action, $location, propertylist, supportedLocales, localizableProperties, securityContext);
    }

    @POST
    @Path("/console/configMgr/MessagingUserComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = MessagingUserComponentFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = MessagingUserComponentFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response messagingUserComponentFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("priority") Integer priority) {
        return delegate.messagingUserComponentFactory(post, apply, delete, action, $location, propertylist, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.aries.jmx.framework.StateConfig")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheAriesJmxFrameworkStateConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheAriesJmxFrameworkStateConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheAriesJmxFrameworkStateConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("attributeChangeNotificationEnabled") Boolean attributeChangeNotificationEnabled) {
        return delegate.orgApacheAriesJmxFrameworkStateConfig(post, apply, delete, action, $location, propertylist, attributeChangeNotificationEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixEventadminImplEventAdminInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixEventadminImplEventAdminInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixEventadminImplEventAdmin( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.felix.eventadmin.ThreadPoolSize") Integer orgApacheFelixEventadminThreadPoolSize,  @ApiParam(value = "")  @QueryParam("org.apache.felix.eventadmin.AsyncToSyncThreadRatio") BigDecimal orgApacheFelixEventadminAsyncToSyncThreadRatio,  @ApiParam(value = "")  @QueryParam("org.apache.felix.eventadmin.Timeout") Integer orgApacheFelixEventadminTimeout,  @ApiParam(value = "")  @QueryParam("org.apache.felix.eventadmin.RequireTopic") Boolean orgApacheFelixEventadminRequireTopic,  @ApiParam(value = "")  @QueryParam("org.apache.felix.eventadmin.IgnoreTimeout") List<String> orgApacheFelixEventadminIgnoreTimeout,  @ApiParam(value = "")  @QueryParam("org.apache.felix.eventadmin.IgnoreTopic") List<String> orgApacheFelixEventadminIgnoreTopic) {
        return delegate.orgApacheFelixEventadminImplEventAdmin(post, apply, delete, action, $location, propertylist, orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.http")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixHttpInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixHttpInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixHttp( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.host") String orgApacheFelixHttpHost,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.enable") Boolean orgApacheFelixHttpEnable,  @ApiParam(value = "")  @QueryParam("org.osgi.service.http.port") Integer orgOsgiServiceHttpPort,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.timeout") Integer orgApacheFelixHttpTimeout,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.enable") Boolean orgApacheFelixHttpsEnable,  @ApiParam(value = "")  @QueryParam("org.osgi.service.http.port.secure") Integer orgOsgiServiceHttpPortSecure,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.keystore") String orgApacheFelixHttpsKeystore,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.keystore.password") String orgApacheFelixHttpsKeystorePassword,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.keystore.key.password") String orgApacheFelixHttpsKeystoreKeyPassword,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.truststore") String orgApacheFelixHttpsTruststore,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.truststore.password") String orgApacheFelixHttpsTruststorePassword,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.clientcertificate") String orgApacheFelixHttpsClientcertificate,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.context_path") String orgApacheFelixHttpContextPath,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.mbeans") Boolean orgApacheFelixHttpMbeans,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.session.timeout") Integer orgApacheFelixHttpSessionTimeout,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.jetty.threadpool.max") Integer orgApacheFelixHttpJettyThreadpoolMax,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.jetty.acceptors") Integer orgApacheFelixHttpJettyAcceptors,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.jetty.selectors") Integer orgApacheFelixHttpJettySelectors,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.jetty.headerBufferSize") Integer orgApacheFelixHttpJettyHeaderBufferSize,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.jetty.requestBufferSize") Integer orgApacheFelixHttpJettyRequestBufferSize,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.jetty.responseBufferSize") Integer orgApacheFelixHttpJettyResponseBufferSize,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.jetty.maxFormSize") Integer orgApacheFelixHttpJettyMaxFormSize,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.path_exclusions") List<String> orgApacheFelixHttpPathExclusions,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.jetty.ciphersuites.excluded") List<String> orgApacheFelixHttpsJettyCiphersuitesExcluded,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.jetty.ciphersuites.included") List<String> orgApacheFelixHttpsJettyCiphersuitesIncluded,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.jetty.sendServerHeader") Boolean orgApacheFelixHttpJettySendServerHeader,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.jetty.protocols.included") List<String> orgApacheFelixHttpsJettyProtocolsIncluded,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.jetty.protocols.excluded") List<String> orgApacheFelixHttpsJettyProtocolsExcluded,  @ApiParam(value = "")  @QueryParam("org.apache.felix.proxy.load.balancer.connection.enable") Boolean orgApacheFelixProxyLoadBalancerConnectionEnable,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.jetty.renegotiateAllowed") Boolean orgApacheFelixHttpsJettyRenegotiateAllowed,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.jetty.session.cookie.httpOnly") Boolean orgApacheFelixHttpsJettySessionCookieHttpOnly,  @ApiParam(value = "")  @QueryParam("org.apache.felix.https.jetty.session.cookie.secure") Boolean orgApacheFelixHttpsJettySessionCookieSecure,  @ApiParam(value = "")  @QueryParam("org.eclipse.jetty.servlet.SessionIdPathParameterName") String orgEclipseJettyServletSessionIdPathParameterName,  @ApiParam(value = "")  @QueryParam("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding") Boolean orgEclipseJettyServletCheckingRemoteSessionIdEncoding,  @ApiParam(value = "")  @QueryParam("org.eclipse.jetty.servlet.SessionCookie") String orgEclipseJettyServletSessionCookie,  @ApiParam(value = "")  @QueryParam("org.eclipse.jetty.servlet.SessionDomain") String orgEclipseJettyServletSessionDomain,  @ApiParam(value = "")  @QueryParam("org.eclipse.jetty.servlet.SessionPath") String orgEclipseJettyServletSessionPath,  @ApiParam(value = "")  @QueryParam("org.eclipse.jetty.servlet.MaxAge") Integer orgEclipseJettyServletMaxAge,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.name") String orgApacheFelixHttpName,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gziphandler.enable") Boolean orgApacheFelixJettyGziphandlerEnable,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.minGzipSize") Integer orgApacheFelixJettyGzipMinGzipSize,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.compressionLevel") Integer orgApacheFelixJettyGzipCompressionLevel,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.inflateBufferSize") Integer orgApacheFelixJettyGzipInflateBufferSize,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.syncFlush") Boolean orgApacheFelixJettyGzipSyncFlush,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.excludedUserAgents") List<String> orgApacheFelixJettyGzipExcludedUserAgents,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.includedMethods") List<String> orgApacheFelixJettyGzipIncludedMethods,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.excludedMethods") List<String> orgApacheFelixJettyGzipExcludedMethods,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.includedPaths") List<String> orgApacheFelixJettyGzipIncludedPaths,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.excludedPaths") List<String> orgApacheFelixJettyGzipExcludedPaths,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.includedMimeTypes") List<String> orgApacheFelixJettyGzipIncludedMimeTypes,  @ApiParam(value = "")  @QueryParam("org.apache.felix.jetty.gzip.excludedMimeTypes") List<String> orgApacheFelixJettyGzipExcludedMimeTypes,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.session.invalidate") Boolean orgApacheFelixHttpSessionInvalidate,  @ApiParam(value = "")  @QueryParam("org.apache.felix.http.session.uniqueid") Boolean orgApacheFelixHttpSessionUniqueid) {
        return delegate.orgApacheFelixHttp(post, apply, delete, action, $location, propertylist, orgApacheFelixHttpHost, orgApacheFelixHttpEnable, orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge, orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.http.sslfilter.SslFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixHttpSslfilterSslFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixHttpSslfilterSslFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixHttpSslfilterSslFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("ssl-forward.header") String sslForwardHeader,  @ApiParam(value = "")  @QueryParam("ssl-forward.value") String sslForwardValue,  @ApiParam(value = "")  @QueryParam("ssl-forward-cert.header") String sslForwardCertHeader,  @ApiParam(value = "")  @QueryParam("rewrite.absolute.urls") Boolean rewriteAbsoluteUrls) {
        return delegate.orgApacheFelixHttpSslfilterSslFilter(post, apply, delete, action, $location, propertylist, sslForwardHeader, sslForwardValue, sslForwardCertHeader, rewriteAbsoluteUrls, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.jaas.Configuration.factory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixJaasConfigurationFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixJaasConfigurationFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixJaasConfigurationFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("jaas.controlFlag") String jaasControlFlag,  @ApiParam(value = "")  @QueryParam("jaas.ranking") Integer jaasRanking,  @ApiParam(value = "")  @QueryParam("jaas.realmName") String jaasRealmName,  @ApiParam(value = "")  @QueryParam("jaas.classname") String jaasClassname,  @ApiParam(value = "")  @QueryParam("jaas.options") List<String> jaasOptions) {
        return delegate.orgApacheFelixJaasConfigurationFactory(post, apply, delete, action, $location, propertylist, jaasControlFlag, jaasRanking, jaasRealmName, jaasClassname, jaasOptions, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.jaas.ConfigurationSpi")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixJaasConfigurationSpiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixJaasConfigurationSpiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixJaasConfigurationSpi( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("jaas.defaultRealmName") String jaasDefaultRealmName,  @ApiParam(value = "")  @QueryParam("jaas.configProviderName") String jaasConfigProviderName,  @ApiParam(value = "")  @QueryParam("jaas.globalConfigPolicy") String jaasGlobalConfigPolicy) {
        return delegate.orgApacheFelixJaasConfigurationSpi(post, apply, delete, action, $location, propertylist, jaasDefaultRealmName, jaasConfigProviderName, jaasGlobalConfigPolicy, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.scr.ScrService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixScrScrServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixScrScrServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixScrScrService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("ds.loglevel") Integer dsLoglevel,  @ApiParam(value = "")  @QueryParam("ds.factory.enabled") Boolean dsFactoryEnabled,  @ApiParam(value = "")  @QueryParam("ds.delayed.keepInstances") Boolean dsDelayedKeepInstances,  @ApiParam(value = "")  @QueryParam("ds.lock.timeout.milliseconds") Integer dsLockTimeoutMilliseconds,  @ApiParam(value = "")  @QueryParam("ds.stop.timeout.milliseconds") Integer dsStopTimeoutMilliseconds,  @ApiParam(value = "")  @QueryParam("ds.global.extender") Boolean dsGlobalExtender) {
        return delegate.orgApacheFelixScrScrService(post, apply, delete, action, $location, propertylist, dsLoglevel, dsFactoryEnabled, dsDelayedKeepInstances, dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds, dsGlobalExtender, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadyImplComponentsCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplComponentsCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadyImplComponentsCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("components.list") List<String> componentsList,  @ApiParam(value = "")  @QueryParam("type") String type) {
        return delegate.orgApacheFelixSystemreadyImplComponentsCheck(post, apply, delete, action, $location, propertylist, componentsList, type, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadyImplFrameworkStartCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("timeout") Integer timeout,  @ApiParam(value = "")  @QueryParam("target.start.level") Integer targetStartLevel,  @ApiParam(value = "")  @QueryParam("target.start.level.prop.name") String targetStartLevelPropName,  @ApiParam(value = "")  @QueryParam("type") String type) {
        return delegate.orgApacheFelixSystemreadyImplFrameworkStartCheck(post, apply, delete, action, $location, propertylist, timeout, targetStartLevel, targetStartLevelPropName, type, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadyImplServicesCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplServicesCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadyImplServicesCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("services.list") List<String> servicesList,  @ApiParam(value = "")  @QueryParam("type") String type) {
        return delegate.orgApacheFelixSystemreadyImplServicesCheck(post, apply, delete, action, $location, propertylist, servicesList, type, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadyImplServletSystemAliveServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("osgi.http.whiteboard.servlet.pattern") String osgiHttpWhiteboardServletPattern,  @ApiParam(value = "")  @QueryParam("osgi.http.whiteboard.context.select") String osgiHttpWhiteboardContextSelect) {
        return delegate.orgApacheFelixSystemreadyImplServletSystemAliveServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadyImplServletSystemReadyServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("osgi.http.whiteboard.servlet.pattern") String osgiHttpWhiteboardServletPattern,  @ApiParam(value = "")  @QueryParam("osgi.http.whiteboard.context.select") String osgiHttpWhiteboardContextSelect) {
        return delegate.orgApacheFelixSystemreadyImplServletSystemReadyServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadySystemReadyMonitorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadySystemReadyMonitorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadySystemReadyMonitor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("poll.interval") Integer pollInterval) {
        return delegate.orgApacheFelixSystemreadySystemReadyMonitor(post, apply, delete, action, $location, propertylist, pollInterval, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixWebconsoleInternalServletOsgiManager( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("manager.root") String managerRoot,  @ApiParam(value = "")  @QueryParam("http.service.filter") String httpServiceFilter,  @ApiParam(value = "")  @QueryParam("default.render") String defaultRender,  @ApiParam(value = "")  @QueryParam("realm") String realm,  @ApiParam(value = "")  @QueryParam("username") String username,  @ApiParam(value = "")  @QueryParam("password") String password,  @ApiParam(value = "")  @QueryParam("category") String category,  @ApiParam(value = "")  @QueryParam("locale") String locale,  @ApiParam(value = "")  @QueryParam("loglevel") Integer loglevel,  @ApiParam(value = "")  @QueryParam("plugins") String plugins) {
        return delegate.orgApacheFelixWebconsoleInternalServletOsgiManager(post, apply, delete, action, $location, propertylist, managerRoot, httpServiceFilter, defaultRender, realm, username, password, category, locale, loglevel, plugins, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixWebconsolePluginsEventInternalPluginServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("max.size") Integer maxSize) {
        return delegate.orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post, apply, delete, action, $location, propertylist, maxSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("felix.memoryusage.dump.threshold") Integer felixMemoryusageDumpThreshold,  @ApiParam(value = "")  @QueryParam("felix.memoryusage.dump.interval") Integer felixMemoryusageDumpInterval,  @ApiParam(value = "")  @QueryParam("felix.memoryusage.dump.location") String felixMemoryusageDumpLocation) {
        return delegate.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post, apply, delete, action, $location, propertylist, felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval, felixMemoryusageDumpLocation, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.http.proxyconfigurator")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheHttpProxyconfiguratorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheHttpProxyconfiguratorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheHttpProxyconfigurator( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("proxy.enabled") Boolean proxyEnabled,  @ApiParam(value = "")  @QueryParam("proxy.host") String proxyHost,  @ApiParam(value = "")  @QueryParam("proxy.port") Integer proxyPort,  @ApiParam(value = "")  @QueryParam("proxy.user") String proxyUser,  @ApiParam(value = "")  @QueryParam("proxy.password") String proxyPassword,  @ApiParam(value = "")  @QueryParam("proxy.exceptions") List<String> proxyExceptions) {
        return delegate.orgApacheHttpProxyconfigurator(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyPort, proxyUser, proxyPassword, proxyExceptions, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("dir") String dir) {
        return delegate.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post, apply, delete, action, $location, propertylist, dir, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") String path) {
        return delegate.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post, apply, delete, action, $location, propertylist, path, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("mongouri") String mongouri,  @ApiParam(value = "")  @QueryParam("db") String db,  @ApiParam(value = "")  @QueryParam("socketKeepAlive") Boolean socketKeepAlive,  @ApiParam(value = "")  @QueryParam("cache") Integer cache,  @ApiParam(value = "")  @QueryParam("nodeCachePercentage") Integer nodeCachePercentage,  @ApiParam(value = "")  @QueryParam("prevDocCachePercentage") Integer prevDocCachePercentage,  @ApiParam(value = "")  @QueryParam("childrenCachePercentage") Integer childrenCachePercentage,  @ApiParam(value = "")  @QueryParam("diffCachePercentage") Integer diffCachePercentage,  @ApiParam(value = "")  @QueryParam("cacheSegmentCount") Integer cacheSegmentCount,  @ApiParam(value = "")  @QueryParam("cacheStackMoveDistance") Integer cacheStackMoveDistance,  @ApiParam(value = "")  @QueryParam("blobCacheSize") Integer blobCacheSize,  @ApiParam(value = "")  @QueryParam("persistentCache") String persistentCache,  @ApiParam(value = "")  @QueryParam("journalCache") String journalCache,  @ApiParam(value = "")  @QueryParam("customBlobStore") Boolean customBlobStore,  @ApiParam(value = "")  @QueryParam("journalGCInterval") Integer journalGCInterval,  @ApiParam(value = "")  @QueryParam("journalGCMaxAge") Integer journalGCMaxAge,  @ApiParam(value = "")  @QueryParam("prefetchExternalChanges") Boolean prefetchExternalChanges,  @ApiParam(value = "")  @QueryParam("role") String role,  @ApiParam(value = "")  @QueryParam("versionGcMaxAgeInSecs") Integer versionGcMaxAgeInSecs,  @ApiParam(value = "")  @QueryParam("versionGCExpression") String versionGCExpression,  @ApiParam(value = "")  @QueryParam("versionGCTimeLimitInSecs") Integer versionGCTimeLimitInSecs,  @ApiParam(value = "")  @QueryParam("blobGcMaxAgeInSecs") Integer blobGcMaxAgeInSecs,  @ApiParam(value = "")  @QueryParam("blobTrackSnapshotIntervalInSecs") Integer blobTrackSnapshotIntervalInSecs,  @ApiParam(value = "")  @QueryParam("repository.home") String repositoryHome,  @ApiParam(value = "")  @QueryParam("maxReplicationLagInSecs") Integer maxReplicationLagInSecs,  @ApiParam(value = "")  @QueryParam("documentStoreType") String documentStoreType,  @ApiParam(value = "")  @QueryParam("bundlingDisabled") Boolean bundlingDisabled,  @ApiParam(value = "")  @QueryParam("updateLimit") Integer updateLimit,  @ApiParam(value = "")  @QueryParam("persistentCacheIncludes") List<String> persistentCacheIncludes,  @ApiParam(value = "")  @QueryParam("leaseCheckMode") String leaseCheckMode) {
        return delegate.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post, apply, delete, action, $location, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryHome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("persistentCacheIncludes") List<String> persistentCacheIncludes) {
        return delegate.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post, apply, delete, action, $location, propertylist, persistentCacheIncludes, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("includedPaths") List<String> includedPaths,  @ApiParam(value = "")  @QueryParam("enableAsyncObserver") Boolean enableAsyncObserver,  @ApiParam(value = "")  @QueryParam("observerQueueSize") Integer observerQueueSize) {
        return delegate.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post, apply, delete, action, $location, propertylist, includedPaths, enableAsyncObserver, observerQueueSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexAsyncIndexerService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("asyncConfigs") List<String> asyncConfigs,  @ApiParam(value = "")  @QueryParam("leaseTimeOutMinutes") Integer leaseTimeOutMinutes,  @ApiParam(value = "")  @QueryParam("failingIndexTimeoutSeconds") Integer failingIndexTimeoutSeconds,  @ApiParam(value = "")  @QueryParam("errorWarnIntervalSeconds") Integer errorWarnIntervalSeconds) {
        return delegate.orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post, apply, delete, action, $location, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("disabled") Boolean disabled,  @ApiParam(value = "")  @QueryParam("debug") Boolean debug,  @ApiParam(value = "")  @QueryParam("localIndexDir") String localIndexDir,  @ApiParam(value = "")  @QueryParam("enableOpenIndexAsync") Boolean enableOpenIndexAsync,  @ApiParam(value = "")  @QueryParam("threadPoolSize") Integer threadPoolSize,  @ApiParam(value = "")  @QueryParam("prefetchIndexFiles") Boolean prefetchIndexFiles,  @ApiParam(value = "")  @QueryParam("extractedTextCacheSizeInMB") Integer extractedTextCacheSizeInMB,  @ApiParam(value = "")  @QueryParam("extractedTextCacheExpiryInSecs") Integer extractedTextCacheExpiryInSecs,  @ApiParam(value = "")  @QueryParam("alwaysUsePreExtractedCache") Boolean alwaysUsePreExtractedCache,  @ApiParam(value = "")  @QueryParam("booleanClauseLimit") Integer booleanClauseLimit,  @ApiParam(value = "")  @QueryParam("enableHybridIndexing") Boolean enableHybridIndexing,  @ApiParam(value = "")  @QueryParam("hybridQueueSize") Integer hybridQueueSize,  @ApiParam(value = "")  @QueryParam("disableStoredIndexDefinition") Boolean disableStoredIndexDefinition,  @ApiParam(value = "")  @QueryParam("deletedBlobsCollectionEnabled") Boolean deletedBlobsCollectionEnabled,  @ApiParam(value = "")  @QueryParam("propIndexCleanerIntervalInSecs") Integer propIndexCleanerIntervalInSecs,  @ApiParam(value = "")  @QueryParam("enableSingleBlobIndexFiles") Boolean enableSingleBlobIndexFiles) {
        return delegate.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post, apply, delete, action, $location, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("solr.home.path") String solrHomePath,  @ApiParam(value = "")  @QueryParam("solr.core.name") String solrCoreName) {
        return delegate.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post, apply, delete, action, $location, propertylist, solrHomePath, solrCoreName, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post, apply, delete, action, $location, propertylist, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path.desc.field") String pathDescField,  @ApiParam(value = "")  @QueryParam("path.child.field") String pathChildField,  @ApiParam(value = "")  @QueryParam("path.parent.field") String pathParentField,  @ApiParam(value = "")  @QueryParam("path.exact.field") String pathExactField,  @ApiParam(value = "")  @QueryParam("catch.all.field") String catchAllField,  @ApiParam(value = "")  @QueryParam("collapsed.path.field") String collapsedPathField,  @ApiParam(value = "")  @QueryParam("path.depth.field") String pathDepthField,  @ApiParam(value = "")  @QueryParam("commit.policy") String commitPolicy,  @ApiParam(value = "")  @QueryParam("rows") Integer rows,  @ApiParam(value = "")  @QueryParam("path.restrictions") Boolean pathRestrictions,  @ApiParam(value = "")  @QueryParam("property.restrictions") Boolean propertyRestrictions,  @ApiParam(value = "")  @QueryParam("primarytypes.restrictions") Boolean primarytypesRestrictions,  @ApiParam(value = "")  @QueryParam("ignored.properties") List<String> ignoredProperties,  @ApiParam(value = "")  @QueryParam("used.properties") List<String> usedProperties,  @ApiParam(value = "")  @QueryParam("type.mappings") List<String> typeMappings,  @ApiParam(value = "")  @QueryParam("property.mappings") List<String> propertyMappings,  @ApiParam(value = "")  @QueryParam("collapse.jcrcontent.nodes") Boolean collapseJcrcontentNodes) {
        return delegate.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post, apply, delete, action, $location, propertylist, pathDescField, pathChildField, pathParentField, pathExactField, catchAllField, collapsedPathField, pathDepthField, commitPolicy, rows, pathRestrictions, propertyRestrictions, primarytypesRestrictions, ignoredProperties, usedProperties, typeMappings, propertyMappings, collapseJcrcontentNodes, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("solr.http.url") String solrHttpUrl,  @ApiParam(value = "")  @QueryParam("solr.zk.host") String solrZkHost,  @ApiParam(value = "")  @QueryParam("solr.collection") String solrCollection,  @ApiParam(value = "")  @QueryParam("solr.socket.timeout") Integer solrSocketTimeout,  @ApiParam(value = "")  @QueryParam("solr.connection.timeout") Integer solrConnectionTimeout,  @ApiParam(value = "")  @QueryParam("solr.shards.no") Integer solrShardsNo,  @ApiParam(value = "")  @QueryParam("solr.replication.factor") Integer solrReplicationFactor,  @ApiParam(value = "")  @QueryParam("solr.conf.dir") String solrConfDir) {
        return delegate.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post, apply, delete, action, $location, propertylist, solrHttpUrl, solrZkHost, solrCollection, solrSocketTimeout, solrConnectionTimeout, solrShardsNo, solrReplicationFactor, solrConfDir, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("query.aggregation") Boolean queryAggregation) {
        return delegate.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post, apply, delete, action, $location, propertylist, queryAggregation, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("server.type") String serverType) {
        return delegate.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post, apply, delete, action, $location, propertylist, serverType, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("providerType") String providerType) {
        return delegate.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post, apply, delete, action, $location, propertylist, providerType, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("maxItems") Integer maxItems,  @ApiParam(value = "")  @QueryParam("maxPathDepth") Integer maxPathDepth,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post, apply, delete, action, $location, propertylist, maxItems, maxPathDepth, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakQueryQueryEngineSettingsService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("queryLimitInMemory") Integer queryLimitInMemory,  @ApiParam(value = "")  @QueryParam("queryLimitReads") Integer queryLimitReads,  @ApiParam(value = "")  @QueryParam("queryFailTraversal") Boolean queryFailTraversal,  @ApiParam(value = "")  @QueryParam("fastQuerySize") Boolean fastQuerySize) {
        return delegate.orgApacheJackrabbitOakQueryQueryEngineSettingsService(post, apply, delete, action, $location, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.jackrabbit.oak.authentication.appName") String orgApacheJackrabbitOakAuthenticationAppName,  @ApiParam(value = "")  @QueryParam("org.apache.jackrabbit.oak.authentication.configSpiName") String orgApacheJackrabbitOakAuthenticationConfigSpiName) {
        return delegate.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post, apply, delete, action, $location, propertylist, orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("provider.name") String providerName,  @ApiParam(value = "")  @QueryParam("host.name") String hostName,  @ApiParam(value = "")  @QueryParam("host.port") Integer hostPort,  @ApiParam(value = "")  @QueryParam("host.ssl") Boolean hostSsl,  @ApiParam(value = "")  @QueryParam("host.tls") Boolean hostTls,  @ApiParam(value = "")  @QueryParam("host.noCertCheck") Boolean hostNoCertCheck,  @ApiParam(value = "")  @QueryParam("bind.dn") String bindDn,  @ApiParam(value = "")  @QueryParam("bind.password") String bindPassword,  @ApiParam(value = "")  @QueryParam("searchTimeout") String searchTimeout,  @ApiParam(value = "")  @QueryParam("adminPool.maxActive") Integer adminPoolMaxActive,  @ApiParam(value = "")  @QueryParam("adminPool.lookupOnValidate") Boolean adminPoolLookupOnValidate,  @ApiParam(value = "")  @QueryParam("userPool.maxActive") Integer userPoolMaxActive,  @ApiParam(value = "")  @QueryParam("userPool.lookupOnValidate") Boolean userPoolLookupOnValidate,  @ApiParam(value = "")  @QueryParam("user.baseDN") String userBaseDN,  @ApiParam(value = "")  @QueryParam("user.objectclass") List<String> userObjectclass,  @ApiParam(value = "")  @QueryParam("user.idAttribute") String userIdAttribute,  @ApiParam(value = "")  @QueryParam("user.extraFilter") String userExtraFilter,  @ApiParam(value = "")  @QueryParam("user.makeDnPath") Boolean userMakeDnPath,  @ApiParam(value = "")  @QueryParam("group.baseDN") String groupBaseDN,  @ApiParam(value = "")  @QueryParam("group.objectclass") List<String> groupObjectclass,  @ApiParam(value = "")  @QueryParam("group.nameAttribute") String groupNameAttribute,  @ApiParam(value = "")  @QueryParam("group.extraFilter") String groupExtraFilter,  @ApiParam(value = "")  @QueryParam("group.makeDnPath") Boolean groupMakeDnPath,  @ApiParam(value = "")  @QueryParam("group.memberAttribute") String groupMemberAttribute,  @ApiParam(value = "")  @QueryParam("useUidForExtId") Boolean useUidForExtId,  @ApiParam(value = "")  @QueryParam("customattributes") List<String> customattributes) {
        return delegate.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post, apply, delete, action, $location, propertylist, providerName, hostName, hostPort, hostSsl, hostTls, hostNoCertCheck, bindDn, bindPassword, searchTimeout, adminPoolMaxActive, adminPoolLookupOnValidate, userPoolMaxActive, userPoolLookupOnValidate, userBaseDN, userObjectclass, userIdAttribute, userExtraFilter, userMakeDnPath, groupBaseDN, groupObjectclass, groupNameAttribute, groupExtraFilter, groupMakeDnPath, groupMemberAttribute, useUidForExtId, customattributes, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("tokenExpiration") String tokenExpiration,  @ApiParam(value = "")  @QueryParam("tokenLength") String tokenLength,  @ApiParam(value = "")  @QueryParam("tokenRefresh") Boolean tokenRefresh,  @ApiParam(value = "")  @QueryParam("tokenCleanupThreshold") Integer tokenCleanupThreshold,  @ApiParam(value = "")  @QueryParam("passwordHashAlgorithm") String passwordHashAlgorithm,  @ApiParam(value = "")  @QueryParam("passwordHashIterations") Integer passwordHashIterations,  @ApiParam(value = "")  @QueryParam("passwordSaltSize") Integer passwordSaltSize) {
        return delegate.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post, apply, delete, action, $location, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("permissionsJr2") String permissionsJr2,  @ApiParam(value = "")  @QueryParam("importBehavior") String importBehavior,  @ApiParam(value = "")  @QueryParam("readPaths") List<String> readPaths,  @ApiParam(value = "")  @QueryParam("administrativePrincipals") List<String> administrativePrincipals,  @ApiParam(value = "")  @QueryParam("configurationRanking") Integer configurationRanking) {
        return delegate.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post, apply, delete, action, $location, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("requiredServicePids") List<String> requiredServicePids,  @ApiParam(value = "")  @QueryParam("authorizationCompositionType") String authorizationCompositionType) {
        return delegate.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post, apply, delete, action, $location, propertylist, requiredServicePids, authorizationCompositionType, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("length") Integer length) {
        return delegate.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post, apply, delete, action, $location, propertylist, length, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityUserUserConfigurationImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("usersPath") String usersPath,  @ApiParam(value = "")  @QueryParam("groupsPath") String groupsPath,  @ApiParam(value = "")  @QueryParam("systemRelativePath") String systemRelativePath,  @ApiParam(value = "")  @QueryParam("defaultDepth") Integer defaultDepth,  @ApiParam(value = "")  @QueryParam("importBehavior") String importBehavior,  @ApiParam(value = "")  @QueryParam("passwordHashAlgorithm") String passwordHashAlgorithm,  @ApiParam(value = "")  @QueryParam("passwordHashIterations") Integer passwordHashIterations,  @ApiParam(value = "")  @QueryParam("passwordSaltSize") Integer passwordSaltSize,  @ApiParam(value = "")  @QueryParam("omitAdminPw") Boolean omitAdminPw,  @ApiParam(value = "")  @QueryParam("supportAutoSave") Boolean supportAutoSave,  @ApiParam(value = "")  @QueryParam("passwordMaxAge") Integer passwordMaxAge,  @ApiParam(value = "")  @QueryParam("initialPasswordChange") Boolean initialPasswordChange,  @ApiParam(value = "")  @QueryParam("passwordHistorySize") Integer passwordHistorySize,  @ApiParam(value = "")  @QueryParam("passwordExpiryForAdmin") Boolean passwordExpiryForAdmin,  @ApiParam(value = "")  @QueryParam("cacheExpiration") Integer cacheExpiration,  @ApiParam(value = "")  @QueryParam("enableRFC7613UsercaseMappedProfile") Boolean enableRFC7613UsercaseMappedProfile) {
        return delegate.orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post, apply, delete, action, $location, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("accountName") String accountName,  @ApiParam(value = "")  @QueryParam("containerName") String containerName,  @ApiParam(value = "")  @QueryParam("accessKey") String accessKey,  @ApiParam(value = "")  @QueryParam("rootPath") String rootPath,  @ApiParam(value = "")  @QueryParam("connectionURL") String connectionURL) {
        return delegate.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post, apply, delete, action, $location, propertylist, accountName, containerName, accessKey, rootPath, connectionURL, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("repository.home") String repositoryHome,  @ApiParam(value = "")  @QueryParam("tarmk.mode") String tarmkMode,  @ApiParam(value = "")  @QueryParam("tarmk.size") Integer tarmkSize,  @ApiParam(value = "")  @QueryParam("segmentCache.size") Integer segmentCacheSize,  @ApiParam(value = "")  @QueryParam("stringCache.size") Integer stringCacheSize,  @ApiParam(value = "")  @QueryParam("templateCache.size") Integer templateCacheSize,  @ApiParam(value = "")  @QueryParam("stringDeduplicationCache.size") Integer stringDeduplicationCacheSize,  @ApiParam(value = "")  @QueryParam("templateDeduplicationCache.size") Integer templateDeduplicationCacheSize,  @ApiParam(value = "")  @QueryParam("nodeDeduplicationCache.size") Integer nodeDeduplicationCacheSize,  @ApiParam(value = "")  @QueryParam("pauseCompaction") Boolean pauseCompaction,  @ApiParam(value = "")  @QueryParam("compaction.retryCount") Integer compactionRetryCount,  @ApiParam(value = "")  @QueryParam("compaction.force.timeout") Integer compactionForceTimeout,  @ApiParam(value = "")  @QueryParam("compaction.sizeDeltaEstimation") Integer compactionSizeDeltaEstimation,  @ApiParam(value = "")  @QueryParam("compaction.disableEstimation") Boolean compactionDisableEstimation,  @ApiParam(value = "")  @QueryParam("compaction.retainedGenerations") Integer compactionRetainedGenerations,  @ApiParam(value = "")  @QueryParam("compaction.memoryThreshold") Integer compactionMemoryThreshold,  @ApiParam(value = "")  @QueryParam("compaction.progressLog") Integer compactionProgressLog,  @ApiParam(value = "")  @QueryParam("standby") Boolean standby,  @ApiParam(value = "")  @QueryParam("customBlobStore") Boolean customBlobStore,  @ApiParam(value = "")  @QueryParam("customSegmentStore") Boolean customSegmentStore,  @ApiParam(value = "")  @QueryParam("splitPersistence") Boolean splitPersistence,  @ApiParam(value = "")  @QueryParam("repository.backup.dir") String repositoryBackupDir,  @ApiParam(value = "")  @QueryParam("blobGcMaxAgeInSecs") Integer blobGcMaxAgeInSecs,  @ApiParam(value = "")  @QueryParam("blobTrackSnapshotIntervalInSecs") Integer blobTrackSnapshotIntervalInSecs,  @ApiParam(value = "")  @QueryParam("role") String role,  @ApiParam(value = "")  @QueryParam("registerDescriptors") Boolean registerDescriptors,  @ApiParam(value = "")  @QueryParam("dispatchChanges") Boolean dispatchChanges) {
        return delegate.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("commitsTrackerWriterGroups") List<String> commitsTrackerWriterGroups) {
        return delegate.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post, apply, delete, action, $location, propertylist, commitsTrackerWriterGroups, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSegmentSegmentNodeStoreService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("repository.home") String repositoryHome,  @ApiParam(value = "")  @QueryParam("tarmk.mode") String tarmkMode,  @ApiParam(value = "")  @QueryParam("tarmk.size") Integer tarmkSize,  @ApiParam(value = "")  @QueryParam("segmentCache.size") Integer segmentCacheSize,  @ApiParam(value = "")  @QueryParam("stringCache.size") Integer stringCacheSize,  @ApiParam(value = "")  @QueryParam("templateCache.size") Integer templateCacheSize,  @ApiParam(value = "")  @QueryParam("stringDeduplicationCache.size") Integer stringDeduplicationCacheSize,  @ApiParam(value = "")  @QueryParam("templateDeduplicationCache.size") Integer templateDeduplicationCacheSize,  @ApiParam(value = "")  @QueryParam("nodeDeduplicationCache.size") Integer nodeDeduplicationCacheSize,  @ApiParam(value = "")  @QueryParam("pauseCompaction") Boolean pauseCompaction,  @ApiParam(value = "")  @QueryParam("compaction.retryCount") Integer compactionRetryCount,  @ApiParam(value = "")  @QueryParam("compaction.force.timeout") Integer compactionForceTimeout,  @ApiParam(value = "")  @QueryParam("compaction.sizeDeltaEstimation") Integer compactionSizeDeltaEstimation,  @ApiParam(value = "")  @QueryParam("compaction.disableEstimation") Boolean compactionDisableEstimation,  @ApiParam(value = "")  @QueryParam("compaction.retainedGenerations") Integer compactionRetainedGenerations,  @ApiParam(value = "")  @QueryParam("compaction.memoryThreshold") Integer compactionMemoryThreshold,  @ApiParam(value = "")  @QueryParam("compaction.progressLog") Integer compactionProgressLog,  @ApiParam(value = "")  @QueryParam("standby") Boolean standby,  @ApiParam(value = "")  @QueryParam("customBlobStore") Boolean customBlobStore,  @ApiParam(value = "")  @QueryParam("customSegmentStore") Boolean customSegmentStore,  @ApiParam(value = "")  @QueryParam("splitPersistence") Boolean splitPersistence,  @ApiParam(value = "")  @QueryParam("repository.backup.dir") String repositoryBackupDir,  @ApiParam(value = "")  @QueryParam("blobGcMaxAgeInSecs") Integer blobGcMaxAgeInSecs,  @ApiParam(value = "")  @QueryParam("blobTrackSnapshotIntervalInSecs") Integer blobTrackSnapshotIntervalInSecs) {
        return delegate.orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.sling.installer.configuration.persist") Boolean orgApacheSlingInstallerConfigurationPersist,  @ApiParam(value = "")  @QueryParam("mode") String mode,  @ApiParam(value = "")  @QueryParam("port") Integer port,  @ApiParam(value = "")  @QueryParam("primary.host") String primaryHost,  @ApiParam(value = "")  @QueryParam("interval") Integer interval,  @ApiParam(value = "")  @QueryParam("primary.allowed-client-ip-ranges") List<String> primaryAllowedClientIpRanges,  @ApiParam(value = "")  @QueryParam("secure") Boolean secure,  @ApiParam(value = "")  @QueryParam("standby.readtimeout") Integer standbyReadtimeout,  @ApiParam(value = "")  @QueryParam("standby.autoclean") Boolean standbyAutoclean) {
        return delegate.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, mode, port, primaryHost, interval, primaryAllowedClientIpRanges, secure, standbyReadtimeout, standbyAutoclean, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("handler.name") String handlerName,  @ApiParam(value = "")  @QueryParam("user.expirationTime") String userExpirationTime,  @ApiParam(value = "")  @QueryParam("user.autoMembership") List<String> userAutoMembership,  @ApiParam(value = "")  @QueryParam("user.propertyMapping") List<String> userPropertyMapping,  @ApiParam(value = "")  @QueryParam("user.pathPrefix") String userPathPrefix,  @ApiParam(value = "")  @QueryParam("user.membershipExpTime") String userMembershipExpTime,  @ApiParam(value = "")  @QueryParam("user.membershipNestingDepth") Integer userMembershipNestingDepth,  @ApiParam(value = "")  @QueryParam("user.dynamicMembership") Boolean userDynamicMembership,  @ApiParam(value = "")  @QueryParam("user.disableMissing") Boolean userDisableMissing,  @ApiParam(value = "")  @QueryParam("group.expirationTime") String groupExpirationTime,  @ApiParam(value = "")  @QueryParam("group.autoMembership") List<String> groupAutoMembership,  @ApiParam(value = "")  @QueryParam("group.propertyMapping") List<String> groupPropertyMapping,  @ApiParam(value = "")  @QueryParam("group.pathPrefix") String groupPathPrefix,  @ApiParam(value = "")  @QueryParam("enableRFC7613UsercaseMappedProfile") Boolean enableRFC7613UsercaseMappedProfile) {
        return delegate.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post, apply, delete, action, $location, propertylist, handlerName, userExpirationTime, userAutoMembership, userPropertyMapping, userPathPrefix, userMembershipExpTime, userMembershipNestingDepth, userDynamicMembership, userDisableMissing, groupExpirationTime, groupAutoMembership, groupPropertyMapping, groupPathPrefix, enableRFC7613UsercaseMappedProfile, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("jaas.ranking") Integer jaasRanking,  @ApiParam(value = "")  @QueryParam("jaas.controlFlag") String jaasControlFlag,  @ApiParam(value = "")  @QueryParam("jaas.realmName") String jaasRealmName,  @ApiParam(value = "")  @QueryParam("idp.name") String idpName,  @ApiParam(value = "")  @QueryParam("sync.handlerName") String syncHandlerName) {
        return delegate.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post, apply, delete, action, $location, propertylist, jaasRanking, jaasControlFlag, jaasRealmName, idpName, syncHandlerName, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("protectExternalId") Boolean protectExternalId) {
        return delegate.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post, apply, delete, action, $location, propertylist, protectExternalId, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("cugSupportedPaths") List<String> cugSupportedPaths,  @ApiParam(value = "")  @QueryParam("cugEnabled") Boolean cugEnabled,  @ApiParam(value = "")  @QueryParam("configurationRanking") Integer configurationRanking) {
        return delegate.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post, apply, delete, action, $location, propertylist, cugSupportedPaths, cugEnabled, configurationRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("principalNames") List<String> principalNames) {
        return delegate.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post, apply, delete, action, $location, propertylist, principalNames, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabledActions") String enabledActions,  @ApiParam(value = "")  @QueryParam("userPrivilegeNames") List<String> userPrivilegeNames,  @ApiParam(value = "")  @QueryParam("groupPrivilegeNames") List<String> groupPrivilegeNames,  @ApiParam(value = "")  @QueryParam("constraint") String constraint) {
        return delegate.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post, apply, delete, action, $location, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitVaultPackagingImplPackagingImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("packageRoots") List<String> packageRoots) {
        return delegate.orgApacheJackrabbitVaultPackagingImplPackagingImpl(post, apply, delete, action, $location, propertylist, packageRoots, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("homePath") String homePath) {
        return delegate.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post, apply, delete, action, $location, propertylist, homePath, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingAuthCoreImplLogoutServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingAuthCoreImplLogoutServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingAuthCoreImplLogoutServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.methods") List<String> slingServletMethods,  @ApiParam(value = "")  @QueryParam("sling.servlet.paths") String slingServletPaths) {
        return delegate.orgApacheSlingAuthCoreImplLogoutServlet(post, apply, delete, action, $location, propertylist, slingServletMethods, slingServletPaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplConfigurationBindingsValueProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post, apply, delete, action, $location, propertylist, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplConfigurationResolverImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("configBucketNames") List<String> configBucketNames) {
        return delegate.orgApacheSlingCaconfigImplConfigurationResolverImpl(post, apply, delete, action, $location, propertylist, configBucketNames, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("configPropertyInheritancePropertyNames") List<String> configPropertyInheritancePropertyNames) {
        return delegate.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post, apply, delete, action, $location, propertylist, enabled, configPropertyInheritancePropertyNames, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post, apply, delete, action, $location, propertylist, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("description") String description,  @ApiParam(value = "")  @QueryParam("overrides") List<String> overrides,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking) {
        return delegate.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post, apply, delete, action, $location, propertylist, description, overrides, enabled, serviceRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking) {
        return delegate.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post, apply, delete, action, $location, propertylist, enabled, serviceRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigManagementImplConfigurationManagementSetti( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("ignorePropertyNameRegex") List<String> ignorePropertyNameRegex,  @ApiParam(value = "")  @QueryParam("configCollectionPropertiesResourceNames") List<String> configCollectionPropertiesResourceNames) {
        return delegate.orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post, apply, delete, action, $location, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("configPath") String configPath,  @ApiParam(value = "")  @QueryParam("fallbackPaths") List<String> fallbackPaths,  @ApiParam(value = "")  @QueryParam("configCollectionInheritancePropertyNames") List<String> configCollectionInheritancePropertyNames) {
        return delegate.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post, apply, delete, action, $location, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("configRefResourceNames") List<String> configRefResourceNames,  @ApiParam(value = "")  @QueryParam("configRefPropertyNames") List<String> configRefPropertyNames,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking) {
        return delegate.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post, apply, delete, action, $location, propertylist, enabled, configRefResourceNames, configRefPropertyNames, serviceRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("parser.features") List<String> parserFeatures) {
        return delegate.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post, apply, delete, action, $location, propertylist, parserFeatures, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.commons.log.LogManager")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsLogLogManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsLogLogManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsLogLogManager( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.level") String orgApacheSlingCommonsLogLevel,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.file") String orgApacheSlingCommonsLogFile,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.file.number") Integer orgApacheSlingCommonsLogFileNumber,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.file.size") String orgApacheSlingCommonsLogFileSize,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.pattern") String orgApacheSlingCommonsLogPattern,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.configurationFile") String orgApacheSlingCommonsLogConfigurationFile,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.packagingDataEnabled") Boolean orgApacheSlingCommonsLogPackagingDataEnabled,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.maxCallerDataDepth") Integer orgApacheSlingCommonsLogMaxCallerDataDepth,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.maxOldFileCountInDump") Integer orgApacheSlingCommonsLogMaxOldFileCountInDump,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.numOfLines") Integer orgApacheSlingCommonsLogNumOfLines) {
        return delegate.orgApacheSlingCommonsLogLogManager(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsLogLogManagerFactoryConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.level") String orgApacheSlingCommonsLogLevel,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.file") String orgApacheSlingCommonsLogFile,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.pattern") String orgApacheSlingCommonsLogPattern,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.names") List<String> orgApacheSlingCommonsLogNames,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.additiv") Boolean orgApacheSlingCommonsLogAdditiv) {
        return delegate.orgApacheSlingCommonsLogLogManagerFactoryConfig(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsLogLogManagerFactoryWriter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.file") String orgApacheSlingCommonsLogFile,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.file.number") Integer orgApacheSlingCommonsLogFileNumber,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.file.size") String orgApacheSlingCommonsLogFileSize,  @ApiParam(value = "")  @QueryParam("org.apache.sling.commons.log.file.buffered") Boolean orgApacheSlingCommonsLogFileBuffered) {
        return delegate.orgApacheSlingCommonsLogLogManagerFactoryWriter(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsMetricsInternalLogReporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsMetricsInternalLogReporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsMetricsInternalLogReporter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("period") Integer period,  @ApiParam(value = "")  @QueryParam("timeUnit") String timeUnit,  @ApiParam(value = "")  @QueryParam("level") String level,  @ApiParam(value = "")  @QueryParam("loggerName") String loggerName,  @ApiParam(value = "")  @QueryParam("prefix") String prefix,  @ApiParam(value = "")  @QueryParam("pattern") String pattern,  @ApiParam(value = "")  @QueryParam("registryName") String registryName) {
        return delegate.orgApacheSlingCommonsMetricsInternalLogReporter(post, apply, delete, action, $location, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("datasources") List<String> datasources,  @ApiParam(value = "")  @QueryParam("step") Integer step,  @ApiParam(value = "")  @QueryParam("archives") List<String> archives,  @ApiParam(value = "")  @QueryParam("path") String path) {
        return delegate.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post, apply, delete, action, $location, propertylist, datasources, step, archives, path, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("mime.types") List<String> mimeTypes) {
        return delegate.orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, mimeTypes, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsSchedulerImplQuartzScheduler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("poolName") String poolName,  @ApiParam(value = "")  @QueryParam("allowedPoolNames") List<String> allowedPoolNames,  @ApiParam(value = "")  @QueryParam("scheduler.useleaderforsingle") Boolean schedulerUseleaderforsingle,  @ApiParam(value = "")  @QueryParam("metrics.filters") List<String> metricsFilters,  @ApiParam(value = "")  @QueryParam("slowThresholdMillis") Integer slowThresholdMillis) {
        return delegate.orgApacheSlingCommonsSchedulerImplQuartzScheduler(post, apply, delete, action, $location, propertylist, poolName, allowedPoolNames, schedulerUseleaderforsingle, metricsFilters, slowThresholdMillis, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("max.quartzJob.duration.acceptable") Integer maxQuartzJobDurationAcceptable) {
        return delegate.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post, apply, delete, action, $location, propertylist, maxQuartzJobDurationAcceptable, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("minPoolSize") Integer minPoolSize,  @ApiParam(value = "")  @QueryParam("maxPoolSize") Integer maxPoolSize,  @ApiParam(value = "")  @QueryParam("queueSize") Integer queueSize,  @ApiParam(value = "")  @QueryParam("maxThreadAge") Integer maxThreadAge,  @ApiParam(value = "")  @QueryParam("keepAliveTime") Integer keepAliveTime,  @ApiParam(value = "")  @QueryParam("blockPolicy") String blockPolicy,  @ApiParam(value = "")  @QueryParam("shutdownGraceful") Boolean shutdownGraceful,  @ApiParam(value = "")  @QueryParam("daemon") Boolean daemon,  @ApiParam(value = "")  @QueryParam("shutdownWaitTime") Integer shutdownWaitTime,  @ApiParam(value = "")  @QueryParam("priority") String priority) {
        return delegate.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post, apply, delete, action, $location, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.datasource.DataSourceFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDatasourceDataSourceFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDatasourceDataSourceFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDatasourceDataSourceFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("datasource.name") String datasourceName,  @ApiParam(value = "")  @QueryParam("datasource.svc.prop.name") String datasourceSvcPropName,  @ApiParam(value = "")  @QueryParam("driverClassName") String driverClassName,  @ApiParam(value = "")  @QueryParam("url") String url,  @ApiParam(value = "")  @QueryParam("username") String username,  @ApiParam(value = "")  @QueryParam("password") String password,  @ApiParam(value = "")  @QueryParam("defaultAutoCommit") String defaultAutoCommit,  @ApiParam(value = "")  @QueryParam("defaultReadOnly") String defaultReadOnly,  @ApiParam(value = "")  @QueryParam("defaultTransactionIsolation") String defaultTransactionIsolation,  @ApiParam(value = "")  @QueryParam("defaultCatalog") String defaultCatalog,  @ApiParam(value = "")  @QueryParam("maxActive") Integer maxActive,  @ApiParam(value = "")  @QueryParam("maxIdle") Integer maxIdle,  @ApiParam(value = "")  @QueryParam("minIdle") Integer minIdle,  @ApiParam(value = "")  @QueryParam("initialSize") Integer initialSize,  @ApiParam(value = "")  @QueryParam("maxWait") Integer maxWait,  @ApiParam(value = "")  @QueryParam("maxAge") Integer maxAge,  @ApiParam(value = "")  @QueryParam("testOnBorrow") Boolean testOnBorrow,  @ApiParam(value = "")  @QueryParam("testOnReturn") Boolean testOnReturn,  @ApiParam(value = "")  @QueryParam("testWhileIdle") Boolean testWhileIdle,  @ApiParam(value = "")  @QueryParam("validationQuery") String validationQuery,  @ApiParam(value = "")  @QueryParam("validationQueryTimeout") Integer validationQueryTimeout,  @ApiParam(value = "")  @QueryParam("timeBetweenEvictionRunsMillis") Integer timeBetweenEvictionRunsMillis,  @ApiParam(value = "")  @QueryParam("minEvictableIdleTimeMillis") Integer minEvictableIdleTimeMillis,  @ApiParam(value = "")  @QueryParam("connectionProperties") String connectionProperties,  @ApiParam(value = "")  @QueryParam("initSQL") String initSQL,  @ApiParam(value = "")  @QueryParam("jdbcInterceptors") String jdbcInterceptors,  @ApiParam(value = "")  @QueryParam("validationInterval") Integer validationInterval,  @ApiParam(value = "")  @QueryParam("logValidationErrors") Boolean logValidationErrors,  @ApiParam(value = "")  @QueryParam("datasource.svc.properties") List<String> datasourceSvcProperties) {
        return delegate.orgApacheSlingDatasourceDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourceSvcProperties, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDatasourceJNDIDataSourceFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("datasource.name") String datasourceName,  @ApiParam(value = "")  @QueryParam("datasource.svc.prop.name") String datasourceSvcPropName,  @ApiParam(value = "")  @QueryParam("datasource.jndi.name") String datasourceJndiName,  @ApiParam(value = "")  @QueryParam("jndi.properties") List<String> jndiProperties) {
        return delegate.orgApacheSlingDatasourceJNDIDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, datasourceJndiName, jndiProperties, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.discovery.oak.Config")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDiscoveryOakConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDiscoveryOakConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDiscoveryOakConfig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("connectorPingTimeout") Integer connectorPingTimeout,  @ApiParam(value = "")  @QueryParam("connectorPingInterval") Integer connectorPingInterval,  @ApiParam(value = "")  @QueryParam("discoveryLiteCheckInterval") Integer discoveryLiteCheckInterval,  @ApiParam(value = "")  @QueryParam("clusterSyncServiceTimeout") Integer clusterSyncServiceTimeout,  @ApiParam(value = "")  @QueryParam("clusterSyncServiceInterval") Integer clusterSyncServiceInterval,  @ApiParam(value = "")  @QueryParam("enableSyncToken") Boolean enableSyncToken,  @ApiParam(value = "")  @QueryParam("minEventDelay") Integer minEventDelay,  @ApiParam(value = "")  @QueryParam("socketConnectTimeout") Integer socketConnectTimeout,  @ApiParam(value = "")  @QueryParam("soTimeout") Integer soTimeout,  @ApiParam(value = "")  @QueryParam("topologyConnectorUrls") List<String> topologyConnectorUrls,  @ApiParam(value = "")  @QueryParam("topologyConnectorWhitelist") List<String> topologyConnectorWhitelist,  @ApiParam(value = "")  @QueryParam("autoStopLocalLoopEnabled") Boolean autoStopLocalLoopEnabled,  @ApiParam(value = "")  @QueryParam("gzipConnectorRequestsEnabled") Boolean gzipConnectorRequestsEnabled,  @ApiParam(value = "")  @QueryParam("hmacEnabled") Boolean hmacEnabled,  @ApiParam(value = "")  @QueryParam("enableEncryption") Boolean enableEncryption,  @ApiParam(value = "")  @QueryParam("sharedKey") String sharedKey,  @ApiParam(value = "")  @QueryParam("hmacSharedKeyTTL") Integer hmacSharedKeyTTL,  @ApiParam(value = "")  @QueryParam("backoffStandbyFactor") String backoffStandbyFactor,  @ApiParam(value = "")  @QueryParam("backoffStableFactor") String backoffStableFactor) {
        return delegate.orgApacheSlingDiscoveryOakConfig(post, apply, delete, action, $location, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.name") String hcName,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("hc.mbean.name") String hcMbeanName) {
        return delegate.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("title") String title,  @ApiParam(value = "")  @QueryParam("details") String details,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName,  @ApiParam(value = "")  @QueryParam("log.level") String logLevel,  @ApiParam(value = "")  @QueryParam("allowed.roots") List<String> allowedRoots,  @ApiParam(value = "")  @QueryParam("queue.processing.enabled") Boolean queueProcessingEnabled,  @ApiParam(value = "")  @QueryParam("packageImporter.endpoints") List<String> packageImporterEndpoints,  @ApiParam(value = "")  @QueryParam("passiveQueues") List<String> passiveQueues,  @ApiParam(value = "")  @QueryParam("priorityQueues") List<String> priorityQueues,  @ApiParam(value = "")  @QueryParam("retry.strategy") String retryStrategy,  @ApiParam(value = "")  @QueryParam("retry.attempts") Integer retryAttempts,  @ApiParam(value = "")  @QueryParam("requestAuthorizationStrategy.target") String requestAuthorizationStrategyTarget,  @ApiParam(value = "")  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget,  @ApiParam(value = "")  @QueryParam("packageBuilder.target") String packageBuilderTarget,  @ApiParam(value = "")  @QueryParam("triggers.target") String triggersTarget,  @ApiParam(value = "")  @QueryParam("queue.provider") String queueProvider,  @ApiParam(value = "")  @QueryParam("async.delivery") Boolean asyncDelivery,  @ApiParam(value = "")  @QueryParam("http.conn.timeout") Integer httpConnTimeout) {
        return delegate.orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, queueProcessingEnabled, packageImporterEndpoints, passiveQueues, priorityQueues, retryStrategy, retryAttempts, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, queueProvider, asyncDelivery, httpConnTimeout, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("jcrPrivilege") String jcrPrivilege) {
        return delegate.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post, apply, delete, action, $location, propertylist, name, jcrPrivilege, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("title") String title,  @ApiParam(value = "")  @QueryParam("details") String details,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName,  @ApiParam(value = "")  @QueryParam("log.level") String logLevel,  @ApiParam(value = "")  @QueryParam("allowed.roots") List<String> allowedRoots,  @ApiParam(value = "")  @QueryParam("requestAuthorizationStrategy.target") String requestAuthorizationStrategyTarget,  @ApiParam(value = "")  @QueryParam("queueProviderFactory.target") String queueProviderFactoryTarget,  @ApiParam(value = "")  @QueryParam("packageBuilder.target") String packageBuilderTarget,  @ApiParam(value = "")  @QueryParam("triggers.target") String triggersTarget,  @ApiParam(value = "")  @QueryParam("priorityQueues") List<String> priorityQueues) {
        return delegate.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, requestAuthorizationStrategyTarget, queueProviderFactoryTarget, packageBuilderTarget, triggersTarget, priorityQueues, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("title") String title,  @ApiParam(value = "")  @QueryParam("details") String details,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName,  @ApiParam(value = "")  @QueryParam("log.level") String logLevel,  @ApiParam(value = "")  @QueryParam("queue.processing.enabled") Boolean queueProcessingEnabled,  @ApiParam(value = "")  @QueryParam("packageExporter.endpoints") List<String> packageExporterEndpoints,  @ApiParam(value = "")  @QueryParam("pull.items") Integer pullItems,  @ApiParam(value = "")  @QueryParam("http.conn.timeout") Integer httpConnTimeout,  @ApiParam(value = "")  @QueryParam("requestAuthorizationStrategy.target") String requestAuthorizationStrategyTarget,  @ApiParam(value = "")  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget,  @ApiParam(value = "")  @QueryParam("packageBuilder.target") String packageBuilderTarget,  @ApiParam(value = "")  @QueryParam("triggers.target") String triggersTarget) {
        return delegate.orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterEndpoints, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("title") String title,  @ApiParam(value = "")  @QueryParam("details") String details,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName,  @ApiParam(value = "")  @QueryParam("log.level") String logLevel,  @ApiParam(value = "")  @QueryParam("queue.processing.enabled") Boolean queueProcessingEnabled,  @ApiParam(value = "")  @QueryParam("packageExporter.target") String packageExporterTarget,  @ApiParam(value = "")  @QueryParam("packageImporter.target") String packageImporterTarget,  @ApiParam(value = "")  @QueryParam("requestAuthorizationStrategy.target") String requestAuthorizationStrategyTarget,  @ApiParam(value = "")  @QueryParam("triggers.target") String triggersTarget) {
        return delegate.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterTarget, packageImporterTarget, requestAuthorizationStrategyTarget, triggersTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("title") String title,  @ApiParam(value = "")  @QueryParam("details") String details,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName,  @ApiParam(value = "")  @QueryParam("log.level") String logLevel,  @ApiParam(value = "")  @QueryParam("queue.processing.enabled") Boolean queueProcessingEnabled,  @ApiParam(value = "")  @QueryParam("passiveQueues") List<String> passiveQueues,  @ApiParam(value = "")  @QueryParam("packageExporter.endpoints") List<String> packageExporterEndpoints,  @ApiParam(value = "")  @QueryParam("packageImporter.endpoints") List<String> packageImporterEndpoints,  @ApiParam(value = "")  @QueryParam("retry.strategy") String retryStrategy,  @ApiParam(value = "")  @QueryParam("retry.attempts") Integer retryAttempts,  @ApiParam(value = "")  @QueryParam("pull.items") Integer pullItems,  @ApiParam(value = "")  @QueryParam("http.conn.timeout") Integer httpConnTimeout,  @ApiParam(value = "")  @QueryParam("requestAuthorizationStrategy.target") String requestAuthorizationStrategyTarget,  @ApiParam(value = "")  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget,  @ApiParam(value = "")  @QueryParam("packageBuilder.target") String packageBuilderTarget,  @ApiParam(value = "")  @QueryParam("triggers.target") String triggersTarget) {
        return delegate.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, passiveQueues, packageExporterEndpoints, packageImporterEndpoints, retryStrategy, retryAttempts, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionMonitorDistributionQueueHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.name") String hcName,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("hc.mbean.name") String hcMbeanName,  @ApiParam(value = "")  @QueryParam("numberOfRetriesAllowed") Integer numberOfRetriesAllowed) {
        return delegate.orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, numberOfRetriesAllowed, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplExporterAgentDistributio( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("queue") String queue,  @ApiParam(value = "")  @QueryParam("drop.invalid.items") Boolean dropInvalidItems,  @ApiParam(value = "")  @QueryParam("agent.target") String agentTarget) {
        return delegate.orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post, apply, delete, action, $location, propertylist, name, queue, dropInvalidItems, agentTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplExporterLocalDistributio( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("packageBuilder.target") String packageBuilderTarget) {
        return delegate.orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplExporterRemoteDistributi( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("endpoints") List<String> endpoints,  @ApiParam(value = "")  @QueryParam("pull.items") Integer pullItems,  @ApiParam(value = "")  @QueryParam("packageBuilder.target") String packageBuilderTarget,  @ApiParam(value = "")  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget) {
        return delegate.orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post, apply, delete, action, $location, propertylist, name, endpoints, pullItems, packageBuilderTarget, transportSecretProviderTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplImporterLocalDistributio( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("packageBuilder.target") String packageBuilderTarget) {
        return delegate.orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplImporterRemoteDistributi( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("endpoints") List<String> endpoints,  @ApiParam(value = "")  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget) {
        return delegate.orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post, apply, delete, action, $location, propertylist, name, endpoints, transportSecretProviderTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplImporterRepositoryDistri( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("service.name") String serviceName,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("privilege.name") String privilegeName) {
        return delegate.orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post, apply, delete, action, $location, propertylist, name, serviceName, path, privilegeName, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionResourcesImplDistributionConfiguration( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("provider.roots") String providerRoots,  @ApiParam(value = "")  @QueryParam("kind") String kind) {
        return delegate.orgApacheSlingDistributionResourcesImplDistributionConfiguration(post, apply, delete, action, $location, propertylist, providerRoots, kind, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionResourcesImplDistributionServiceResour( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("provider.roots") String providerRoots,  @ApiParam(value = "")  @QueryParam("kind") String kind) {
        return delegate.orgApacheSlingDistributionResourcesImplDistributionServiceResour(post, apply, delete, action, $location, propertylist, providerRoots, kind, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionSerializationImplDistributionPackageBu( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("type") String type,  @ApiParam(value = "")  @QueryParam("format.target") String formatTarget,  @ApiParam(value = "")  @QueryParam("tempFsFolder") String tempFsFolder,  @ApiParam(value = "")  @QueryParam("fileThreshold") Integer fileThreshold,  @ApiParam(value = "")  @QueryParam("memoryUnit") String memoryUnit,  @ApiParam(value = "")  @QueryParam("useOffHeapMemory") Boolean useOffHeapMemory,  @ApiParam(value = "")  @QueryParam("digestAlgorithm") String digestAlgorithm,  @ApiParam(value = "")  @QueryParam("monitoringQueueSize") Integer monitoringQueueSize,  @ApiParam(value = "")  @QueryParam("cleanupDelay") Integer cleanupDelay,  @ApiParam(value = "")  @QueryParam("package.filters") List<String> packageFilters,  @ApiParam(value = "")  @QueryParam("property.filters") List<String> propertyFilters) {
        return delegate.orgApacheSlingDistributionSerializationImplDistributionPackageBu(post, apply, delete, action, $location, propertylist, name, type, formatTarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packageFilters, propertyFilters, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionSerializationImplVltVaultDistribution( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("type") String type,  @ApiParam(value = "")  @QueryParam("importMode") String importMode,  @ApiParam(value = "")  @QueryParam("aclHandling") String aclHandling,  @ApiParam(value = "")  @QueryParam("package.roots") String packageRoots,  @ApiParam(value = "")  @QueryParam("package.filters") List<String> packageFilters,  @ApiParam(value = "")  @QueryParam("property.filters") List<String> propertyFilters,  @ApiParam(value = "")  @QueryParam("tempFsFolder") String tempFsFolder,  @ApiParam(value = "")  @QueryParam("useBinaryReferences") Boolean useBinaryReferences,  @ApiParam(value = "")  @QueryParam("autoSaveThreshold") Integer autoSaveThreshold,  @ApiParam(value = "")  @QueryParam("cleanupDelay") Integer cleanupDelay,  @ApiParam(value = "")  @QueryParam("fileThreshold") Integer fileThreshold,  @ApiParam(value = "")  @QueryParam("MEGA_BYTES") String MEGA_BYTES,  @ApiParam(value = "")  @QueryParam("useOffHeapMemory") Boolean useOffHeapMemory,  @ApiParam(value = "")  @QueryParam("digestAlgorithm") String digestAlgorithm,  @ApiParam(value = "")  @QueryParam("monitoringQueueSize") Integer monitoringQueueSize,  @ApiParam(value = "")  @QueryParam("pathsMapping") List<String> pathsMapping,  @ApiParam(value = "")  @QueryParam("strictImport") Boolean strictImport) {
        return delegate.orgApacheSlingDistributionSerializationImplVltVaultDistribution(post, apply, delete, action, $location, propertylist, name, type, importMode, aclHandling, packageRoots, packageFilters, propertyFilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, MEGA_BYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTransportImplUserCredentialsDistributi( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("username") String username,  @ApiParam(value = "")  @QueryParam("password") String password) {
        return delegate.orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post, apply, delete, action, $location, propertylist, name, username, password, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplDistributionEventDistribute( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("path") String path) {
        return delegate.orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post, apply, delete, action, $location, propertylist, name, path, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("ignoredPathsPatterns") List<String> ignoredPathsPatterns,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName,  @ApiParam(value = "")  @QueryParam("deep") Boolean deep) {
        return delegate.orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post, apply, delete, action, $location, propertylist, name, path, ignoredPathsPatterns, serviceName, deep, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName,  @ApiParam(value = "")  @QueryParam("nuggetsPath") String nuggetsPath) {
        return delegate.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post, apply, delete, action, $location, propertylist, name, path, serviceName, nuggetsPath, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("endpoint") String endpoint,  @ApiParam(value = "")  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget) {
        return delegate.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post, apply, delete, action, $location, propertylist, name, endpoint, transportSecretProviderTarget, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplResourceEventDistributionTr( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("path") String path) {
        return delegate.orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post, apply, delete, action, $location, propertylist, name, path, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("seconds") String seconds,  @ApiParam(value = "")  @QueryParam("serviceName") String serviceName) {
        return delegate.orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post, apply, delete, action, $location, propertylist, name, path, seconds, serviceName, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineImplAuthSlingAuthenticator( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("osgi.http.whiteboard.context.select") String osgiHttpWhiteboardContextSelect,  @ApiParam(value = "")  @QueryParam("osgi.http.whiteboard.listener") String osgiHttpWhiteboardListener,  @ApiParam(value = "")  @QueryParam("auth.sudo.cookie") String authSudoCookie,  @ApiParam(value = "")  @QueryParam("auth.sudo.parameter") String authSudoParameter,  @ApiParam(value = "")  @QueryParam("auth.annonymous") Boolean authAnnonymous,  @ApiParam(value = "")  @QueryParam("sling.auth.requirements") List<String> slingAuthRequirements,  @ApiParam(value = "")  @QueryParam("sling.auth.anonymous.user") String slingAuthAnonymousUser,  @ApiParam(value = "")  @QueryParam("sling.auth.anonymous.password") String slingAuthAnonymousPassword,  @ApiParam(value = "")  @QueryParam("auth.http") String authHttp,  @ApiParam(value = "")  @QueryParam("auth.http.realm") String authHttpRealm,  @ApiParam(value = "")  @QueryParam("auth.uri.suffix") List<String> authUriSuffix) {
        return delegate.orgApacheSlingEngineImplAuthSlingAuthenticator(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener, authSudoCookie, authSudoParameter, authAnnonymous, slingAuthRequirements, slingAuthAnonymousUser, slingAuthAnonymousPassword, authHttp, authHttpRealm, authUriSuffix, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("extensions") List<String> extensions,  @ApiParam(value = "")  @QueryParam("minDurationMs") Integer minDurationMs,  @ApiParam(value = "")  @QueryParam("maxDurationMs") Integer maxDurationMs,  @ApiParam(value = "")  @QueryParam("compactLogFormat") Boolean compactLogFormat) {
        return delegate.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post, apply, delete, action, $location, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineImplLogRequestLoggerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplLogRequestLoggerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineImplLogRequestLogger( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("request.log.output") String requestLogOutput,  @ApiParam(value = "")  @QueryParam("request.log.outputtype") Integer requestLogOutputtype,  @ApiParam(value = "")  @QueryParam("request.log.enabled") Boolean requestLogEnabled,  @ApiParam(value = "")  @QueryParam("access.log.output") String accessLogOutput,  @ApiParam(value = "")  @QueryParam("access.log.outputtype") Integer accessLogOutputtype,  @ApiParam(value = "")  @QueryParam("access.log.enabled") Boolean accessLogEnabled) {
        return delegate.orgApacheSlingEngineImplLogRequestLogger(post, apply, delete, action, $location, propertylist, requestLogOutput, requestLogOutputtype, requestLogEnabled, accessLogOutput, accessLogOutputtype, accessLogEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineImplLogRequestLoggerService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("request.log.service.format") String requestLogServiceFormat,  @ApiParam(value = "")  @QueryParam("request.log.service.output") String requestLogServiceOutput,  @ApiParam(value = "")  @QueryParam("request.log.service.outputtype") Integer requestLogServiceOutputtype,  @ApiParam(value = "")  @QueryParam("request.log.service.onentry") Boolean requestLogServiceOnentry) {
        return delegate.orgApacheSlingEngineImplLogRequestLoggerService(post, apply, delete, action, $location, propertylist, requestLogServiceFormat, requestLogServiceOutput, requestLogServiceOutputtype, requestLogServiceOnentry, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineImplSlingMainServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplSlingMainServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineImplSlingMainServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.max.calls") Integer slingMaxCalls,  @ApiParam(value = "")  @QueryParam("sling.max.inclusions") Integer slingMaxInclusions,  @ApiParam(value = "")  @QueryParam("sling.trace.allow") Boolean slingTraceAllow,  @ApiParam(value = "")  @QueryParam("sling.max.record.requests") Integer slingMaxRecordRequests,  @ApiParam(value = "")  @QueryParam("sling.store.pattern.requests") List<String> slingStorePatternRequests,  @ApiParam(value = "")  @QueryParam("sling.serverinfo") String slingServerinfo,  @ApiParam(value = "")  @QueryParam("sling.additional.response.headers") List<String> slingAdditionalResponseHeaders) {
        return delegate.orgApacheSlingEngineImplSlingMainServlet(post, apply, delete, action, $location, propertylist, slingMaxCalls, slingMaxInclusions, slingTraceAllow, slingMaxRecordRequests, slingStorePatternRequests, slingServerinfo, slingAdditionalResponseHeaders, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.engine.parameters")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineParametersInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineParametersInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineParameters( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.default.parameter.encoding") String slingDefaultParameterEncoding,  @ApiParam(value = "")  @QueryParam("sling.default.max.parameters") Integer slingDefaultMaxParameters,  @ApiParam(value = "")  @QueryParam("file.location") String fileLocation,  @ApiParam(value = "")  @QueryParam("file.threshold") Integer fileThreshold,  @ApiParam(value = "")  @QueryParam("file.max") Integer fileMax,  @ApiParam(value = "")  @QueryParam("request.max") Integer requestMax,  @ApiParam(value = "")  @QueryParam("sling.default.parameter.checkForAdditionalContainerParameters") Boolean slingDefaultParameterCheckForAdditionalContainerParameters) {
        return delegate.orgApacheSlingEngineParameters(post, apply, delete, action, $location, propertylist, slingDefaultParameterEncoding, slingDefaultMaxParameters, fileLocation, fileThreshold, fileMax, requestMax, slingDefaultParameterCheckForAdditionalContainerParameters, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.event.impl.EventingThreadPool")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEventImplEventingThreadPoolInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplEventingThreadPoolInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEventImplEventingThreadPool( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("minPoolSize") Integer minPoolSize) {
        return delegate.orgApacheSlingEventImplEventingThreadPool(post, apply, delete, action, $location, propertylist, minPoolSize, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEventImplJobsDefaultJobManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplJobsDefaultJobManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEventImplJobsDefaultJobManager( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("queue.priority") String queuePriority,  @ApiParam(value = "")  @QueryParam("queue.retries") Integer queueRetries,  @ApiParam(value = "")  @QueryParam("queue.retrydelay") Integer queueRetrydelay,  @ApiParam(value = "")  @QueryParam("queue.maxparallel") Integer queueMaxparallel) {
        return delegate.orgApacheSlingEventImplJobsDefaultJobManager(post, apply, delete, action, $location, propertylist, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEventImplJobsJcrPersistenceHandler( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("job.consumermanager.disableDistribution") Boolean jobConsumermanagerDisableDistribution,  @ApiParam(value = "")  @QueryParam("startup.delay") Integer startupDelay,  @ApiParam(value = "")  @QueryParam("cleanup.period") Integer cleanupPeriod) {
        return delegate.orgApacheSlingEventImplJobsJcrPersistenceHandler(post, apply, delete, action, $location, propertylist, jobConsumermanagerDisableDistribution, startupDelay, cleanupPeriod, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEventImplJobsJobConsumerManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplJobsJobConsumerManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEventImplJobsJobConsumerManager( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.sling.installer.configuration.persist") Boolean orgApacheSlingInstallerConfigurationPersist,  @ApiParam(value = "")  @QueryParam("job.consumermanager.whitelist") List<String> jobConsumermanagerWhitelist,  @ApiParam(value = "")  @QueryParam("job.consumermanager.blacklist") List<String> jobConsumermanagerBlacklist) {
        return delegate.orgApacheSlingEventImplJobsJobConsumerManager(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist, jobConsumermanagerBlacklist, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingEventJobsQueueConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventJobsQueueConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEventJobsQueueConfiguration( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("queue.name") String queueName,  @ApiParam(value = "")  @QueryParam("queue.topics") List<String> queueTopics,  @ApiParam(value = "")  @QueryParam("queue.type") String queueType,  @ApiParam(value = "")  @QueryParam("queue.priority") String queuePriority,  @ApiParam(value = "")  @QueryParam("queue.retries") Integer queueRetries,  @ApiParam(value = "")  @QueryParam("queue.retrydelay") Integer queueRetrydelay,  @ApiParam(value = "")  @QueryParam("queue.maxparallel") BigDecimal queueMaxparallel,  @ApiParam(value = "")  @QueryParam("queue.keepJobs") Boolean queueKeepJobs,  @ApiParam(value = "")  @QueryParam("queue.preferRunOnCreationInstance") Boolean queuePreferRunOnCreationInstance,  @ApiParam(value = "")  @QueryParam("queue.threadPoolSize") Integer queueThreadPoolSize,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking) {
        return delegate.orgApacheSlingEventJobsQueueConfiguration(post, apply, delete, action, $location, propertylist, queueName, queueTopics, queueType, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, queueKeepJobs, queuePreferRunOnCreationInstance, queueThreadPoolSize, serviceRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("users") List<String> users,  @ApiParam(value = "")  @QueryParam("groups") List<String> groups) {
        return delegate.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post, apply, delete, action, $location, propertylist, users, groups, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.featureflags.Feature")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingFeatureflagsFeatureInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingFeatureflagsFeatureInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingFeatureflagsFeature( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("description") String description,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.orgApacheSlingFeatureflagsFeature(post, apply, delete, action, $location, propertylist, name, description, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingFeatureflagsImplConfiguredFeature( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("name") String name,  @ApiParam(value = "")  @QueryParam("description") String description,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled) {
        return delegate.orgApacheSlingFeatureflagsImplConfiguredFeature(post, apply, delete, action, $location, propertylist, name, description, enabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingHapiImplHApiUtilImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHapiImplHApiUtilImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHapiImplHApiUtilImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.sling.hapi.tools.resourcetype") String orgApacheSlingHapiToolsResourcetype,  @ApiParam(value = "")  @QueryParam("org.apache.sling.hapi.tools.collectionresourcetype") String orgApacheSlingHapiToolsCollectionresourcetype,  @ApiParam(value = "")  @QueryParam("org.apache.sling.hapi.tools.searchpaths") List<String> orgApacheSlingHapiToolsSearchpaths,  @ApiParam(value = "")  @QueryParam("org.apache.sling.hapi.tools.externalurl") String orgApacheSlingHapiToolsExternalurl,  @ApiParam(value = "")  @QueryParam("org.apache.sling.hapi.tools.enabled") Boolean orgApacheSlingHapiToolsEnabled) {
        return delegate.orgApacheSlingHapiImplHApiUtilImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplCompositeHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.name") String hcName,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("hc.mbean.name") String hcMbeanName,  @ApiParam(value = "")  @QueryParam("filter.tags") List<String> filterTags,  @ApiParam(value = "")  @QueryParam("filter.combineTagsWithOr") Boolean filterCombineTagsWithOr) {
        return delegate.orgApacheSlingHcCoreImplCompositeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, filterTags, filterCombineTagsWithOr, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("timeoutInMs") Integer timeoutInMs,  @ApiParam(value = "")  @QueryParam("longRunningFutureThresholdForCriticalMs") Integer longRunningFutureThresholdForCriticalMs,  @ApiParam(value = "")  @QueryParam("resultCacheTtlInMs") Integer resultCacheTtlInMs) {
        return delegate.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post, apply, delete, action, $location, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplJmxAttributeHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.name") String hcName,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("hc.mbean.name") String hcMbeanName,  @ApiParam(value = "")  @QueryParam("mbean.name") String mbeanName,  @ApiParam(value = "")  @QueryParam("attribute.name") String attributeName,  @ApiParam(value = "")  @QueryParam("attribute.value.constraint") String attributeValueConstraint) {
        return delegate.orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, mbeanName, attributeName, attributeValueConstraint, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplScriptableHealthCheck( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("hc.name") String hcName,  @ApiParam(value = "")  @QueryParam("hc.tags") List<String> hcTags,  @ApiParam(value = "")  @QueryParam("hc.mbean.name") String hcMbeanName,  @ApiParam(value = "")  @QueryParam("expression") String expression,  @ApiParam(value = "")  @QueryParam("language.extension") String languageExtension) {
        return delegate.orgApacheSlingHcCoreImplScriptableHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, expression, languageExtension, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("servletPath") String servletPath,  @ApiParam(value = "")  @QueryParam("disabled") Boolean disabled,  @ApiParam(value = "")  @QueryParam("cors.accessControlAllowOrigin") String corsAccessControlAllowOrigin) {
        return delegate.orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post, apply, delete, action, $location, propertylist, servletPath, disabled, corsAccessControlAllowOrigin, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("totalWidth") Integer totalWidth,  @ApiParam(value = "")  @QueryParam("colWidthName") Integer colWidthName,  @ApiParam(value = "")  @QueryParam("colWidthResult") Integer colWidthResult,  @ApiParam(value = "")  @QueryParam("colWidthTiming") Integer colWidthTiming) {
        return delegate.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post, apply, delete, action, $location, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.i18n.impl.I18NFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingI18nImplI18NFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingI18nImplI18NFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingI18nImplI18NFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("sling.filter.scope") List<String> slingFilterScope) {
        return delegate.orgApacheSlingI18nImplI18NFilter(post, apply, delete, action, $location, propertylist, serviceRanking, slingFilterScope, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingI18nImplJcrResourceBundleProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("locale.default") String localeDefault,  @ApiParam(value = "")  @QueryParam("preload.bundles") Boolean preloadBundles,  @ApiParam(value = "")  @QueryParam("invalidation.delay") Integer invalidationDelay) {
        return delegate.orgApacheSlingI18nImplJcrResourceBundleProvider(post, apply, delete, action, $location, propertylist, localeDefault, preloadBundles, invalidationDelay, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingInstallerProviderJcrImplJcrInstaller( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("handler.schemes") List<String> handlerSchemes,  @ApiParam(value = "")  @QueryParam("sling.jcrinstall.folder.name.regexp") String slingJcrinstallFolderNameRegexp,  @ApiParam(value = "")  @QueryParam("sling.jcrinstall.folder.max.depth") Integer slingJcrinstallFolderMaxDepth,  @ApiParam(value = "")  @QueryParam("sling.jcrinstall.search.path") List<String> slingJcrinstallSearchPath,  @ApiParam(value = "")  @QueryParam("sling.jcrinstall.new.config.path") String slingJcrinstallNewConfigPath,  @ApiParam(value = "")  @QueryParam("sling.jcrinstall.signal.path") String slingJcrinstallSignalPath,  @ApiParam(value = "")  @QueryParam("sling.jcrinstall.enable.writeback") Boolean slingJcrinstallEnableWriteback) {
        return delegate.orgApacheSlingInstallerProviderJcrImplJcrInstaller(post, apply, delete, action, $location, propertylist, handlerSchemes, slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath, slingJcrinstallNewConfigPath, slingJcrinstallSignalPath, slingJcrinstallEnableWriteback, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrBaseInternalLoginAdminWhitelist( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("whitelist.bypass") Boolean whitelistBypass,  @ApiParam(value = "")  @QueryParam("whitelist.bundles.regexp") String whitelistBundlesRegexp) {
        return delegate.orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post, apply, delete, action, $location, propertylist, whitelistBypass, whitelistBundlesRegexp, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("whitelist.name") String whitelistName,  @ApiParam(value = "")  @QueryParam("whitelist.bundles") List<String> whitelistBundles) {
        return delegate.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post, apply, delete, action, $location, propertylist, whitelistName, whitelistBundles, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrDavexImplServletsSlingDavExServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("alias") String alias,  @ApiParam(value = "")  @QueryParam("dav.create-absolute-uri") Boolean davCreateAbsoluteUri,  @ApiParam(value = "")  @QueryParam("dav.protectedhandlers") String davProtectedhandlers) {
        return delegate.orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post, apply, delete, action, $location, propertylist, alias, davCreateAbsoluteUri, davProtectedhandlers, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("java.naming.factory.initial") String javaNamingFactoryInitial,  @ApiParam(value = "")  @QueryParam("java.naming.provider.url") String javaNamingProviderUrl) {
        return delegate.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post, apply, delete, action, $location, propertylist, javaNamingFactoryInitial, javaNamingProviderUrl, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("port") Integer port) {
        return delegate.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post, apply, delete, action, $location, propertylist, port, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrRepoinitImplRepositoryInitializer( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("references") List<String> references) {
        return delegate.orgApacheSlingJcrRepoinitImplRepositoryInitializer(post, apply, delete, action, $location, propertylist, references, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrRepoinitRepositoryInitializer( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("references") List<String> references,  @ApiParam(value = "")  @QueryParam("scripts") List<String> scripts) {
        return delegate.orgApacheSlingJcrRepoinitRepositoryInitializer(post, apply, delete, action, $location, propertylist, references, scripts, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("resource.resolver.searchpath") List<String> resourceResolverSearchpath,  @ApiParam(value = "")  @QueryParam("resource.resolver.manglenamespaces") Boolean resourceResolverManglenamespaces,  @ApiParam(value = "")  @QueryParam("resource.resolver.allowDirect") Boolean resourceResolverAllowDirect,  @ApiParam(value = "")  @QueryParam("resource.resolver.required.providers") List<String> resourceResolverRequiredProviders,  @ApiParam(value = "")  @QueryParam("resource.resolver.required.providernames") List<String> resourceResolverRequiredProvidernames,  @ApiParam(value = "")  @QueryParam("resource.resolver.virtual") List<String> resourceResolverVirtual,  @ApiParam(value = "")  @QueryParam("resource.resolver.mapping") List<String> resourceResolverMapping,  @ApiParam(value = "")  @QueryParam("resource.resolver.map.location") String resourceResolverMapLocation,  @ApiParam(value = "")  @QueryParam("resource.resolver.map.observation") List<String> resourceResolverMapObservation,  @ApiParam(value = "")  @QueryParam("resource.resolver.default.vanity.redirect.status") Integer resourceResolverDefaultVanityRedirectStatus,  @ApiParam(value = "")  @QueryParam("resource.resolver.enable.vanitypath") Boolean resourceResolverEnableVanitypath,  @ApiParam(value = "")  @QueryParam("resource.resolver.vanitypath.maxEntries") Integer resourceResolverVanitypathMaxEntries,  @ApiParam(value = "")  @QueryParam("resource.resolver.vanitypath.maxEntries.startup") Boolean resourceResolverVanitypathMaxEntriesStartup,  @ApiParam(value = "")  @QueryParam("resource.resolver.vanitypath.bloomfilter.maxBytes") Integer resourceResolverVanitypathBloomfilterMaxBytes,  @ApiParam(value = "")  @QueryParam("resource.resolver.optimize.alias.resolution") Boolean resourceResolverOptimizeAliasResolution,  @ApiParam(value = "")  @QueryParam("resource.resolver.vanitypath.whitelist") List<String> resourceResolverVanitypathWhitelist,  @ApiParam(value = "")  @QueryParam("resource.resolver.vanitypath.blacklist") List<String> resourceResolverVanitypathBlacklist,  @ApiParam(value = "")  @QueryParam("resource.resolver.vanity.precedence") Boolean resourceResolverVanityPrecedence,  @ApiParam(value = "")  @QueryParam("resource.resolver.providerhandling.paranoid") Boolean resourceResolverProviderhandlingParanoid,  @ApiParam(value = "")  @QueryParam("resource.resolver.log.closing") Boolean resourceResolverLogClosing,  @ApiParam(value = "")  @QueryParam("resource.resolver.log.unclosed") Boolean resourceResolverLogUnclosed) {
        return delegate.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post, apply, delete, action, $location, propertylist, resourceResolverSearchpath, resourceResolverManglenamespaces, resourceResolverAllowDirect, resourceResolverRequiredProviders, resourceResolverRequiredProvidernames, resourceResolverVirtual, resourceResolverMapping, resourceResolverMapLocation, resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid, resourceResolverLogClosing, resourceResolverLogUnclosed, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrResourceInternalJcrSystemUserValidator( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("allow.only.system.user") Boolean allowOnlySystemUser) {
        return delegate.orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post, apply, delete, action, $location, propertylist, allowOnlySystemUser, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("path") String path,  @ApiParam(value = "")  @QueryParam("checkpath.prefix") String checkpathPrefix,  @ApiParam(value = "")  @QueryParam("jcrPath") String jcrPath) {
        return delegate.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post, apply, delete, action, $location, propertylist, path, checkpathPrefix, jcrPath, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("type.collections") String typeCollections,  @ApiParam(value = "")  @QueryParam("type.noncollections") String typeNoncollections,  @ApiParam(value = "")  @QueryParam("type.content") String typeContent) {
        return delegate.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post, apply, delete, action, $location, propertylist, serviceRanking, typeCollections, typeNoncollections, typeContent, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking) {
        return delegate.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post, apply, delete, action, $location, propertylist, serviceRanking, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("dav.root") String davRoot,  @ApiParam(value = "")  @QueryParam("dav.create-absolute-uri") Boolean davCreateAbsoluteUri,  @ApiParam(value = "")  @QueryParam("dav.realm") String davRealm,  @ApiParam(value = "")  @QueryParam("collection.types") List<String> collectionTypes,  @ApiParam(value = "")  @QueryParam("filter.prefixes") List<String> filterPrefixes,  @ApiParam(value = "")  @QueryParam("filter.types") String filterTypes,  @ApiParam(value = "")  @QueryParam("filter.uris") String filterUris,  @ApiParam(value = "")  @QueryParam("type.collections") String typeCollections,  @ApiParam(value = "")  @QueryParam("type.noncollections") String typeNoncollections,  @ApiParam(value = "")  @QueryParam("type.content") String typeContent) {
        return delegate.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post, apply, delete, action, $location, propertylist, davRoot, davCreateAbsoluteUri, davRealm, collectionTypes, filterPrefixes, filterTypes, filterUris, typeCollections, typeNoncollections, typeContent, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJmxProviderImplJMXResourceProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("provider.roots") String providerRoots) {
        return delegate.orgApacheSlingJmxProviderImplJMXResourceProvider(post, apply, delete, action, $location, propertylist, providerRoots, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingModelsImplModelAdapterFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingModelsImplModelAdapterFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingModelsImplModelAdapterFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("osgi.http.whiteboard.listener") String osgiHttpWhiteboardListener,  @ApiParam(value = "")  @QueryParam("osgi.http.whiteboard.context.select") String osgiHttpWhiteboardContextSelect,  @ApiParam(value = "")  @QueryParam("max.recursion.depth") Integer maxRecursionDepth,  @ApiParam(value = "")  @QueryParam("cleanup.job.period") Integer cleanupJobPeriod) {
        return delegate.orgApacheSlingModelsImplModelAdapterFactory(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect, maxRecursionDepth, cleanupJobPeriod, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingModelsJacksonexporterImplResourceModuleProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("max.recursion.levels") Integer maxRecursionLevels) {
        return delegate.orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post, apply, delete, action, $location, propertylist, maxRecursionLevels, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("felix.inventory.printer.name") String felixInventoryPrinterName,  @ApiParam(value = "")  @QueryParam("felix.inventory.printer.title") String felixInventoryPrinterTitle,  @ApiParam(value = "")  @QueryParam("path") String path) {
        return delegate.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post, apply, delete, action, $location, propertylist, felixInventoryPrinterName, felixInventoryPrinterTitle, path, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingResourcemergerImplMergedResourceProviderFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("merge.root") String mergeRoot,  @ApiParam(value = "")  @QueryParam("merge.readOnly") Boolean mergeReadOnly) {
        return delegate.orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.resourcemerger.picker.overriding")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingResourcemergerPickerOverridingInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingResourcemergerPickerOverridingInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingResourcemergerPickerOverriding( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("merge.root") String mergeRoot,  @ApiParam(value = "")  @QueryParam("merge.readOnly") Boolean mergeReadOnly) {
        return delegate.orgApacheSlingResourcemergerPickerOverriding(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingCoreImplScriptCacheImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.sling.scripting.cache.size") Integer orgApacheSlingScriptingCacheSize,  @ApiParam(value = "")  @QueryParam("org.apache.sling.scripting.cache.additional_extensions") List<String> orgApacheSlingScriptingCacheAdditionalExtensions) {
        return delegate.orgApacheSlingScriptingCoreImplScriptCacheImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("log.stacktrace.onclose") Boolean logStacktraceOnclose) {
        return delegate.orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post, apply, delete, action, $location, propertylist, logStacktraceOnclose, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingJavaImplJavaScriptEngineFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("java.classdebuginfo") Boolean javaClassdebuginfo,  @ApiParam(value = "")  @QueryParam("java.javaEncoding") String javaJavaEncoding,  @ApiParam(value = "")  @QueryParam("java.compilerSourceVM") String javaCompilerSourceVM,  @ApiParam(value = "")  @QueryParam("java.compilerTargetVM") String javaCompilerTargetVM) {
        return delegate.orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post, apply, delete, action, $location, propertylist, javaClassdebuginfo, javaJavaEncoding, javaCompilerSourceVM, javaCompilerTargetVM, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.sling.scripting.javascript.rhino.optLevel") Integer orgApacheSlingScriptingJavascriptRhinoOptLevel) {
        return delegate.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingJspJspScriptEngineFactory( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("jasper.compilerTargetVM") String jasperCompilerTargetVM,  @ApiParam(value = "")  @QueryParam("jasper.compilerSourceVM") String jasperCompilerSourceVM,  @ApiParam(value = "")  @QueryParam("jasper.classdebuginfo") Boolean jasperClassdebuginfo,  @ApiParam(value = "")  @QueryParam("jasper.enablePooling") Boolean jasperEnablePooling,  @ApiParam(value = "")  @QueryParam("jasper.ieClassId") String jasperIeClassId,  @ApiParam(value = "")  @QueryParam("jasper.genStringAsCharArray") Boolean jasperGenStringAsCharArray,  @ApiParam(value = "")  @QueryParam("jasper.keepgenerated") Boolean jasperKeepgenerated,  @ApiParam(value = "")  @QueryParam("jasper.mappedfile") Boolean jasperMappedfile,  @ApiParam(value = "")  @QueryParam("jasper.trimSpaces") Boolean jasperTrimSpaces,  @ApiParam(value = "")  @QueryParam("jasper.displaySourceFragments") Boolean jasperDisplaySourceFragments,  @ApiParam(value = "")  @QueryParam("default.is.session") Boolean defaultIsSession) {
        return delegate.orgApacheSlingScriptingJspJspScriptEngineFactory(post, apply, delete, action, $location, propertylist, jasperCompilerTargetVM, jasperCompilerSourceVM, jasperClassdebuginfo, jasperEnablePooling, jasperIeClassId, jasperGenStringAsCharArray, jasperKeepgenerated, jasperMappedfile, jasperTrimSpaces, jasperDisplaySourceFragments, defaultIsSession, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("org.apache.sling.scripting.sightly.js.bindings") List<String> orgApacheSlingScriptingSightlyJsBindings) {
        return delegate.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingSightlyJsBindings, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingSecurityImplContentDispositionFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingSecurityImplContentDispositionFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingSecurityImplContentDispositionFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.content.disposition.paths") List<String> slingContentDispositionPaths,  @ApiParam(value = "")  @QueryParam("sling.content.disposition.excluded.paths") List<String> slingContentDispositionExcludedPaths,  @ApiParam(value = "")  @QueryParam("sling.content.disposition.all.paths") Boolean slingContentDispositionAllPaths) {
        return delegate.orgApacheSlingSecurityImplContentDispositionFilter(post, apply, delete, action, $location, propertylist, slingContentDispositionPaths, slingContentDispositionExcludedPaths, slingContentDispositionAllPaths, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.security.impl.ReferrerFilter")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingSecurityImplReferrerFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingSecurityImplReferrerFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingSecurityImplReferrerFilter( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("allow.empty") Boolean allowEmpty,  @ApiParam(value = "")  @QueryParam("allow.hosts") List<String> allowHosts,  @ApiParam(value = "")  @QueryParam("allow.hosts.regexp") List<String> allowHostsRegexp,  @ApiParam(value = "")  @QueryParam("filter.methods") List<String> filterMethods,  @ApiParam(value = "")  @QueryParam("exclude.agents.regexp") List<String> excludeAgentsRegexp) {
        return delegate.orgApacheSlingSecurityImplReferrerFilter(post, apply, delete, action, $location, propertylist, allowEmpty, allowHosts, allowHostsRegexp, filterMethods, excludeAgentsRegexp, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServiceusermappingImplServiceUserMapperImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("user.mapping") List<String> userMapping,  @ApiParam(value = "")  @QueryParam("user.default") String userDefault,  @ApiParam(value = "")  @QueryParam("user.enable.default.mapping") Boolean userEnableDefaultMapping,  @ApiParam(value = "")  @QueryParam("require.validation") Boolean requireValidation) {
        return delegate.orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post, apply, delete, action, $location, propertylist, userMapping, userDefault, userEnableDefaultMapping, requireValidation, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("service.ranking") Integer serviceRanking,  @ApiParam(value = "")  @QueryParam("user.mapping") List<String> userMapping) {
        return delegate.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post, apply, delete, action, $location, propertylist, serviceRanking, userMapping, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingServletsGetDefaultGetServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsGetDefaultGetServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServletsGetDefaultGetServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("aliases") List<String> aliases,  @ApiParam(value = "")  @QueryParam("index") Boolean index,  @ApiParam(value = "")  @QueryParam("index.files") List<String> indexFiles,  @ApiParam(value = "")  @QueryParam("enable.html") Boolean enableHtml,  @ApiParam(value = "")  @QueryParam("enable.json") Boolean enableJson,  @ApiParam(value = "")  @QueryParam("enable.txt") Boolean enableTxt,  @ApiParam(value = "")  @QueryParam("enable.xml") Boolean enableXml,  @ApiParam(value = "")  @QueryParam("json.maximumresults") Integer jsonMaximumresults,  @ApiParam(value = "")  @QueryParam("ecmaSuport") Boolean ecmaSuport) {
        return delegate.orgApacheSlingServletsGetDefaultGetServlet(post, apply, delete, action, $location, propertylist, aliases, index, indexFiles, enableHtml, enableJson, enableTxt, enableXml, jsonMaximumresults, ecmaSuport, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServletsGetImplVersionVersionInfoServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.servlet.selectors") List<String> slingServletSelectors,  @ApiParam(value = "")  @QueryParam("ecmaSuport") Boolean ecmaSuport) {
        return delegate.orgApacheSlingServletsGetImplVersionVersionInfoServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, ecmaSuport, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServletsPostImplHelperChunkCleanUpTask( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("scheduler.expression") String schedulerExpression,  @ApiParam(value = "")  @QueryParam("scheduler.concurrent") Boolean schedulerConcurrent,  @ApiParam(value = "")  @QueryParam("chunk.cleanup.age") Integer chunkCleanupAge) {
        return delegate.orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent, chunkCleanupAge, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingServletsPostImplSlingPostServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsPostImplSlingPostServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServletsPostImplSlingPostServlet( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("servlet.post.dateFormats") List<String> servletPostDateFormats,  @ApiParam(value = "")  @QueryParam("servlet.post.nodeNameHints") List<String> servletPostNodeNameHints,  @ApiParam(value = "")  @QueryParam("servlet.post.nodeNameMaxLength") Integer servletPostNodeNameMaxLength,  @ApiParam(value = "")  @QueryParam("servlet.post.checkinNewVersionableNodes") Boolean servletPostCheckinNewVersionableNodes,  @ApiParam(value = "")  @QueryParam("servlet.post.autoCheckout") Boolean servletPostAutoCheckout,  @ApiParam(value = "")  @QueryParam("servlet.post.autoCheckin") Boolean servletPostAutoCheckin,  @ApiParam(value = "")  @QueryParam("servlet.post.ignorePattern") String servletPostIgnorePattern) {
        return delegate.orgApacheSlingServletsPostImplSlingPostServlet(post, apply, delete, action, $location, propertylist, servletPostDateFormats, servletPostNodeNameHints, servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes, servletPostAutoCheckout, servletPostAutoCheckin, servletPostIgnorePattern, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingServletsResolverSlingServletResolverInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsResolverSlingServletResolverInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServletsResolverSlingServletResolver( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("servletresolver.servletRoot") String servletresolverServletRoot,  @ApiParam(value = "")  @QueryParam("servletresolver.cacheSize") Integer servletresolverCacheSize,  @ApiParam(value = "")  @QueryParam("servletresolver.paths") List<String> servletresolverPaths,  @ApiParam(value = "")  @QueryParam("servletresolver.defaultExtensions") List<String> servletresolverDefaultExtensions) {
        return delegate.orgApacheSlingServletsResolverSlingServletResolver(post, apply, delete, action, $location, propertylist, servletresolverServletRoot, servletresolverCacheSize, servletresolverPaths, servletresolverDefaultExtensions, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingSettingsImplSlingSettingsServiceImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("sling.name") String slingName,  @ApiParam(value = "")  @QueryParam("sling.description") String slingDescription) {
        return delegate.orgApacheSlingSettingsImplSlingSettingsServiceImpl(post, apply, delete, action, $location, propertylist, slingName, slingDescription, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingStartupfilterImplStartupFilterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingStartupfilterImplStartupFilterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingStartupfilterImplStartupFilterImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("active.by.default") Boolean activeByDefault,  @ApiParam(value = "")  @QueryParam("default.message") String defaultMessage) {
        return delegate.orgApacheSlingStartupfilterImplStartupFilterImpl(post, apply, delete, action, $location, propertylist, activeByDefault, defaultMessage, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingTenantInternalTenantProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingTenantInternalTenantProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingTenantInternalTenantProviderImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("tenant.root") String tenantRoot,  @ApiParam(value = "")  @QueryParam("tenant.path.matcher") List<String> tenantPathMatcher) {
        return delegate.orgApacheSlingTenantInternalTenantProviderImpl(post, apply, delete, action, $location, propertylist, tenantRoot, tenantPathMatcher, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.tracer.internal.LogTracer")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingTracerInternalLogTracerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingTracerInternalLogTracerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingTracerInternalLogTracer( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("tracerSets") List<String> tracerSets,  @ApiParam(value = "")  @QueryParam("enabled") Boolean enabled,  @ApiParam(value = "")  @QueryParam("servletEnabled") Boolean servletEnabled,  @ApiParam(value = "")  @QueryParam("recordingCacheSizeInMB") Integer recordingCacheSizeInMB,  @ApiParam(value = "")  @QueryParam("recordingCacheDurationInSecs") Integer recordingCacheDurationInSecs,  @ApiParam(value = "")  @QueryParam("recordingCompressionEnabled") Boolean recordingCompressionEnabled,  @ApiParam(value = "")  @QueryParam("gzipResponse") Boolean gzipResponse) {
        return delegate.orgApacheSlingTracerInternalLogTracer(post, apply, delete, action, $location, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse, securityContext);
    }

    @POST
    @Path("/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @ApiOperation(value = "", notes = "", response = OrgApacheSlingXssImplXSSFilterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingXssImplXSSFilterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingXssImplXSSFilterImpl( @ApiParam(value = "")  @QueryParam("post") Boolean post,  @ApiParam(value = "")  @QueryParam("apply") Boolean apply,  @ApiParam(value = "")  @QueryParam("delete") Boolean delete,  @ApiParam(value = "")  @QueryParam("action") String action,  @ApiParam(value = "")  @QueryParam("$location") String $location,  @ApiParam(value = "")  @QueryParam("propertylist") List<String> propertylist,  @ApiParam(value = "")  @QueryParam("policyPath") String policyPath) {
        return delegate.orgApacheSlingXssImplXSSFilterImpl(post, apply, delete, action, $location, propertylist, policyPath, securityContext);
    }
}
