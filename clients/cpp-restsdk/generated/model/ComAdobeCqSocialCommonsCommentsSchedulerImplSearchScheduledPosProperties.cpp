/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties()
{
    m_EnableScheduledPostsSearchIsSet = false;
    m_NumberOfMinutesIsSet = false;
    m_MaxSearchLimitIsSet = false;
}

ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::~ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties()
{
}

void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EnableScheduledPostsSearchIsSet)
    {
        val[utility::conversions::to_string_t("enableScheduledPostsSearch")] = ModelBase::toJson(m_EnableScheduledPostsSearch);
    }
    if(m_NumberOfMinutesIsSet)
    {
        val[utility::conversions::to_string_t("numberOfMinutes")] = ModelBase::toJson(m_NumberOfMinutes);
    }
    if(m_MaxSearchLimitIsSet)
    {
        val[utility::conversions::to_string_t("maxSearchLimit")] = ModelBase::toJson(m_MaxSearchLimit);
    }

    return val;
}

void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("enableScheduledPostsSearch")))
    {
        if(!val[utility::conversions::to_string_t("enableScheduledPostsSearch")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableScheduledPostsSearch")]);
            setEnableScheduledPostsSearch( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("numberOfMinutes")))
    {
        if(!val[utility::conversions::to_string_t("numberOfMinutes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("numberOfMinutes")]);
            setNumberOfMinutes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxSearchLimit")))
    {
        if(!val[utility::conversions::to_string_t("maxSearchLimit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxSearchLimit")]);
            setMaxSearchLimit( newItem );
        }
    }
}

void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EnableScheduledPostsSearchIsSet)
    {
        if (m_EnableScheduledPostsSearch.get())
        {
            m_EnableScheduledPostsSearch->toMultipart(multipart, utility::conversions::to_string_t("enableScheduledPostsSearch."));
        }
    }
    if(m_NumberOfMinutesIsSet)
    {
        if (m_NumberOfMinutes.get())
        {
            m_NumberOfMinutes->toMultipart(multipart, utility::conversions::to_string_t("numberOfMinutes."));
        }
    }
    if(m_MaxSearchLimitIsSet)
    {
        if (m_MaxSearchLimit.get())
        {
            m_MaxSearchLimit->toMultipart(multipart, utility::conversions::to_string_t("maxSearchLimit."));
        }
    }
}

void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("enableScheduledPostsSearch")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableScheduledPostsSearch")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableScheduledPostsSearch."));
            setEnableScheduledPostsSearch( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("numberOfMinutes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("numberOfMinutes")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("numberOfMinutes."));
            setNumberOfMinutes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxSearchLimit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxSearchLimit")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxSearchLimit."));
            setMaxSearchLimit( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::getEnableScheduledPostsSearch() const
{
    return m_EnableScheduledPostsSearch;
}


void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::setEnableScheduledPostsSearch(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableScheduledPostsSearch = value;
    m_EnableScheduledPostsSearchIsSet = true;
}
bool ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::enableScheduledPostsSearchIsSet() const
{
    return m_EnableScheduledPostsSearchIsSet;
}

void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::unsetEnableScheduledPostsSearch()
{
    m_EnableScheduledPostsSearchIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::getNumberOfMinutes() const
{
    return m_NumberOfMinutes;
}


void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::setNumberOfMinutes(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_NumberOfMinutes = value;
    m_NumberOfMinutesIsSet = true;
}
bool ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::numberOfMinutesIsSet() const
{
    return m_NumberOfMinutesIsSet;
}

void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::unsetNumberOfMinutes()
{
    m_NumberOfMinutesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::getMaxSearchLimit() const
{
    return m_MaxSearchLimit;
}


void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::setMaxSearchLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxSearchLimit = value;
    m_MaxSearchLimitIsSet = true;
}
bool ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::maxSearchLimitIsSet() const
{
    return m_MaxSearchLimitIsSet;
}

void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::unsetMaxSearchLimit()
{
    m_MaxSearchLimitIsSet = false;
}

}
}
}
}

