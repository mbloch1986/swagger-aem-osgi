/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AnalyticsComponentQueryCacheServiceProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AnalyticsComponentQueryCacheServiceProperties::AnalyticsComponentQueryCacheServiceProperties()
{
    m_Cq_analytics_component_query_cache_sizeIsSet = false;
    
}

AnalyticsComponentQueryCacheServiceProperties::~AnalyticsComponentQueryCacheServiceProperties()
{
}

void AnalyticsComponentQueryCacheServiceProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json AnalyticsComponentQueryCacheServiceProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cq_analytics_component_query_cache_sizeIsSet)
    {
        val["cq.analytics.component.query.cache.size"] = ModelBase::toJson(m_Cq_analytics_component_query_cache_size);
    }
    

    return val;
}

void AnalyticsComponentQueryCacheServiceProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cq.analytics.component.query.cache.size") != val.end())
    {
        if(!val["cq.analytics.component.query.cache.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cq.analytics.component.query.cache.size"]);
            setCqAnalyticsComponentQueryCacheSize( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger AnalyticsComponentQueryCacheServiceProperties::getCqAnalyticsComponentQueryCacheSize() const
{
    return m_Cq_analytics_component_query_cache_size;
}
void AnalyticsComponentQueryCacheServiceProperties::setCqAnalyticsComponentQueryCacheSize(ConfigNodePropertyInteger const& value)
{
    m_Cq_analytics_component_query_cache_size = value;
    m_Cq_analytics_component_query_cache_sizeIsSet = true;
}
bool AnalyticsComponentQueryCacheServiceProperties::cqAnalyticsComponentQueryCacheSizeIsSet() const
{
    return m_Cq_analytics_component_query_cache_sizeIsSet;
}
void AnalyticsComponentQueryCacheServiceProperties::unsetCq_analytics_component_query_cache_size()
{
    m_Cq_analytics_component_query_cache_sizeIsSet = false;
}

}
}
}
}

