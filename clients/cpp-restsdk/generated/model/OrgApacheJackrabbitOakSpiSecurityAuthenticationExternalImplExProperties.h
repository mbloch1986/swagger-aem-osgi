/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties();
    virtual ~OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getJaasRanking() const;
    bool jaasRankingIsSet() const;
    void unsetJaas_ranking();
    void setJaasRanking(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJaasControlFlag() const;
    bool jaasControlFlagIsSet() const;
    void unsetJaas_controlFlag();
    void setJaasControlFlag(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJaasRealmName() const;
    bool jaasRealmNameIsSet() const;
    void unsetJaas_realmName();
    void setJaasRealmName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getIdpName() const;
    bool idpNameIsSet() const;
    void unsetIdp_name();
    void setIdpName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSyncHandlerName() const;
    bool syncHandlerNameIsSet() const;
    void unsetSync_handlerName();
    void setSyncHandlerName(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Jaas_ranking;
    bool m_Jaas_rankingIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Jaas_controlFlag;
    bool m_Jaas_controlFlagIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Jaas_realmName;
    bool m_Jaas_realmNameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Idp_name;
    bool m_Idp_nameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Sync_handlerName;
    bool m_Sync_handlerNameIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties_H_ */
