/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqExtwidgetServletsImageSpriteServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqExtwidgetServletsImageSpriteServletProperties::ComDayCqExtwidgetServletsImageSpriteServletProperties()
{
    m_MaxWidthIsSet = false;
    m_MaxHeightIsSet = false;
}

ComDayCqExtwidgetServletsImageSpriteServletProperties::~ComDayCqExtwidgetServletsImageSpriteServletProperties()
{
}

void ComDayCqExtwidgetServletsImageSpriteServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqExtwidgetServletsImageSpriteServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MaxWidthIsSet)
    {
        val[utility::conversions::to_string_t("maxWidth")] = ModelBase::toJson(m_MaxWidth);
    }
    if(m_MaxHeightIsSet)
    {
        val[utility::conversions::to_string_t("maxHeight")] = ModelBase::toJson(m_MaxHeight);
    }

    return val;
}

void ComDayCqExtwidgetServletsImageSpriteServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("maxWidth")))
    {
        if(!val[utility::conversions::to_string_t("maxWidth")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxWidth")]);
            setMaxWidth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxHeight")))
    {
        if(!val[utility::conversions::to_string_t("maxHeight")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxHeight")]);
            setMaxHeight( newItem );
        }
    }
}

void ComDayCqExtwidgetServletsImageSpriteServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MaxWidthIsSet)
    {
        if (m_MaxWidth.get())
        {
            m_MaxWidth->toMultipart(multipart, utility::conversions::to_string_t("maxWidth."));
        }
    }
    if(m_MaxHeightIsSet)
    {
        if (m_MaxHeight.get())
        {
            m_MaxHeight->toMultipart(multipart, utility::conversions::to_string_t("maxHeight."));
        }
    }
}

void ComDayCqExtwidgetServletsImageSpriteServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("maxWidth")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxWidth")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxWidth."));
            setMaxWidth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxHeight")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxHeight")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxHeight."));
            setMaxHeight( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqExtwidgetServletsImageSpriteServletProperties::getMaxWidth() const
{
    return m_MaxWidth;
}


void ComDayCqExtwidgetServletsImageSpriteServletProperties::setMaxWidth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxWidth = value;
    m_MaxWidthIsSet = true;
}
bool ComDayCqExtwidgetServletsImageSpriteServletProperties::maxWidthIsSet() const
{
    return m_MaxWidthIsSet;
}

void ComDayCqExtwidgetServletsImageSpriteServletProperties::unsetMaxWidth()
{
    m_MaxWidthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqExtwidgetServletsImageSpriteServletProperties::getMaxHeight() const
{
    return m_MaxHeight;
}


void ComDayCqExtwidgetServletsImageSpriteServletProperties::setMaxHeight(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxHeight = value;
    m_MaxHeightIsSet = true;
}
bool ComDayCqExtwidgetServletsImageSpriteServletProperties::maxHeightIsSet() const
{
    return m_MaxHeightIsSet;
}

void ComDayCqExtwidgetServletsImageSpriteServletProperties::unsetMaxHeight()
{
    m_MaxHeightIsSet = false;
}

}
}
}
}

