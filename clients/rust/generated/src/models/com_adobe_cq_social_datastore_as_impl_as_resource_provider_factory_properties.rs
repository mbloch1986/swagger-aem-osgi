/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
  #[serde(rename = "version.id")]
  version_id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cache.on")]
  cache_on: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "concurrency.level")]
  concurrency_level: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cache.start.size")]
  cache_start_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cache.ttl")]
  cache_ttl: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cache.size")]
  cache_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "time.limit")]
  time_limit: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
  pub fn new() -> ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
    ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
      version_id: None,
      cache_on: None,
      concurrency_level: None,
      cache_start_size: None,
      cache_ttl: None,
      cache_size: None,
      time_limit: None
    }
  }

  pub fn set_version_id(&mut self, version_id: ::models::ConfigNodePropertyString) {
    self.version_id = Some(version_id);
  }

  pub fn with_version_id(mut self, version_id: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
    self.version_id = Some(version_id);
    self
  }

  pub fn version_id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.version_id.as_ref()
  }

  pub fn reset_version_id(&mut self) {
    self.version_id = None;
  }

  pub fn set_cache_on(&mut self, cache_on: ::models::ConfigNodePropertyBoolean) {
    self.cache_on = Some(cache_on);
  }

  pub fn with_cache_on(mut self, cache_on: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
    self.cache_on = Some(cache_on);
    self
  }

  pub fn cache_on(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cache_on.as_ref()
  }

  pub fn reset_cache_on(&mut self) {
    self.cache_on = None;
  }

  pub fn set_concurrency_level(&mut self, concurrency_level: ::models::ConfigNodePropertyInteger) {
    self.concurrency_level = Some(concurrency_level);
  }

  pub fn with_concurrency_level(mut self, concurrency_level: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
    self.concurrency_level = Some(concurrency_level);
    self
  }

  pub fn concurrency_level(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.concurrency_level.as_ref()
  }

  pub fn reset_concurrency_level(&mut self) {
    self.concurrency_level = None;
  }

  pub fn set_cache_start_size(&mut self, cache_start_size: ::models::ConfigNodePropertyInteger) {
    self.cache_start_size = Some(cache_start_size);
  }

  pub fn with_cache_start_size(mut self, cache_start_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
    self.cache_start_size = Some(cache_start_size);
    self
  }

  pub fn cache_start_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cache_start_size.as_ref()
  }

  pub fn reset_cache_start_size(&mut self) {
    self.cache_start_size = None;
  }

  pub fn set_cache_ttl(&mut self, cache_ttl: ::models::ConfigNodePropertyInteger) {
    self.cache_ttl = Some(cache_ttl);
  }

  pub fn with_cache_ttl(mut self, cache_ttl: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
    self.cache_ttl = Some(cache_ttl);
    self
  }

  pub fn cache_ttl(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cache_ttl.as_ref()
  }

  pub fn reset_cache_ttl(&mut self) {
    self.cache_ttl = None;
  }

  pub fn set_cache_size(&mut self, cache_size: ::models::ConfigNodePropertyInteger) {
    self.cache_size = Some(cache_size);
  }

  pub fn with_cache_size(mut self, cache_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
    self.cache_size = Some(cache_size);
    self
  }

  pub fn cache_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cache_size.as_ref()
  }

  pub fn reset_cache_size(&mut self) {
    self.cache_size = None;
  }

  pub fn set_time_limit(&mut self, time_limit: ::models::ConfigNodePropertyInteger) {
    self.time_limit = Some(time_limit);
  }

  pub fn with_time_limit(mut self, time_limit: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
    self.time_limit = Some(time_limit);
    self
  }

  pub fn time_limit(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.time_limit.as_ref()
  }

  pub fn reset_time_limit(&mut self) {
    self.time_limit = None;
  }

}



