/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties()
{
    m_Cq_searchpromote_configuration_server_uriIsSet = false;
    m_Cq_searchpromote_configuration_environmentIsSet = false;
    m_Connection_timeoutIsSet = false;
    m_Socket_timeoutIsSet = false;
}

ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::~ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties()
{
}

void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_searchpromote_configuration_server_uriIsSet)
    {
        val[utility::conversions::to_string_t("cq.searchpromote.configuration.server.uri")] = ModelBase::toJson(m_Cq_searchpromote_configuration_server_uri);
    }
    if(m_Cq_searchpromote_configuration_environmentIsSet)
    {
        val[utility::conversions::to_string_t("cq.searchpromote.configuration.environment")] = ModelBase::toJson(m_Cq_searchpromote_configuration_environment);
    }
    if(m_Connection_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("connection.timeout")] = ModelBase::toJson(m_Connection_timeout);
    }
    if(m_Socket_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("socket.timeout")] = ModelBase::toJson(m_Socket_timeout);
    }

    return val;
}

void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.searchpromote.configuration.server.uri")))
    {
        if(!val[utility::conversions::to_string_t("cq.searchpromote.configuration.server.uri")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.searchpromote.configuration.server.uri")]);
            setCqSearchpromoteConfigurationServerUri( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.searchpromote.configuration.environment")))
    {
        if(!val[utility::conversions::to_string_t("cq.searchpromote.configuration.environment")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.searchpromote.configuration.environment")]);
            setCqSearchpromoteConfigurationEnvironment( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connection.timeout")))
    {
        if(!val[utility::conversions::to_string_t("connection.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("connection.timeout")]);
            setConnectionTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("socket.timeout")))
    {
        if(!val[utility::conversions::to_string_t("socket.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("socket.timeout")]);
            setSocketTimeout( newItem );
        }
    }
}

void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_searchpromote_configuration_server_uriIsSet)
    {
        if (m_Cq_searchpromote_configuration_server_uri.get())
        {
            m_Cq_searchpromote_configuration_server_uri->toMultipart(multipart, utility::conversions::to_string_t("cq.searchpromote.configuration.server.uri."));
        }
    }
    if(m_Cq_searchpromote_configuration_environmentIsSet)
    {
        if (m_Cq_searchpromote_configuration_environment.get())
        {
            m_Cq_searchpromote_configuration_environment->toMultipart(multipart, utility::conversions::to_string_t("cq.searchpromote.configuration.environment."));
        }
    }
    if(m_Connection_timeoutIsSet)
    {
        if (m_Connection_timeout.get())
        {
            m_Connection_timeout->toMultipart(multipart, utility::conversions::to_string_t("connection.timeout."));
        }
    }
    if(m_Socket_timeoutIsSet)
    {
        if (m_Socket_timeout.get())
        {
            m_Socket_timeout->toMultipart(multipart, utility::conversions::to_string_t("socket.timeout."));
        }
    }
}

void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.searchpromote.configuration.server.uri")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.searchpromote.configuration.server.uri")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.searchpromote.configuration.server.uri."));
            setCqSearchpromoteConfigurationServerUri( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.searchpromote.configuration.environment")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.searchpromote.configuration.environment")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.searchpromote.configuration.environment."));
            setCqSearchpromoteConfigurationEnvironment( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connection.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("connection.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("connection.timeout."));
            setConnectionTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("socket.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("socket.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("socket.timeout."));
            setSocketTimeout( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::getCqSearchpromoteConfigurationServerUri() const
{
    return m_Cq_searchpromote_configuration_server_uri;
}


void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::setCqSearchpromoteConfigurationServerUri(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_searchpromote_configuration_server_uri = value;
    m_Cq_searchpromote_configuration_server_uriIsSet = true;
}
bool ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::cqSearchpromoteConfigurationServerUriIsSet() const
{
    return m_Cq_searchpromote_configuration_server_uriIsSet;
}

void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::unsetCq_searchpromote_configuration_server_uri()
{
    m_Cq_searchpromote_configuration_server_uriIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::getCqSearchpromoteConfigurationEnvironment() const
{
    return m_Cq_searchpromote_configuration_environment;
}


void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::setCqSearchpromoteConfigurationEnvironment(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_searchpromote_configuration_environment = value;
    m_Cq_searchpromote_configuration_environmentIsSet = true;
}
bool ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::cqSearchpromoteConfigurationEnvironmentIsSet() const
{
    return m_Cq_searchpromote_configuration_environmentIsSet;
}

void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::unsetCq_searchpromote_configuration_environment()
{
    m_Cq_searchpromote_configuration_environmentIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::getConnectionTimeout() const
{
    return m_Connection_timeout;
}


void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::setConnectionTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Connection_timeout = value;
    m_Connection_timeoutIsSet = true;
}
bool ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::connectionTimeoutIsSet() const
{
    return m_Connection_timeoutIsSet;
}

void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::unsetConnection_timeout()
{
    m_Connection_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::getSocketTimeout() const
{
    return m_Socket_timeout;
}


void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::setSocketTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Socket_timeout = value;
    m_Socket_timeoutIsSet = true;
}
bool ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::socketTimeoutIsSet() const
{
    return m_Socket_timeoutIsSet;
}

void ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties::unsetSocket_timeout()
{
    m_Socket_timeoutIsSet = false;
}

}
}
}
}

