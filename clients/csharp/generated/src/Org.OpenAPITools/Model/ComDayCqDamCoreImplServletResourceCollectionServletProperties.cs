/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqDamCoreImplServletResourceCollectionServletProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreImplServletResourceCollectionServletProperties :  IEquatable<ComDayCqDamCoreImplServletResourceCollectionServletProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqDamCoreImplServletResourceCollectionServletProperties" /> class.
        /// </summary>
        /// <param name="slingServletResourceTypes">slingServletResourceTypes.</param>
        /// <param name="slingServletMethods">slingServletMethods.</param>
        /// <param name="slingServletSelectors">slingServletSelectors.</param>
        /// <param name="downloadConfig">downloadConfig.</param>
        /// <param name="viewSelector">viewSelector.</param>
        /// <param name="sendEmail">sendEmail.</param>
        public ComDayCqDamCoreImplServletResourceCollectionServletProperties(ConfigNodePropertyArray slingServletResourceTypes = default(ConfigNodePropertyArray), ConfigNodePropertyString slingServletMethods = default(ConfigNodePropertyString), ConfigNodePropertyString slingServletSelectors = default(ConfigNodePropertyString), ConfigNodePropertyString downloadConfig = default(ConfigNodePropertyString), ConfigNodePropertyString viewSelector = default(ConfigNodePropertyString), ConfigNodePropertyBoolean sendEmail = default(ConfigNodePropertyBoolean))
        {
            this.SlingServletResourceTypes = slingServletResourceTypes;
            this.SlingServletMethods = slingServletMethods;
            this.SlingServletSelectors = slingServletSelectors;
            this.DownloadConfig = downloadConfig;
            this.ViewSelector = viewSelector;
            this.SendEmail = sendEmail;
        }
        
        /// <summary>
        /// Gets or Sets SlingServletResourceTypes
        /// </summary>
        [DataMember(Name="sling.servlet.resourceTypes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray SlingServletResourceTypes { get; set; }

        /// <summary>
        /// Gets or Sets SlingServletMethods
        /// </summary>
        [DataMember(Name="sling.servlet.methods", EmitDefaultValue=false)]
        public ConfigNodePropertyString SlingServletMethods { get; set; }

        /// <summary>
        /// Gets or Sets SlingServletSelectors
        /// </summary>
        [DataMember(Name="sling.servlet.selectors", EmitDefaultValue=false)]
        public ConfigNodePropertyString SlingServletSelectors { get; set; }

        /// <summary>
        /// Gets or Sets DownloadConfig
        /// </summary>
        [DataMember(Name="download.config", EmitDefaultValue=false)]
        public ConfigNodePropertyString DownloadConfig { get; set; }

        /// <summary>
        /// Gets or Sets ViewSelector
        /// </summary>
        [DataMember(Name="view.selector", EmitDefaultValue=false)]
        public ConfigNodePropertyString ViewSelector { get; set; }

        /// <summary>
        /// Gets or Sets SendEmail
        /// </summary>
        [DataMember(Name="send_email", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SendEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreImplServletResourceCollectionServletProperties {\n");
            sb.Append("  SlingServletResourceTypes: ").Append(SlingServletResourceTypes).Append("\n");
            sb.Append("  SlingServletMethods: ").Append(SlingServletMethods).Append("\n");
            sb.Append("  SlingServletSelectors: ").Append(SlingServletSelectors).Append("\n");
            sb.Append("  DownloadConfig: ").Append(DownloadConfig).Append("\n");
            sb.Append("  ViewSelector: ").Append(ViewSelector).Append("\n");
            sb.Append("  SendEmail: ").Append(SendEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqDamCoreImplServletResourceCollectionServletProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreImplServletResourceCollectionServletProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqDamCoreImplServletResourceCollectionServletProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreImplServletResourceCollectionServletProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlingServletResourceTypes == input.SlingServletResourceTypes ||
                    (this.SlingServletResourceTypes != null &&
                    this.SlingServletResourceTypes.Equals(input.SlingServletResourceTypes))
                ) && 
                (
                    this.SlingServletMethods == input.SlingServletMethods ||
                    (this.SlingServletMethods != null &&
                    this.SlingServletMethods.Equals(input.SlingServletMethods))
                ) && 
                (
                    this.SlingServletSelectors == input.SlingServletSelectors ||
                    (this.SlingServletSelectors != null &&
                    this.SlingServletSelectors.Equals(input.SlingServletSelectors))
                ) && 
                (
                    this.DownloadConfig == input.DownloadConfig ||
                    (this.DownloadConfig != null &&
                    this.DownloadConfig.Equals(input.DownloadConfig))
                ) && 
                (
                    this.ViewSelector == input.ViewSelector ||
                    (this.ViewSelector != null &&
                    this.ViewSelector.Equals(input.ViewSelector))
                ) && 
                (
                    this.SendEmail == input.SendEmail ||
                    (this.SendEmail != null &&
                    this.SendEmail.Equals(input.SendEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlingServletResourceTypes != null)
                    hashCode = hashCode * 59 + this.SlingServletResourceTypes.GetHashCode();
                if (this.SlingServletMethods != null)
                    hashCode = hashCode * 59 + this.SlingServletMethods.GetHashCode();
                if (this.SlingServletSelectors != null)
                    hashCode = hashCode * 59 + this.SlingServletSelectors.GetHashCode();
                if (this.DownloadConfig != null)
                    hashCode = hashCode * 59 + this.DownloadConfig.GetHashCode();
                if (this.ViewSelector != null)
                    hashCode = hashCode * 59 + this.ViewSelector.GetHashCode();
                if (this.SendEmail != null)
                    hashCode = hashCode * 59 + this.SendEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
