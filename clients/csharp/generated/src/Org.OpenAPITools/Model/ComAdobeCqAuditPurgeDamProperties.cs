/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqAuditPurgeDamProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqAuditPurgeDamProperties :  IEquatable<ComAdobeCqAuditPurgeDamProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqAuditPurgeDamProperties" /> class.
        /// </summary>
        /// <param name="auditlogRuleName">auditlogRuleName.</param>
        /// <param name="auditlogRuleContentpath">auditlogRuleContentpath.</param>
        /// <param name="auditlogRuleMinimumage">auditlogRuleMinimumage.</param>
        /// <param name="auditlogRuleTypes">auditlogRuleTypes.</param>
        public ComAdobeCqAuditPurgeDamProperties(ConfigNodePropertyString auditlogRuleName = default(ConfigNodePropertyString), ConfigNodePropertyString auditlogRuleContentpath = default(ConfigNodePropertyString), ConfigNodePropertyInteger auditlogRuleMinimumage = default(ConfigNodePropertyInteger), ConfigNodePropertyDropDown auditlogRuleTypes = default(ConfigNodePropertyDropDown))
        {
            this.AuditlogRuleName = auditlogRuleName;
            this.AuditlogRuleContentpath = auditlogRuleContentpath;
            this.AuditlogRuleMinimumage = auditlogRuleMinimumage;
            this.AuditlogRuleTypes = auditlogRuleTypes;
        }
        
        /// <summary>
        /// Gets or Sets AuditlogRuleName
        /// </summary>
        [DataMember(Name="auditlog.rule.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuditlogRuleName { get; set; }

        /// <summary>
        /// Gets or Sets AuditlogRuleContentpath
        /// </summary>
        [DataMember(Name="auditlog.rule.contentpath", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuditlogRuleContentpath { get; set; }

        /// <summary>
        /// Gets or Sets AuditlogRuleMinimumage
        /// </summary>
        [DataMember(Name="auditlog.rule.minimumage", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger AuditlogRuleMinimumage { get; set; }

        /// <summary>
        /// Gets or Sets AuditlogRuleTypes
        /// </summary>
        [DataMember(Name="auditlog.rule.types", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown AuditlogRuleTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqAuditPurgeDamProperties {\n");
            sb.Append("  AuditlogRuleName: ").Append(AuditlogRuleName).Append("\n");
            sb.Append("  AuditlogRuleContentpath: ").Append(AuditlogRuleContentpath).Append("\n");
            sb.Append("  AuditlogRuleMinimumage: ").Append(AuditlogRuleMinimumage).Append("\n");
            sb.Append("  AuditlogRuleTypes: ").Append(AuditlogRuleTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqAuditPurgeDamProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqAuditPurgeDamProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqAuditPurgeDamProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqAuditPurgeDamProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuditlogRuleName == input.AuditlogRuleName ||
                    (this.AuditlogRuleName != null &&
                    this.AuditlogRuleName.Equals(input.AuditlogRuleName))
                ) && 
                (
                    this.AuditlogRuleContentpath == input.AuditlogRuleContentpath ||
                    (this.AuditlogRuleContentpath != null &&
                    this.AuditlogRuleContentpath.Equals(input.AuditlogRuleContentpath))
                ) && 
                (
                    this.AuditlogRuleMinimumage == input.AuditlogRuleMinimumage ||
                    (this.AuditlogRuleMinimumage != null &&
                    this.AuditlogRuleMinimumage.Equals(input.AuditlogRuleMinimumage))
                ) && 
                (
                    this.AuditlogRuleTypes == input.AuditlogRuleTypes ||
                    (this.AuditlogRuleTypes != null &&
                    this.AuditlogRuleTypes.Equals(input.AuditlogRuleTypes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuditlogRuleName != null)
                    hashCode = hashCode * 59 + this.AuditlogRuleName.GetHashCode();
                if (this.AuditlogRuleContentpath != null)
                    hashCode = hashCode * 59 + this.AuditlogRuleContentpath.GetHashCode();
                if (this.AuditlogRuleMinimumage != null)
                    hashCode = hashCode * 59 + this.AuditlogRuleMinimumage.GetHashCode();
                if (this.AuditlogRuleTypes != null)
                    hashCode = hashCode * 59 + this.AuditlogRuleTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
