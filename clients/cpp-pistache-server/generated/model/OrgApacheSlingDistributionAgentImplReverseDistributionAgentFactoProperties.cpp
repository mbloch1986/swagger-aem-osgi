/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties()
{
    m_NameIsSet = false;
    m_TitleIsSet = false;
    m_DetailsIsSet = false;
    m_EnabledIsSet = false;
    m_ServiceNameIsSet = false;
    m_Log_levelIsSet = false;
    m_Queue_processing_enabledIsSet = false;
    m_PackageExporter_endpointsIsSet = false;
    m_Pull_itemsIsSet = false;
    m_Http_conn_timeoutIsSet = false;
    m_RequestAuthorizationStrategy_targetIsSet = false;
    m_TransportSecretProvider_targetIsSet = false;
    m_PackageBuilder_targetIsSet = false;
    m_Triggers_targetIsSet = false;
    
}

OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::~OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties()
{
}

void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_TitleIsSet)
    {
        val["title"] = ModelBase::toJson(m_Title);
    }
    if(m_DetailsIsSet)
    {
        val["details"] = ModelBase::toJson(m_Details);
    }
    if(m_EnabledIsSet)
    {
        val["enabled"] = ModelBase::toJson(m_Enabled);
    }
    if(m_ServiceNameIsSet)
    {
        val["serviceName"] = ModelBase::toJson(m_ServiceName);
    }
    if(m_Log_levelIsSet)
    {
        val["log.level"] = ModelBase::toJson(m_Log_level);
    }
    if(m_Queue_processing_enabledIsSet)
    {
        val["queue.processing.enabled"] = ModelBase::toJson(m_Queue_processing_enabled);
    }
    if(m_PackageExporter_endpointsIsSet)
    {
        val["packageExporter.endpoints"] = ModelBase::toJson(m_PackageExporter_endpoints);
    }
    if(m_Pull_itemsIsSet)
    {
        val["pull.items"] = ModelBase::toJson(m_Pull_items);
    }
    if(m_Http_conn_timeoutIsSet)
    {
        val["http.conn.timeout"] = ModelBase::toJson(m_Http_conn_timeout);
    }
    if(m_RequestAuthorizationStrategy_targetIsSet)
    {
        val["requestAuthorizationStrategy.target"] = ModelBase::toJson(m_RequestAuthorizationStrategy_target);
    }
    if(m_TransportSecretProvider_targetIsSet)
    {
        val["transportSecretProvider.target"] = ModelBase::toJson(m_TransportSecretProvider_target);
    }
    if(m_PackageBuilder_targetIsSet)
    {
        val["packageBuilder.target"] = ModelBase::toJson(m_PackageBuilder_target);
    }
    if(m_Triggers_targetIsSet)
    {
        val["triggers.target"] = ModelBase::toJson(m_Triggers_target);
    }
    

    return val;
}

void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("title") != val.end())
    {
        if(!val["title"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["title"]);
            setTitle( newItem );
        }
        
    }
    if(val.find("details") != val.end())
    {
        if(!val["details"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["details"]);
            setDetails( newItem );
        }
        
    }
    if(val.find("enabled") != val.end())
    {
        if(!val["enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enabled"]);
            setEnabled( newItem );
        }
        
    }
    if(val.find("serviceName") != val.end())
    {
        if(!val["serviceName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["serviceName"]);
            setServiceName( newItem );
        }
        
    }
    if(val.find("log.level") != val.end())
    {
        if(!val["log.level"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["log.level"]);
            setLogLevel( newItem );
        }
        
    }
    if(val.find("queue.processing.enabled") != val.end())
    {
        if(!val["queue.processing.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["queue.processing.enabled"]);
            setQueueProcessingEnabled( newItem );
        }
        
    }
    if(val.find("packageExporter.endpoints") != val.end())
    {
        if(!val["packageExporter.endpoints"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["packageExporter.endpoints"]);
            setPackageExporterEndpoints( newItem );
        }
        
    }
    if(val.find("pull.items") != val.end())
    {
        if(!val["pull.items"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["pull.items"]);
            setPullItems( newItem );
        }
        
    }
    if(val.find("http.conn.timeout") != val.end())
    {
        if(!val["http.conn.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["http.conn.timeout"]);
            setHttpConnTimeout( newItem );
        }
        
    }
    if(val.find("requestAuthorizationStrategy.target") != val.end())
    {
        if(!val["requestAuthorizationStrategy.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["requestAuthorizationStrategy.target"]);
            setRequestAuthorizationStrategyTarget( newItem );
        }
        
    }
    if(val.find("transportSecretProvider.target") != val.end())
    {
        if(!val["transportSecretProvider.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["transportSecretProvider.target"]);
            setTransportSecretProviderTarget( newItem );
        }
        
    }
    if(val.find("packageBuilder.target") != val.end())
    {
        if(!val["packageBuilder.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["packageBuilder.target"]);
            setPackageBuilderTarget( newItem );
        }
        
    }
    if(val.find("triggers.target") != val.end())
    {
        if(!val["triggers.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["triggers.target"]);
            setTriggersTarget( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getTitle() const
{
    return m_Title;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setTitle(ConfigNodePropertyString const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::titleIsSet() const
{
    return m_TitleIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetTitle()
{
    m_TitleIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getDetails() const
{
    return m_Details;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setDetails(ConfigNodePropertyString const& value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::detailsIsSet() const
{
    return m_DetailsIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetDetails()
{
    m_DetailsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getEnabled() const
{
    return m_Enabled;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getServiceName() const
{
    return m_ServiceName;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setServiceName(ConfigNodePropertyString const& value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getLogLevel() const
{
    return m_Log_level;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setLogLevel(ConfigNodePropertyDropDown const& value)
{
    m_Log_level = value;
    m_Log_levelIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::logLevelIsSet() const
{
    return m_Log_levelIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetLog_level()
{
    m_Log_levelIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getQueueProcessingEnabled() const
{
    return m_Queue_processing_enabled;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setQueueProcessingEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Queue_processing_enabled = value;
    m_Queue_processing_enabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::queueProcessingEnabledIsSet() const
{
    return m_Queue_processing_enabledIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetQueue_processing_enabled()
{
    m_Queue_processing_enabledIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getPackageExporterEndpoints() const
{
    return m_PackageExporter_endpoints;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setPackageExporterEndpoints(ConfigNodePropertyArray const& value)
{
    m_PackageExporter_endpoints = value;
    m_PackageExporter_endpointsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::packageExporterEndpointsIsSet() const
{
    return m_PackageExporter_endpointsIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetPackageExporter_endpoints()
{
    m_PackageExporter_endpointsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getPullItems() const
{
    return m_Pull_items;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setPullItems(ConfigNodePropertyInteger const& value)
{
    m_Pull_items = value;
    m_Pull_itemsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::pullItemsIsSet() const
{
    return m_Pull_itemsIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetPull_items()
{
    m_Pull_itemsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getHttpConnTimeout() const
{
    return m_Http_conn_timeout;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setHttpConnTimeout(ConfigNodePropertyInteger const& value)
{
    m_Http_conn_timeout = value;
    m_Http_conn_timeoutIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::httpConnTimeoutIsSet() const
{
    return m_Http_conn_timeoutIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetHttp_conn_timeout()
{
    m_Http_conn_timeoutIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getRequestAuthorizationStrategyTarget() const
{
    return m_RequestAuthorizationStrategy_target;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setRequestAuthorizationStrategyTarget(ConfigNodePropertyString const& value)
{
    m_RequestAuthorizationStrategy_target = value;
    m_RequestAuthorizationStrategy_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::requestAuthorizationStrategyTargetIsSet() const
{
    return m_RequestAuthorizationStrategy_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetRequestAuthorizationStrategy_target()
{
    m_RequestAuthorizationStrategy_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getTransportSecretProviderTarget() const
{
    return m_TransportSecretProvider_target;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setTransportSecretProviderTarget(ConfigNodePropertyString const& value)
{
    m_TransportSecretProvider_target = value;
    m_TransportSecretProvider_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::transportSecretProviderTargetIsSet() const
{
    return m_TransportSecretProvider_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetTransportSecretProvider_target()
{
    m_TransportSecretProvider_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getPackageBuilderTarget() const
{
    return m_PackageBuilder_target;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setPackageBuilderTarget(ConfigNodePropertyString const& value)
{
    m_PackageBuilder_target = value;
    m_PackageBuilder_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::packageBuilderTargetIsSet() const
{
    return m_PackageBuilder_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetPackageBuilder_target()
{
    m_PackageBuilder_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getTriggersTarget() const
{
    return m_Triggers_target;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setTriggersTarget(ConfigNodePropertyString const& value)
{
    m_Triggers_target = value;
    m_Triggers_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::triggersTargetIsSet() const
{
    return m_Triggers_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::unsetTriggers_target()
{
    m_Triggers_targetIsSet = false;
}

}
}
}
}

