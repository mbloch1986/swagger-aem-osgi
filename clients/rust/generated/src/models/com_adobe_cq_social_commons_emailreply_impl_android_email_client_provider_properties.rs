/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties {
  #[serde(rename = "priorityOrder")]
  priority_order: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "replyEmailPatterns")]
  reply_email_patterns: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties {
  pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties {
    ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties {
      priority_order: None,
      reply_email_patterns: None
    }
  }

  pub fn set_priority_order(&mut self, priority_order: ::models::ConfigNodePropertyInteger) {
    self.priority_order = Some(priority_order);
  }

  pub fn with_priority_order(mut self, priority_order: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties {
    self.priority_order = Some(priority_order);
    self
  }

  pub fn priority_order(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.priority_order.as_ref()
  }

  pub fn reset_priority_order(&mut self) {
    self.priority_order = None;
  }

  pub fn set_reply_email_patterns(&mut self, reply_email_patterns: ::models::ConfigNodePropertyArray) {
    self.reply_email_patterns = Some(reply_email_patterns);
  }

  pub fn with_reply_email_patterns(mut self, reply_email_patterns: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties {
    self.reply_email_patterns = Some(reply_email_patterns);
    self
  }

  pub fn reply_email_patterns(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.reply_email_patterns.as_ref()
  }

  pub fn reset_reply_email_patterns(&mut self) {
    self.reply_email_patterns = None;
  }

}



