/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqSearchImplBuilderQueryBuilderImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqSearchImplBuilderQueryBuilderImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqSearchImplBuilderQueryBuilderImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqSearchImplBuilderQueryBuilderImplProperties
    : public ModelBase
{
public:
    ComDayCqSearchImplBuilderQueryBuilderImplProperties();
    virtual ~ComDayCqSearchImplBuilderQueryBuilderImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqSearchImplBuilderQueryBuilderImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getExcerptProperties() const;
    bool excerptPropertiesIsSet() const;
    void unsetExcerpt_properties();
    void setExcerptProperties(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheMaxEntries() const;
    bool cacheMaxEntriesIsSet() const;
    void unsetCache_max_entries();
    void setCacheMaxEntries(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheEntryLifetime() const;
    bool cacheEntryLifetimeIsSet() const;
    void unsetCache_entry_lifetime();
    void setCacheEntryLifetime(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getXpathUnion() const;
    bool xpathUnionIsSet() const;
    void unsetXpath_union();
    void setXpathUnion(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Excerpt_properties;
    bool m_Excerpt_propertiesIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cache_max_entries;
    bool m_Cache_max_entriesIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cache_entry_lifetime;
    bool m_Cache_entry_lifetimeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Xpath_union;
    bool m_Xpath_unionIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqSearchImplBuilderQueryBuilderImplProperties_H_ */
