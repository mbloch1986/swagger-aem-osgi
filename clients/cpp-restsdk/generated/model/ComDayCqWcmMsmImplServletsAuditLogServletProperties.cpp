/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmMsmImplServletsAuditLogServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmMsmImplServletsAuditLogServletProperties::ComDayCqWcmMsmImplServletsAuditLogServletProperties()
{
    m_Auditlogservlet_default_events_countIsSet = false;
    m_Auditlogservlet_default_pathIsSet = false;
}

ComDayCqWcmMsmImplServletsAuditLogServletProperties::~ComDayCqWcmMsmImplServletsAuditLogServletProperties()
{
}

void ComDayCqWcmMsmImplServletsAuditLogServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmMsmImplServletsAuditLogServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Auditlogservlet_default_events_countIsSet)
    {
        val[utility::conversions::to_string_t("auditlogservlet.default.events.count")] = ModelBase::toJson(m_Auditlogservlet_default_events_count);
    }
    if(m_Auditlogservlet_default_pathIsSet)
    {
        val[utility::conversions::to_string_t("auditlogservlet.default.path")] = ModelBase::toJson(m_Auditlogservlet_default_path);
    }

    return val;
}

void ComDayCqWcmMsmImplServletsAuditLogServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("auditlogservlet.default.events.count")))
    {
        if(!val[utility::conversions::to_string_t("auditlogservlet.default.events.count")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("auditlogservlet.default.events.count")]);
            setAuditlogservletDefaultEventsCount( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auditlogservlet.default.path")))
    {
        if(!val[utility::conversions::to_string_t("auditlogservlet.default.path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auditlogservlet.default.path")]);
            setAuditlogservletDefaultPath( newItem );
        }
    }
}

void ComDayCqWcmMsmImplServletsAuditLogServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Auditlogservlet_default_events_countIsSet)
    {
        if (m_Auditlogservlet_default_events_count.get())
        {
            m_Auditlogservlet_default_events_count->toMultipart(multipart, utility::conversions::to_string_t("auditlogservlet.default.events.count."));
        }
    }
    if(m_Auditlogservlet_default_pathIsSet)
    {
        if (m_Auditlogservlet_default_path.get())
        {
            m_Auditlogservlet_default_path->toMultipart(multipart, utility::conversions::to_string_t("auditlogservlet.default.path."));
        }
    }
}

void ComDayCqWcmMsmImplServletsAuditLogServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("auditlogservlet.default.events.count")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auditlogservlet.default.events.count")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auditlogservlet.default.events.count."));
            setAuditlogservletDefaultEventsCount( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auditlogservlet.default.path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auditlogservlet.default.path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auditlogservlet.default.path."));
            setAuditlogservletDefaultPath( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmMsmImplServletsAuditLogServletProperties::getAuditlogservletDefaultEventsCount() const
{
    return m_Auditlogservlet_default_events_count;
}


void ComDayCqWcmMsmImplServletsAuditLogServletProperties::setAuditlogservletDefaultEventsCount(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Auditlogservlet_default_events_count = value;
    m_Auditlogservlet_default_events_countIsSet = true;
}
bool ComDayCqWcmMsmImplServletsAuditLogServletProperties::auditlogservletDefaultEventsCountIsSet() const
{
    return m_Auditlogservlet_default_events_countIsSet;
}

void ComDayCqWcmMsmImplServletsAuditLogServletProperties::unsetAuditlogservlet_default_events_count()
{
    m_Auditlogservlet_default_events_countIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmMsmImplServletsAuditLogServletProperties::getAuditlogservletDefaultPath() const
{
    return m_Auditlogservlet_default_path;
}


void ComDayCqWcmMsmImplServletsAuditLogServletProperties::setAuditlogservletDefaultPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auditlogservlet_default_path = value;
    m_Auditlogservlet_default_pathIsSet = true;
}
bool ComDayCqWcmMsmImplServletsAuditLogServletProperties::auditlogservletDefaultPathIsSet() const
{
    return m_Auditlogservlet_default_pathIsSet;
}

void ComDayCqWcmMsmImplServletsAuditLogServletProperties::unsetAuditlogservlet_default_path()
{
    m_Auditlogservlet_default_pathIsSet = false;
}

}
}
}
}

