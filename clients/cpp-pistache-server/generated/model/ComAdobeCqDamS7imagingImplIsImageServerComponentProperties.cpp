/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::ComAdobeCqDamS7imagingImplIsImageServerComponentProperties()
{
    m_TcpPortIsSet = false;
    m_AllowRemoteAccessIsSet = false;
    m_MaxRenderRgnPixelsIsSet = false;
    m_MaxMessageSizeIsSet = false;
    m_RandomAccessUrlTimeoutIsSet = false;
    m_WorkerThreadsIsSet = false;
    
}

ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::~ComAdobeCqDamS7imagingImplIsImageServerComponentProperties()
{
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_TcpPortIsSet)
    {
        val["TcpPort"] = ModelBase::toJson(m_TcpPort);
    }
    if(m_AllowRemoteAccessIsSet)
    {
        val["AllowRemoteAccess"] = ModelBase::toJson(m_AllowRemoteAccess);
    }
    if(m_MaxRenderRgnPixelsIsSet)
    {
        val["MaxRenderRgnPixels"] = ModelBase::toJson(m_MaxRenderRgnPixels);
    }
    if(m_MaxMessageSizeIsSet)
    {
        val["MaxMessageSize"] = ModelBase::toJson(m_MaxMessageSize);
    }
    if(m_RandomAccessUrlTimeoutIsSet)
    {
        val["RandomAccessUrlTimeout"] = ModelBase::toJson(m_RandomAccessUrlTimeout);
    }
    if(m_WorkerThreadsIsSet)
    {
        val["WorkerThreads"] = ModelBase::toJson(m_WorkerThreads);
    }
    

    return val;
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::fromJson(nlohmann::json& val)
{
    if(val.find("TcpPort") != val.end())
    {
        if(!val["TcpPort"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["TcpPort"]);
            setTcpPort( newItem );
        }
        
    }
    if(val.find("AllowRemoteAccess") != val.end())
    {
        if(!val["AllowRemoteAccess"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["AllowRemoteAccess"]);
            setAllowRemoteAccess( newItem );
        }
        
    }
    if(val.find("MaxRenderRgnPixels") != val.end())
    {
        if(!val["MaxRenderRgnPixels"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["MaxRenderRgnPixels"]);
            setMaxRenderRgnPixels( newItem );
        }
        
    }
    if(val.find("MaxMessageSize") != val.end())
    {
        if(!val["MaxMessageSize"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["MaxMessageSize"]);
            setMaxMessageSize( newItem );
        }
        
    }
    if(val.find("RandomAccessUrlTimeout") != val.end())
    {
        if(!val["RandomAccessUrlTimeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["RandomAccessUrlTimeout"]);
            setRandomAccessUrlTimeout( newItem );
        }
        
    }
    if(val.find("WorkerThreads") != val.end())
    {
        if(!val["WorkerThreads"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["WorkerThreads"]);
            setWorkerThreads( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getTcpPort() const
{
    return m_TcpPort;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setTcpPort(ConfigNodePropertyString const& value)
{
    m_TcpPort = value;
    m_TcpPortIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::tcpPortIsSet() const
{
    return m_TcpPortIsSet;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetTcpPort()
{
    m_TcpPortIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getAllowRemoteAccess() const
{
    return m_AllowRemoteAccess;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setAllowRemoteAccess(ConfigNodePropertyBoolean const& value)
{
    m_AllowRemoteAccess = value;
    m_AllowRemoteAccessIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::allowRemoteAccessIsSet() const
{
    return m_AllowRemoteAccessIsSet;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetAllowRemoteAccess()
{
    m_AllowRemoteAccessIsSet = false;
}
ConfigNodePropertyString ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getMaxRenderRgnPixels() const
{
    return m_MaxRenderRgnPixels;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setMaxRenderRgnPixels(ConfigNodePropertyString const& value)
{
    m_MaxRenderRgnPixels = value;
    m_MaxRenderRgnPixelsIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::maxRenderRgnPixelsIsSet() const
{
    return m_MaxRenderRgnPixelsIsSet;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetMaxRenderRgnPixels()
{
    m_MaxRenderRgnPixelsIsSet = false;
}
ConfigNodePropertyString ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getMaxMessageSize() const
{
    return m_MaxMessageSize;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setMaxMessageSize(ConfigNodePropertyString const& value)
{
    m_MaxMessageSize = value;
    m_MaxMessageSizeIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::maxMessageSizeIsSet() const
{
    return m_MaxMessageSizeIsSet;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetMaxMessageSize()
{
    m_MaxMessageSizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getRandomAccessUrlTimeout() const
{
    return m_RandomAccessUrlTimeout;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setRandomAccessUrlTimeout(ConfigNodePropertyInteger const& value)
{
    m_RandomAccessUrlTimeout = value;
    m_RandomAccessUrlTimeoutIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::randomAccessUrlTimeoutIsSet() const
{
    return m_RandomAccessUrlTimeoutIsSet;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetRandomAccessUrlTimeout()
{
    m_RandomAccessUrlTimeoutIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getWorkerThreads() const
{
    return m_WorkerThreads;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setWorkerThreads(ConfigNodePropertyInteger const& value)
{
    m_WorkerThreads = value;
    m_WorkerThreadsIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::workerThreadsIsSet() const
{
    return m_WorkerThreadsIsSet;
}
void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetWorkerThreads()
{
    m_WorkerThreadsIsSet = false;
}

}
}
}
}

