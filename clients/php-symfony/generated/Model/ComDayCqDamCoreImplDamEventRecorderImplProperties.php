<?php
/**
 * ComDayCqDamCoreImplDamEventRecorderImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ComDayCqDamCoreImplDamEventRecorderImplProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class ComDayCqDamCoreImplDamEventRecorderImplProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("event.filter")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $eventFilter;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("event.queue.length")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $eventQueueLength;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("eventrecorder.enabled")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $eventrecorderEnabled;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("eventrecorder.blacklist")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $eventrecorderBlacklist;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyDropDown|null
     * @SerializedName("eventrecorder.eventtypes")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyDropDown")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyDropDown")
     */
    protected $eventrecorderEventtypes;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->eventFilter = isset($data['eventFilter']) ? $data['eventFilter'] : null;
        $this->eventQueueLength = isset($data['eventQueueLength']) ? $data['eventQueueLength'] : null;
        $this->eventrecorderEnabled = isset($data['eventrecorderEnabled']) ? $data['eventrecorderEnabled'] : null;
        $this->eventrecorderBlacklist = isset($data['eventrecorderBlacklist']) ? $data['eventrecorderBlacklist'] : null;
        $this->eventrecorderEventtypes = isset($data['eventrecorderEventtypes']) ? $data['eventrecorderEventtypes'] : null;
    }

    /**
     * Gets eventFilter.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getEventFilter()
    {
        return $this->eventFilter;
    }

    /**
     * Sets eventFilter.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $eventFilter
     *
     * @return $this
     */
    public function setEventFilter(ConfigNodePropertyString $eventFilter = null)
    {
        $this->eventFilter = $eventFilter;

        return $this;
    }

    /**
     * Gets eventQueueLength.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getEventQueueLength()
    {
        return $this->eventQueueLength;
    }

    /**
     * Sets eventQueueLength.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $eventQueueLength
     *
     * @return $this
     */
    public function setEventQueueLength(ConfigNodePropertyInteger $eventQueueLength = null)
    {
        $this->eventQueueLength = $eventQueueLength;

        return $this;
    }

    /**
     * Gets eventrecorderEnabled.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getEventrecorderEnabled()
    {
        return $this->eventrecorderEnabled;
    }

    /**
     * Sets eventrecorderEnabled.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $eventrecorderEnabled
     *
     * @return $this
     */
    public function setEventrecorderEnabled(ConfigNodePropertyBoolean $eventrecorderEnabled = null)
    {
        $this->eventrecorderEnabled = $eventrecorderEnabled;

        return $this;
    }

    /**
     * Gets eventrecorderBlacklist.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getEventrecorderBlacklist()
    {
        return $this->eventrecorderBlacklist;
    }

    /**
     * Sets eventrecorderBlacklist.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $eventrecorderBlacklist
     *
     * @return $this
     */
    public function setEventrecorderBlacklist(ConfigNodePropertyArray $eventrecorderBlacklist = null)
    {
        $this->eventrecorderBlacklist = $eventrecorderBlacklist;

        return $this;
    }

    /**
     * Gets eventrecorderEventtypes.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyDropDown|null
     */
    public function getEventrecorderEventtypes()
    {
        return $this->eventrecorderEventtypes;
    }

    /**
     * Sets eventrecorderEventtypes.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyDropDown|null $eventrecorderEventtypes
     *
     * @return $this
     */
    public function setEventrecorderEventtypes(ConfigNodePropertyDropDown $eventrecorderEventtypes = null)
    {
        $this->eventrecorderEventtypes = $eventrecorderEventtypes;

        return $this;
    }
}


