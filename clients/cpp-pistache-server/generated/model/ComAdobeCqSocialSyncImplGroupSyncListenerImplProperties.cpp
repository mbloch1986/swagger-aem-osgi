/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties()
{
    m_NodetypesIsSet = false;
    m_IgnorablepropsIsSet = false;
    m_IgnorablenodesIsSet = false;
    m_EnabledIsSet = false;
    m_DistfoldersIsSet = false;
    
}

ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::~ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties()
{
}

void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NodetypesIsSet)
    {
        val["nodetypes"] = ModelBase::toJson(m_Nodetypes);
    }
    if(m_IgnorablepropsIsSet)
    {
        val["ignorableprops"] = ModelBase::toJson(m_Ignorableprops);
    }
    if(m_IgnorablenodesIsSet)
    {
        val["ignorablenodes"] = ModelBase::toJson(m_Ignorablenodes);
    }
    if(m_EnabledIsSet)
    {
        val["enabled"] = ModelBase::toJson(m_Enabled);
    }
    if(m_DistfoldersIsSet)
    {
        val["distfolders"] = ModelBase::toJson(m_Distfolders);
    }
    

    return val;
}

void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("nodetypes") != val.end())
    {
        if(!val["nodetypes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["nodetypes"]);
            setNodetypes( newItem );
        }
        
    }
    if(val.find("ignorableprops") != val.end())
    {
        if(!val["ignorableprops"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["ignorableprops"]);
            setIgnorableprops( newItem );
        }
        
    }
    if(val.find("ignorablenodes") != val.end())
    {
        if(!val["ignorablenodes"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["ignorablenodes"]);
            setIgnorablenodes( newItem );
        }
        
    }
    if(val.find("enabled") != val.end())
    {
        if(!val["enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enabled"]);
            setEnabled( newItem );
        }
        
    }
    if(val.find("distfolders") != val.end())
    {
        if(!val["distfolders"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["distfolders"]);
            setDistfolders( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::getNodetypes() const
{
    return m_Nodetypes;
}
void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::setNodetypes(ConfigNodePropertyArray const& value)
{
    m_Nodetypes = value;
    m_NodetypesIsSet = true;
}
bool ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::nodetypesIsSet() const
{
    return m_NodetypesIsSet;
}
void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::unsetNodetypes()
{
    m_NodetypesIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::getIgnorableprops() const
{
    return m_Ignorableprops;
}
void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::setIgnorableprops(ConfigNodePropertyArray const& value)
{
    m_Ignorableprops = value;
    m_IgnorablepropsIsSet = true;
}
bool ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::ignorablepropsIsSet() const
{
    return m_IgnorablepropsIsSet;
}
void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::unsetIgnorableprops()
{
    m_IgnorablepropsIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::getIgnorablenodes() const
{
    return m_Ignorablenodes;
}
void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::setIgnorablenodes(ConfigNodePropertyString const& value)
{
    m_Ignorablenodes = value;
    m_IgnorablenodesIsSet = true;
}
bool ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::ignorablenodesIsSet() const
{
    return m_IgnorablenodesIsSet;
}
void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::unsetIgnorablenodes()
{
    m_IgnorablenodesIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::getEnabled() const
{
    return m_Enabled;
}
void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::setEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}
void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::getDistfolders() const
{
    return m_Distfolders;
}
void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::setDistfolders(ConfigNodePropertyString const& value)
{
    m_Distfolders = value;
    m_DistfoldersIsSet = true;
}
bool ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::distfoldersIsSet() const
{
    return m_DistfoldersIsSet;
}
void ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::unsetDistfolders()
{
    m_DistfoldersIsSet = false;
}

}
}
}
}

