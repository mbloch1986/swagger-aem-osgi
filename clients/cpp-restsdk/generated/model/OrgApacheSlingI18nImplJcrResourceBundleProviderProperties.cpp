/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingI18nImplJcrResourceBundleProviderProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::OrgApacheSlingI18nImplJcrResourceBundleProviderProperties()
{
    m_Locale_defaultIsSet = false;
    m_Preload_bundlesIsSet = false;
    m_Invalidation_delayIsSet = false;
}

OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::~OrgApacheSlingI18nImplJcrResourceBundleProviderProperties()
{
}

void OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Locale_defaultIsSet)
    {
        val[utility::conversions::to_string_t("locale.default")] = ModelBase::toJson(m_Locale_default);
    }
    if(m_Preload_bundlesIsSet)
    {
        val[utility::conversions::to_string_t("preload.bundles")] = ModelBase::toJson(m_Preload_bundles);
    }
    if(m_Invalidation_delayIsSet)
    {
        val[utility::conversions::to_string_t("invalidation.delay")] = ModelBase::toJson(m_Invalidation_delay);
    }

    return val;
}

void OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("locale.default")))
    {
        if(!val[utility::conversions::to_string_t("locale.default")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("locale.default")]);
            setLocaleDefault( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("preload.bundles")))
    {
        if(!val[utility::conversions::to_string_t("preload.bundles")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("preload.bundles")]);
            setPreloadBundles( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("invalidation.delay")))
    {
        if(!val[utility::conversions::to_string_t("invalidation.delay")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("invalidation.delay")]);
            setInvalidationDelay( newItem );
        }
    }
}

void OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Locale_defaultIsSet)
    {
        if (m_Locale_default.get())
        {
            m_Locale_default->toMultipart(multipart, utility::conversions::to_string_t("locale.default."));
        }
    }
    if(m_Preload_bundlesIsSet)
    {
        if (m_Preload_bundles.get())
        {
            m_Preload_bundles->toMultipart(multipart, utility::conversions::to_string_t("preload.bundles."));
        }
    }
    if(m_Invalidation_delayIsSet)
    {
        if (m_Invalidation_delay.get())
        {
            m_Invalidation_delay->toMultipart(multipart, utility::conversions::to_string_t("invalidation.delay."));
        }
    }
}

void OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("locale.default")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("locale.default")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("locale.default."));
            setLocaleDefault( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("preload.bundles")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("preload.bundles")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("preload.bundles."));
            setPreloadBundles( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("invalidation.delay")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("invalidation.delay")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("invalidation.delay."));
            setInvalidationDelay( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::getLocaleDefault() const
{
    return m_Locale_default;
}


void OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::setLocaleDefault(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Locale_default = value;
    m_Locale_defaultIsSet = true;
}
bool OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::localeDefaultIsSet() const
{
    return m_Locale_defaultIsSet;
}

void OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::unsetLocale_default()
{
    m_Locale_defaultIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::getPreloadBundles() const
{
    return m_Preload_bundles;
}


void OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::setPreloadBundles(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Preload_bundles = value;
    m_Preload_bundlesIsSet = true;
}
bool OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::preloadBundlesIsSet() const
{
    return m_Preload_bundlesIsSet;
}

void OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::unsetPreload_bundles()
{
    m_Preload_bundlesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::getInvalidationDelay() const
{
    return m_Invalidation_delay;
}


void OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::setInvalidationDelay(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Invalidation_delay = value;
    m_Invalidation_delayIsSet = true;
}
bool OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::invalidationDelayIsSet() const
{
    return m_Invalidation_delayIsSet;
}

void OrgApacheSlingI18nImplJcrResourceBundleProviderProperties::unsetInvalidation_delay()
{
    m_Invalidation_delayIsSet = false;
}

}
}
}
}

