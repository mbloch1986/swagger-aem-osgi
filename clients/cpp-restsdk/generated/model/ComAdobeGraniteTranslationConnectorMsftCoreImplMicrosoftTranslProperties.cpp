/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties()
{
    m_TranslationFactoryIsSet = false;
    m_DefaultConnectorLabelIsSet = false;
    m_DefaultConnectorAttributionIsSet = false;
    m_DefaultConnectorWorkspaceIdIsSet = false;
    m_DefaultConnectorSubscriptionKeyIsSet = false;
    m_LanguageMapLocationIsSet = false;
    m_CategoryMapLocationIsSet = false;
    m_RetryAttemptsIsSet = false;
    m_TimeoutCountIsSet = false;
}

ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::~ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties()
{
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TranslationFactoryIsSet)
    {
        val[utility::conversions::to_string_t("translationFactory")] = ModelBase::toJson(m_TranslationFactory);
    }
    if(m_DefaultConnectorLabelIsSet)
    {
        val[utility::conversions::to_string_t("defaultConnectorLabel")] = ModelBase::toJson(m_DefaultConnectorLabel);
    }
    if(m_DefaultConnectorAttributionIsSet)
    {
        val[utility::conversions::to_string_t("defaultConnectorAttribution")] = ModelBase::toJson(m_DefaultConnectorAttribution);
    }
    if(m_DefaultConnectorWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("defaultConnectorWorkspaceId")] = ModelBase::toJson(m_DefaultConnectorWorkspaceId);
    }
    if(m_DefaultConnectorSubscriptionKeyIsSet)
    {
        val[utility::conversions::to_string_t("defaultConnectorSubscriptionKey")] = ModelBase::toJson(m_DefaultConnectorSubscriptionKey);
    }
    if(m_LanguageMapLocationIsSet)
    {
        val[utility::conversions::to_string_t("languageMapLocation")] = ModelBase::toJson(m_LanguageMapLocation);
    }
    if(m_CategoryMapLocationIsSet)
    {
        val[utility::conversions::to_string_t("categoryMapLocation")] = ModelBase::toJson(m_CategoryMapLocation);
    }
    if(m_RetryAttemptsIsSet)
    {
        val[utility::conversions::to_string_t("retryAttempts")] = ModelBase::toJson(m_RetryAttempts);
    }
    if(m_TimeoutCountIsSet)
    {
        val[utility::conversions::to_string_t("timeoutCount")] = ModelBase::toJson(m_TimeoutCount);
    }

    return val;
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("translationFactory")))
    {
        if(!val[utility::conversions::to_string_t("translationFactory")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("translationFactory")]);
            setTranslationFactory( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultConnectorLabel")))
    {
        if(!val[utility::conversions::to_string_t("defaultConnectorLabel")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultConnectorLabel")]);
            setDefaultConnectorLabel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultConnectorAttribution")))
    {
        if(!val[utility::conversions::to_string_t("defaultConnectorAttribution")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultConnectorAttribution")]);
            setDefaultConnectorAttribution( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultConnectorWorkspaceId")))
    {
        if(!val[utility::conversions::to_string_t("defaultConnectorWorkspaceId")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultConnectorWorkspaceId")]);
            setDefaultConnectorWorkspaceId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultConnectorSubscriptionKey")))
    {
        if(!val[utility::conversions::to_string_t("defaultConnectorSubscriptionKey")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultConnectorSubscriptionKey")]);
            setDefaultConnectorSubscriptionKey( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("languageMapLocation")))
    {
        if(!val[utility::conversions::to_string_t("languageMapLocation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("languageMapLocation")]);
            setLanguageMapLocation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("categoryMapLocation")))
    {
        if(!val[utility::conversions::to_string_t("categoryMapLocation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("categoryMapLocation")]);
            setCategoryMapLocation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("retryAttempts")))
    {
        if(!val[utility::conversions::to_string_t("retryAttempts")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("retryAttempts")]);
            setRetryAttempts( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeoutCount")))
    {
        if(!val[utility::conversions::to_string_t("timeoutCount")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("timeoutCount")]);
            setTimeoutCount( newItem );
        }
    }
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TranslationFactoryIsSet)
    {
        if (m_TranslationFactory.get())
        {
            m_TranslationFactory->toMultipart(multipart, utility::conversions::to_string_t("translationFactory."));
        }
    }
    if(m_DefaultConnectorLabelIsSet)
    {
        if (m_DefaultConnectorLabel.get())
        {
            m_DefaultConnectorLabel->toMultipart(multipart, utility::conversions::to_string_t("defaultConnectorLabel."));
        }
    }
    if(m_DefaultConnectorAttributionIsSet)
    {
        if (m_DefaultConnectorAttribution.get())
        {
            m_DefaultConnectorAttribution->toMultipart(multipart, utility::conversions::to_string_t("defaultConnectorAttribution."));
        }
    }
    if(m_DefaultConnectorWorkspaceIdIsSet)
    {
        if (m_DefaultConnectorWorkspaceId.get())
        {
            m_DefaultConnectorWorkspaceId->toMultipart(multipart, utility::conversions::to_string_t("defaultConnectorWorkspaceId."));
        }
    }
    if(m_DefaultConnectorSubscriptionKeyIsSet)
    {
        if (m_DefaultConnectorSubscriptionKey.get())
        {
            m_DefaultConnectorSubscriptionKey->toMultipart(multipart, utility::conversions::to_string_t("defaultConnectorSubscriptionKey."));
        }
    }
    if(m_LanguageMapLocationIsSet)
    {
        if (m_LanguageMapLocation.get())
        {
            m_LanguageMapLocation->toMultipart(multipart, utility::conversions::to_string_t("languageMapLocation."));
        }
    }
    if(m_CategoryMapLocationIsSet)
    {
        if (m_CategoryMapLocation.get())
        {
            m_CategoryMapLocation->toMultipart(multipart, utility::conversions::to_string_t("categoryMapLocation."));
        }
    }
    if(m_RetryAttemptsIsSet)
    {
        if (m_RetryAttempts.get())
        {
            m_RetryAttempts->toMultipart(multipart, utility::conversions::to_string_t("retryAttempts."));
        }
    }
    if(m_TimeoutCountIsSet)
    {
        if (m_TimeoutCount.get())
        {
            m_TimeoutCount->toMultipart(multipart, utility::conversions::to_string_t("timeoutCount."));
        }
    }
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("translationFactory")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translationFactory")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translationFactory."));
            setTranslationFactory( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultConnectorLabel")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultConnectorLabel")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultConnectorLabel."));
            setDefaultConnectorLabel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultConnectorAttribution")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultConnectorAttribution")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultConnectorAttribution."));
            setDefaultConnectorAttribution( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultConnectorWorkspaceId")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultConnectorWorkspaceId")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultConnectorWorkspaceId."));
            setDefaultConnectorWorkspaceId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultConnectorSubscriptionKey")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultConnectorSubscriptionKey")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultConnectorSubscriptionKey."));
            setDefaultConnectorSubscriptionKey( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("languageMapLocation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("languageMapLocation")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("languageMapLocation."));
            setLanguageMapLocation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("categoryMapLocation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("categoryMapLocation")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("categoryMapLocation."));
            setCategoryMapLocation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("retryAttempts")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("retryAttempts")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("retryAttempts."));
            setRetryAttempts( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timeoutCount")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("timeoutCount")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("timeoutCount."));
            setTimeoutCount( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getTranslationFactory() const
{
    return m_TranslationFactory;
}


void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setTranslationFactory(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_TranslationFactory = value;
    m_TranslationFactoryIsSet = true;
}
bool ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::translationFactoryIsSet() const
{
    return m_TranslationFactoryIsSet;
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::unsetTranslationFactory()
{
    m_TranslationFactoryIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getDefaultConnectorLabel() const
{
    return m_DefaultConnectorLabel;
}


void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setDefaultConnectorLabel(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DefaultConnectorLabel = value;
    m_DefaultConnectorLabelIsSet = true;
}
bool ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::defaultConnectorLabelIsSet() const
{
    return m_DefaultConnectorLabelIsSet;
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::unsetDefaultConnectorLabel()
{
    m_DefaultConnectorLabelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getDefaultConnectorAttribution() const
{
    return m_DefaultConnectorAttribution;
}


void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setDefaultConnectorAttribution(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DefaultConnectorAttribution = value;
    m_DefaultConnectorAttributionIsSet = true;
}
bool ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::defaultConnectorAttributionIsSet() const
{
    return m_DefaultConnectorAttributionIsSet;
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::unsetDefaultConnectorAttribution()
{
    m_DefaultConnectorAttributionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getDefaultConnectorWorkspaceId() const
{
    return m_DefaultConnectorWorkspaceId;
}


void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setDefaultConnectorWorkspaceId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DefaultConnectorWorkspaceId = value;
    m_DefaultConnectorWorkspaceIdIsSet = true;
}
bool ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::defaultConnectorWorkspaceIdIsSet() const
{
    return m_DefaultConnectorWorkspaceIdIsSet;
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::unsetDefaultConnectorWorkspaceId()
{
    m_DefaultConnectorWorkspaceIdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getDefaultConnectorSubscriptionKey() const
{
    return m_DefaultConnectorSubscriptionKey;
}


void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setDefaultConnectorSubscriptionKey(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DefaultConnectorSubscriptionKey = value;
    m_DefaultConnectorSubscriptionKeyIsSet = true;
}
bool ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::defaultConnectorSubscriptionKeyIsSet() const
{
    return m_DefaultConnectorSubscriptionKeyIsSet;
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::unsetDefaultConnectorSubscriptionKey()
{
    m_DefaultConnectorSubscriptionKeyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getLanguageMapLocation() const
{
    return m_LanguageMapLocation;
}


void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setLanguageMapLocation(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_LanguageMapLocation = value;
    m_LanguageMapLocationIsSet = true;
}
bool ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::languageMapLocationIsSet() const
{
    return m_LanguageMapLocationIsSet;
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::unsetLanguageMapLocation()
{
    m_LanguageMapLocationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getCategoryMapLocation() const
{
    return m_CategoryMapLocation;
}


void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setCategoryMapLocation(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_CategoryMapLocation = value;
    m_CategoryMapLocationIsSet = true;
}
bool ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::categoryMapLocationIsSet() const
{
    return m_CategoryMapLocationIsSet;
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::unsetCategoryMapLocation()
{
    m_CategoryMapLocationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getRetryAttempts() const
{
    return m_RetryAttempts;
}


void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setRetryAttempts(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_RetryAttempts = value;
    m_RetryAttemptsIsSet = true;
}
bool ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::retryAttemptsIsSet() const
{
    return m_RetryAttemptsIsSet;
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::unsetRetryAttempts()
{
    m_RetryAttemptsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getTimeoutCount() const
{
    return m_TimeoutCount;
}


void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setTimeoutCount(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_TimeoutCount = value;
    m_TimeoutCountIsSet = true;
}
bool ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::timeoutCountIsSet() const
{
    return m_TimeoutCountIsSet;
}

void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::unsetTimeoutCount()
{
    m_TimeoutCountIsSet = false;
}

}
}
}
}

