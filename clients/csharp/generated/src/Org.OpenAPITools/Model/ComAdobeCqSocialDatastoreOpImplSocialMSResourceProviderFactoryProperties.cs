/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties :  IEquatable<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties" /> class.
        /// </summary>
        /// <param name="solrZkTimeout">solrZkTimeout.</param>
        /// <param name="solrCommit">solrCommit.</param>
        /// <param name="cacheOn">cacheOn.</param>
        /// <param name="concurrencyLevel">concurrencyLevel.</param>
        /// <param name="cacheStartSize">cacheStartSize.</param>
        /// <param name="cacheTtl">cacheTtl.</param>
        /// <param name="cacheSize">cacheSize.</param>
        public ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties(ConfigNodePropertyString solrZkTimeout = default(ConfigNodePropertyString), ConfigNodePropertyString solrCommit = default(ConfigNodePropertyString), ConfigNodePropertyBoolean cacheOn = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger concurrencyLevel = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cacheStartSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cacheTtl = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cacheSize = default(ConfigNodePropertyInteger))
        {
            this.SolrZkTimeout = solrZkTimeout;
            this.SolrCommit = solrCommit;
            this.CacheOn = cacheOn;
            this.ConcurrencyLevel = concurrencyLevel;
            this.CacheStartSize = cacheStartSize;
            this.CacheTtl = cacheTtl;
            this.CacheSize = cacheSize;
        }
        
        /// <summary>
        /// Gets or Sets SolrZkTimeout
        /// </summary>
        [DataMember(Name="solr.zk.timeout", EmitDefaultValue=false)]
        public ConfigNodePropertyString SolrZkTimeout { get; set; }

        /// <summary>
        /// Gets or Sets SolrCommit
        /// </summary>
        [DataMember(Name="solr.commit", EmitDefaultValue=false)]
        public ConfigNodePropertyString SolrCommit { get; set; }

        /// <summary>
        /// Gets or Sets CacheOn
        /// </summary>
        [DataMember(Name="cache.on", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean CacheOn { get; set; }

        /// <summary>
        /// Gets or Sets ConcurrencyLevel
        /// </summary>
        [DataMember(Name="concurrency.level", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ConcurrencyLevel { get; set; }

        /// <summary>
        /// Gets or Sets CacheStartSize
        /// </summary>
        [DataMember(Name="cache.start.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CacheStartSize { get; set; }

        /// <summary>
        /// Gets or Sets CacheTtl
        /// </summary>
        [DataMember(Name="cache.ttl", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CacheTtl { get; set; }

        /// <summary>
        /// Gets or Sets CacheSize
        /// </summary>
        [DataMember(Name="cache.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CacheSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties {\n");
            sb.Append("  SolrZkTimeout: ").Append(SolrZkTimeout).Append("\n");
            sb.Append("  SolrCommit: ").Append(SolrCommit).Append("\n");
            sb.Append("  CacheOn: ").Append(CacheOn).Append("\n");
            sb.Append("  ConcurrencyLevel: ").Append(ConcurrencyLevel).Append("\n");
            sb.Append("  CacheStartSize: ").Append(CacheStartSize).Append("\n");
            sb.Append("  CacheTtl: ").Append(CacheTtl).Append("\n");
            sb.Append("  CacheSize: ").Append(CacheSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SolrZkTimeout == input.SolrZkTimeout ||
                    (this.SolrZkTimeout != null &&
                    this.SolrZkTimeout.Equals(input.SolrZkTimeout))
                ) && 
                (
                    this.SolrCommit == input.SolrCommit ||
                    (this.SolrCommit != null &&
                    this.SolrCommit.Equals(input.SolrCommit))
                ) && 
                (
                    this.CacheOn == input.CacheOn ||
                    (this.CacheOn != null &&
                    this.CacheOn.Equals(input.CacheOn))
                ) && 
                (
                    this.ConcurrencyLevel == input.ConcurrencyLevel ||
                    (this.ConcurrencyLevel != null &&
                    this.ConcurrencyLevel.Equals(input.ConcurrencyLevel))
                ) && 
                (
                    this.CacheStartSize == input.CacheStartSize ||
                    (this.CacheStartSize != null &&
                    this.CacheStartSize.Equals(input.CacheStartSize))
                ) && 
                (
                    this.CacheTtl == input.CacheTtl ||
                    (this.CacheTtl != null &&
                    this.CacheTtl.Equals(input.CacheTtl))
                ) && 
                (
                    this.CacheSize == input.CacheSize ||
                    (this.CacheSize != null &&
                    this.CacheSize.Equals(input.CacheSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SolrZkTimeout != null)
                    hashCode = hashCode * 59 + this.SolrZkTimeout.GetHashCode();
                if (this.SolrCommit != null)
                    hashCode = hashCode * 59 + this.SolrCommit.GetHashCode();
                if (this.CacheOn != null)
                    hashCode = hashCode * 59 + this.CacheOn.GetHashCode();
                if (this.ConcurrencyLevel != null)
                    hashCode = hashCode * 59 + this.ConcurrencyLevel.GetHashCode();
                if (this.CacheStartSize != null)
                    hashCode = hashCode * 59 + this.CacheStartSize.GetHashCode();
                if (this.CacheTtl != null)
                    hashCode = hashCode * 59 + this.CacheTtl.GetHashCode();
                if (this.CacheSize != null)
                    hashCode = hashCode * 59 + this.CacheSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
