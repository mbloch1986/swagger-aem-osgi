/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties() {
    init();
}

OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::~OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::init() {
    disabled = new OAIConfigNodePropertyBoolean();
    m_disabled_isSet = false;
    debug = new OAIConfigNodePropertyBoolean();
    m_debug_isSet = false;
    local_index_dir = new OAIConfigNodePropertyString();
    m_local_index_dir_isSet = false;
    enable_open_index_async = new OAIConfigNodePropertyBoolean();
    m_enable_open_index_async_isSet = false;
    thread_pool_size = new OAIConfigNodePropertyInteger();
    m_thread_pool_size_isSet = false;
    prefetch_index_files = new OAIConfigNodePropertyBoolean();
    m_prefetch_index_files_isSet = false;
    extracted_text_cache_size_in_mb = new OAIConfigNodePropertyInteger();
    m_extracted_text_cache_size_in_mb_isSet = false;
    extracted_text_cache_expiry_in_secs = new OAIConfigNodePropertyInteger();
    m_extracted_text_cache_expiry_in_secs_isSet = false;
    always_use_pre_extracted_cache = new OAIConfigNodePropertyBoolean();
    m_always_use_pre_extracted_cache_isSet = false;
    boolean_clause_limit = new OAIConfigNodePropertyInteger();
    m_boolean_clause_limit_isSet = false;
    enable_hybrid_indexing = new OAIConfigNodePropertyBoolean();
    m_enable_hybrid_indexing_isSet = false;
    hybrid_queue_size = new OAIConfigNodePropertyInteger();
    m_hybrid_queue_size_isSet = false;
    disable_stored_index_definition = new OAIConfigNodePropertyBoolean();
    m_disable_stored_index_definition_isSet = false;
    deleted_blobs_collection_enabled = new OAIConfigNodePropertyBoolean();
    m_deleted_blobs_collection_enabled_isSet = false;
    prop_index_cleaner_interval_in_secs = new OAIConfigNodePropertyInteger();
    m_prop_index_cleaner_interval_in_secs_isSet = false;
    enable_single_blob_index_files = new OAIConfigNodePropertyBoolean();
    m_enable_single_blob_index_files_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::cleanup() {
    if(disabled != nullptr) { 
        delete disabled;
    }
    if(debug != nullptr) { 
        delete debug;
    }
    if(local_index_dir != nullptr) { 
        delete local_index_dir;
    }
    if(enable_open_index_async != nullptr) { 
        delete enable_open_index_async;
    }
    if(thread_pool_size != nullptr) { 
        delete thread_pool_size;
    }
    if(prefetch_index_files != nullptr) { 
        delete prefetch_index_files;
    }
    if(extracted_text_cache_size_in_mb != nullptr) { 
        delete extracted_text_cache_size_in_mb;
    }
    if(extracted_text_cache_expiry_in_secs != nullptr) { 
        delete extracted_text_cache_expiry_in_secs;
    }
    if(always_use_pre_extracted_cache != nullptr) { 
        delete always_use_pre_extracted_cache;
    }
    if(boolean_clause_limit != nullptr) { 
        delete boolean_clause_limit;
    }
    if(enable_hybrid_indexing != nullptr) { 
        delete enable_hybrid_indexing;
    }
    if(hybrid_queue_size != nullptr) { 
        delete hybrid_queue_size;
    }
    if(disable_stored_index_definition != nullptr) { 
        delete disable_stored_index_definition;
    }
    if(deleted_blobs_collection_enabled != nullptr) { 
        delete deleted_blobs_collection_enabled;
    }
    if(prop_index_cleaner_interval_in_secs != nullptr) { 
        delete prop_index_cleaner_interval_in_secs;
    }
    if(enable_single_blob_index_files != nullptr) { 
        delete enable_single_blob_index_files;
    }
}

OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&disabled, pJson["disabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&debug, pJson["debug"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&local_index_dir, pJson["localIndexDir"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&enable_open_index_async, pJson["enableOpenIndexAsync"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&thread_pool_size, pJson["threadPoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&prefetch_index_files, pJson["prefetchIndexFiles"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&extracted_text_cache_size_in_mb, pJson["extractedTextCacheSizeInMB"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&extracted_text_cache_expiry_in_secs, pJson["extractedTextCacheExpiryInSecs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&always_use_pre_extracted_cache, pJson["alwaysUsePreExtractedCache"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&boolean_clause_limit, pJson["booleanClauseLimit"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&enable_hybrid_indexing, pJson["enableHybridIndexing"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&hybrid_queue_size, pJson["hybridQueueSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&disable_stored_index_definition, pJson["disableStoredIndexDefinition"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&deleted_blobs_collection_enabled, pJson["deletedBlobsCollectionEnabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&prop_index_cleaner_interval_in_secs, pJson["propIndexCleanerIntervalInSecs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&enable_single_blob_index_files, pJson["enableSingleBlobIndexFiles"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::asJsonObject() {
    QJsonObject obj;
    if((disabled != nullptr) && (disabled->isSet())){
        toJsonValue(QString("disabled"), disabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((debug != nullptr) && (debug->isSet())){
        toJsonValue(QString("debug"), debug, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((local_index_dir != nullptr) && (local_index_dir->isSet())){
        toJsonValue(QString("localIndexDir"), local_index_dir, obj, QString("OAIConfigNodePropertyString"));
    }
    if((enable_open_index_async != nullptr) && (enable_open_index_async->isSet())){
        toJsonValue(QString("enableOpenIndexAsync"), enable_open_index_async, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((thread_pool_size != nullptr) && (thread_pool_size->isSet())){
        toJsonValue(QString("threadPoolSize"), thread_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((prefetch_index_files != nullptr) && (prefetch_index_files->isSet())){
        toJsonValue(QString("prefetchIndexFiles"), prefetch_index_files, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((extracted_text_cache_size_in_mb != nullptr) && (extracted_text_cache_size_in_mb->isSet())){
        toJsonValue(QString("extractedTextCacheSizeInMB"), extracted_text_cache_size_in_mb, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((extracted_text_cache_expiry_in_secs != nullptr) && (extracted_text_cache_expiry_in_secs->isSet())){
        toJsonValue(QString("extractedTextCacheExpiryInSecs"), extracted_text_cache_expiry_in_secs, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((always_use_pre_extracted_cache != nullptr) && (always_use_pre_extracted_cache->isSet())){
        toJsonValue(QString("alwaysUsePreExtractedCache"), always_use_pre_extracted_cache, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((boolean_clause_limit != nullptr) && (boolean_clause_limit->isSet())){
        toJsonValue(QString("booleanClauseLimit"), boolean_clause_limit, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((enable_hybrid_indexing != nullptr) && (enable_hybrid_indexing->isSet())){
        toJsonValue(QString("enableHybridIndexing"), enable_hybrid_indexing, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((hybrid_queue_size != nullptr) && (hybrid_queue_size->isSet())){
        toJsonValue(QString("hybridQueueSize"), hybrid_queue_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((disable_stored_index_definition != nullptr) && (disable_stored_index_definition->isSet())){
        toJsonValue(QString("disableStoredIndexDefinition"), disable_stored_index_definition, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((deleted_blobs_collection_enabled != nullptr) && (deleted_blobs_collection_enabled->isSet())){
        toJsonValue(QString("deletedBlobsCollectionEnabled"), deleted_blobs_collection_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((prop_index_cleaner_interval_in_secs != nullptr) && (prop_index_cleaner_interval_in_secs->isSet())){
        toJsonValue(QString("propIndexCleanerIntervalInSecs"), prop_index_cleaner_interval_in_secs, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((enable_single_blob_index_files != nullptr) && (enable_single_blob_index_files->isSet())){
        toJsonValue(QString("enableSingleBlobIndexFiles"), enable_single_blob_index_files, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDisabled() {
    return disabled;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDisabled(OAIConfigNodePropertyBoolean* disabled) {
    this->disabled = disabled;
    this->m_disabled_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDebug() {
    return debug;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDebug(OAIConfigNodePropertyBoolean* debug) {
    this->debug = debug;
    this->m_debug_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getLocalIndexDir() {
    return local_index_dir;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setLocalIndexDir(OAIConfigNodePropertyString* local_index_dir) {
    this->local_index_dir = local_index_dir;
    this->m_local_index_dir_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableOpenIndexAsync() {
    return enable_open_index_async;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableOpenIndexAsync(OAIConfigNodePropertyBoolean* enable_open_index_async) {
    this->enable_open_index_async = enable_open_index_async;
    this->m_enable_open_index_async_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getThreadPoolSize() {
    return thread_pool_size;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setThreadPoolSize(OAIConfigNodePropertyInteger* thread_pool_size) {
    this->thread_pool_size = thread_pool_size;
    this->m_thread_pool_size_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getPrefetchIndexFiles() {
    return prefetch_index_files;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setPrefetchIndexFiles(OAIConfigNodePropertyBoolean* prefetch_index_files) {
    this->prefetch_index_files = prefetch_index_files;
    this->m_prefetch_index_files_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getExtractedTextCacheSizeInMb() {
    return extracted_text_cache_size_in_mb;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setExtractedTextCacheSizeInMb(OAIConfigNodePropertyInteger* extracted_text_cache_size_in_mb) {
    this->extracted_text_cache_size_in_mb = extracted_text_cache_size_in_mb;
    this->m_extracted_text_cache_size_in_mb_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getExtractedTextCacheExpiryInSecs() {
    return extracted_text_cache_expiry_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setExtractedTextCacheExpiryInSecs(OAIConfigNodePropertyInteger* extracted_text_cache_expiry_in_secs) {
    this->extracted_text_cache_expiry_in_secs = extracted_text_cache_expiry_in_secs;
    this->m_extracted_text_cache_expiry_in_secs_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getAlwaysUsePreExtractedCache() {
    return always_use_pre_extracted_cache;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setAlwaysUsePreExtractedCache(OAIConfigNodePropertyBoolean* always_use_pre_extracted_cache) {
    this->always_use_pre_extracted_cache = always_use_pre_extracted_cache;
    this->m_always_use_pre_extracted_cache_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getBooleanClauseLimit() {
    return boolean_clause_limit;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setBooleanClauseLimit(OAIConfigNodePropertyInteger* boolean_clause_limit) {
    this->boolean_clause_limit = boolean_clause_limit;
    this->m_boolean_clause_limit_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableHybridIndexing() {
    return enable_hybrid_indexing;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableHybridIndexing(OAIConfigNodePropertyBoolean* enable_hybrid_indexing) {
    this->enable_hybrid_indexing = enable_hybrid_indexing;
    this->m_enable_hybrid_indexing_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getHybridQueueSize() {
    return hybrid_queue_size;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setHybridQueueSize(OAIConfigNodePropertyInteger* hybrid_queue_size) {
    this->hybrid_queue_size = hybrid_queue_size;
    this->m_hybrid_queue_size_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDisableStoredIndexDefinition() {
    return disable_stored_index_definition;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDisableStoredIndexDefinition(OAIConfigNodePropertyBoolean* disable_stored_index_definition) {
    this->disable_stored_index_definition = disable_stored_index_definition;
    this->m_disable_stored_index_definition_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDeletedBlobsCollectionEnabled() {
    return deleted_blobs_collection_enabled;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDeletedBlobsCollectionEnabled(OAIConfigNodePropertyBoolean* deleted_blobs_collection_enabled) {
    this->deleted_blobs_collection_enabled = deleted_blobs_collection_enabled;
    this->m_deleted_blobs_collection_enabled_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getPropIndexCleanerIntervalInSecs() {
    return prop_index_cleaner_interval_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setPropIndexCleanerIntervalInSecs(OAIConfigNodePropertyInteger* prop_index_cleaner_interval_in_secs) {
    this->prop_index_cleaner_interval_in_secs = prop_index_cleaner_interval_in_secs;
    this->m_prop_index_cleaner_interval_in_secs_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableSingleBlobIndexFiles() {
    return enable_single_blob_index_files;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableSingleBlobIndexFiles(OAIConfigNodePropertyBoolean* enable_single_blob_index_files) {
    this->enable_single_blob_index_files = enable_single_blob_index_files;
    this->m_enable_single_blob_index_files_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(disabled != nullptr && disabled->isSet()){ isObjectUpdated = true; break;}
        if(debug != nullptr && debug->isSet()){ isObjectUpdated = true; break;}
        if(local_index_dir != nullptr && local_index_dir->isSet()){ isObjectUpdated = true; break;}
        if(enable_open_index_async != nullptr && enable_open_index_async->isSet()){ isObjectUpdated = true; break;}
        if(thread_pool_size != nullptr && thread_pool_size->isSet()){ isObjectUpdated = true; break;}
        if(prefetch_index_files != nullptr && prefetch_index_files->isSet()){ isObjectUpdated = true; break;}
        if(extracted_text_cache_size_in_mb != nullptr && extracted_text_cache_size_in_mb->isSet()){ isObjectUpdated = true; break;}
        if(extracted_text_cache_expiry_in_secs != nullptr && extracted_text_cache_expiry_in_secs->isSet()){ isObjectUpdated = true; break;}
        if(always_use_pre_extracted_cache != nullptr && always_use_pre_extracted_cache->isSet()){ isObjectUpdated = true; break;}
        if(boolean_clause_limit != nullptr && boolean_clause_limit->isSet()){ isObjectUpdated = true; break;}
        if(enable_hybrid_indexing != nullptr && enable_hybrid_indexing->isSet()){ isObjectUpdated = true; break;}
        if(hybrid_queue_size != nullptr && hybrid_queue_size->isSet()){ isObjectUpdated = true; break;}
        if(disable_stored_index_definition != nullptr && disable_stored_index_definition->isSet()){ isObjectUpdated = true; break;}
        if(deleted_blobs_collection_enabled != nullptr && deleted_blobs_collection_enabled->isSet()){ isObjectUpdated = true; break;}
        if(prop_index_cleaner_interval_in_secs != nullptr && prop_index_cleaner_interval_in_secs->isSet()){ isObjectUpdated = true; break;}
        if(enable_single_blob_index_files != nullptr && enable_single_blob_index_files->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

