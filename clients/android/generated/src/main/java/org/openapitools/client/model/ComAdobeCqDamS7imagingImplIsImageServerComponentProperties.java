/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
  
  @SerializedName("TcpPort")
  private ConfigNodePropertyString tcpPort = null;
  @SerializedName("AllowRemoteAccess")
  private ConfigNodePropertyBoolean allowRemoteAccess = null;
  @SerializedName("MaxRenderRgnPixels")
  private ConfigNodePropertyString maxRenderRgnPixels = null;
  @SerializedName("MaxMessageSize")
  private ConfigNodePropertyString maxMessageSize = null;
  @SerializedName("RandomAccessUrlTimeout")
  private ConfigNodePropertyInteger randomAccessUrlTimeout = null;
  @SerializedName("WorkerThreads")
  private ConfigNodePropertyInteger workerThreads = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getTcpPort() {
    return tcpPort;
  }
  public void setTcpPort(ConfigNodePropertyString tcpPort) {
    this.tcpPort = tcpPort;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getAllowRemoteAccess() {
    return allowRemoteAccess;
  }
  public void setAllowRemoteAccess(ConfigNodePropertyBoolean allowRemoteAccess) {
    this.allowRemoteAccess = allowRemoteAccess;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getMaxRenderRgnPixels() {
    return maxRenderRgnPixels;
  }
  public void setMaxRenderRgnPixels(ConfigNodePropertyString maxRenderRgnPixels) {
    this.maxRenderRgnPixels = maxRenderRgnPixels;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getMaxMessageSize() {
    return maxMessageSize;
  }
  public void setMaxMessageSize(ConfigNodePropertyString maxMessageSize) {
    this.maxMessageSize = maxMessageSize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getRandomAccessUrlTimeout() {
    return randomAccessUrlTimeout;
  }
  public void setRandomAccessUrlTimeout(ConfigNodePropertyInteger randomAccessUrlTimeout) {
    this.randomAccessUrlTimeout = randomAccessUrlTimeout;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getWorkerThreads() {
    return workerThreads;
  }
  public void setWorkerThreads(ConfigNodePropertyInteger workerThreads) {
    this.workerThreads = workerThreads;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComAdobeCqDamS7imagingImplIsImageServerComponentProperties comAdobeCqDamS7imagingImplIsImageServerComponentProperties = (ComAdobeCqDamS7imagingImplIsImageServerComponentProperties) o;
    return (this.tcpPort == null ? comAdobeCqDamS7imagingImplIsImageServerComponentProperties.tcpPort == null : this.tcpPort.equals(comAdobeCqDamS7imagingImplIsImageServerComponentProperties.tcpPort)) &&
        (this.allowRemoteAccess == null ? comAdobeCqDamS7imagingImplIsImageServerComponentProperties.allowRemoteAccess == null : this.allowRemoteAccess.equals(comAdobeCqDamS7imagingImplIsImageServerComponentProperties.allowRemoteAccess)) &&
        (this.maxRenderRgnPixels == null ? comAdobeCqDamS7imagingImplIsImageServerComponentProperties.maxRenderRgnPixels == null : this.maxRenderRgnPixels.equals(comAdobeCqDamS7imagingImplIsImageServerComponentProperties.maxRenderRgnPixels)) &&
        (this.maxMessageSize == null ? comAdobeCqDamS7imagingImplIsImageServerComponentProperties.maxMessageSize == null : this.maxMessageSize.equals(comAdobeCqDamS7imagingImplIsImageServerComponentProperties.maxMessageSize)) &&
        (this.randomAccessUrlTimeout == null ? comAdobeCqDamS7imagingImplIsImageServerComponentProperties.randomAccessUrlTimeout == null : this.randomAccessUrlTimeout.equals(comAdobeCqDamS7imagingImplIsImageServerComponentProperties.randomAccessUrlTimeout)) &&
        (this.workerThreads == null ? comAdobeCqDamS7imagingImplIsImageServerComponentProperties.workerThreads == null : this.workerThreads.equals(comAdobeCqDamS7imagingImplIsImageServerComponentProperties.workerThreads));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.tcpPort == null ? 0: this.tcpPort.hashCode());
    result = 31 * result + (this.allowRemoteAccess == null ? 0: this.allowRemoteAccess.hashCode());
    result = 31 * result + (this.maxRenderRgnPixels == null ? 0: this.maxRenderRgnPixels.hashCode());
    result = 31 * result + (this.maxMessageSize == null ? 0: this.maxMessageSize.hashCode());
    result = 31 * result + (this.randomAccessUrlTimeout == null ? 0: this.randomAccessUrlTimeout.hashCode());
    result = 31 * result + (this.workerThreads == null ? 0: this.workerThreads.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {\n");
    
    sb.append("  tcpPort: ").append(tcpPort).append("\n");
    sb.append("  allowRemoteAccess: ").append(allowRemoteAccess).append("\n");
    sb.append("  maxRenderRgnPixels: ").append(maxRenderRgnPixels).append("\n");
    sb.append("  maxMessageSize: ").append(maxMessageSize).append("\n");
    sb.append("  randomAccessUrlTimeout: ").append(randomAccessUrlTimeout).append("\n");
    sb.append("  workerThreads: ").append(workerThreads).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
