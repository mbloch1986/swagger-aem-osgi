/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqWcmFoundationImplHTTPAuthHandlerProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmFoundationImplHTTPAuthHandlerProperties :  IEquatable<ComDayCqWcmFoundationImplHTTPAuthHandlerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqWcmFoundationImplHTTPAuthHandlerProperties" /> class.
        /// </summary>
        /// <param name="path">path.</param>
        /// <param name="authHttpNologin">authHttpNologin.</param>
        /// <param name="authHttpRealm">authHttpRealm.</param>
        /// <param name="authDefaultLoginpage">authDefaultLoginpage.</param>
        /// <param name="authCredForm">authCredForm.</param>
        /// <param name="authCredUtf8">authCredUtf8.</param>
        public ComDayCqWcmFoundationImplHTTPAuthHandlerProperties(ConfigNodePropertyString path = default(ConfigNodePropertyString), ConfigNodePropertyBoolean authHttpNologin = default(ConfigNodePropertyBoolean), ConfigNodePropertyString authHttpRealm = default(ConfigNodePropertyString), ConfigNodePropertyString authDefaultLoginpage = default(ConfigNodePropertyString), ConfigNodePropertyArray authCredForm = default(ConfigNodePropertyArray), ConfigNodePropertyArray authCredUtf8 = default(ConfigNodePropertyArray))
        {
            this.Path = path;
            this.AuthHttpNologin = authHttpNologin;
            this.AuthHttpRealm = authHttpRealm;
            this.AuthDefaultLoginpage = authDefaultLoginpage;
            this.AuthCredForm = authCredForm;
            this.AuthCredUtf8 = authCredUtf8;
        }
        
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public ConfigNodePropertyString Path { get; set; }

        /// <summary>
        /// Gets or Sets AuthHttpNologin
        /// </summary>
        [DataMember(Name="auth.http.nologin", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean AuthHttpNologin { get; set; }

        /// <summary>
        /// Gets or Sets AuthHttpRealm
        /// </summary>
        [DataMember(Name="auth.http.realm", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuthHttpRealm { get; set; }

        /// <summary>
        /// Gets or Sets AuthDefaultLoginpage
        /// </summary>
        [DataMember(Name="auth.default.loginpage", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuthDefaultLoginpage { get; set; }

        /// <summary>
        /// Gets or Sets AuthCredForm
        /// </summary>
        [DataMember(Name="auth.cred.form", EmitDefaultValue=false)]
        public ConfigNodePropertyArray AuthCredForm { get; set; }

        /// <summary>
        /// Gets or Sets AuthCredUtf8
        /// </summary>
        [DataMember(Name="auth.cred.utf8", EmitDefaultValue=false)]
        public ConfigNodePropertyArray AuthCredUtf8 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmFoundationImplHTTPAuthHandlerProperties {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  AuthHttpNologin: ").Append(AuthHttpNologin).Append("\n");
            sb.Append("  AuthHttpRealm: ").Append(AuthHttpRealm).Append("\n");
            sb.Append("  AuthDefaultLoginpage: ").Append(AuthDefaultLoginpage).Append("\n");
            sb.Append("  AuthCredForm: ").Append(AuthCredForm).Append("\n");
            sb.Append("  AuthCredUtf8: ").Append(AuthCredUtf8).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqWcmFoundationImplHTTPAuthHandlerProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmFoundationImplHTTPAuthHandlerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqWcmFoundationImplHTTPAuthHandlerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmFoundationImplHTTPAuthHandlerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.AuthHttpNologin == input.AuthHttpNologin ||
                    (this.AuthHttpNologin != null &&
                    this.AuthHttpNologin.Equals(input.AuthHttpNologin))
                ) && 
                (
                    this.AuthHttpRealm == input.AuthHttpRealm ||
                    (this.AuthHttpRealm != null &&
                    this.AuthHttpRealm.Equals(input.AuthHttpRealm))
                ) && 
                (
                    this.AuthDefaultLoginpage == input.AuthDefaultLoginpage ||
                    (this.AuthDefaultLoginpage != null &&
                    this.AuthDefaultLoginpage.Equals(input.AuthDefaultLoginpage))
                ) && 
                (
                    this.AuthCredForm == input.AuthCredForm ||
                    (this.AuthCredForm != null &&
                    this.AuthCredForm.Equals(input.AuthCredForm))
                ) && 
                (
                    this.AuthCredUtf8 == input.AuthCredUtf8 ||
                    (this.AuthCredUtf8 != null &&
                    this.AuthCredUtf8.Equals(input.AuthCredUtf8))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.AuthHttpNologin != null)
                    hashCode = hashCode * 59 + this.AuthHttpNologin.GetHashCode();
                if (this.AuthHttpRealm != null)
                    hashCode = hashCode * 59 + this.AuthHttpRealm.GetHashCode();
                if (this.AuthDefaultLoginpage != null)
                    hashCode = hashCode * 59 + this.AuthDefaultLoginpage.GetHashCode();
                if (this.AuthCredForm != null)
                    hashCode = hashCode * 59 + this.AuthCredForm.GetHashCode();
                if (this.AuthCredUtf8 != null)
                    hashCode = hashCode * 59 + this.AuthCredUtf8.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
