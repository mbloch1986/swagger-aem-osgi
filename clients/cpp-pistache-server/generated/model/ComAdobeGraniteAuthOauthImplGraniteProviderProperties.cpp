/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteAuthOauthImplGraniteProviderProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteAuthOauthImplGraniteProviderProperties::ComAdobeGraniteAuthOauthImplGraniteProviderProperties()
{
    m_Oauth_provider_idIsSet = false;
    m_Oauth_provider_granite_authorization_urlIsSet = false;
    m_Oauth_provider_granite_token_urlIsSet = false;
    m_Oauth_provider_granite_profile_urlIsSet = false;
    m_Oauth_provider_granite_extended_details_urlsIsSet = false;
    
}

ComAdobeGraniteAuthOauthImplGraniteProviderProperties::~ComAdobeGraniteAuthOauthImplGraniteProviderProperties()
{
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteAuthOauthImplGraniteProviderProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Oauth_provider_idIsSet)
    {
        val["oauth.provider.id"] = ModelBase::toJson(m_Oauth_provider_id);
    }
    if(m_Oauth_provider_granite_authorization_urlIsSet)
    {
        val["oauth.provider.granite.authorization.url"] = ModelBase::toJson(m_Oauth_provider_granite_authorization_url);
    }
    if(m_Oauth_provider_granite_token_urlIsSet)
    {
        val["oauth.provider.granite.token.url"] = ModelBase::toJson(m_Oauth_provider_granite_token_url);
    }
    if(m_Oauth_provider_granite_profile_urlIsSet)
    {
        val["oauth.provider.granite.profile.url"] = ModelBase::toJson(m_Oauth_provider_granite_profile_url);
    }
    if(m_Oauth_provider_granite_extended_details_urlsIsSet)
    {
        val["oauth.provider.granite.extended.details.urls"] = ModelBase::toJson(m_Oauth_provider_granite_extended_details_urls);
    }
    

    return val;
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::fromJson(nlohmann::json& val)
{
    if(val.find("oauth.provider.id") != val.end())
    {
        if(!val["oauth.provider.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.id"]);
            setOauthProviderId( newItem );
        }
        
    }
    if(val.find("oauth.provider.granite.authorization.url") != val.end())
    {
        if(!val["oauth.provider.granite.authorization.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.granite.authorization.url"]);
            setOauthProviderGraniteAuthorizationUrl( newItem );
        }
        
    }
    if(val.find("oauth.provider.granite.token.url") != val.end())
    {
        if(!val["oauth.provider.granite.token.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.granite.token.url"]);
            setOauthProviderGraniteTokenUrl( newItem );
        }
        
    }
    if(val.find("oauth.provider.granite.profile.url") != val.end())
    {
        if(!val["oauth.provider.granite.profile.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.granite.profile.url"]);
            setOauthProviderGraniteProfileUrl( newItem );
        }
        
    }
    if(val.find("oauth.provider.granite.extended.details.urls") != val.end())
    {
        if(!val["oauth.provider.granite.extended.details.urls"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.granite.extended.details.urls"]);
            setOauthProviderGraniteExtendedDetailsUrls( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderId() const
{
    return m_Oauth_provider_id;
}
void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderId(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_id = value;
    m_Oauth_provider_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGraniteProviderProperties::oauthProviderIdIsSet() const
{
    return m_Oauth_provider_idIsSet;
}
void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::unsetOauth_provider_id()
{
    m_Oauth_provider_idIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteAuthorizationUrl() const
{
    return m_Oauth_provider_granite_authorization_url;
}
void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteAuthorizationUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_granite_authorization_url = value;
    m_Oauth_provider_granite_authorization_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGraniteProviderProperties::oauthProviderGraniteAuthorizationUrlIsSet() const
{
    return m_Oauth_provider_granite_authorization_urlIsSet;
}
void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::unsetOauth_provider_granite_authorization_url()
{
    m_Oauth_provider_granite_authorization_urlIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteTokenUrl() const
{
    return m_Oauth_provider_granite_token_url;
}
void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteTokenUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_granite_token_url = value;
    m_Oauth_provider_granite_token_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGraniteProviderProperties::oauthProviderGraniteTokenUrlIsSet() const
{
    return m_Oauth_provider_granite_token_urlIsSet;
}
void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::unsetOauth_provider_granite_token_url()
{
    m_Oauth_provider_granite_token_urlIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteProfileUrl() const
{
    return m_Oauth_provider_granite_profile_url;
}
void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteProfileUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_granite_profile_url = value;
    m_Oauth_provider_granite_profile_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGraniteProviderProperties::oauthProviderGraniteProfileUrlIsSet() const
{
    return m_Oauth_provider_granite_profile_urlIsSet;
}
void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::unsetOauth_provider_granite_profile_url()
{
    m_Oauth_provider_granite_profile_urlIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteExtendedDetailsUrls() const
{
    return m_Oauth_provider_granite_extended_details_urls;
}
void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteExtendedDetailsUrls(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_granite_extended_details_urls = value;
    m_Oauth_provider_granite_extended_details_urlsIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGraniteProviderProperties::oauthProviderGraniteExtendedDetailsUrlsIsSet() const
{
    return m_Oauth_provider_granite_extended_details_urlsIsSet;
}
void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::unsetOauth_provider_granite_extended_details_urls()
{
    m_Oauth_provider_granite_extended_details_urlsIsSet = false;
}

}
}
}
}

