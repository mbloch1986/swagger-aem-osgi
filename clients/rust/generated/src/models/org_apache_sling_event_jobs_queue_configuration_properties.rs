/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingEventJobsQueueConfigurationProperties {
  #[serde(rename = "queue.name")]
  queue_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "queue.topics")]
  queue_topics: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "queue.type")]
  queue_type: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "queue.priority")]
  queue_priority: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "queue.retries")]
  queue_retries: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "queue.retrydelay")]
  queue_retrydelay: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "queue.maxparallel")]
  queue_maxparallel: Option<::models::ConfigNodePropertyFloat>,
  #[serde(rename = "queue.keepJobs")]
  queue_keep_jobs: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "queue.preferRunOnCreationInstance")]
  queue_prefer_run_on_creation_instance: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "queue.threadPoolSize")]
  queue_thread_pool_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "service.ranking")]
  service_ranking: Option<::models::ConfigNodePropertyInteger>
}

impl OrgApacheSlingEventJobsQueueConfigurationProperties {
  pub fn new() -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    OrgApacheSlingEventJobsQueueConfigurationProperties {
      queue_name: None,
      queue_topics: None,
      queue_type: None,
      queue_priority: None,
      queue_retries: None,
      queue_retrydelay: None,
      queue_maxparallel: None,
      queue_keep_jobs: None,
      queue_prefer_run_on_creation_instance: None,
      queue_thread_pool_size: None,
      service_ranking: None
    }
  }

  pub fn set_queue_name(&mut self, queue_name: ::models::ConfigNodePropertyString) {
    self.queue_name = Some(queue_name);
  }

  pub fn with_queue_name(mut self, queue_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.queue_name = Some(queue_name);
    self
  }

  pub fn queue_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.queue_name.as_ref()
  }

  pub fn reset_queue_name(&mut self) {
    self.queue_name = None;
  }

  pub fn set_queue_topics(&mut self, queue_topics: ::models::ConfigNodePropertyArray) {
    self.queue_topics = Some(queue_topics);
  }

  pub fn with_queue_topics(mut self, queue_topics: ::models::ConfigNodePropertyArray) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.queue_topics = Some(queue_topics);
    self
  }

  pub fn queue_topics(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.queue_topics.as_ref()
  }

  pub fn reset_queue_topics(&mut self) {
    self.queue_topics = None;
  }

  pub fn set_queue_type(&mut self, queue_type: ::models::ConfigNodePropertyDropDown) {
    self.queue_type = Some(queue_type);
  }

  pub fn with_queue_type(mut self, queue_type: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.queue_type = Some(queue_type);
    self
  }

  pub fn queue_type(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.queue_type.as_ref()
  }

  pub fn reset_queue_type(&mut self) {
    self.queue_type = None;
  }

  pub fn set_queue_priority(&mut self, queue_priority: ::models::ConfigNodePropertyDropDown) {
    self.queue_priority = Some(queue_priority);
  }

  pub fn with_queue_priority(mut self, queue_priority: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.queue_priority = Some(queue_priority);
    self
  }

  pub fn queue_priority(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.queue_priority.as_ref()
  }

  pub fn reset_queue_priority(&mut self) {
    self.queue_priority = None;
  }

  pub fn set_queue_retries(&mut self, queue_retries: ::models::ConfigNodePropertyInteger) {
    self.queue_retries = Some(queue_retries);
  }

  pub fn with_queue_retries(mut self, queue_retries: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.queue_retries = Some(queue_retries);
    self
  }

  pub fn queue_retries(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.queue_retries.as_ref()
  }

  pub fn reset_queue_retries(&mut self) {
    self.queue_retries = None;
  }

  pub fn set_queue_retrydelay(&mut self, queue_retrydelay: ::models::ConfigNodePropertyInteger) {
    self.queue_retrydelay = Some(queue_retrydelay);
  }

  pub fn with_queue_retrydelay(mut self, queue_retrydelay: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.queue_retrydelay = Some(queue_retrydelay);
    self
  }

  pub fn queue_retrydelay(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.queue_retrydelay.as_ref()
  }

  pub fn reset_queue_retrydelay(&mut self) {
    self.queue_retrydelay = None;
  }

  pub fn set_queue_maxparallel(&mut self, queue_maxparallel: ::models::ConfigNodePropertyFloat) {
    self.queue_maxparallel = Some(queue_maxparallel);
  }

  pub fn with_queue_maxparallel(mut self, queue_maxparallel: ::models::ConfigNodePropertyFloat) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.queue_maxparallel = Some(queue_maxparallel);
    self
  }

  pub fn queue_maxparallel(&self) -> Option<&::models::ConfigNodePropertyFloat> {
    self.queue_maxparallel.as_ref()
  }

  pub fn reset_queue_maxparallel(&mut self) {
    self.queue_maxparallel = None;
  }

  pub fn set_queue_keep_jobs(&mut self, queue_keep_jobs: ::models::ConfigNodePropertyBoolean) {
    self.queue_keep_jobs = Some(queue_keep_jobs);
  }

  pub fn with_queue_keep_jobs(mut self, queue_keep_jobs: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.queue_keep_jobs = Some(queue_keep_jobs);
    self
  }

  pub fn queue_keep_jobs(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.queue_keep_jobs.as_ref()
  }

  pub fn reset_queue_keep_jobs(&mut self) {
    self.queue_keep_jobs = None;
  }

  pub fn set_queue_prefer_run_on_creation_instance(&mut self, queue_prefer_run_on_creation_instance: ::models::ConfigNodePropertyBoolean) {
    self.queue_prefer_run_on_creation_instance = Some(queue_prefer_run_on_creation_instance);
  }

  pub fn with_queue_prefer_run_on_creation_instance(mut self, queue_prefer_run_on_creation_instance: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.queue_prefer_run_on_creation_instance = Some(queue_prefer_run_on_creation_instance);
    self
  }

  pub fn queue_prefer_run_on_creation_instance(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.queue_prefer_run_on_creation_instance.as_ref()
  }

  pub fn reset_queue_prefer_run_on_creation_instance(&mut self) {
    self.queue_prefer_run_on_creation_instance = None;
  }

  pub fn set_queue_thread_pool_size(&mut self, queue_thread_pool_size: ::models::ConfigNodePropertyInteger) {
    self.queue_thread_pool_size = Some(queue_thread_pool_size);
  }

  pub fn with_queue_thread_pool_size(mut self, queue_thread_pool_size: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.queue_thread_pool_size = Some(queue_thread_pool_size);
    self
  }

  pub fn queue_thread_pool_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.queue_thread_pool_size.as_ref()
  }

  pub fn reset_queue_thread_pool_size(&mut self) {
    self.queue_thread_pool_size = None;
  }

  pub fn set_service_ranking(&mut self, service_ranking: ::models::ConfigNodePropertyInteger) {
    self.service_ranking = Some(service_ranking);
  }

  pub fn with_service_ranking(mut self, service_ranking: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingEventJobsQueueConfigurationProperties {
    self.service_ranking = Some(service_ranking);
    self
  }

  pub fn service_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.service_ranking.as_ref()
  }

  pub fn reset_service_ranking(&mut self) {
    self.service_ranking = None;
  }

}



