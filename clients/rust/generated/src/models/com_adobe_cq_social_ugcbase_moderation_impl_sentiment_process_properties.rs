/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
  #[serde(rename = "watchwords.positive")]
  watchwords_positive: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "watchwords.negative")]
  watchwords_negative: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "watchwords.path")]
  watchwords_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sentiment.path")]
  sentiment_path: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
  pub fn new() -> ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
    ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
      watchwords_positive: None,
      watchwords_negative: None,
      watchwords_path: None,
      sentiment_path: None
    }
  }

  pub fn set_watchwords_positive(&mut self, watchwords_positive: ::models::ConfigNodePropertyArray) {
    self.watchwords_positive = Some(watchwords_positive);
  }

  pub fn with_watchwords_positive(mut self, watchwords_positive: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
    self.watchwords_positive = Some(watchwords_positive);
    self
  }

  pub fn watchwords_positive(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.watchwords_positive.as_ref()
  }

  pub fn reset_watchwords_positive(&mut self) {
    self.watchwords_positive = None;
  }

  pub fn set_watchwords_negative(&mut self, watchwords_negative: ::models::ConfigNodePropertyArray) {
    self.watchwords_negative = Some(watchwords_negative);
  }

  pub fn with_watchwords_negative(mut self, watchwords_negative: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
    self.watchwords_negative = Some(watchwords_negative);
    self
  }

  pub fn watchwords_negative(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.watchwords_negative.as_ref()
  }

  pub fn reset_watchwords_negative(&mut self) {
    self.watchwords_negative = None;
  }

  pub fn set_watchwords_path(&mut self, watchwords_path: ::models::ConfigNodePropertyString) {
    self.watchwords_path = Some(watchwords_path);
  }

  pub fn with_watchwords_path(mut self, watchwords_path: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
    self.watchwords_path = Some(watchwords_path);
    self
  }

  pub fn watchwords_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.watchwords_path.as_ref()
  }

  pub fn reset_watchwords_path(&mut self) {
    self.watchwords_path = None;
  }

  pub fn set_sentiment_path(&mut self, sentiment_path: ::models::ConfigNodePropertyString) {
    self.sentiment_path = Some(sentiment_path);
  }

  pub fn with_sentiment_path(mut self, sentiment_path: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
    self.sentiment_path = Some(sentiment_path);
    self
  }

  pub fn sentiment_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sentiment_path.as_ref()
  }

  pub fn reset_sentiment_path(&mut self) {
    self.sentiment_path = None;
  }

}



