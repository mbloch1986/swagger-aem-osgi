/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties()
{
    m_PoolSizeIsSet = false;
    m_MaxPoolSizeIsSet = false;
    m_QueueSizeIsSet = false;
    m_KeepAliveTimeIsSet = false;
    
}

ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::~ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties()
{
}

void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PoolSizeIsSet)
    {
        val["poolSize"] = ModelBase::toJson(m_PoolSize);
    }
    if(m_MaxPoolSizeIsSet)
    {
        val["maxPoolSize"] = ModelBase::toJson(m_MaxPoolSize);
    }
    if(m_QueueSizeIsSet)
    {
        val["queueSize"] = ModelBase::toJson(m_QueueSize);
    }
    if(m_KeepAliveTimeIsSet)
    {
        val["keepAliveTime"] = ModelBase::toJson(m_KeepAliveTime);
    }
    

    return val;
}

void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("poolSize") != val.end())
    {
        if(!val["poolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["poolSize"]);
            setPoolSize( newItem );
        }
        
    }
    if(val.find("maxPoolSize") != val.end())
    {
        if(!val["maxPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxPoolSize"]);
            setMaxPoolSize( newItem );
        }
        
    }
    if(val.find("queueSize") != val.end())
    {
        if(!val["queueSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["queueSize"]);
            setQueueSize( newItem );
        }
        
    }
    if(val.find("keepAliveTime") != val.end())
    {
        if(!val["keepAliveTime"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["keepAliveTime"]);
            setKeepAliveTime( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getPoolSize() const
{
    return m_PoolSize;
}
void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setPoolSize(ConfigNodePropertyInteger const& value)
{
    m_PoolSize = value;
    m_PoolSizeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::poolSizeIsSet() const
{
    return m_PoolSizeIsSet;
}
void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::unsetPoolSize()
{
    m_PoolSizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getMaxPoolSize() const
{
    return m_MaxPoolSize;
}
void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setMaxPoolSize(ConfigNodePropertyInteger const& value)
{
    m_MaxPoolSize = value;
    m_MaxPoolSizeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::maxPoolSizeIsSet() const
{
    return m_MaxPoolSizeIsSet;
}
void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::unsetMaxPoolSize()
{
    m_MaxPoolSizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getQueueSize() const
{
    return m_QueueSize;
}
void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setQueueSize(ConfigNodePropertyInteger const& value)
{
    m_QueueSize = value;
    m_QueueSizeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::queueSizeIsSet() const
{
    return m_QueueSizeIsSet;
}
void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::unsetQueueSize()
{
    m_QueueSizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getKeepAliveTime() const
{
    return m_KeepAliveTime;
}
void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setKeepAliveTime(ConfigNodePropertyInteger const& value)
{
    m_KeepAliveTime = value;
    m_KeepAliveTimeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::keepAliveTimeIsSet() const
{
    return m_KeepAliveTimeIsSet;
}
void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::unsetKeepAliveTime()
{
    m_KeepAliveTimeIsSet = false;
}

}
}
}
}

