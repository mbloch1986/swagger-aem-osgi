/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties : IEquatable<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties>
    { 
        /// <summary>
        /// Gets or Sets Filepattern
        /// </summary>
        [DataMember(Name="filepattern")]
        public ConfigNodePropertyString Filepattern { get; set; }

        /// <summary>
        /// Gets or Sets DeviceGroups
        /// </summary>
        [DataMember(Name="device.groups")]
        public ConfigNodePropertyArray DeviceGroups { get; set; }

        /// <summary>
        /// Gets or Sets BuildPageNodes
        /// </summary>
        [DataMember(Name="build.page.nodes")]
        public ConfigNodePropertyBoolean BuildPageNodes { get; set; }

        /// <summary>
        /// Gets or Sets BuildClientLibs
        /// </summary>
        [DataMember(Name="build.client.libs")]
        public ConfigNodePropertyBoolean BuildClientLibs { get; set; }

        /// <summary>
        /// Gets or Sets BuildCanvasComponent
        /// </summary>
        [DataMember(Name="build.canvas.component")]
        public ConfigNodePropertyBoolean BuildCanvasComponent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties {\n");
            sb.Append("  Filepattern: ").Append(Filepattern).Append("\n");
            sb.Append("  DeviceGroups: ").Append(DeviceGroups).Append("\n");
            sb.Append("  BuildPageNodes: ").Append(BuildPageNodes).Append("\n");
            sb.Append("  BuildClientLibs: ").Append(BuildClientLibs).Append("\n");
            sb.Append("  BuildCanvasComponent: ").Append(BuildCanvasComponent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Filepattern == other.Filepattern ||
                    Filepattern != null &&
                    Filepattern.Equals(other.Filepattern)
                ) && 
                (
                    DeviceGroups == other.DeviceGroups ||
                    DeviceGroups != null &&
                    DeviceGroups.Equals(other.DeviceGroups)
                ) && 
                (
                    BuildPageNodes == other.BuildPageNodes ||
                    BuildPageNodes != null &&
                    BuildPageNodes.Equals(other.BuildPageNodes)
                ) && 
                (
                    BuildClientLibs == other.BuildClientLibs ||
                    BuildClientLibs != null &&
                    BuildClientLibs.Equals(other.BuildClientLibs)
                ) && 
                (
                    BuildCanvasComponent == other.BuildCanvasComponent ||
                    BuildCanvasComponent != null &&
                    BuildCanvasComponent.Equals(other.BuildCanvasComponent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Filepattern != null)
                    hashCode = hashCode * 59 + Filepattern.GetHashCode();
                    if (DeviceGroups != null)
                    hashCode = hashCode * 59 + DeviceGroups.GetHashCode();
                    if (BuildPageNodes != null)
                    hashCode = hashCode * 59 + BuildPageNodes.GetHashCode();
                    if (BuildClientLibs != null)
                    hashCode = hashCode * 59 + BuildClientLibs.GetHashCode();
                    if (BuildCanvasComponent != null)
                    hashCode = hashCode * 59 + BuildCanvasComponent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties left, ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties left, ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
