<?php
/**
 * OrgApacheFelixEventadminImplEventAdminProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheFelixEventadminImplEventAdminProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheFelixEventadminImplEventAdminProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheFelixEventadminImplEventAdminProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'org_apache_felix_eventadmin_thread_pool_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'org_apache_felix_eventadmin_async_to_sync_thread_ratio' => '\OpenAPI\Client\Model\ConfigNodePropertyFloat',
        'org_apache_felix_eventadmin_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'org_apache_felix_eventadmin_require_topic' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'org_apache_felix_eventadmin_ignore_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'org_apache_felix_eventadmin_ignore_topic' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'org_apache_felix_eventadmin_thread_pool_size' => null,
        'org_apache_felix_eventadmin_async_to_sync_thread_ratio' => null,
        'org_apache_felix_eventadmin_timeout' => null,
        'org_apache_felix_eventadmin_require_topic' => null,
        'org_apache_felix_eventadmin_ignore_timeout' => null,
        'org_apache_felix_eventadmin_ignore_topic' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'org_apache_felix_eventadmin_thread_pool_size' => 'org.apache.felix.eventadmin.ThreadPoolSize',
        'org_apache_felix_eventadmin_async_to_sync_thread_ratio' => 'org.apache.felix.eventadmin.AsyncToSyncThreadRatio',
        'org_apache_felix_eventadmin_timeout' => 'org.apache.felix.eventadmin.Timeout',
        'org_apache_felix_eventadmin_require_topic' => 'org.apache.felix.eventadmin.RequireTopic',
        'org_apache_felix_eventadmin_ignore_timeout' => 'org.apache.felix.eventadmin.IgnoreTimeout',
        'org_apache_felix_eventadmin_ignore_topic' => 'org.apache.felix.eventadmin.IgnoreTopic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'org_apache_felix_eventadmin_thread_pool_size' => 'setOrgApacheFelixEventadminThreadPoolSize',
        'org_apache_felix_eventadmin_async_to_sync_thread_ratio' => 'setOrgApacheFelixEventadminAsyncToSyncThreadRatio',
        'org_apache_felix_eventadmin_timeout' => 'setOrgApacheFelixEventadminTimeout',
        'org_apache_felix_eventadmin_require_topic' => 'setOrgApacheFelixEventadminRequireTopic',
        'org_apache_felix_eventadmin_ignore_timeout' => 'setOrgApacheFelixEventadminIgnoreTimeout',
        'org_apache_felix_eventadmin_ignore_topic' => 'setOrgApacheFelixEventadminIgnoreTopic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'org_apache_felix_eventadmin_thread_pool_size' => 'getOrgApacheFelixEventadminThreadPoolSize',
        'org_apache_felix_eventadmin_async_to_sync_thread_ratio' => 'getOrgApacheFelixEventadminAsyncToSyncThreadRatio',
        'org_apache_felix_eventadmin_timeout' => 'getOrgApacheFelixEventadminTimeout',
        'org_apache_felix_eventadmin_require_topic' => 'getOrgApacheFelixEventadminRequireTopic',
        'org_apache_felix_eventadmin_ignore_timeout' => 'getOrgApacheFelixEventadminIgnoreTimeout',
        'org_apache_felix_eventadmin_ignore_topic' => 'getOrgApacheFelixEventadminIgnoreTopic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['org_apache_felix_eventadmin_thread_pool_size'] = isset($data['org_apache_felix_eventadmin_thread_pool_size']) ? $data['org_apache_felix_eventadmin_thread_pool_size'] : null;
        $this->container['org_apache_felix_eventadmin_async_to_sync_thread_ratio'] = isset($data['org_apache_felix_eventadmin_async_to_sync_thread_ratio']) ? $data['org_apache_felix_eventadmin_async_to_sync_thread_ratio'] : null;
        $this->container['org_apache_felix_eventadmin_timeout'] = isset($data['org_apache_felix_eventadmin_timeout']) ? $data['org_apache_felix_eventadmin_timeout'] : null;
        $this->container['org_apache_felix_eventadmin_require_topic'] = isset($data['org_apache_felix_eventadmin_require_topic']) ? $data['org_apache_felix_eventadmin_require_topic'] : null;
        $this->container['org_apache_felix_eventadmin_ignore_timeout'] = isset($data['org_apache_felix_eventadmin_ignore_timeout']) ? $data['org_apache_felix_eventadmin_ignore_timeout'] : null;
        $this->container['org_apache_felix_eventadmin_ignore_topic'] = isset($data['org_apache_felix_eventadmin_ignore_topic']) ? $data['org_apache_felix_eventadmin_ignore_topic'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets org_apache_felix_eventadmin_thread_pool_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getOrgApacheFelixEventadminThreadPoolSize()
    {
        return $this->container['org_apache_felix_eventadmin_thread_pool_size'];
    }

    /**
     * Sets org_apache_felix_eventadmin_thread_pool_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $org_apache_felix_eventadmin_thread_pool_size org_apache_felix_eventadmin_thread_pool_size
     *
     * @return $this
     */
    public function setOrgApacheFelixEventadminThreadPoolSize($org_apache_felix_eventadmin_thread_pool_size)
    {
        $this->container['org_apache_felix_eventadmin_thread_pool_size'] = $org_apache_felix_eventadmin_thread_pool_size;

        return $this;
    }

    /**
     * Gets org_apache_felix_eventadmin_async_to_sync_thread_ratio
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyFloat|null
     */
    public function getOrgApacheFelixEventadminAsyncToSyncThreadRatio()
    {
        return $this->container['org_apache_felix_eventadmin_async_to_sync_thread_ratio'];
    }

    /**
     * Sets org_apache_felix_eventadmin_async_to_sync_thread_ratio
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyFloat|null $org_apache_felix_eventadmin_async_to_sync_thread_ratio org_apache_felix_eventadmin_async_to_sync_thread_ratio
     *
     * @return $this
     */
    public function setOrgApacheFelixEventadminAsyncToSyncThreadRatio($org_apache_felix_eventadmin_async_to_sync_thread_ratio)
    {
        $this->container['org_apache_felix_eventadmin_async_to_sync_thread_ratio'] = $org_apache_felix_eventadmin_async_to_sync_thread_ratio;

        return $this;
    }

    /**
     * Gets org_apache_felix_eventadmin_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getOrgApacheFelixEventadminTimeout()
    {
        return $this->container['org_apache_felix_eventadmin_timeout'];
    }

    /**
     * Sets org_apache_felix_eventadmin_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $org_apache_felix_eventadmin_timeout org_apache_felix_eventadmin_timeout
     *
     * @return $this
     */
    public function setOrgApacheFelixEventadminTimeout($org_apache_felix_eventadmin_timeout)
    {
        $this->container['org_apache_felix_eventadmin_timeout'] = $org_apache_felix_eventadmin_timeout;

        return $this;
    }

    /**
     * Gets org_apache_felix_eventadmin_require_topic
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getOrgApacheFelixEventadminRequireTopic()
    {
        return $this->container['org_apache_felix_eventadmin_require_topic'];
    }

    /**
     * Sets org_apache_felix_eventadmin_require_topic
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $org_apache_felix_eventadmin_require_topic org_apache_felix_eventadmin_require_topic
     *
     * @return $this
     */
    public function setOrgApacheFelixEventadminRequireTopic($org_apache_felix_eventadmin_require_topic)
    {
        $this->container['org_apache_felix_eventadmin_require_topic'] = $org_apache_felix_eventadmin_require_topic;

        return $this;
    }

    /**
     * Gets org_apache_felix_eventadmin_ignore_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getOrgApacheFelixEventadminIgnoreTimeout()
    {
        return $this->container['org_apache_felix_eventadmin_ignore_timeout'];
    }

    /**
     * Sets org_apache_felix_eventadmin_ignore_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $org_apache_felix_eventadmin_ignore_timeout org_apache_felix_eventadmin_ignore_timeout
     *
     * @return $this
     */
    public function setOrgApacheFelixEventadminIgnoreTimeout($org_apache_felix_eventadmin_ignore_timeout)
    {
        $this->container['org_apache_felix_eventadmin_ignore_timeout'] = $org_apache_felix_eventadmin_ignore_timeout;

        return $this;
    }

    /**
     * Gets org_apache_felix_eventadmin_ignore_topic
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getOrgApacheFelixEventadminIgnoreTopic()
    {
        return $this->container['org_apache_felix_eventadmin_ignore_topic'];
    }

    /**
     * Sets org_apache_felix_eventadmin_ignore_topic
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $org_apache_felix_eventadmin_ignore_topic org_apache_felix_eventadmin_ignore_topic
     *
     * @return $this
     */
    public function setOrgApacheFelixEventadminIgnoreTopic($org_apache_felix_eventadmin_ignore_topic)
    {
        $this->container['org_apache_felix_eventadmin_ignore_topic'] = $org_apache_felix_eventadmin_ignore_topic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


