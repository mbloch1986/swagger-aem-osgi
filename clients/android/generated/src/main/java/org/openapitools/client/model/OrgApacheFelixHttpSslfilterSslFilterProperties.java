/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrgApacheFelixHttpSslfilterSslFilterProperties {
  
  @SerializedName("ssl-forward.header")
  private ConfigNodePropertyString sslForwardHeader = null;
  @SerializedName("ssl-forward.value")
  private ConfigNodePropertyString sslForwardValue = null;
  @SerializedName("ssl-forward-cert.header")
  private ConfigNodePropertyString sslForwardCertHeader = null;
  @SerializedName("rewrite.absolute.urls")
  private ConfigNodePropertyBoolean rewriteAbsoluteUrls = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getSslForwardHeader() {
    return sslForwardHeader;
  }
  public void setSslForwardHeader(ConfigNodePropertyString sslForwardHeader) {
    this.sslForwardHeader = sslForwardHeader;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getSslForwardValue() {
    return sslForwardValue;
  }
  public void setSslForwardValue(ConfigNodePropertyString sslForwardValue) {
    this.sslForwardValue = sslForwardValue;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getSslForwardCertHeader() {
    return sslForwardCertHeader;
  }
  public void setSslForwardCertHeader(ConfigNodePropertyString sslForwardCertHeader) {
    this.sslForwardCertHeader = sslForwardCertHeader;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getRewriteAbsoluteUrls() {
    return rewriteAbsoluteUrls;
  }
  public void setRewriteAbsoluteUrls(ConfigNodePropertyBoolean rewriteAbsoluteUrls) {
    this.rewriteAbsoluteUrls = rewriteAbsoluteUrls;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheFelixHttpSslfilterSslFilterProperties orgApacheFelixHttpSslfilterSslFilterProperties = (OrgApacheFelixHttpSslfilterSslFilterProperties) o;
    return (this.sslForwardHeader == null ? orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardHeader == null : this.sslForwardHeader.equals(orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardHeader)) &&
        (this.sslForwardValue == null ? orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardValue == null : this.sslForwardValue.equals(orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardValue)) &&
        (this.sslForwardCertHeader == null ? orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardCertHeader == null : this.sslForwardCertHeader.equals(orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardCertHeader)) &&
        (this.rewriteAbsoluteUrls == null ? orgApacheFelixHttpSslfilterSslFilterProperties.rewriteAbsoluteUrls == null : this.rewriteAbsoluteUrls.equals(orgApacheFelixHttpSslfilterSslFilterProperties.rewriteAbsoluteUrls));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.sslForwardHeader == null ? 0: this.sslForwardHeader.hashCode());
    result = 31 * result + (this.sslForwardValue == null ? 0: this.sslForwardValue.hashCode());
    result = 31 * result + (this.sslForwardCertHeader == null ? 0: this.sslForwardCertHeader.hashCode());
    result = 31 * result + (this.rewriteAbsoluteUrls == null ? 0: this.rewriteAbsoluteUrls.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheFelixHttpSslfilterSslFilterProperties {\n");
    
    sb.append("  sslForwardHeader: ").append(sslForwardHeader).append("\n");
    sb.append("  sslForwardValue: ").append(sslForwardValue).append("\n");
    sb.append("  sslForwardCertHeader: ").append(sslForwardCertHeader).append("\n");
    sb.append("  rewriteAbsoluteUrls: ").append(rewriteAbsoluteUrls).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
