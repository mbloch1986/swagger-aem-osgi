/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
  #[serde(rename = "oauth.configmanager.ims.configid")]
  oauth_configmanager_ims_configid: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "ims.owningEntity")]
  ims_owning_entity: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "aem.instanceId")]
  aem_instance_id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "ims.serviceCode")]
  ims_service_code: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
  pub fn new() -> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
    ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
      oauth_configmanager_ims_configid: None,
      ims_owning_entity: None,
      aem_instance_id: None,
      ims_service_code: None
    }
  }

  pub fn set_oauth_configmanager_ims_configid(&mut self, oauth_configmanager_ims_configid: ::models::ConfigNodePropertyString) {
    self.oauth_configmanager_ims_configid = Some(oauth_configmanager_ims_configid);
  }

  pub fn with_oauth_configmanager_ims_configid(mut self, oauth_configmanager_ims_configid: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
    self.oauth_configmanager_ims_configid = Some(oauth_configmanager_ims_configid);
    self
  }

  pub fn oauth_configmanager_ims_configid(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.oauth_configmanager_ims_configid.as_ref()
  }

  pub fn reset_oauth_configmanager_ims_configid(&mut self) {
    self.oauth_configmanager_ims_configid = None;
  }

  pub fn set_ims_owning_entity(&mut self, ims_owning_entity: ::models::ConfigNodePropertyString) {
    self.ims_owning_entity = Some(ims_owning_entity);
  }

  pub fn with_ims_owning_entity(mut self, ims_owning_entity: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
    self.ims_owning_entity = Some(ims_owning_entity);
    self
  }

  pub fn ims_owning_entity(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.ims_owning_entity.as_ref()
  }

  pub fn reset_ims_owning_entity(&mut self) {
    self.ims_owning_entity = None;
  }

  pub fn set_aem_instance_id(&mut self, aem_instance_id: ::models::ConfigNodePropertyString) {
    self.aem_instance_id = Some(aem_instance_id);
  }

  pub fn with_aem_instance_id(mut self, aem_instance_id: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
    self.aem_instance_id = Some(aem_instance_id);
    self
  }

  pub fn aem_instance_id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.aem_instance_id.as_ref()
  }

  pub fn reset_aem_instance_id(&mut self) {
    self.aem_instance_id = None;
  }

  pub fn set_ims_service_code(&mut self, ims_service_code: ::models::ConfigNodePropertyString) {
    self.ims_service_code = Some(ims_service_code);
  }

  pub fn with_ims_service_code(mut self, ims_service_code: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
    self.ims_service_code = Some(ims_service_code);
    self
  }

  pub fn ims_service_code(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.ims_service_code.as_ref()
  }

  pub fn reset_ims_service_code(&mut self) {
    self.ims_service_code = None;
  }

}



