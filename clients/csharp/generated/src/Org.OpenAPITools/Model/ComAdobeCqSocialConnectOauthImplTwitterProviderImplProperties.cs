/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties :  IEquatable<ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties" /> class.
        /// </summary>
        /// <param name="oauthProviderId">oauthProviderId.</param>
        /// <param name="oauthCloudConfigRoot">oauthCloudConfigRoot.</param>
        /// <param name="providerConfigRoot">providerConfigRoot.</param>
        /// <param name="providerConfigUserFolder">providerConfigUserFolder.</param>
        /// <param name="providerConfigTwitterEnableParams">providerConfigTwitterEnableParams.</param>
        /// <param name="providerConfigTwitterParams">providerConfigTwitterParams.</param>
        /// <param name="providerConfigRefreshUserdataEnabled">providerConfigRefreshUserdataEnabled.</param>
        public ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties(ConfigNodePropertyString oauthProviderId = default(ConfigNodePropertyString), ConfigNodePropertyString oauthCloudConfigRoot = default(ConfigNodePropertyString), ConfigNodePropertyString providerConfigRoot = default(ConfigNodePropertyString), ConfigNodePropertyDropDown providerConfigUserFolder = default(ConfigNodePropertyDropDown), ConfigNodePropertyBoolean providerConfigTwitterEnableParams = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray providerConfigTwitterParams = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean providerConfigRefreshUserdataEnabled = default(ConfigNodePropertyBoolean))
        {
            this.OauthProviderId = oauthProviderId;
            this.OauthCloudConfigRoot = oauthCloudConfigRoot;
            this.ProviderConfigRoot = providerConfigRoot;
            this.ProviderConfigUserFolder = providerConfigUserFolder;
            this.ProviderConfigTwitterEnableParams = providerConfigTwitterEnableParams;
            this.ProviderConfigTwitterParams = providerConfigTwitterParams;
            this.ProviderConfigRefreshUserdataEnabled = providerConfigRefreshUserdataEnabled;
        }
        
        /// <summary>
        /// Gets or Sets OauthProviderId
        /// </summary>
        [DataMember(Name="oauth.provider.id", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderId { get; set; }

        /// <summary>
        /// Gets or Sets OauthCloudConfigRoot
        /// </summary>
        [DataMember(Name="oauth.cloud.config.root", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthCloudConfigRoot { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigRoot
        /// </summary>
        [DataMember(Name="provider.config.root", EmitDefaultValue=false)]
        public ConfigNodePropertyString ProviderConfigRoot { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigUserFolder
        /// </summary>
        [DataMember(Name="provider.config.user.folder", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown ProviderConfigUserFolder { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigTwitterEnableParams
        /// </summary>
        [DataMember(Name="provider.config.twitter.enable.params", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ProviderConfigTwitterEnableParams { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigTwitterParams
        /// </summary>
        [DataMember(Name="provider.config.twitter.params", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ProviderConfigTwitterParams { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigRefreshUserdataEnabled
        /// </summary>
        [DataMember(Name="provider.config.refresh.userdata.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ProviderConfigRefreshUserdataEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {\n");
            sb.Append("  OauthProviderId: ").Append(OauthProviderId).Append("\n");
            sb.Append("  OauthCloudConfigRoot: ").Append(OauthCloudConfigRoot).Append("\n");
            sb.Append("  ProviderConfigRoot: ").Append(ProviderConfigRoot).Append("\n");
            sb.Append("  ProviderConfigUserFolder: ").Append(ProviderConfigUserFolder).Append("\n");
            sb.Append("  ProviderConfigTwitterEnableParams: ").Append(ProviderConfigTwitterEnableParams).Append("\n");
            sb.Append("  ProviderConfigTwitterParams: ").Append(ProviderConfigTwitterParams).Append("\n");
            sb.Append("  ProviderConfigRefreshUserdataEnabled: ").Append(ProviderConfigRefreshUserdataEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OauthProviderId == input.OauthProviderId ||
                    (this.OauthProviderId != null &&
                    this.OauthProviderId.Equals(input.OauthProviderId))
                ) && 
                (
                    this.OauthCloudConfigRoot == input.OauthCloudConfigRoot ||
                    (this.OauthCloudConfigRoot != null &&
                    this.OauthCloudConfigRoot.Equals(input.OauthCloudConfigRoot))
                ) && 
                (
                    this.ProviderConfigRoot == input.ProviderConfigRoot ||
                    (this.ProviderConfigRoot != null &&
                    this.ProviderConfigRoot.Equals(input.ProviderConfigRoot))
                ) && 
                (
                    this.ProviderConfigUserFolder == input.ProviderConfigUserFolder ||
                    (this.ProviderConfigUserFolder != null &&
                    this.ProviderConfigUserFolder.Equals(input.ProviderConfigUserFolder))
                ) && 
                (
                    this.ProviderConfigTwitterEnableParams == input.ProviderConfigTwitterEnableParams ||
                    (this.ProviderConfigTwitterEnableParams != null &&
                    this.ProviderConfigTwitterEnableParams.Equals(input.ProviderConfigTwitterEnableParams))
                ) && 
                (
                    this.ProviderConfigTwitterParams == input.ProviderConfigTwitterParams ||
                    (this.ProviderConfigTwitterParams != null &&
                    this.ProviderConfigTwitterParams.Equals(input.ProviderConfigTwitterParams))
                ) && 
                (
                    this.ProviderConfigRefreshUserdataEnabled == input.ProviderConfigRefreshUserdataEnabled ||
                    (this.ProviderConfigRefreshUserdataEnabled != null &&
                    this.ProviderConfigRefreshUserdataEnabled.Equals(input.ProviderConfigRefreshUserdataEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OauthProviderId != null)
                    hashCode = hashCode * 59 + this.OauthProviderId.GetHashCode();
                if (this.OauthCloudConfigRoot != null)
                    hashCode = hashCode * 59 + this.OauthCloudConfigRoot.GetHashCode();
                if (this.ProviderConfigRoot != null)
                    hashCode = hashCode * 59 + this.ProviderConfigRoot.GetHashCode();
                if (this.ProviderConfigUserFolder != null)
                    hashCode = hashCode * 59 + this.ProviderConfigUserFolder.GetHashCode();
                if (this.ProviderConfigTwitterEnableParams != null)
                    hashCode = hashCode * 59 + this.ProviderConfigTwitterEnableParams.GetHashCode();
                if (this.ProviderConfigTwitterParams != null)
                    hashCode = hashCode * 59 + this.ProviderConfigTwitterParams.GetHashCode();
                if (this.ProviderConfigRefreshUserdataEnabled != null)
                    hashCode = hashCode * 59 + this.ProviderConfigRefreshUserdataEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
