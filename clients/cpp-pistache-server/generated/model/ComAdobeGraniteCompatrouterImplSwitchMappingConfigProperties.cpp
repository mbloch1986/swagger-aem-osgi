/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties()
{
    m_GroupIsSet = false;
    m_IdsIsSet = false;
    
}

ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::~ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties()
{
}

void ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_GroupIsSet)
    {
        val["group"] = ModelBase::toJson(m_Group);
    }
    if(m_IdsIsSet)
    {
        val["ids"] = ModelBase::toJson(m_Ids);
    }
    

    return val;
}

void ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::fromJson(nlohmann::json& val)
{
    if(val.find("group") != val.end())
    {
        if(!val["group"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["group"]);
            setGroup( newItem );
        }
        
    }
    if(val.find("ids") != val.end())
    {
        if(!val["ids"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["ids"]);
            setIds( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::getGroup() const
{
    return m_Group;
}
void ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::setGroup(ConfigNodePropertyString const& value)
{
    m_Group = value;
    m_GroupIsSet = true;
}
bool ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::groupIsSet() const
{
    return m_GroupIsSet;
}
void ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::unsetGroup()
{
    m_GroupIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::getIds() const
{
    return m_Ids;
}
void ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::setIds(ConfigNodePropertyArray const& value)
{
    m_Ids = value;
    m_IdsIsSet = true;
}
bool ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::idsIsSet() const
{
    return m_IdsIsSet;
}
void ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties::unsetIds()
{
    m_IdsIsSet = false;
}

}
}
}
}

