<?php
/**
 * ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'service_ranking' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'global_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'max_disk_usage' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'persistence_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'thread_pool_max_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'scheduled_thread_pool_max_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'graceful_shutdown_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'queues' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'topics' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'addresses_max_delivery_attempts' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'addresses_expiry_delay' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'addresses_address_full_message_policy' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'addresses_max_size_bytes' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'addresses_page_size_bytes' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'addresses_page_cache_max_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_user' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'cluster_password' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'cluster_call_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_call_failover_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_client_failure_check_period' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_notification_attempts' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_notification_interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'id_cache_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_confirmation_window_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_connection_ttl' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_duplicate_detection' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'cluster_initial_connect_attempts' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_max_retry_interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_min_large_message_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_producer_window_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_reconnect_attempts' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_retry_interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_retry_interval_multiplier' => '\OpenAPI\Client\Model\ConfigNodePropertyFloat'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'service_ranking' => null,
        'global_size' => null,
        'max_disk_usage' => null,
        'persistence_enabled' => null,
        'thread_pool_max_size' => null,
        'scheduled_thread_pool_max_size' => null,
        'graceful_shutdown_timeout' => null,
        'queues' => null,
        'topics' => null,
        'addresses_max_delivery_attempts' => null,
        'addresses_expiry_delay' => null,
        'addresses_address_full_message_policy' => null,
        'addresses_max_size_bytes' => null,
        'addresses_page_size_bytes' => null,
        'addresses_page_cache_max_size' => null,
        'cluster_user' => null,
        'cluster_password' => null,
        'cluster_call_timeout' => null,
        'cluster_call_failover_timeout' => null,
        'cluster_client_failure_check_period' => null,
        'cluster_notification_attempts' => null,
        'cluster_notification_interval' => null,
        'id_cache_size' => null,
        'cluster_confirmation_window_size' => null,
        'cluster_connection_ttl' => null,
        'cluster_duplicate_detection' => null,
        'cluster_initial_connect_attempts' => null,
        'cluster_max_retry_interval' => null,
        'cluster_min_large_message_size' => null,
        'cluster_producer_window_size' => null,
        'cluster_reconnect_attempts' => null,
        'cluster_retry_interval' => null,
        'cluster_retry_interval_multiplier' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service_ranking' => 'service.ranking',
        'global_size' => 'global.size',
        'max_disk_usage' => 'max.disk.usage',
        'persistence_enabled' => 'persistence.enabled',
        'thread_pool_max_size' => 'thread.pool.max.size',
        'scheduled_thread_pool_max_size' => 'scheduled.thread.pool.max.size',
        'graceful_shutdown_timeout' => 'graceful.shutdown.timeout',
        'queues' => 'queues',
        'topics' => 'topics',
        'addresses_max_delivery_attempts' => 'addresses.max.delivery.attempts',
        'addresses_expiry_delay' => 'addresses.expiry.delay',
        'addresses_address_full_message_policy' => 'addresses.address.full.message.policy',
        'addresses_max_size_bytes' => 'addresses.max.size.bytes',
        'addresses_page_size_bytes' => 'addresses.page.size.bytes',
        'addresses_page_cache_max_size' => 'addresses.page.cache.max.size',
        'cluster_user' => 'cluster.user',
        'cluster_password' => 'cluster.password',
        'cluster_call_timeout' => 'cluster.call.timeout',
        'cluster_call_failover_timeout' => 'cluster.call.failover.timeout',
        'cluster_client_failure_check_period' => 'cluster.client.failure.check.period',
        'cluster_notification_attempts' => 'cluster.notification.attempts',
        'cluster_notification_interval' => 'cluster.notification.interval',
        'id_cache_size' => 'id.cache.size',
        'cluster_confirmation_window_size' => 'cluster.confirmation.window.size',
        'cluster_connection_ttl' => 'cluster.connection.ttl',
        'cluster_duplicate_detection' => 'cluster.duplicate.detection',
        'cluster_initial_connect_attempts' => 'cluster.initial.connect.attempts',
        'cluster_max_retry_interval' => 'cluster.max.retry.interval',
        'cluster_min_large_message_size' => 'cluster.min.large.message.size',
        'cluster_producer_window_size' => 'cluster.producer.window.size',
        'cluster_reconnect_attempts' => 'cluster.reconnect.attempts',
        'cluster_retry_interval' => 'cluster.retry.interval',
        'cluster_retry_interval_multiplier' => 'cluster.retry.interval.multiplier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service_ranking' => 'setServiceRanking',
        'global_size' => 'setGlobalSize',
        'max_disk_usage' => 'setMaxDiskUsage',
        'persistence_enabled' => 'setPersistenceEnabled',
        'thread_pool_max_size' => 'setThreadPoolMaxSize',
        'scheduled_thread_pool_max_size' => 'setScheduledThreadPoolMaxSize',
        'graceful_shutdown_timeout' => 'setGracefulShutdownTimeout',
        'queues' => 'setQueues',
        'topics' => 'setTopics',
        'addresses_max_delivery_attempts' => 'setAddressesMaxDeliveryAttempts',
        'addresses_expiry_delay' => 'setAddressesExpiryDelay',
        'addresses_address_full_message_policy' => 'setAddressesAddressFullMessagePolicy',
        'addresses_max_size_bytes' => 'setAddressesMaxSizeBytes',
        'addresses_page_size_bytes' => 'setAddressesPageSizeBytes',
        'addresses_page_cache_max_size' => 'setAddressesPageCacheMaxSize',
        'cluster_user' => 'setClusterUser',
        'cluster_password' => 'setClusterPassword',
        'cluster_call_timeout' => 'setClusterCallTimeout',
        'cluster_call_failover_timeout' => 'setClusterCallFailoverTimeout',
        'cluster_client_failure_check_period' => 'setClusterClientFailureCheckPeriod',
        'cluster_notification_attempts' => 'setClusterNotificationAttempts',
        'cluster_notification_interval' => 'setClusterNotificationInterval',
        'id_cache_size' => 'setIdCacheSize',
        'cluster_confirmation_window_size' => 'setClusterConfirmationWindowSize',
        'cluster_connection_ttl' => 'setClusterConnectionTtl',
        'cluster_duplicate_detection' => 'setClusterDuplicateDetection',
        'cluster_initial_connect_attempts' => 'setClusterInitialConnectAttempts',
        'cluster_max_retry_interval' => 'setClusterMaxRetryInterval',
        'cluster_min_large_message_size' => 'setClusterMinLargeMessageSize',
        'cluster_producer_window_size' => 'setClusterProducerWindowSize',
        'cluster_reconnect_attempts' => 'setClusterReconnectAttempts',
        'cluster_retry_interval' => 'setClusterRetryInterval',
        'cluster_retry_interval_multiplier' => 'setClusterRetryIntervalMultiplier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service_ranking' => 'getServiceRanking',
        'global_size' => 'getGlobalSize',
        'max_disk_usage' => 'getMaxDiskUsage',
        'persistence_enabled' => 'getPersistenceEnabled',
        'thread_pool_max_size' => 'getThreadPoolMaxSize',
        'scheduled_thread_pool_max_size' => 'getScheduledThreadPoolMaxSize',
        'graceful_shutdown_timeout' => 'getGracefulShutdownTimeout',
        'queues' => 'getQueues',
        'topics' => 'getTopics',
        'addresses_max_delivery_attempts' => 'getAddressesMaxDeliveryAttempts',
        'addresses_expiry_delay' => 'getAddressesExpiryDelay',
        'addresses_address_full_message_policy' => 'getAddressesAddressFullMessagePolicy',
        'addresses_max_size_bytes' => 'getAddressesMaxSizeBytes',
        'addresses_page_size_bytes' => 'getAddressesPageSizeBytes',
        'addresses_page_cache_max_size' => 'getAddressesPageCacheMaxSize',
        'cluster_user' => 'getClusterUser',
        'cluster_password' => 'getClusterPassword',
        'cluster_call_timeout' => 'getClusterCallTimeout',
        'cluster_call_failover_timeout' => 'getClusterCallFailoverTimeout',
        'cluster_client_failure_check_period' => 'getClusterClientFailureCheckPeriod',
        'cluster_notification_attempts' => 'getClusterNotificationAttempts',
        'cluster_notification_interval' => 'getClusterNotificationInterval',
        'id_cache_size' => 'getIdCacheSize',
        'cluster_confirmation_window_size' => 'getClusterConfirmationWindowSize',
        'cluster_connection_ttl' => 'getClusterConnectionTtl',
        'cluster_duplicate_detection' => 'getClusterDuplicateDetection',
        'cluster_initial_connect_attempts' => 'getClusterInitialConnectAttempts',
        'cluster_max_retry_interval' => 'getClusterMaxRetryInterval',
        'cluster_min_large_message_size' => 'getClusterMinLargeMessageSize',
        'cluster_producer_window_size' => 'getClusterProducerWindowSize',
        'cluster_reconnect_attempts' => 'getClusterReconnectAttempts',
        'cluster_retry_interval' => 'getClusterRetryInterval',
        'cluster_retry_interval_multiplier' => 'getClusterRetryIntervalMultiplier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['service_ranking'] = isset($data['service_ranking']) ? $data['service_ranking'] : null;
        $this->container['global_size'] = isset($data['global_size']) ? $data['global_size'] : null;
        $this->container['max_disk_usage'] = isset($data['max_disk_usage']) ? $data['max_disk_usage'] : null;
        $this->container['persistence_enabled'] = isset($data['persistence_enabled']) ? $data['persistence_enabled'] : null;
        $this->container['thread_pool_max_size'] = isset($data['thread_pool_max_size']) ? $data['thread_pool_max_size'] : null;
        $this->container['scheduled_thread_pool_max_size'] = isset($data['scheduled_thread_pool_max_size']) ? $data['scheduled_thread_pool_max_size'] : null;
        $this->container['graceful_shutdown_timeout'] = isset($data['graceful_shutdown_timeout']) ? $data['graceful_shutdown_timeout'] : null;
        $this->container['queues'] = isset($data['queues']) ? $data['queues'] : null;
        $this->container['topics'] = isset($data['topics']) ? $data['topics'] : null;
        $this->container['addresses_max_delivery_attempts'] = isset($data['addresses_max_delivery_attempts']) ? $data['addresses_max_delivery_attempts'] : null;
        $this->container['addresses_expiry_delay'] = isset($data['addresses_expiry_delay']) ? $data['addresses_expiry_delay'] : null;
        $this->container['addresses_address_full_message_policy'] = isset($data['addresses_address_full_message_policy']) ? $data['addresses_address_full_message_policy'] : null;
        $this->container['addresses_max_size_bytes'] = isset($data['addresses_max_size_bytes']) ? $data['addresses_max_size_bytes'] : null;
        $this->container['addresses_page_size_bytes'] = isset($data['addresses_page_size_bytes']) ? $data['addresses_page_size_bytes'] : null;
        $this->container['addresses_page_cache_max_size'] = isset($data['addresses_page_cache_max_size']) ? $data['addresses_page_cache_max_size'] : null;
        $this->container['cluster_user'] = isset($data['cluster_user']) ? $data['cluster_user'] : null;
        $this->container['cluster_password'] = isset($data['cluster_password']) ? $data['cluster_password'] : null;
        $this->container['cluster_call_timeout'] = isset($data['cluster_call_timeout']) ? $data['cluster_call_timeout'] : null;
        $this->container['cluster_call_failover_timeout'] = isset($data['cluster_call_failover_timeout']) ? $data['cluster_call_failover_timeout'] : null;
        $this->container['cluster_client_failure_check_period'] = isset($data['cluster_client_failure_check_period']) ? $data['cluster_client_failure_check_period'] : null;
        $this->container['cluster_notification_attempts'] = isset($data['cluster_notification_attempts']) ? $data['cluster_notification_attempts'] : null;
        $this->container['cluster_notification_interval'] = isset($data['cluster_notification_interval']) ? $data['cluster_notification_interval'] : null;
        $this->container['id_cache_size'] = isset($data['id_cache_size']) ? $data['id_cache_size'] : null;
        $this->container['cluster_confirmation_window_size'] = isset($data['cluster_confirmation_window_size']) ? $data['cluster_confirmation_window_size'] : null;
        $this->container['cluster_connection_ttl'] = isset($data['cluster_connection_ttl']) ? $data['cluster_connection_ttl'] : null;
        $this->container['cluster_duplicate_detection'] = isset($data['cluster_duplicate_detection']) ? $data['cluster_duplicate_detection'] : null;
        $this->container['cluster_initial_connect_attempts'] = isset($data['cluster_initial_connect_attempts']) ? $data['cluster_initial_connect_attempts'] : null;
        $this->container['cluster_max_retry_interval'] = isset($data['cluster_max_retry_interval']) ? $data['cluster_max_retry_interval'] : null;
        $this->container['cluster_min_large_message_size'] = isset($data['cluster_min_large_message_size']) ? $data['cluster_min_large_message_size'] : null;
        $this->container['cluster_producer_window_size'] = isset($data['cluster_producer_window_size']) ? $data['cluster_producer_window_size'] : null;
        $this->container['cluster_reconnect_attempts'] = isset($data['cluster_reconnect_attempts']) ? $data['cluster_reconnect_attempts'] : null;
        $this->container['cluster_retry_interval'] = isset($data['cluster_retry_interval']) ? $data['cluster_retry_interval'] : null;
        $this->container['cluster_retry_interval_multiplier'] = isset($data['cluster_retry_interval_multiplier']) ? $data['cluster_retry_interval_multiplier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets service_ranking
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getServiceRanking()
    {
        return $this->container['service_ranking'];
    }

    /**
     * Sets service_ranking
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $service_ranking service_ranking
     *
     * @return $this
     */
    public function setServiceRanking($service_ranking)
    {
        $this->container['service_ranking'] = $service_ranking;

        return $this;
    }

    /**
     * Gets global_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getGlobalSize()
    {
        return $this->container['global_size'];
    }

    /**
     * Sets global_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $global_size global_size
     *
     * @return $this
     */
    public function setGlobalSize($global_size)
    {
        $this->container['global_size'] = $global_size;

        return $this;
    }

    /**
     * Gets max_disk_usage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxDiskUsage()
    {
        return $this->container['max_disk_usage'];
    }

    /**
     * Sets max_disk_usage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_disk_usage max_disk_usage
     *
     * @return $this
     */
    public function setMaxDiskUsage($max_disk_usage)
    {
        $this->container['max_disk_usage'] = $max_disk_usage;

        return $this;
    }

    /**
     * Gets persistence_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getPersistenceEnabled()
    {
        return $this->container['persistence_enabled'];
    }

    /**
     * Sets persistence_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $persistence_enabled persistence_enabled
     *
     * @return $this
     */
    public function setPersistenceEnabled($persistence_enabled)
    {
        $this->container['persistence_enabled'] = $persistence_enabled;

        return $this;
    }

    /**
     * Gets thread_pool_max_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getThreadPoolMaxSize()
    {
        return $this->container['thread_pool_max_size'];
    }

    /**
     * Sets thread_pool_max_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $thread_pool_max_size thread_pool_max_size
     *
     * @return $this
     */
    public function setThreadPoolMaxSize($thread_pool_max_size)
    {
        $this->container['thread_pool_max_size'] = $thread_pool_max_size;

        return $this;
    }

    /**
     * Gets scheduled_thread_pool_max_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getScheduledThreadPoolMaxSize()
    {
        return $this->container['scheduled_thread_pool_max_size'];
    }

    /**
     * Sets scheduled_thread_pool_max_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $scheduled_thread_pool_max_size scheduled_thread_pool_max_size
     *
     * @return $this
     */
    public function setScheduledThreadPoolMaxSize($scheduled_thread_pool_max_size)
    {
        $this->container['scheduled_thread_pool_max_size'] = $scheduled_thread_pool_max_size;

        return $this;
    }

    /**
     * Gets graceful_shutdown_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getGracefulShutdownTimeout()
    {
        return $this->container['graceful_shutdown_timeout'];
    }

    /**
     * Sets graceful_shutdown_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $graceful_shutdown_timeout graceful_shutdown_timeout
     *
     * @return $this
     */
    public function setGracefulShutdownTimeout($graceful_shutdown_timeout)
    {
        $this->container['graceful_shutdown_timeout'] = $graceful_shutdown_timeout;

        return $this;
    }

    /**
     * Gets queues
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getQueues()
    {
        return $this->container['queues'];
    }

    /**
     * Sets queues
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $queues queues
     *
     * @return $this
     */
    public function setQueues($queues)
    {
        $this->container['queues'] = $queues;

        return $this;
    }

    /**
     * Gets topics
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getTopics()
    {
        return $this->container['topics'];
    }

    /**
     * Sets topics
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $topics topics
     *
     * @return $this
     */
    public function setTopics($topics)
    {
        $this->container['topics'] = $topics;

        return $this;
    }

    /**
     * Gets addresses_max_delivery_attempts
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getAddressesMaxDeliveryAttempts()
    {
        return $this->container['addresses_max_delivery_attempts'];
    }

    /**
     * Sets addresses_max_delivery_attempts
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $addresses_max_delivery_attempts addresses_max_delivery_attempts
     *
     * @return $this
     */
    public function setAddressesMaxDeliveryAttempts($addresses_max_delivery_attempts)
    {
        $this->container['addresses_max_delivery_attempts'] = $addresses_max_delivery_attempts;

        return $this;
    }

    /**
     * Gets addresses_expiry_delay
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getAddressesExpiryDelay()
    {
        return $this->container['addresses_expiry_delay'];
    }

    /**
     * Sets addresses_expiry_delay
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $addresses_expiry_delay addresses_expiry_delay
     *
     * @return $this
     */
    public function setAddressesExpiryDelay($addresses_expiry_delay)
    {
        $this->container['addresses_expiry_delay'] = $addresses_expiry_delay;

        return $this;
    }

    /**
     * Gets addresses_address_full_message_policy
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getAddressesAddressFullMessagePolicy()
    {
        return $this->container['addresses_address_full_message_policy'];
    }

    /**
     * Sets addresses_address_full_message_policy
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $addresses_address_full_message_policy addresses_address_full_message_policy
     *
     * @return $this
     */
    public function setAddressesAddressFullMessagePolicy($addresses_address_full_message_policy)
    {
        $this->container['addresses_address_full_message_policy'] = $addresses_address_full_message_policy;

        return $this;
    }

    /**
     * Gets addresses_max_size_bytes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getAddressesMaxSizeBytes()
    {
        return $this->container['addresses_max_size_bytes'];
    }

    /**
     * Sets addresses_max_size_bytes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $addresses_max_size_bytes addresses_max_size_bytes
     *
     * @return $this
     */
    public function setAddressesMaxSizeBytes($addresses_max_size_bytes)
    {
        $this->container['addresses_max_size_bytes'] = $addresses_max_size_bytes;

        return $this;
    }

    /**
     * Gets addresses_page_size_bytes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getAddressesPageSizeBytes()
    {
        return $this->container['addresses_page_size_bytes'];
    }

    /**
     * Sets addresses_page_size_bytes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $addresses_page_size_bytes addresses_page_size_bytes
     *
     * @return $this
     */
    public function setAddressesPageSizeBytes($addresses_page_size_bytes)
    {
        $this->container['addresses_page_size_bytes'] = $addresses_page_size_bytes;

        return $this;
    }

    /**
     * Gets addresses_page_cache_max_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getAddressesPageCacheMaxSize()
    {
        return $this->container['addresses_page_cache_max_size'];
    }

    /**
     * Sets addresses_page_cache_max_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $addresses_page_cache_max_size addresses_page_cache_max_size
     *
     * @return $this
     */
    public function setAddressesPageCacheMaxSize($addresses_page_cache_max_size)
    {
        $this->container['addresses_page_cache_max_size'] = $addresses_page_cache_max_size;

        return $this;
    }

    /**
     * Gets cluster_user
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getClusterUser()
    {
        return $this->container['cluster_user'];
    }

    /**
     * Sets cluster_user
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $cluster_user cluster_user
     *
     * @return $this
     */
    public function setClusterUser($cluster_user)
    {
        $this->container['cluster_user'] = $cluster_user;

        return $this;
    }

    /**
     * Gets cluster_password
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getClusterPassword()
    {
        return $this->container['cluster_password'];
    }

    /**
     * Sets cluster_password
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $cluster_password cluster_password
     *
     * @return $this
     */
    public function setClusterPassword($cluster_password)
    {
        $this->container['cluster_password'] = $cluster_password;

        return $this;
    }

    /**
     * Gets cluster_call_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterCallTimeout()
    {
        return $this->container['cluster_call_timeout'];
    }

    /**
     * Sets cluster_call_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_call_timeout cluster_call_timeout
     *
     * @return $this
     */
    public function setClusterCallTimeout($cluster_call_timeout)
    {
        $this->container['cluster_call_timeout'] = $cluster_call_timeout;

        return $this;
    }

    /**
     * Gets cluster_call_failover_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterCallFailoverTimeout()
    {
        return $this->container['cluster_call_failover_timeout'];
    }

    /**
     * Sets cluster_call_failover_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_call_failover_timeout cluster_call_failover_timeout
     *
     * @return $this
     */
    public function setClusterCallFailoverTimeout($cluster_call_failover_timeout)
    {
        $this->container['cluster_call_failover_timeout'] = $cluster_call_failover_timeout;

        return $this;
    }

    /**
     * Gets cluster_client_failure_check_period
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterClientFailureCheckPeriod()
    {
        return $this->container['cluster_client_failure_check_period'];
    }

    /**
     * Sets cluster_client_failure_check_period
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_client_failure_check_period cluster_client_failure_check_period
     *
     * @return $this
     */
    public function setClusterClientFailureCheckPeriod($cluster_client_failure_check_period)
    {
        $this->container['cluster_client_failure_check_period'] = $cluster_client_failure_check_period;

        return $this;
    }

    /**
     * Gets cluster_notification_attempts
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterNotificationAttempts()
    {
        return $this->container['cluster_notification_attempts'];
    }

    /**
     * Sets cluster_notification_attempts
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_notification_attempts cluster_notification_attempts
     *
     * @return $this
     */
    public function setClusterNotificationAttempts($cluster_notification_attempts)
    {
        $this->container['cluster_notification_attempts'] = $cluster_notification_attempts;

        return $this;
    }

    /**
     * Gets cluster_notification_interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterNotificationInterval()
    {
        return $this->container['cluster_notification_interval'];
    }

    /**
     * Sets cluster_notification_interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_notification_interval cluster_notification_interval
     *
     * @return $this
     */
    public function setClusterNotificationInterval($cluster_notification_interval)
    {
        $this->container['cluster_notification_interval'] = $cluster_notification_interval;

        return $this;
    }

    /**
     * Gets id_cache_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getIdCacheSize()
    {
        return $this->container['id_cache_size'];
    }

    /**
     * Sets id_cache_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $id_cache_size id_cache_size
     *
     * @return $this
     */
    public function setIdCacheSize($id_cache_size)
    {
        $this->container['id_cache_size'] = $id_cache_size;

        return $this;
    }

    /**
     * Gets cluster_confirmation_window_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterConfirmationWindowSize()
    {
        return $this->container['cluster_confirmation_window_size'];
    }

    /**
     * Sets cluster_confirmation_window_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_confirmation_window_size cluster_confirmation_window_size
     *
     * @return $this
     */
    public function setClusterConfirmationWindowSize($cluster_confirmation_window_size)
    {
        $this->container['cluster_confirmation_window_size'] = $cluster_confirmation_window_size;

        return $this;
    }

    /**
     * Gets cluster_connection_ttl
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterConnectionTtl()
    {
        return $this->container['cluster_connection_ttl'];
    }

    /**
     * Sets cluster_connection_ttl
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_connection_ttl cluster_connection_ttl
     *
     * @return $this
     */
    public function setClusterConnectionTtl($cluster_connection_ttl)
    {
        $this->container['cluster_connection_ttl'] = $cluster_connection_ttl;

        return $this;
    }

    /**
     * Gets cluster_duplicate_detection
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getClusterDuplicateDetection()
    {
        return $this->container['cluster_duplicate_detection'];
    }

    /**
     * Sets cluster_duplicate_detection
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $cluster_duplicate_detection cluster_duplicate_detection
     *
     * @return $this
     */
    public function setClusterDuplicateDetection($cluster_duplicate_detection)
    {
        $this->container['cluster_duplicate_detection'] = $cluster_duplicate_detection;

        return $this;
    }

    /**
     * Gets cluster_initial_connect_attempts
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterInitialConnectAttempts()
    {
        return $this->container['cluster_initial_connect_attempts'];
    }

    /**
     * Sets cluster_initial_connect_attempts
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_initial_connect_attempts cluster_initial_connect_attempts
     *
     * @return $this
     */
    public function setClusterInitialConnectAttempts($cluster_initial_connect_attempts)
    {
        $this->container['cluster_initial_connect_attempts'] = $cluster_initial_connect_attempts;

        return $this;
    }

    /**
     * Gets cluster_max_retry_interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterMaxRetryInterval()
    {
        return $this->container['cluster_max_retry_interval'];
    }

    /**
     * Sets cluster_max_retry_interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_max_retry_interval cluster_max_retry_interval
     *
     * @return $this
     */
    public function setClusterMaxRetryInterval($cluster_max_retry_interval)
    {
        $this->container['cluster_max_retry_interval'] = $cluster_max_retry_interval;

        return $this;
    }

    /**
     * Gets cluster_min_large_message_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterMinLargeMessageSize()
    {
        return $this->container['cluster_min_large_message_size'];
    }

    /**
     * Sets cluster_min_large_message_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_min_large_message_size cluster_min_large_message_size
     *
     * @return $this
     */
    public function setClusterMinLargeMessageSize($cluster_min_large_message_size)
    {
        $this->container['cluster_min_large_message_size'] = $cluster_min_large_message_size;

        return $this;
    }

    /**
     * Gets cluster_producer_window_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterProducerWindowSize()
    {
        return $this->container['cluster_producer_window_size'];
    }

    /**
     * Sets cluster_producer_window_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_producer_window_size cluster_producer_window_size
     *
     * @return $this
     */
    public function setClusterProducerWindowSize($cluster_producer_window_size)
    {
        $this->container['cluster_producer_window_size'] = $cluster_producer_window_size;

        return $this;
    }

    /**
     * Gets cluster_reconnect_attempts
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterReconnectAttempts()
    {
        return $this->container['cluster_reconnect_attempts'];
    }

    /**
     * Sets cluster_reconnect_attempts
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_reconnect_attempts cluster_reconnect_attempts
     *
     * @return $this
     */
    public function setClusterReconnectAttempts($cluster_reconnect_attempts)
    {
        $this->container['cluster_reconnect_attempts'] = $cluster_reconnect_attempts;

        return $this;
    }

    /**
     * Gets cluster_retry_interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterRetryInterval()
    {
        return $this->container['cluster_retry_interval'];
    }

    /**
     * Sets cluster_retry_interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_retry_interval cluster_retry_interval
     *
     * @return $this
     */
    public function setClusterRetryInterval($cluster_retry_interval)
    {
        $this->container['cluster_retry_interval'] = $cluster_retry_interval;

        return $this;
    }

    /**
     * Gets cluster_retry_interval_multiplier
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyFloat|null
     */
    public function getClusterRetryIntervalMultiplier()
    {
        return $this->container['cluster_retry_interval_multiplier'];
    }

    /**
     * Sets cluster_retry_interval_multiplier
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyFloat|null $cluster_retry_interval_multiplier cluster_retry_interval_multiplier
     *
     * @return $this
     */
    public function setClusterRetryIntervalMultiplier($cluster_retry_interval_multiplier)
    {
        $this->container['cluster_retry_interval_multiplier'] = $cluster_retry_interval_multiplier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


