/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties : IEquatable<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties>
    { 
        /// <summary>
        /// Gets or Sets ServiceRanking
        /// </summary>
        [DataMember(Name="service.ranking")]
        public ConfigNodePropertyInteger ServiceRanking { get; set; }

        /// <summary>
        /// Gets or Sets GlobalSize
        /// </summary>
        [DataMember(Name="global.size")]
        public ConfigNodePropertyInteger GlobalSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxDiskUsage
        /// </summary>
        [DataMember(Name="max.disk.usage")]
        public ConfigNodePropertyInteger MaxDiskUsage { get; set; }

        /// <summary>
        /// Gets or Sets PersistenceEnabled
        /// </summary>
        [DataMember(Name="persistence.enabled")]
        public ConfigNodePropertyBoolean PersistenceEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ThreadPoolMaxSize
        /// </summary>
        [DataMember(Name="thread.pool.max.size")]
        public ConfigNodePropertyInteger ThreadPoolMaxSize { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledThreadPoolMaxSize
        /// </summary>
        [DataMember(Name="scheduled.thread.pool.max.size")]
        public ConfigNodePropertyInteger ScheduledThreadPoolMaxSize { get; set; }

        /// <summary>
        /// Gets or Sets GracefulShutdownTimeout
        /// </summary>
        [DataMember(Name="graceful.shutdown.timeout")]
        public ConfigNodePropertyInteger GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// Gets or Sets Queues
        /// </summary>
        [DataMember(Name="queues")]
        public ConfigNodePropertyArray Queues { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [DataMember(Name="topics")]
        public ConfigNodePropertyArray Topics { get; set; }

        /// <summary>
        /// Gets or Sets AddressesMaxDeliveryAttempts
        /// </summary>
        [DataMember(Name="addresses.max.delivery.attempts")]
        public ConfigNodePropertyInteger AddressesMaxDeliveryAttempts { get; set; }

        /// <summary>
        /// Gets or Sets AddressesExpiryDelay
        /// </summary>
        [DataMember(Name="addresses.expiry.delay")]
        public ConfigNodePropertyInteger AddressesExpiryDelay { get; set; }

        /// <summary>
        /// Gets or Sets AddressesAddressFullMessagePolicy
        /// </summary>
        [DataMember(Name="addresses.address.full.message.policy")]
        public ConfigNodePropertyDropDown AddressesAddressFullMessagePolicy { get; set; }

        /// <summary>
        /// Gets or Sets AddressesMaxSizeBytes
        /// </summary>
        [DataMember(Name="addresses.max.size.bytes")]
        public ConfigNodePropertyInteger AddressesMaxSizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets AddressesPageSizeBytes
        /// </summary>
        [DataMember(Name="addresses.page.size.bytes")]
        public ConfigNodePropertyInteger AddressesPageSizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets AddressesPageCacheMaxSize
        /// </summary>
        [DataMember(Name="addresses.page.cache.max.size")]
        public ConfigNodePropertyInteger AddressesPageCacheMaxSize { get; set; }

        /// <summary>
        /// Gets or Sets ClusterUser
        /// </summary>
        [DataMember(Name="cluster.user")]
        public ConfigNodePropertyString ClusterUser { get; set; }

        /// <summary>
        /// Gets or Sets ClusterPassword
        /// </summary>
        [DataMember(Name="cluster.password")]
        public ConfigNodePropertyString ClusterPassword { get; set; }

        /// <summary>
        /// Gets or Sets ClusterCallTimeout
        /// </summary>
        [DataMember(Name="cluster.call.timeout")]
        public ConfigNodePropertyInteger ClusterCallTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ClusterCallFailoverTimeout
        /// </summary>
        [DataMember(Name="cluster.call.failover.timeout")]
        public ConfigNodePropertyInteger ClusterCallFailoverTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ClusterClientFailureCheckPeriod
        /// </summary>
        [DataMember(Name="cluster.client.failure.check.period")]
        public ConfigNodePropertyInteger ClusterClientFailureCheckPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ClusterNotificationAttempts
        /// </summary>
        [DataMember(Name="cluster.notification.attempts")]
        public ConfigNodePropertyInteger ClusterNotificationAttempts { get; set; }

        /// <summary>
        /// Gets or Sets ClusterNotificationInterval
        /// </summary>
        [DataMember(Name="cluster.notification.interval")]
        public ConfigNodePropertyInteger ClusterNotificationInterval { get; set; }

        /// <summary>
        /// Gets or Sets IdCacheSize
        /// </summary>
        [DataMember(Name="id.cache.size")]
        public ConfigNodePropertyInteger IdCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets ClusterConfirmationWindowSize
        /// </summary>
        [DataMember(Name="cluster.confirmation.window.size")]
        public ConfigNodePropertyInteger ClusterConfirmationWindowSize { get; set; }

        /// <summary>
        /// Gets or Sets ClusterConnectionTtl
        /// </summary>
        [DataMember(Name="cluster.connection.ttl")]
        public ConfigNodePropertyInteger ClusterConnectionTtl { get; set; }

        /// <summary>
        /// Gets or Sets ClusterDuplicateDetection
        /// </summary>
        [DataMember(Name="cluster.duplicate.detection")]
        public ConfigNodePropertyBoolean ClusterDuplicateDetection { get; set; }

        /// <summary>
        /// Gets or Sets ClusterInitialConnectAttempts
        /// </summary>
        [DataMember(Name="cluster.initial.connect.attempts")]
        public ConfigNodePropertyInteger ClusterInitialConnectAttempts { get; set; }

        /// <summary>
        /// Gets or Sets ClusterMaxRetryInterval
        /// </summary>
        [DataMember(Name="cluster.max.retry.interval")]
        public ConfigNodePropertyInteger ClusterMaxRetryInterval { get; set; }

        /// <summary>
        /// Gets or Sets ClusterMinLargeMessageSize
        /// </summary>
        [DataMember(Name="cluster.min.large.message.size")]
        public ConfigNodePropertyInteger ClusterMinLargeMessageSize { get; set; }

        /// <summary>
        /// Gets or Sets ClusterProducerWindowSize
        /// </summary>
        [DataMember(Name="cluster.producer.window.size")]
        public ConfigNodePropertyInteger ClusterProducerWindowSize { get; set; }

        /// <summary>
        /// Gets or Sets ClusterReconnectAttempts
        /// </summary>
        [DataMember(Name="cluster.reconnect.attempts")]
        public ConfigNodePropertyInteger ClusterReconnectAttempts { get; set; }

        /// <summary>
        /// Gets or Sets ClusterRetryInterval
        /// </summary>
        [DataMember(Name="cluster.retry.interval")]
        public ConfigNodePropertyInteger ClusterRetryInterval { get; set; }

        /// <summary>
        /// Gets or Sets ClusterRetryIntervalMultiplier
        /// </summary>
        [DataMember(Name="cluster.retry.interval.multiplier")]
        public ConfigNodePropertyFloat ClusterRetryIntervalMultiplier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties {\n");
            sb.Append("  ServiceRanking: ").Append(ServiceRanking).Append("\n");
            sb.Append("  GlobalSize: ").Append(GlobalSize).Append("\n");
            sb.Append("  MaxDiskUsage: ").Append(MaxDiskUsage).Append("\n");
            sb.Append("  PersistenceEnabled: ").Append(PersistenceEnabled).Append("\n");
            sb.Append("  ThreadPoolMaxSize: ").Append(ThreadPoolMaxSize).Append("\n");
            sb.Append("  ScheduledThreadPoolMaxSize: ").Append(ScheduledThreadPoolMaxSize).Append("\n");
            sb.Append("  GracefulShutdownTimeout: ").Append(GracefulShutdownTimeout).Append("\n");
            sb.Append("  Queues: ").Append(Queues).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  AddressesMaxDeliveryAttempts: ").Append(AddressesMaxDeliveryAttempts).Append("\n");
            sb.Append("  AddressesExpiryDelay: ").Append(AddressesExpiryDelay).Append("\n");
            sb.Append("  AddressesAddressFullMessagePolicy: ").Append(AddressesAddressFullMessagePolicy).Append("\n");
            sb.Append("  AddressesMaxSizeBytes: ").Append(AddressesMaxSizeBytes).Append("\n");
            sb.Append("  AddressesPageSizeBytes: ").Append(AddressesPageSizeBytes).Append("\n");
            sb.Append("  AddressesPageCacheMaxSize: ").Append(AddressesPageCacheMaxSize).Append("\n");
            sb.Append("  ClusterUser: ").Append(ClusterUser).Append("\n");
            sb.Append("  ClusterPassword: ").Append(ClusterPassword).Append("\n");
            sb.Append("  ClusterCallTimeout: ").Append(ClusterCallTimeout).Append("\n");
            sb.Append("  ClusterCallFailoverTimeout: ").Append(ClusterCallFailoverTimeout).Append("\n");
            sb.Append("  ClusterClientFailureCheckPeriod: ").Append(ClusterClientFailureCheckPeriod).Append("\n");
            sb.Append("  ClusterNotificationAttempts: ").Append(ClusterNotificationAttempts).Append("\n");
            sb.Append("  ClusterNotificationInterval: ").Append(ClusterNotificationInterval).Append("\n");
            sb.Append("  IdCacheSize: ").Append(IdCacheSize).Append("\n");
            sb.Append("  ClusterConfirmationWindowSize: ").Append(ClusterConfirmationWindowSize).Append("\n");
            sb.Append("  ClusterConnectionTtl: ").Append(ClusterConnectionTtl).Append("\n");
            sb.Append("  ClusterDuplicateDetection: ").Append(ClusterDuplicateDetection).Append("\n");
            sb.Append("  ClusterInitialConnectAttempts: ").Append(ClusterInitialConnectAttempts).Append("\n");
            sb.Append("  ClusterMaxRetryInterval: ").Append(ClusterMaxRetryInterval).Append("\n");
            sb.Append("  ClusterMinLargeMessageSize: ").Append(ClusterMinLargeMessageSize).Append("\n");
            sb.Append("  ClusterProducerWindowSize: ").Append(ClusterProducerWindowSize).Append("\n");
            sb.Append("  ClusterReconnectAttempts: ").Append(ClusterReconnectAttempts).Append("\n");
            sb.Append("  ClusterRetryInterval: ").Append(ClusterRetryInterval).Append("\n");
            sb.Append("  ClusterRetryIntervalMultiplier: ").Append(ClusterRetryIntervalMultiplier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServiceRanking == other.ServiceRanking ||
                    ServiceRanking != null &&
                    ServiceRanking.Equals(other.ServiceRanking)
                ) && 
                (
                    GlobalSize == other.GlobalSize ||
                    GlobalSize != null &&
                    GlobalSize.Equals(other.GlobalSize)
                ) && 
                (
                    MaxDiskUsage == other.MaxDiskUsage ||
                    MaxDiskUsage != null &&
                    MaxDiskUsage.Equals(other.MaxDiskUsage)
                ) && 
                (
                    PersistenceEnabled == other.PersistenceEnabled ||
                    PersistenceEnabled != null &&
                    PersistenceEnabled.Equals(other.PersistenceEnabled)
                ) && 
                (
                    ThreadPoolMaxSize == other.ThreadPoolMaxSize ||
                    ThreadPoolMaxSize != null &&
                    ThreadPoolMaxSize.Equals(other.ThreadPoolMaxSize)
                ) && 
                (
                    ScheduledThreadPoolMaxSize == other.ScheduledThreadPoolMaxSize ||
                    ScheduledThreadPoolMaxSize != null &&
                    ScheduledThreadPoolMaxSize.Equals(other.ScheduledThreadPoolMaxSize)
                ) && 
                (
                    GracefulShutdownTimeout == other.GracefulShutdownTimeout ||
                    GracefulShutdownTimeout != null &&
                    GracefulShutdownTimeout.Equals(other.GracefulShutdownTimeout)
                ) && 
                (
                    Queues == other.Queues ||
                    Queues != null &&
                    Queues.Equals(other.Queues)
                ) && 
                (
                    Topics == other.Topics ||
                    Topics != null &&
                    Topics.Equals(other.Topics)
                ) && 
                (
                    AddressesMaxDeliveryAttempts == other.AddressesMaxDeliveryAttempts ||
                    AddressesMaxDeliveryAttempts != null &&
                    AddressesMaxDeliveryAttempts.Equals(other.AddressesMaxDeliveryAttempts)
                ) && 
                (
                    AddressesExpiryDelay == other.AddressesExpiryDelay ||
                    AddressesExpiryDelay != null &&
                    AddressesExpiryDelay.Equals(other.AddressesExpiryDelay)
                ) && 
                (
                    AddressesAddressFullMessagePolicy == other.AddressesAddressFullMessagePolicy ||
                    AddressesAddressFullMessagePolicy != null &&
                    AddressesAddressFullMessagePolicy.Equals(other.AddressesAddressFullMessagePolicy)
                ) && 
                (
                    AddressesMaxSizeBytes == other.AddressesMaxSizeBytes ||
                    AddressesMaxSizeBytes != null &&
                    AddressesMaxSizeBytes.Equals(other.AddressesMaxSizeBytes)
                ) && 
                (
                    AddressesPageSizeBytes == other.AddressesPageSizeBytes ||
                    AddressesPageSizeBytes != null &&
                    AddressesPageSizeBytes.Equals(other.AddressesPageSizeBytes)
                ) && 
                (
                    AddressesPageCacheMaxSize == other.AddressesPageCacheMaxSize ||
                    AddressesPageCacheMaxSize != null &&
                    AddressesPageCacheMaxSize.Equals(other.AddressesPageCacheMaxSize)
                ) && 
                (
                    ClusterUser == other.ClusterUser ||
                    ClusterUser != null &&
                    ClusterUser.Equals(other.ClusterUser)
                ) && 
                (
                    ClusterPassword == other.ClusterPassword ||
                    ClusterPassword != null &&
                    ClusterPassword.Equals(other.ClusterPassword)
                ) && 
                (
                    ClusterCallTimeout == other.ClusterCallTimeout ||
                    ClusterCallTimeout != null &&
                    ClusterCallTimeout.Equals(other.ClusterCallTimeout)
                ) && 
                (
                    ClusterCallFailoverTimeout == other.ClusterCallFailoverTimeout ||
                    ClusterCallFailoverTimeout != null &&
                    ClusterCallFailoverTimeout.Equals(other.ClusterCallFailoverTimeout)
                ) && 
                (
                    ClusterClientFailureCheckPeriod == other.ClusterClientFailureCheckPeriod ||
                    ClusterClientFailureCheckPeriod != null &&
                    ClusterClientFailureCheckPeriod.Equals(other.ClusterClientFailureCheckPeriod)
                ) && 
                (
                    ClusterNotificationAttempts == other.ClusterNotificationAttempts ||
                    ClusterNotificationAttempts != null &&
                    ClusterNotificationAttempts.Equals(other.ClusterNotificationAttempts)
                ) && 
                (
                    ClusterNotificationInterval == other.ClusterNotificationInterval ||
                    ClusterNotificationInterval != null &&
                    ClusterNotificationInterval.Equals(other.ClusterNotificationInterval)
                ) && 
                (
                    IdCacheSize == other.IdCacheSize ||
                    IdCacheSize != null &&
                    IdCacheSize.Equals(other.IdCacheSize)
                ) && 
                (
                    ClusterConfirmationWindowSize == other.ClusterConfirmationWindowSize ||
                    ClusterConfirmationWindowSize != null &&
                    ClusterConfirmationWindowSize.Equals(other.ClusterConfirmationWindowSize)
                ) && 
                (
                    ClusterConnectionTtl == other.ClusterConnectionTtl ||
                    ClusterConnectionTtl != null &&
                    ClusterConnectionTtl.Equals(other.ClusterConnectionTtl)
                ) && 
                (
                    ClusterDuplicateDetection == other.ClusterDuplicateDetection ||
                    ClusterDuplicateDetection != null &&
                    ClusterDuplicateDetection.Equals(other.ClusterDuplicateDetection)
                ) && 
                (
                    ClusterInitialConnectAttempts == other.ClusterInitialConnectAttempts ||
                    ClusterInitialConnectAttempts != null &&
                    ClusterInitialConnectAttempts.Equals(other.ClusterInitialConnectAttempts)
                ) && 
                (
                    ClusterMaxRetryInterval == other.ClusterMaxRetryInterval ||
                    ClusterMaxRetryInterval != null &&
                    ClusterMaxRetryInterval.Equals(other.ClusterMaxRetryInterval)
                ) && 
                (
                    ClusterMinLargeMessageSize == other.ClusterMinLargeMessageSize ||
                    ClusterMinLargeMessageSize != null &&
                    ClusterMinLargeMessageSize.Equals(other.ClusterMinLargeMessageSize)
                ) && 
                (
                    ClusterProducerWindowSize == other.ClusterProducerWindowSize ||
                    ClusterProducerWindowSize != null &&
                    ClusterProducerWindowSize.Equals(other.ClusterProducerWindowSize)
                ) && 
                (
                    ClusterReconnectAttempts == other.ClusterReconnectAttempts ||
                    ClusterReconnectAttempts != null &&
                    ClusterReconnectAttempts.Equals(other.ClusterReconnectAttempts)
                ) && 
                (
                    ClusterRetryInterval == other.ClusterRetryInterval ||
                    ClusterRetryInterval != null &&
                    ClusterRetryInterval.Equals(other.ClusterRetryInterval)
                ) && 
                (
                    ClusterRetryIntervalMultiplier == other.ClusterRetryIntervalMultiplier ||
                    ClusterRetryIntervalMultiplier != null &&
                    ClusterRetryIntervalMultiplier.Equals(other.ClusterRetryIntervalMultiplier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServiceRanking != null)
                    hashCode = hashCode * 59 + ServiceRanking.GetHashCode();
                    if (GlobalSize != null)
                    hashCode = hashCode * 59 + GlobalSize.GetHashCode();
                    if (MaxDiskUsage != null)
                    hashCode = hashCode * 59 + MaxDiskUsage.GetHashCode();
                    if (PersistenceEnabled != null)
                    hashCode = hashCode * 59 + PersistenceEnabled.GetHashCode();
                    if (ThreadPoolMaxSize != null)
                    hashCode = hashCode * 59 + ThreadPoolMaxSize.GetHashCode();
                    if (ScheduledThreadPoolMaxSize != null)
                    hashCode = hashCode * 59 + ScheduledThreadPoolMaxSize.GetHashCode();
                    if (GracefulShutdownTimeout != null)
                    hashCode = hashCode * 59 + GracefulShutdownTimeout.GetHashCode();
                    if (Queues != null)
                    hashCode = hashCode * 59 + Queues.GetHashCode();
                    if (Topics != null)
                    hashCode = hashCode * 59 + Topics.GetHashCode();
                    if (AddressesMaxDeliveryAttempts != null)
                    hashCode = hashCode * 59 + AddressesMaxDeliveryAttempts.GetHashCode();
                    if (AddressesExpiryDelay != null)
                    hashCode = hashCode * 59 + AddressesExpiryDelay.GetHashCode();
                    if (AddressesAddressFullMessagePolicy != null)
                    hashCode = hashCode * 59 + AddressesAddressFullMessagePolicy.GetHashCode();
                    if (AddressesMaxSizeBytes != null)
                    hashCode = hashCode * 59 + AddressesMaxSizeBytes.GetHashCode();
                    if (AddressesPageSizeBytes != null)
                    hashCode = hashCode * 59 + AddressesPageSizeBytes.GetHashCode();
                    if (AddressesPageCacheMaxSize != null)
                    hashCode = hashCode * 59 + AddressesPageCacheMaxSize.GetHashCode();
                    if (ClusterUser != null)
                    hashCode = hashCode * 59 + ClusterUser.GetHashCode();
                    if (ClusterPassword != null)
                    hashCode = hashCode * 59 + ClusterPassword.GetHashCode();
                    if (ClusterCallTimeout != null)
                    hashCode = hashCode * 59 + ClusterCallTimeout.GetHashCode();
                    if (ClusterCallFailoverTimeout != null)
                    hashCode = hashCode * 59 + ClusterCallFailoverTimeout.GetHashCode();
                    if (ClusterClientFailureCheckPeriod != null)
                    hashCode = hashCode * 59 + ClusterClientFailureCheckPeriod.GetHashCode();
                    if (ClusterNotificationAttempts != null)
                    hashCode = hashCode * 59 + ClusterNotificationAttempts.GetHashCode();
                    if (ClusterNotificationInterval != null)
                    hashCode = hashCode * 59 + ClusterNotificationInterval.GetHashCode();
                    if (IdCacheSize != null)
                    hashCode = hashCode * 59 + IdCacheSize.GetHashCode();
                    if (ClusterConfirmationWindowSize != null)
                    hashCode = hashCode * 59 + ClusterConfirmationWindowSize.GetHashCode();
                    if (ClusterConnectionTtl != null)
                    hashCode = hashCode * 59 + ClusterConnectionTtl.GetHashCode();
                    if (ClusterDuplicateDetection != null)
                    hashCode = hashCode * 59 + ClusterDuplicateDetection.GetHashCode();
                    if (ClusterInitialConnectAttempts != null)
                    hashCode = hashCode * 59 + ClusterInitialConnectAttempts.GetHashCode();
                    if (ClusterMaxRetryInterval != null)
                    hashCode = hashCode * 59 + ClusterMaxRetryInterval.GetHashCode();
                    if (ClusterMinLargeMessageSize != null)
                    hashCode = hashCode * 59 + ClusterMinLargeMessageSize.GetHashCode();
                    if (ClusterProducerWindowSize != null)
                    hashCode = hashCode * 59 + ClusterProducerWindowSize.GetHashCode();
                    if (ClusterReconnectAttempts != null)
                    hashCode = hashCode * 59 + ClusterReconnectAttempts.GetHashCode();
                    if (ClusterRetryInterval != null)
                    hashCode = hashCode * 59 + ClusterRetryInterval.GetHashCode();
                    if (ClusterRetryIntervalMultiplier != null)
                    hashCode = hashCode * 59 + ClusterRetryIntervalMultiplier.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties left, ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties left, ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
