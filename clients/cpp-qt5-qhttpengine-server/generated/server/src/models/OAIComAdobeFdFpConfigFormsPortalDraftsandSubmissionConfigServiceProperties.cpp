/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties() {
    this->init();
}

OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::~OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties() {
    
}

void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::init() {
    m_portal_outboxes_isSet = false;
    m_draft_data_service_isSet = false;
    m_draft_metadata_service_isSet = false;
    m_submit_data_service_isSet = false;
    m_submit_metadata_service_isSet = false;
    m_pending_sign_data_service_isSet = false;
    m_pending_sign_metadata_service_isSet = false;
}

void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(portal_outboxes, json[QString("portal.outboxes")]);
    
    ::OpenAPI::fromJsonValue(draft_data_service, json[QString("draft.data.service")]);
    
    ::OpenAPI::fromJsonValue(draft_metadata_service, json[QString("draft.metadata.service")]);
    
    ::OpenAPI::fromJsonValue(submit_data_service, json[QString("submit.data.service")]);
    
    ::OpenAPI::fromJsonValue(submit_metadata_service, json[QString("submit.metadata.service")]);
    
    ::OpenAPI::fromJsonValue(pending_sign_data_service, json[QString("pendingSign.data.service")]);
    
    ::OpenAPI::fromJsonValue(pending_sign_metadata_service, json[QString("pendingSign.metadata.service")]);
    
}

QString
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::asJsonObject() const {
    QJsonObject obj;
	if(portal_outboxes.isSet()){
        obj.insert(QString("portal.outboxes"), ::OpenAPI::toJsonValue(portal_outboxes));
    }
	if(draft_data_service.isSet()){
        obj.insert(QString("draft.data.service"), ::OpenAPI::toJsonValue(draft_data_service));
    }
	if(draft_metadata_service.isSet()){
        obj.insert(QString("draft.metadata.service"), ::OpenAPI::toJsonValue(draft_metadata_service));
    }
	if(submit_data_service.isSet()){
        obj.insert(QString("submit.data.service"), ::OpenAPI::toJsonValue(submit_data_service));
    }
	if(submit_metadata_service.isSet()){
        obj.insert(QString("submit.metadata.service"), ::OpenAPI::toJsonValue(submit_metadata_service));
    }
	if(pending_sign_data_service.isSet()){
        obj.insert(QString("pendingSign.data.service"), ::OpenAPI::toJsonValue(pending_sign_data_service));
    }
	if(pending_sign_metadata_service.isSet()){
        obj.insert(QString("pendingSign.metadata.service"), ::OpenAPI::toJsonValue(pending_sign_metadata_service));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPortalOutboxes() const {
    return portal_outboxes;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPortalOutboxes(const OAIConfigNodePropertyArray &portal_outboxes) {
    this->portal_outboxes = portal_outboxes;
    this->m_portal_outboxes_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getDraftDataService() const {
    return draft_data_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setDraftDataService(const OAIConfigNodePropertyString &draft_data_service) {
    this->draft_data_service = draft_data_service;
    this->m_draft_data_service_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getDraftMetadataService() const {
    return draft_metadata_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setDraftMetadataService(const OAIConfigNodePropertyString &draft_metadata_service) {
    this->draft_metadata_service = draft_metadata_service;
    this->m_draft_metadata_service_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getSubmitDataService() const {
    return submit_data_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setSubmitDataService(const OAIConfigNodePropertyString &submit_data_service) {
    this->submit_data_service = submit_data_service;
    this->m_submit_data_service_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getSubmitMetadataService() const {
    return submit_metadata_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setSubmitMetadataService(const OAIConfigNodePropertyString &submit_metadata_service) {
    this->submit_metadata_service = submit_metadata_service;
    this->m_submit_metadata_service_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPendingSignDataService() const {
    return pending_sign_data_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPendingSignDataService(const OAIConfigNodePropertyString &pending_sign_data_service) {
    this->pending_sign_data_service = pending_sign_data_service;
    this->m_pending_sign_data_service_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPendingSignMetadataService() const {
    return pending_sign_metadata_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPendingSignMetadataService(const OAIConfigNodePropertyString &pending_sign_metadata_service) {
    this->pending_sign_metadata_service = pending_sign_metadata_service;
    this->m_pending_sign_metadata_service_isSet = true;
}


bool
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(portal_outboxes.isSet()){ isObjectUpdated = true; break;}
    
        if(draft_data_service.isSet()){ isObjectUpdated = true; break;}
    
        if(draft_metadata_service.isSet()){ isObjectUpdated = true; break;}
    
        if(submit_data_service.isSet()){ isObjectUpdated = true; break;}
    
        if(submit_metadata_service.isSet()){ isObjectUpdated = true; break;}
    
        if(pending_sign_data_service.isSet()){ isObjectUpdated = true; break;}
    
        if(pending_sign_metadata_service.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

