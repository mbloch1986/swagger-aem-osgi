/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties()
{
    m_Job_consumermanager_disableDistributionIsSet = false;
    m_Startup_delayIsSet = false;
    m_Cleanup_periodIsSet = false;
    
}

OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::~OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties()
{
}

void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Job_consumermanager_disableDistributionIsSet)
    {
        val["job.consumermanager.disableDistribution"] = ModelBase::toJson(m_Job_consumermanager_disableDistribution);
    }
    if(m_Startup_delayIsSet)
    {
        val["startup.delay"] = ModelBase::toJson(m_Startup_delay);
    }
    if(m_Cleanup_periodIsSet)
    {
        val["cleanup.period"] = ModelBase::toJson(m_Cleanup_period);
    }
    

    return val;
}

void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("job.consumermanager.disableDistribution") != val.end())
    {
        if(!val["job.consumermanager.disableDistribution"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["job.consumermanager.disableDistribution"]);
            setJobConsumermanagerDisableDistribution( newItem );
        }
        
    }
    if(val.find("startup.delay") != val.end())
    {
        if(!val["startup.delay"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["startup.delay"]);
            setStartupDelay( newItem );
        }
        
    }
    if(val.find("cleanup.period") != val.end())
    {
        if(!val["cleanup.period"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cleanup.period"]);
            setCleanupPeriod( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::getJobConsumermanagerDisableDistribution() const
{
    return m_Job_consumermanager_disableDistribution;
}
void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::setJobConsumermanagerDisableDistribution(ConfigNodePropertyBoolean const& value)
{
    m_Job_consumermanager_disableDistribution = value;
    m_Job_consumermanager_disableDistributionIsSet = true;
}
bool OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::jobConsumermanagerDisableDistributionIsSet() const
{
    return m_Job_consumermanager_disableDistributionIsSet;
}
void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::unsetJob_consumermanager_disableDistribution()
{
    m_Job_consumermanager_disableDistributionIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::getStartupDelay() const
{
    return m_Startup_delay;
}
void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::setStartupDelay(ConfigNodePropertyInteger const& value)
{
    m_Startup_delay = value;
    m_Startup_delayIsSet = true;
}
bool OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::startupDelayIsSet() const
{
    return m_Startup_delayIsSet;
}
void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::unsetStartup_delay()
{
    m_Startup_delayIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::getCleanupPeriod() const
{
    return m_Cleanup_period;
}
void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::setCleanupPeriod(ConfigNodePropertyInteger const& value)
{
    m_Cleanup_period = value;
    m_Cleanup_periodIsSet = true;
}
bool OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::cleanupPeriodIsSet() const
{
    return m_Cleanup_periodIsSet;
}
void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::unsetCleanup_period()
{
    m_Cleanup_periodIsSet = false;
}

}
}
}
}

