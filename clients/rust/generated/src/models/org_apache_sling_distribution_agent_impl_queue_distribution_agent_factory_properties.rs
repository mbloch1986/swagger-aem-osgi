/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
  #[serde(rename = "name")]
  name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "title")]
  title: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "details")]
  details: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "enabled")]
  enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "serviceName")]
  service_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "log.level")]
  log_level: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "allowed.roots")]
  allowed_roots: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "requestAuthorizationStrategy.target")]
  request_authorization_strategy_target: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "queueProviderFactory.target")]
  queue_provider_factory_target: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "packageBuilder.target")]
  package_builder_target: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "triggers.target")]
  triggers_target: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "priorityQueues")]
  priority_queues: Option<::models::ConfigNodePropertyArray>
}

impl OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
  pub fn new() -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
      name: None,
      title: None,
      details: None,
      enabled: None,
      service_name: None,
      log_level: None,
      allowed_roots: None,
      request_authorization_strategy_target: None,
      queue_provider_factory_target: None,
      package_builder_target: None,
      triggers_target: None,
      priority_queues: None
    }
  }

  pub fn set_name(&mut self, name: ::models::ConfigNodePropertyString) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_title(&mut self, title: ::models::ConfigNodePropertyString) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_details(&mut self, details: ::models::ConfigNodePropertyString) {
    self.details = Some(details);
  }

  pub fn with_details(mut self, details: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.details = Some(details);
    self
  }

  pub fn details(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.details.as_ref()
  }

  pub fn reset_details(&mut self) {
    self.details = None;
  }

  pub fn set_enabled(&mut self, enabled: ::models::ConfigNodePropertyBoolean) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_service_name(&mut self, service_name: ::models::ConfigNodePropertyString) {
    self.service_name = Some(service_name);
  }

  pub fn with_service_name(mut self, service_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.service_name = Some(service_name);
    self
  }

  pub fn service_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.service_name.as_ref()
  }

  pub fn reset_service_name(&mut self) {
    self.service_name = None;
  }

  pub fn set_log_level(&mut self, log_level: ::models::ConfigNodePropertyDropDown) {
    self.log_level = Some(log_level);
  }

  pub fn with_log_level(mut self, log_level: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.log_level = Some(log_level);
    self
  }

  pub fn log_level(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.log_level.as_ref()
  }

  pub fn reset_log_level(&mut self) {
    self.log_level = None;
  }

  pub fn set_allowed_roots(&mut self, allowed_roots: ::models::ConfigNodePropertyArray) {
    self.allowed_roots = Some(allowed_roots);
  }

  pub fn with_allowed_roots(mut self, allowed_roots: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.allowed_roots = Some(allowed_roots);
    self
  }

  pub fn allowed_roots(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.allowed_roots.as_ref()
  }

  pub fn reset_allowed_roots(&mut self) {
    self.allowed_roots = None;
  }

  pub fn set_request_authorization_strategy_target(&mut self, request_authorization_strategy_target: ::models::ConfigNodePropertyString) {
    self.request_authorization_strategy_target = Some(request_authorization_strategy_target);
  }

  pub fn with_request_authorization_strategy_target(mut self, request_authorization_strategy_target: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.request_authorization_strategy_target = Some(request_authorization_strategy_target);
    self
  }

  pub fn request_authorization_strategy_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.request_authorization_strategy_target.as_ref()
  }

  pub fn reset_request_authorization_strategy_target(&mut self) {
    self.request_authorization_strategy_target = None;
  }

  pub fn set_queue_provider_factory_target(&mut self, queue_provider_factory_target: ::models::ConfigNodePropertyString) {
    self.queue_provider_factory_target = Some(queue_provider_factory_target);
  }

  pub fn with_queue_provider_factory_target(mut self, queue_provider_factory_target: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.queue_provider_factory_target = Some(queue_provider_factory_target);
    self
  }

  pub fn queue_provider_factory_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.queue_provider_factory_target.as_ref()
  }

  pub fn reset_queue_provider_factory_target(&mut self) {
    self.queue_provider_factory_target = None;
  }

  pub fn set_package_builder_target(&mut self, package_builder_target: ::models::ConfigNodePropertyString) {
    self.package_builder_target = Some(package_builder_target);
  }

  pub fn with_package_builder_target(mut self, package_builder_target: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.package_builder_target = Some(package_builder_target);
    self
  }

  pub fn package_builder_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.package_builder_target.as_ref()
  }

  pub fn reset_package_builder_target(&mut self) {
    self.package_builder_target = None;
  }

  pub fn set_triggers_target(&mut self, triggers_target: ::models::ConfigNodePropertyString) {
    self.triggers_target = Some(triggers_target);
  }

  pub fn with_triggers_target(mut self, triggers_target: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.triggers_target = Some(triggers_target);
    self
  }

  pub fn triggers_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.triggers_target.as_ref()
  }

  pub fn reset_triggers_target(&mut self) {
    self.triggers_target = None;
  }

  pub fn set_priority_queues(&mut self, priority_queues: ::models::ConfigNodePropertyArray) {
    self.priority_queues = Some(priority_queues);
  }

  pub fn with_priority_queues(mut self, priority_queues: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    self.priority_queues = Some(priority_queues);
    self
  }

  pub fn priority_queues(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.priority_queues.as_ref()
  }

  pub fn reset_priority_queues(&mut self) {
    self.priority_queues = None;
  }

}



