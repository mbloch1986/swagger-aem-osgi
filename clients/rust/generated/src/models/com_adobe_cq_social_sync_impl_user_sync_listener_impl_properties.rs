/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
  #[serde(rename = "nodetypes")]
  nodetypes: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "ignorableprops")]
  ignorableprops: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "ignorablenodes")]
  ignorablenodes: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "enabled")]
  enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "distfolders")]
  distfolders: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
  pub fn new() -> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
    ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
      nodetypes: None,
      ignorableprops: None,
      ignorablenodes: None,
      enabled: None,
      distfolders: None
    }
  }

  pub fn set_nodetypes(&mut self, nodetypes: ::models::ConfigNodePropertyArray) {
    self.nodetypes = Some(nodetypes);
  }

  pub fn with_nodetypes(mut self, nodetypes: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
    self.nodetypes = Some(nodetypes);
    self
  }

  pub fn nodetypes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.nodetypes.as_ref()
  }

  pub fn reset_nodetypes(&mut self) {
    self.nodetypes = None;
  }

  pub fn set_ignorableprops(&mut self, ignorableprops: ::models::ConfigNodePropertyArray) {
    self.ignorableprops = Some(ignorableprops);
  }

  pub fn with_ignorableprops(mut self, ignorableprops: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
    self.ignorableprops = Some(ignorableprops);
    self
  }

  pub fn ignorableprops(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.ignorableprops.as_ref()
  }

  pub fn reset_ignorableprops(&mut self) {
    self.ignorableprops = None;
  }

  pub fn set_ignorablenodes(&mut self, ignorablenodes: ::models::ConfigNodePropertyArray) {
    self.ignorablenodes = Some(ignorablenodes);
  }

  pub fn with_ignorablenodes(mut self, ignorablenodes: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
    self.ignorablenodes = Some(ignorablenodes);
    self
  }

  pub fn ignorablenodes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.ignorablenodes.as_ref()
  }

  pub fn reset_ignorablenodes(&mut self) {
    self.ignorablenodes = None;
  }

  pub fn set_enabled(&mut self, enabled: ::models::ConfigNodePropertyBoolean) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_distfolders(&mut self, distfolders: ::models::ConfigNodePropertyArray) {
    self.distfolders = Some(distfolders);
  }

  pub fn with_distfolders(mut self, distfolders: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
    self.distfolders = Some(distfolders);
    self
  }

  pub fn distfolders(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.distfolders.as_ref()
  }

  pub fn reset_distfolders(&mut self) {
    self.distfolders = None;
  }

}



