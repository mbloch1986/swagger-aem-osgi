/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.h
 *
 * 
 */

#ifndef OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_
#define OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyDropDown.h"
#include "OAIOAIConfigNodePropertyFloat.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties: public OAIObject {
public:
    OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
    OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties(QString json);
    ~OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyInteger* getServiceRanking();
    void setServiceRanking(OAIConfigNodePropertyInteger* service_ranking);

    OAIConfigNodePropertyInteger* getGlobalSize();
    void setGlobalSize(OAIConfigNodePropertyInteger* global_size);

    OAIConfigNodePropertyInteger* getMaxDiskUsage();
    void setMaxDiskUsage(OAIConfigNodePropertyInteger* max_disk_usage);

    OAIConfigNodePropertyBoolean* getPersistenceEnabled();
    void setPersistenceEnabled(OAIConfigNodePropertyBoolean* persistence_enabled);

    OAIConfigNodePropertyInteger* getThreadPoolMaxSize();
    void setThreadPoolMaxSize(OAIConfigNodePropertyInteger* thread_pool_max_size);

    OAIConfigNodePropertyInteger* getScheduledThreadPoolMaxSize();
    void setScheduledThreadPoolMaxSize(OAIConfigNodePropertyInteger* scheduled_thread_pool_max_size);

    OAIConfigNodePropertyInteger* getGracefulShutdownTimeout();
    void setGracefulShutdownTimeout(OAIConfigNodePropertyInteger* graceful_shutdown_timeout);

    OAIConfigNodePropertyArray* getQueues();
    void setQueues(OAIConfigNodePropertyArray* queues);

    OAIConfigNodePropertyArray* getTopics();
    void setTopics(OAIConfigNodePropertyArray* topics);

    OAIConfigNodePropertyInteger* getAddressesMaxDeliveryAttempts();
    void setAddressesMaxDeliveryAttempts(OAIConfigNodePropertyInteger* addresses_max_delivery_attempts);

    OAIConfigNodePropertyInteger* getAddressesExpiryDelay();
    void setAddressesExpiryDelay(OAIConfigNodePropertyInteger* addresses_expiry_delay);

    OAIConfigNodePropertyDropDown* getAddressesAddressFullMessagePolicy();
    void setAddressesAddressFullMessagePolicy(OAIConfigNodePropertyDropDown* addresses_address_full_message_policy);

    OAIConfigNodePropertyInteger* getAddressesMaxSizeBytes();
    void setAddressesMaxSizeBytes(OAIConfigNodePropertyInteger* addresses_max_size_bytes);

    OAIConfigNodePropertyInteger* getAddressesPageSizeBytes();
    void setAddressesPageSizeBytes(OAIConfigNodePropertyInteger* addresses_page_size_bytes);

    OAIConfigNodePropertyInteger* getAddressesPageCacheMaxSize();
    void setAddressesPageCacheMaxSize(OAIConfigNodePropertyInteger* addresses_page_cache_max_size);

    OAIConfigNodePropertyString* getClusterUser();
    void setClusterUser(OAIConfigNodePropertyString* cluster_user);

    OAIConfigNodePropertyString* getClusterPassword();
    void setClusterPassword(OAIConfigNodePropertyString* cluster_password);

    OAIConfigNodePropertyInteger* getClusterCallTimeout();
    void setClusterCallTimeout(OAIConfigNodePropertyInteger* cluster_call_timeout);

    OAIConfigNodePropertyInteger* getClusterCallFailoverTimeout();
    void setClusterCallFailoverTimeout(OAIConfigNodePropertyInteger* cluster_call_failover_timeout);

    OAIConfigNodePropertyInteger* getClusterClientFailureCheckPeriod();
    void setClusterClientFailureCheckPeriod(OAIConfigNodePropertyInteger* cluster_client_failure_check_period);

    OAIConfigNodePropertyInteger* getClusterNotificationAttempts();
    void setClusterNotificationAttempts(OAIConfigNodePropertyInteger* cluster_notification_attempts);

    OAIConfigNodePropertyInteger* getClusterNotificationInterval();
    void setClusterNotificationInterval(OAIConfigNodePropertyInteger* cluster_notification_interval);

    OAIConfigNodePropertyInteger* getIdCacheSize();
    void setIdCacheSize(OAIConfigNodePropertyInteger* id_cache_size);

    OAIConfigNodePropertyInteger* getClusterConfirmationWindowSize();
    void setClusterConfirmationWindowSize(OAIConfigNodePropertyInteger* cluster_confirmation_window_size);

    OAIConfigNodePropertyInteger* getClusterConnectionTtl();
    void setClusterConnectionTtl(OAIConfigNodePropertyInteger* cluster_connection_ttl);

    OAIConfigNodePropertyBoolean* getClusterDuplicateDetection();
    void setClusterDuplicateDetection(OAIConfigNodePropertyBoolean* cluster_duplicate_detection);

    OAIConfigNodePropertyInteger* getClusterInitialConnectAttempts();
    void setClusterInitialConnectAttempts(OAIConfigNodePropertyInteger* cluster_initial_connect_attempts);

    OAIConfigNodePropertyInteger* getClusterMaxRetryInterval();
    void setClusterMaxRetryInterval(OAIConfigNodePropertyInteger* cluster_max_retry_interval);

    OAIConfigNodePropertyInteger* getClusterMinLargeMessageSize();
    void setClusterMinLargeMessageSize(OAIConfigNodePropertyInteger* cluster_min_large_message_size);

    OAIConfigNodePropertyInteger* getClusterProducerWindowSize();
    void setClusterProducerWindowSize(OAIConfigNodePropertyInteger* cluster_producer_window_size);

    OAIConfigNodePropertyInteger* getClusterReconnectAttempts();
    void setClusterReconnectAttempts(OAIConfigNodePropertyInteger* cluster_reconnect_attempts);

    OAIConfigNodePropertyInteger* getClusterRetryInterval();
    void setClusterRetryInterval(OAIConfigNodePropertyInteger* cluster_retry_interval);

    OAIConfigNodePropertyFloat* getClusterRetryIntervalMultiplier();
    void setClusterRetryIntervalMultiplier(OAIConfigNodePropertyFloat* cluster_retry_interval_multiplier);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyInteger* service_ranking;
    bool m_service_ranking_isSet;

    OAIConfigNodePropertyInteger* global_size;
    bool m_global_size_isSet;

    OAIConfigNodePropertyInteger* max_disk_usage;
    bool m_max_disk_usage_isSet;

    OAIConfigNodePropertyBoolean* persistence_enabled;
    bool m_persistence_enabled_isSet;

    OAIConfigNodePropertyInteger* thread_pool_max_size;
    bool m_thread_pool_max_size_isSet;

    OAIConfigNodePropertyInteger* scheduled_thread_pool_max_size;
    bool m_scheduled_thread_pool_max_size_isSet;

    OAIConfigNodePropertyInteger* graceful_shutdown_timeout;
    bool m_graceful_shutdown_timeout_isSet;

    OAIConfigNodePropertyArray* queues;
    bool m_queues_isSet;

    OAIConfigNodePropertyArray* topics;
    bool m_topics_isSet;

    OAIConfigNodePropertyInteger* addresses_max_delivery_attempts;
    bool m_addresses_max_delivery_attempts_isSet;

    OAIConfigNodePropertyInteger* addresses_expiry_delay;
    bool m_addresses_expiry_delay_isSet;

    OAIConfigNodePropertyDropDown* addresses_address_full_message_policy;
    bool m_addresses_address_full_message_policy_isSet;

    OAIConfigNodePropertyInteger* addresses_max_size_bytes;
    bool m_addresses_max_size_bytes_isSet;

    OAIConfigNodePropertyInteger* addresses_page_size_bytes;
    bool m_addresses_page_size_bytes_isSet;

    OAIConfigNodePropertyInteger* addresses_page_cache_max_size;
    bool m_addresses_page_cache_max_size_isSet;

    OAIConfigNodePropertyString* cluster_user;
    bool m_cluster_user_isSet;

    OAIConfigNodePropertyString* cluster_password;
    bool m_cluster_password_isSet;

    OAIConfigNodePropertyInteger* cluster_call_timeout;
    bool m_cluster_call_timeout_isSet;

    OAIConfigNodePropertyInteger* cluster_call_failover_timeout;
    bool m_cluster_call_failover_timeout_isSet;

    OAIConfigNodePropertyInteger* cluster_client_failure_check_period;
    bool m_cluster_client_failure_check_period_isSet;

    OAIConfigNodePropertyInteger* cluster_notification_attempts;
    bool m_cluster_notification_attempts_isSet;

    OAIConfigNodePropertyInteger* cluster_notification_interval;
    bool m_cluster_notification_interval_isSet;

    OAIConfigNodePropertyInteger* id_cache_size;
    bool m_id_cache_size_isSet;

    OAIConfigNodePropertyInteger* cluster_confirmation_window_size;
    bool m_cluster_confirmation_window_size_isSet;

    OAIConfigNodePropertyInteger* cluster_connection_ttl;
    bool m_cluster_connection_ttl_isSet;

    OAIConfigNodePropertyBoolean* cluster_duplicate_detection;
    bool m_cluster_duplicate_detection_isSet;

    OAIConfigNodePropertyInteger* cluster_initial_connect_attempts;
    bool m_cluster_initial_connect_attempts_isSet;

    OAIConfigNodePropertyInteger* cluster_max_retry_interval;
    bool m_cluster_max_retry_interval_isSet;

    OAIConfigNodePropertyInteger* cluster_min_large_message_size;
    bool m_cluster_min_large_message_size_isSet;

    OAIConfigNodePropertyInteger* cluster_producer_window_size;
    bool m_cluster_producer_window_size_isSet;

    OAIConfigNodePropertyInteger* cluster_reconnect_attempts;
    bool m_cluster_reconnect_attempts_isSet;

    OAIConfigNodePropertyInteger* cluster_retry_interval;
    bool m_cluster_retry_interval_isSet;

    OAIConfigNodePropertyFloat* cluster_retry_interval_multiplier;
    bool m_cluster_retry_interval_multiplier_isSet;

};

}

#endif /* OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_ */
