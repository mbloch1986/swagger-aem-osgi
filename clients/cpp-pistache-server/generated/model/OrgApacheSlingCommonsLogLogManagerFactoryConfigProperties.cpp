/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties()
{
    m_Org_apache_sling_commons_log_levelIsSet = false;
    m_Org_apache_sling_commons_log_fileIsSet = false;
    m_Org_apache_sling_commons_log_patternIsSet = false;
    m_Org_apache_sling_commons_log_namesIsSet = false;
    m_Org_apache_sling_commons_log_additivIsSet = false;
    
}

OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::~OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties()
{
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Org_apache_sling_commons_log_levelIsSet)
    {
        val["org.apache.sling.commons.log.level"] = ModelBase::toJson(m_Org_apache_sling_commons_log_level);
    }
    if(m_Org_apache_sling_commons_log_fileIsSet)
    {
        val["org.apache.sling.commons.log.file"] = ModelBase::toJson(m_Org_apache_sling_commons_log_file);
    }
    if(m_Org_apache_sling_commons_log_patternIsSet)
    {
        val["org.apache.sling.commons.log.pattern"] = ModelBase::toJson(m_Org_apache_sling_commons_log_pattern);
    }
    if(m_Org_apache_sling_commons_log_namesIsSet)
    {
        val["org.apache.sling.commons.log.names"] = ModelBase::toJson(m_Org_apache_sling_commons_log_names);
    }
    if(m_Org_apache_sling_commons_log_additivIsSet)
    {
        val["org.apache.sling.commons.log.additiv"] = ModelBase::toJson(m_Org_apache_sling_commons_log_additiv);
    }
    

    return val;
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::fromJson(nlohmann::json& val)
{
    if(val.find("org.apache.sling.commons.log.level") != val.end())
    {
        if(!val["org.apache.sling.commons.log.level"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["org.apache.sling.commons.log.level"]);
            setOrgApacheSlingCommonsLogLevel( newItem );
        }
        
    }
    if(val.find("org.apache.sling.commons.log.file") != val.end())
    {
        if(!val["org.apache.sling.commons.log.file"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.sling.commons.log.file"]);
            setOrgApacheSlingCommonsLogFile( newItem );
        }
        
    }
    if(val.find("org.apache.sling.commons.log.pattern") != val.end())
    {
        if(!val["org.apache.sling.commons.log.pattern"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.sling.commons.log.pattern"]);
            setOrgApacheSlingCommonsLogPattern( newItem );
        }
        
    }
    if(val.find("org.apache.sling.commons.log.names") != val.end())
    {
        if(!val["org.apache.sling.commons.log.names"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.sling.commons.log.names"]);
            setOrgApacheSlingCommonsLogNames( newItem );
        }
        
    }
    if(val.find("org.apache.sling.commons.log.additiv") != val.end())
    {
        if(!val["org.apache.sling.commons.log.additiv"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.sling.commons.log.additiv"]);
            setOrgApacheSlingCommonsLogAdditiv( newItem );
        }
        
    }
    
}


ConfigNodePropertyDropDown OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogLevel() const
{
    return m_Org_apache_sling_commons_log_level;
}
void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogLevel(ConfigNodePropertyDropDown const& value)
{
    m_Org_apache_sling_commons_log_level = value;
    m_Org_apache_sling_commons_log_levelIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::orgApacheSlingCommonsLogLevelIsSet() const
{
    return m_Org_apache_sling_commons_log_levelIsSet;
}
void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::unsetOrg_apache_sling_commons_log_level()
{
    m_Org_apache_sling_commons_log_levelIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogFile() const
{
    return m_Org_apache_sling_commons_log_file;
}
void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogFile(ConfigNodePropertyString const& value)
{
    m_Org_apache_sling_commons_log_file = value;
    m_Org_apache_sling_commons_log_fileIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::orgApacheSlingCommonsLogFileIsSet() const
{
    return m_Org_apache_sling_commons_log_fileIsSet;
}
void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::unsetOrg_apache_sling_commons_log_file()
{
    m_Org_apache_sling_commons_log_fileIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogPattern() const
{
    return m_Org_apache_sling_commons_log_pattern;
}
void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogPattern(ConfigNodePropertyString const& value)
{
    m_Org_apache_sling_commons_log_pattern = value;
    m_Org_apache_sling_commons_log_patternIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::orgApacheSlingCommonsLogPatternIsSet() const
{
    return m_Org_apache_sling_commons_log_patternIsSet;
}
void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::unsetOrg_apache_sling_commons_log_pattern()
{
    m_Org_apache_sling_commons_log_patternIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogNames() const
{
    return m_Org_apache_sling_commons_log_names;
}
void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogNames(ConfigNodePropertyArray const& value)
{
    m_Org_apache_sling_commons_log_names = value;
    m_Org_apache_sling_commons_log_namesIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::orgApacheSlingCommonsLogNamesIsSet() const
{
    return m_Org_apache_sling_commons_log_namesIsSet;
}
void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::unsetOrg_apache_sling_commons_log_names()
{
    m_Org_apache_sling_commons_log_namesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogAdditiv() const
{
    return m_Org_apache_sling_commons_log_additiv;
}
void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogAdditiv(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_sling_commons_log_additiv = value;
    m_Org_apache_sling_commons_log_additivIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::orgApacheSlingCommonsLogAdditivIsSet() const
{
    return m_Org_apache_sling_commons_log_additivIsSet;
}
void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::unsetOrg_apache_sling_commons_log_additiv()
{
    m_Org_apache_sling_commons_log_additivIsSet = false;
}

}
}
}
}

