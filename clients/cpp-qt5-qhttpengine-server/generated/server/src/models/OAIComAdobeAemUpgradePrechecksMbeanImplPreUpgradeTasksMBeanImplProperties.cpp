/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties() {
    this->init();
}

OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::~OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties() {
    
}

void
OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::init() {
    m_pre_upgrade_maintenance_tasks_isSet = false;
    m_pre_upgrade_hc_tags_isSet = false;
}

void
OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(pre_upgrade_maintenance_tasks, json[QString("pre-upgrade.maintenance.tasks")]);
    
    ::OpenAPI::fromJsonValue(pre_upgrade_hc_tags, json[QString("pre-upgrade.hc.tags")]);
    
}

QString
OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(pre_upgrade_maintenance_tasks.isSet()){
        obj.insert(QString("pre-upgrade.maintenance.tasks"), ::OpenAPI::toJsonValue(pre_upgrade_maintenance_tasks));
    }
	if(pre_upgrade_hc_tags.isSet()){
        obj.insert(QString("pre-upgrade.hc.tags"), ::OpenAPI::toJsonValue(pre_upgrade_hc_tags));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::getPreUpgradeMaintenanceTasks() const {
    return pre_upgrade_maintenance_tasks;
}
void
OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::setPreUpgradeMaintenanceTasks(const OAIConfigNodePropertyArray &pre_upgrade_maintenance_tasks) {
    this->pre_upgrade_maintenance_tasks = pre_upgrade_maintenance_tasks;
    this->m_pre_upgrade_maintenance_tasks_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::getPreUpgradeHcTags() const {
    return pre_upgrade_hc_tags;
}
void
OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::setPreUpgradeHcTags(const OAIConfigNodePropertyArray &pre_upgrade_hc_tags) {
    this->pre_upgrade_hc_tags = pre_upgrade_hc_tags;
    this->m_pre_upgrade_hc_tags_isSet = true;
}


bool
OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(pre_upgrade_maintenance_tasks.isSet()){ isObjectUpdated = true; break;}
    
        if(pre_upgrade_hc_tags.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

