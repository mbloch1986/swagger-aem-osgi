/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties
    : public ModelBase
{
public:
    ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties();
    virtual ~ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCdnConfigDistributionDomain() const;
    bool cdnConfigDistributionDomainIsSet() const;
    void unsetCdn_config_distribution_domain();
    void setCdnConfigDistributionDomain(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCdnConfigEnableRewriting() const;
    bool cdnConfigEnableRewritingIsSet() const;
    void unsetCdn_config_enable_rewriting();
    void setCdnConfigEnableRewriting(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getCdnConfigPathPrefixes() const;
    bool cdnConfigPathPrefixesIsSet() const;
    void unsetCdn_config_path_prefixes();
    void setCdnConfigPathPrefixes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCdnConfigCdnttl() const;
    bool cdnConfigCdnttlIsSet() const;
    void unsetCdn_config_cdnttl();
    void setCdnConfigCdnttl(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCdnConfigApplicationProtocol() const;
    bool cdnConfigApplicationProtocolIsSet() const;
    void unsetCdn_config_application_protocol();
    void setCdnConfigApplicationProtocol(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Cdn_config_distribution_domain;
    bool m_Cdn_config_distribution_domainIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Cdn_config_enable_rewriting;
    bool m_Cdn_config_enable_rewritingIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Cdn_config_path_prefixes;
    bool m_Cdn_config_path_prefixesIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cdn_config_cdnttl;
    bool m_Cdn_config_cdnttlIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Cdn_config_application_protocol;
    bool m_Cdn_config_application_protocolIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties_H_ */
