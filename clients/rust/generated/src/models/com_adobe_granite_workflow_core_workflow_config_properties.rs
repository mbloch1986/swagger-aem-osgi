/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
  #[serde(rename = "cq.workflow.config.workflow.packages.root.path")]
  cq_workflow_config_workflow_packages_root_path: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cq.workflow.config.workflow.process.legacy.mode")]
  cq_workflow_config_workflow_process_legacy_mode: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "cq.workflow.config.allow.locking")]
  cq_workflow_config_allow_locking: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
  pub fn new() -> ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
    ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
      cq_workflow_config_workflow_packages_root_path: None,
      cq_workflow_config_workflow_process_legacy_mode: None,
      cq_workflow_config_allow_locking: None
    }
  }

  pub fn set_cq_workflow_config_workflow_packages_root_path(&mut self, cq_workflow_config_workflow_packages_root_path: ::models::ConfigNodePropertyArray) {
    self.cq_workflow_config_workflow_packages_root_path = Some(cq_workflow_config_workflow_packages_root_path);
  }

  pub fn with_cq_workflow_config_workflow_packages_root_path(mut self, cq_workflow_config_workflow_packages_root_path: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
    self.cq_workflow_config_workflow_packages_root_path = Some(cq_workflow_config_workflow_packages_root_path);
    self
  }

  pub fn cq_workflow_config_workflow_packages_root_path(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cq_workflow_config_workflow_packages_root_path.as_ref()
  }

  pub fn reset_cq_workflow_config_workflow_packages_root_path(&mut self) {
    self.cq_workflow_config_workflow_packages_root_path = None;
  }

  pub fn set_cq_workflow_config_workflow_process_legacy_mode(&mut self, cq_workflow_config_workflow_process_legacy_mode: ::models::ConfigNodePropertyBoolean) {
    self.cq_workflow_config_workflow_process_legacy_mode = Some(cq_workflow_config_workflow_process_legacy_mode);
  }

  pub fn with_cq_workflow_config_workflow_process_legacy_mode(mut self, cq_workflow_config_workflow_process_legacy_mode: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
    self.cq_workflow_config_workflow_process_legacy_mode = Some(cq_workflow_config_workflow_process_legacy_mode);
    self
  }

  pub fn cq_workflow_config_workflow_process_legacy_mode(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cq_workflow_config_workflow_process_legacy_mode.as_ref()
  }

  pub fn reset_cq_workflow_config_workflow_process_legacy_mode(&mut self) {
    self.cq_workflow_config_workflow_process_legacy_mode = None;
  }

  pub fn set_cq_workflow_config_allow_locking(&mut self, cq_workflow_config_allow_locking: ::models::ConfigNodePropertyBoolean) {
    self.cq_workflow_config_allow_locking = Some(cq_workflow_config_allow_locking);
  }

  pub fn with_cq_workflow_config_allow_locking(mut self, cq_workflow_config_allow_locking: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
    self.cq_workflow_config_allow_locking = Some(cq_workflow_config_allow_locking);
    self
  }

  pub fn cq_workflow_config_allow_locking(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cq_workflow_config_allow_locking.as_ref()
  }

  pub fn reset_cq_workflow_config_allow_locking(&mut self) {
    self.cq_workflow_config_allow_locking = None;
  }

}



