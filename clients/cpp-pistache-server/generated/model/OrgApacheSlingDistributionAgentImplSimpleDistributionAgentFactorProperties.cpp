/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties()
{
    m_NameIsSet = false;
    m_TitleIsSet = false;
    m_DetailsIsSet = false;
    m_EnabledIsSet = false;
    m_ServiceNameIsSet = false;
    m_Log_levelIsSet = false;
    m_Queue_processing_enabledIsSet = false;
    m_PackageExporter_targetIsSet = false;
    m_PackageImporter_targetIsSet = false;
    m_RequestAuthorizationStrategy_targetIsSet = false;
    m_Triggers_targetIsSet = false;
    
}

OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::~OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties()
{
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_TitleIsSet)
    {
        val["title"] = ModelBase::toJson(m_Title);
    }
    if(m_DetailsIsSet)
    {
        val["details"] = ModelBase::toJson(m_Details);
    }
    if(m_EnabledIsSet)
    {
        val["enabled"] = ModelBase::toJson(m_Enabled);
    }
    if(m_ServiceNameIsSet)
    {
        val["serviceName"] = ModelBase::toJson(m_ServiceName);
    }
    if(m_Log_levelIsSet)
    {
        val["log.level"] = ModelBase::toJson(m_Log_level);
    }
    if(m_Queue_processing_enabledIsSet)
    {
        val["queue.processing.enabled"] = ModelBase::toJson(m_Queue_processing_enabled);
    }
    if(m_PackageExporter_targetIsSet)
    {
        val["packageExporter.target"] = ModelBase::toJson(m_PackageExporter_target);
    }
    if(m_PackageImporter_targetIsSet)
    {
        val["packageImporter.target"] = ModelBase::toJson(m_PackageImporter_target);
    }
    if(m_RequestAuthorizationStrategy_targetIsSet)
    {
        val["requestAuthorizationStrategy.target"] = ModelBase::toJson(m_RequestAuthorizationStrategy_target);
    }
    if(m_Triggers_targetIsSet)
    {
        val["triggers.target"] = ModelBase::toJson(m_Triggers_target);
    }
    

    return val;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("title") != val.end())
    {
        if(!val["title"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["title"]);
            setTitle( newItem );
        }
        
    }
    if(val.find("details") != val.end())
    {
        if(!val["details"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["details"]);
            setDetails( newItem );
        }
        
    }
    if(val.find("enabled") != val.end())
    {
        if(!val["enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enabled"]);
            setEnabled( newItem );
        }
        
    }
    if(val.find("serviceName") != val.end())
    {
        if(!val["serviceName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["serviceName"]);
            setServiceName( newItem );
        }
        
    }
    if(val.find("log.level") != val.end())
    {
        if(!val["log.level"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["log.level"]);
            setLogLevel( newItem );
        }
        
    }
    if(val.find("queue.processing.enabled") != val.end())
    {
        if(!val["queue.processing.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["queue.processing.enabled"]);
            setQueueProcessingEnabled( newItem );
        }
        
    }
    if(val.find("packageExporter.target") != val.end())
    {
        if(!val["packageExporter.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["packageExporter.target"]);
            setPackageExporterTarget( newItem );
        }
        
    }
    if(val.find("packageImporter.target") != val.end())
    {
        if(!val["packageImporter.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["packageImporter.target"]);
            setPackageImporterTarget( newItem );
        }
        
    }
    if(val.find("requestAuthorizationStrategy.target") != val.end())
    {
        if(!val["requestAuthorizationStrategy.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["requestAuthorizationStrategy.target"]);
            setRequestAuthorizationStrategyTarget( newItem );
        }
        
    }
    if(val.find("triggers.target") != val.end())
    {
        if(!val["triggers.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["triggers.target"]);
            setTriggersTarget( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getTitle() const
{
    return m_Title;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setTitle(ConfigNodePropertyString const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::titleIsSet() const
{
    return m_TitleIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetTitle()
{
    m_TitleIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getDetails() const
{
    return m_Details;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setDetails(ConfigNodePropertyString const& value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::detailsIsSet() const
{
    return m_DetailsIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetDetails()
{
    m_DetailsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getEnabled() const
{
    return m_Enabled;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getServiceName() const
{
    return m_ServiceName;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setServiceName(ConfigNodePropertyString const& value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getLogLevel() const
{
    return m_Log_level;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setLogLevel(ConfigNodePropertyDropDown const& value)
{
    m_Log_level = value;
    m_Log_levelIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::logLevelIsSet() const
{
    return m_Log_levelIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetLog_level()
{
    m_Log_levelIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getQueueProcessingEnabled() const
{
    return m_Queue_processing_enabled;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setQueueProcessingEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Queue_processing_enabled = value;
    m_Queue_processing_enabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::queueProcessingEnabledIsSet() const
{
    return m_Queue_processing_enabledIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetQueue_processing_enabled()
{
    m_Queue_processing_enabledIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getPackageExporterTarget() const
{
    return m_PackageExporter_target;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setPackageExporterTarget(ConfigNodePropertyString const& value)
{
    m_PackageExporter_target = value;
    m_PackageExporter_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::packageExporterTargetIsSet() const
{
    return m_PackageExporter_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetPackageExporter_target()
{
    m_PackageExporter_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getPackageImporterTarget() const
{
    return m_PackageImporter_target;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setPackageImporterTarget(ConfigNodePropertyString const& value)
{
    m_PackageImporter_target = value;
    m_PackageImporter_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::packageImporterTargetIsSet() const
{
    return m_PackageImporter_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetPackageImporter_target()
{
    m_PackageImporter_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getRequestAuthorizationStrategyTarget() const
{
    return m_RequestAuthorizationStrategy_target;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setRequestAuthorizationStrategyTarget(ConfigNodePropertyString const& value)
{
    m_RequestAuthorizationStrategy_target = value;
    m_RequestAuthorizationStrategy_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::requestAuthorizationStrategyTargetIsSet() const
{
    return m_RequestAuthorizationStrategy_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetRequestAuthorizationStrategy_target()
{
    m_RequestAuthorizationStrategy_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getTriggersTarget() const
{
    return m_Triggers_target;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setTriggersTarget(ConfigNodePropertyString const& value)
{
    m_Triggers_target = value;
    m_Triggers_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::triggersTargetIsSet() const
{
    return m_Triggers_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetTriggers_target()
{
    m_Triggers_targetIsSet = false;
}

}
}
}
}

