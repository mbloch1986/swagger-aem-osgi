/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
  #[serde(rename = "handler.schemes")]
  handler_schemes: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "sling.jcrinstall.folder.name.regexp")]
  sling_jcrinstall_folder_name_regexp: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sling.jcrinstall.folder.max.depth")]
  sling_jcrinstall_folder_max_depth: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "sling.jcrinstall.search.path")]
  sling_jcrinstall_search_path: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "sling.jcrinstall.new.config.path")]
  sling_jcrinstall_new_config_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sling.jcrinstall.signal.path")]
  sling_jcrinstall_signal_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sling.jcrinstall.enable.writeback")]
  sling_jcrinstall_enable_writeback: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
  pub fn new() -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
    OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
      handler_schemes: None,
      sling_jcrinstall_folder_name_regexp: None,
      sling_jcrinstall_folder_max_depth: None,
      sling_jcrinstall_search_path: None,
      sling_jcrinstall_new_config_path: None,
      sling_jcrinstall_signal_path: None,
      sling_jcrinstall_enable_writeback: None
    }
  }

  pub fn set_handler_schemes(&mut self, handler_schemes: ::models::ConfigNodePropertyArray) {
    self.handler_schemes = Some(handler_schemes);
  }

  pub fn with_handler_schemes(mut self, handler_schemes: ::models::ConfigNodePropertyArray) -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
    self.handler_schemes = Some(handler_schemes);
    self
  }

  pub fn handler_schemes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.handler_schemes.as_ref()
  }

  pub fn reset_handler_schemes(&mut self) {
    self.handler_schemes = None;
  }

  pub fn set_sling_jcrinstall_folder_name_regexp(&mut self, sling_jcrinstall_folder_name_regexp: ::models::ConfigNodePropertyString) {
    self.sling_jcrinstall_folder_name_regexp = Some(sling_jcrinstall_folder_name_regexp);
  }

  pub fn with_sling_jcrinstall_folder_name_regexp(mut self, sling_jcrinstall_folder_name_regexp: ::models::ConfigNodePropertyString) -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
    self.sling_jcrinstall_folder_name_regexp = Some(sling_jcrinstall_folder_name_regexp);
    self
  }

  pub fn sling_jcrinstall_folder_name_regexp(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_jcrinstall_folder_name_regexp.as_ref()
  }

  pub fn reset_sling_jcrinstall_folder_name_regexp(&mut self) {
    self.sling_jcrinstall_folder_name_regexp = None;
  }

  pub fn set_sling_jcrinstall_folder_max_depth(&mut self, sling_jcrinstall_folder_max_depth: ::models::ConfigNodePropertyInteger) {
    self.sling_jcrinstall_folder_max_depth = Some(sling_jcrinstall_folder_max_depth);
  }

  pub fn with_sling_jcrinstall_folder_max_depth(mut self, sling_jcrinstall_folder_max_depth: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
    self.sling_jcrinstall_folder_max_depth = Some(sling_jcrinstall_folder_max_depth);
    self
  }

  pub fn sling_jcrinstall_folder_max_depth(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.sling_jcrinstall_folder_max_depth.as_ref()
  }

  pub fn reset_sling_jcrinstall_folder_max_depth(&mut self) {
    self.sling_jcrinstall_folder_max_depth = None;
  }

  pub fn set_sling_jcrinstall_search_path(&mut self, sling_jcrinstall_search_path: ::models::ConfigNodePropertyArray) {
    self.sling_jcrinstall_search_path = Some(sling_jcrinstall_search_path);
  }

  pub fn with_sling_jcrinstall_search_path(mut self, sling_jcrinstall_search_path: ::models::ConfigNodePropertyArray) -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
    self.sling_jcrinstall_search_path = Some(sling_jcrinstall_search_path);
    self
  }

  pub fn sling_jcrinstall_search_path(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.sling_jcrinstall_search_path.as_ref()
  }

  pub fn reset_sling_jcrinstall_search_path(&mut self) {
    self.sling_jcrinstall_search_path = None;
  }

  pub fn set_sling_jcrinstall_new_config_path(&mut self, sling_jcrinstall_new_config_path: ::models::ConfigNodePropertyString) {
    self.sling_jcrinstall_new_config_path = Some(sling_jcrinstall_new_config_path);
  }

  pub fn with_sling_jcrinstall_new_config_path(mut self, sling_jcrinstall_new_config_path: ::models::ConfigNodePropertyString) -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
    self.sling_jcrinstall_new_config_path = Some(sling_jcrinstall_new_config_path);
    self
  }

  pub fn sling_jcrinstall_new_config_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_jcrinstall_new_config_path.as_ref()
  }

  pub fn reset_sling_jcrinstall_new_config_path(&mut self) {
    self.sling_jcrinstall_new_config_path = None;
  }

  pub fn set_sling_jcrinstall_signal_path(&mut self, sling_jcrinstall_signal_path: ::models::ConfigNodePropertyString) {
    self.sling_jcrinstall_signal_path = Some(sling_jcrinstall_signal_path);
  }

  pub fn with_sling_jcrinstall_signal_path(mut self, sling_jcrinstall_signal_path: ::models::ConfigNodePropertyString) -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
    self.sling_jcrinstall_signal_path = Some(sling_jcrinstall_signal_path);
    self
  }

  pub fn sling_jcrinstall_signal_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_jcrinstall_signal_path.as_ref()
  }

  pub fn reset_sling_jcrinstall_signal_path(&mut self) {
    self.sling_jcrinstall_signal_path = None;
  }

  pub fn set_sling_jcrinstall_enable_writeback(&mut self, sling_jcrinstall_enable_writeback: ::models::ConfigNodePropertyBoolean) {
    self.sling_jcrinstall_enable_writeback = Some(sling_jcrinstall_enable_writeback);
  }

  pub fn with_sling_jcrinstall_enable_writeback(mut self, sling_jcrinstall_enable_writeback: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
    self.sling_jcrinstall_enable_writeback = Some(sling_jcrinstall_enable_writeback);
    self
  }

  pub fn sling_jcrinstall_enable_writeback(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.sling_jcrinstall_enable_writeback.as_ref()
  }

  pub fn reset_sling_jcrinstall_enable_writeback(&mut self) {
    self.sling_jcrinstall_enable_writeback = None;
  }

}



