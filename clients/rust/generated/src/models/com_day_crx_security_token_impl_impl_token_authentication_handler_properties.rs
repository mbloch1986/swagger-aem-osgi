/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
  #[serde(rename = "path")]
  path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "token.required.attr")]
  token_required_attr: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "token.alternate.url")]
  token_alternate_url: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "token.encapsulated")]
  token_encapsulated: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "skip.token.refresh")]
  skip_token_refresh: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
  pub fn new() -> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
    ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
      path: None,
      token_required_attr: None,
      token_alternate_url: None,
      token_encapsulated: None,
      skip_token_refresh: None
    }
  }

  pub fn set_path(&mut self, path: ::models::ConfigNodePropertyString) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: ::models::ConfigNodePropertyString) -> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_token_required_attr(&mut self, token_required_attr: ::models::ConfigNodePropertyDropDown) {
    self.token_required_attr = Some(token_required_attr);
  }

  pub fn with_token_required_attr(mut self, token_required_attr: ::models::ConfigNodePropertyDropDown) -> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
    self.token_required_attr = Some(token_required_attr);
    self
  }

  pub fn token_required_attr(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.token_required_attr.as_ref()
  }

  pub fn reset_token_required_attr(&mut self) {
    self.token_required_attr = None;
  }

  pub fn set_token_alternate_url(&mut self, token_alternate_url: ::models::ConfigNodePropertyString) {
    self.token_alternate_url = Some(token_alternate_url);
  }

  pub fn with_token_alternate_url(mut self, token_alternate_url: ::models::ConfigNodePropertyString) -> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
    self.token_alternate_url = Some(token_alternate_url);
    self
  }

  pub fn token_alternate_url(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.token_alternate_url.as_ref()
  }

  pub fn reset_token_alternate_url(&mut self) {
    self.token_alternate_url = None;
  }

  pub fn set_token_encapsulated(&mut self, token_encapsulated: ::models::ConfigNodePropertyBoolean) {
    self.token_encapsulated = Some(token_encapsulated);
  }

  pub fn with_token_encapsulated(mut self, token_encapsulated: ::models::ConfigNodePropertyBoolean) -> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
    self.token_encapsulated = Some(token_encapsulated);
    self
  }

  pub fn token_encapsulated(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.token_encapsulated.as_ref()
  }

  pub fn reset_token_encapsulated(&mut self) {
    self.token_encapsulated = None;
  }

  pub fn set_skip_token_refresh(&mut self, skip_token_refresh: ::models::ConfigNodePropertyArray) {
    self.skip_token_refresh = Some(skip_token_refresh);
  }

  pub fn with_skip_token_refresh(mut self, skip_token_refresh: ::models::ConfigNodePropertyArray) -> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
    self.skip_token_refresh = Some(skip_token_refresh);
    self
  }

  pub fn skip_token_refresh(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.skip_token_refresh.as_ref()
  }

  pub fn reset_skip_token_refresh(&mut self) {
    self.skip_token_refresh = None;
  }

}



