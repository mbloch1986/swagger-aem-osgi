/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingEngineImplSlingMainServletProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingEngineImplSlingMainServletProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingEngineImplSlingMainServletProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingEngineImplSlingMainServletProperties
    : public ModelBase
{
public:
    OrgApacheSlingEngineImplSlingMainServletProperties();
    virtual ~OrgApacheSlingEngineImplSlingMainServletProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingEngineImplSlingMainServletProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSlingMaxCalls() const;
    bool slingMaxCallsIsSet() const;
    void unsetSling_max_calls();
    void setSlingMaxCalls(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSlingMaxInclusions() const;
    bool slingMaxInclusionsIsSet() const;
    void unsetSling_max_inclusions();
    void setSlingMaxInclusions(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSlingTraceAllow() const;
    bool slingTraceAllowIsSet() const;
    void unsetSling_trace_allow();
    void setSlingTraceAllow(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSlingMaxRecordRequests() const;
    bool slingMaxRecordRequestsIsSet() const;
    void unsetSling_max_record_requests();
    void setSlingMaxRecordRequests(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getSlingStorePatternRequests() const;
    bool slingStorePatternRequestsIsSet() const;
    void unsetSling_store_pattern_requests();
    void setSlingStorePatternRequests(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSlingServerinfo() const;
    bool slingServerinfoIsSet() const;
    void unsetSling_serverinfo();
    void setSlingServerinfo(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getSlingAdditionalResponseHeaders() const;
    bool slingAdditionalResponseHeadersIsSet() const;
    void unsetSling_additional_response_headers();
    void setSlingAdditionalResponseHeaders(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Sling_max_calls;
    bool m_Sling_max_callsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Sling_max_inclusions;
    bool m_Sling_max_inclusionsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Sling_trace_allow;
    bool m_Sling_trace_allowIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Sling_max_record_requests;
    bool m_Sling_max_record_requestsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Sling_store_pattern_requests;
    bool m_Sling_store_pattern_requestsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Sling_serverinfo;
    bool m_Sling_serverinfoIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Sling_additional_response_headers;
    bool m_Sling_additional_response_headersIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingEngineImplSlingMainServletProperties_H_ */
