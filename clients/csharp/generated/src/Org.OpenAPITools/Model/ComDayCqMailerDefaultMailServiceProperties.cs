/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqMailerDefaultMailServiceProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqMailerDefaultMailServiceProperties :  IEquatable<ComDayCqMailerDefaultMailServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqMailerDefaultMailServiceProperties" /> class.
        /// </summary>
        /// <param name="smtpHost">smtpHost.</param>
        /// <param name="smtpPort">smtpPort.</param>
        /// <param name="smtpUser">smtpUser.</param>
        /// <param name="smtpPassword">smtpPassword.</param>
        /// <param name="fromAddress">fromAddress.</param>
        /// <param name="smtpSsl">smtpSsl.</param>
        /// <param name="smtpStarttls">smtpStarttls.</param>
        /// <param name="debugEmail">debugEmail.</param>
        public ComDayCqMailerDefaultMailServiceProperties(ConfigNodePropertyString smtpHost = default(ConfigNodePropertyString), ConfigNodePropertyInteger smtpPort = default(ConfigNodePropertyInteger), ConfigNodePropertyString smtpUser = default(ConfigNodePropertyString), ConfigNodePropertyString smtpPassword = default(ConfigNodePropertyString), ConfigNodePropertyString fromAddress = default(ConfigNodePropertyString), ConfigNodePropertyBoolean smtpSsl = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean smtpStarttls = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean debugEmail = default(ConfigNodePropertyBoolean))
        {
            this.SmtpHost = smtpHost;
            this.SmtpPort = smtpPort;
            this.SmtpUser = smtpUser;
            this.SmtpPassword = smtpPassword;
            this.FromAddress = fromAddress;
            this.SmtpSsl = smtpSsl;
            this.SmtpStarttls = smtpStarttls;
            this.DebugEmail = debugEmail;
        }
        
        /// <summary>
        /// Gets or Sets SmtpHost
        /// </summary>
        [DataMember(Name="smtp.host", EmitDefaultValue=false)]
        public ConfigNodePropertyString SmtpHost { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPort
        /// </summary>
        [DataMember(Name="smtp.port", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SmtpPort { get; set; }

        /// <summary>
        /// Gets or Sets SmtpUser
        /// </summary>
        [DataMember(Name="smtp.user", EmitDefaultValue=false)]
        public ConfigNodePropertyString SmtpUser { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPassword
        /// </summary>
        [DataMember(Name="smtp.password", EmitDefaultValue=false)]
        public ConfigNodePropertyString SmtpPassword { get; set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [DataMember(Name="from.address", EmitDefaultValue=false)]
        public ConfigNodePropertyString FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets SmtpSsl
        /// </summary>
        [DataMember(Name="smtp.ssl", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SmtpSsl { get; set; }

        /// <summary>
        /// Gets or Sets SmtpStarttls
        /// </summary>
        [DataMember(Name="smtp.starttls", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SmtpStarttls { get; set; }

        /// <summary>
        /// Gets or Sets DebugEmail
        /// </summary>
        [DataMember(Name="debug.email", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DebugEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqMailerDefaultMailServiceProperties {\n");
            sb.Append("  SmtpHost: ").Append(SmtpHost).Append("\n");
            sb.Append("  SmtpPort: ").Append(SmtpPort).Append("\n");
            sb.Append("  SmtpUser: ").Append(SmtpUser).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  SmtpSsl: ").Append(SmtpSsl).Append("\n");
            sb.Append("  SmtpStarttls: ").Append(SmtpStarttls).Append("\n");
            sb.Append("  DebugEmail: ").Append(DebugEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqMailerDefaultMailServiceProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqMailerDefaultMailServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqMailerDefaultMailServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqMailerDefaultMailServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SmtpHost == input.SmtpHost ||
                    (this.SmtpHost != null &&
                    this.SmtpHost.Equals(input.SmtpHost))
                ) && 
                (
                    this.SmtpPort == input.SmtpPort ||
                    (this.SmtpPort != null &&
                    this.SmtpPort.Equals(input.SmtpPort))
                ) && 
                (
                    this.SmtpUser == input.SmtpUser ||
                    (this.SmtpUser != null &&
                    this.SmtpUser.Equals(input.SmtpUser))
                ) && 
                (
                    this.SmtpPassword == input.SmtpPassword ||
                    (this.SmtpPassword != null &&
                    this.SmtpPassword.Equals(input.SmtpPassword))
                ) && 
                (
                    this.FromAddress == input.FromAddress ||
                    (this.FromAddress != null &&
                    this.FromAddress.Equals(input.FromAddress))
                ) && 
                (
                    this.SmtpSsl == input.SmtpSsl ||
                    (this.SmtpSsl != null &&
                    this.SmtpSsl.Equals(input.SmtpSsl))
                ) && 
                (
                    this.SmtpStarttls == input.SmtpStarttls ||
                    (this.SmtpStarttls != null &&
                    this.SmtpStarttls.Equals(input.SmtpStarttls))
                ) && 
                (
                    this.DebugEmail == input.DebugEmail ||
                    (this.DebugEmail != null &&
                    this.DebugEmail.Equals(input.DebugEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SmtpHost != null)
                    hashCode = hashCode * 59 + this.SmtpHost.GetHashCode();
                if (this.SmtpPort != null)
                    hashCode = hashCode * 59 + this.SmtpPort.GetHashCode();
                if (this.SmtpUser != null)
                    hashCode = hashCode * 59 + this.SmtpUser.GetHashCode();
                if (this.SmtpPassword != null)
                    hashCode = hashCode * 59 + this.SmtpPassword.GetHashCode();
                if (this.FromAddress != null)
                    hashCode = hashCode * 59 + this.FromAddress.GetHashCode();
                if (this.SmtpSsl != null)
                    hashCode = hashCode * 59 + this.SmtpSsl.GetHashCode();
                if (this.SmtpStarttls != null)
                    hashCode = hashCode * 59 + this.SmtpStarttls.GetHashCode();
                if (this.DebugEmail != null)
                    hashCode = hashCode * 59 + this.DebugEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
