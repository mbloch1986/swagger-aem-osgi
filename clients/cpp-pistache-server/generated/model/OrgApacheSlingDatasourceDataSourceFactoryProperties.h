/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheSlingDatasourceDataSourceFactoryProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingDatasourceDataSourceFactoryProperties_H_
#define OrgApacheSlingDatasourceDataSourceFactoryProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDatasourceDataSourceFactoryProperties
    : public ModelBase
{
public:
    OrgApacheSlingDatasourceDataSourceFactoryProperties();
    virtual ~OrgApacheSlingDatasourceDataSourceFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingDatasourceDataSourceFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getDatasourceName() const;
    void setDatasourceName(ConfigNodePropertyString const& value);
    bool datasourceNameIsSet() const;
    void unsetDatasource_name();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getDatasourceSvcPropName() const;
    void setDatasourceSvcPropName(ConfigNodePropertyString const& value);
    bool datasourceSvcPropNameIsSet() const;
    void unsetDatasource_svc_prop_name();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getDriverClassName() const;
    void setDriverClassName(ConfigNodePropertyString const& value);
    bool driverClassNameIsSet() const;
    void unsetDriverClassName();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getUrl() const;
    void setUrl(ConfigNodePropertyString const& value);
    bool urlIsSet() const;
    void unsetUrl();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getUsername() const;
    void setUsername(ConfigNodePropertyString const& value);
    bool usernameIsSet() const;
    void unsetUsername();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getPassword() const;
    void setPassword(ConfigNodePropertyString const& value);
    bool passwordIsSet() const;
    void unsetPassword();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getDefaultAutoCommit() const;
    void setDefaultAutoCommit(ConfigNodePropertyDropDown const& value);
    bool defaultAutoCommitIsSet() const;
    void unsetDefaultAutoCommit();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getDefaultReadOnly() const;
    void setDefaultReadOnly(ConfigNodePropertyDropDown const& value);
    bool defaultReadOnlyIsSet() const;
    void unsetDefaultReadOnly();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getDefaultTransactionIsolation() const;
    void setDefaultTransactionIsolation(ConfigNodePropertyDropDown const& value);
    bool defaultTransactionIsolationIsSet() const;
    void unsetDefaultTransactionIsolation();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getDefaultCatalog() const;
    void setDefaultCatalog(ConfigNodePropertyString const& value);
    bool defaultCatalogIsSet() const;
    void unsetDefaultCatalog();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxActive() const;
    void setMaxActive(ConfigNodePropertyInteger const& value);
    bool maxActiveIsSet() const;
    void unsetMaxActive();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxIdle() const;
    void setMaxIdle(ConfigNodePropertyInteger const& value);
    bool maxIdleIsSet() const;
    void unsetMaxIdle();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMinIdle() const;
    void setMinIdle(ConfigNodePropertyInteger const& value);
    bool minIdleIsSet() const;
    void unsetMinIdle();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getInitialSize() const;
    void setInitialSize(ConfigNodePropertyInteger const& value);
    bool initialSizeIsSet() const;
    void unsetInitialSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxWait() const;
    void setMaxWait(ConfigNodePropertyInteger const& value);
    bool maxWaitIsSet() const;
    void unsetMaxWait();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxAge() const;
    void setMaxAge(ConfigNodePropertyInteger const& value);
    bool maxAgeIsSet() const;
    void unsetMaxAge();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getTestOnBorrow() const;
    void setTestOnBorrow(ConfigNodePropertyBoolean const& value);
    bool testOnBorrowIsSet() const;
    void unsetTestOnBorrow();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getTestOnReturn() const;
    void setTestOnReturn(ConfigNodePropertyBoolean const& value);
    bool testOnReturnIsSet() const;
    void unsetTestOnReturn();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getTestWhileIdle() const;
    void setTestWhileIdle(ConfigNodePropertyBoolean const& value);
    bool testWhileIdleIsSet() const;
    void unsetTestWhileIdle();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getValidationQuery() const;
    void setValidationQuery(ConfigNodePropertyString const& value);
    bool validationQueryIsSet() const;
    void unsetValidationQuery();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getValidationQueryTimeout() const;
    void setValidationQueryTimeout(ConfigNodePropertyInteger const& value);
    bool validationQueryTimeoutIsSet() const;
    void unsetValidationQueryTimeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getTimeBetweenEvictionRunsMillis() const;
    void setTimeBetweenEvictionRunsMillis(ConfigNodePropertyInteger const& value);
    bool timeBetweenEvictionRunsMillisIsSet() const;
    void unsetTimeBetweenEvictionRunsMillis();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMinEvictableIdleTimeMillis() const;
    void setMinEvictableIdleTimeMillis(ConfigNodePropertyInteger const& value);
    bool minEvictableIdleTimeMillisIsSet() const;
    void unsetMinEvictableIdleTimeMillis();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getConnectionProperties() const;
    void setConnectionProperties(ConfigNodePropertyString const& value);
    bool connectionPropertiesIsSet() const;
    void unsetConnectionProperties();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getInitSQL() const;
    void setInitSQL(ConfigNodePropertyString const& value);
    bool initSQLIsSet() const;
    void unsetInitSQL();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getJdbcInterceptors() const;
    void setJdbcInterceptors(ConfigNodePropertyString const& value);
    bool jdbcInterceptorsIsSet() const;
    void unsetJdbcInterceptors();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getValidationInterval() const;
    void setValidationInterval(ConfigNodePropertyInteger const& value);
    bool validationIntervalIsSet() const;
    void unsetValidationInterval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getLogValidationErrors() const;
    void setLogValidationErrors(ConfigNodePropertyBoolean const& value);
    bool logValidationErrorsIsSet() const;
    void unsetLogValidationErrors();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getDatasourceSvcProperties() const;
    void setDatasourceSvcProperties(ConfigNodePropertyArray const& value);
    bool datasourceSvcPropertiesIsSet() const;
    void unsetDatasource_svc_properties();

protected:
    ConfigNodePropertyString m_Datasource_name;
    bool m_Datasource_nameIsSet;
    ConfigNodePropertyString m_Datasource_svc_prop_name;
    bool m_Datasource_svc_prop_nameIsSet;
    ConfigNodePropertyString m_DriverClassName;
    bool m_DriverClassNameIsSet;
    ConfigNodePropertyString m_Url;
    bool m_UrlIsSet;
    ConfigNodePropertyString m_Username;
    bool m_UsernameIsSet;
    ConfigNodePropertyString m_Password;
    bool m_PasswordIsSet;
    ConfigNodePropertyDropDown m_DefaultAutoCommit;
    bool m_DefaultAutoCommitIsSet;
    ConfigNodePropertyDropDown m_DefaultReadOnly;
    bool m_DefaultReadOnlyIsSet;
    ConfigNodePropertyDropDown m_DefaultTransactionIsolation;
    bool m_DefaultTransactionIsolationIsSet;
    ConfigNodePropertyString m_DefaultCatalog;
    bool m_DefaultCatalogIsSet;
    ConfigNodePropertyInteger m_MaxActive;
    bool m_MaxActiveIsSet;
    ConfigNodePropertyInteger m_MaxIdle;
    bool m_MaxIdleIsSet;
    ConfigNodePropertyInteger m_MinIdle;
    bool m_MinIdleIsSet;
    ConfigNodePropertyInteger m_InitialSize;
    bool m_InitialSizeIsSet;
    ConfigNodePropertyInteger m_MaxWait;
    bool m_MaxWaitIsSet;
    ConfigNodePropertyInteger m_MaxAge;
    bool m_MaxAgeIsSet;
    ConfigNodePropertyBoolean m_TestOnBorrow;
    bool m_TestOnBorrowIsSet;
    ConfigNodePropertyBoolean m_TestOnReturn;
    bool m_TestOnReturnIsSet;
    ConfigNodePropertyBoolean m_TestWhileIdle;
    bool m_TestWhileIdleIsSet;
    ConfigNodePropertyString m_ValidationQuery;
    bool m_ValidationQueryIsSet;
    ConfigNodePropertyInteger m_ValidationQueryTimeout;
    bool m_ValidationQueryTimeoutIsSet;
    ConfigNodePropertyInteger m_TimeBetweenEvictionRunsMillis;
    bool m_TimeBetweenEvictionRunsMillisIsSet;
    ConfigNodePropertyInteger m_MinEvictableIdleTimeMillis;
    bool m_MinEvictableIdleTimeMillisIsSet;
    ConfigNodePropertyString m_ConnectionProperties;
    bool m_ConnectionPropertiesIsSet;
    ConfigNodePropertyString m_InitSQL;
    bool m_InitSQLIsSet;
    ConfigNodePropertyString m_JdbcInterceptors;
    bool m_JdbcInterceptorsIsSet;
    ConfigNodePropertyInteger m_ValidationInterval;
    bool m_ValidationIntervalIsSet;
    ConfigNodePropertyBoolean m_LogValidationErrors;
    bool m_LogValidationErrorsIsSet;
    ConfigNodePropertyArray m_Datasource_svc_properties;
    bool m_Datasource_svc_propertiesIsSet;
};

}
}
}
}

#endif /* OrgApacheSlingDatasourceDataSourceFactoryProperties_H_ */
