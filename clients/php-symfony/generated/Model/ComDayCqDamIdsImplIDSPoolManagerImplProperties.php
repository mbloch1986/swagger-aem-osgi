<?php
/**
 * ComDayCqDamIdsImplIDSPoolManagerImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ComDayCqDamIdsImplIDSPoolManagerImplProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class ComDayCqDamIdsImplIDSPoolManagerImplProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("max.errors.to.blacklist")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $maxErrorsToBlacklist;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("retry.interval.to.whitelist")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $retryIntervalToWhitelist;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("connect.timeout")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $connectTimeout;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("socket.timeout")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $socketTimeout;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("process.label")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $processLabel;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("connection.use.max")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $connectionUseMax;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->maxErrorsToBlacklist = isset($data['maxErrorsToBlacklist']) ? $data['maxErrorsToBlacklist'] : null;
        $this->retryIntervalToWhitelist = isset($data['retryIntervalToWhitelist']) ? $data['retryIntervalToWhitelist'] : null;
        $this->connectTimeout = isset($data['connectTimeout']) ? $data['connectTimeout'] : null;
        $this->socketTimeout = isset($data['socketTimeout']) ? $data['socketTimeout'] : null;
        $this->processLabel = isset($data['processLabel']) ? $data['processLabel'] : null;
        $this->connectionUseMax = isset($data['connectionUseMax']) ? $data['connectionUseMax'] : null;
    }

    /**
     * Gets maxErrorsToBlacklist.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxErrorsToBlacklist()
    {
        return $this->maxErrorsToBlacklist;
    }

    /**
     * Sets maxErrorsToBlacklist.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $maxErrorsToBlacklist
     *
     * @return $this
     */
    public function setMaxErrorsToBlacklist(ConfigNodePropertyInteger $maxErrorsToBlacklist = null)
    {
        $this->maxErrorsToBlacklist = $maxErrorsToBlacklist;

        return $this;
    }

    /**
     * Gets retryIntervalToWhitelist.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getRetryIntervalToWhitelist()
    {
        return $this->retryIntervalToWhitelist;
    }

    /**
     * Sets retryIntervalToWhitelist.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $retryIntervalToWhitelist
     *
     * @return $this
     */
    public function setRetryIntervalToWhitelist(ConfigNodePropertyInteger $retryIntervalToWhitelist = null)
    {
        $this->retryIntervalToWhitelist = $retryIntervalToWhitelist;

        return $this;
    }

    /**
     * Gets connectTimeout.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getConnectTimeout()
    {
        return $this->connectTimeout;
    }

    /**
     * Sets connectTimeout.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $connectTimeout
     *
     * @return $this
     */
    public function setConnectTimeout(ConfigNodePropertyInteger $connectTimeout = null)
    {
        $this->connectTimeout = $connectTimeout;

        return $this;
    }

    /**
     * Gets socketTimeout.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getSocketTimeout()
    {
        return $this->socketTimeout;
    }

    /**
     * Sets socketTimeout.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $socketTimeout
     *
     * @return $this
     */
    public function setSocketTimeout(ConfigNodePropertyInteger $socketTimeout = null)
    {
        $this->socketTimeout = $socketTimeout;

        return $this;
    }

    /**
     * Gets processLabel.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getProcessLabel()
    {
        return $this->processLabel;
    }

    /**
     * Sets processLabel.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $processLabel
     *
     * @return $this
     */
    public function setProcessLabel(ConfigNodePropertyString $processLabel = null)
    {
        $this->processLabel = $processLabel;

        return $this;
    }

    /**
     * Gets connectionUseMax.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getConnectionUseMax()
    {
        return $this->connectionUseMax;
    }

    /**
     * Sets connectionUseMax.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $connectionUseMax
     *
     * @return $this
     */
    public function setConnectionUseMax(ConfigNodePropertyInteger $connectionUseMax = null)
    {
        $this->connectionUseMax = $connectionUseMax;

        return $this;
    }
}


