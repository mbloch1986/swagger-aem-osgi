<?php
/**
 * ComDayCqReportingImplConfigServiceImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCqReportingImplConfigServiceImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCqReportingImplConfigServiceImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCqReportingImplConfigServiceImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'repconf_timezone' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'repconf_locale' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'repconf_snapshots' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'repconf_repdir' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'repconf_hourofday' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'repconf_minofhour' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'repconf_maxrows' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'repconf_fakedata' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'repconf_snapshotuser' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'repconf_enforcesnapshotuser' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'repconf_timezone' => null,
        'repconf_locale' => null,
        'repconf_snapshots' => null,
        'repconf_repdir' => null,
        'repconf_hourofday' => null,
        'repconf_minofhour' => null,
        'repconf_maxrows' => null,
        'repconf_fakedata' => null,
        'repconf_snapshotuser' => null,
        'repconf_enforcesnapshotuser' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'repconf_timezone' => 'repconf.timezone',
        'repconf_locale' => 'repconf.locale',
        'repconf_snapshots' => 'repconf.snapshots',
        'repconf_repdir' => 'repconf.repdir',
        'repconf_hourofday' => 'repconf.hourofday',
        'repconf_minofhour' => 'repconf.minofhour',
        'repconf_maxrows' => 'repconf.maxrows',
        'repconf_fakedata' => 'repconf.fakedata',
        'repconf_snapshotuser' => 'repconf.snapshotuser',
        'repconf_enforcesnapshotuser' => 'repconf.enforcesnapshotuser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'repconf_timezone' => 'setRepconfTimezone',
        'repconf_locale' => 'setRepconfLocale',
        'repconf_snapshots' => 'setRepconfSnapshots',
        'repconf_repdir' => 'setRepconfRepdir',
        'repconf_hourofday' => 'setRepconfHourofday',
        'repconf_minofhour' => 'setRepconfMinofhour',
        'repconf_maxrows' => 'setRepconfMaxrows',
        'repconf_fakedata' => 'setRepconfFakedata',
        'repconf_snapshotuser' => 'setRepconfSnapshotuser',
        'repconf_enforcesnapshotuser' => 'setRepconfEnforcesnapshotuser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'repconf_timezone' => 'getRepconfTimezone',
        'repconf_locale' => 'getRepconfLocale',
        'repconf_snapshots' => 'getRepconfSnapshots',
        'repconf_repdir' => 'getRepconfRepdir',
        'repconf_hourofday' => 'getRepconfHourofday',
        'repconf_minofhour' => 'getRepconfMinofhour',
        'repconf_maxrows' => 'getRepconfMaxrows',
        'repconf_fakedata' => 'getRepconfFakedata',
        'repconf_snapshotuser' => 'getRepconfSnapshotuser',
        'repconf_enforcesnapshotuser' => 'getRepconfEnforcesnapshotuser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['repconf_timezone'] = isset($data['repconf_timezone']) ? $data['repconf_timezone'] : null;
        $this->container['repconf_locale'] = isset($data['repconf_locale']) ? $data['repconf_locale'] : null;
        $this->container['repconf_snapshots'] = isset($data['repconf_snapshots']) ? $data['repconf_snapshots'] : null;
        $this->container['repconf_repdir'] = isset($data['repconf_repdir']) ? $data['repconf_repdir'] : null;
        $this->container['repconf_hourofday'] = isset($data['repconf_hourofday']) ? $data['repconf_hourofday'] : null;
        $this->container['repconf_minofhour'] = isset($data['repconf_minofhour']) ? $data['repconf_minofhour'] : null;
        $this->container['repconf_maxrows'] = isset($data['repconf_maxrows']) ? $data['repconf_maxrows'] : null;
        $this->container['repconf_fakedata'] = isset($data['repconf_fakedata']) ? $data['repconf_fakedata'] : null;
        $this->container['repconf_snapshotuser'] = isset($data['repconf_snapshotuser']) ? $data['repconf_snapshotuser'] : null;
        $this->container['repconf_enforcesnapshotuser'] = isset($data['repconf_enforcesnapshotuser']) ? $data['repconf_enforcesnapshotuser'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets repconf_timezone
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getRepconfTimezone()
    {
        return $this->container['repconf_timezone'];
    }

    /**
     * Sets repconf_timezone
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $repconf_timezone repconf_timezone
     *
     * @return $this
     */
    public function setRepconfTimezone($repconf_timezone)
    {
        $this->container['repconf_timezone'] = $repconf_timezone;

        return $this;
    }

    /**
     * Gets repconf_locale
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getRepconfLocale()
    {
        return $this->container['repconf_locale'];
    }

    /**
     * Sets repconf_locale
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $repconf_locale repconf_locale
     *
     * @return $this
     */
    public function setRepconfLocale($repconf_locale)
    {
        $this->container['repconf_locale'] = $repconf_locale;

        return $this;
    }

    /**
     * Gets repconf_snapshots
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getRepconfSnapshots()
    {
        return $this->container['repconf_snapshots'];
    }

    /**
     * Sets repconf_snapshots
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $repconf_snapshots repconf_snapshots
     *
     * @return $this
     */
    public function setRepconfSnapshots($repconf_snapshots)
    {
        $this->container['repconf_snapshots'] = $repconf_snapshots;

        return $this;
    }

    /**
     * Gets repconf_repdir
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getRepconfRepdir()
    {
        return $this->container['repconf_repdir'];
    }

    /**
     * Sets repconf_repdir
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $repconf_repdir repconf_repdir
     *
     * @return $this
     */
    public function setRepconfRepdir($repconf_repdir)
    {
        $this->container['repconf_repdir'] = $repconf_repdir;

        return $this;
    }

    /**
     * Gets repconf_hourofday
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getRepconfHourofday()
    {
        return $this->container['repconf_hourofday'];
    }

    /**
     * Sets repconf_hourofday
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $repconf_hourofday repconf_hourofday
     *
     * @return $this
     */
    public function setRepconfHourofday($repconf_hourofday)
    {
        $this->container['repconf_hourofday'] = $repconf_hourofday;

        return $this;
    }

    /**
     * Gets repconf_minofhour
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getRepconfMinofhour()
    {
        return $this->container['repconf_minofhour'];
    }

    /**
     * Sets repconf_minofhour
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $repconf_minofhour repconf_minofhour
     *
     * @return $this
     */
    public function setRepconfMinofhour($repconf_minofhour)
    {
        $this->container['repconf_minofhour'] = $repconf_minofhour;

        return $this;
    }

    /**
     * Gets repconf_maxrows
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getRepconfMaxrows()
    {
        return $this->container['repconf_maxrows'];
    }

    /**
     * Sets repconf_maxrows
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $repconf_maxrows repconf_maxrows
     *
     * @return $this
     */
    public function setRepconfMaxrows($repconf_maxrows)
    {
        $this->container['repconf_maxrows'] = $repconf_maxrows;

        return $this;
    }

    /**
     * Gets repconf_fakedata
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getRepconfFakedata()
    {
        return $this->container['repconf_fakedata'];
    }

    /**
     * Sets repconf_fakedata
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $repconf_fakedata repconf_fakedata
     *
     * @return $this
     */
    public function setRepconfFakedata($repconf_fakedata)
    {
        $this->container['repconf_fakedata'] = $repconf_fakedata;

        return $this;
    }

    /**
     * Gets repconf_snapshotuser
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getRepconfSnapshotuser()
    {
        return $this->container['repconf_snapshotuser'];
    }

    /**
     * Sets repconf_snapshotuser
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $repconf_snapshotuser repconf_snapshotuser
     *
     * @return $this
     */
    public function setRepconfSnapshotuser($repconf_snapshotuser)
    {
        $this->container['repconf_snapshotuser'] = $repconf_snapshotuser;

        return $this;
    }

    /**
     * Gets repconf_enforcesnapshotuser
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getRepconfEnforcesnapshotuser()
    {
        return $this->container['repconf_enforcesnapshotuser'];
    }

    /**
     * Sets repconf_enforcesnapshotuser
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $repconf_enforcesnapshotuser repconf_enforcesnapshotuser
     *
     * @return $this
     */
    public function setRepconfEnforcesnapshotuser($repconf_enforcesnapshotuser)
    {
        $this->container['repconf_enforcesnapshotuser'] = $repconf_enforcesnapshotuser;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


