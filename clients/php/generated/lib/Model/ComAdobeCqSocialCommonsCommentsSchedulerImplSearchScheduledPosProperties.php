<?php
/**
 * ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enable_scheduled_posts_search' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'number_of_minutes' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'max_search_limit' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'enable_scheduled_posts_search' => null,
        'number_of_minutes' => null,
        'max_search_limit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_scheduled_posts_search' => 'enableScheduledPostsSearch',
        'number_of_minutes' => 'numberOfMinutes',
        'max_search_limit' => 'maxSearchLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_scheduled_posts_search' => 'setEnableScheduledPostsSearch',
        'number_of_minutes' => 'setNumberOfMinutes',
        'max_search_limit' => 'setMaxSearchLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_scheduled_posts_search' => 'getEnableScheduledPostsSearch',
        'number_of_minutes' => 'getNumberOfMinutes',
        'max_search_limit' => 'getMaxSearchLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_scheduled_posts_search'] = isset($data['enable_scheduled_posts_search']) ? $data['enable_scheduled_posts_search'] : null;
        $this->container['number_of_minutes'] = isset($data['number_of_minutes']) ? $data['number_of_minutes'] : null;
        $this->container['max_search_limit'] = isset($data['max_search_limit']) ? $data['max_search_limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_scheduled_posts_search
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnableScheduledPostsSearch()
    {
        return $this->container['enable_scheduled_posts_search'];
    }

    /**
     * Sets enable_scheduled_posts_search
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $enable_scheduled_posts_search enable_scheduled_posts_search
     *
     * @return $this
     */
    public function setEnableScheduledPostsSearch($enable_scheduled_posts_search)
    {
        $this->container['enable_scheduled_posts_search'] = $enable_scheduled_posts_search;

        return $this;
    }

    /**
     * Gets number_of_minutes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getNumberOfMinutes()
    {
        return $this->container['number_of_minutes'];
    }

    /**
     * Sets number_of_minutes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $number_of_minutes number_of_minutes
     *
     * @return $this
     */
    public function setNumberOfMinutes($number_of_minutes)
    {
        $this->container['number_of_minutes'] = $number_of_minutes;

        return $this;
    }

    /**
     * Gets max_search_limit
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxSearchLimit()
    {
        return $this->container['max_search_limit'];
    }

    /**
     * Sets max_search_limit
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_search_limit max_search_limit
     *
     * @return $this
     */
    public function setMaxSearchLimit($max_search_limit)
    {
        $this->container['max_search_limit'] = $max_search_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


