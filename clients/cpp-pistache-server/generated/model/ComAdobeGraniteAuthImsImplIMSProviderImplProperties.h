/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeGraniteAuthImsImplIMSProviderImplProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteAuthImsImplIMSProviderImplProperties_H_
#define ComAdobeGraniteAuthImsImplIMSProviderImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteAuthImsImplIMSProviderImplProperties
    : public ModelBase
{
public:
    ComAdobeGraniteAuthImsImplIMSProviderImplProperties();
    virtual ~ComAdobeGraniteAuthImsImplIMSProviderImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteAuthImsImplIMSProviderImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOauthProviderId() const;
    void setOauthProviderId(ConfigNodePropertyString const& value);
    bool oauthProviderIdIsSet() const;
    void unsetOauth_provider_id();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOauthProviderImsAuthorizationUrl() const;
    void setOauthProviderImsAuthorizationUrl(ConfigNodePropertyString const& value);
    bool oauthProviderImsAuthorizationUrlIsSet() const;
    void unsetOauth_provider_ims_authorization_url();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOauthProviderImsTokenUrl() const;
    void setOauthProviderImsTokenUrl(ConfigNodePropertyString const& value);
    bool oauthProviderImsTokenUrlIsSet() const;
    void unsetOauth_provider_ims_token_url();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOauthProviderImsProfileUrl() const;
    void setOauthProviderImsProfileUrl(ConfigNodePropertyString const& value);
    bool oauthProviderImsProfileUrlIsSet() const;
    void unsetOauth_provider_ims_profile_url();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getOauthProviderImsExtendedDetailsUrls() const;
    void setOauthProviderImsExtendedDetailsUrls(ConfigNodePropertyArray const& value);
    bool oauthProviderImsExtendedDetailsUrlsIsSet() const;
    void unsetOauth_provider_ims_extended_details_urls();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOauthProviderImsValidateTokenUrl() const;
    void setOauthProviderImsValidateTokenUrl(ConfigNodePropertyString const& value);
    bool oauthProviderImsValidateTokenUrlIsSet() const;
    void unsetOauth_provider_ims_validate_token_url();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOauthProviderImsSessionProperty() const;
    void setOauthProviderImsSessionProperty(ConfigNodePropertyString const& value);
    bool oauthProviderImsSessionPropertyIsSet() const;
    void unsetOauth_provider_ims_session_property();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOauthProviderImsServiceTokenClientId() const;
    void setOauthProviderImsServiceTokenClientId(ConfigNodePropertyString const& value);
    bool oauthProviderImsServiceTokenClientIdIsSet() const;
    void unsetOauth_provider_ims_service_token_client_id();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOauthProviderImsServiceTokenClientSecret() const;
    void setOauthProviderImsServiceTokenClientSecret(ConfigNodePropertyString const& value);
    bool oauthProviderImsServiceTokenClientSecretIsSet() const;
    void unsetOauth_provider_ims_service_token_client_secret();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOauthProviderImsServiceToken() const;
    void setOauthProviderImsServiceToken(ConfigNodePropertyString const& value);
    bool oauthProviderImsServiceTokenIsSet() const;
    void unsetOauth_provider_ims_service_token();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getImsOrgRef() const;
    void setImsOrgRef(ConfigNodePropertyString const& value);
    bool imsOrgRefIsSet() const;
    void unsetIms_org_ref();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getImsGroupMapping() const;
    void setImsGroupMapping(ConfigNodePropertyArray const& value);
    bool imsGroupMappingIsSet() const;
    void unsetIms_group_mapping();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getOauthProviderImsOnlyLicenseGroup() const;
    void setOauthProviderImsOnlyLicenseGroup(ConfigNodePropertyBoolean const& value);
    bool oauthProviderImsOnlyLicenseGroupIsSet() const;
    void unsetOauth_provider_ims_only_license_group();

protected:
    ConfigNodePropertyString m_Oauth_provider_id;
    bool m_Oauth_provider_idIsSet;
    ConfigNodePropertyString m_Oauth_provider_ims_authorization_url;
    bool m_Oauth_provider_ims_authorization_urlIsSet;
    ConfigNodePropertyString m_Oauth_provider_ims_token_url;
    bool m_Oauth_provider_ims_token_urlIsSet;
    ConfigNodePropertyString m_Oauth_provider_ims_profile_url;
    bool m_Oauth_provider_ims_profile_urlIsSet;
    ConfigNodePropertyArray m_Oauth_provider_ims_extended_details_urls;
    bool m_Oauth_provider_ims_extended_details_urlsIsSet;
    ConfigNodePropertyString m_Oauth_provider_ims_validate_token_url;
    bool m_Oauth_provider_ims_validate_token_urlIsSet;
    ConfigNodePropertyString m_Oauth_provider_ims_session_property;
    bool m_Oauth_provider_ims_session_propertyIsSet;
    ConfigNodePropertyString m_Oauth_provider_ims_service_token_client_id;
    bool m_Oauth_provider_ims_service_token_client_idIsSet;
    ConfigNodePropertyString m_Oauth_provider_ims_service_token_client_secret;
    bool m_Oauth_provider_ims_service_token_client_secretIsSet;
    ConfigNodePropertyString m_Oauth_provider_ims_service_token;
    bool m_Oauth_provider_ims_service_tokenIsSet;
    ConfigNodePropertyString m_Ims_org_ref;
    bool m_Ims_org_refIsSet;
    ConfigNodePropertyArray m_Ims_group_mapping;
    bool m_Ims_group_mappingIsSet;
    ConfigNodePropertyBoolean m_Oauth_provider_ims_only_license_group;
    bool m_Oauth_provider_ims_only_license_groupIsSet;
};

}
}
}
}

#endif /* ComAdobeGraniteAuthImsImplIMSProviderImplProperties_H_ */
