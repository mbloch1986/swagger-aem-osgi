<?php
/**
 * OrgApacheSlingDiscoveryOakConfigProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingDiscoveryOakConfigProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingDiscoveryOakConfigProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingDiscoveryOakConfigProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'connector_ping_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'connector_ping_interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'discovery_lite_check_interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_sync_service_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cluster_sync_service_interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'enable_sync_token' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'min_event_delay' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'socket_connect_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'so_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'topology_connector_urls' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'topology_connector_whitelist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'auto_stop_local_loop_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'gzip_connector_requests_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'hmac_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'enable_encryption' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'shared_key' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'hmac_shared_key_ttl' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'backoff_standby_factor' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'backoff_stable_factor' => '\OpenAPI\Client\Model\ConfigNodePropertyString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'connector_ping_timeout' => null,
        'connector_ping_interval' => null,
        'discovery_lite_check_interval' => null,
        'cluster_sync_service_timeout' => null,
        'cluster_sync_service_interval' => null,
        'enable_sync_token' => null,
        'min_event_delay' => null,
        'socket_connect_timeout' => null,
        'so_timeout' => null,
        'topology_connector_urls' => null,
        'topology_connector_whitelist' => null,
        'auto_stop_local_loop_enabled' => null,
        'gzip_connector_requests_enabled' => null,
        'hmac_enabled' => null,
        'enable_encryption' => null,
        'shared_key' => null,
        'hmac_shared_key_ttl' => null,
        'backoff_standby_factor' => null,
        'backoff_stable_factor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connector_ping_timeout' => 'connectorPingTimeout',
        'connector_ping_interval' => 'connectorPingInterval',
        'discovery_lite_check_interval' => 'discoveryLiteCheckInterval',
        'cluster_sync_service_timeout' => 'clusterSyncServiceTimeout',
        'cluster_sync_service_interval' => 'clusterSyncServiceInterval',
        'enable_sync_token' => 'enableSyncToken',
        'min_event_delay' => 'minEventDelay',
        'socket_connect_timeout' => 'socketConnectTimeout',
        'so_timeout' => 'soTimeout',
        'topology_connector_urls' => 'topologyConnectorUrls',
        'topology_connector_whitelist' => 'topologyConnectorWhitelist',
        'auto_stop_local_loop_enabled' => 'autoStopLocalLoopEnabled',
        'gzip_connector_requests_enabled' => 'gzipConnectorRequestsEnabled',
        'hmac_enabled' => 'hmacEnabled',
        'enable_encryption' => 'enableEncryption',
        'shared_key' => 'sharedKey',
        'hmac_shared_key_ttl' => 'hmacSharedKeyTTL',
        'backoff_standby_factor' => 'backoffStandbyFactor',
        'backoff_stable_factor' => 'backoffStableFactor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connector_ping_timeout' => 'setConnectorPingTimeout',
        'connector_ping_interval' => 'setConnectorPingInterval',
        'discovery_lite_check_interval' => 'setDiscoveryLiteCheckInterval',
        'cluster_sync_service_timeout' => 'setClusterSyncServiceTimeout',
        'cluster_sync_service_interval' => 'setClusterSyncServiceInterval',
        'enable_sync_token' => 'setEnableSyncToken',
        'min_event_delay' => 'setMinEventDelay',
        'socket_connect_timeout' => 'setSocketConnectTimeout',
        'so_timeout' => 'setSoTimeout',
        'topology_connector_urls' => 'setTopologyConnectorUrls',
        'topology_connector_whitelist' => 'setTopologyConnectorWhitelist',
        'auto_stop_local_loop_enabled' => 'setAutoStopLocalLoopEnabled',
        'gzip_connector_requests_enabled' => 'setGzipConnectorRequestsEnabled',
        'hmac_enabled' => 'setHmacEnabled',
        'enable_encryption' => 'setEnableEncryption',
        'shared_key' => 'setSharedKey',
        'hmac_shared_key_ttl' => 'setHmacSharedKeyTtl',
        'backoff_standby_factor' => 'setBackoffStandbyFactor',
        'backoff_stable_factor' => 'setBackoffStableFactor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connector_ping_timeout' => 'getConnectorPingTimeout',
        'connector_ping_interval' => 'getConnectorPingInterval',
        'discovery_lite_check_interval' => 'getDiscoveryLiteCheckInterval',
        'cluster_sync_service_timeout' => 'getClusterSyncServiceTimeout',
        'cluster_sync_service_interval' => 'getClusterSyncServiceInterval',
        'enable_sync_token' => 'getEnableSyncToken',
        'min_event_delay' => 'getMinEventDelay',
        'socket_connect_timeout' => 'getSocketConnectTimeout',
        'so_timeout' => 'getSoTimeout',
        'topology_connector_urls' => 'getTopologyConnectorUrls',
        'topology_connector_whitelist' => 'getTopologyConnectorWhitelist',
        'auto_stop_local_loop_enabled' => 'getAutoStopLocalLoopEnabled',
        'gzip_connector_requests_enabled' => 'getGzipConnectorRequestsEnabled',
        'hmac_enabled' => 'getHmacEnabled',
        'enable_encryption' => 'getEnableEncryption',
        'shared_key' => 'getSharedKey',
        'hmac_shared_key_ttl' => 'getHmacSharedKeyTtl',
        'backoff_standby_factor' => 'getBackoffStandbyFactor',
        'backoff_stable_factor' => 'getBackoffStableFactor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connector_ping_timeout'] = isset($data['connector_ping_timeout']) ? $data['connector_ping_timeout'] : null;
        $this->container['connector_ping_interval'] = isset($data['connector_ping_interval']) ? $data['connector_ping_interval'] : null;
        $this->container['discovery_lite_check_interval'] = isset($data['discovery_lite_check_interval']) ? $data['discovery_lite_check_interval'] : null;
        $this->container['cluster_sync_service_timeout'] = isset($data['cluster_sync_service_timeout']) ? $data['cluster_sync_service_timeout'] : null;
        $this->container['cluster_sync_service_interval'] = isset($data['cluster_sync_service_interval']) ? $data['cluster_sync_service_interval'] : null;
        $this->container['enable_sync_token'] = isset($data['enable_sync_token']) ? $data['enable_sync_token'] : null;
        $this->container['min_event_delay'] = isset($data['min_event_delay']) ? $data['min_event_delay'] : null;
        $this->container['socket_connect_timeout'] = isset($data['socket_connect_timeout']) ? $data['socket_connect_timeout'] : null;
        $this->container['so_timeout'] = isset($data['so_timeout']) ? $data['so_timeout'] : null;
        $this->container['topology_connector_urls'] = isset($data['topology_connector_urls']) ? $data['topology_connector_urls'] : null;
        $this->container['topology_connector_whitelist'] = isset($data['topology_connector_whitelist']) ? $data['topology_connector_whitelist'] : null;
        $this->container['auto_stop_local_loop_enabled'] = isset($data['auto_stop_local_loop_enabled']) ? $data['auto_stop_local_loop_enabled'] : null;
        $this->container['gzip_connector_requests_enabled'] = isset($data['gzip_connector_requests_enabled']) ? $data['gzip_connector_requests_enabled'] : null;
        $this->container['hmac_enabled'] = isset($data['hmac_enabled']) ? $data['hmac_enabled'] : null;
        $this->container['enable_encryption'] = isset($data['enable_encryption']) ? $data['enable_encryption'] : null;
        $this->container['shared_key'] = isset($data['shared_key']) ? $data['shared_key'] : null;
        $this->container['hmac_shared_key_ttl'] = isset($data['hmac_shared_key_ttl']) ? $data['hmac_shared_key_ttl'] : null;
        $this->container['backoff_standby_factor'] = isset($data['backoff_standby_factor']) ? $data['backoff_standby_factor'] : null;
        $this->container['backoff_stable_factor'] = isset($data['backoff_stable_factor']) ? $data['backoff_stable_factor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connector_ping_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getConnectorPingTimeout()
    {
        return $this->container['connector_ping_timeout'];
    }

    /**
     * Sets connector_ping_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $connector_ping_timeout connector_ping_timeout
     *
     * @return $this
     */
    public function setConnectorPingTimeout($connector_ping_timeout)
    {
        $this->container['connector_ping_timeout'] = $connector_ping_timeout;

        return $this;
    }

    /**
     * Gets connector_ping_interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getConnectorPingInterval()
    {
        return $this->container['connector_ping_interval'];
    }

    /**
     * Sets connector_ping_interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $connector_ping_interval connector_ping_interval
     *
     * @return $this
     */
    public function setConnectorPingInterval($connector_ping_interval)
    {
        $this->container['connector_ping_interval'] = $connector_ping_interval;

        return $this;
    }

    /**
     * Gets discovery_lite_check_interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getDiscoveryLiteCheckInterval()
    {
        return $this->container['discovery_lite_check_interval'];
    }

    /**
     * Sets discovery_lite_check_interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $discovery_lite_check_interval discovery_lite_check_interval
     *
     * @return $this
     */
    public function setDiscoveryLiteCheckInterval($discovery_lite_check_interval)
    {
        $this->container['discovery_lite_check_interval'] = $discovery_lite_check_interval;

        return $this;
    }

    /**
     * Gets cluster_sync_service_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterSyncServiceTimeout()
    {
        return $this->container['cluster_sync_service_timeout'];
    }

    /**
     * Sets cluster_sync_service_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_sync_service_timeout cluster_sync_service_timeout
     *
     * @return $this
     */
    public function setClusterSyncServiceTimeout($cluster_sync_service_timeout)
    {
        $this->container['cluster_sync_service_timeout'] = $cluster_sync_service_timeout;

        return $this;
    }

    /**
     * Gets cluster_sync_service_interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getClusterSyncServiceInterval()
    {
        return $this->container['cluster_sync_service_interval'];
    }

    /**
     * Sets cluster_sync_service_interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cluster_sync_service_interval cluster_sync_service_interval
     *
     * @return $this
     */
    public function setClusterSyncServiceInterval($cluster_sync_service_interval)
    {
        $this->container['cluster_sync_service_interval'] = $cluster_sync_service_interval;

        return $this;
    }

    /**
     * Gets enable_sync_token
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnableSyncToken()
    {
        return $this->container['enable_sync_token'];
    }

    /**
     * Sets enable_sync_token
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $enable_sync_token enable_sync_token
     *
     * @return $this
     */
    public function setEnableSyncToken($enable_sync_token)
    {
        $this->container['enable_sync_token'] = $enable_sync_token;

        return $this;
    }

    /**
     * Gets min_event_delay
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMinEventDelay()
    {
        return $this->container['min_event_delay'];
    }

    /**
     * Sets min_event_delay
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $min_event_delay min_event_delay
     *
     * @return $this
     */
    public function setMinEventDelay($min_event_delay)
    {
        $this->container['min_event_delay'] = $min_event_delay;

        return $this;
    }

    /**
     * Gets socket_connect_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getSocketConnectTimeout()
    {
        return $this->container['socket_connect_timeout'];
    }

    /**
     * Sets socket_connect_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $socket_connect_timeout socket_connect_timeout
     *
     * @return $this
     */
    public function setSocketConnectTimeout($socket_connect_timeout)
    {
        $this->container['socket_connect_timeout'] = $socket_connect_timeout;

        return $this;
    }

    /**
     * Gets so_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getSoTimeout()
    {
        return $this->container['so_timeout'];
    }

    /**
     * Sets so_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $so_timeout so_timeout
     *
     * @return $this
     */
    public function setSoTimeout($so_timeout)
    {
        $this->container['so_timeout'] = $so_timeout;

        return $this;
    }

    /**
     * Gets topology_connector_urls
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getTopologyConnectorUrls()
    {
        return $this->container['topology_connector_urls'];
    }

    /**
     * Sets topology_connector_urls
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $topology_connector_urls topology_connector_urls
     *
     * @return $this
     */
    public function setTopologyConnectorUrls($topology_connector_urls)
    {
        $this->container['topology_connector_urls'] = $topology_connector_urls;

        return $this;
    }

    /**
     * Gets topology_connector_whitelist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getTopologyConnectorWhitelist()
    {
        return $this->container['topology_connector_whitelist'];
    }

    /**
     * Sets topology_connector_whitelist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $topology_connector_whitelist topology_connector_whitelist
     *
     * @return $this
     */
    public function setTopologyConnectorWhitelist($topology_connector_whitelist)
    {
        $this->container['topology_connector_whitelist'] = $topology_connector_whitelist;

        return $this;
    }

    /**
     * Gets auto_stop_local_loop_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getAutoStopLocalLoopEnabled()
    {
        return $this->container['auto_stop_local_loop_enabled'];
    }

    /**
     * Sets auto_stop_local_loop_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $auto_stop_local_loop_enabled auto_stop_local_loop_enabled
     *
     * @return $this
     */
    public function setAutoStopLocalLoopEnabled($auto_stop_local_loop_enabled)
    {
        $this->container['auto_stop_local_loop_enabled'] = $auto_stop_local_loop_enabled;

        return $this;
    }

    /**
     * Gets gzip_connector_requests_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getGzipConnectorRequestsEnabled()
    {
        return $this->container['gzip_connector_requests_enabled'];
    }

    /**
     * Sets gzip_connector_requests_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $gzip_connector_requests_enabled gzip_connector_requests_enabled
     *
     * @return $this
     */
    public function setGzipConnectorRequestsEnabled($gzip_connector_requests_enabled)
    {
        $this->container['gzip_connector_requests_enabled'] = $gzip_connector_requests_enabled;

        return $this;
    }

    /**
     * Gets hmac_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getHmacEnabled()
    {
        return $this->container['hmac_enabled'];
    }

    /**
     * Sets hmac_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $hmac_enabled hmac_enabled
     *
     * @return $this
     */
    public function setHmacEnabled($hmac_enabled)
    {
        $this->container['hmac_enabled'] = $hmac_enabled;

        return $this;
    }

    /**
     * Gets enable_encryption
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnableEncryption()
    {
        return $this->container['enable_encryption'];
    }

    /**
     * Sets enable_encryption
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $enable_encryption enable_encryption
     *
     * @return $this
     */
    public function setEnableEncryption($enable_encryption)
    {
        $this->container['enable_encryption'] = $enable_encryption;

        return $this;
    }

    /**
     * Gets shared_key
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSharedKey()
    {
        return $this->container['shared_key'];
    }

    /**
     * Sets shared_key
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $shared_key shared_key
     *
     * @return $this
     */
    public function setSharedKey($shared_key)
    {
        $this->container['shared_key'] = $shared_key;

        return $this;
    }

    /**
     * Gets hmac_shared_key_ttl
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getHmacSharedKeyTtl()
    {
        return $this->container['hmac_shared_key_ttl'];
    }

    /**
     * Sets hmac_shared_key_ttl
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $hmac_shared_key_ttl hmac_shared_key_ttl
     *
     * @return $this
     */
    public function setHmacSharedKeyTtl($hmac_shared_key_ttl)
    {
        $this->container['hmac_shared_key_ttl'] = $hmac_shared_key_ttl;

        return $this;
    }

    /**
     * Gets backoff_standby_factor
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getBackoffStandbyFactor()
    {
        return $this->container['backoff_standby_factor'];
    }

    /**
     * Sets backoff_standby_factor
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $backoff_standby_factor backoff_standby_factor
     *
     * @return $this
     */
    public function setBackoffStandbyFactor($backoff_standby_factor)
    {
        $this->container['backoff_standby_factor'] = $backoff_standby_factor;

        return $this;
    }

    /**
     * Gets backoff_stable_factor
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getBackoffStableFactor()
    {
        return $this->container['backoff_stable_factor'];
    }

    /**
     * Sets backoff_stable_factor
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $backoff_stable_factor backoff_stable_factor
     *
     * @return $this
     */
    public function setBackoffStableFactor($backoff_stable_factor)
    {
        $this->container['backoff_stable_factor'] = $backoff_stable_factor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


