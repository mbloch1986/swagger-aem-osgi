/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
  #[serde(rename = "codeupgradetasks")]
  codeupgradetasks: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "codeupgradetaskfilters")]
  codeupgradetaskfilters: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
  pub fn new() -> ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
    ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
      codeupgradetasks: None,
      codeupgradetaskfilters: None
    }
  }

  pub fn set_codeupgradetasks(&mut self, codeupgradetasks: ::models::ConfigNodePropertyArray) {
    self.codeupgradetasks = Some(codeupgradetasks);
  }

  pub fn with_codeupgradetasks(mut self, codeupgradetasks: ::models::ConfigNodePropertyArray) -> ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
    self.codeupgradetasks = Some(codeupgradetasks);
    self
  }

  pub fn codeupgradetasks(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.codeupgradetasks.as_ref()
  }

  pub fn reset_codeupgradetasks(&mut self) {
    self.codeupgradetasks = None;
  }

  pub fn set_codeupgradetaskfilters(&mut self, codeupgradetaskfilters: ::models::ConfigNodePropertyArray) {
    self.codeupgradetaskfilters = Some(codeupgradetaskfilters);
  }

  pub fn with_codeupgradetaskfilters(mut self, codeupgradetaskfilters: ::models::ConfigNodePropertyArray) -> ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
    self.codeupgradetaskfilters = Some(codeupgradetaskfilters);
    self
  }

  pub fn codeupgradetaskfilters(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.codeupgradetaskfilters.as_ref()
  }

  pub fn reset_codeupgradetaskfilters(&mut self) {
    self.codeupgradetaskfilters = None;
  }

}



