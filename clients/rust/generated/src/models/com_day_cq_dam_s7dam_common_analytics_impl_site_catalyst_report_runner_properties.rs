/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties {
  #[serde(rename = "scheduler.expression")]
  scheduler_expression: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "scheduler.concurrent")]
  scheduler_concurrent: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties {
  pub fn new() -> ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties {
    ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties {
      scheduler_expression: None,
      scheduler_concurrent: None
    }
  }

  pub fn set_scheduler_expression(&mut self, scheduler_expression: ::models::ConfigNodePropertyString) {
    self.scheduler_expression = Some(scheduler_expression);
  }

  pub fn with_scheduler_expression(mut self, scheduler_expression: ::models::ConfigNodePropertyString) -> ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties {
    self.scheduler_expression = Some(scheduler_expression);
    self
  }

  pub fn scheduler_expression(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.scheduler_expression.as_ref()
  }

  pub fn reset_scheduler_expression(&mut self) {
    self.scheduler_expression = None;
  }

  pub fn set_scheduler_concurrent(&mut self, scheduler_concurrent: ::models::ConfigNodePropertyBoolean) {
    self.scheduler_concurrent = Some(scheduler_concurrent);
  }

  pub fn with_scheduler_concurrent(mut self, scheduler_concurrent: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties {
    self.scheduler_concurrent = Some(scheduler_concurrent);
    self
  }

  pub fn scheduler_concurrent(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.scheduler_concurrent.as_ref()
  }

  pub fn reset_scheduler_concurrent(&mut self) {
    self.scheduler_concurrent = None;
  }

}



