/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties()
{
    m_Osgi_http_whiteboard_context_selectIsSet = false;
    m_Osgi_http_whiteboard_listenerIsSet = false;
    m_Auth_sudo_cookieIsSet = false;
    m_Auth_sudo_parameterIsSet = false;
    m_Auth_annonymousIsSet = false;
    m_Sling_auth_requirementsIsSet = false;
    m_Sling_auth_anonymous_userIsSet = false;
    m_Sling_auth_anonymous_passwordIsSet = false;
    m_Auth_httpIsSet = false;
    m_Auth_http_realmIsSet = false;
    m_Auth_uri_suffixIsSet = false;
    
}

OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::~OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties()
{
}

void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Osgi_http_whiteboard_context_selectIsSet)
    {
        val["osgi.http.whiteboard.context.select"] = ModelBase::toJson(m_Osgi_http_whiteboard_context_select);
    }
    if(m_Osgi_http_whiteboard_listenerIsSet)
    {
        val["osgi.http.whiteboard.listener"] = ModelBase::toJson(m_Osgi_http_whiteboard_listener);
    }
    if(m_Auth_sudo_cookieIsSet)
    {
        val["auth.sudo.cookie"] = ModelBase::toJson(m_Auth_sudo_cookie);
    }
    if(m_Auth_sudo_parameterIsSet)
    {
        val["auth.sudo.parameter"] = ModelBase::toJson(m_Auth_sudo_parameter);
    }
    if(m_Auth_annonymousIsSet)
    {
        val["auth.annonymous"] = ModelBase::toJson(m_Auth_annonymous);
    }
    if(m_Sling_auth_requirementsIsSet)
    {
        val["sling.auth.requirements"] = ModelBase::toJson(m_Sling_auth_requirements);
    }
    if(m_Sling_auth_anonymous_userIsSet)
    {
        val["sling.auth.anonymous.user"] = ModelBase::toJson(m_Sling_auth_anonymous_user);
    }
    if(m_Sling_auth_anonymous_passwordIsSet)
    {
        val["sling.auth.anonymous.password"] = ModelBase::toJson(m_Sling_auth_anonymous_password);
    }
    if(m_Auth_httpIsSet)
    {
        val["auth.http"] = ModelBase::toJson(m_Auth_http);
    }
    if(m_Auth_http_realmIsSet)
    {
        val["auth.http.realm"] = ModelBase::toJson(m_Auth_http_realm);
    }
    if(m_Auth_uri_suffixIsSet)
    {
        val["auth.uri.suffix"] = ModelBase::toJson(m_Auth_uri_suffix);
    }
    

    return val;
}

void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::fromJson(nlohmann::json& val)
{
    if(val.find("osgi.http.whiteboard.context.select") != val.end())
    {
        if(!val["osgi.http.whiteboard.context.select"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["osgi.http.whiteboard.context.select"]);
            setOsgiHttpWhiteboardContextSelect( newItem );
        }
        
    }
    if(val.find("osgi.http.whiteboard.listener") != val.end())
    {
        if(!val["osgi.http.whiteboard.listener"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["osgi.http.whiteboard.listener"]);
            setOsgiHttpWhiteboardListener( newItem );
        }
        
    }
    if(val.find("auth.sudo.cookie") != val.end())
    {
        if(!val["auth.sudo.cookie"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.sudo.cookie"]);
            setAuthSudoCookie( newItem );
        }
        
    }
    if(val.find("auth.sudo.parameter") != val.end())
    {
        if(!val["auth.sudo.parameter"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.sudo.parameter"]);
            setAuthSudoParameter( newItem );
        }
        
    }
    if(val.find("auth.annonymous") != val.end())
    {
        if(!val["auth.annonymous"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["auth.annonymous"]);
            setAuthAnnonymous( newItem );
        }
        
    }
    if(val.find("sling.auth.requirements") != val.end())
    {
        if(!val["sling.auth.requirements"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["sling.auth.requirements"]);
            setSlingAuthRequirements( newItem );
        }
        
    }
    if(val.find("sling.auth.anonymous.user") != val.end())
    {
        if(!val["sling.auth.anonymous.user"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["sling.auth.anonymous.user"]);
            setSlingAuthAnonymousUser( newItem );
        }
        
    }
    if(val.find("sling.auth.anonymous.password") != val.end())
    {
        if(!val["sling.auth.anonymous.password"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["sling.auth.anonymous.password"]);
            setSlingAuthAnonymousPassword( newItem );
        }
        
    }
    if(val.find("auth.http") != val.end())
    {
        if(!val["auth.http"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["auth.http"]);
            setAuthHttp( newItem );
        }
        
    }
    if(val.find("auth.http.realm") != val.end())
    {
        if(!val["auth.http.realm"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.http.realm"]);
            setAuthHttpRealm( newItem );
        }
        
    }
    if(val.find("auth.uri.suffix") != val.end())
    {
        if(!val["auth.uri.suffix"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["auth.uri.suffix"]);
            setAuthUriSuffix( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getOsgiHttpWhiteboardContextSelect() const
{
    return m_Osgi_http_whiteboard_context_select;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setOsgiHttpWhiteboardContextSelect(ConfigNodePropertyString const& value)
{
    m_Osgi_http_whiteboard_context_select = value;
    m_Osgi_http_whiteboard_context_selectIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::osgiHttpWhiteboardContextSelectIsSet() const
{
    return m_Osgi_http_whiteboard_context_selectIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetOsgi_http_whiteboard_context_select()
{
    m_Osgi_http_whiteboard_context_selectIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getOsgiHttpWhiteboardListener() const
{
    return m_Osgi_http_whiteboard_listener;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setOsgiHttpWhiteboardListener(ConfigNodePropertyString const& value)
{
    m_Osgi_http_whiteboard_listener = value;
    m_Osgi_http_whiteboard_listenerIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::osgiHttpWhiteboardListenerIsSet() const
{
    return m_Osgi_http_whiteboard_listenerIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetOsgi_http_whiteboard_listener()
{
    m_Osgi_http_whiteboard_listenerIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthSudoCookie() const
{
    return m_Auth_sudo_cookie;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthSudoCookie(ConfigNodePropertyString const& value)
{
    m_Auth_sudo_cookie = value;
    m_Auth_sudo_cookieIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::authSudoCookieIsSet() const
{
    return m_Auth_sudo_cookieIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetAuth_sudo_cookie()
{
    m_Auth_sudo_cookieIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthSudoParameter() const
{
    return m_Auth_sudo_parameter;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthSudoParameter(ConfigNodePropertyString const& value)
{
    m_Auth_sudo_parameter = value;
    m_Auth_sudo_parameterIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::authSudoParameterIsSet() const
{
    return m_Auth_sudo_parameterIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetAuth_sudo_parameter()
{
    m_Auth_sudo_parameterIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthAnnonymous() const
{
    return m_Auth_annonymous;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthAnnonymous(ConfigNodePropertyBoolean const& value)
{
    m_Auth_annonymous = value;
    m_Auth_annonymousIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::authAnnonymousIsSet() const
{
    return m_Auth_annonymousIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetAuth_annonymous()
{
    m_Auth_annonymousIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getSlingAuthRequirements() const
{
    return m_Sling_auth_requirements;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setSlingAuthRequirements(ConfigNodePropertyArray const& value)
{
    m_Sling_auth_requirements = value;
    m_Sling_auth_requirementsIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::slingAuthRequirementsIsSet() const
{
    return m_Sling_auth_requirementsIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetSling_auth_requirements()
{
    m_Sling_auth_requirementsIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getSlingAuthAnonymousUser() const
{
    return m_Sling_auth_anonymous_user;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setSlingAuthAnonymousUser(ConfigNodePropertyString const& value)
{
    m_Sling_auth_anonymous_user = value;
    m_Sling_auth_anonymous_userIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::slingAuthAnonymousUserIsSet() const
{
    return m_Sling_auth_anonymous_userIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetSling_auth_anonymous_user()
{
    m_Sling_auth_anonymous_userIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getSlingAuthAnonymousPassword() const
{
    return m_Sling_auth_anonymous_password;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setSlingAuthAnonymousPassword(ConfigNodePropertyString const& value)
{
    m_Sling_auth_anonymous_password = value;
    m_Sling_auth_anonymous_passwordIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::slingAuthAnonymousPasswordIsSet() const
{
    return m_Sling_auth_anonymous_passwordIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetSling_auth_anonymous_password()
{
    m_Sling_auth_anonymous_passwordIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthHttp() const
{
    return m_Auth_http;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthHttp(ConfigNodePropertyDropDown const& value)
{
    m_Auth_http = value;
    m_Auth_httpIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::authHttpIsSet() const
{
    return m_Auth_httpIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetAuth_http()
{
    m_Auth_httpIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthHttpRealm() const
{
    return m_Auth_http_realm;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthHttpRealm(ConfigNodePropertyString const& value)
{
    m_Auth_http_realm = value;
    m_Auth_http_realmIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::authHttpRealmIsSet() const
{
    return m_Auth_http_realmIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetAuth_http_realm()
{
    m_Auth_http_realmIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthUriSuffix() const
{
    return m_Auth_uri_suffix;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthUriSuffix(ConfigNodePropertyArray const& value)
{
    m_Auth_uri_suffix = value;
    m_Auth_uri_suffixIsSet = true;
}
bool OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::authUriSuffixIsSet() const
{
    return m_Auth_uri_suffixIsSet;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::unsetAuth_uri_suffix()
{
    m_Auth_uri_suffixIsSet = false;
}

}
}
}
}

