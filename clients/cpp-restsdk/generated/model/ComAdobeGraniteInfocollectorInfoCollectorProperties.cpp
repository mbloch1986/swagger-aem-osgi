/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteInfocollectorInfoCollectorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteInfocollectorInfoCollectorProperties::ComAdobeGraniteInfocollectorInfoCollectorProperties()
{
    m_Granite_infocollector_includeThreadDumpsIsSet = false;
    m_Granite_infocollector_includeHeapDumpIsSet = false;
}

ComAdobeGraniteInfocollectorInfoCollectorProperties::~ComAdobeGraniteInfocollectorInfoCollectorProperties()
{
}

void ComAdobeGraniteInfocollectorInfoCollectorProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteInfocollectorInfoCollectorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Granite_infocollector_includeThreadDumpsIsSet)
    {
        val[utility::conversions::to_string_t("granite.infocollector.includeThreadDumps")] = ModelBase::toJson(m_Granite_infocollector_includeThreadDumps);
    }
    if(m_Granite_infocollector_includeHeapDumpIsSet)
    {
        val[utility::conversions::to_string_t("granite.infocollector.includeHeapDump")] = ModelBase::toJson(m_Granite_infocollector_includeHeapDump);
    }

    return val;
}

void ComAdobeGraniteInfocollectorInfoCollectorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("granite.infocollector.includeThreadDumps")))
    {
        if(!val[utility::conversions::to_string_t("granite.infocollector.includeThreadDumps")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.infocollector.includeThreadDumps")]);
            setGraniteInfocollectorIncludeThreadDumps( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.infocollector.includeHeapDump")))
    {
        if(!val[utility::conversions::to_string_t("granite.infocollector.includeHeapDump")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.infocollector.includeHeapDump")]);
            setGraniteInfocollectorIncludeHeapDump( newItem );
        }
    }
}

void ComAdobeGraniteInfocollectorInfoCollectorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Granite_infocollector_includeThreadDumpsIsSet)
    {
        if (m_Granite_infocollector_includeThreadDumps.get())
        {
            m_Granite_infocollector_includeThreadDumps->toMultipart(multipart, utility::conversions::to_string_t("granite.infocollector.includeThreadDumps."));
        }
    }
    if(m_Granite_infocollector_includeHeapDumpIsSet)
    {
        if (m_Granite_infocollector_includeHeapDump.get())
        {
            m_Granite_infocollector_includeHeapDump->toMultipart(multipart, utility::conversions::to_string_t("granite.infocollector.includeHeapDump."));
        }
    }
}

void ComAdobeGraniteInfocollectorInfoCollectorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("granite.infocollector.includeThreadDumps")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.infocollector.includeThreadDumps")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.infocollector.includeThreadDumps."));
            setGraniteInfocollectorIncludeThreadDumps( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.infocollector.includeHeapDump")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.infocollector.includeHeapDump")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.infocollector.includeHeapDump."));
            setGraniteInfocollectorIncludeHeapDump( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteInfocollectorInfoCollectorProperties::getGraniteInfocollectorIncludeThreadDumps() const
{
    return m_Granite_infocollector_includeThreadDumps;
}


void ComAdobeGraniteInfocollectorInfoCollectorProperties::setGraniteInfocollectorIncludeThreadDumps(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_infocollector_includeThreadDumps = value;
    m_Granite_infocollector_includeThreadDumpsIsSet = true;
}
bool ComAdobeGraniteInfocollectorInfoCollectorProperties::graniteInfocollectorIncludeThreadDumpsIsSet() const
{
    return m_Granite_infocollector_includeThreadDumpsIsSet;
}

void ComAdobeGraniteInfocollectorInfoCollectorProperties::unsetGranite_infocollector_includeThreadDumps()
{
    m_Granite_infocollector_includeThreadDumpsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteInfocollectorInfoCollectorProperties::getGraniteInfocollectorIncludeHeapDump() const
{
    return m_Granite_infocollector_includeHeapDump;
}


void ComAdobeGraniteInfocollectorInfoCollectorProperties::setGraniteInfocollectorIncludeHeapDump(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_infocollector_includeHeapDump = value;
    m_Granite_infocollector_includeHeapDumpIsSet = true;
}
bool ComAdobeGraniteInfocollectorInfoCollectorProperties::graniteInfocollectorIncludeHeapDumpIsSet() const
{
    return m_Granite_infocollector_includeHeapDumpIsSet;
}

void ComAdobeGraniteInfocollectorInfoCollectorProperties::unsetGranite_infocollector_includeHeapDump()
{
    m_Granite_infocollector_includeHeapDumpIsSet = false;
}

}
}
}
}

