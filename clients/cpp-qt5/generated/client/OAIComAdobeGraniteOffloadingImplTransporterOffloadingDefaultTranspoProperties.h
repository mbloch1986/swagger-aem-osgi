/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.h
 *
 * 
 */

#ifndef OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties_H_
#define OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties: public OAIObject {
public:
    OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties();
    OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties(QString json);
    ~OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getDefaultTransportAgentToWorkerPrefix();
    void setDefaultTransportAgentToWorkerPrefix(OAIConfigNodePropertyString* default_transport_agent_to_worker_prefix);

    OAIConfigNodePropertyString* getDefaultTransportAgentToMasterPrefix();
    void setDefaultTransportAgentToMasterPrefix(OAIConfigNodePropertyString* default_transport_agent_to_master_prefix);

    OAIConfigNodePropertyString* getDefaultTransportInputPackage();
    void setDefaultTransportInputPackage(OAIConfigNodePropertyString* default_transport_input_package);

    OAIConfigNodePropertyString* getDefaultTransportOutputPackage();
    void setDefaultTransportOutputPackage(OAIConfigNodePropertyString* default_transport_output_package);

    OAIConfigNodePropertyBoolean* getDefaultTransportReplicationSynchronous();
    void setDefaultTransportReplicationSynchronous(OAIConfigNodePropertyBoolean* default_transport_replication_synchronous);

    OAIConfigNodePropertyBoolean* getDefaultTransportContentpackage();
    void setDefaultTransportContentpackage(OAIConfigNodePropertyBoolean* default_transport_contentpackage);

    OAIConfigNodePropertyBoolean* getOffloadingTransporterDefaultEnabled();
    void setOffloadingTransporterDefaultEnabled(OAIConfigNodePropertyBoolean* offloading_transporter_default_enabled);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* default_transport_agent_to_worker_prefix;
    bool m_default_transport_agent_to_worker_prefix_isSet;

    OAIConfigNodePropertyString* default_transport_agent_to_master_prefix;
    bool m_default_transport_agent_to_master_prefix_isSet;

    OAIConfigNodePropertyString* default_transport_input_package;
    bool m_default_transport_input_package_isSet;

    OAIConfigNodePropertyString* default_transport_output_package;
    bool m_default_transport_output_package_isSet;

    OAIConfigNodePropertyBoolean* default_transport_replication_synchronous;
    bool m_default_transport_replication_synchronous_isSet;

    OAIConfigNodePropertyBoolean* default_transport_contentpackage;
    bool m_default_transport_contentpackage_isSet;

    OAIConfigNodePropertyBoolean* offloading_transporter_default_enabled;
    bool m_offloading_transporter_default_enabled_isSet;

};

}

#endif /* OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties_H_ */
