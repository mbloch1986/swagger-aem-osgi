# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_integer import ConfigNodePropertyInteger  # noqa: F401,E501
from openapi_server import util


class ComAdobeCqSocialGroupImplGroupServiceImplProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_wait_time: ConfigNodePropertyInteger=None, min_wait_between_retries: ConfigNodePropertyInteger=None):  # noqa: E501
        """ComAdobeCqSocialGroupImplGroupServiceImplProperties - a model defined in OpenAPI

        :param max_wait_time: The max_wait_time of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.  # noqa: E501
        :type max_wait_time: ConfigNodePropertyInteger
        :param min_wait_between_retries: The min_wait_between_retries of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.  # noqa: E501
        :type min_wait_between_retries: ConfigNodePropertyInteger
        """
        self.openapi_types = {
            'max_wait_time': ConfigNodePropertyInteger,
            'min_wait_between_retries': ConfigNodePropertyInteger
        }

        self.attribute_map = {
            'max_wait_time': 'maxWaitTime',
            'min_wait_between_retries': 'minWaitBetweenRetries'
        }

        self._max_wait_time = max_wait_time
        self._min_wait_between_retries = min_wait_between_retries

    @classmethod
    def from_dict(cls, dikt) -> 'ComAdobeCqSocialGroupImplGroupServiceImplProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comAdobeCqSocialGroupImplGroupServiceImplProperties of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.  # noqa: E501
        :rtype: ComAdobeCqSocialGroupImplGroupServiceImplProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_wait_time(self) -> ConfigNodePropertyInteger:
        """Gets the max_wait_time of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.


        :return: The max_wait_time of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._max_wait_time

    @max_wait_time.setter
    def max_wait_time(self, max_wait_time: ConfigNodePropertyInteger):
        """Sets the max_wait_time of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.


        :param max_wait_time: The max_wait_time of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.
        :type max_wait_time: ConfigNodePropertyInteger
        """

        self._max_wait_time = max_wait_time

    @property
    def min_wait_between_retries(self) -> ConfigNodePropertyInteger:
        """Gets the min_wait_between_retries of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.


        :return: The min_wait_between_retries of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._min_wait_between_retries

    @min_wait_between_retries.setter
    def min_wait_between_retries(self, min_wait_between_retries: ConfigNodePropertyInteger):
        """Sets the min_wait_between_retries of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.


        :param min_wait_between_retries: The min_wait_between_retries of this ComAdobeCqSocialGroupImplGroupServiceImplProperties.
        :type min_wait_between_retries: ConfigNodePropertyInteger
        """

        self._min_wait_between_retries = min_wait_between_retries
