/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingEngineImplLogRequestLoggerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingEngineImplLogRequestLoggerProperties::OrgApacheSlingEngineImplLogRequestLoggerProperties()
{
    m_Request_log_outputIsSet = false;
    m_Request_log_outputtypeIsSet = false;
    m_Request_log_enabledIsSet = false;
    m_Access_log_outputIsSet = false;
    m_Access_log_outputtypeIsSet = false;
    m_Access_log_enabledIsSet = false;
}

OrgApacheSlingEngineImplLogRequestLoggerProperties::~OrgApacheSlingEngineImplLogRequestLoggerProperties()
{
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingEngineImplLogRequestLoggerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Request_log_outputIsSet)
    {
        val[utility::conversions::to_string_t("request.log.output")] = ModelBase::toJson(m_Request_log_output);
    }
    if(m_Request_log_outputtypeIsSet)
    {
        val[utility::conversions::to_string_t("request.log.outputtype")] = ModelBase::toJson(m_Request_log_outputtype);
    }
    if(m_Request_log_enabledIsSet)
    {
        val[utility::conversions::to_string_t("request.log.enabled")] = ModelBase::toJson(m_Request_log_enabled);
    }
    if(m_Access_log_outputIsSet)
    {
        val[utility::conversions::to_string_t("access.log.output")] = ModelBase::toJson(m_Access_log_output);
    }
    if(m_Access_log_outputtypeIsSet)
    {
        val[utility::conversions::to_string_t("access.log.outputtype")] = ModelBase::toJson(m_Access_log_outputtype);
    }
    if(m_Access_log_enabledIsSet)
    {
        val[utility::conversions::to_string_t("access.log.enabled")] = ModelBase::toJson(m_Access_log_enabled);
    }

    return val;
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("request.log.output")))
    {
        if(!val[utility::conversions::to_string_t("request.log.output")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("request.log.output")]);
            setRequestLogOutput( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("request.log.outputtype")))
    {
        if(!val[utility::conversions::to_string_t("request.log.outputtype")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("request.log.outputtype")]);
            setRequestLogOutputtype( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("request.log.enabled")))
    {
        if(!val[utility::conversions::to_string_t("request.log.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("request.log.enabled")]);
            setRequestLogEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("access.log.output")))
    {
        if(!val[utility::conversions::to_string_t("access.log.output")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("access.log.output")]);
            setAccessLogOutput( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("access.log.outputtype")))
    {
        if(!val[utility::conversions::to_string_t("access.log.outputtype")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("access.log.outputtype")]);
            setAccessLogOutputtype( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("access.log.enabled")))
    {
        if(!val[utility::conversions::to_string_t("access.log.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("access.log.enabled")]);
            setAccessLogEnabled( newItem );
        }
    }
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Request_log_outputIsSet)
    {
        if (m_Request_log_output.get())
        {
            m_Request_log_output->toMultipart(multipart, utility::conversions::to_string_t("request.log.output."));
        }
    }
    if(m_Request_log_outputtypeIsSet)
    {
        if (m_Request_log_outputtype.get())
        {
            m_Request_log_outputtype->toMultipart(multipart, utility::conversions::to_string_t("request.log.outputtype."));
        }
    }
    if(m_Request_log_enabledIsSet)
    {
        if (m_Request_log_enabled.get())
        {
            m_Request_log_enabled->toMultipart(multipart, utility::conversions::to_string_t("request.log.enabled."));
        }
    }
    if(m_Access_log_outputIsSet)
    {
        if (m_Access_log_output.get())
        {
            m_Access_log_output->toMultipart(multipart, utility::conversions::to_string_t("access.log.output."));
        }
    }
    if(m_Access_log_outputtypeIsSet)
    {
        if (m_Access_log_outputtype.get())
        {
            m_Access_log_outputtype->toMultipart(multipart, utility::conversions::to_string_t("access.log.outputtype."));
        }
    }
    if(m_Access_log_enabledIsSet)
    {
        if (m_Access_log_enabled.get())
        {
            m_Access_log_enabled->toMultipart(multipart, utility::conversions::to_string_t("access.log.enabled."));
        }
    }
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("request.log.output")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("request.log.output")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("request.log.output."));
            setRequestLogOutput( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("request.log.outputtype")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("request.log.outputtype")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("request.log.outputtype."));
            setRequestLogOutputtype( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("request.log.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("request.log.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("request.log.enabled."));
            setRequestLogEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("access.log.output")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("access.log.output")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("access.log.output."));
            setAccessLogOutput( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("access.log.outputtype")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("access.log.outputtype")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("access.log.outputtype."));
            setAccessLogOutputtype( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("access.log.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("access.log.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("access.log.enabled."));
            setAccessLogEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineImplLogRequestLoggerProperties::getRequestLogOutput() const
{
    return m_Request_log_output;
}


void OrgApacheSlingEngineImplLogRequestLoggerProperties::setRequestLogOutput(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Request_log_output = value;
    m_Request_log_outputIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::requestLogOutputIsSet() const
{
    return m_Request_log_outputIsSet;
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetRequest_log_output()
{
    m_Request_log_outputIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingEngineImplLogRequestLoggerProperties::getRequestLogOutputtype() const
{
    return m_Request_log_outputtype;
}


void OrgApacheSlingEngineImplLogRequestLoggerProperties::setRequestLogOutputtype(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Request_log_outputtype = value;
    m_Request_log_outputtypeIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::requestLogOutputtypeIsSet() const
{
    return m_Request_log_outputtypeIsSet;
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetRequest_log_outputtype()
{
    m_Request_log_outputtypeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingEngineImplLogRequestLoggerProperties::getRequestLogEnabled() const
{
    return m_Request_log_enabled;
}


void OrgApacheSlingEngineImplLogRequestLoggerProperties::setRequestLogEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Request_log_enabled = value;
    m_Request_log_enabledIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::requestLogEnabledIsSet() const
{
    return m_Request_log_enabledIsSet;
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetRequest_log_enabled()
{
    m_Request_log_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineImplLogRequestLoggerProperties::getAccessLogOutput() const
{
    return m_Access_log_output;
}


void OrgApacheSlingEngineImplLogRequestLoggerProperties::setAccessLogOutput(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Access_log_output = value;
    m_Access_log_outputIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::accessLogOutputIsSet() const
{
    return m_Access_log_outputIsSet;
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetAccess_log_output()
{
    m_Access_log_outputIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingEngineImplLogRequestLoggerProperties::getAccessLogOutputtype() const
{
    return m_Access_log_outputtype;
}


void OrgApacheSlingEngineImplLogRequestLoggerProperties::setAccessLogOutputtype(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Access_log_outputtype = value;
    m_Access_log_outputtypeIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::accessLogOutputtypeIsSet() const
{
    return m_Access_log_outputtypeIsSet;
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetAccess_log_outputtype()
{
    m_Access_log_outputtypeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingEngineImplLogRequestLoggerProperties::getAccessLogEnabled() const
{
    return m_Access_log_enabled;
}


void OrgApacheSlingEngineImplLogRequestLoggerProperties::setAccessLogEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Access_log_enabled = value;
    m_Access_log_enabledIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::accessLogEnabledIsSet() const
{
    return m_Access_log_enabledIsSet;
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetAccess_log_enabled()
{
    m_Access_log_enabledIsSet = false;
}

}
}
}
}

