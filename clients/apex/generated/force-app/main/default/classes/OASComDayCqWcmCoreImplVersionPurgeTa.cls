/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASComDayCqWcmCoreImplVersionPurgeTa
 */
public class OASComDayCqWcmCoreImplVersionPurgeTa implements OAS.MappedProperties {
    /**
     * Get versionpurgePaths
     * @return versionpurgePaths
     */
    public OASConfigNodePropertyArray versionpurgePaths { get; set; }

    /**
     * Get versionpurgeRecursive
     * @return versionpurgeRecursive
     */
    public OASConfigNodePropertyBoolean versionpurgeRecursive { get; set; }

    /**
     * Get versionpurgeMaxVersions
     * @return versionpurgeMaxVersions
     */
    public OASConfigNodePropertyInteger versionpurgeMaxVersions { get; set; }

    /**
     * Get versionpurgeMinVersions
     * @return versionpurgeMinVersions
     */
    public OASConfigNodePropertyInteger versionpurgeMinVersions { get; set; }

    /**
     * Get versionpurgeMaxAgeDays
     * @return versionpurgeMaxAgeDays
     */
    public OASConfigNodePropertyInteger versionpurgeMaxAgeDays { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'versionpurge.paths' => 'versionpurgePaths',
        'versionpurge.recursive' => 'versionpurgeRecursive',
        'versionpurge.maxVersions' => 'versionpurgeMaxVersions',
        'versionpurge.minVersions' => 'versionpurgeMinVersions',
        'versionpurge.maxAgeDays' => 'versionpurgeMaxAgeDays'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASComDayCqWcmCoreImplVersionPurgeTa getExample() {
        OASComDayCqWcmCoreImplVersionPurgeTa comDayCqWcmCoreImplVersionPurgeTaskProperties = new OASComDayCqWcmCoreImplVersionPurgeTa();
          comDayCqWcmCoreImplVersionPurgeTaskProperties.versionpurgePaths = OASConfigNodePropertyArray.getExample();
          comDayCqWcmCoreImplVersionPurgeTaskProperties.versionpurgeRecursive = OASConfigNodePropertyBoolean.getExample();
          comDayCqWcmCoreImplVersionPurgeTaskProperties.versionpurgeMaxVersions = OASConfigNodePropertyInteger.getExample();
          comDayCqWcmCoreImplVersionPurgeTaskProperties.versionpurgeMinVersions = OASConfigNodePropertyInteger.getExample();
          comDayCqWcmCoreImplVersionPurgeTaskProperties.versionpurgeMaxAgeDays = OASConfigNodePropertyInteger.getExample();
        return comDayCqWcmCoreImplVersionPurgeTaskProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASComDayCqWcmCoreImplVersionPurgeTa) {           
            OASComDayCqWcmCoreImplVersionPurgeTa comDayCqWcmCoreImplVersionPurgeTaskProperties = (OASComDayCqWcmCoreImplVersionPurgeTa) obj;
            return this.versionpurgePaths == comDayCqWcmCoreImplVersionPurgeTaskProperties.versionpurgePaths
                && this.versionpurgeRecursive == comDayCqWcmCoreImplVersionPurgeTaskProperties.versionpurgeRecursive
                && this.versionpurgeMaxVersions == comDayCqWcmCoreImplVersionPurgeTaskProperties.versionpurgeMaxVersions
                && this.versionpurgeMinVersions == comDayCqWcmCoreImplVersionPurgeTaskProperties.versionpurgeMinVersions
                && this.versionpurgeMaxAgeDays == comDayCqWcmCoreImplVersionPurgeTaskProperties.versionpurgeMaxAgeDays;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (versionpurgePaths == null ? 0 : System.hashCode(versionpurgePaths));
        hashCode = (17 * hashCode) + (versionpurgeRecursive == null ? 0 : System.hashCode(versionpurgeRecursive));
        hashCode = (17 * hashCode) + (versionpurgeMaxVersions == null ? 0 : System.hashCode(versionpurgeMaxVersions));
        hashCode = (17 * hashCode) + (versionpurgeMinVersions == null ? 0 : System.hashCode(versionpurgeMinVersions));
        hashCode = (17 * hashCode) + (versionpurgeMaxAgeDays == null ? 0 : System.hashCode(versionpurgeMaxAgeDays));
        return hashCode;
    }
}

