/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties {
  #[serde(rename = "enabled")]
  enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "disabledForGroups")]
  disabled_for_groups: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties {
  pub fn new() -> ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties {
    ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties {
      enabled: None,
      disabled_for_groups: None
    }
  }

  pub fn set_enabled(&mut self, enabled: ::models::ConfigNodePropertyBoolean) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_disabled_for_groups(&mut self, disabled_for_groups: ::models::ConfigNodePropertyArray) {
    self.disabled_for_groups = Some(disabled_for_groups);
  }

  pub fn with_disabled_for_groups(mut self, disabled_for_groups: ::models::ConfigNodePropertyArray) -> ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties {
    self.disabled_for_groups = Some(disabled_for_groups);
    self
  }

  pub fn disabled_for_groups(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.disabled_for_groups.as_ref()
  }

  pub fn reset_disabled_for_groups(&mut self) {
    self.disabled_for_groups = None;
  }

}



