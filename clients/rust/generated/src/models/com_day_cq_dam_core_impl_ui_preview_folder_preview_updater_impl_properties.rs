/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
  #[serde(rename = "createPreviewEnabled")]
  create_preview_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "updatePreviewEnabled")]
  update_preview_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "queueSize")]
  queue_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "folderPreviewRenditionRegex")]
  folder_preview_rendition_regex: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
  pub fn new() -> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
    ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
      create_preview_enabled: None,
      update_preview_enabled: None,
      queue_size: None,
      folder_preview_rendition_regex: None
    }
  }

  pub fn set_create_preview_enabled(&mut self, create_preview_enabled: ::models::ConfigNodePropertyBoolean) {
    self.create_preview_enabled = Some(create_preview_enabled);
  }

  pub fn with_create_preview_enabled(mut self, create_preview_enabled: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
    self.create_preview_enabled = Some(create_preview_enabled);
    self
  }

  pub fn create_preview_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.create_preview_enabled.as_ref()
  }

  pub fn reset_create_preview_enabled(&mut self) {
    self.create_preview_enabled = None;
  }

  pub fn set_update_preview_enabled(&mut self, update_preview_enabled: ::models::ConfigNodePropertyBoolean) {
    self.update_preview_enabled = Some(update_preview_enabled);
  }

  pub fn with_update_preview_enabled(mut self, update_preview_enabled: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
    self.update_preview_enabled = Some(update_preview_enabled);
    self
  }

  pub fn update_preview_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.update_preview_enabled.as_ref()
  }

  pub fn reset_update_preview_enabled(&mut self) {
    self.update_preview_enabled = None;
  }

  pub fn set_queue_size(&mut self, queue_size: ::models::ConfigNodePropertyInteger) {
    self.queue_size = Some(queue_size);
  }

  pub fn with_queue_size(mut self, queue_size: ::models::ConfigNodePropertyInteger) -> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
    self.queue_size = Some(queue_size);
    self
  }

  pub fn queue_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.queue_size.as_ref()
  }

  pub fn reset_queue_size(&mut self) {
    self.queue_size = None;
  }

  pub fn set_folder_preview_rendition_regex(&mut self, folder_preview_rendition_regex: ::models::ConfigNodePropertyString) {
    self.folder_preview_rendition_regex = Some(folder_preview_rendition_regex);
  }

  pub fn with_folder_preview_rendition_regex(mut self, folder_preview_rendition_regex: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
    self.folder_preview_rendition_regex = Some(folder_preview_rendition_regex);
    self
  }

  pub fn folder_preview_rendition_regex(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.folder_preview_rendition_regex.as_ref()
  }

  pub fn reset_folder_preview_rendition_regex(&mut self) {
    self.folder_preview_rendition_regex = None;
  }

}



