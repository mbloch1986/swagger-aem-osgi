/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties : IEquatable<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties>
    { 
        /// <summary>
        /// Gets or Sets Datasources
        /// </summary>
        [DataMember(Name="datasources")]
        public ConfigNodePropertyArray Datasources { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step")]
        public ConfigNodePropertyInteger Step { get; set; }

        /// <summary>
        /// Gets or Sets Archives
        /// </summary>
        [DataMember(Name="archives")]
        public ConfigNodePropertyArray Archives { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path")]
        public ConfigNodePropertyString Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {\n");
            sb.Append("  Datasources: ").Append(Datasources).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Archives: ").Append(Archives).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Datasources == other.Datasources ||
                    Datasources != null &&
                    Datasources.Equals(other.Datasources)
                ) && 
                (
                    Step == other.Step ||
                    Step != null &&
                    Step.Equals(other.Step)
                ) && 
                (
                    Archives == other.Archives ||
                    Archives != null &&
                    Archives.Equals(other.Archives)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Datasources != null)
                    hashCode = hashCode * 59 + Datasources.GetHashCode();
                    if (Step != null)
                    hashCode = hashCode * 59 + Step.GetHashCode();
                    if (Archives != null)
                    hashCode = hashCode * 59 + Archives.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties left, OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties left, OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
