/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqDamCfmImplConfFeatureConfigImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::ComAdobeCqDamCfmImplConfFeatureConfigImplProperties()
{
    m_Dam_cfm_resourceTypesIsSet = false;
    m_Dam_cfm_referencePropertiesIsSet = false;
}

ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::~ComAdobeCqDamCfmImplConfFeatureConfigImplProperties()
{
}

void ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Dam_cfm_resourceTypesIsSet)
    {
        val[utility::conversions::to_string_t("dam.cfm.resourceTypes")] = ModelBase::toJson(m_Dam_cfm_resourceTypes);
    }
    if(m_Dam_cfm_referencePropertiesIsSet)
    {
        val[utility::conversions::to_string_t("dam.cfm.referenceProperties")] = ModelBase::toJson(m_Dam_cfm_referenceProperties);
    }

    return val;
}

void ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("dam.cfm.resourceTypes")))
    {
        if(!val[utility::conversions::to_string_t("dam.cfm.resourceTypes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("dam.cfm.resourceTypes")]);
            setDamCfmResourceTypes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dam.cfm.referenceProperties")))
    {
        if(!val[utility::conversions::to_string_t("dam.cfm.referenceProperties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("dam.cfm.referenceProperties")]);
            setDamCfmReferenceProperties( newItem );
        }
    }
}

void ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Dam_cfm_resourceTypesIsSet)
    {
        if (m_Dam_cfm_resourceTypes.get())
        {
            m_Dam_cfm_resourceTypes->toMultipart(multipart, utility::conversions::to_string_t("dam.cfm.resourceTypes."));
        }
    }
    if(m_Dam_cfm_referencePropertiesIsSet)
    {
        if (m_Dam_cfm_referenceProperties.get())
        {
            m_Dam_cfm_referenceProperties->toMultipart(multipart, utility::conversions::to_string_t("dam.cfm.referenceProperties."));
        }
    }
}

void ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.resourceTypes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.resourceTypes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dam.cfm.resourceTypes."));
            setDamCfmResourceTypes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.referenceProperties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.referenceProperties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dam.cfm.referenceProperties."));
            setDamCfmReferenceProperties( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::getDamCfmResourceTypes() const
{
    return m_Dam_cfm_resourceTypes;
}


void ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::setDamCfmResourceTypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Dam_cfm_resourceTypes = value;
    m_Dam_cfm_resourceTypesIsSet = true;
}
bool ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::damCfmResourceTypesIsSet() const
{
    return m_Dam_cfm_resourceTypesIsSet;
}

void ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::unsetDam_cfm_resourceTypes()
{
    m_Dam_cfm_resourceTypesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::getDamCfmReferenceProperties() const
{
    return m_Dam_cfm_referenceProperties;
}


void ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::setDamCfmReferenceProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Dam_cfm_referenceProperties = value;
    m_Dam_cfm_referencePropertiesIsSet = true;
}
bool ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::damCfmReferencePropertiesIsSet() const
{
    return m_Dam_cfm_referencePropertiesIsSet;
}

void ComAdobeCqDamCfmImplConfFeatureConfigImplProperties::unsetDam_cfm_referenceProperties()
{
    m_Dam_cfm_referencePropertiesIsSet = false;
}

}
}
}
}

