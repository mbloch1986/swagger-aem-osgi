package org.openapitools.client.api

import argonaut._
import argonaut.EncodeJson._
import argonaut.DecodeJson._

import org.http4s.{EntityDecoder, EntityEncoder}
import org.http4s.argonaut._
import org.joda.time.DateTime
import ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo._

case class ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo (
  pid: Option[String],
title: Option[String],
description: Option[String],
properties: Option[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties])

object ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo {
  import DateTimeCodecs._

  implicit val ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfoCodecJson: CodecJson[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo] = CodecJson.derive[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo]
  implicit val ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfoDecoder: EntityDecoder[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo] = jsonOf[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo]
  implicit val ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfoEncoder: EntityEncoder[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo] = jsonEncoderOf[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo]
}
