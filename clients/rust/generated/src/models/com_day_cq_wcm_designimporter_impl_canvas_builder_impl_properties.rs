/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
  #[serde(rename = "filepattern")]
  filepattern: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "build.page.nodes")]
  build_page_nodes: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "build.client.libs")]
  build_client_libs: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "build.canvas.component")]
  build_canvas_component: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
  pub fn new() -> ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
    ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
      filepattern: None,
      build_page_nodes: None,
      build_client_libs: None,
      build_canvas_component: None
    }
  }

  pub fn set_filepattern(&mut self, filepattern: ::models::ConfigNodePropertyString) {
    self.filepattern = Some(filepattern);
  }

  pub fn with_filepattern(mut self, filepattern: ::models::ConfigNodePropertyString) -> ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
    self.filepattern = Some(filepattern);
    self
  }

  pub fn filepattern(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.filepattern.as_ref()
  }

  pub fn reset_filepattern(&mut self) {
    self.filepattern = None;
  }

  pub fn set_build_page_nodes(&mut self, build_page_nodes: ::models::ConfigNodePropertyBoolean) {
    self.build_page_nodes = Some(build_page_nodes);
  }

  pub fn with_build_page_nodes(mut self, build_page_nodes: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
    self.build_page_nodes = Some(build_page_nodes);
    self
  }

  pub fn build_page_nodes(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.build_page_nodes.as_ref()
  }

  pub fn reset_build_page_nodes(&mut self) {
    self.build_page_nodes = None;
  }

  pub fn set_build_client_libs(&mut self, build_client_libs: ::models::ConfigNodePropertyBoolean) {
    self.build_client_libs = Some(build_client_libs);
  }

  pub fn with_build_client_libs(mut self, build_client_libs: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
    self.build_client_libs = Some(build_client_libs);
    self
  }

  pub fn build_client_libs(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.build_client_libs.as_ref()
  }

  pub fn reset_build_client_libs(&mut self) {
    self.build_client_libs = None;
  }

  pub fn set_build_canvas_component(&mut self, build_canvas_component: ::models::ConfigNodePropertyBoolean) {
    self.build_canvas_component = Some(build_canvas_component);
  }

  pub fn with_build_canvas_component(mut self, build_canvas_component: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
    self.build_canvas_component = Some(build_canvas_component);
    self
  }

  pub fn build_canvas_component(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.build_canvas_component.as_ref()
  }

  pub fn reset_build_canvas_component(&mut self) {
    self.build_canvas_component = None;
  }

}



