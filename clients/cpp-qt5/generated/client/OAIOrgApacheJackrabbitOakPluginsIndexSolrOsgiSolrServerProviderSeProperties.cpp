/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties() {
    init();
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::~OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::init() {
    server_type = new OAIConfigNodePropertyDropDown();
    m_server_type_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::cleanup() {
    if(server_type != nullptr) { 
        delete server_type;
    }
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&server_type, pJson["server.type"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
}

QString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::asJsonObject() {
    QJsonObject obj;
    if((server_type != nullptr) && (server_type->isSet())){
        toJsonValue(QString("server.type"), server_type, obj, QString("OAIConfigNodePropertyDropDown"));
    }

    return obj;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::getServerType() {
    return server_type;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::setServerType(OAIConfigNodePropertyDropDown* server_type) {
    this->server_type = server_type;
    this->m_server_type_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(server_type != nullptr && server_type->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

