/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties() {
    this->init();
}

OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::~OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties() {
    
}

void
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::init() {
    m_get_system_workflow_models_isSet = false;
    m_get_package_root_path_isSet = false;
}

void
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(get_system_workflow_models, json[QString("getSystemWorkflowModels")]);
    
    ::OpenAPI::fromJsonValue(get_package_root_path, json[QString("getPackageRootPath")]);
    
}

QString
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::asJsonObject() const {
    QJsonObject obj;
	if(get_system_workflow_models.isSet()){
        obj.insert(QString("getSystemWorkflowModels"), ::OpenAPI::toJsonValue(get_system_workflow_models));
    }
	if(get_package_root_path.isSet()){
        obj.insert(QString("getPackageRootPath"), ::OpenAPI::toJsonValue(get_package_root_path));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::getGetSystemWorkflowModels() const {
    return get_system_workflow_models;
}
void
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::setGetSystemWorkflowModels(const OAIConfigNodePropertyArray &get_system_workflow_models) {
    this->get_system_workflow_models = get_system_workflow_models;
    this->m_get_system_workflow_models_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::getGetPackageRootPath() const {
    return get_package_root_path;
}
void
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::setGetPackageRootPath(const OAIConfigNodePropertyString &get_package_root_path) {
    this->get_package_root_path = get_package_root_path;
    this->m_get_package_root_path_isSet = true;
}


bool
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(get_system_workflow_models.isSet()){ isObjectUpdated = true; break;}
    
        if(get_package_root_path.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

