/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteMonitoringImplScriptConfigImplProperties : IEquatable<ComAdobeGraniteMonitoringImplScriptConfigImplProperties>
    { 
        /// <summary>
        /// Gets or Sets ScriptFilename
        /// </summary>
        [DataMember(Name="script.filename")]
        public ConfigNodePropertyString ScriptFilename { get; set; }

        /// <summary>
        /// Gets or Sets ScriptDisplay
        /// </summary>
        [DataMember(Name="script.display")]
        public ConfigNodePropertyString ScriptDisplay { get; set; }

        /// <summary>
        /// Gets or Sets ScriptPath
        /// </summary>
        [DataMember(Name="script.path")]
        public ConfigNodePropertyString ScriptPath { get; set; }

        /// <summary>
        /// Gets or Sets ScriptPlatform
        /// </summary>
        [DataMember(Name="script.platform")]
        public ConfigNodePropertyArray ScriptPlatform { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name="interval")]
        public ConfigNodePropertyInteger Interval { get; set; }

        /// <summary>
        /// Gets or Sets Jmxdomain
        /// </summary>
        [DataMember(Name="jmxdomain")]
        public ConfigNodePropertyString Jmxdomain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteMonitoringImplScriptConfigImplProperties {\n");
            sb.Append("  ScriptFilename: ").Append(ScriptFilename).Append("\n");
            sb.Append("  ScriptDisplay: ").Append(ScriptDisplay).Append("\n");
            sb.Append("  ScriptPath: ").Append(ScriptPath).Append("\n");
            sb.Append("  ScriptPlatform: ").Append(ScriptPlatform).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Jmxdomain: ").Append(Jmxdomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteMonitoringImplScriptConfigImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteMonitoringImplScriptConfigImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteMonitoringImplScriptConfigImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteMonitoringImplScriptConfigImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ScriptFilename == other.ScriptFilename ||
                    ScriptFilename != null &&
                    ScriptFilename.Equals(other.ScriptFilename)
                ) && 
                (
                    ScriptDisplay == other.ScriptDisplay ||
                    ScriptDisplay != null &&
                    ScriptDisplay.Equals(other.ScriptDisplay)
                ) && 
                (
                    ScriptPath == other.ScriptPath ||
                    ScriptPath != null &&
                    ScriptPath.Equals(other.ScriptPath)
                ) && 
                (
                    ScriptPlatform == other.ScriptPlatform ||
                    ScriptPlatform != null &&
                    ScriptPlatform.Equals(other.ScriptPlatform)
                ) && 
                (
                    Interval == other.Interval ||
                    Interval != null &&
                    Interval.Equals(other.Interval)
                ) && 
                (
                    Jmxdomain == other.Jmxdomain ||
                    Jmxdomain != null &&
                    Jmxdomain.Equals(other.Jmxdomain)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ScriptFilename != null)
                    hashCode = hashCode * 59 + ScriptFilename.GetHashCode();
                    if (ScriptDisplay != null)
                    hashCode = hashCode * 59 + ScriptDisplay.GetHashCode();
                    if (ScriptPath != null)
                    hashCode = hashCode * 59 + ScriptPath.GetHashCode();
                    if (ScriptPlatform != null)
                    hashCode = hashCode * 59 + ScriptPlatform.GetHashCode();
                    if (Interval != null)
                    hashCode = hashCode * 59 + Interval.GetHashCode();
                    if (Jmxdomain != null)
                    hashCode = hashCode * 59 + Jmxdomain.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteMonitoringImplScriptConfigImplProperties left, ComAdobeGraniteMonitoringImplScriptConfigImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteMonitoringImplScriptConfigImplProperties left, ComAdobeGraniteMonitoringImplScriptConfigImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
