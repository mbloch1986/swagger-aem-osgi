/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties()
{
    m_Path_desc_fieldIsSet = false;
    m_Path_child_fieldIsSet = false;
    m_Path_parent_fieldIsSet = false;
    m_Path_exact_fieldIsSet = false;
    m_Catch_all_fieldIsSet = false;
    m_Collapsed_path_fieldIsSet = false;
    m_Path_depth_fieldIsSet = false;
    m_Commit_policyIsSet = false;
    m_RowsIsSet = false;
    m_Path_restrictionsIsSet = false;
    m_Property_restrictionsIsSet = false;
    m_Primarytypes_restrictionsIsSet = false;
    m_Ignored_propertiesIsSet = false;
    m_Used_propertiesIsSet = false;
    m_Type_mappingsIsSet = false;
    m_Property_mappingsIsSet = false;
    m_Collapse_jcrcontent_nodesIsSet = false;
}

OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::~OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties()
{
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Path_desc_fieldIsSet)
    {
        val[utility::conversions::to_string_t("path.desc.field")] = ModelBase::toJson(m_Path_desc_field);
    }
    if(m_Path_child_fieldIsSet)
    {
        val[utility::conversions::to_string_t("path.child.field")] = ModelBase::toJson(m_Path_child_field);
    }
    if(m_Path_parent_fieldIsSet)
    {
        val[utility::conversions::to_string_t("path.parent.field")] = ModelBase::toJson(m_Path_parent_field);
    }
    if(m_Path_exact_fieldIsSet)
    {
        val[utility::conversions::to_string_t("path.exact.field")] = ModelBase::toJson(m_Path_exact_field);
    }
    if(m_Catch_all_fieldIsSet)
    {
        val[utility::conversions::to_string_t("catch.all.field")] = ModelBase::toJson(m_Catch_all_field);
    }
    if(m_Collapsed_path_fieldIsSet)
    {
        val[utility::conversions::to_string_t("collapsed.path.field")] = ModelBase::toJson(m_Collapsed_path_field);
    }
    if(m_Path_depth_fieldIsSet)
    {
        val[utility::conversions::to_string_t("path.depth.field")] = ModelBase::toJson(m_Path_depth_field);
    }
    if(m_Commit_policyIsSet)
    {
        val[utility::conversions::to_string_t("commit.policy")] = ModelBase::toJson(m_Commit_policy);
    }
    if(m_RowsIsSet)
    {
        val[utility::conversions::to_string_t("rows")] = ModelBase::toJson(m_Rows);
    }
    if(m_Path_restrictionsIsSet)
    {
        val[utility::conversions::to_string_t("path.restrictions")] = ModelBase::toJson(m_Path_restrictions);
    }
    if(m_Property_restrictionsIsSet)
    {
        val[utility::conversions::to_string_t("property.restrictions")] = ModelBase::toJson(m_Property_restrictions);
    }
    if(m_Primarytypes_restrictionsIsSet)
    {
        val[utility::conversions::to_string_t("primarytypes.restrictions")] = ModelBase::toJson(m_Primarytypes_restrictions);
    }
    if(m_Ignored_propertiesIsSet)
    {
        val[utility::conversions::to_string_t("ignored.properties")] = ModelBase::toJson(m_Ignored_properties);
    }
    if(m_Used_propertiesIsSet)
    {
        val[utility::conversions::to_string_t("used.properties")] = ModelBase::toJson(m_Used_properties);
    }
    if(m_Type_mappingsIsSet)
    {
        val[utility::conversions::to_string_t("type.mappings")] = ModelBase::toJson(m_Type_mappings);
    }
    if(m_Property_mappingsIsSet)
    {
        val[utility::conversions::to_string_t("property.mappings")] = ModelBase::toJson(m_Property_mappings);
    }
    if(m_Collapse_jcrcontent_nodesIsSet)
    {
        val[utility::conversions::to_string_t("collapse.jcrcontent.nodes")] = ModelBase::toJson(m_Collapse_jcrcontent_nodes);
    }

    return val;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("path.desc.field")))
    {
        if(!val[utility::conversions::to_string_t("path.desc.field")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path.desc.field")]);
            setPathDescField( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path.child.field")))
    {
        if(!val[utility::conversions::to_string_t("path.child.field")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path.child.field")]);
            setPathChildField( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path.parent.field")))
    {
        if(!val[utility::conversions::to_string_t("path.parent.field")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path.parent.field")]);
            setPathParentField( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path.exact.field")))
    {
        if(!val[utility::conversions::to_string_t("path.exact.field")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path.exact.field")]);
            setPathExactField( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("catch.all.field")))
    {
        if(!val[utility::conversions::to_string_t("catch.all.field")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("catch.all.field")]);
            setCatchAllField( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("collapsed.path.field")))
    {
        if(!val[utility::conversions::to_string_t("collapsed.path.field")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("collapsed.path.field")]);
            setCollapsedPathField( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path.depth.field")))
    {
        if(!val[utility::conversions::to_string_t("path.depth.field")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path.depth.field")]);
            setPathDepthField( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("commit.policy")))
    {
        if(!val[utility::conversions::to_string_t("commit.policy")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("commit.policy")]);
            setCommitPolicy( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rows")))
    {
        if(!val[utility::conversions::to_string_t("rows")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("rows")]);
            setRows( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path.restrictions")))
    {
        if(!val[utility::conversions::to_string_t("path.restrictions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("path.restrictions")]);
            setPathRestrictions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("property.restrictions")))
    {
        if(!val[utility::conversions::to_string_t("property.restrictions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("property.restrictions")]);
            setPropertyRestrictions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("primarytypes.restrictions")))
    {
        if(!val[utility::conversions::to_string_t("primarytypes.restrictions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("primarytypes.restrictions")]);
            setPrimarytypesRestrictions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ignored.properties")))
    {
        if(!val[utility::conversions::to_string_t("ignored.properties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("ignored.properties")]);
            setIgnoredProperties( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("used.properties")))
    {
        if(!val[utility::conversions::to_string_t("used.properties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("used.properties")]);
            setUsedProperties( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type.mappings")))
    {
        if(!val[utility::conversions::to_string_t("type.mappings")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("type.mappings")]);
            setTypeMappings( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("property.mappings")))
    {
        if(!val[utility::conversions::to_string_t("property.mappings")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("property.mappings")]);
            setPropertyMappings( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("collapse.jcrcontent.nodes")))
    {
        if(!val[utility::conversions::to_string_t("collapse.jcrcontent.nodes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("collapse.jcrcontent.nodes")]);
            setCollapseJcrcontentNodes( newItem );
        }
    }
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Path_desc_fieldIsSet)
    {
        if (m_Path_desc_field.get())
        {
            m_Path_desc_field->toMultipart(multipart, utility::conversions::to_string_t("path.desc.field."));
        }
    }
    if(m_Path_child_fieldIsSet)
    {
        if (m_Path_child_field.get())
        {
            m_Path_child_field->toMultipart(multipart, utility::conversions::to_string_t("path.child.field."));
        }
    }
    if(m_Path_parent_fieldIsSet)
    {
        if (m_Path_parent_field.get())
        {
            m_Path_parent_field->toMultipart(multipart, utility::conversions::to_string_t("path.parent.field."));
        }
    }
    if(m_Path_exact_fieldIsSet)
    {
        if (m_Path_exact_field.get())
        {
            m_Path_exact_field->toMultipart(multipart, utility::conversions::to_string_t("path.exact.field."));
        }
    }
    if(m_Catch_all_fieldIsSet)
    {
        if (m_Catch_all_field.get())
        {
            m_Catch_all_field->toMultipart(multipart, utility::conversions::to_string_t("catch.all.field."));
        }
    }
    if(m_Collapsed_path_fieldIsSet)
    {
        if (m_Collapsed_path_field.get())
        {
            m_Collapsed_path_field->toMultipart(multipart, utility::conversions::to_string_t("collapsed.path.field."));
        }
    }
    if(m_Path_depth_fieldIsSet)
    {
        if (m_Path_depth_field.get())
        {
            m_Path_depth_field->toMultipart(multipart, utility::conversions::to_string_t("path.depth.field."));
        }
    }
    if(m_Commit_policyIsSet)
    {
        if (m_Commit_policy.get())
        {
            m_Commit_policy->toMultipart(multipart, utility::conversions::to_string_t("commit.policy."));
        }
    }
    if(m_RowsIsSet)
    {
        if (m_Rows.get())
        {
            m_Rows->toMultipart(multipart, utility::conversions::to_string_t("rows."));
        }
    }
    if(m_Path_restrictionsIsSet)
    {
        if (m_Path_restrictions.get())
        {
            m_Path_restrictions->toMultipart(multipart, utility::conversions::to_string_t("path.restrictions."));
        }
    }
    if(m_Property_restrictionsIsSet)
    {
        if (m_Property_restrictions.get())
        {
            m_Property_restrictions->toMultipart(multipart, utility::conversions::to_string_t("property.restrictions."));
        }
    }
    if(m_Primarytypes_restrictionsIsSet)
    {
        if (m_Primarytypes_restrictions.get())
        {
            m_Primarytypes_restrictions->toMultipart(multipart, utility::conversions::to_string_t("primarytypes.restrictions."));
        }
    }
    if(m_Ignored_propertiesIsSet)
    {
        if (m_Ignored_properties.get())
        {
            m_Ignored_properties->toMultipart(multipart, utility::conversions::to_string_t("ignored.properties."));
        }
    }
    if(m_Used_propertiesIsSet)
    {
        if (m_Used_properties.get())
        {
            m_Used_properties->toMultipart(multipart, utility::conversions::to_string_t("used.properties."));
        }
    }
    if(m_Type_mappingsIsSet)
    {
        if (m_Type_mappings.get())
        {
            m_Type_mappings->toMultipart(multipart, utility::conversions::to_string_t("type.mappings."));
        }
    }
    if(m_Property_mappingsIsSet)
    {
        if (m_Property_mappings.get())
        {
            m_Property_mappings->toMultipart(multipart, utility::conversions::to_string_t("property.mappings."));
        }
    }
    if(m_Collapse_jcrcontent_nodesIsSet)
    {
        if (m_Collapse_jcrcontent_nodes.get())
        {
            m_Collapse_jcrcontent_nodes->toMultipart(multipart, utility::conversions::to_string_t("collapse.jcrcontent.nodes."));
        }
    }
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("path.desc.field")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path.desc.field")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path.desc.field."));
            setPathDescField( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path.child.field")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path.child.field")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path.child.field."));
            setPathChildField( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path.parent.field")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path.parent.field")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path.parent.field."));
            setPathParentField( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path.exact.field")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path.exact.field")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path.exact.field."));
            setPathExactField( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("catch.all.field")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("catch.all.field")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("catch.all.field."));
            setCatchAllField( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("collapsed.path.field")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("collapsed.path.field")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("collapsed.path.field."));
            setCollapsedPathField( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path.depth.field")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path.depth.field")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path.depth.field."));
            setPathDepthField( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("commit.policy")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("commit.policy")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("commit.policy."));
            setCommitPolicy( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rows")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rows")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rows."));
            setRows( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path.restrictions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path.restrictions")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path.restrictions."));
            setPathRestrictions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("property.restrictions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("property.restrictions")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("property.restrictions."));
            setPropertyRestrictions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("primarytypes.restrictions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("primarytypes.restrictions")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("primarytypes.restrictions."));
            setPrimarytypesRestrictions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ignored.properties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ignored.properties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ignored.properties."));
            setIgnoredProperties( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("used.properties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("used.properties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("used.properties."));
            setUsedProperties( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type.mappings")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("type.mappings")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("type.mappings."));
            setTypeMappings( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("property.mappings")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("property.mappings")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("property.mappings."));
            setPropertyMappings( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("collapse.jcrcontent.nodes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("collapse.jcrcontent.nodes")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("collapse.jcrcontent.nodes."));
            setCollapseJcrcontentNodes( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathDescField() const
{
    return m_Path_desc_field;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathDescField(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path_desc_field = value;
    m_Path_desc_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathDescFieldIsSet() const
{
    return m_Path_desc_fieldIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_desc_field()
{
    m_Path_desc_fieldIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathChildField() const
{
    return m_Path_child_field;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathChildField(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path_child_field = value;
    m_Path_child_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathChildFieldIsSet() const
{
    return m_Path_child_fieldIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_child_field()
{
    m_Path_child_fieldIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathParentField() const
{
    return m_Path_parent_field;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathParentField(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path_parent_field = value;
    m_Path_parent_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathParentFieldIsSet() const
{
    return m_Path_parent_fieldIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_parent_field()
{
    m_Path_parent_fieldIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathExactField() const
{
    return m_Path_exact_field;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathExactField(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path_exact_field = value;
    m_Path_exact_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathExactFieldIsSet() const
{
    return m_Path_exact_fieldIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_exact_field()
{
    m_Path_exact_fieldIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCatchAllField() const
{
    return m_Catch_all_field;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCatchAllField(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Catch_all_field = value;
    m_Catch_all_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::catchAllFieldIsSet() const
{
    return m_Catch_all_fieldIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetCatch_all_field()
{
    m_Catch_all_fieldIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCollapsedPathField() const
{
    return m_Collapsed_path_field;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCollapsedPathField(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Collapsed_path_field = value;
    m_Collapsed_path_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::collapsedPathFieldIsSet() const
{
    return m_Collapsed_path_fieldIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetCollapsed_path_field()
{
    m_Collapsed_path_fieldIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathDepthField() const
{
    return m_Path_depth_field;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathDepthField(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path_depth_field = value;
    m_Path_depth_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathDepthFieldIsSet() const
{
    return m_Path_depth_fieldIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_depth_field()
{
    m_Path_depth_fieldIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCommitPolicy() const
{
    return m_Commit_policy;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCommitPolicy(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Commit_policy = value;
    m_Commit_policyIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::commitPolicyIsSet() const
{
    return m_Commit_policyIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetCommit_policy()
{
    m_Commit_policyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getRows() const
{
    return m_Rows;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setRows(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Rows = value;
    m_RowsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::rowsIsSet() const
{
    return m_RowsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetRows()
{
    m_RowsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathRestrictions() const
{
    return m_Path_restrictions;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathRestrictions(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Path_restrictions = value;
    m_Path_restrictionsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathRestrictionsIsSet() const
{
    return m_Path_restrictionsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_restrictions()
{
    m_Path_restrictionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPropertyRestrictions() const
{
    return m_Property_restrictions;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPropertyRestrictions(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Property_restrictions = value;
    m_Property_restrictionsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::propertyRestrictionsIsSet() const
{
    return m_Property_restrictionsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetProperty_restrictions()
{
    m_Property_restrictionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPrimarytypesRestrictions() const
{
    return m_Primarytypes_restrictions;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPrimarytypesRestrictions(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Primarytypes_restrictions = value;
    m_Primarytypes_restrictionsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::primarytypesRestrictionsIsSet() const
{
    return m_Primarytypes_restrictionsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPrimarytypes_restrictions()
{
    m_Primarytypes_restrictionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getIgnoredProperties() const
{
    return m_Ignored_properties;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setIgnoredProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Ignored_properties = value;
    m_Ignored_propertiesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::ignoredPropertiesIsSet() const
{
    return m_Ignored_propertiesIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetIgnored_properties()
{
    m_Ignored_propertiesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getUsedProperties() const
{
    return m_Used_properties;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setUsedProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Used_properties = value;
    m_Used_propertiesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::usedPropertiesIsSet() const
{
    return m_Used_propertiesIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetUsed_properties()
{
    m_Used_propertiesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getTypeMappings() const
{
    return m_Type_mappings;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setTypeMappings(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Type_mappings = value;
    m_Type_mappingsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::typeMappingsIsSet() const
{
    return m_Type_mappingsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetType_mappings()
{
    m_Type_mappingsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPropertyMappings() const
{
    return m_Property_mappings;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPropertyMappings(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Property_mappings = value;
    m_Property_mappingsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::propertyMappingsIsSet() const
{
    return m_Property_mappingsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetProperty_mappings()
{
    m_Property_mappingsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCollapseJcrcontentNodes() const
{
    return m_Collapse_jcrcontent_nodes;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCollapseJcrcontentNodes(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Collapse_jcrcontent_nodes = value;
    m_Collapse_jcrcontent_nodesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::collapseJcrcontentNodesIsSet() const
{
    return m_Collapse_jcrcontent_nodesIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetCollapse_jcrcontent_nodes()
{
    m_Collapse_jcrcontent_nodesIsSet = false;
}

}
}
}
}

