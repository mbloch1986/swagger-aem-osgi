/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingEngineImplSlingMainServletProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingEngineImplSlingMainServletProperties :  IEquatable<OrgApacheSlingEngineImplSlingMainServletProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingEngineImplSlingMainServletProperties" /> class.
        /// </summary>
        /// <param name="slingMaxCalls">slingMaxCalls.</param>
        /// <param name="slingMaxInclusions">slingMaxInclusions.</param>
        /// <param name="slingTraceAllow">slingTraceAllow.</param>
        /// <param name="slingMaxRecordRequests">slingMaxRecordRequests.</param>
        /// <param name="slingStorePatternRequests">slingStorePatternRequests.</param>
        /// <param name="slingServerinfo">slingServerinfo.</param>
        /// <param name="slingAdditionalResponseHeaders">slingAdditionalResponseHeaders.</param>
        public OrgApacheSlingEngineImplSlingMainServletProperties(ConfigNodePropertyInteger slingMaxCalls = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger slingMaxInclusions = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean slingTraceAllow = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger slingMaxRecordRequests = default(ConfigNodePropertyInteger), ConfigNodePropertyArray slingStorePatternRequests = default(ConfigNodePropertyArray), ConfigNodePropertyString slingServerinfo = default(ConfigNodePropertyString), ConfigNodePropertyArray slingAdditionalResponseHeaders = default(ConfigNodePropertyArray))
        {
            this.SlingMaxCalls = slingMaxCalls;
            this.SlingMaxInclusions = slingMaxInclusions;
            this.SlingTraceAllow = slingTraceAllow;
            this.SlingMaxRecordRequests = slingMaxRecordRequests;
            this.SlingStorePatternRequests = slingStorePatternRequests;
            this.SlingServerinfo = slingServerinfo;
            this.SlingAdditionalResponseHeaders = slingAdditionalResponseHeaders;
        }
        
        /// <summary>
        /// Gets or Sets SlingMaxCalls
        /// </summary>
        [DataMember(Name="sling.max.calls", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SlingMaxCalls { get; set; }

        /// <summary>
        /// Gets or Sets SlingMaxInclusions
        /// </summary>
        [DataMember(Name="sling.max.inclusions", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SlingMaxInclusions { get; set; }

        /// <summary>
        /// Gets or Sets SlingTraceAllow
        /// </summary>
        [DataMember(Name="sling.trace.allow", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SlingTraceAllow { get; set; }

        /// <summary>
        /// Gets or Sets SlingMaxRecordRequests
        /// </summary>
        [DataMember(Name="sling.max.record.requests", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SlingMaxRecordRequests { get; set; }

        /// <summary>
        /// Gets or Sets SlingStorePatternRequests
        /// </summary>
        [DataMember(Name="sling.store.pattern.requests", EmitDefaultValue=false)]
        public ConfigNodePropertyArray SlingStorePatternRequests { get; set; }

        /// <summary>
        /// Gets or Sets SlingServerinfo
        /// </summary>
        [DataMember(Name="sling.serverinfo", EmitDefaultValue=false)]
        public ConfigNodePropertyString SlingServerinfo { get; set; }

        /// <summary>
        /// Gets or Sets SlingAdditionalResponseHeaders
        /// </summary>
        [DataMember(Name="sling.additional.response.headers", EmitDefaultValue=false)]
        public ConfigNodePropertyArray SlingAdditionalResponseHeaders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingEngineImplSlingMainServletProperties {\n");
            sb.Append("  SlingMaxCalls: ").Append(SlingMaxCalls).Append("\n");
            sb.Append("  SlingMaxInclusions: ").Append(SlingMaxInclusions).Append("\n");
            sb.Append("  SlingTraceAllow: ").Append(SlingTraceAllow).Append("\n");
            sb.Append("  SlingMaxRecordRequests: ").Append(SlingMaxRecordRequests).Append("\n");
            sb.Append("  SlingStorePatternRequests: ").Append(SlingStorePatternRequests).Append("\n");
            sb.Append("  SlingServerinfo: ").Append(SlingServerinfo).Append("\n");
            sb.Append("  SlingAdditionalResponseHeaders: ").Append(SlingAdditionalResponseHeaders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingEngineImplSlingMainServletProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingEngineImplSlingMainServletProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingEngineImplSlingMainServletProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingEngineImplSlingMainServletProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlingMaxCalls == input.SlingMaxCalls ||
                    (this.SlingMaxCalls != null &&
                    this.SlingMaxCalls.Equals(input.SlingMaxCalls))
                ) && 
                (
                    this.SlingMaxInclusions == input.SlingMaxInclusions ||
                    (this.SlingMaxInclusions != null &&
                    this.SlingMaxInclusions.Equals(input.SlingMaxInclusions))
                ) && 
                (
                    this.SlingTraceAllow == input.SlingTraceAllow ||
                    (this.SlingTraceAllow != null &&
                    this.SlingTraceAllow.Equals(input.SlingTraceAllow))
                ) && 
                (
                    this.SlingMaxRecordRequests == input.SlingMaxRecordRequests ||
                    (this.SlingMaxRecordRequests != null &&
                    this.SlingMaxRecordRequests.Equals(input.SlingMaxRecordRequests))
                ) && 
                (
                    this.SlingStorePatternRequests == input.SlingStorePatternRequests ||
                    (this.SlingStorePatternRequests != null &&
                    this.SlingStorePatternRequests.Equals(input.SlingStorePatternRequests))
                ) && 
                (
                    this.SlingServerinfo == input.SlingServerinfo ||
                    (this.SlingServerinfo != null &&
                    this.SlingServerinfo.Equals(input.SlingServerinfo))
                ) && 
                (
                    this.SlingAdditionalResponseHeaders == input.SlingAdditionalResponseHeaders ||
                    (this.SlingAdditionalResponseHeaders != null &&
                    this.SlingAdditionalResponseHeaders.Equals(input.SlingAdditionalResponseHeaders))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlingMaxCalls != null)
                    hashCode = hashCode * 59 + this.SlingMaxCalls.GetHashCode();
                if (this.SlingMaxInclusions != null)
                    hashCode = hashCode * 59 + this.SlingMaxInclusions.GetHashCode();
                if (this.SlingTraceAllow != null)
                    hashCode = hashCode * 59 + this.SlingTraceAllow.GetHashCode();
                if (this.SlingMaxRecordRequests != null)
                    hashCode = hashCode * 59 + this.SlingMaxRecordRequests.GetHashCode();
                if (this.SlingStorePatternRequests != null)
                    hashCode = hashCode * 59 + this.SlingStorePatternRequests.GetHashCode();
                if (this.SlingServerinfo != null)
                    hashCode = hashCode * 59 + this.SlingServerinfo.GetHashCode();
                if (this.SlingAdditionalResponseHeaders != null)
                    hashCode = hashCode * 59 + this.SlingAdditionalResponseHeaders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
