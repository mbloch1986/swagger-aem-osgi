/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties()
{
    m_StreamPathIsSet = false;
    m_StreamNameIsSet = false;
    
}

ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::~ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties()
{
}

void ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_StreamPathIsSet)
    {
        val["streamPath"] = ModelBase::toJson(m_StreamPath);
    }
    if(m_StreamNameIsSet)
    {
        val["streamName"] = ModelBase::toJson(m_StreamName);
    }
    

    return val;
}

void ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::fromJson(nlohmann::json& val)
{
    if(val.find("streamPath") != val.end())
    {
        if(!val["streamPath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["streamPath"]);
            setStreamPath( newItem );
        }
        
    }
    if(val.find("streamName") != val.end())
    {
        if(!val["streamName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["streamName"]);
            setStreamName( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::getStreamPath() const
{
    return m_StreamPath;
}
void ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::setStreamPath(ConfigNodePropertyString const& value)
{
    m_StreamPath = value;
    m_StreamPathIsSet = true;
}
bool ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::streamPathIsSet() const
{
    return m_StreamPathIsSet;
}
void ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::unsetStreamPath()
{
    m_StreamPathIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::getStreamName() const
{
    return m_StreamName;
}
void ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::setStreamName(ConfigNodePropertyString const& value)
{
    m_StreamName = value;
    m_StreamNameIsSet = true;
}
bool ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::streamNameIsSet() const
{
    return m_StreamNameIsSet;
}
void ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::unsetStreamName()
{
    m_StreamNameIsSet = false;
}

}
}
}
}

