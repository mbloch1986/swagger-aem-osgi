/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties
    : public ModelBase
{
public:
    ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties();
    virtual ~ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLinkExpiredPrefix() const;
    bool linkExpiredPrefixIsSet() const;
    void unsetLink_expired_prefix();
    void setLinkExpiredPrefix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getLinkExpiredRemove() const;
    bool linkExpiredRemoveIsSet() const;
    void unsetLink_expired_remove();
    void setLinkExpiredRemove(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLinkExpiredSuffix() const;
    bool linkExpiredSuffixIsSet() const;
    void unsetLink_expired_suffix();
    void setLinkExpiredSuffix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLinkInvalidPrefix() const;
    bool linkInvalidPrefixIsSet() const;
    void unsetLink_invalid_prefix();
    void setLinkInvalidPrefix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getLinkInvalidRemove() const;
    bool linkInvalidRemoveIsSet() const;
    void unsetLink_invalid_remove();
    void setLinkInvalidRemove(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLinkInvalidSuffix() const;
    bool linkInvalidSuffixIsSet() const;
    void unsetLink_invalid_suffix();
    void setLinkInvalidSuffix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLinkPredatedPrefix() const;
    bool linkPredatedPrefixIsSet() const;
    void unsetLink_predated_prefix();
    void setLinkPredatedPrefix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getLinkPredatedRemove() const;
    bool linkPredatedRemoveIsSet() const;
    void unsetLink_predated_remove();
    void setLinkPredatedRemove(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLinkPredatedSuffix() const;
    bool linkPredatedSuffixIsSet() const;
    void unsetLink_predated_suffix();
    void setLinkPredatedSuffix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getLinkWcmmodes() const;
    bool linkWcmmodesIsSet() const;
    void unsetLink_wcmmodes();
    void setLinkWcmmodes(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Link_expired_prefix;
    bool m_Link_expired_prefixIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Link_expired_remove;
    bool m_Link_expired_removeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Link_expired_suffix;
    bool m_Link_expired_suffixIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Link_invalid_prefix;
    bool m_Link_invalid_prefixIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Link_invalid_remove;
    bool m_Link_invalid_removeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Link_invalid_suffix;
    bool m_Link_invalid_suffixIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Link_predated_prefix;
    bool m_Link_predated_prefixIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Link_predated_remove;
    bool m_Link_predated_removeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Link_predated_suffix;
    bool m_Link_predated_suffixIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Link_wcmmodes;
    bool m_Link_wcmmodesIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties_H_ */
