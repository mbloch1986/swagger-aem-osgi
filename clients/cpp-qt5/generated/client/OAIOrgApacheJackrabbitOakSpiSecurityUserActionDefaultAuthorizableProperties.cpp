/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties() {
    init();
}

OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::~OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::init() {
    enabled_actions = new OAIConfigNodePropertyDropDown();
    m_enabled_actions_isSet = false;
    user_privilege_names = new OAIConfigNodePropertyArray();
    m_user_privilege_names_isSet = false;
    group_privilege_names = new OAIConfigNodePropertyArray();
    m_group_privilege_names_isSet = false;
    constraint = new OAIConfigNodePropertyString();
    m_constraint_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::cleanup() {
    if(enabled_actions != nullptr) { 
        delete enabled_actions;
    }
    if(user_privilege_names != nullptr) { 
        delete user_privilege_names;
    }
    if(group_privilege_names != nullptr) { 
        delete group_privilege_names;
    }
    if(constraint != nullptr) { 
        delete constraint;
    }
}

OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties*
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&enabled_actions, pJson["enabledActions"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&user_privilege_names, pJson["userPrivilegeNames"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&group_privilege_names, pJson["groupPrivilegeNames"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&constraint, pJson["constraint"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::asJsonObject() {
    QJsonObject obj;
    if((enabled_actions != nullptr) && (enabled_actions->isSet())){
        toJsonValue(QString("enabledActions"), enabled_actions, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((user_privilege_names != nullptr) && (user_privilege_names->isSet())){
        toJsonValue(QString("userPrivilegeNames"), user_privilege_names, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((group_privilege_names != nullptr) && (group_privilege_names->isSet())){
        toJsonValue(QString("groupPrivilegeNames"), group_privilege_names, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((constraint != nullptr) && (constraint->isSet())){
        toJsonValue(QString("constraint"), constraint, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::getEnabledActions() {
    return enabled_actions;
}
void
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::setEnabledActions(OAIConfigNodePropertyDropDown* enabled_actions) {
    this->enabled_actions = enabled_actions;
    this->m_enabled_actions_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::getUserPrivilegeNames() {
    return user_privilege_names;
}
void
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::setUserPrivilegeNames(OAIConfigNodePropertyArray* user_privilege_names) {
    this->user_privilege_names = user_privilege_names;
    this->m_user_privilege_names_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::getGroupPrivilegeNames() {
    return group_privilege_names;
}
void
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::setGroupPrivilegeNames(OAIConfigNodePropertyArray* group_privilege_names) {
    this->group_privilege_names = group_privilege_names;
    this->m_group_privilege_names_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::getConstraint() {
    return constraint;
}
void
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::setConstraint(OAIConfigNodePropertyString* constraint) {
    this->constraint = constraint;
    this->m_constraint_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(enabled_actions != nullptr && enabled_actions->isSet()){ isObjectUpdated = true; break;}
        if(user_privilege_names != nullptr && user_privilege_names->isSet()){ isObjectUpdated = true; break;}
        if(group_privilege_names != nullptr && group_privilege_names->isSet()){ isObjectUpdated = true; break;}
        if(constraint != nullptr && constraint->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

