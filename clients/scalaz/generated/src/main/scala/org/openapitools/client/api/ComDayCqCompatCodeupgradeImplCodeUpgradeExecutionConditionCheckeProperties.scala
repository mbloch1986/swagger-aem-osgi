package org.openapitools.client.api

import argonaut._
import argonaut.EncodeJson._
import argonaut.DecodeJson._

import org.http4s.{EntityDecoder, EntityEncoder}
import org.http4s.argonaut._
import org.joda.time.DateTime
import ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties._

case class ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties (
  codeupgradetasks: Option[ConfigNodePropertyArray],
codeupgradetaskfilters: Option[ConfigNodePropertyArray])

object ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
  import DateTimeCodecs._

  implicit val ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckePropertiesCodecJson: CodecJson[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties] = CodecJson.derive[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties]
  implicit val ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckePropertiesDecoder: EntityDecoder[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties] = jsonOf[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties]
  implicit val ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckePropertiesEncoder: EntityEncoder[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties] = jsonEncoderOf[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties]
}
