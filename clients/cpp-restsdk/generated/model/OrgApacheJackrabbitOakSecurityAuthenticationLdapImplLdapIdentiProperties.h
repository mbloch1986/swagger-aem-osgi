/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties();
    virtual ~OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getProviderName() const;
    bool providerNameIsSet() const;
    void unsetProvider_name();
    void setProviderName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHostName() const;
    bool hostNameIsSet() const;
    void unsetHost_name();
    void setHostName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHostPort() const;
    bool hostPortIsSet() const;
    void unsetHost_port();
    void setHostPort(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHostSsl() const;
    bool hostSslIsSet() const;
    void unsetHost_ssl();
    void setHostSsl(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHostTls() const;
    bool hostTlsIsSet() const;
    void unsetHost_tls();
    void setHostTls(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHostNoCertCheck() const;
    bool hostNoCertCheckIsSet() const;
    void unsetHost_noCertCheck();
    void setHostNoCertCheck(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getBindDn() const;
    bool bindDnIsSet() const;
    void unsetBind_dn();
    void setBindDn(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getBindPassword() const;
    bool bindPasswordIsSet() const;
    void unsetBind_password();
    void setBindPassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSearchTimeout() const;
    bool searchTimeoutIsSet() const;
    void unsetSearchTimeout();
    void setSearchTimeout(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAdminPoolMaxActive() const;
    bool adminPoolMaxActiveIsSet() const;
    void unsetAdminPool_maxActive();
    void setAdminPoolMaxActive(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAdminPoolLookupOnValidate() const;
    bool adminPoolLookupOnValidateIsSet() const;
    void unsetAdminPool_lookupOnValidate();
    void setAdminPoolLookupOnValidate(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getUserPoolMaxActive() const;
    bool userPoolMaxActiveIsSet() const;
    void unsetUserPool_maxActive();
    void setUserPoolMaxActive(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUserPoolLookupOnValidate() const;
    bool userPoolLookupOnValidateIsSet() const;
    void unsetUserPool_lookupOnValidate();
    void setUserPoolLookupOnValidate(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserBaseDN() const;
    bool userBaseDNIsSet() const;
    void unsetUser_baseDN();
    void setUserBaseDN(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getUserObjectclass() const;
    bool userObjectclassIsSet() const;
    void unsetUser_objectclass();
    void setUserObjectclass(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserIdAttribute() const;
    bool userIdAttributeIsSet() const;
    void unsetUser_idAttribute();
    void setUserIdAttribute(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserExtraFilter() const;
    bool userExtraFilterIsSet() const;
    void unsetUser_extraFilter();
    void setUserExtraFilter(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUserMakeDnPath() const;
    bool userMakeDnPathIsSet() const;
    void unsetUser_makeDnPath();
    void setUserMakeDnPath(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupBaseDN() const;
    bool groupBaseDNIsSet() const;
    void unsetGroup_baseDN();
    void setGroupBaseDN(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getGroupObjectclass() const;
    bool groupObjectclassIsSet() const;
    void unsetGroup_objectclass();
    void setGroupObjectclass(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupNameAttribute() const;
    bool groupNameAttributeIsSet() const;
    void unsetGroup_nameAttribute();
    void setGroupNameAttribute(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupExtraFilter() const;
    bool groupExtraFilterIsSet() const;
    void unsetGroup_extraFilter();
    void setGroupExtraFilter(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGroupMakeDnPath() const;
    bool groupMakeDnPathIsSet() const;
    void unsetGroup_makeDnPath();
    void setGroupMakeDnPath(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupMemberAttribute() const;
    bool groupMemberAttributeIsSet() const;
    void unsetGroup_memberAttribute();
    void setGroupMemberAttribute(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUseUidForExtId() const;
    bool useUidForExtIdIsSet() const;
    void unsetUseUidForExtId();
    void setUseUidForExtId(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getCustomattributes() const;
    bool customattributesIsSet() const;
    void unsetCustomattributes();
    void setCustomattributes(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Provider_name;
    bool m_Provider_nameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Host_name;
    bool m_Host_nameIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Host_port;
    bool m_Host_portIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Host_ssl;
    bool m_Host_sslIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Host_tls;
    bool m_Host_tlsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Host_noCertCheck;
    bool m_Host_noCertCheckIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Bind_dn;
    bool m_Bind_dnIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Bind_password;
    bool m_Bind_passwordIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_SearchTimeout;
    bool m_SearchTimeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_AdminPool_maxActive;
    bool m_AdminPool_maxActiveIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_AdminPool_lookupOnValidate;
    bool m_AdminPool_lookupOnValidateIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_UserPool_maxActive;
    bool m_UserPool_maxActiveIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_UserPool_lookupOnValidate;
    bool m_UserPool_lookupOnValidateIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_User_baseDN;
    bool m_User_baseDNIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_User_objectclass;
    bool m_User_objectclassIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_User_idAttribute;
    bool m_User_idAttributeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_User_extraFilter;
    bool m_User_extraFilterIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_User_makeDnPath;
    bool m_User_makeDnPathIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Group_baseDN;
    bool m_Group_baseDNIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Group_objectclass;
    bool m_Group_objectclassIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Group_nameAttribute;
    bool m_Group_nameAttributeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Group_extraFilter;
    bool m_Group_extraFilterIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Group_makeDnPath;
    bool m_Group_makeDnPathIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Group_memberAttribute;
    bool m_Group_memberAttributeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_UseUidForExtId;
    bool m_UseUidForExtIdIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Customattributes;
    bool m_CustomattributesIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties_H_ */
