/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeSwaggerAemOsgi);
  }
}(this, function(expect, NodeSwaggerAemOsgi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties', function() {
    it('should create an instance of OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties', function() {
      // uncomment below and update the code to test OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be.a(NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties);
    });

    it('should have the property resourceResolverSearchpath (base name: "resource.resolver.searchpath")', function() {
      // uncomment below and update the code to test the property resourceResolverSearchpath
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverManglenamespaces (base name: "resource.resolver.manglenamespaces")', function() {
      // uncomment below and update the code to test the property resourceResolverManglenamespaces
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverAllowDirect (base name: "resource.resolver.allowDirect")', function() {
      // uncomment below and update the code to test the property resourceResolverAllowDirect
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverRequiredProviders (base name: "resource.resolver.required.providers")', function() {
      // uncomment below and update the code to test the property resourceResolverRequiredProviders
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverRequiredProvidernames (base name: "resource.resolver.required.providernames")', function() {
      // uncomment below and update the code to test the property resourceResolverRequiredProvidernames
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverVirtual (base name: "resource.resolver.virtual")', function() {
      // uncomment below and update the code to test the property resourceResolverVirtual
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverMapping (base name: "resource.resolver.mapping")', function() {
      // uncomment below and update the code to test the property resourceResolverMapping
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverMapLocation (base name: "resource.resolver.map.location")', function() {
      // uncomment below and update the code to test the property resourceResolverMapLocation
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverMapObservation (base name: "resource.resolver.map.observation")', function() {
      // uncomment below and update the code to test the property resourceResolverMapObservation
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverDefaultVanityRedirectStatus (base name: "resource.resolver.default.vanity.redirect.status")', function() {
      // uncomment below and update the code to test the property resourceResolverDefaultVanityRedirectStatus
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverEnableVanitypath (base name: "resource.resolver.enable.vanitypath")', function() {
      // uncomment below and update the code to test the property resourceResolverEnableVanitypath
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverVanitypathMaxEntries (base name: "resource.resolver.vanitypath.maxEntries")', function() {
      // uncomment below and update the code to test the property resourceResolverVanitypathMaxEntries
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverVanitypathMaxEntriesStartup (base name: "resource.resolver.vanitypath.maxEntries.startup")', function() {
      // uncomment below and update the code to test the property resourceResolverVanitypathMaxEntriesStartup
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverVanitypathBloomfilterMaxBytes (base name: "resource.resolver.vanitypath.bloomfilter.maxBytes")', function() {
      // uncomment below and update the code to test the property resourceResolverVanitypathBloomfilterMaxBytes
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverOptimizeAliasResolution (base name: "resource.resolver.optimize.alias.resolution")', function() {
      // uncomment below and update the code to test the property resourceResolverOptimizeAliasResolution
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverVanitypathWhitelist (base name: "resource.resolver.vanitypath.whitelist")', function() {
      // uncomment below and update the code to test the property resourceResolverVanitypathWhitelist
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverVanitypathBlacklist (base name: "resource.resolver.vanitypath.blacklist")', function() {
      // uncomment below and update the code to test the property resourceResolverVanitypathBlacklist
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverVanityPrecedence (base name: "resource.resolver.vanity.precedence")', function() {
      // uncomment below and update the code to test the property resourceResolverVanityPrecedence
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverProviderhandlingParanoid (base name: "resource.resolver.providerhandling.paranoid")', function() {
      // uncomment below and update the code to test the property resourceResolverProviderhandlingParanoid
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverLogClosing (base name: "resource.resolver.log.closing")', function() {
      // uncomment below and update the code to test the property resourceResolverLogClosing
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourceResolverLogUnclosed (base name: "resource.resolver.log.unclosed")', function() {
      // uncomment below and update the code to test the property resourceResolverLogUnclosed
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
      //expect(instance).to.be();
    });

  });

}));
