/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties :  IEquatable<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties" /> class.
        /// </summary>
        /// <param name="eventFilter">eventFilter.</param>
        /// <param name="fontmgrSystemFontDir">fontmgrSystemFontDir.</param>
        /// <param name="fontmgrAdobeFontDir">fontmgrAdobeFontDir.</param>
        /// <param name="fontmgrCustomerFontDir">fontmgrCustomerFontDir.</param>
        public ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties(ConfigNodePropertyString eventFilter = default(ConfigNodePropertyString), ConfigNodePropertyArray fontmgrSystemFontDir = default(ConfigNodePropertyArray), ConfigNodePropertyString fontmgrAdobeFontDir = default(ConfigNodePropertyString), ConfigNodePropertyString fontmgrCustomerFontDir = default(ConfigNodePropertyString))
        {
            this.EventFilter = eventFilter;
            this.FontmgrSystemFontDir = fontmgrSystemFontDir;
            this.FontmgrAdobeFontDir = fontmgrAdobeFontDir;
            this.FontmgrCustomerFontDir = fontmgrCustomerFontDir;
        }
        
        /// <summary>
        /// Gets or Sets EventFilter
        /// </summary>
        [DataMember(Name="event.filter", EmitDefaultValue=false)]
        public ConfigNodePropertyString EventFilter { get; set; }

        /// <summary>
        /// Gets or Sets FontmgrSystemFontDir
        /// </summary>
        [DataMember(Name="fontmgr.system.font.dir", EmitDefaultValue=false)]
        public ConfigNodePropertyArray FontmgrSystemFontDir { get; set; }

        /// <summary>
        /// Gets or Sets FontmgrAdobeFontDir
        /// </summary>
        [DataMember(Name="fontmgr.adobe.font.dir", EmitDefaultValue=false)]
        public ConfigNodePropertyString FontmgrAdobeFontDir { get; set; }

        /// <summary>
        /// Gets or Sets FontmgrCustomerFontDir
        /// </summary>
        [DataMember(Name="fontmgr.customer.font.dir", EmitDefaultValue=false)]
        public ConfigNodePropertyString FontmgrCustomerFontDir { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {\n");
            sb.Append("  EventFilter: ").Append(EventFilter).Append("\n");
            sb.Append("  FontmgrSystemFontDir: ").Append(FontmgrSystemFontDir).Append("\n");
            sb.Append("  FontmgrAdobeFontDir: ").Append(FontmgrAdobeFontDir).Append("\n");
            sb.Append("  FontmgrCustomerFontDir: ").Append(FontmgrCustomerFontDir).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventFilter == input.EventFilter ||
                    (this.EventFilter != null &&
                    this.EventFilter.Equals(input.EventFilter))
                ) && 
                (
                    this.FontmgrSystemFontDir == input.FontmgrSystemFontDir ||
                    (this.FontmgrSystemFontDir != null &&
                    this.FontmgrSystemFontDir.Equals(input.FontmgrSystemFontDir))
                ) && 
                (
                    this.FontmgrAdobeFontDir == input.FontmgrAdobeFontDir ||
                    (this.FontmgrAdobeFontDir != null &&
                    this.FontmgrAdobeFontDir.Equals(input.FontmgrAdobeFontDir))
                ) && 
                (
                    this.FontmgrCustomerFontDir == input.FontmgrCustomerFontDir ||
                    (this.FontmgrCustomerFontDir != null &&
                    this.FontmgrCustomerFontDir.Equals(input.FontmgrCustomerFontDir))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventFilter != null)
                    hashCode = hashCode * 59 + this.EventFilter.GetHashCode();
                if (this.FontmgrSystemFontDir != null)
                    hashCode = hashCode * 59 + this.FontmgrSystemFontDir.GetHashCode();
                if (this.FontmgrAdobeFontDir != null)
                    hashCode = hashCode * 59 + this.FontmgrAdobeFontDir.GetHashCode();
                if (this.FontmgrCustomerFontDir != null)
                    hashCode = hashCode * 59 + this.FontmgrCustomerFontDir.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
