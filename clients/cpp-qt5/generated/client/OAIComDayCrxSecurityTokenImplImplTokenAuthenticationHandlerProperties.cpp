/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties() {
    init();
}

OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::~OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties() {
    this->cleanup();
}

void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::init() {
    path = new OAIConfigNodePropertyString();
    m_path_isSet = false;
    token_required_attr = new OAIConfigNodePropertyDropDown();
    m_token_required_attr_isSet = false;
    token_alternate_url = new OAIConfigNodePropertyString();
    m_token_alternate_url_isSet = false;
    token_encapsulated = new OAIConfigNodePropertyBoolean();
    m_token_encapsulated_isSet = false;
    skip_token_refresh = new OAIConfigNodePropertyArray();
    m_skip_token_refresh_isSet = false;
}

void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::cleanup() {
    if(path != nullptr) { 
        delete path;
    }
    if(token_required_attr != nullptr) { 
        delete token_required_attr;
    }
    if(token_alternate_url != nullptr) { 
        delete token_alternate_url;
    }
    if(token_encapsulated != nullptr) { 
        delete token_encapsulated;
    }
    if(skip_token_refresh != nullptr) { 
        delete skip_token_refresh;
    }
}

OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties*
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&path, pJson["path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&token_required_attr, pJson["token.required.attr"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&token_alternate_url, pJson["token.alternate.url"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&token_encapsulated, pJson["token.encapsulated"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&skip_token_refresh, pJson["skip.token.refresh"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::asJsonObject() {
    QJsonObject obj;
    if((path != nullptr) && (path->isSet())){
        toJsonValue(QString("path"), path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((token_required_attr != nullptr) && (token_required_attr->isSet())){
        toJsonValue(QString("token.required.attr"), token_required_attr, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((token_alternate_url != nullptr) && (token_alternate_url->isSet())){
        toJsonValue(QString("token.alternate.url"), token_alternate_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((token_encapsulated != nullptr) && (token_encapsulated->isSet())){
        toJsonValue(QString("token.encapsulated"), token_encapsulated, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((skip_token_refresh != nullptr) && (skip_token_refresh->isSet())){
        toJsonValue(QString("skip.token.refresh"), skip_token_refresh, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getPath() {
    return path;
}
void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setPath(OAIConfigNodePropertyString* path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenRequiredAttr() {
    return token_required_attr;
}
void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenRequiredAttr(OAIConfigNodePropertyDropDown* token_required_attr) {
    this->token_required_attr = token_required_attr;
    this->m_token_required_attr_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenAlternateUrl() {
    return token_alternate_url;
}
void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenAlternateUrl(OAIConfigNodePropertyString* token_alternate_url) {
    this->token_alternate_url = token_alternate_url;
    this->m_token_alternate_url_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenEncapsulated() {
    return token_encapsulated;
}
void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenEncapsulated(OAIConfigNodePropertyBoolean* token_encapsulated) {
    this->token_encapsulated = token_encapsulated;
    this->m_token_encapsulated_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getSkipTokenRefresh() {
    return skip_token_refresh;
}
void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setSkipTokenRefresh(OAIConfigNodePropertyArray* skip_token_refresh) {
    this->skip_token_refresh = skip_token_refresh;
    this->m_skip_token_refresh_isSet = true;
}


bool
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(path != nullptr && path->isSet()){ isObjectUpdated = true; break;}
        if(token_required_attr != nullptr && token_required_attr->isSet()){ isObjectUpdated = true; break;}
        if(token_alternate_url != nullptr && token_alternate_url->isSet()){ isObjectUpdated = true; break;}
        if(token_encapsulated != nullptr && token_encapsulated->isSet()){ isObjectUpdated = true; break;}
        if(skip_token_refresh != nullptr && skip_token_refresh->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

