/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties() {
    init();
}

OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::~OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::init() {
    sling_servlet_paths = new OAIConfigNodePropertyString();
    m_sling_servlet_paths_isSet = false;
    oauth_revocation_active = new OAIConfigNodePropertyBoolean();
    m_oauth_revocation_active_isSet = false;
}

void
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::cleanup() {
    if(sling_servlet_paths != nullptr) { 
        delete sling_servlet_paths;
    }
    if(oauth_revocation_active != nullptr) { 
        delete oauth_revocation_active;
    }
}

OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties*
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&sling_servlet_paths, pJson["sling.servlet.paths"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_revocation_active, pJson["oauth.revocation.active"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::asJsonObject() {
    QJsonObject obj;
    if((sling_servlet_paths != nullptr) && (sling_servlet_paths->isSet())){
        toJsonValue(QString("sling.servlet.paths"), sling_servlet_paths, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_revocation_active != nullptr) && (oauth_revocation_active->isSet())){
        toJsonValue(QString("oauth.revocation.active"), oauth_revocation_active, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::getSlingServletPaths() {
    return sling_servlet_paths;
}
void
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::setSlingServletPaths(OAIConfigNodePropertyString* sling_servlet_paths) {
    this->sling_servlet_paths = sling_servlet_paths;
    this->m_sling_servlet_paths_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::getOauthRevocationActive() {
    return oauth_revocation_active;
}
void
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::setOauthRevocationActive(OAIConfigNodePropertyBoolean* oauth_revocation_active) {
    this->oauth_revocation_active = oauth_revocation_active;
    this->m_oauth_revocation_active_isSet = true;
}


bool
OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(sling_servlet_paths != nullptr && sling_servlet_paths->isSet()){ isObjectUpdated = true; break;}
        if(oauth_revocation_active != nullptr && oauth_revocation_active->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

