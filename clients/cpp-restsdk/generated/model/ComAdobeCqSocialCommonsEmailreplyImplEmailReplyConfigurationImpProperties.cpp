/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties()
{
    m_Email_nameIsSet = false;
    m_Email_createPostFromReplyIsSet = false;
    m_Email_addCommentIdToIsSet = false;
    m_Email_subjectMaximumLengthIsSet = false;
    m_Email_replyToAddressIsSet = false;
    m_Email_replyToDelimiterIsSet = false;
    m_Email_trackerIdPrefixInSubjectIsSet = false;
    m_Email_trackerIdPrefixInBodyIsSet = false;
    m_Email_asHTMLIsSet = false;
    m_Email_defaultUserNameIsSet = false;
    m_Email_templates_rootPathIsSet = false;
}

ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::~ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties()
{
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Email_nameIsSet)
    {
        val[utility::conversions::to_string_t("email.name")] = ModelBase::toJson(m_Email_name);
    }
    if(m_Email_createPostFromReplyIsSet)
    {
        val[utility::conversions::to_string_t("email.createPostFromReply")] = ModelBase::toJson(m_Email_createPostFromReply);
    }
    if(m_Email_addCommentIdToIsSet)
    {
        val[utility::conversions::to_string_t("email.addCommentIdTo")] = ModelBase::toJson(m_Email_addCommentIdTo);
    }
    if(m_Email_subjectMaximumLengthIsSet)
    {
        val[utility::conversions::to_string_t("email.subjectMaximumLength")] = ModelBase::toJson(m_Email_subjectMaximumLength);
    }
    if(m_Email_replyToAddressIsSet)
    {
        val[utility::conversions::to_string_t("email.replyToAddress")] = ModelBase::toJson(m_Email_replyToAddress);
    }
    if(m_Email_replyToDelimiterIsSet)
    {
        val[utility::conversions::to_string_t("email.replyToDelimiter")] = ModelBase::toJson(m_Email_replyToDelimiter);
    }
    if(m_Email_trackerIdPrefixInSubjectIsSet)
    {
        val[utility::conversions::to_string_t("email.trackerIdPrefixInSubject")] = ModelBase::toJson(m_Email_trackerIdPrefixInSubject);
    }
    if(m_Email_trackerIdPrefixInBodyIsSet)
    {
        val[utility::conversions::to_string_t("email.trackerIdPrefixInBody")] = ModelBase::toJson(m_Email_trackerIdPrefixInBody);
    }
    if(m_Email_asHTMLIsSet)
    {
        val[utility::conversions::to_string_t("email.asHTML")] = ModelBase::toJson(m_Email_asHTML);
    }
    if(m_Email_defaultUserNameIsSet)
    {
        val[utility::conversions::to_string_t("email.defaultUserName")] = ModelBase::toJson(m_Email_defaultUserName);
    }
    if(m_Email_templates_rootPathIsSet)
    {
        val[utility::conversions::to_string_t("email.templates.rootPath")] = ModelBase::toJson(m_Email_templates_rootPath);
    }

    return val;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("email.name")))
    {
        if(!val[utility::conversions::to_string_t("email.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("email.name")]);
            setEmailName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email.createPostFromReply")))
    {
        if(!val[utility::conversions::to_string_t("email.createPostFromReply")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("email.createPostFromReply")]);
            setEmailCreatePostFromReply( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email.addCommentIdTo")))
    {
        if(!val[utility::conversions::to_string_t("email.addCommentIdTo")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("email.addCommentIdTo")]);
            setEmailAddCommentIdTo( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email.subjectMaximumLength")))
    {
        if(!val[utility::conversions::to_string_t("email.subjectMaximumLength")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("email.subjectMaximumLength")]);
            setEmailSubjectMaximumLength( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email.replyToAddress")))
    {
        if(!val[utility::conversions::to_string_t("email.replyToAddress")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("email.replyToAddress")]);
            setEmailReplyToAddress( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email.replyToDelimiter")))
    {
        if(!val[utility::conversions::to_string_t("email.replyToDelimiter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("email.replyToDelimiter")]);
            setEmailReplyToDelimiter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email.trackerIdPrefixInSubject")))
    {
        if(!val[utility::conversions::to_string_t("email.trackerIdPrefixInSubject")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("email.trackerIdPrefixInSubject")]);
            setEmailTrackerIdPrefixInSubject( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email.trackerIdPrefixInBody")))
    {
        if(!val[utility::conversions::to_string_t("email.trackerIdPrefixInBody")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("email.trackerIdPrefixInBody")]);
            setEmailTrackerIdPrefixInBody( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email.asHTML")))
    {
        if(!val[utility::conversions::to_string_t("email.asHTML")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("email.asHTML")]);
            setEmailAsHTML( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email.defaultUserName")))
    {
        if(!val[utility::conversions::to_string_t("email.defaultUserName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("email.defaultUserName")]);
            setEmailDefaultUserName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email.templates.rootPath")))
    {
        if(!val[utility::conversions::to_string_t("email.templates.rootPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("email.templates.rootPath")]);
            setEmailTemplatesRootPath( newItem );
        }
    }
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Email_nameIsSet)
    {
        if (m_Email_name.get())
        {
            m_Email_name->toMultipart(multipart, utility::conversions::to_string_t("email.name."));
        }
    }
    if(m_Email_createPostFromReplyIsSet)
    {
        if (m_Email_createPostFromReply.get())
        {
            m_Email_createPostFromReply->toMultipart(multipart, utility::conversions::to_string_t("email.createPostFromReply."));
        }
    }
    if(m_Email_addCommentIdToIsSet)
    {
        if (m_Email_addCommentIdTo.get())
        {
            m_Email_addCommentIdTo->toMultipart(multipart, utility::conversions::to_string_t("email.addCommentIdTo."));
        }
    }
    if(m_Email_subjectMaximumLengthIsSet)
    {
        if (m_Email_subjectMaximumLength.get())
        {
            m_Email_subjectMaximumLength->toMultipart(multipart, utility::conversions::to_string_t("email.subjectMaximumLength."));
        }
    }
    if(m_Email_replyToAddressIsSet)
    {
        if (m_Email_replyToAddress.get())
        {
            m_Email_replyToAddress->toMultipart(multipart, utility::conversions::to_string_t("email.replyToAddress."));
        }
    }
    if(m_Email_replyToDelimiterIsSet)
    {
        if (m_Email_replyToDelimiter.get())
        {
            m_Email_replyToDelimiter->toMultipart(multipart, utility::conversions::to_string_t("email.replyToDelimiter."));
        }
    }
    if(m_Email_trackerIdPrefixInSubjectIsSet)
    {
        if (m_Email_trackerIdPrefixInSubject.get())
        {
            m_Email_trackerIdPrefixInSubject->toMultipart(multipart, utility::conversions::to_string_t("email.trackerIdPrefixInSubject."));
        }
    }
    if(m_Email_trackerIdPrefixInBodyIsSet)
    {
        if (m_Email_trackerIdPrefixInBody.get())
        {
            m_Email_trackerIdPrefixInBody->toMultipart(multipart, utility::conversions::to_string_t("email.trackerIdPrefixInBody."));
        }
    }
    if(m_Email_asHTMLIsSet)
    {
        if (m_Email_asHTML.get())
        {
            m_Email_asHTML->toMultipart(multipart, utility::conversions::to_string_t("email.asHTML."));
        }
    }
    if(m_Email_defaultUserNameIsSet)
    {
        if (m_Email_defaultUserName.get())
        {
            m_Email_defaultUserName->toMultipart(multipart, utility::conversions::to_string_t("email.defaultUserName."));
        }
    }
    if(m_Email_templates_rootPathIsSet)
    {
        if (m_Email_templates_rootPath.get())
        {
            m_Email_templates_rootPath->toMultipart(multipart, utility::conversions::to_string_t("email.templates.rootPath."));
        }
    }
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("email.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.name."));
            setEmailName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email.createPostFromReply")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.createPostFromReply")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.createPostFromReply."));
            setEmailCreatePostFromReply( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email.addCommentIdTo")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.addCommentIdTo")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.addCommentIdTo."));
            setEmailAddCommentIdTo( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email.subjectMaximumLength")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.subjectMaximumLength")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.subjectMaximumLength."));
            setEmailSubjectMaximumLength( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email.replyToAddress")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.replyToAddress")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.replyToAddress."));
            setEmailReplyToAddress( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email.replyToDelimiter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.replyToDelimiter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.replyToDelimiter."));
            setEmailReplyToDelimiter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email.trackerIdPrefixInSubject")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.trackerIdPrefixInSubject")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.trackerIdPrefixInSubject."));
            setEmailTrackerIdPrefixInSubject( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email.trackerIdPrefixInBody")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.trackerIdPrefixInBody")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.trackerIdPrefixInBody."));
            setEmailTrackerIdPrefixInBody( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email.asHTML")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.asHTML")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.asHTML."));
            setEmailAsHTML( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email.defaultUserName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.defaultUserName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.defaultUserName."));
            setEmailDefaultUserName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email.templates.rootPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("email.templates.rootPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("email.templates.rootPath."));
            setEmailTemplatesRootPath( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailName() const
{
    return m_Email_name;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Email_name = value;
    m_Email_nameIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailNameIsSet() const
{
    return m_Email_nameIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_name()
{
    m_Email_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailCreatePostFromReply() const
{
    return m_Email_createPostFromReply;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailCreatePostFromReply(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Email_createPostFromReply = value;
    m_Email_createPostFromReplyIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailCreatePostFromReplyIsSet() const
{
    return m_Email_createPostFromReplyIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_createPostFromReply()
{
    m_Email_createPostFromReplyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailAddCommentIdTo() const
{
    return m_Email_addCommentIdTo;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailAddCommentIdTo(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Email_addCommentIdTo = value;
    m_Email_addCommentIdToIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailAddCommentIdToIsSet() const
{
    return m_Email_addCommentIdToIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_addCommentIdTo()
{
    m_Email_addCommentIdToIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailSubjectMaximumLength() const
{
    return m_Email_subjectMaximumLength;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailSubjectMaximumLength(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Email_subjectMaximumLength = value;
    m_Email_subjectMaximumLengthIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailSubjectMaximumLengthIsSet() const
{
    return m_Email_subjectMaximumLengthIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_subjectMaximumLength()
{
    m_Email_subjectMaximumLengthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailReplyToAddress() const
{
    return m_Email_replyToAddress;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailReplyToAddress(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Email_replyToAddress = value;
    m_Email_replyToAddressIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailReplyToAddressIsSet() const
{
    return m_Email_replyToAddressIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_replyToAddress()
{
    m_Email_replyToAddressIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailReplyToDelimiter() const
{
    return m_Email_replyToDelimiter;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailReplyToDelimiter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Email_replyToDelimiter = value;
    m_Email_replyToDelimiterIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailReplyToDelimiterIsSet() const
{
    return m_Email_replyToDelimiterIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_replyToDelimiter()
{
    m_Email_replyToDelimiterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailTrackerIdPrefixInSubject() const
{
    return m_Email_trackerIdPrefixInSubject;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailTrackerIdPrefixInSubject(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Email_trackerIdPrefixInSubject = value;
    m_Email_trackerIdPrefixInSubjectIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailTrackerIdPrefixInSubjectIsSet() const
{
    return m_Email_trackerIdPrefixInSubjectIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_trackerIdPrefixInSubject()
{
    m_Email_trackerIdPrefixInSubjectIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailTrackerIdPrefixInBody() const
{
    return m_Email_trackerIdPrefixInBody;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailTrackerIdPrefixInBody(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Email_trackerIdPrefixInBody = value;
    m_Email_trackerIdPrefixInBodyIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailTrackerIdPrefixInBodyIsSet() const
{
    return m_Email_trackerIdPrefixInBodyIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_trackerIdPrefixInBody()
{
    m_Email_trackerIdPrefixInBodyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailAsHTML() const
{
    return m_Email_asHTML;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailAsHTML(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Email_asHTML = value;
    m_Email_asHTMLIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailAsHTMLIsSet() const
{
    return m_Email_asHTMLIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_asHTML()
{
    m_Email_asHTMLIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailDefaultUserName() const
{
    return m_Email_defaultUserName;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailDefaultUserName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Email_defaultUserName = value;
    m_Email_defaultUserNameIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailDefaultUserNameIsSet() const
{
    return m_Email_defaultUserNameIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_defaultUserName()
{
    m_Email_defaultUserNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailTemplatesRootPath() const
{
    return m_Email_templates_rootPath;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailTemplatesRootPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Email_templates_rootPath = value;
    m_Email_templates_rootPathIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::emailTemplatesRootPathIsSet() const
{
    return m_Email_templates_rootPathIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::unsetEmail_templates_rootPath()
{
    m_Email_templates_rootPathIsSet = false;
}

}
}
}
}

