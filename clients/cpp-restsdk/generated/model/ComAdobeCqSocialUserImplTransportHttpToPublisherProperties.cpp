/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialUserImplTransportHttpToPublisherProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::ComAdobeCqSocialUserImplTransportHttpToPublisherProperties()
{
    m_EnableIsSet = false;
    m_Agent_configurationIsSet = false;
    m_Context_pathIsSet = false;
    m_Disabled_cipher_suitesIsSet = false;
    m_Enabled_cipher_suitesIsSet = false;
}

ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::~ComAdobeCqSocialUserImplTransportHttpToPublisherProperties()
{
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EnableIsSet)
    {
        val[utility::conversions::to_string_t("enable")] = ModelBase::toJson(m_Enable);
    }
    if(m_Agent_configurationIsSet)
    {
        val[utility::conversions::to_string_t("agent.configuration")] = ModelBase::toJson(m_Agent_configuration);
    }
    if(m_Context_pathIsSet)
    {
        val[utility::conversions::to_string_t("context.path")] = ModelBase::toJson(m_Context_path);
    }
    if(m_Disabled_cipher_suitesIsSet)
    {
        val[utility::conversions::to_string_t("disabled.cipher.suites")] = ModelBase::toJson(m_Disabled_cipher_suites);
    }
    if(m_Enabled_cipher_suitesIsSet)
    {
        val[utility::conversions::to_string_t("enabled.cipher.suites")] = ModelBase::toJson(m_Enabled_cipher_suites);
    }

    return val;
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("enable")))
    {
        if(!val[utility::conversions::to_string_t("enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enable")]);
            setEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("agent.configuration")))
    {
        if(!val[utility::conversions::to_string_t("agent.configuration")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("agent.configuration")]);
            setAgentConfiguration( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("context.path")))
    {
        if(!val[utility::conversions::to_string_t("context.path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("context.path")]);
            setContextPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("disabled.cipher.suites")))
    {
        if(!val[utility::conversions::to_string_t("disabled.cipher.suites")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("disabled.cipher.suites")]);
            setDisabledCipherSuites( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled.cipher.suites")))
    {
        if(!val[utility::conversions::to_string_t("enabled.cipher.suites")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled.cipher.suites")]);
            setEnabledCipherSuites( newItem );
        }
    }
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EnableIsSet)
    {
        if (m_Enable.get())
        {
            m_Enable->toMultipart(multipart, utility::conversions::to_string_t("enable."));
        }
    }
    if(m_Agent_configurationIsSet)
    {
        if (m_Agent_configuration.get())
        {
            m_Agent_configuration->toMultipart(multipart, utility::conversions::to_string_t("agent.configuration."));
        }
    }
    if(m_Context_pathIsSet)
    {
        if (m_Context_path.get())
        {
            m_Context_path->toMultipart(multipart, utility::conversions::to_string_t("context.path."));
        }
    }
    if(m_Disabled_cipher_suitesIsSet)
    {
        if (m_Disabled_cipher_suites.get())
        {
            m_Disabled_cipher_suites->toMultipart(multipart, utility::conversions::to_string_t("disabled.cipher.suites."));
        }
    }
    if(m_Enabled_cipher_suitesIsSet)
    {
        if (m_Enabled_cipher_suites.get())
        {
            m_Enabled_cipher_suites->toMultipart(multipart, utility::conversions::to_string_t("enabled.cipher.suites."));
        }
    }
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enable."));
            setEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("agent.configuration")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("agent.configuration")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("agent.configuration."));
            setAgentConfiguration( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("context.path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("context.path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("context.path."));
            setContextPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("disabled.cipher.suites")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("disabled.cipher.suites")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("disabled.cipher.suites."));
            setDisabledCipherSuites( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled.cipher.suites")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled.cipher.suites")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled.cipher.suites."));
            setEnabledCipherSuites( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getEnable() const
{
    return m_Enable;
}


void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enable = value;
    m_EnableIsSet = true;
}
bool ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::enableIsSet() const
{
    return m_EnableIsSet;
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::unsetEnable()
{
    m_EnableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getAgentConfiguration() const
{
    return m_Agent_configuration;
}


void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setAgentConfiguration(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Agent_configuration = value;
    m_Agent_configurationIsSet = true;
}
bool ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::agentConfigurationIsSet() const
{
    return m_Agent_configurationIsSet;
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::unsetAgent_configuration()
{
    m_Agent_configurationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getContextPath() const
{
    return m_Context_path;
}


void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setContextPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Context_path = value;
    m_Context_pathIsSet = true;
}
bool ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::contextPathIsSet() const
{
    return m_Context_pathIsSet;
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::unsetContext_path()
{
    m_Context_pathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getDisabledCipherSuites() const
{
    return m_Disabled_cipher_suites;
}


void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setDisabledCipherSuites(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Disabled_cipher_suites = value;
    m_Disabled_cipher_suitesIsSet = true;
}
bool ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::disabledCipherSuitesIsSet() const
{
    return m_Disabled_cipher_suitesIsSet;
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::unsetDisabled_cipher_suites()
{
    m_Disabled_cipher_suitesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getEnabledCipherSuites() const
{
    return m_Enabled_cipher_suites;
}


void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setEnabledCipherSuites(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Enabled_cipher_suites = value;
    m_Enabled_cipher_suitesIsSet = true;
}
bool ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::enabledCipherSuitesIsSet() const
{
    return m_Enabled_cipher_suitesIsSet;
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::unsetEnabled_cipher_suites()
{
    m_Enabled_cipher_suitesIsSet = false;
}

}
}
}
}

