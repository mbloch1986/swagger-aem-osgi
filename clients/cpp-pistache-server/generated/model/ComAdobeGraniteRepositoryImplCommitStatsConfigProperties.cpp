/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteRepositoryImplCommitStatsConfigProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::ComAdobeGraniteRepositoryImplCommitStatsConfigProperties()
{
    m_EnabledIsSet = false;
    m_IntervalSecondsIsSet = false;
    m_CommitsPerIntervalThresholdIsSet = false;
    m_MaxLocationLengthIsSet = false;
    m_MaxDetailsShownIsSet = false;
    m_MinDetailsPercentageIsSet = false;
    m_ThreadMatchersIsSet = false;
    m_MaxGreedyDepthIsSet = false;
    m_GreedyStackMatchersIsSet = false;
    m_StackFiltersIsSet = false;
    m_StackMatchersIsSet = false;
    m_StackCategorizersIsSet = false;
    m_StackShortenersIsSet = false;
    
}

ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::~ComAdobeGraniteRepositoryImplCommitStatsConfigProperties()
{
}

void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_EnabledIsSet)
    {
        val["enabled"] = ModelBase::toJson(m_Enabled);
    }
    if(m_IntervalSecondsIsSet)
    {
        val["intervalSeconds"] = ModelBase::toJson(m_IntervalSeconds);
    }
    if(m_CommitsPerIntervalThresholdIsSet)
    {
        val["commitsPerIntervalThreshold"] = ModelBase::toJson(m_CommitsPerIntervalThreshold);
    }
    if(m_MaxLocationLengthIsSet)
    {
        val["maxLocationLength"] = ModelBase::toJson(m_MaxLocationLength);
    }
    if(m_MaxDetailsShownIsSet)
    {
        val["maxDetailsShown"] = ModelBase::toJson(m_MaxDetailsShown);
    }
    if(m_MinDetailsPercentageIsSet)
    {
        val["minDetailsPercentage"] = ModelBase::toJson(m_MinDetailsPercentage);
    }
    if(m_ThreadMatchersIsSet)
    {
        val["threadMatchers"] = ModelBase::toJson(m_ThreadMatchers);
    }
    if(m_MaxGreedyDepthIsSet)
    {
        val["maxGreedyDepth"] = ModelBase::toJson(m_MaxGreedyDepth);
    }
    if(m_GreedyStackMatchersIsSet)
    {
        val["greedyStackMatchers"] = ModelBase::toJson(m_GreedyStackMatchers);
    }
    if(m_StackFiltersIsSet)
    {
        val["stackFilters"] = ModelBase::toJson(m_StackFilters);
    }
    if(m_StackMatchersIsSet)
    {
        val["stackMatchers"] = ModelBase::toJson(m_StackMatchers);
    }
    if(m_StackCategorizersIsSet)
    {
        val["stackCategorizers"] = ModelBase::toJson(m_StackCategorizers);
    }
    if(m_StackShortenersIsSet)
    {
        val["stackShorteners"] = ModelBase::toJson(m_StackShorteners);
    }
    

    return val;
}

void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::fromJson(nlohmann::json& val)
{
    if(val.find("enabled") != val.end())
    {
        if(!val["enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enabled"]);
            setEnabled( newItem );
        }
        
    }
    if(val.find("intervalSeconds") != val.end())
    {
        if(!val["intervalSeconds"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["intervalSeconds"]);
            setIntervalSeconds( newItem );
        }
        
    }
    if(val.find("commitsPerIntervalThreshold") != val.end())
    {
        if(!val["commitsPerIntervalThreshold"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["commitsPerIntervalThreshold"]);
            setCommitsPerIntervalThreshold( newItem );
        }
        
    }
    if(val.find("maxLocationLength") != val.end())
    {
        if(!val["maxLocationLength"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxLocationLength"]);
            setMaxLocationLength( newItem );
        }
        
    }
    if(val.find("maxDetailsShown") != val.end())
    {
        if(!val["maxDetailsShown"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxDetailsShown"]);
            setMaxDetailsShown( newItem );
        }
        
    }
    if(val.find("minDetailsPercentage") != val.end())
    {
        if(!val["minDetailsPercentage"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["minDetailsPercentage"]);
            setMinDetailsPercentage( newItem );
        }
        
    }
    if(val.find("threadMatchers") != val.end())
    {
        if(!val["threadMatchers"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["threadMatchers"]);
            setThreadMatchers( newItem );
        }
        
    }
    if(val.find("maxGreedyDepth") != val.end())
    {
        if(!val["maxGreedyDepth"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxGreedyDepth"]);
            setMaxGreedyDepth( newItem );
        }
        
    }
    if(val.find("greedyStackMatchers") != val.end())
    {
        if(!val["greedyStackMatchers"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["greedyStackMatchers"]);
            setGreedyStackMatchers( newItem );
        }
        
    }
    if(val.find("stackFilters") != val.end())
    {
        if(!val["stackFilters"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["stackFilters"]);
            setStackFilters( newItem );
        }
        
    }
    if(val.find("stackMatchers") != val.end())
    {
        if(!val["stackMatchers"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["stackMatchers"]);
            setStackMatchers( newItem );
        }
        
    }
    if(val.find("stackCategorizers") != val.end())
    {
        if(!val["stackCategorizers"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["stackCategorizers"]);
            setStackCategorizers( newItem );
        }
        
    }
    if(val.find("stackShorteners") != val.end())
    {
        if(!val["stackShorteners"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["stackShorteners"]);
            setStackShorteners( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getEnabled() const
{
    return m_Enabled;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getIntervalSeconds() const
{
    return m_IntervalSeconds;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setIntervalSeconds(ConfigNodePropertyInteger const& value)
{
    m_IntervalSeconds = value;
    m_IntervalSecondsIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::intervalSecondsIsSet() const
{
    return m_IntervalSecondsIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetIntervalSeconds()
{
    m_IntervalSecondsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getCommitsPerIntervalThreshold() const
{
    return m_CommitsPerIntervalThreshold;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setCommitsPerIntervalThreshold(ConfigNodePropertyInteger const& value)
{
    m_CommitsPerIntervalThreshold = value;
    m_CommitsPerIntervalThresholdIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::commitsPerIntervalThresholdIsSet() const
{
    return m_CommitsPerIntervalThresholdIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetCommitsPerIntervalThreshold()
{
    m_CommitsPerIntervalThresholdIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxLocationLength() const
{
    return m_MaxLocationLength;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxLocationLength(ConfigNodePropertyInteger const& value)
{
    m_MaxLocationLength = value;
    m_MaxLocationLengthIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::maxLocationLengthIsSet() const
{
    return m_MaxLocationLengthIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetMaxLocationLength()
{
    m_MaxLocationLengthIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxDetailsShown() const
{
    return m_MaxDetailsShown;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxDetailsShown(ConfigNodePropertyInteger const& value)
{
    m_MaxDetailsShown = value;
    m_MaxDetailsShownIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::maxDetailsShownIsSet() const
{
    return m_MaxDetailsShownIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetMaxDetailsShown()
{
    m_MaxDetailsShownIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMinDetailsPercentage() const
{
    return m_MinDetailsPercentage;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMinDetailsPercentage(ConfigNodePropertyInteger const& value)
{
    m_MinDetailsPercentage = value;
    m_MinDetailsPercentageIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::minDetailsPercentageIsSet() const
{
    return m_MinDetailsPercentageIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetMinDetailsPercentage()
{
    m_MinDetailsPercentageIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getThreadMatchers() const
{
    return m_ThreadMatchers;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setThreadMatchers(ConfigNodePropertyArray const& value)
{
    m_ThreadMatchers = value;
    m_ThreadMatchersIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::threadMatchersIsSet() const
{
    return m_ThreadMatchersIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetThreadMatchers()
{
    m_ThreadMatchersIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxGreedyDepth() const
{
    return m_MaxGreedyDepth;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxGreedyDepth(ConfigNodePropertyInteger const& value)
{
    m_MaxGreedyDepth = value;
    m_MaxGreedyDepthIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::maxGreedyDepthIsSet() const
{
    return m_MaxGreedyDepthIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetMaxGreedyDepth()
{
    m_MaxGreedyDepthIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getGreedyStackMatchers() const
{
    return m_GreedyStackMatchers;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setGreedyStackMatchers(ConfigNodePropertyString const& value)
{
    m_GreedyStackMatchers = value;
    m_GreedyStackMatchersIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::greedyStackMatchersIsSet() const
{
    return m_GreedyStackMatchersIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetGreedyStackMatchers()
{
    m_GreedyStackMatchersIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackFilters() const
{
    return m_StackFilters;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackFilters(ConfigNodePropertyArray const& value)
{
    m_StackFilters = value;
    m_StackFiltersIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::stackFiltersIsSet() const
{
    return m_StackFiltersIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetStackFilters()
{
    m_StackFiltersIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackMatchers() const
{
    return m_StackMatchers;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackMatchers(ConfigNodePropertyArray const& value)
{
    m_StackMatchers = value;
    m_StackMatchersIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::stackMatchersIsSet() const
{
    return m_StackMatchersIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetStackMatchers()
{
    m_StackMatchersIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackCategorizers() const
{
    return m_StackCategorizers;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackCategorizers(ConfigNodePropertyArray const& value)
{
    m_StackCategorizers = value;
    m_StackCategorizersIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::stackCategorizersIsSet() const
{
    return m_StackCategorizersIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetStackCategorizers()
{
    m_StackCategorizersIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackShorteners() const
{
    return m_StackShorteners;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackShorteners(ConfigNodePropertyArray const& value)
{
    m_StackShorteners = value;
    m_StackShortenersIsSet = true;
}
bool ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::stackShortenersIsSet() const
{
    return m_StackShortenersIsSet;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::unsetStackShorteners()
{
    m_StackShortenersIsSet = false;
}

}
}
}
}

