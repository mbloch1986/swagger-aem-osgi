/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties()
{
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_nameIsSet = false;
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_nameIsSet = false;
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_nameIsSet = false;
    m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_nameIsSet = false;
    m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_nameIsSet = false;
    m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_nameIsSet = false;
    m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_nameIsSet = false;
}

ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::~ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties()
{
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_nameIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name")] = ModelBase::toJson(m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name);
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_nameIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name")] = ModelBase::toJson(m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name);
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_nameIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name")] = ModelBase::toJson(m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name);
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_nameIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name")] = ModelBase::toJson(m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name);
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_nameIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name")] = ModelBase::toJson(m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name);
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_nameIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name")] = ModelBase::toJson(m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name);
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_nameIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name")] = ModelBase::toJson(m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name);
    }

    return val;
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name")]);
            setCqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name")]);
            setCqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name")]);
            setCqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name")]);
            setCqDamS7damVideoproxyclientserviceHttpReadtimeoutName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name")]);
            setCqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name")]);
            setCqDamS7damVideoproxyclientserviceHttpMaxretrycountName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name")]);
            setCqDamS7damVideoproxyclientserviceUploadprogressIntervalName( newItem );
        }
    }
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_nameIsSet)
    {
        if (m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name.get())
        {
            m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name."));
        }
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_nameIsSet)
    {
        if (m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name.get())
        {
            m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name."));
        }
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_nameIsSet)
    {
        if (m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name.get())
        {
            m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name."));
        }
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_nameIsSet)
    {
        if (m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name.get())
        {
            m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name."));
        }
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_nameIsSet)
    {
        if (m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name.get())
        {
            m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name."));
        }
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_nameIsSet)
    {
        if (m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name.get())
        {
            m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name."));
        }
    }
    if(m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_nameIsSet)
    {
        if (m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name.get())
        {
            m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name."));
        }
    }
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name."));
            setCqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name."));
            setCqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name."));
            setCqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name."));
            setCqDamS7damVideoproxyclientserviceHttpReadtimeoutName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name."));
            setCqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name."));
            setCqDamS7damVideoproxyclientserviceHttpMaxretrycountName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name."));
            setCqDamS7damVideoproxyclientserviceUploadprogressIntervalName( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::getCqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name;
}


void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::setCqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name = value;
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_nameIsSet = true;
}
bool ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeNameIsSet() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_nameIsSet;
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::unsetCq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name()
{
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::getCqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name;
}


void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::setCqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name = value;
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_nameIsSet = true;
}
bool ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeNameIsSet() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_nameIsSet;
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::unsetCq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name()
{
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::getCqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name;
}


void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::setCqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name = value;
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_nameIsSet = true;
}
bool ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadNameIsSet() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_nameIsSet;
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::unsetCq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name()
{
    m_Cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::getCqDamS7damVideoproxyclientserviceHttpReadtimeoutName() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name;
}


void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::setCqDamS7damVideoproxyclientserviceHttpReadtimeoutName(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name = value;
    m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_nameIsSet = true;
}
bool ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::cqDamS7damVideoproxyclientserviceHttpReadtimeoutNameIsSet() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_nameIsSet;
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::unsetCq_dam_s7dam_videoproxyclientservice_http_readtimeout_name()
{
    m_Cq_dam_s7dam_videoproxyclientservice_http_readtimeout_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::getCqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name;
}


void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::setCqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name = value;
    m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_nameIsSet = true;
}
bool ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutNameIsSet() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_nameIsSet;
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::unsetCq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name()
{
    m_Cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::getCqDamS7damVideoproxyclientserviceHttpMaxretrycountName() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name;
}


void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::setCqDamS7damVideoproxyclientserviceHttpMaxretrycountName(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name = value;
    m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_nameIsSet = true;
}
bool ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::cqDamS7damVideoproxyclientserviceHttpMaxretrycountNameIsSet() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_nameIsSet;
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::unsetCq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name()
{
    m_Cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::getCqDamS7damVideoproxyclientserviceUploadprogressIntervalName() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name;
}


void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::setCqDamS7damVideoproxyclientserviceUploadprogressIntervalName(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name = value;
    m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_nameIsSet = true;
}
bool ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::cqDamS7damVideoproxyclientserviceUploadprogressIntervalNameIsSet() const
{
    return m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_nameIsSet;
}

void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties::unsetCq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name()
{
    m_Cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_nameIsSet = false;
}

}
}
}
}

