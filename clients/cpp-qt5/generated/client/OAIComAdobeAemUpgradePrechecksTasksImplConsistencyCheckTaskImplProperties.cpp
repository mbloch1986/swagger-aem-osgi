/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties() {
    init();
}

OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::~OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties() {
    this->cleanup();
}

void
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::init() {
    root_path = new OAIConfigNodePropertyString();
    m_root_path_isSet = false;
    fix_inconsistencies = new OAIConfigNodePropertyBoolean();
    m_fix_inconsistencies_isSet = false;
}

void
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::cleanup() {
    if(root_path != nullptr) { 
        delete root_path;
    }
    if(fix_inconsistencies != nullptr) { 
        delete fix_inconsistencies;
    }
}

OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties*
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&root_path, pJson["root.path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&fix_inconsistencies, pJson["fix.inconsistencies"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::asJsonObject() {
    QJsonObject obj;
    if((root_path != nullptr) && (root_path->isSet())){
        toJsonValue(QString("root.path"), root_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((fix_inconsistencies != nullptr) && (fix_inconsistencies->isSet())){
        toJsonValue(QString("fix.inconsistencies"), fix_inconsistencies, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::getRootPath() {
    return root_path;
}
void
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::setRootPath(OAIConfigNodePropertyString* root_path) {
    this->root_path = root_path;
    this->m_root_path_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::getFixInconsistencies() {
    return fix_inconsistencies;
}
void
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::setFixInconsistencies(OAIConfigNodePropertyBoolean* fix_inconsistencies) {
    this->fix_inconsistencies = fix_inconsistencies;
    this->m_fix_inconsistencies_isSet = true;
}


bool
OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(root_path != nullptr && root_path->isSet()){ isObjectUpdated = true; break;}
        if(fix_inconsistencies != nullptr && fix_inconsistencies->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

