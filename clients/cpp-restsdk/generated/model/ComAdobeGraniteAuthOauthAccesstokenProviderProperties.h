/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteAuthOauthAccesstokenProviderProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthOauthAccesstokenProviderProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthOauthAccesstokenProviderProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteAuthOauthAccesstokenProviderProperties
    : public ModelBase
{
public:
    ComAdobeGraniteAuthOauthAccesstokenProviderProperties();
    virtual ~ComAdobeGraniteAuthOauthAccesstokenProviderProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteAuthOauthAccesstokenProviderProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthTokenProviderTitle() const;
    bool authTokenProviderTitleIsSet() const;
    void unsetAuth_token_provider_title();
    void setAuthTokenProviderTitle(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAuthTokenProviderDefaultClaims() const;
    bool authTokenProviderDefaultClaimsIsSet() const;
    void unsetAuth_token_provider_default_claims();
    void setAuthTokenProviderDefaultClaims(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthTokenProviderEndpoint() const;
    bool authTokenProviderEndpointIsSet() const;
    void unsetAuth_token_provider_endpoint();
    void setAuthTokenProviderEndpoint(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthAccessTokenRequest() const;
    bool authAccessTokenRequestIsSet() const;
    void unsetAuth_access_token_request();
    void setAuthAccessTokenRequest(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthTokenProviderKeypairAlias() const;
    bool authTokenProviderKeypairAliasIsSet() const;
    void unsetAuth_token_provider_keypair_alias();
    void setAuthTokenProviderKeypairAlias(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAuthTokenProviderConnTimeout() const;
    bool authTokenProviderConnTimeoutIsSet() const;
    void unsetAuth_token_provider_conn_timeout();
    void setAuthTokenProviderConnTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAuthTokenProviderSoTimeout() const;
    bool authTokenProviderSoTimeoutIsSet() const;
    void unsetAuth_token_provider_so_timeout();
    void setAuthTokenProviderSoTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthTokenProviderClientId() const;
    bool authTokenProviderClientIdIsSet() const;
    void unsetAuth_token_provider_client_id();
    void setAuthTokenProviderClientId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthTokenProviderScope() const;
    bool authTokenProviderScopeIsSet() const;
    void unsetAuth_token_provider_scope();
    void setAuthTokenProviderScope(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAuthTokenProviderReuseAccessToken() const;
    bool authTokenProviderReuseAccessTokenIsSet() const;
    void unsetAuth_token_provider_reuse_access_token();
    void setAuthTokenProviderReuseAccessToken(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAuthTokenProviderRelaxedSsl() const;
    bool authTokenProviderRelaxedSslIsSet() const;
    void unsetAuth_token_provider_relaxed_ssl();
    void setAuthTokenProviderRelaxedSsl(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTokenRequestCustomizerType() const;
    bool tokenRequestCustomizerTypeIsSet() const;
    void unsetToken_request_customizer_type();
    void setTokenRequestCustomizerType(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthTokenValidatorType() const;
    bool authTokenValidatorTypeIsSet() const;
    void unsetAuth_token_validator_type();
    void setAuthTokenValidatorType(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Name;
    bool m_NameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_token_provider_title;
    bool m_Auth_token_provider_titleIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Auth_token_provider_default_claims;
    bool m_Auth_token_provider_default_claimsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_token_provider_endpoint;
    bool m_Auth_token_provider_endpointIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_access_token_request;
    bool m_Auth_access_token_requestIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_token_provider_keypair_alias;
    bool m_Auth_token_provider_keypair_aliasIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Auth_token_provider_conn_timeout;
    bool m_Auth_token_provider_conn_timeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Auth_token_provider_so_timeout;
    bool m_Auth_token_provider_so_timeoutIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_token_provider_client_id;
    bool m_Auth_token_provider_client_idIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_token_provider_scope;
    bool m_Auth_token_provider_scopeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Auth_token_provider_reuse_access_token;
    bool m_Auth_token_provider_reuse_access_tokenIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Auth_token_provider_relaxed_ssl;
    bool m_Auth_token_provider_relaxed_sslIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Token_request_customizer_type;
    bool m_Token_request_customizer_typeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_token_validator_type;
    bool m_Auth_token_validator_typeIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthOauthAccesstokenProviderProperties_H_ */
