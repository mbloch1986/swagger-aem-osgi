/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingModelsImplModelAdapterFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingModelsImplModelAdapterFactoryProperties::OrgApacheSlingModelsImplModelAdapterFactoryProperties()
{
    m_Osgi_http_whiteboard_listenerIsSet = false;
    m_Osgi_http_whiteboard_context_selectIsSet = false;
    m_Max_recursion_depthIsSet = false;
    m_Cleanup_job_periodIsSet = false;
}

OrgApacheSlingModelsImplModelAdapterFactoryProperties::~OrgApacheSlingModelsImplModelAdapterFactoryProperties()
{
}

void OrgApacheSlingModelsImplModelAdapterFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingModelsImplModelAdapterFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Osgi_http_whiteboard_listenerIsSet)
    {
        val[utility::conversions::to_string_t("osgi.http.whiteboard.listener")] = ModelBase::toJson(m_Osgi_http_whiteboard_listener);
    }
    if(m_Osgi_http_whiteboard_context_selectIsSet)
    {
        val[utility::conversions::to_string_t("osgi.http.whiteboard.context.select")] = ModelBase::toJson(m_Osgi_http_whiteboard_context_select);
    }
    if(m_Max_recursion_depthIsSet)
    {
        val[utility::conversions::to_string_t("max.recursion.depth")] = ModelBase::toJson(m_Max_recursion_depth);
    }
    if(m_Cleanup_job_periodIsSet)
    {
        val[utility::conversions::to_string_t("cleanup.job.period")] = ModelBase::toJson(m_Cleanup_job_period);
    }

    return val;
}

void OrgApacheSlingModelsImplModelAdapterFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("osgi.http.whiteboard.listener")))
    {
        if(!val[utility::conversions::to_string_t("osgi.http.whiteboard.listener")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("osgi.http.whiteboard.listener")]);
            setOsgiHttpWhiteboardListener( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("osgi.http.whiteboard.context.select")))
    {
        if(!val[utility::conversions::to_string_t("osgi.http.whiteboard.context.select")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("osgi.http.whiteboard.context.select")]);
            setOsgiHttpWhiteboardContextSelect( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max.recursion.depth")))
    {
        if(!val[utility::conversions::to_string_t("max.recursion.depth")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("max.recursion.depth")]);
            setMaxRecursionDepth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cleanup.job.period")))
    {
        if(!val[utility::conversions::to_string_t("cleanup.job.period")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cleanup.job.period")]);
            setCleanupJobPeriod( newItem );
        }
    }
}

void OrgApacheSlingModelsImplModelAdapterFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Osgi_http_whiteboard_listenerIsSet)
    {
        if (m_Osgi_http_whiteboard_listener.get())
        {
            m_Osgi_http_whiteboard_listener->toMultipart(multipart, utility::conversions::to_string_t("osgi.http.whiteboard.listener."));
        }
    }
    if(m_Osgi_http_whiteboard_context_selectIsSet)
    {
        if (m_Osgi_http_whiteboard_context_select.get())
        {
            m_Osgi_http_whiteboard_context_select->toMultipart(multipart, utility::conversions::to_string_t("osgi.http.whiteboard.context.select."));
        }
    }
    if(m_Max_recursion_depthIsSet)
    {
        if (m_Max_recursion_depth.get())
        {
            m_Max_recursion_depth->toMultipart(multipart, utility::conversions::to_string_t("max.recursion.depth."));
        }
    }
    if(m_Cleanup_job_periodIsSet)
    {
        if (m_Cleanup_job_period.get())
        {
            m_Cleanup_job_period->toMultipart(multipart, utility::conversions::to_string_t("cleanup.job.period."));
        }
    }
}

void OrgApacheSlingModelsImplModelAdapterFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("osgi.http.whiteboard.listener")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("osgi.http.whiteboard.listener")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("osgi.http.whiteboard.listener."));
            setOsgiHttpWhiteboardListener( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("osgi.http.whiteboard.context.select")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("osgi.http.whiteboard.context.select")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("osgi.http.whiteboard.context.select."));
            setOsgiHttpWhiteboardContextSelect( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("max.recursion.depth")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("max.recursion.depth")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("max.recursion.depth."));
            setMaxRecursionDepth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cleanup.job.period")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cleanup.job.period")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cleanup.job.period."));
            setCleanupJobPeriod( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingModelsImplModelAdapterFactoryProperties::getOsgiHttpWhiteboardListener() const
{
    return m_Osgi_http_whiteboard_listener;
}


void OrgApacheSlingModelsImplModelAdapterFactoryProperties::setOsgiHttpWhiteboardListener(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Osgi_http_whiteboard_listener = value;
    m_Osgi_http_whiteboard_listenerIsSet = true;
}
bool OrgApacheSlingModelsImplModelAdapterFactoryProperties::osgiHttpWhiteboardListenerIsSet() const
{
    return m_Osgi_http_whiteboard_listenerIsSet;
}

void OrgApacheSlingModelsImplModelAdapterFactoryProperties::unsetOsgi_http_whiteboard_listener()
{
    m_Osgi_http_whiteboard_listenerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingModelsImplModelAdapterFactoryProperties::getOsgiHttpWhiteboardContextSelect() const
{
    return m_Osgi_http_whiteboard_context_select;
}


void OrgApacheSlingModelsImplModelAdapterFactoryProperties::setOsgiHttpWhiteboardContextSelect(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Osgi_http_whiteboard_context_select = value;
    m_Osgi_http_whiteboard_context_selectIsSet = true;
}
bool OrgApacheSlingModelsImplModelAdapterFactoryProperties::osgiHttpWhiteboardContextSelectIsSet() const
{
    return m_Osgi_http_whiteboard_context_selectIsSet;
}

void OrgApacheSlingModelsImplModelAdapterFactoryProperties::unsetOsgi_http_whiteboard_context_select()
{
    m_Osgi_http_whiteboard_context_selectIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingModelsImplModelAdapterFactoryProperties::getMaxRecursionDepth() const
{
    return m_Max_recursion_depth;
}


void OrgApacheSlingModelsImplModelAdapterFactoryProperties::setMaxRecursionDepth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Max_recursion_depth = value;
    m_Max_recursion_depthIsSet = true;
}
bool OrgApacheSlingModelsImplModelAdapterFactoryProperties::maxRecursionDepthIsSet() const
{
    return m_Max_recursion_depthIsSet;
}

void OrgApacheSlingModelsImplModelAdapterFactoryProperties::unsetMax_recursion_depth()
{
    m_Max_recursion_depthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingModelsImplModelAdapterFactoryProperties::getCleanupJobPeriod() const
{
    return m_Cleanup_job_period;
}


void OrgApacheSlingModelsImplModelAdapterFactoryProperties::setCleanupJobPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cleanup_job_period = value;
    m_Cleanup_job_periodIsSet = true;
}
bool OrgApacheSlingModelsImplModelAdapterFactoryProperties::cleanupJobPeriodIsSet() const
{
    return m_Cleanup_job_periodIsSet;
}

void OrgApacheSlingModelsImplModelAdapterFactoryProperties::unsetCleanup_job_period()
{
    m_Cleanup_job_periodIsSet = false;
}

}
}
}
}

