/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASComDayCqStatisticsImplStatisticsS
 */
public class OASComDayCqStatisticsImplStatisticsS implements OAS.MappedProperties {
    /**
     * Get schedulerPeriod
     * @return schedulerPeriod
     */
    public OASConfigNodePropertyInteger schedulerPeriod { get; set; }

    /**
     * Get schedulerConcurrent
     * @return schedulerConcurrent
     */
    public OASConfigNodePropertyBoolean schedulerConcurrent { get; set; }

    /**
     * Get path
     * @return path
     */
    public OASConfigNodePropertyString path { get; set; }

    /**
     * Get workspace
     * @return workspace
     */
    public OASConfigNodePropertyString workspace { get; set; }

    /**
     * Get keywordsPath
     * @return keywordsPath
     */
    public OASConfigNodePropertyString keywordsPath { get; set; }

    /**
     * Get asyncEntries
     * @return asyncEntries
     */
    public OASConfigNodePropertyBoolean asyncEntries { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'scheduler.period' => 'schedulerPeriod',
        'scheduler.concurrent' => 'schedulerConcurrent'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASComDayCqStatisticsImplStatisticsS getExample() {
        OASComDayCqStatisticsImplStatisticsS comDayCqStatisticsImplStatisticsServiceImplProperties = new OASComDayCqStatisticsImplStatisticsS();
          comDayCqStatisticsImplStatisticsServiceImplProperties.schedulerPeriod = OASConfigNodePropertyInteger.getExample();
          comDayCqStatisticsImplStatisticsServiceImplProperties.schedulerConcurrent = OASConfigNodePropertyBoolean.getExample();
          comDayCqStatisticsImplStatisticsServiceImplProperties.path = OASConfigNodePropertyString.getExample();
          comDayCqStatisticsImplStatisticsServiceImplProperties.workspace = OASConfigNodePropertyString.getExample();
          comDayCqStatisticsImplStatisticsServiceImplProperties.keywordsPath = OASConfigNodePropertyString.getExample();
          comDayCqStatisticsImplStatisticsServiceImplProperties.asyncEntries = OASConfigNodePropertyBoolean.getExample();
        return comDayCqStatisticsImplStatisticsServiceImplProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASComDayCqStatisticsImplStatisticsS) {           
            OASComDayCqStatisticsImplStatisticsS comDayCqStatisticsImplStatisticsServiceImplProperties = (OASComDayCqStatisticsImplStatisticsS) obj;
            return this.schedulerPeriod == comDayCqStatisticsImplStatisticsServiceImplProperties.schedulerPeriod
                && this.schedulerConcurrent == comDayCqStatisticsImplStatisticsServiceImplProperties.schedulerConcurrent
                && this.path == comDayCqStatisticsImplStatisticsServiceImplProperties.path
                && this.workspace == comDayCqStatisticsImplStatisticsServiceImplProperties.workspace
                && this.keywordsPath == comDayCqStatisticsImplStatisticsServiceImplProperties.keywordsPath
                && this.asyncEntries == comDayCqStatisticsImplStatisticsServiceImplProperties.asyncEntries;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (schedulerPeriod == null ? 0 : System.hashCode(schedulerPeriod));
        hashCode = (17 * hashCode) + (schedulerConcurrent == null ? 0 : System.hashCode(schedulerConcurrent));
        hashCode = (17 * hashCode) + (path == null ? 0 : System.hashCode(path));
        hashCode = (17 * hashCode) + (workspace == null ? 0 : System.hashCode(workspace));
        hashCode = (17 * hashCode) + (keywordsPath == null ? 0 : System.hashCode(keywordsPath));
        hashCode = (17 * hashCode) + (asyncEntries == null ? 0 : System.hashCode(asyncEntries));
        return hashCode;
    }
}

