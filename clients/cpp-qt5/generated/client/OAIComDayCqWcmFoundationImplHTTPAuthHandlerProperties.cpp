/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties() {
    init();
}

OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::~OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::init() {
    path = new OAIConfigNodePropertyString();
    m_path_isSet = false;
    auth_http_nologin = new OAIConfigNodePropertyBoolean();
    m_auth_http_nologin_isSet = false;
    auth_http_realm = new OAIConfigNodePropertyString();
    m_auth_http_realm_isSet = false;
    auth_default_loginpage = new OAIConfigNodePropertyString();
    m_auth_default_loginpage_isSet = false;
    auth_cred_form = new OAIConfigNodePropertyArray();
    m_auth_cred_form_isSet = false;
    auth_cred_utf8 = new OAIConfigNodePropertyArray();
    m_auth_cred_utf8_isSet = false;
}

void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::cleanup() {
    if(path != nullptr) { 
        delete path;
    }
    if(auth_http_nologin != nullptr) { 
        delete auth_http_nologin;
    }
    if(auth_http_realm != nullptr) { 
        delete auth_http_realm;
    }
    if(auth_default_loginpage != nullptr) { 
        delete auth_default_loginpage;
    }
    if(auth_cred_form != nullptr) { 
        delete auth_cred_form;
    }
    if(auth_cred_utf8 != nullptr) { 
        delete auth_cred_utf8;
    }
}

OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties*
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&path, pJson["path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_http_nologin, pJson["auth.http.nologin"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&auth_http_realm, pJson["auth.http.realm"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_default_loginpage, pJson["auth.default.loginpage"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_cred_form, pJson["auth.cred.form"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&auth_cred_utf8, pJson["auth.cred.utf8"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::asJsonObject() {
    QJsonObject obj;
    if((path != nullptr) && (path->isSet())){
        toJsonValue(QString("path"), path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_http_nologin != nullptr) && (auth_http_nologin->isSet())){
        toJsonValue(QString("auth.http.nologin"), auth_http_nologin, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((auth_http_realm != nullptr) && (auth_http_realm->isSet())){
        toJsonValue(QString("auth.http.realm"), auth_http_realm, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_default_loginpage != nullptr) && (auth_default_loginpage->isSet())){
        toJsonValue(QString("auth.default.loginpage"), auth_default_loginpage, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_cred_form != nullptr) && (auth_cred_form->isSet())){
        toJsonValue(QString("auth.cred.form"), auth_cred_form, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((auth_cred_utf8 != nullptr) && (auth_cred_utf8->isSet())){
        toJsonValue(QString("auth.cred.utf8"), auth_cred_utf8, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getPath() {
    return path;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setPath(OAIConfigNodePropertyString* path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthHttpNologin() {
    return auth_http_nologin;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthHttpNologin(OAIConfigNodePropertyBoolean* auth_http_nologin) {
    this->auth_http_nologin = auth_http_nologin;
    this->m_auth_http_nologin_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthHttpRealm() {
    return auth_http_realm;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthHttpRealm(OAIConfigNodePropertyString* auth_http_realm) {
    this->auth_http_realm = auth_http_realm;
    this->m_auth_http_realm_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthDefaultLoginpage() {
    return auth_default_loginpage;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthDefaultLoginpage(OAIConfigNodePropertyString* auth_default_loginpage) {
    this->auth_default_loginpage = auth_default_loginpage;
    this->m_auth_default_loginpage_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthCredForm() {
    return auth_cred_form;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthCredForm(OAIConfigNodePropertyArray* auth_cred_form) {
    this->auth_cred_form = auth_cred_form;
    this->m_auth_cred_form_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthCredUtf8() {
    return auth_cred_utf8;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthCredUtf8(OAIConfigNodePropertyArray* auth_cred_utf8) {
    this->auth_cred_utf8 = auth_cred_utf8;
    this->m_auth_cred_utf8_isSet = true;
}


bool
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(path != nullptr && path->isSet()){ isObjectUpdated = true; break;}
        if(auth_http_nologin != nullptr && auth_http_nologin->isSet()){ isObjectUpdated = true; break;}
        if(auth_http_realm != nullptr && auth_http_realm->isSet()){ isObjectUpdated = true; break;}
        if(auth_default_loginpage != nullptr && auth_default_loginpage->isSet()){ isObjectUpdated = true; break;}
        if(auth_cred_form != nullptr && auth_cred_form->isSet()){ isObjectUpdated = true; break;}
        if(auth_cred_utf8 != nullptr && auth_cred_utf8->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

