/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties()
{
    m_Auth_token_validator_typeIsSet = false;
}

ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::~ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties()
{
}

void ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Auth_token_validator_typeIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.validator.type")] = ModelBase::toJson(m_Auth_token_validator_type);
    }

    return val;
}

void ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("auth.token.validator.type")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.validator.type")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.validator.type")]);
            setAuthTokenValidatorType( newItem );
        }
    }
}

void ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Auth_token_validator_typeIsSet)
    {
        if (m_Auth_token_validator_type.get())
        {
            m_Auth_token_validator_type->toMultipart(multipart, utility::conversions::to_string_t("auth.token.validator.type."));
        }
    }
}

void ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.validator.type")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.validator.type")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.validator.type."));
            setAuthTokenValidatorType( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::getAuthTokenValidatorType() const
{
    return m_Auth_token_validator_type;
}


void ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::setAuthTokenValidatorType(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_token_validator_type = value;
    m_Auth_token_validator_typeIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::authTokenValidatorTypeIsSet() const
{
    return m_Auth_token_validator_typeIsSet;
}

void ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties::unsetAuth_token_validator_type()
{
    m_Auth_token_validator_typeIsSet = false;
}

}
}
}
}

