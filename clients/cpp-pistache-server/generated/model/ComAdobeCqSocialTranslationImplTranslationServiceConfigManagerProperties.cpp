/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties()
{
    m_Translate_languageIsSet = false;
    m_Translate_displayIsSet = false;
    m_Translate_attributionIsSet = false;
    m_Translate_cachingIsSet = false;
    m_Translate_smart_renderingIsSet = false;
    m_Translate_caching_durationIsSet = false;
    m_Translate_session_save_intervalIsSet = false;
    m_Translate_session_save_batchLimitIsSet = false;
    
}

ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::~ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties()
{
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Translate_languageIsSet)
    {
        val["translate.language"] = ModelBase::toJson(m_Translate_language);
    }
    if(m_Translate_displayIsSet)
    {
        val["translate.display"] = ModelBase::toJson(m_Translate_display);
    }
    if(m_Translate_attributionIsSet)
    {
        val["translate.attribution"] = ModelBase::toJson(m_Translate_attribution);
    }
    if(m_Translate_cachingIsSet)
    {
        val["translate.caching"] = ModelBase::toJson(m_Translate_caching);
    }
    if(m_Translate_smart_renderingIsSet)
    {
        val["translate.smart.rendering"] = ModelBase::toJson(m_Translate_smart_rendering);
    }
    if(m_Translate_caching_durationIsSet)
    {
        val["translate.caching.duration"] = ModelBase::toJson(m_Translate_caching_duration);
    }
    if(m_Translate_session_save_intervalIsSet)
    {
        val["translate.session.save.interval"] = ModelBase::toJson(m_Translate_session_save_interval);
    }
    if(m_Translate_session_save_batchLimitIsSet)
    {
        val["translate.session.save.batchLimit"] = ModelBase::toJson(m_Translate_session_save_batchLimit);
    }
    

    return val;
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("translate.language") != val.end())
    {
        if(!val["translate.language"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["translate.language"]);
            setTranslateLanguage( newItem );
        }
        
    }
    if(val.find("translate.display") != val.end())
    {
        if(!val["translate.display"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["translate.display"]);
            setTranslateDisplay( newItem );
        }
        
    }
    if(val.find("translate.attribution") != val.end())
    {
        if(!val["translate.attribution"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["translate.attribution"]);
            setTranslateAttribution( newItem );
        }
        
    }
    if(val.find("translate.caching") != val.end())
    {
        if(!val["translate.caching"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["translate.caching"]);
            setTranslateCaching( newItem );
        }
        
    }
    if(val.find("translate.smart.rendering") != val.end())
    {
        if(!val["translate.smart.rendering"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["translate.smart.rendering"]);
            setTranslateSmartRendering( newItem );
        }
        
    }
    if(val.find("translate.caching.duration") != val.end())
    {
        if(!val["translate.caching.duration"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["translate.caching.duration"]);
            setTranslateCachingDuration( newItem );
        }
        
    }
    if(val.find("translate.session.save.interval") != val.end())
    {
        if(!val["translate.session.save.interval"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["translate.session.save.interval"]);
            setTranslateSessionSaveInterval( newItem );
        }
        
    }
    if(val.find("translate.session.save.batchLimit") != val.end())
    {
        if(!val["translate.session.save.batchLimit"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["translate.session.save.batchLimit"]);
            setTranslateSessionSaveBatchLimit( newItem );
        }
        
    }
    
}


ConfigNodePropertyDropDown ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateLanguage() const
{
    return m_Translate_language;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateLanguage(ConfigNodePropertyDropDown const& value)
{
    m_Translate_language = value;
    m_Translate_languageIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateLanguageIsSet() const
{
    return m_Translate_languageIsSet;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_language()
{
    m_Translate_languageIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateDisplay() const
{
    return m_Translate_display;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateDisplay(ConfigNodePropertyDropDown const& value)
{
    m_Translate_display = value;
    m_Translate_displayIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateDisplayIsSet() const
{
    return m_Translate_displayIsSet;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_display()
{
    m_Translate_displayIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateAttribution() const
{
    return m_Translate_attribution;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateAttribution(ConfigNodePropertyBoolean const& value)
{
    m_Translate_attribution = value;
    m_Translate_attributionIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateAttributionIsSet() const
{
    return m_Translate_attributionIsSet;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_attribution()
{
    m_Translate_attributionIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateCaching() const
{
    return m_Translate_caching;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateCaching(ConfigNodePropertyDropDown const& value)
{
    m_Translate_caching = value;
    m_Translate_cachingIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateCachingIsSet() const
{
    return m_Translate_cachingIsSet;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_caching()
{
    m_Translate_cachingIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSmartRendering() const
{
    return m_Translate_smart_rendering;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSmartRendering(ConfigNodePropertyDropDown const& value)
{
    m_Translate_smart_rendering = value;
    m_Translate_smart_renderingIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateSmartRenderingIsSet() const
{
    return m_Translate_smart_renderingIsSet;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_smart_rendering()
{
    m_Translate_smart_renderingIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateCachingDuration() const
{
    return m_Translate_caching_duration;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateCachingDuration(ConfigNodePropertyString const& value)
{
    m_Translate_caching_duration = value;
    m_Translate_caching_durationIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateCachingDurationIsSet() const
{
    return m_Translate_caching_durationIsSet;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_caching_duration()
{
    m_Translate_caching_durationIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSessionSaveInterval() const
{
    return m_Translate_session_save_interval;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSessionSaveInterval(ConfigNodePropertyString const& value)
{
    m_Translate_session_save_interval = value;
    m_Translate_session_save_intervalIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateSessionSaveIntervalIsSet() const
{
    return m_Translate_session_save_intervalIsSet;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_session_save_interval()
{
    m_Translate_session_save_intervalIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSessionSaveBatchLimit() const
{
    return m_Translate_session_save_batchLimit;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSessionSaveBatchLimit(ConfigNodePropertyString const& value)
{
    m_Translate_session_save_batchLimit = value;
    m_Translate_session_save_batchLimitIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateSessionSaveBatchLimitIsSet() const
{
    return m_Translate_session_save_batchLimitIsSet;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_session_save_batchLimit()
{
    m_Translate_session_save_batchLimitIsSet = false;
}

}
}
}
}

