/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties : IEquatable<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties>
    { 
        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name="disabled")]
        public ConfigNodePropertyBoolean Disabled { get; set; }

        /// <summary>
        /// Gets or Sets Debug
        /// </summary>
        [DataMember(Name="debug")]
        public ConfigNodePropertyBoolean Debug { get; set; }

        /// <summary>
        /// Gets or Sets LocalIndexDir
        /// </summary>
        [DataMember(Name="localIndexDir")]
        public ConfigNodePropertyString LocalIndexDir { get; set; }

        /// <summary>
        /// Gets or Sets EnableOpenIndexAsync
        /// </summary>
        [DataMember(Name="enableOpenIndexAsync")]
        public ConfigNodePropertyBoolean EnableOpenIndexAsync { get; set; }

        /// <summary>
        /// Gets or Sets ThreadPoolSize
        /// </summary>
        [DataMember(Name="threadPoolSize")]
        public ConfigNodePropertyInteger ThreadPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets PrefetchIndexFiles
        /// </summary>
        [DataMember(Name="prefetchIndexFiles")]
        public ConfigNodePropertyBoolean PrefetchIndexFiles { get; set; }

        /// <summary>
        /// Gets or Sets ExtractedTextCacheSizeInMB
        /// </summary>
        [DataMember(Name="extractedTextCacheSizeInMB")]
        public ConfigNodePropertyInteger ExtractedTextCacheSizeInMB { get; set; }

        /// <summary>
        /// Gets or Sets ExtractedTextCacheExpiryInSecs
        /// </summary>
        [DataMember(Name="extractedTextCacheExpiryInSecs")]
        public ConfigNodePropertyInteger ExtractedTextCacheExpiryInSecs { get; set; }

        /// <summary>
        /// Gets or Sets AlwaysUsePreExtractedCache
        /// </summary>
        [DataMember(Name="alwaysUsePreExtractedCache")]
        public ConfigNodePropertyBoolean AlwaysUsePreExtractedCache { get; set; }

        /// <summary>
        /// Gets or Sets BooleanClauseLimit
        /// </summary>
        [DataMember(Name="booleanClauseLimit")]
        public ConfigNodePropertyInteger BooleanClauseLimit { get; set; }

        /// <summary>
        /// Gets or Sets EnableHybridIndexing
        /// </summary>
        [DataMember(Name="enableHybridIndexing")]
        public ConfigNodePropertyBoolean EnableHybridIndexing { get; set; }

        /// <summary>
        /// Gets or Sets HybridQueueSize
        /// </summary>
        [DataMember(Name="hybridQueueSize")]
        public ConfigNodePropertyInteger HybridQueueSize { get; set; }

        /// <summary>
        /// Gets or Sets DisableStoredIndexDefinition
        /// </summary>
        [DataMember(Name="disableStoredIndexDefinition")]
        public ConfigNodePropertyBoolean DisableStoredIndexDefinition { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBlobsCollectionEnabled
        /// </summary>
        [DataMember(Name="deletedBlobsCollectionEnabled")]
        public ConfigNodePropertyBoolean DeletedBlobsCollectionEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PropIndexCleanerIntervalInSecs
        /// </summary>
        [DataMember(Name="propIndexCleanerIntervalInSecs")]
        public ConfigNodePropertyInteger PropIndexCleanerIntervalInSecs { get; set; }

        /// <summary>
        /// Gets or Sets EnableSingleBlobIndexFiles
        /// </summary>
        [DataMember(Name="enableSingleBlobIndexFiles")]
        public ConfigNodePropertyBoolean EnableSingleBlobIndexFiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  LocalIndexDir: ").Append(LocalIndexDir).Append("\n");
            sb.Append("  EnableOpenIndexAsync: ").Append(EnableOpenIndexAsync).Append("\n");
            sb.Append("  ThreadPoolSize: ").Append(ThreadPoolSize).Append("\n");
            sb.Append("  PrefetchIndexFiles: ").Append(PrefetchIndexFiles).Append("\n");
            sb.Append("  ExtractedTextCacheSizeInMB: ").Append(ExtractedTextCacheSizeInMB).Append("\n");
            sb.Append("  ExtractedTextCacheExpiryInSecs: ").Append(ExtractedTextCacheExpiryInSecs).Append("\n");
            sb.Append("  AlwaysUsePreExtractedCache: ").Append(AlwaysUsePreExtractedCache).Append("\n");
            sb.Append("  BooleanClauseLimit: ").Append(BooleanClauseLimit).Append("\n");
            sb.Append("  EnableHybridIndexing: ").Append(EnableHybridIndexing).Append("\n");
            sb.Append("  HybridQueueSize: ").Append(HybridQueueSize).Append("\n");
            sb.Append("  DisableStoredIndexDefinition: ").Append(DisableStoredIndexDefinition).Append("\n");
            sb.Append("  DeletedBlobsCollectionEnabled: ").Append(DeletedBlobsCollectionEnabled).Append("\n");
            sb.Append("  PropIndexCleanerIntervalInSecs: ").Append(PropIndexCleanerIntervalInSecs).Append("\n");
            sb.Append("  EnableSingleBlobIndexFiles: ").Append(EnableSingleBlobIndexFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Disabled == other.Disabled ||
                    Disabled != null &&
                    Disabled.Equals(other.Disabled)
                ) && 
                (
                    Debug == other.Debug ||
                    Debug != null &&
                    Debug.Equals(other.Debug)
                ) && 
                (
                    LocalIndexDir == other.LocalIndexDir ||
                    LocalIndexDir != null &&
                    LocalIndexDir.Equals(other.LocalIndexDir)
                ) && 
                (
                    EnableOpenIndexAsync == other.EnableOpenIndexAsync ||
                    EnableOpenIndexAsync != null &&
                    EnableOpenIndexAsync.Equals(other.EnableOpenIndexAsync)
                ) && 
                (
                    ThreadPoolSize == other.ThreadPoolSize ||
                    ThreadPoolSize != null &&
                    ThreadPoolSize.Equals(other.ThreadPoolSize)
                ) && 
                (
                    PrefetchIndexFiles == other.PrefetchIndexFiles ||
                    PrefetchIndexFiles != null &&
                    PrefetchIndexFiles.Equals(other.PrefetchIndexFiles)
                ) && 
                (
                    ExtractedTextCacheSizeInMB == other.ExtractedTextCacheSizeInMB ||
                    ExtractedTextCacheSizeInMB != null &&
                    ExtractedTextCacheSizeInMB.Equals(other.ExtractedTextCacheSizeInMB)
                ) && 
                (
                    ExtractedTextCacheExpiryInSecs == other.ExtractedTextCacheExpiryInSecs ||
                    ExtractedTextCacheExpiryInSecs != null &&
                    ExtractedTextCacheExpiryInSecs.Equals(other.ExtractedTextCacheExpiryInSecs)
                ) && 
                (
                    AlwaysUsePreExtractedCache == other.AlwaysUsePreExtractedCache ||
                    AlwaysUsePreExtractedCache != null &&
                    AlwaysUsePreExtractedCache.Equals(other.AlwaysUsePreExtractedCache)
                ) && 
                (
                    BooleanClauseLimit == other.BooleanClauseLimit ||
                    BooleanClauseLimit != null &&
                    BooleanClauseLimit.Equals(other.BooleanClauseLimit)
                ) && 
                (
                    EnableHybridIndexing == other.EnableHybridIndexing ||
                    EnableHybridIndexing != null &&
                    EnableHybridIndexing.Equals(other.EnableHybridIndexing)
                ) && 
                (
                    HybridQueueSize == other.HybridQueueSize ||
                    HybridQueueSize != null &&
                    HybridQueueSize.Equals(other.HybridQueueSize)
                ) && 
                (
                    DisableStoredIndexDefinition == other.DisableStoredIndexDefinition ||
                    DisableStoredIndexDefinition != null &&
                    DisableStoredIndexDefinition.Equals(other.DisableStoredIndexDefinition)
                ) && 
                (
                    DeletedBlobsCollectionEnabled == other.DeletedBlobsCollectionEnabled ||
                    DeletedBlobsCollectionEnabled != null &&
                    DeletedBlobsCollectionEnabled.Equals(other.DeletedBlobsCollectionEnabled)
                ) && 
                (
                    PropIndexCleanerIntervalInSecs == other.PropIndexCleanerIntervalInSecs ||
                    PropIndexCleanerIntervalInSecs != null &&
                    PropIndexCleanerIntervalInSecs.Equals(other.PropIndexCleanerIntervalInSecs)
                ) && 
                (
                    EnableSingleBlobIndexFiles == other.EnableSingleBlobIndexFiles ||
                    EnableSingleBlobIndexFiles != null &&
                    EnableSingleBlobIndexFiles.Equals(other.EnableSingleBlobIndexFiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Disabled != null)
                    hashCode = hashCode * 59 + Disabled.GetHashCode();
                    if (Debug != null)
                    hashCode = hashCode * 59 + Debug.GetHashCode();
                    if (LocalIndexDir != null)
                    hashCode = hashCode * 59 + LocalIndexDir.GetHashCode();
                    if (EnableOpenIndexAsync != null)
                    hashCode = hashCode * 59 + EnableOpenIndexAsync.GetHashCode();
                    if (ThreadPoolSize != null)
                    hashCode = hashCode * 59 + ThreadPoolSize.GetHashCode();
                    if (PrefetchIndexFiles != null)
                    hashCode = hashCode * 59 + PrefetchIndexFiles.GetHashCode();
                    if (ExtractedTextCacheSizeInMB != null)
                    hashCode = hashCode * 59 + ExtractedTextCacheSizeInMB.GetHashCode();
                    if (ExtractedTextCacheExpiryInSecs != null)
                    hashCode = hashCode * 59 + ExtractedTextCacheExpiryInSecs.GetHashCode();
                    if (AlwaysUsePreExtractedCache != null)
                    hashCode = hashCode * 59 + AlwaysUsePreExtractedCache.GetHashCode();
                    if (BooleanClauseLimit != null)
                    hashCode = hashCode * 59 + BooleanClauseLimit.GetHashCode();
                    if (EnableHybridIndexing != null)
                    hashCode = hashCode * 59 + EnableHybridIndexing.GetHashCode();
                    if (HybridQueueSize != null)
                    hashCode = hashCode * 59 + HybridQueueSize.GetHashCode();
                    if (DisableStoredIndexDefinition != null)
                    hashCode = hashCode * 59 + DisableStoredIndexDefinition.GetHashCode();
                    if (DeletedBlobsCollectionEnabled != null)
                    hashCode = hashCode * 59 + DeletedBlobsCollectionEnabled.GetHashCode();
                    if (PropIndexCleanerIntervalInSecs != null)
                    hashCode = hashCode * 59 + PropIndexCleanerIntervalInSecs.GetHashCode();
                    if (EnableSingleBlobIndexFiles != null)
                    hashCode = hashCode * 59 + EnableSingleBlobIndexFiles.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties left, OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties left, OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
