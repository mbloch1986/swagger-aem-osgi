# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorProperties do
  @moduledoc """
  
  """

  @derive [Poison.Encoder]
  defstruct [
    :"solr.zk.timeout",
    :"solr.commit",
    :"cache.on",
    :"concurrency.level",
    :"cache.start.size",
    :"cache.ttl",
    :"cache.size"
  ]

  @type t :: %__MODULE__{
    :"solr.zk.timeout" => ConfigNodePropertyString,
    :"solr.commit" => ConfigNodePropertyString,
    :"cache.on" => ConfigNodePropertyBoolean,
    :"concurrency.level" => ConfigNodePropertyInteger,
    :"cache.start.size" => ConfigNodePropertyInteger,
    :"cache.ttl" => ConfigNodePropertyInteger,
    :"cache.size" => ConfigNodePropertyInteger
  }
end

defimpl Poison.Decoder, for: AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorProperties do
  import AdobeExperienceManagerOSGIConfig(AEM)API.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"solr.zk.timeout", :struct, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ConfigNodePropertyString, options)
    |> deserialize(:"solr.commit", :struct, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ConfigNodePropertyString, options)
    |> deserialize(:"cache.on", :struct, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ConfigNodePropertyBoolean, options)
    |> deserialize(:"concurrency.level", :struct, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ConfigNodePropertyInteger, options)
    |> deserialize(:"cache.start.size", :struct, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ConfigNodePropertyInteger, options)
    |> deserialize(:"cache.ttl", :struct, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ConfigNodePropertyInteger, options)
    |> deserialize(:"cache.size", :struct, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ConfigNodePropertyInteger, options)
  end
end

