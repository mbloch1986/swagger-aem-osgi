/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties() {
    init();
}

OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::~OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::init() {
    stream_path = new OAIConfigNodePropertyString();
    m_stream_path_isSet = false;
    stream_name = new OAIConfigNodePropertyString();
    m_stream_name_isSet = false;
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::cleanup() {
    if(stream_path != nullptr) { 
        delete stream_path;
    }
    if(stream_name != nullptr) { 
        delete stream_name;
    }
}

OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties*
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&stream_path, pJson["streamPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&stream_name, pJson["streamName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::asJsonObject() {
    QJsonObject obj;
    if((stream_path != nullptr) && (stream_path->isSet())){
        toJsonValue(QString("streamPath"), stream_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((stream_name != nullptr) && (stream_name->isSet())){
        toJsonValue(QString("streamName"), stream_name, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::getStreamPath() {
    return stream_path;
}
void
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::setStreamPath(OAIConfigNodePropertyString* stream_path) {
    this->stream_path = stream_path;
    this->m_stream_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::getStreamName() {
    return stream_name;
}
void
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::setStreamName(OAIConfigNodePropertyString* stream_name) {
    this->stream_name = stream_name;
    this->m_stream_name_isSet = true;
}


bool
OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(stream_path != nullptr && stream_path->isSet()){ isObjectUpdated = true; break;}
        if(stream_name != nullptr && stream_name->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

