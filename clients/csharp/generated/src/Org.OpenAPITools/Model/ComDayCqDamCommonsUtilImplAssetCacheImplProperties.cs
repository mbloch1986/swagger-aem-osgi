/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqDamCommonsUtilImplAssetCacheImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCommonsUtilImplAssetCacheImplProperties :  IEquatable<ComDayCqDamCommonsUtilImplAssetCacheImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqDamCommonsUtilImplAssetCacheImplProperties" /> class.
        /// </summary>
        /// <param name="largeFileMin">largeFileMin.</param>
        /// <param name="cacheApply">cacheApply.</param>
        /// <param name="mimeTypes">mimeTypes.</param>
        public ComDayCqDamCommonsUtilImplAssetCacheImplProperties(ConfigNodePropertyInteger largeFileMin = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean cacheApply = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray mimeTypes = default(ConfigNodePropertyArray))
        {
            this.LargeFileMin = largeFileMin;
            this.CacheApply = cacheApply;
            this.MimeTypes = mimeTypes;
        }
        
        /// <summary>
        /// Gets or Sets LargeFileMin
        /// </summary>
        [DataMember(Name="large.file.min", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger LargeFileMin { get; set; }

        /// <summary>
        /// Gets or Sets CacheApply
        /// </summary>
        [DataMember(Name="cache.apply", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean CacheApply { get; set; }

        /// <summary>
        /// Gets or Sets MimeTypes
        /// </summary>
        [DataMember(Name="mime.types", EmitDefaultValue=false)]
        public ConfigNodePropertyArray MimeTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCommonsUtilImplAssetCacheImplProperties {\n");
            sb.Append("  LargeFileMin: ").Append(LargeFileMin).Append("\n");
            sb.Append("  CacheApply: ").Append(CacheApply).Append("\n");
            sb.Append("  MimeTypes: ").Append(MimeTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqDamCommonsUtilImplAssetCacheImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCommonsUtilImplAssetCacheImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqDamCommonsUtilImplAssetCacheImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCommonsUtilImplAssetCacheImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LargeFileMin == input.LargeFileMin ||
                    (this.LargeFileMin != null &&
                    this.LargeFileMin.Equals(input.LargeFileMin))
                ) && 
                (
                    this.CacheApply == input.CacheApply ||
                    (this.CacheApply != null &&
                    this.CacheApply.Equals(input.CacheApply))
                ) && 
                (
                    this.MimeTypes == input.MimeTypes ||
                    (this.MimeTypes != null &&
                    this.MimeTypes.Equals(input.MimeTypes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LargeFileMin != null)
                    hashCode = hashCode * 59 + this.LargeFileMin.GetHashCode();
                if (this.CacheApply != null)
                    hashCode = hashCode * 59 + this.CacheApply.GetHashCode();
                if (this.MimeTypes != null)
                    hashCode = hashCode * 59 + this.MimeTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
