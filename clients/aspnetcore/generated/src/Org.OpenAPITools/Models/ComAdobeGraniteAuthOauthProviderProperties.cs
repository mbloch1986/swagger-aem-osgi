/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteAuthOauthProviderProperties : IEquatable<ComAdobeGraniteAuthOauthProviderProperties>
    { 
        /// <summary>
        /// Gets or Sets OauthConfigId
        /// </summary>
        [DataMember(Name="oauth.config.id")]
        public ConfigNodePropertyString OauthConfigId { get; set; }

        /// <summary>
        /// Gets or Sets OauthClientId
        /// </summary>
        [DataMember(Name="oauth.client.id")]
        public ConfigNodePropertyString OauthClientId { get; set; }

        /// <summary>
        /// Gets or Sets OauthClientSecret
        /// </summary>
        [DataMember(Name="oauth.client.secret")]
        public ConfigNodePropertyString OauthClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets OauthScope
        /// </summary>
        [DataMember(Name="oauth.scope")]
        public ConfigNodePropertyArray OauthScope { get; set; }

        /// <summary>
        /// Gets or Sets OauthConfigProviderId
        /// </summary>
        [DataMember(Name="oauth.config.provider.id")]
        public ConfigNodePropertyString OauthConfigProviderId { get; set; }

        /// <summary>
        /// Gets or Sets OauthCreateUsers
        /// </summary>
        [DataMember(Name="oauth.create.users")]
        public ConfigNodePropertyBoolean OauthCreateUsers { get; set; }

        /// <summary>
        /// Gets or Sets OauthUseridProperty
        /// </summary>
        [DataMember(Name="oauth.userid.property")]
        public ConfigNodePropertyString OauthUseridProperty { get; set; }

        /// <summary>
        /// Gets or Sets ForceStrictUsernameMatching
        /// </summary>
        [DataMember(Name="force.strict.username.matching")]
        public ConfigNodePropertyBoolean ForceStrictUsernameMatching { get; set; }

        /// <summary>
        /// Gets or Sets OauthEncodeUserids
        /// </summary>
        [DataMember(Name="oauth.encode.userids")]
        public ConfigNodePropertyBoolean OauthEncodeUserids { get; set; }

        /// <summary>
        /// Gets or Sets OauthHashUserids
        /// </summary>
        [DataMember(Name="oauth.hash.userids")]
        public ConfigNodePropertyBoolean OauthHashUserids { get; set; }

        /// <summary>
        /// Gets or Sets OauthCallBackUrl
        /// </summary>
        [DataMember(Name="oauth.callBackUrl")]
        public ConfigNodePropertyString OauthCallBackUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthAccessTokenPersist
        /// </summary>
        [DataMember(Name="oauth.access.token.persist")]
        public ConfigNodePropertyBoolean OauthAccessTokenPersist { get; set; }

        /// <summary>
        /// Gets or Sets OauthAccessTokenPersistCookie
        /// </summary>
        [DataMember(Name="oauth.access.token.persist.cookie")]
        public ConfigNodePropertyBoolean OauthAccessTokenPersistCookie { get; set; }

        /// <summary>
        /// Gets or Sets OauthCsrfStateProtection
        /// </summary>
        [DataMember(Name="oauth.csrf.state.protection")]
        public ConfigNodePropertyBoolean OauthCsrfStateProtection { get; set; }

        /// <summary>
        /// Gets or Sets OauthRedirectRequestParams
        /// </summary>
        [DataMember(Name="oauth.redirect.request.params")]
        public ConfigNodePropertyBoolean OauthRedirectRequestParams { get; set; }

        /// <summary>
        /// Gets or Sets OauthConfigSiblingsAllow
        /// </summary>
        [DataMember(Name="oauth.config.siblings.allow")]
        public ConfigNodePropertyBoolean OauthConfigSiblingsAllow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteAuthOauthProviderProperties {\n");
            sb.Append("  OauthConfigId: ").Append(OauthConfigId).Append("\n");
            sb.Append("  OauthClientId: ").Append(OauthClientId).Append("\n");
            sb.Append("  OauthClientSecret: ").Append(OauthClientSecret).Append("\n");
            sb.Append("  OauthScope: ").Append(OauthScope).Append("\n");
            sb.Append("  OauthConfigProviderId: ").Append(OauthConfigProviderId).Append("\n");
            sb.Append("  OauthCreateUsers: ").Append(OauthCreateUsers).Append("\n");
            sb.Append("  OauthUseridProperty: ").Append(OauthUseridProperty).Append("\n");
            sb.Append("  ForceStrictUsernameMatching: ").Append(ForceStrictUsernameMatching).Append("\n");
            sb.Append("  OauthEncodeUserids: ").Append(OauthEncodeUserids).Append("\n");
            sb.Append("  OauthHashUserids: ").Append(OauthHashUserids).Append("\n");
            sb.Append("  OauthCallBackUrl: ").Append(OauthCallBackUrl).Append("\n");
            sb.Append("  OauthAccessTokenPersist: ").Append(OauthAccessTokenPersist).Append("\n");
            sb.Append("  OauthAccessTokenPersistCookie: ").Append(OauthAccessTokenPersistCookie).Append("\n");
            sb.Append("  OauthCsrfStateProtection: ").Append(OauthCsrfStateProtection).Append("\n");
            sb.Append("  OauthRedirectRequestParams: ").Append(OauthRedirectRequestParams).Append("\n");
            sb.Append("  OauthConfigSiblingsAllow: ").Append(OauthConfigSiblingsAllow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteAuthOauthProviderProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteAuthOauthProviderProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteAuthOauthProviderProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteAuthOauthProviderProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OauthConfigId == other.OauthConfigId ||
                    OauthConfigId != null &&
                    OauthConfigId.Equals(other.OauthConfigId)
                ) && 
                (
                    OauthClientId == other.OauthClientId ||
                    OauthClientId != null &&
                    OauthClientId.Equals(other.OauthClientId)
                ) && 
                (
                    OauthClientSecret == other.OauthClientSecret ||
                    OauthClientSecret != null &&
                    OauthClientSecret.Equals(other.OauthClientSecret)
                ) && 
                (
                    OauthScope == other.OauthScope ||
                    OauthScope != null &&
                    OauthScope.Equals(other.OauthScope)
                ) && 
                (
                    OauthConfigProviderId == other.OauthConfigProviderId ||
                    OauthConfigProviderId != null &&
                    OauthConfigProviderId.Equals(other.OauthConfigProviderId)
                ) && 
                (
                    OauthCreateUsers == other.OauthCreateUsers ||
                    OauthCreateUsers != null &&
                    OauthCreateUsers.Equals(other.OauthCreateUsers)
                ) && 
                (
                    OauthUseridProperty == other.OauthUseridProperty ||
                    OauthUseridProperty != null &&
                    OauthUseridProperty.Equals(other.OauthUseridProperty)
                ) && 
                (
                    ForceStrictUsernameMatching == other.ForceStrictUsernameMatching ||
                    ForceStrictUsernameMatching != null &&
                    ForceStrictUsernameMatching.Equals(other.ForceStrictUsernameMatching)
                ) && 
                (
                    OauthEncodeUserids == other.OauthEncodeUserids ||
                    OauthEncodeUserids != null &&
                    OauthEncodeUserids.Equals(other.OauthEncodeUserids)
                ) && 
                (
                    OauthHashUserids == other.OauthHashUserids ||
                    OauthHashUserids != null &&
                    OauthHashUserids.Equals(other.OauthHashUserids)
                ) && 
                (
                    OauthCallBackUrl == other.OauthCallBackUrl ||
                    OauthCallBackUrl != null &&
                    OauthCallBackUrl.Equals(other.OauthCallBackUrl)
                ) && 
                (
                    OauthAccessTokenPersist == other.OauthAccessTokenPersist ||
                    OauthAccessTokenPersist != null &&
                    OauthAccessTokenPersist.Equals(other.OauthAccessTokenPersist)
                ) && 
                (
                    OauthAccessTokenPersistCookie == other.OauthAccessTokenPersistCookie ||
                    OauthAccessTokenPersistCookie != null &&
                    OauthAccessTokenPersistCookie.Equals(other.OauthAccessTokenPersistCookie)
                ) && 
                (
                    OauthCsrfStateProtection == other.OauthCsrfStateProtection ||
                    OauthCsrfStateProtection != null &&
                    OauthCsrfStateProtection.Equals(other.OauthCsrfStateProtection)
                ) && 
                (
                    OauthRedirectRequestParams == other.OauthRedirectRequestParams ||
                    OauthRedirectRequestParams != null &&
                    OauthRedirectRequestParams.Equals(other.OauthRedirectRequestParams)
                ) && 
                (
                    OauthConfigSiblingsAllow == other.OauthConfigSiblingsAllow ||
                    OauthConfigSiblingsAllow != null &&
                    OauthConfigSiblingsAllow.Equals(other.OauthConfigSiblingsAllow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OauthConfigId != null)
                    hashCode = hashCode * 59 + OauthConfigId.GetHashCode();
                    if (OauthClientId != null)
                    hashCode = hashCode * 59 + OauthClientId.GetHashCode();
                    if (OauthClientSecret != null)
                    hashCode = hashCode * 59 + OauthClientSecret.GetHashCode();
                    if (OauthScope != null)
                    hashCode = hashCode * 59 + OauthScope.GetHashCode();
                    if (OauthConfigProviderId != null)
                    hashCode = hashCode * 59 + OauthConfigProviderId.GetHashCode();
                    if (OauthCreateUsers != null)
                    hashCode = hashCode * 59 + OauthCreateUsers.GetHashCode();
                    if (OauthUseridProperty != null)
                    hashCode = hashCode * 59 + OauthUseridProperty.GetHashCode();
                    if (ForceStrictUsernameMatching != null)
                    hashCode = hashCode * 59 + ForceStrictUsernameMatching.GetHashCode();
                    if (OauthEncodeUserids != null)
                    hashCode = hashCode * 59 + OauthEncodeUserids.GetHashCode();
                    if (OauthHashUserids != null)
                    hashCode = hashCode * 59 + OauthHashUserids.GetHashCode();
                    if (OauthCallBackUrl != null)
                    hashCode = hashCode * 59 + OauthCallBackUrl.GetHashCode();
                    if (OauthAccessTokenPersist != null)
                    hashCode = hashCode * 59 + OauthAccessTokenPersist.GetHashCode();
                    if (OauthAccessTokenPersistCookie != null)
                    hashCode = hashCode * 59 + OauthAccessTokenPersistCookie.GetHashCode();
                    if (OauthCsrfStateProtection != null)
                    hashCode = hashCode * 59 + OauthCsrfStateProtection.GetHashCode();
                    if (OauthRedirectRequestParams != null)
                    hashCode = hashCode * 59 + OauthRedirectRequestParams.GetHashCode();
                    if (OauthConfigSiblingsAllow != null)
                    hashCode = hashCode * 59 + OauthConfigSiblingsAllow.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteAuthOauthProviderProperties left, ComAdobeGraniteAuthOauthProviderProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteAuthOauthProviderProperties left, ComAdobeGraniteAuthOauthProviderProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
