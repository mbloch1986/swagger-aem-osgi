/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties() {
    init();
}

OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::~OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::init() {
    account_name = new OAIConfigNodePropertyString();
    m_account_name_isSet = false;
    container_name = new OAIConfigNodePropertyString();
    m_container_name_isSet = false;
    access_key = new OAIConfigNodePropertyString();
    m_access_key_isSet = false;
    root_path = new OAIConfigNodePropertyString();
    m_root_path_isSet = false;
    connection_url = new OAIConfigNodePropertyString();
    m_connection_url_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::cleanup() {
    if(account_name != nullptr) { 
        delete account_name;
    }
    if(container_name != nullptr) { 
        delete container_name;
    }
    if(access_key != nullptr) { 
        delete access_key;
    }
    if(root_path != nullptr) { 
        delete root_path;
    }
    if(connection_url != nullptr) { 
        delete connection_url;
    }
}

OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties*
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&account_name, pJson["accountName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&container_name, pJson["containerName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&access_key, pJson["accessKey"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&root_path, pJson["rootPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&connection_url, pJson["connectionURL"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((account_name != nullptr) && (account_name->isSet())){
        toJsonValue(QString("accountName"), account_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((container_name != nullptr) && (container_name->isSet())){
        toJsonValue(QString("containerName"), container_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((access_key != nullptr) && (access_key->isSet())){
        toJsonValue(QString("accessKey"), access_key, obj, QString("OAIConfigNodePropertyString"));
    }
    if((root_path != nullptr) && (root_path->isSet())){
        toJsonValue(QString("rootPath"), root_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((connection_url != nullptr) && (connection_url->isSet())){
        toJsonValue(QString("connectionURL"), connection_url, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getAccountName() {
    return account_name;
}
void
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setAccountName(OAIConfigNodePropertyString* account_name) {
    this->account_name = account_name;
    this->m_account_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getContainerName() {
    return container_name;
}
void
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setContainerName(OAIConfigNodePropertyString* container_name) {
    this->container_name = container_name;
    this->m_container_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getAccessKey() {
    return access_key;
}
void
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setAccessKey(OAIConfigNodePropertyString* access_key) {
    this->access_key = access_key;
    this->m_access_key_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getRootPath() {
    return root_path;
}
void
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setRootPath(OAIConfigNodePropertyString* root_path) {
    this->root_path = root_path;
    this->m_root_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getConnectionUrl() {
    return connection_url;
}
void
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setConnectionUrl(OAIConfigNodePropertyString* connection_url) {
    this->connection_url = connection_url;
    this->m_connection_url_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(account_name != nullptr && account_name->isSet()){ isObjectUpdated = true; break;}
        if(container_name != nullptr && container_name->isSet()){ isObjectUpdated = true; break;}
        if(access_key != nullptr && access_key->isSet()){ isObjectUpdated = true; break;}
        if(root_path != nullptr && root_path->isSet()){ isObjectUpdated = true; break;}
        if(connection_url != nullptr && connection_url->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

