/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqAuthImplCugCugSupportImplProperties {
  #[serde(rename = "cug.exempted.principals")]
  cug_exempted_principals: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cug.enabled")]
  cug_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "cug.principals.regex")]
  cug_principals_regex: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cug.principals.replacement")]
  cug_principals_replacement: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqAuthImplCugCugSupportImplProperties {
  pub fn new() -> ComDayCqAuthImplCugCugSupportImplProperties {
    ComDayCqAuthImplCugCugSupportImplProperties {
      cug_exempted_principals: None,
      cug_enabled: None,
      cug_principals_regex: None,
      cug_principals_replacement: None
    }
  }

  pub fn set_cug_exempted_principals(&mut self, cug_exempted_principals: ::models::ConfigNodePropertyArray) {
    self.cug_exempted_principals = Some(cug_exempted_principals);
  }

  pub fn with_cug_exempted_principals(mut self, cug_exempted_principals: ::models::ConfigNodePropertyArray) -> ComDayCqAuthImplCugCugSupportImplProperties {
    self.cug_exempted_principals = Some(cug_exempted_principals);
    self
  }

  pub fn cug_exempted_principals(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cug_exempted_principals.as_ref()
  }

  pub fn reset_cug_exempted_principals(&mut self) {
    self.cug_exempted_principals = None;
  }

  pub fn set_cug_enabled(&mut self, cug_enabled: ::models::ConfigNodePropertyBoolean) {
    self.cug_enabled = Some(cug_enabled);
  }

  pub fn with_cug_enabled(mut self, cug_enabled: ::models::ConfigNodePropertyBoolean) -> ComDayCqAuthImplCugCugSupportImplProperties {
    self.cug_enabled = Some(cug_enabled);
    self
  }

  pub fn cug_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cug_enabled.as_ref()
  }

  pub fn reset_cug_enabled(&mut self) {
    self.cug_enabled = None;
  }

  pub fn set_cug_principals_regex(&mut self, cug_principals_regex: ::models::ConfigNodePropertyString) {
    self.cug_principals_regex = Some(cug_principals_regex);
  }

  pub fn with_cug_principals_regex(mut self, cug_principals_regex: ::models::ConfigNodePropertyString) -> ComDayCqAuthImplCugCugSupportImplProperties {
    self.cug_principals_regex = Some(cug_principals_regex);
    self
  }

  pub fn cug_principals_regex(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cug_principals_regex.as_ref()
  }

  pub fn reset_cug_principals_regex(&mut self) {
    self.cug_principals_regex = None;
  }

  pub fn set_cug_principals_replacement(&mut self, cug_principals_replacement: ::models::ConfigNodePropertyString) {
    self.cug_principals_replacement = Some(cug_principals_replacement);
  }

  pub fn with_cug_principals_replacement(mut self, cug_principals_replacement: ::models::ConfigNodePropertyString) -> ComDayCqAuthImplCugCugSupportImplProperties {
    self.cug_principals_replacement = Some(cug_principals_replacement);
    self
  }

  pub fn cug_principals_replacement(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cug_principals_replacement.as_ref()
  }

  pub fn reset_cug_principals_replacement(&mut self) {
    self.cug_principals_replacement = None;
  }

}



