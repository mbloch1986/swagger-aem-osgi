/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraemosgi4j.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyArray;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyBoolean;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyInteger;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyString;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
 */
public class ComAdobeGraniteRepositoryImplCommitStatsConfigPropertiesTest {
    private final ComAdobeGraniteRepositoryImplCommitStatsConfigProperties model = new ComAdobeGraniteRepositoryImplCommitStatsConfigProperties();

    /**
     * Model tests for ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
     */
    @Test
    public void testComAdobeGraniteRepositoryImplCommitStatsConfigProperties() {
        // TODO: test ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'intervalSeconds'
     */
    @Test
    public void intervalSecondsTest() {
        // TODO: test intervalSeconds
    }

    /**
     * Test the property 'commitsPerIntervalThreshold'
     */
    @Test
    public void commitsPerIntervalThresholdTest() {
        // TODO: test commitsPerIntervalThreshold
    }

    /**
     * Test the property 'maxLocationLength'
     */
    @Test
    public void maxLocationLengthTest() {
        // TODO: test maxLocationLength
    }

    /**
     * Test the property 'maxDetailsShown'
     */
    @Test
    public void maxDetailsShownTest() {
        // TODO: test maxDetailsShown
    }

    /**
     * Test the property 'minDetailsPercentage'
     */
    @Test
    public void minDetailsPercentageTest() {
        // TODO: test minDetailsPercentage
    }

    /**
     * Test the property 'threadMatchers'
     */
    @Test
    public void threadMatchersTest() {
        // TODO: test threadMatchers
    }

    /**
     * Test the property 'maxGreedyDepth'
     */
    @Test
    public void maxGreedyDepthTest() {
        // TODO: test maxGreedyDepth
    }

    /**
     * Test the property 'greedyStackMatchers'
     */
    @Test
    public void greedyStackMatchersTest() {
        // TODO: test greedyStackMatchers
    }

    /**
     * Test the property 'stackFilters'
     */
    @Test
    public void stackFiltersTest() {
        // TODO: test stackFilters
    }

    /**
     * Test the property 'stackMatchers'
     */
    @Test
    public void stackMatchersTest() {
        // TODO: test stackMatchers
    }

    /**
     * Test the property 'stackCategorizers'
     */
    @Test
    public void stackCategorizersTest() {
        // TODO: test stackCategorizers
    }

    /**
     * Test the property 'stackShorteners'
     */
    @Test
    public void stackShortenersTest() {
        // TODO: test stackShorteners
    }

}
