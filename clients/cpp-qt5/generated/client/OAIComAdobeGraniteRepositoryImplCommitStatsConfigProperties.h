/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties.h
 *
 * 
 */

#ifndef OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_
#define OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties: public OAIObject {
public:
    OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties();
    OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties(QString json);
    ~OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyBoolean* getEnabled();
    void setEnabled(OAIConfigNodePropertyBoolean* enabled);

    OAIConfigNodePropertyInteger* getIntervalSeconds();
    void setIntervalSeconds(OAIConfigNodePropertyInteger* interval_seconds);

    OAIConfigNodePropertyInteger* getCommitsPerIntervalThreshold();
    void setCommitsPerIntervalThreshold(OAIConfigNodePropertyInteger* commits_per_interval_threshold);

    OAIConfigNodePropertyInteger* getMaxLocationLength();
    void setMaxLocationLength(OAIConfigNodePropertyInteger* max_location_length);

    OAIConfigNodePropertyInteger* getMaxDetailsShown();
    void setMaxDetailsShown(OAIConfigNodePropertyInteger* max_details_shown);

    OAIConfigNodePropertyInteger* getMinDetailsPercentage();
    void setMinDetailsPercentage(OAIConfigNodePropertyInteger* min_details_percentage);

    OAIConfigNodePropertyArray* getThreadMatchers();
    void setThreadMatchers(OAIConfigNodePropertyArray* thread_matchers);

    OAIConfigNodePropertyInteger* getMaxGreedyDepth();
    void setMaxGreedyDepth(OAIConfigNodePropertyInteger* max_greedy_depth);

    OAIConfigNodePropertyString* getGreedyStackMatchers();
    void setGreedyStackMatchers(OAIConfigNodePropertyString* greedy_stack_matchers);

    OAIConfigNodePropertyArray* getStackFilters();
    void setStackFilters(OAIConfigNodePropertyArray* stack_filters);

    OAIConfigNodePropertyArray* getStackMatchers();
    void setStackMatchers(OAIConfigNodePropertyArray* stack_matchers);

    OAIConfigNodePropertyArray* getStackCategorizers();
    void setStackCategorizers(OAIConfigNodePropertyArray* stack_categorizers);

    OAIConfigNodePropertyArray* getStackShorteners();
    void setStackShorteners(OAIConfigNodePropertyArray* stack_shorteners);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyBoolean* enabled;
    bool m_enabled_isSet;

    OAIConfigNodePropertyInteger* interval_seconds;
    bool m_interval_seconds_isSet;

    OAIConfigNodePropertyInteger* commits_per_interval_threshold;
    bool m_commits_per_interval_threshold_isSet;

    OAIConfigNodePropertyInteger* max_location_length;
    bool m_max_location_length_isSet;

    OAIConfigNodePropertyInteger* max_details_shown;
    bool m_max_details_shown_isSet;

    OAIConfigNodePropertyInteger* min_details_percentage;
    bool m_min_details_percentage_isSet;

    OAIConfigNodePropertyArray* thread_matchers;
    bool m_thread_matchers_isSet;

    OAIConfigNodePropertyInteger* max_greedy_depth;
    bool m_max_greedy_depth_isSet;

    OAIConfigNodePropertyString* greedy_stack_matchers;
    bool m_greedy_stack_matchers_isSet;

    OAIConfigNodePropertyArray* stack_filters;
    bool m_stack_filters_isSet;

    OAIConfigNodePropertyArray* stack_matchers;
    bool m_stack_matchers_isSet;

    OAIConfigNodePropertyArray* stack_categorizers;
    bool m_stack_categorizers_isSet;

    OAIConfigNodePropertyArray* stack_shorteners;
    bool m_stack_shorteners_isSet;

};

}

#endif /* OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_ */
