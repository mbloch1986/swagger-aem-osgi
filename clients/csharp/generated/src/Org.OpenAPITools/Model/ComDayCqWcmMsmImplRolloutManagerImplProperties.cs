/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqWcmMsmImplRolloutManagerImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmMsmImplRolloutManagerImplProperties :  IEquatable<ComDayCqWcmMsmImplRolloutManagerImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqWcmMsmImplRolloutManagerImplProperties" /> class.
        /// </summary>
        /// <param name="eventFilter">eventFilter.</param>
        /// <param name="rolloutmgrExcludedpropsDefault">rolloutmgrExcludedpropsDefault.</param>
        /// <param name="rolloutmgrExcludedparagraphpropsDefault">rolloutmgrExcludedparagraphpropsDefault.</param>
        /// <param name="rolloutmgrExcludednodetypesDefault">rolloutmgrExcludednodetypesDefault.</param>
        /// <param name="rolloutmgrThreadpoolMaxsize">rolloutmgrThreadpoolMaxsize.</param>
        /// <param name="rolloutmgrThreadpoolMaxshutdowntime">rolloutmgrThreadpoolMaxshutdowntime.</param>
        /// <param name="rolloutmgrThreadpoolPriority">rolloutmgrThreadpoolPriority.</param>
        /// <param name="rolloutmgrCommitSize">rolloutmgrCommitSize.</param>
        /// <param name="rolloutmgrConflicthandlingEnabled">rolloutmgrConflicthandlingEnabled.</param>
        public ComDayCqWcmMsmImplRolloutManagerImplProperties(ConfigNodePropertyString eventFilter = default(ConfigNodePropertyString), ConfigNodePropertyArray rolloutmgrExcludedpropsDefault = default(ConfigNodePropertyArray), ConfigNodePropertyArray rolloutmgrExcludedparagraphpropsDefault = default(ConfigNodePropertyArray), ConfigNodePropertyArray rolloutmgrExcludednodetypesDefault = default(ConfigNodePropertyArray), ConfigNodePropertyInteger rolloutmgrThreadpoolMaxsize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger rolloutmgrThreadpoolMaxshutdowntime = default(ConfigNodePropertyInteger), ConfigNodePropertyDropDown rolloutmgrThreadpoolPriority = default(ConfigNodePropertyDropDown), ConfigNodePropertyInteger rolloutmgrCommitSize = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean rolloutmgrConflicthandlingEnabled = default(ConfigNodePropertyBoolean))
        {
            this.EventFilter = eventFilter;
            this.RolloutmgrExcludedpropsDefault = rolloutmgrExcludedpropsDefault;
            this.RolloutmgrExcludedparagraphpropsDefault = rolloutmgrExcludedparagraphpropsDefault;
            this.RolloutmgrExcludednodetypesDefault = rolloutmgrExcludednodetypesDefault;
            this.RolloutmgrThreadpoolMaxsize = rolloutmgrThreadpoolMaxsize;
            this.RolloutmgrThreadpoolMaxshutdowntime = rolloutmgrThreadpoolMaxshutdowntime;
            this.RolloutmgrThreadpoolPriority = rolloutmgrThreadpoolPriority;
            this.RolloutmgrCommitSize = rolloutmgrCommitSize;
            this.RolloutmgrConflicthandlingEnabled = rolloutmgrConflicthandlingEnabled;
        }
        
        /// <summary>
        /// Gets or Sets EventFilter
        /// </summary>
        [DataMember(Name="event.filter", EmitDefaultValue=false)]
        public ConfigNodePropertyString EventFilter { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrExcludedpropsDefault
        /// </summary>
        [DataMember(Name="rolloutmgr.excludedprops.default", EmitDefaultValue=false)]
        public ConfigNodePropertyArray RolloutmgrExcludedpropsDefault { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrExcludedparagraphpropsDefault
        /// </summary>
        [DataMember(Name="rolloutmgr.excludedparagraphprops.default", EmitDefaultValue=false)]
        public ConfigNodePropertyArray RolloutmgrExcludedparagraphpropsDefault { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrExcludednodetypesDefault
        /// </summary>
        [DataMember(Name="rolloutmgr.excludednodetypes.default", EmitDefaultValue=false)]
        public ConfigNodePropertyArray RolloutmgrExcludednodetypesDefault { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrThreadpoolMaxsize
        /// </summary>
        [DataMember(Name="rolloutmgr.threadpool.maxsize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RolloutmgrThreadpoolMaxsize { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrThreadpoolMaxshutdowntime
        /// </summary>
        [DataMember(Name="rolloutmgr.threadpool.maxshutdowntime", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RolloutmgrThreadpoolMaxshutdowntime { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrThreadpoolPriority
        /// </summary>
        [DataMember(Name="rolloutmgr.threadpool.priority", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown RolloutmgrThreadpoolPriority { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrCommitSize
        /// </summary>
        [DataMember(Name="rolloutmgr.commit.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RolloutmgrCommitSize { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrConflicthandlingEnabled
        /// </summary>
        [DataMember(Name="rolloutmgr.conflicthandling.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean RolloutmgrConflicthandlingEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmMsmImplRolloutManagerImplProperties {\n");
            sb.Append("  EventFilter: ").Append(EventFilter).Append("\n");
            sb.Append("  RolloutmgrExcludedpropsDefault: ").Append(RolloutmgrExcludedpropsDefault).Append("\n");
            sb.Append("  RolloutmgrExcludedparagraphpropsDefault: ").Append(RolloutmgrExcludedparagraphpropsDefault).Append("\n");
            sb.Append("  RolloutmgrExcludednodetypesDefault: ").Append(RolloutmgrExcludednodetypesDefault).Append("\n");
            sb.Append("  RolloutmgrThreadpoolMaxsize: ").Append(RolloutmgrThreadpoolMaxsize).Append("\n");
            sb.Append("  RolloutmgrThreadpoolMaxshutdowntime: ").Append(RolloutmgrThreadpoolMaxshutdowntime).Append("\n");
            sb.Append("  RolloutmgrThreadpoolPriority: ").Append(RolloutmgrThreadpoolPriority).Append("\n");
            sb.Append("  RolloutmgrCommitSize: ").Append(RolloutmgrCommitSize).Append("\n");
            sb.Append("  RolloutmgrConflicthandlingEnabled: ").Append(RolloutmgrConflicthandlingEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqWcmMsmImplRolloutManagerImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmMsmImplRolloutManagerImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqWcmMsmImplRolloutManagerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmMsmImplRolloutManagerImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventFilter == input.EventFilter ||
                    (this.EventFilter != null &&
                    this.EventFilter.Equals(input.EventFilter))
                ) && 
                (
                    this.RolloutmgrExcludedpropsDefault == input.RolloutmgrExcludedpropsDefault ||
                    (this.RolloutmgrExcludedpropsDefault != null &&
                    this.RolloutmgrExcludedpropsDefault.Equals(input.RolloutmgrExcludedpropsDefault))
                ) && 
                (
                    this.RolloutmgrExcludedparagraphpropsDefault == input.RolloutmgrExcludedparagraphpropsDefault ||
                    (this.RolloutmgrExcludedparagraphpropsDefault != null &&
                    this.RolloutmgrExcludedparagraphpropsDefault.Equals(input.RolloutmgrExcludedparagraphpropsDefault))
                ) && 
                (
                    this.RolloutmgrExcludednodetypesDefault == input.RolloutmgrExcludednodetypesDefault ||
                    (this.RolloutmgrExcludednodetypesDefault != null &&
                    this.RolloutmgrExcludednodetypesDefault.Equals(input.RolloutmgrExcludednodetypesDefault))
                ) && 
                (
                    this.RolloutmgrThreadpoolMaxsize == input.RolloutmgrThreadpoolMaxsize ||
                    (this.RolloutmgrThreadpoolMaxsize != null &&
                    this.RolloutmgrThreadpoolMaxsize.Equals(input.RolloutmgrThreadpoolMaxsize))
                ) && 
                (
                    this.RolloutmgrThreadpoolMaxshutdowntime == input.RolloutmgrThreadpoolMaxshutdowntime ||
                    (this.RolloutmgrThreadpoolMaxshutdowntime != null &&
                    this.RolloutmgrThreadpoolMaxshutdowntime.Equals(input.RolloutmgrThreadpoolMaxshutdowntime))
                ) && 
                (
                    this.RolloutmgrThreadpoolPriority == input.RolloutmgrThreadpoolPriority ||
                    (this.RolloutmgrThreadpoolPriority != null &&
                    this.RolloutmgrThreadpoolPriority.Equals(input.RolloutmgrThreadpoolPriority))
                ) && 
                (
                    this.RolloutmgrCommitSize == input.RolloutmgrCommitSize ||
                    (this.RolloutmgrCommitSize != null &&
                    this.RolloutmgrCommitSize.Equals(input.RolloutmgrCommitSize))
                ) && 
                (
                    this.RolloutmgrConflicthandlingEnabled == input.RolloutmgrConflicthandlingEnabled ||
                    (this.RolloutmgrConflicthandlingEnabled != null &&
                    this.RolloutmgrConflicthandlingEnabled.Equals(input.RolloutmgrConflicthandlingEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventFilter != null)
                    hashCode = hashCode * 59 + this.EventFilter.GetHashCode();
                if (this.RolloutmgrExcludedpropsDefault != null)
                    hashCode = hashCode * 59 + this.RolloutmgrExcludedpropsDefault.GetHashCode();
                if (this.RolloutmgrExcludedparagraphpropsDefault != null)
                    hashCode = hashCode * 59 + this.RolloutmgrExcludedparagraphpropsDefault.GetHashCode();
                if (this.RolloutmgrExcludednodetypesDefault != null)
                    hashCode = hashCode * 59 + this.RolloutmgrExcludednodetypesDefault.GetHashCode();
                if (this.RolloutmgrThreadpoolMaxsize != null)
                    hashCode = hashCode * 59 + this.RolloutmgrThreadpoolMaxsize.GetHashCode();
                if (this.RolloutmgrThreadpoolMaxshutdowntime != null)
                    hashCode = hashCode * 59 + this.RolloutmgrThreadpoolMaxshutdowntime.GetHashCode();
                if (this.RolloutmgrThreadpoolPriority != null)
                    hashCode = hashCode * 59 + this.RolloutmgrThreadpoolPriority.GetHashCode();
                if (this.RolloutmgrCommitSize != null)
                    hashCode = hashCode * 59 + this.RolloutmgrCommitSize.GetHashCode();
                if (this.RolloutmgrConflicthandlingEnabled != null)
                    hashCode = hashCode * 59 + this.RolloutmgrConflicthandlingEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
