/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.h
 *
 * 
 */

#ifndef OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties_H_
#define OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties: public OAIObject {
public:
    OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties();
    OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties(QString json);
    ~OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getSolrZkTimeout();
    void setSolrZkTimeout(OAIConfigNodePropertyString* solr_zk_timeout);

    OAIConfigNodePropertyString* getSolrCommit();
    void setSolrCommit(OAIConfigNodePropertyString* solr_commit);

    OAIConfigNodePropertyBoolean* getCacheOn();
    void setCacheOn(OAIConfigNodePropertyBoolean* cache_on);

    OAIConfigNodePropertyInteger* getConcurrencyLevel();
    void setConcurrencyLevel(OAIConfigNodePropertyInteger* concurrency_level);

    OAIConfigNodePropertyInteger* getCacheStartSize();
    void setCacheStartSize(OAIConfigNodePropertyInteger* cache_start_size);

    OAIConfigNodePropertyInteger* getCacheTtl();
    void setCacheTtl(OAIConfigNodePropertyInteger* cache_ttl);

    OAIConfigNodePropertyInteger* getCacheSize();
    void setCacheSize(OAIConfigNodePropertyInteger* cache_size);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* solr_zk_timeout;
    bool m_solr_zk_timeout_isSet;

    OAIConfigNodePropertyString* solr_commit;
    bool m_solr_commit_isSet;

    OAIConfigNodePropertyBoolean* cache_on;
    bool m_cache_on_isSet;

    OAIConfigNodePropertyInteger* concurrency_level;
    bool m_concurrency_level_isSet;

    OAIConfigNodePropertyInteger* cache_start_size;
    bool m_cache_start_size_isSet;

    OAIConfigNodePropertyInteger* cache_ttl;
    bool m_cache_ttl_isSet;

    OAIConfigNodePropertyInteger* cache_size;
    bool m_cache_size_isSet;

};

}

#endif /* OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties_H_ */
