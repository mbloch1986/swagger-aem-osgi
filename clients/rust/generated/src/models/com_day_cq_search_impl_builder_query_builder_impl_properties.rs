/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqSearchImplBuilderQueryBuilderImplProperties {
  #[serde(rename = "excerpt.properties")]
  excerpt_properties: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cache.max.entries")]
  cache_max_entries: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cache.entry.lifetime")]
  cache_entry_lifetime: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "xpath.union")]
  xpath_union: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqSearchImplBuilderQueryBuilderImplProperties {
  pub fn new() -> ComDayCqSearchImplBuilderQueryBuilderImplProperties {
    ComDayCqSearchImplBuilderQueryBuilderImplProperties {
      excerpt_properties: None,
      cache_max_entries: None,
      cache_entry_lifetime: None,
      xpath_union: None
    }
  }

  pub fn set_excerpt_properties(&mut self, excerpt_properties: ::models::ConfigNodePropertyArray) {
    self.excerpt_properties = Some(excerpt_properties);
  }

  pub fn with_excerpt_properties(mut self, excerpt_properties: ::models::ConfigNodePropertyArray) -> ComDayCqSearchImplBuilderQueryBuilderImplProperties {
    self.excerpt_properties = Some(excerpt_properties);
    self
  }

  pub fn excerpt_properties(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.excerpt_properties.as_ref()
  }

  pub fn reset_excerpt_properties(&mut self) {
    self.excerpt_properties = None;
  }

  pub fn set_cache_max_entries(&mut self, cache_max_entries: ::models::ConfigNodePropertyInteger) {
    self.cache_max_entries = Some(cache_max_entries);
  }

  pub fn with_cache_max_entries(mut self, cache_max_entries: ::models::ConfigNodePropertyInteger) -> ComDayCqSearchImplBuilderQueryBuilderImplProperties {
    self.cache_max_entries = Some(cache_max_entries);
    self
  }

  pub fn cache_max_entries(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cache_max_entries.as_ref()
  }

  pub fn reset_cache_max_entries(&mut self) {
    self.cache_max_entries = None;
  }

  pub fn set_cache_entry_lifetime(&mut self, cache_entry_lifetime: ::models::ConfigNodePropertyInteger) {
    self.cache_entry_lifetime = Some(cache_entry_lifetime);
  }

  pub fn with_cache_entry_lifetime(mut self, cache_entry_lifetime: ::models::ConfigNodePropertyInteger) -> ComDayCqSearchImplBuilderQueryBuilderImplProperties {
    self.cache_entry_lifetime = Some(cache_entry_lifetime);
    self
  }

  pub fn cache_entry_lifetime(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cache_entry_lifetime.as_ref()
  }

  pub fn reset_cache_entry_lifetime(&mut self) {
    self.cache_entry_lifetime = None;
  }

  pub fn set_xpath_union(&mut self, xpath_union: ::models::ConfigNodePropertyBoolean) {
    self.xpath_union = Some(xpath_union);
  }

  pub fn with_xpath_union(mut self, xpath_union: ::models::ConfigNodePropertyBoolean) -> ComDayCqSearchImplBuilderQueryBuilderImplProperties {
    self.xpath_union = Some(xpath_union);
    self
  }

  pub fn xpath_union(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.xpath_union.as_ref()
  }

  pub fn reset_xpath_union(&mut self) {
    self.xpath_union = None;
  }

}



