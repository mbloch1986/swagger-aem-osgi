/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyArray;
import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyDropDown;
import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties {
  
  @SerializedName("name")
  private ConfigNodePropertyString name = null;
  @SerializedName("title")
  private ConfigNodePropertyString title = null;
  @SerializedName("details")
  private ConfigNodePropertyString details = null;
  @SerializedName("enabled")
  private ConfigNodePropertyBoolean enabled = null;
  @SerializedName("serviceName")
  private ConfigNodePropertyString serviceName = null;
  @SerializedName("log.level")
  private ConfigNodePropertyDropDown logLevel = null;
  @SerializedName("allowed.roots")
  private ConfigNodePropertyArray allowedRoots = null;
  @SerializedName("queue.processing.enabled")
  private ConfigNodePropertyBoolean queueProcessingEnabled = null;
  @SerializedName("packageImporter.endpoints")
  private ConfigNodePropertyArray packageImporterEndpoints = null;
  @SerializedName("passiveQueues")
  private ConfigNodePropertyArray passiveQueues = null;
  @SerializedName("priorityQueues")
  private ConfigNodePropertyArray priorityQueues = null;
  @SerializedName("retry.strategy")
  private ConfigNodePropertyDropDown retryStrategy = null;
  @SerializedName("retry.attempts")
  private ConfigNodePropertyInteger retryAttempts = null;
  @SerializedName("requestAuthorizationStrategy.target")
  private ConfigNodePropertyString requestAuthorizationStrategyTarget = null;
  @SerializedName("transportSecretProvider.target")
  private ConfigNodePropertyString transportSecretProviderTarget = null;
  @SerializedName("packageBuilder.target")
  private ConfigNodePropertyString packageBuilderTarget = null;
  @SerializedName("triggers.target")
  private ConfigNodePropertyString triggersTarget = null;
  @SerializedName("queue.provider")
  private ConfigNodePropertyDropDown queueProvider = null;
  @SerializedName("async.delivery")
  private ConfigNodePropertyBoolean asyncDelivery = null;
  @SerializedName("http.conn.timeout")
  private ConfigNodePropertyInteger httpConnTimeout = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getName() {
    return name;
  }
  public void setName(ConfigNodePropertyString name) {
    this.name = name;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getTitle() {
    return title;
  }
  public void setTitle(ConfigNodePropertyString title) {
    this.title = title;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getDetails() {
    return details;
  }
  public void setDetails(ConfigNodePropertyString details) {
    this.details = details;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getEnabled() {
    return enabled;
  }
  public void setEnabled(ConfigNodePropertyBoolean enabled) {
    this.enabled = enabled;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getServiceName() {
    return serviceName;
  }
  public void setServiceName(ConfigNodePropertyString serviceName) {
    this.serviceName = serviceName;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyDropDown getLogLevel() {
    return logLevel;
  }
  public void setLogLevel(ConfigNodePropertyDropDown logLevel) {
    this.logLevel = logLevel;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getAllowedRoots() {
    return allowedRoots;
  }
  public void setAllowedRoots(ConfigNodePropertyArray allowedRoots) {
    this.allowedRoots = allowedRoots;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getQueueProcessingEnabled() {
    return queueProcessingEnabled;
  }
  public void setQueueProcessingEnabled(ConfigNodePropertyBoolean queueProcessingEnabled) {
    this.queueProcessingEnabled = queueProcessingEnabled;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getPackageImporterEndpoints() {
    return packageImporterEndpoints;
  }
  public void setPackageImporterEndpoints(ConfigNodePropertyArray packageImporterEndpoints) {
    this.packageImporterEndpoints = packageImporterEndpoints;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getPassiveQueues() {
    return passiveQueues;
  }
  public void setPassiveQueues(ConfigNodePropertyArray passiveQueues) {
    this.passiveQueues = passiveQueues;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getPriorityQueues() {
    return priorityQueues;
  }
  public void setPriorityQueues(ConfigNodePropertyArray priorityQueues) {
    this.priorityQueues = priorityQueues;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyDropDown getRetryStrategy() {
    return retryStrategy;
  }
  public void setRetryStrategy(ConfigNodePropertyDropDown retryStrategy) {
    this.retryStrategy = retryStrategy;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getRetryAttempts() {
    return retryAttempts;
  }
  public void setRetryAttempts(ConfigNodePropertyInteger retryAttempts) {
    this.retryAttempts = retryAttempts;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getRequestAuthorizationStrategyTarget() {
    return requestAuthorizationStrategyTarget;
  }
  public void setRequestAuthorizationStrategyTarget(ConfigNodePropertyString requestAuthorizationStrategyTarget) {
    this.requestAuthorizationStrategyTarget = requestAuthorizationStrategyTarget;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getTransportSecretProviderTarget() {
    return transportSecretProviderTarget;
  }
  public void setTransportSecretProviderTarget(ConfigNodePropertyString transportSecretProviderTarget) {
    this.transportSecretProviderTarget = transportSecretProviderTarget;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getPackageBuilderTarget() {
    return packageBuilderTarget;
  }
  public void setPackageBuilderTarget(ConfigNodePropertyString packageBuilderTarget) {
    this.packageBuilderTarget = packageBuilderTarget;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getTriggersTarget() {
    return triggersTarget;
  }
  public void setTriggersTarget(ConfigNodePropertyString triggersTarget) {
    this.triggersTarget = triggersTarget;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyDropDown getQueueProvider() {
    return queueProvider;
  }
  public void setQueueProvider(ConfigNodePropertyDropDown queueProvider) {
    this.queueProvider = queueProvider;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getAsyncDelivery() {
    return asyncDelivery;
  }
  public void setAsyncDelivery(ConfigNodePropertyBoolean asyncDelivery) {
    this.asyncDelivery = asyncDelivery;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getHttpConnTimeout() {
    return httpConnTimeout;
  }
  public void setHttpConnTimeout(ConfigNodePropertyInteger httpConnTimeout) {
    this.httpConnTimeout = httpConnTimeout;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties = (OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties) o;
    return (this.name == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.name == null : this.name.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.name)) &&
        (this.title == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.title == null : this.title.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.title)) &&
        (this.details == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.details == null : this.details.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.details)) &&
        (this.enabled == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.enabled == null : this.enabled.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.enabled)) &&
        (this.serviceName == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.serviceName == null : this.serviceName.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.serviceName)) &&
        (this.logLevel == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.logLevel == null : this.logLevel.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.logLevel)) &&
        (this.allowedRoots == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.allowedRoots == null : this.allowedRoots.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.allowedRoots)) &&
        (this.queueProcessingEnabled == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.queueProcessingEnabled == null : this.queueProcessingEnabled.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.queueProcessingEnabled)) &&
        (this.packageImporterEndpoints == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.packageImporterEndpoints == null : this.packageImporterEndpoints.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.packageImporterEndpoints)) &&
        (this.passiveQueues == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.passiveQueues == null : this.passiveQueues.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.passiveQueues)) &&
        (this.priorityQueues == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.priorityQueues == null : this.priorityQueues.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.priorityQueues)) &&
        (this.retryStrategy == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.retryStrategy == null : this.retryStrategy.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.retryStrategy)) &&
        (this.retryAttempts == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.retryAttempts == null : this.retryAttempts.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.retryAttempts)) &&
        (this.requestAuthorizationStrategyTarget == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.requestAuthorizationStrategyTarget == null : this.requestAuthorizationStrategyTarget.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.requestAuthorizationStrategyTarget)) &&
        (this.transportSecretProviderTarget == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.transportSecretProviderTarget == null : this.transportSecretProviderTarget.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.transportSecretProviderTarget)) &&
        (this.packageBuilderTarget == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.packageBuilderTarget == null : this.packageBuilderTarget.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.packageBuilderTarget)) &&
        (this.triggersTarget == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.triggersTarget == null : this.triggersTarget.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.triggersTarget)) &&
        (this.queueProvider == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.queueProvider == null : this.queueProvider.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.queueProvider)) &&
        (this.asyncDelivery == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.asyncDelivery == null : this.asyncDelivery.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.asyncDelivery)) &&
        (this.httpConnTimeout == null ? orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.httpConnTimeout == null : this.httpConnTimeout.equals(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.httpConnTimeout));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.title == null ? 0: this.title.hashCode());
    result = 31 * result + (this.details == null ? 0: this.details.hashCode());
    result = 31 * result + (this.enabled == null ? 0: this.enabled.hashCode());
    result = 31 * result + (this.serviceName == null ? 0: this.serviceName.hashCode());
    result = 31 * result + (this.logLevel == null ? 0: this.logLevel.hashCode());
    result = 31 * result + (this.allowedRoots == null ? 0: this.allowedRoots.hashCode());
    result = 31 * result + (this.queueProcessingEnabled == null ? 0: this.queueProcessingEnabled.hashCode());
    result = 31 * result + (this.packageImporterEndpoints == null ? 0: this.packageImporterEndpoints.hashCode());
    result = 31 * result + (this.passiveQueues == null ? 0: this.passiveQueues.hashCode());
    result = 31 * result + (this.priorityQueues == null ? 0: this.priorityQueues.hashCode());
    result = 31 * result + (this.retryStrategy == null ? 0: this.retryStrategy.hashCode());
    result = 31 * result + (this.retryAttempts == null ? 0: this.retryAttempts.hashCode());
    result = 31 * result + (this.requestAuthorizationStrategyTarget == null ? 0: this.requestAuthorizationStrategyTarget.hashCode());
    result = 31 * result + (this.transportSecretProviderTarget == null ? 0: this.transportSecretProviderTarget.hashCode());
    result = 31 * result + (this.packageBuilderTarget == null ? 0: this.packageBuilderTarget.hashCode());
    result = 31 * result + (this.triggersTarget == null ? 0: this.triggersTarget.hashCode());
    result = 31 * result + (this.queueProvider == null ? 0: this.queueProvider.hashCode());
    result = 31 * result + (this.asyncDelivery == null ? 0: this.asyncDelivery.hashCode());
    result = 31 * result + (this.httpConnTimeout == null ? 0: this.httpConnTimeout.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties {\n");
    
    sb.append("  name: ").append(name).append("\n");
    sb.append("  title: ").append(title).append("\n");
    sb.append("  details: ").append(details).append("\n");
    sb.append("  enabled: ").append(enabled).append("\n");
    sb.append("  serviceName: ").append(serviceName).append("\n");
    sb.append("  logLevel: ").append(logLevel).append("\n");
    sb.append("  allowedRoots: ").append(allowedRoots).append("\n");
    sb.append("  queueProcessingEnabled: ").append(queueProcessingEnabled).append("\n");
    sb.append("  packageImporterEndpoints: ").append(packageImporterEndpoints).append("\n");
    sb.append("  passiveQueues: ").append(passiveQueues).append("\n");
    sb.append("  priorityQueues: ").append(priorityQueues).append("\n");
    sb.append("  retryStrategy: ").append(retryStrategy).append("\n");
    sb.append("  retryAttempts: ").append(retryAttempts).append("\n");
    sb.append("  requestAuthorizationStrategyTarget: ").append(requestAuthorizationStrategyTarget).append("\n");
    sb.append("  transportSecretProviderTarget: ").append(transportSecretProviderTarget).append("\n");
    sb.append("  packageBuilderTarget: ").append(packageBuilderTarget).append("\n");
    sb.append("  triggersTarget: ").append(triggersTarget).append("\n");
    sb.append("  queueProvider: ").append(queueProvider).append("\n");
    sb.append("  asyncDelivery: ").append(asyncDelivery).append("\n");
    sb.append("  httpConnTimeout: ").append(httpConnTimeout).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
