/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingSecurityImplReferrerFilterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingSecurityImplReferrerFilterProperties::OrgApacheSlingSecurityImplReferrerFilterProperties()
{
    m_Allow_emptyIsSet = false;
    m_Allow_hostsIsSet = false;
    m_Allow_hosts_regexpIsSet = false;
    m_Filter_methodsIsSet = false;
    m_Exclude_agents_regexpIsSet = false;
    
}

OrgApacheSlingSecurityImplReferrerFilterProperties::~OrgApacheSlingSecurityImplReferrerFilterProperties()
{
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingSecurityImplReferrerFilterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Allow_emptyIsSet)
    {
        val["allow.empty"] = ModelBase::toJson(m_Allow_empty);
    }
    if(m_Allow_hostsIsSet)
    {
        val["allow.hosts"] = ModelBase::toJson(m_Allow_hosts);
    }
    if(m_Allow_hosts_regexpIsSet)
    {
        val["allow.hosts.regexp"] = ModelBase::toJson(m_Allow_hosts_regexp);
    }
    if(m_Filter_methodsIsSet)
    {
        val["filter.methods"] = ModelBase::toJson(m_Filter_methods);
    }
    if(m_Exclude_agents_regexpIsSet)
    {
        val["exclude.agents.regexp"] = ModelBase::toJson(m_Exclude_agents_regexp);
    }
    

    return val;
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("allow.empty") != val.end())
    {
        if(!val["allow.empty"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["allow.empty"]);
            setAllowEmpty( newItem );
        }
        
    }
    if(val.find("allow.hosts") != val.end())
    {
        if(!val["allow.hosts"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["allow.hosts"]);
            setAllowHosts( newItem );
        }
        
    }
    if(val.find("allow.hosts.regexp") != val.end())
    {
        if(!val["allow.hosts.regexp"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["allow.hosts.regexp"]);
            setAllowHostsRegexp( newItem );
        }
        
    }
    if(val.find("filter.methods") != val.end())
    {
        if(!val["filter.methods"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["filter.methods"]);
            setFilterMethods( newItem );
        }
        
    }
    if(val.find("exclude.agents.regexp") != val.end())
    {
        if(!val["exclude.agents.regexp"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["exclude.agents.regexp"]);
            setExcludeAgentsRegexp( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean OrgApacheSlingSecurityImplReferrerFilterProperties::getAllowEmpty() const
{
    return m_Allow_empty;
}
void OrgApacheSlingSecurityImplReferrerFilterProperties::setAllowEmpty(ConfigNodePropertyBoolean const& value)
{
    m_Allow_empty = value;
    m_Allow_emptyIsSet = true;
}
bool OrgApacheSlingSecurityImplReferrerFilterProperties::allowEmptyIsSet() const
{
    return m_Allow_emptyIsSet;
}
void OrgApacheSlingSecurityImplReferrerFilterProperties::unsetAllow_empty()
{
    m_Allow_emptyIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingSecurityImplReferrerFilterProperties::getAllowHosts() const
{
    return m_Allow_hosts;
}
void OrgApacheSlingSecurityImplReferrerFilterProperties::setAllowHosts(ConfigNodePropertyArray const& value)
{
    m_Allow_hosts = value;
    m_Allow_hostsIsSet = true;
}
bool OrgApacheSlingSecurityImplReferrerFilterProperties::allowHostsIsSet() const
{
    return m_Allow_hostsIsSet;
}
void OrgApacheSlingSecurityImplReferrerFilterProperties::unsetAllow_hosts()
{
    m_Allow_hostsIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingSecurityImplReferrerFilterProperties::getAllowHostsRegexp() const
{
    return m_Allow_hosts_regexp;
}
void OrgApacheSlingSecurityImplReferrerFilterProperties::setAllowHostsRegexp(ConfigNodePropertyArray const& value)
{
    m_Allow_hosts_regexp = value;
    m_Allow_hosts_regexpIsSet = true;
}
bool OrgApacheSlingSecurityImplReferrerFilterProperties::allowHostsRegexpIsSet() const
{
    return m_Allow_hosts_regexpIsSet;
}
void OrgApacheSlingSecurityImplReferrerFilterProperties::unsetAllow_hosts_regexp()
{
    m_Allow_hosts_regexpIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingSecurityImplReferrerFilterProperties::getFilterMethods() const
{
    return m_Filter_methods;
}
void OrgApacheSlingSecurityImplReferrerFilterProperties::setFilterMethods(ConfigNodePropertyArray const& value)
{
    m_Filter_methods = value;
    m_Filter_methodsIsSet = true;
}
bool OrgApacheSlingSecurityImplReferrerFilterProperties::filterMethodsIsSet() const
{
    return m_Filter_methodsIsSet;
}
void OrgApacheSlingSecurityImplReferrerFilterProperties::unsetFilter_methods()
{
    m_Filter_methodsIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingSecurityImplReferrerFilterProperties::getExcludeAgentsRegexp() const
{
    return m_Exclude_agents_regexp;
}
void OrgApacheSlingSecurityImplReferrerFilterProperties::setExcludeAgentsRegexp(ConfigNodePropertyArray const& value)
{
    m_Exclude_agents_regexp = value;
    m_Exclude_agents_regexpIsSet = true;
}
bool OrgApacheSlingSecurityImplReferrerFilterProperties::excludeAgentsRegexpIsSet() const
{
    return m_Exclude_agents_regexpIsSet;
}
void OrgApacheSlingSecurityImplReferrerFilterProperties::unsetExclude_agents_regexp()
{
    m_Exclude_agents_regexpIsSet = false;
}

}
}
}
}

