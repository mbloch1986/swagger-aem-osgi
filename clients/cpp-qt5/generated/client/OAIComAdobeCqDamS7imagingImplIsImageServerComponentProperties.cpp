/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties() {
    init();
}

OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::~OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties() {
    this->cleanup();
}

void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::init() {
    tcp_port = new OAIConfigNodePropertyString();
    m_tcp_port_isSet = false;
    allow_remote_access = new OAIConfigNodePropertyBoolean();
    m_allow_remote_access_isSet = false;
    max_render_rgn_pixels = new OAIConfigNodePropertyString();
    m_max_render_rgn_pixels_isSet = false;
    max_message_size = new OAIConfigNodePropertyString();
    m_max_message_size_isSet = false;
    random_access_url_timeout = new OAIConfigNodePropertyInteger();
    m_random_access_url_timeout_isSet = false;
    worker_threads = new OAIConfigNodePropertyInteger();
    m_worker_threads_isSet = false;
}

void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::cleanup() {
    if(tcp_port != nullptr) { 
        delete tcp_port;
    }
    if(allow_remote_access != nullptr) { 
        delete allow_remote_access;
    }
    if(max_render_rgn_pixels != nullptr) { 
        delete max_render_rgn_pixels;
    }
    if(max_message_size != nullptr) { 
        delete max_message_size;
    }
    if(random_access_url_timeout != nullptr) { 
        delete random_access_url_timeout;
    }
    if(worker_threads != nullptr) { 
        delete worker_threads;
    }
}

OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties*
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&tcp_port, pJson["TcpPort"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&allow_remote_access, pJson["AllowRemoteAccess"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&max_render_rgn_pixels, pJson["MaxRenderRgnPixels"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&max_message_size, pJson["MaxMessageSize"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&random_access_url_timeout, pJson["RandomAccessUrlTimeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&worker_threads, pJson["WorkerThreads"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::asJsonObject() {
    QJsonObject obj;
    if((tcp_port != nullptr) && (tcp_port->isSet())){
        toJsonValue(QString("TcpPort"), tcp_port, obj, QString("OAIConfigNodePropertyString"));
    }
    if((allow_remote_access != nullptr) && (allow_remote_access->isSet())){
        toJsonValue(QString("AllowRemoteAccess"), allow_remote_access, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((max_render_rgn_pixels != nullptr) && (max_render_rgn_pixels->isSet())){
        toJsonValue(QString("MaxRenderRgnPixels"), max_render_rgn_pixels, obj, QString("OAIConfigNodePropertyString"));
    }
    if((max_message_size != nullptr) && (max_message_size->isSet())){
        toJsonValue(QString("MaxMessageSize"), max_message_size, obj, QString("OAIConfigNodePropertyString"));
    }
    if((random_access_url_timeout != nullptr) && (random_access_url_timeout->isSet())){
        toJsonValue(QString("RandomAccessUrlTimeout"), random_access_url_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((worker_threads != nullptr) && (worker_threads->isSet())){
        toJsonValue(QString("WorkerThreads"), worker_threads, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getTcpPort() {
    return tcp_port;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setTcpPort(OAIConfigNodePropertyString* tcp_port) {
    this->tcp_port = tcp_port;
    this->m_tcp_port_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getAllowRemoteAccess() {
    return allow_remote_access;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setAllowRemoteAccess(OAIConfigNodePropertyBoolean* allow_remote_access) {
    this->allow_remote_access = allow_remote_access;
    this->m_allow_remote_access_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getMaxRenderRgnPixels() {
    return max_render_rgn_pixels;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setMaxRenderRgnPixels(OAIConfigNodePropertyString* max_render_rgn_pixels) {
    this->max_render_rgn_pixels = max_render_rgn_pixels;
    this->m_max_render_rgn_pixels_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getMaxMessageSize() {
    return max_message_size;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setMaxMessageSize(OAIConfigNodePropertyString* max_message_size) {
    this->max_message_size = max_message_size;
    this->m_max_message_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getRandomAccessUrlTimeout() {
    return random_access_url_timeout;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setRandomAccessUrlTimeout(OAIConfigNodePropertyInteger* random_access_url_timeout) {
    this->random_access_url_timeout = random_access_url_timeout;
    this->m_random_access_url_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getWorkerThreads() {
    return worker_threads;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setWorkerThreads(OAIConfigNodePropertyInteger* worker_threads) {
    this->worker_threads = worker_threads;
    this->m_worker_threads_isSet = true;
}


bool
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(tcp_port != nullptr && tcp_port->isSet()){ isObjectUpdated = true; break;}
        if(allow_remote_access != nullptr && allow_remote_access->isSet()){ isObjectUpdated = true; break;}
        if(max_render_rgn_pixels != nullptr && max_render_rgn_pixels->isSet()){ isObjectUpdated = true; break;}
        if(max_message_size != nullptr && max_message_size->isSet()){ isObjectUpdated = true; break;}
        if(random_access_url_timeout != nullptr && random_access_url_timeout->isSet()){ isObjectUpdated = true; break;}
        if(worker_threads != nullptr && worker_threads->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

