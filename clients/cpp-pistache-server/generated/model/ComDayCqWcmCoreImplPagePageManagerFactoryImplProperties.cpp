/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties()
{
    m_IllegalCharMappingIsSet = false;
    m_PageSubTreeActivationCheckIsSet = false;
    
}

ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::~ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties()
{
}

void ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IllegalCharMappingIsSet)
    {
        val["illegalCharMapping"] = ModelBase::toJson(m_IllegalCharMapping);
    }
    if(m_PageSubTreeActivationCheckIsSet)
    {
        val["pageSubTreeActivationCheck"] = ModelBase::toJson(m_PageSubTreeActivationCheck);
    }
    

    return val;
}

void ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("illegalCharMapping") != val.end())
    {
        if(!val["illegalCharMapping"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["illegalCharMapping"]);
            setIllegalCharMapping( newItem );
        }
        
    }
    if(val.find("pageSubTreeActivationCheck") != val.end())
    {
        if(!val["pageSubTreeActivationCheck"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["pageSubTreeActivationCheck"]);
            setPageSubTreeActivationCheck( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::getIllegalCharMapping() const
{
    return m_IllegalCharMapping;
}
void ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::setIllegalCharMapping(ConfigNodePropertyString const& value)
{
    m_IllegalCharMapping = value;
    m_IllegalCharMappingIsSet = true;
}
bool ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::illegalCharMappingIsSet() const
{
    return m_IllegalCharMappingIsSet;
}
void ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::unsetIllegalCharMapping()
{
    m_IllegalCharMappingIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::getPageSubTreeActivationCheck() const
{
    return m_PageSubTreeActivationCheck;
}
void ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::setPageSubTreeActivationCheck(ConfigNodePropertyBoolean const& value)
{
    m_PageSubTreeActivationCheck = value;
    m_PageSubTreeActivationCheckIsSet = true;
}
bool ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::pageSubTreeActivationCheckIsSet() const
{
    return m_PageSubTreeActivationCheckIsSet;
}
void ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::unsetPageSubTreeActivationCheck()
{
    m_PageSubTreeActivationCheckIsSet = false;
}

}
}
}
}

