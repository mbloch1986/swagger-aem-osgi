/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteCsrfImplCSRFFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteCsrfImplCSRFFilterProperties::OAIComAdobeGraniteCsrfImplCSRFFilterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteCsrfImplCSRFFilterProperties::OAIComAdobeGraniteCsrfImplCSRFFilterProperties() {
    init();
}

OAIComAdobeGraniteCsrfImplCSRFFilterProperties::~OAIComAdobeGraniteCsrfImplCSRFFilterProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::init() {
    filter_methods = new OAIConfigNodePropertyArray();
    m_filter_methods_isSet = false;
    filter_enable_safe_user_agents = new OAIConfigNodePropertyBoolean();
    m_filter_enable_safe_user_agents_isSet = false;
    filter_safe_user_agents = new OAIConfigNodePropertyArray();
    m_filter_safe_user_agents_isSet = false;
    filter_excluded_paths = new OAIConfigNodePropertyArray();
    m_filter_excluded_paths_isSet = false;
}

void
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::cleanup() {
    if(filter_methods != nullptr) { 
        delete filter_methods;
    }
    if(filter_enable_safe_user_agents != nullptr) { 
        delete filter_enable_safe_user_agents;
    }
    if(filter_safe_user_agents != nullptr) { 
        delete filter_safe_user_agents;
    }
    if(filter_excluded_paths != nullptr) { 
        delete filter_excluded_paths;
    }
}

OAIComAdobeGraniteCsrfImplCSRFFilterProperties*
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&filter_methods, pJson["filter.methods"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&filter_enable_safe_user_agents, pJson["filter.enable.safe.user.agents"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&filter_safe_user_agents, pJson["filter.safe.user.agents"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&filter_excluded_paths, pJson["filter.excluded.paths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::asJsonObject() {
    QJsonObject obj;
    if((filter_methods != nullptr) && (filter_methods->isSet())){
        toJsonValue(QString("filter.methods"), filter_methods, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((filter_enable_safe_user_agents != nullptr) && (filter_enable_safe_user_agents->isSet())){
        toJsonValue(QString("filter.enable.safe.user.agents"), filter_enable_safe_user_agents, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((filter_safe_user_agents != nullptr) && (filter_safe_user_agents->isSet())){
        toJsonValue(QString("filter.safe.user.agents"), filter_safe_user_agents, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((filter_excluded_paths != nullptr) && (filter_excluded_paths->isSet())){
        toJsonValue(QString("filter.excluded.paths"), filter_excluded_paths, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::getFilterMethods() {
    return filter_methods;
}
void
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::setFilterMethods(OAIConfigNodePropertyArray* filter_methods) {
    this->filter_methods = filter_methods;
    this->m_filter_methods_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::getFilterEnableSafeUserAgents() {
    return filter_enable_safe_user_agents;
}
void
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::setFilterEnableSafeUserAgents(OAIConfigNodePropertyBoolean* filter_enable_safe_user_agents) {
    this->filter_enable_safe_user_agents = filter_enable_safe_user_agents;
    this->m_filter_enable_safe_user_agents_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::getFilterSafeUserAgents() {
    return filter_safe_user_agents;
}
void
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::setFilterSafeUserAgents(OAIConfigNodePropertyArray* filter_safe_user_agents) {
    this->filter_safe_user_agents = filter_safe_user_agents;
    this->m_filter_safe_user_agents_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::getFilterExcludedPaths() {
    return filter_excluded_paths;
}
void
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::setFilterExcludedPaths(OAIConfigNodePropertyArray* filter_excluded_paths) {
    this->filter_excluded_paths = filter_excluded_paths;
    this->m_filter_excluded_paths_isSet = true;
}


bool
OAIComAdobeGraniteCsrfImplCSRFFilterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(filter_methods != nullptr && filter_methods->isSet()){ isObjectUpdated = true; break;}
        if(filter_enable_safe_user_agents != nullptr && filter_enable_safe_user_agents->isSet()){ isObjectUpdated = true; break;}
        if(filter_safe_user_agents != nullptr && filter_safe_user_agents->isSet()){ isObjectUpdated = true; break;}
        if(filter_excluded_paths != nullptr && filter_excluded_paths->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

