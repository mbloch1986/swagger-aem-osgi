/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties() {
    init();
}

OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::~OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::init() {
    total_width = new OAIConfigNodePropertyInteger();
    m_total_width_isSet = false;
    col_width_name = new OAIConfigNodePropertyInteger();
    m_col_width_name_isSet = false;
    col_width_result = new OAIConfigNodePropertyInteger();
    m_col_width_result_isSet = false;
    col_width_timing = new OAIConfigNodePropertyInteger();
    m_col_width_timing_isSet = false;
}

void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::cleanup() {
    if(total_width != nullptr) { 
        delete total_width;
    }
    if(col_width_name != nullptr) { 
        delete col_width_name;
    }
    if(col_width_result != nullptr) { 
        delete col_width_result;
    }
    if(col_width_timing != nullptr) { 
        delete col_width_timing;
    }
}

OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties*
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&total_width, pJson["totalWidth"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&col_width_name, pJson["colWidthName"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&col_width_result, pJson["colWidthResult"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&col_width_timing, pJson["colWidthTiming"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::asJsonObject() {
    QJsonObject obj;
    if((total_width != nullptr) && (total_width->isSet())){
        toJsonValue(QString("totalWidth"), total_width, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((col_width_name != nullptr) && (col_width_name->isSet())){
        toJsonValue(QString("colWidthName"), col_width_name, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((col_width_result != nullptr) && (col_width_result->isSet())){
        toJsonValue(QString("colWidthResult"), col_width_result, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((col_width_timing != nullptr) && (col_width_timing->isSet())){
        toJsonValue(QString("colWidthTiming"), col_width_timing, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getTotalWidth() {
    return total_width;
}
void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setTotalWidth(OAIConfigNodePropertyInteger* total_width) {
    this->total_width = total_width;
    this->m_total_width_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getColWidthName() {
    return col_width_name;
}
void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setColWidthName(OAIConfigNodePropertyInteger* col_width_name) {
    this->col_width_name = col_width_name;
    this->m_col_width_name_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getColWidthResult() {
    return col_width_result;
}
void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setColWidthResult(OAIConfigNodePropertyInteger* col_width_result) {
    this->col_width_result = col_width_result;
    this->m_col_width_result_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getColWidthTiming() {
    return col_width_timing;
}
void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setColWidthTiming(OAIConfigNodePropertyInteger* col_width_timing) {
    this->col_width_timing = col_width_timing;
    this->m_col_width_timing_isSet = true;
}


bool
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(total_width != nullptr && total_width->isSet()){ isObjectUpdated = true; break;}
        if(col_width_name != nullptr && col_width_name->isSet()){ isObjectUpdated = true; break;}
        if(col_width_result != nullptr && col_width_result->isSet()){ isObjectUpdated = true; break;}
        if(col_width_timing != nullptr && col_width_timing->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

