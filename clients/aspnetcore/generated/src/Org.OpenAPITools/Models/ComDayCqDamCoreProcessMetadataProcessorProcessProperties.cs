/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreProcessMetadataProcessorProcessProperties : IEquatable<ComDayCqDamCoreProcessMetadataProcessorProcessProperties>
    { 
        /// <summary>
        /// Gets or Sets ProcessLabel
        /// </summary>
        [DataMember(Name="process.label")]
        public ConfigNodePropertyString ProcessLabel { get; set; }

        /// <summary>
        /// Gets or Sets CqDamEnableSha1
        /// </summary>
        [DataMember(Name="cq.dam.enable.sha1")]
        public ConfigNodePropertyBoolean CqDamEnableSha1 { get; set; }

        /// <summary>
        /// Gets or Sets CqDamMetadataXssprotectedProperties
        /// </summary>
        [DataMember(Name="cq.dam.metadata.xssprotected.properties")]
        public ConfigNodePropertyArray CqDamMetadataXssprotectedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreProcessMetadataProcessorProcessProperties {\n");
            sb.Append("  ProcessLabel: ").Append(ProcessLabel).Append("\n");
            sb.Append("  CqDamEnableSha1: ").Append(CqDamEnableSha1).Append("\n");
            sb.Append("  CqDamMetadataXssprotectedProperties: ").Append(CqDamMetadataXssprotectedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqDamCoreProcessMetadataProcessorProcessProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreProcessMetadataProcessorProcessProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqDamCoreProcessMetadataProcessorProcessProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreProcessMetadataProcessorProcessProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProcessLabel == other.ProcessLabel ||
                    ProcessLabel != null &&
                    ProcessLabel.Equals(other.ProcessLabel)
                ) && 
                (
                    CqDamEnableSha1 == other.CqDamEnableSha1 ||
                    CqDamEnableSha1 != null &&
                    CqDamEnableSha1.Equals(other.CqDamEnableSha1)
                ) && 
                (
                    CqDamMetadataXssprotectedProperties == other.CqDamMetadataXssprotectedProperties ||
                    CqDamMetadataXssprotectedProperties != null &&
                    CqDamMetadataXssprotectedProperties.Equals(other.CqDamMetadataXssprotectedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProcessLabel != null)
                    hashCode = hashCode * 59 + ProcessLabel.GetHashCode();
                    if (CqDamEnableSha1 != null)
                    hashCode = hashCode * 59 + CqDamEnableSha1.GetHashCode();
                    if (CqDamMetadataXssprotectedProperties != null)
                    hashCode = hashCode * 59 + CqDamMetadataXssprotectedProperties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqDamCoreProcessMetadataProcessorProcessProperties left, ComDayCqDamCoreProcessMetadataProcessorProcessProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqDamCoreProcessMetadataProcessorProcessProperties left, ComDayCqDamCoreProcessMetadataProcessorProcessProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
