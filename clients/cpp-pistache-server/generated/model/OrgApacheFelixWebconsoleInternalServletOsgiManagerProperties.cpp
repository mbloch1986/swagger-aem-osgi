/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties()
{
    m_Manager_rootIsSet = false;
    m_Http_service_filterIsSet = false;
    m_Default_renderIsSet = false;
    m_RealmIsSet = false;
    m_UsernameIsSet = false;
    m_PasswordIsSet = false;
    m_CategoryIsSet = false;
    m_LocaleIsSet = false;
    m_LoglevelIsSet = false;
    m_PluginsIsSet = false;
    
}

OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::~OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties()
{
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Manager_rootIsSet)
    {
        val["manager.root"] = ModelBase::toJson(m_Manager_root);
    }
    if(m_Http_service_filterIsSet)
    {
        val["http.service.filter"] = ModelBase::toJson(m_Http_service_filter);
    }
    if(m_Default_renderIsSet)
    {
        val["default.render"] = ModelBase::toJson(m_Default_render);
    }
    if(m_RealmIsSet)
    {
        val["realm"] = ModelBase::toJson(m_Realm);
    }
    if(m_UsernameIsSet)
    {
        val["username"] = ModelBase::toJson(m_Username);
    }
    if(m_PasswordIsSet)
    {
        val["password"] = ModelBase::toJson(m_Password);
    }
    if(m_CategoryIsSet)
    {
        val["category"] = ModelBase::toJson(m_Category);
    }
    if(m_LocaleIsSet)
    {
        val["locale"] = ModelBase::toJson(m_Locale);
    }
    if(m_LoglevelIsSet)
    {
        val["loglevel"] = ModelBase::toJson(m_Loglevel);
    }
    if(m_PluginsIsSet)
    {
        val["plugins"] = ModelBase::toJson(m_Plugins);
    }
    

    return val;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("manager.root") != val.end())
    {
        if(!val["manager.root"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["manager.root"]);
            setManagerRoot( newItem );
        }
        
    }
    if(val.find("http.service.filter") != val.end())
    {
        if(!val["http.service.filter"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["http.service.filter"]);
            setHttpServiceFilter( newItem );
        }
        
    }
    if(val.find("default.render") != val.end())
    {
        if(!val["default.render"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["default.render"]);
            setDefaultRender( newItem );
        }
        
    }
    if(val.find("realm") != val.end())
    {
        if(!val["realm"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["realm"]);
            setRealm( newItem );
        }
        
    }
    if(val.find("username") != val.end())
    {
        if(!val["username"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["username"]);
            setUsername( newItem );
        }
        
    }
    if(val.find("password") != val.end())
    {
        if(!val["password"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["password"]);
            setPassword( newItem );
        }
        
    }
    if(val.find("category") != val.end())
    {
        if(!val["category"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["category"]);
            setCategory( newItem );
        }
        
    }
    if(val.find("locale") != val.end())
    {
        if(!val["locale"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["locale"]);
            setLocale( newItem );
        }
        
    }
    if(val.find("loglevel") != val.end())
    {
        if(!val["loglevel"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["loglevel"]);
            setLoglevel( newItem );
        }
        
    }
    if(val.find("plugins") != val.end())
    {
        if(!val["plugins"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["plugins"]);
            setPlugins( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getManagerRoot() const
{
    return m_Manager_root;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setManagerRoot(ConfigNodePropertyString const& value)
{
    m_Manager_root = value;
    m_Manager_rootIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::managerRootIsSet() const
{
    return m_Manager_rootIsSet;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetManager_root()
{
    m_Manager_rootIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getHttpServiceFilter() const
{
    return m_Http_service_filter;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setHttpServiceFilter(ConfigNodePropertyString const& value)
{
    m_Http_service_filter = value;
    m_Http_service_filterIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::httpServiceFilterIsSet() const
{
    return m_Http_service_filterIsSet;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetHttp_service_filter()
{
    m_Http_service_filterIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getDefaultRender() const
{
    return m_Default_render;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setDefaultRender(ConfigNodePropertyString const& value)
{
    m_Default_render = value;
    m_Default_renderIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::defaultRenderIsSet() const
{
    return m_Default_renderIsSet;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetDefault_render()
{
    m_Default_renderIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getRealm() const
{
    return m_Realm;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setRealm(ConfigNodePropertyString const& value)
{
    m_Realm = value;
    m_RealmIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::realmIsSet() const
{
    return m_RealmIsSet;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetRealm()
{
    m_RealmIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getUsername() const
{
    return m_Username;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setUsername(ConfigNodePropertyString const& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::usernameIsSet() const
{
    return m_UsernameIsSet;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetUsername()
{
    m_UsernameIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getPassword() const
{
    return m_Password;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setPassword(ConfigNodePropertyString const& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::passwordIsSet() const
{
    return m_PasswordIsSet;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetPassword()
{
    m_PasswordIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getCategory() const
{
    return m_Category;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setCategory(ConfigNodePropertyString const& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::categoryIsSet() const
{
    return m_CategoryIsSet;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetCategory()
{
    m_CategoryIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getLocale() const
{
    return m_Locale;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setLocale(ConfigNodePropertyString const& value)
{
    m_Locale = value;
    m_LocaleIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::localeIsSet() const
{
    return m_LocaleIsSet;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetLocale()
{
    m_LocaleIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getLoglevel() const
{
    return m_Loglevel;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setLoglevel(ConfigNodePropertyDropDown const& value)
{
    m_Loglevel = value;
    m_LoglevelIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::loglevelIsSet() const
{
    return m_LoglevelIsSet;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetLoglevel()
{
    m_LoglevelIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getPlugins() const
{
    return m_Plugins;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setPlugins(ConfigNodePropertyDropDown const& value)
{
    m_Plugins = value;
    m_PluginsIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::pluginsIsSet() const
{
    return m_PluginsIsSet;
}
void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetPlugins()
{
    m_PluginsIsSet = false;
}

}
}
}
}

