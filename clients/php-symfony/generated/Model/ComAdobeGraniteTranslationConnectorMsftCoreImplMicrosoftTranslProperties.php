<?php
/**
 * ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("translationFactory")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $translationFactory;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("defaultConnectorLabel")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $defaultConnectorLabel;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("defaultConnectorAttribution")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $defaultConnectorAttribution;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("defaultConnectorWorkspaceId")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $defaultConnectorWorkspaceId;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("defaultConnectorSubscriptionKey")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $defaultConnectorSubscriptionKey;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("languageMapLocation")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $languageMapLocation;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("categoryMapLocation")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $categoryMapLocation;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("retryAttempts")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $retryAttempts;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("timeoutCount")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $timeoutCount;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->translationFactory = isset($data['translationFactory']) ? $data['translationFactory'] : null;
        $this->defaultConnectorLabel = isset($data['defaultConnectorLabel']) ? $data['defaultConnectorLabel'] : null;
        $this->defaultConnectorAttribution = isset($data['defaultConnectorAttribution']) ? $data['defaultConnectorAttribution'] : null;
        $this->defaultConnectorWorkspaceId = isset($data['defaultConnectorWorkspaceId']) ? $data['defaultConnectorWorkspaceId'] : null;
        $this->defaultConnectorSubscriptionKey = isset($data['defaultConnectorSubscriptionKey']) ? $data['defaultConnectorSubscriptionKey'] : null;
        $this->languageMapLocation = isset($data['languageMapLocation']) ? $data['languageMapLocation'] : null;
        $this->categoryMapLocation = isset($data['categoryMapLocation']) ? $data['categoryMapLocation'] : null;
        $this->retryAttempts = isset($data['retryAttempts']) ? $data['retryAttempts'] : null;
        $this->timeoutCount = isset($data['timeoutCount']) ? $data['timeoutCount'] : null;
    }

    /**
     * Gets translationFactory.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getTranslationFactory()
    {
        return $this->translationFactory;
    }

    /**
     * Sets translationFactory.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $translationFactory
     *
     * @return $this
     */
    public function setTranslationFactory(ConfigNodePropertyString $translationFactory = null)
    {
        $this->translationFactory = $translationFactory;

        return $this;
    }

    /**
     * Gets defaultConnectorLabel.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getDefaultConnectorLabel()
    {
        return $this->defaultConnectorLabel;
    }

    /**
     * Sets defaultConnectorLabel.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $defaultConnectorLabel
     *
     * @return $this
     */
    public function setDefaultConnectorLabel(ConfigNodePropertyString $defaultConnectorLabel = null)
    {
        $this->defaultConnectorLabel = $defaultConnectorLabel;

        return $this;
    }

    /**
     * Gets defaultConnectorAttribution.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getDefaultConnectorAttribution()
    {
        return $this->defaultConnectorAttribution;
    }

    /**
     * Sets defaultConnectorAttribution.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $defaultConnectorAttribution
     *
     * @return $this
     */
    public function setDefaultConnectorAttribution(ConfigNodePropertyString $defaultConnectorAttribution = null)
    {
        $this->defaultConnectorAttribution = $defaultConnectorAttribution;

        return $this;
    }

    /**
     * Gets defaultConnectorWorkspaceId.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getDefaultConnectorWorkspaceId()
    {
        return $this->defaultConnectorWorkspaceId;
    }

    /**
     * Sets defaultConnectorWorkspaceId.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $defaultConnectorWorkspaceId
     *
     * @return $this
     */
    public function setDefaultConnectorWorkspaceId(ConfigNodePropertyString $defaultConnectorWorkspaceId = null)
    {
        $this->defaultConnectorWorkspaceId = $defaultConnectorWorkspaceId;

        return $this;
    }

    /**
     * Gets defaultConnectorSubscriptionKey.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getDefaultConnectorSubscriptionKey()
    {
        return $this->defaultConnectorSubscriptionKey;
    }

    /**
     * Sets defaultConnectorSubscriptionKey.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $defaultConnectorSubscriptionKey
     *
     * @return $this
     */
    public function setDefaultConnectorSubscriptionKey(ConfigNodePropertyString $defaultConnectorSubscriptionKey = null)
    {
        $this->defaultConnectorSubscriptionKey = $defaultConnectorSubscriptionKey;

        return $this;
    }

    /**
     * Gets languageMapLocation.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getLanguageMapLocation()
    {
        return $this->languageMapLocation;
    }

    /**
     * Sets languageMapLocation.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $languageMapLocation
     *
     * @return $this
     */
    public function setLanguageMapLocation(ConfigNodePropertyString $languageMapLocation = null)
    {
        $this->languageMapLocation = $languageMapLocation;

        return $this;
    }

    /**
     * Gets categoryMapLocation.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getCategoryMapLocation()
    {
        return $this->categoryMapLocation;
    }

    /**
     * Sets categoryMapLocation.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $categoryMapLocation
     *
     * @return $this
     */
    public function setCategoryMapLocation(ConfigNodePropertyString $categoryMapLocation = null)
    {
        $this->categoryMapLocation = $categoryMapLocation;

        return $this;
    }

    /**
     * Gets retryAttempts.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getRetryAttempts()
    {
        return $this->retryAttempts;
    }

    /**
     * Sets retryAttempts.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $retryAttempts
     *
     * @return $this
     */
    public function setRetryAttempts(ConfigNodePropertyInteger $retryAttempts = null)
    {
        $this->retryAttempts = $retryAttempts;

        return $this;
    }

    /**
     * Gets timeoutCount.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getTimeoutCount()
    {
        return $this->timeoutCount;
    }

    /**
     * Sets timeoutCount.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $timeoutCount
     *
     * @return $this
     */
    public function setTimeoutCount(ConfigNodePropertyInteger $timeoutCount = null)
    {
        $this->timeoutCount = $timeoutCount;

        return $this;
    }
}


