/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties {
  #[serde(rename = "workflowpackageinfoprovider.filter")]
  workflowpackageinfoprovider_filter: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "workflowpackageinfoprovider.filter.rootpath")]
  workflowpackageinfoprovider_filter_rootpath: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties {
  pub fn new() -> ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties {
    ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties {
      workflowpackageinfoprovider_filter: None,
      workflowpackageinfoprovider_filter_rootpath: None
    }
  }

  pub fn set_workflowpackageinfoprovider_filter(&mut self, workflowpackageinfoprovider_filter: ::models::ConfigNodePropertyArray) {
    self.workflowpackageinfoprovider_filter = Some(workflowpackageinfoprovider_filter);
  }

  pub fn with_workflowpackageinfoprovider_filter(mut self, workflowpackageinfoprovider_filter: ::models::ConfigNodePropertyArray) -> ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties {
    self.workflowpackageinfoprovider_filter = Some(workflowpackageinfoprovider_filter);
    self
  }

  pub fn workflowpackageinfoprovider_filter(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.workflowpackageinfoprovider_filter.as_ref()
  }

  pub fn reset_workflowpackageinfoprovider_filter(&mut self) {
    self.workflowpackageinfoprovider_filter = None;
  }

  pub fn set_workflowpackageinfoprovider_filter_rootpath(&mut self, workflowpackageinfoprovider_filter_rootpath: ::models::ConfigNodePropertyString) {
    self.workflowpackageinfoprovider_filter_rootpath = Some(workflowpackageinfoprovider_filter_rootpath);
  }

  pub fn with_workflowpackageinfoprovider_filter_rootpath(mut self, workflowpackageinfoprovider_filter_rootpath: ::models::ConfigNodePropertyString) -> ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties {
    self.workflowpackageinfoprovider_filter_rootpath = Some(workflowpackageinfoprovider_filter_rootpath);
    self
  }

  pub fn workflowpackageinfoprovider_filter_rootpath(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.workflowpackageinfoprovider_filter_rootpath.as_ref()
  }

  pub fn reset_workflowpackageinfoprovider_filter_rootpath(&mut self) {
    self.workflowpackageinfoprovider_filter_rootpath = None;
  }

}



