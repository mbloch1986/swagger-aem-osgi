/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties()
{
    m_NameIsSet = false;
    m_Service_nameIsSet = false;
    m_PathIsSet = false;
    m_Privilege_nameIsSet = false;
    
}

OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::~OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties()
{
}

void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_Service_nameIsSet)
    {
        val["service.name"] = ModelBase::toJson(m_Service_name);
    }
    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_Privilege_nameIsSet)
    {
        val["privilege.name"] = ModelBase::toJson(m_Privilege_name);
    }
    

    return val;
}

void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("service.name") != val.end())
    {
        if(!val["service.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["service.name"]);
            setServiceName( newItem );
        }
        
    }
    if(val.find("path") != val.end())
    {
        if(!val["path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path"]);
            setPath( newItem );
        }
        
    }
    if(val.find("privilege.name") != val.end())
    {
        if(!val["privilege.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["privilege.name"]);
            setPrivilegeName( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::getServiceName() const
{
    return m_Service_name;
}
void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::setServiceName(ConfigNodePropertyString const& value)
{
    m_Service_name = value;
    m_Service_nameIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::serviceNameIsSet() const
{
    return m_Service_nameIsSet;
}
void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::unsetService_name()
{
    m_Service_nameIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::getPath() const
{
    return m_Path;
}
void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::setPath(ConfigNodePropertyString const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::pathIsSet() const
{
    return m_PathIsSet;
}
void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::unsetPath()
{
    m_PathIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::getPrivilegeName() const
{
    return m_Privilege_name;
}
void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::setPrivilegeName(ConfigNodePropertyString const& value)
{
    m_Privilege_name = value;
    m_Privilege_nameIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::privilegeNameIsSet() const
{
    return m_Privilege_nameIsSet;
}
void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::unsetPrivilege_name()
{
    m_Privilege_nameIsSet = false;
}

}
}
}
}

