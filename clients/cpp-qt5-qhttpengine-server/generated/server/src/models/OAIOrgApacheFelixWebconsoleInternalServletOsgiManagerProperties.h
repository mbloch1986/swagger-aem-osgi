/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties_H
#define OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties_H

#include <QJsonObject>


#include "OAIConfigNodePropertyDropDown.h"
#include "OAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties: public OAIObject {
public:
    OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties();
    OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties(QString json);
    ~OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigNodePropertyString getManagerRoot() const;
    void setManagerRoot(const OAIConfigNodePropertyString &manager_root);

    OAIConfigNodePropertyString getHttpServiceFilter() const;
    void setHttpServiceFilter(const OAIConfigNodePropertyString &http_service_filter);

    OAIConfigNodePropertyString getDefaultRender() const;
    void setDefaultRender(const OAIConfigNodePropertyString &default_render);

    OAIConfigNodePropertyString getRealm() const;
    void setRealm(const OAIConfigNodePropertyString &realm);

    OAIConfigNodePropertyString getUsername() const;
    void setUsername(const OAIConfigNodePropertyString &username);

    OAIConfigNodePropertyString getPassword() const;
    void setPassword(const OAIConfigNodePropertyString &password);

    OAIConfigNodePropertyString getCategory() const;
    void setCategory(const OAIConfigNodePropertyString &category);

    OAIConfigNodePropertyString getLocale() const;
    void setLocale(const OAIConfigNodePropertyString &locale);

    OAIConfigNodePropertyDropDown getLoglevel() const;
    void setLoglevel(const OAIConfigNodePropertyDropDown &loglevel);

    OAIConfigNodePropertyDropDown getPlugins() const;
    void setPlugins(const OAIConfigNodePropertyDropDown &plugins);

    virtual bool isSet() const override;

private:
    OAIConfigNodePropertyString manager_root;
    bool m_manager_root_isSet;

    OAIConfigNodePropertyString http_service_filter;
    bool m_http_service_filter_isSet;

    OAIConfigNodePropertyString default_render;
    bool m_default_render_isSet;

    OAIConfigNodePropertyString realm;
    bool m_realm_isSet;

    OAIConfigNodePropertyString username;
    bool m_username_isSet;

    OAIConfigNodePropertyString password;
    bool m_password_isSet;

    OAIConfigNodePropertyString category;
    bool m_category_isSet;

    OAIConfigNodePropertyString locale;
    bool m_locale_isSet;

    OAIConfigNodePropertyDropDown loglevel;
    bool m_loglevel_isSet;

    OAIConfigNodePropertyDropDown plugins;
    bool m_plugins_isSet;

};

}

#endif // OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties_H
