/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties()
{
    m_Scheduler_expressionIsSet = false;
    m_Scheduler_concurrentIsSet = false;
    m_Chunk_cleanup_ageIsSet = false;
    
}

OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::~OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties()
{
}

void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Scheduler_expressionIsSet)
    {
        val["scheduler.expression"] = ModelBase::toJson(m_Scheduler_expression);
    }
    if(m_Scheduler_concurrentIsSet)
    {
        val["scheduler.concurrent"] = ModelBase::toJson(m_Scheduler_concurrent);
    }
    if(m_Chunk_cleanup_ageIsSet)
    {
        val["chunk.cleanup.age"] = ModelBase::toJson(m_Chunk_cleanup_age);
    }
    

    return val;
}

void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::fromJson(nlohmann::json& val)
{
    if(val.find("scheduler.expression") != val.end())
    {
        if(!val["scheduler.expression"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["scheduler.expression"]);
            setSchedulerExpression( newItem );
        }
        
    }
    if(val.find("scheduler.concurrent") != val.end())
    {
        if(!val["scheduler.concurrent"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["scheduler.concurrent"]);
            setSchedulerConcurrent( newItem );
        }
        
    }
    if(val.find("chunk.cleanup.age") != val.end())
    {
        if(!val["chunk.cleanup.age"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["chunk.cleanup.age"]);
            setChunkCleanupAge( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::getSchedulerExpression() const
{
    return m_Scheduler_expression;
}
void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::setSchedulerExpression(ConfigNodePropertyString const& value)
{
    m_Scheduler_expression = value;
    m_Scheduler_expressionIsSet = true;
}
bool OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::schedulerExpressionIsSet() const
{
    return m_Scheduler_expressionIsSet;
}
void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::unsetScheduler_expression()
{
    m_Scheduler_expressionIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::getSchedulerConcurrent() const
{
    return m_Scheduler_concurrent;
}
void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::setSchedulerConcurrent(ConfigNodePropertyBoolean const& value)
{
    m_Scheduler_concurrent = value;
    m_Scheduler_concurrentIsSet = true;
}
bool OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::schedulerConcurrentIsSet() const
{
    return m_Scheduler_concurrentIsSet;
}
void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::unsetScheduler_concurrent()
{
    m_Scheduler_concurrentIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::getChunkCleanupAge() const
{
    return m_Chunk_cleanup_age;
}
void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::setChunkCleanupAge(ConfigNodePropertyInteger const& value)
{
    m_Chunk_cleanup_age = value;
    m_Chunk_cleanup_ageIsSet = true;
}
bool OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::chunkCleanupAgeIsSet() const
{
    return m_Chunk_cleanup_ageIsSet;
}
void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::unsetChunk_cleanup_age()
{
    m_Chunk_cleanup_ageIsSet = false;
}

}
}
}
}

