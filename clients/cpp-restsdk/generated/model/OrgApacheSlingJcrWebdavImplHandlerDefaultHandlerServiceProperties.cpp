/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties()
{
    m_Service_rankingIsSet = false;
    m_Type_collectionsIsSet = false;
    m_Type_noncollectionsIsSet = false;
    m_Type_contentIsSet = false;
}

OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::~OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties()
{
}

void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Service_rankingIsSet)
    {
        val[utility::conversions::to_string_t("service.ranking")] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_Type_collectionsIsSet)
    {
        val[utility::conversions::to_string_t("type.collections")] = ModelBase::toJson(m_Type_collections);
    }
    if(m_Type_noncollectionsIsSet)
    {
        val[utility::conversions::to_string_t("type.noncollections")] = ModelBase::toJson(m_Type_noncollections);
    }
    if(m_Type_contentIsSet)
    {
        val[utility::conversions::to_string_t("type.content")] = ModelBase::toJson(m_Type_content);
    }

    return val;
}

void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("service.ranking")))
    {
        if(!val[utility::conversions::to_string_t("service.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("service.ranking")]);
            setServiceRanking( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type.collections")))
    {
        if(!val[utility::conversions::to_string_t("type.collections")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("type.collections")]);
            setTypeCollections( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type.noncollections")))
    {
        if(!val[utility::conversions::to_string_t("type.noncollections")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("type.noncollections")]);
            setTypeNoncollections( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type.content")))
    {
        if(!val[utility::conversions::to_string_t("type.content")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("type.content")]);
            setTypeContent( newItem );
        }
    }
}

void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Service_rankingIsSet)
    {
        if (m_Service_ranking.get())
        {
            m_Service_ranking->toMultipart(multipart, utility::conversions::to_string_t("service.ranking."));
        }
    }
    if(m_Type_collectionsIsSet)
    {
        if (m_Type_collections.get())
        {
            m_Type_collections->toMultipart(multipart, utility::conversions::to_string_t("type.collections."));
        }
    }
    if(m_Type_noncollectionsIsSet)
    {
        if (m_Type_noncollections.get())
        {
            m_Type_noncollections->toMultipart(multipart, utility::conversions::to_string_t("type.noncollections."));
        }
    }
    if(m_Type_contentIsSet)
    {
        if (m_Type_content.get())
        {
            m_Type_content->toMultipart(multipart, utility::conversions::to_string_t("type.content."));
        }
    }
}

void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.ranking."));
            setServiceRanking( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type.collections")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("type.collections")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("type.collections."));
            setTypeCollections( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type.noncollections")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("type.noncollections")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("type.noncollections."));
            setTypeNoncollections( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type.content")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("type.content")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("type.content."));
            setTypeContent( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::getServiceRanking() const
{
    return m_Service_ranking;
}


void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}

void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::getTypeCollections() const
{
    return m_Type_collections;
}


void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::setTypeCollections(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Type_collections = value;
    m_Type_collectionsIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::typeCollectionsIsSet() const
{
    return m_Type_collectionsIsSet;
}

void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::unsetType_collections()
{
    m_Type_collectionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::getTypeNoncollections() const
{
    return m_Type_noncollections;
}


void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::setTypeNoncollections(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Type_noncollections = value;
    m_Type_noncollectionsIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::typeNoncollectionsIsSet() const
{
    return m_Type_noncollectionsIsSet;
}

void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::unsetType_noncollections()
{
    m_Type_noncollectionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::getTypeContent() const
{
    return m_Type_content;
}


void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::setTypeContent(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Type_content = value;
    m_Type_contentIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::typeContentIsSet() const
{
    return m_Type_contentIsSet;
}

void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::unsetType_content()
{
    m_Type_contentIsSet = false;
}

}
}
}
}

