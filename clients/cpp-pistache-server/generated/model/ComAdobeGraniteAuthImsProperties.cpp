/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteAuthImsProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteAuthImsProperties::ComAdobeGraniteAuthImsProperties()
{
    m_ConfigidIsSet = false;
    m_ScopeIsSet = false;
    
}

ComAdobeGraniteAuthImsProperties::~ComAdobeGraniteAuthImsProperties()
{
}

void ComAdobeGraniteAuthImsProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteAuthImsProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_ConfigidIsSet)
    {
        val["configid"] = ModelBase::toJson(m_Configid);
    }
    if(m_ScopeIsSet)
    {
        val["scope"] = ModelBase::toJson(m_Scope);
    }
    

    return val;
}

void ComAdobeGraniteAuthImsProperties::fromJson(nlohmann::json& val)
{
    if(val.find("configid") != val.end())
    {
        if(!val["configid"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["configid"]);
            setConfigid( newItem );
        }
        
    }
    if(val.find("scope") != val.end())
    {
        if(!val["scope"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["scope"]);
            setScope( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteAuthImsProperties::getConfigid() const
{
    return m_Configid;
}
void ComAdobeGraniteAuthImsProperties::setConfigid(ConfigNodePropertyString const& value)
{
    m_Configid = value;
    m_ConfigidIsSet = true;
}
bool ComAdobeGraniteAuthImsProperties::configidIsSet() const
{
    return m_ConfigidIsSet;
}
void ComAdobeGraniteAuthImsProperties::unsetConfigid()
{
    m_ConfigidIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsProperties::getScope() const
{
    return m_Scope;
}
void ComAdobeGraniteAuthImsProperties::setScope(ConfigNodePropertyString const& value)
{
    m_Scope = value;
    m_ScopeIsSet = true;
}
bool ComAdobeGraniteAuthImsProperties::scopeIsSet() const
{
    return m_ScopeIsSet;
}
void ComAdobeGraniteAuthImsProperties::unsetScope()
{
    m_ScopeIsSet = false;
}

}
}
}
}

