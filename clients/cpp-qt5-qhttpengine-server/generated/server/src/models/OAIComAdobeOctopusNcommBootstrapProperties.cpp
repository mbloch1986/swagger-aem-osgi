/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeOctopusNcommBootstrapProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeOctopusNcommBootstrapProperties::OAIComAdobeOctopusNcommBootstrapProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeOctopusNcommBootstrapProperties::OAIComAdobeOctopusNcommBootstrapProperties() {
    this->init();
}

OAIComAdobeOctopusNcommBootstrapProperties::~OAIComAdobeOctopusNcommBootstrapProperties() {
    
}

void
OAIComAdobeOctopusNcommBootstrapProperties::init() {
    m_max_connections_isSet = false;
    m_max_requests_isSet = false;
    m_request_timeout_isSet = false;
    m_request_retries_isSet = false;
    m_launch_timeout_isSet = false;
}

void
OAIComAdobeOctopusNcommBootstrapProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeOctopusNcommBootstrapProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(max_connections, json[QString("maxConnections")]);
    
    ::OpenAPI::fromJsonValue(max_requests, json[QString("maxRequests")]);
    
    ::OpenAPI::fromJsonValue(request_timeout, json[QString("requestTimeout")]);
    
    ::OpenAPI::fromJsonValue(request_retries, json[QString("requestRetries")]);
    
    ::OpenAPI::fromJsonValue(launch_timeout, json[QString("launchTimeout")]);
    
}

QString
OAIComAdobeOctopusNcommBootstrapProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeOctopusNcommBootstrapProperties::asJsonObject() const {
    QJsonObject obj;
	if(max_connections.isSet()){
        obj.insert(QString("maxConnections"), ::OpenAPI::toJsonValue(max_connections));
    }
	if(max_requests.isSet()){
        obj.insert(QString("maxRequests"), ::OpenAPI::toJsonValue(max_requests));
    }
	if(request_timeout.isSet()){
        obj.insert(QString("requestTimeout"), ::OpenAPI::toJsonValue(request_timeout));
    }
	if(request_retries.isSet()){
        obj.insert(QString("requestRetries"), ::OpenAPI::toJsonValue(request_retries));
    }
	if(launch_timeout.isSet()){
        obj.insert(QString("launchTimeout"), ::OpenAPI::toJsonValue(launch_timeout));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComAdobeOctopusNcommBootstrapProperties::getMaxConnections() const {
    return max_connections;
}
void
OAIComAdobeOctopusNcommBootstrapProperties::setMaxConnections(const OAIConfigNodePropertyInteger &max_connections) {
    this->max_connections = max_connections;
    this->m_max_connections_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeOctopusNcommBootstrapProperties::getMaxRequests() const {
    return max_requests;
}
void
OAIComAdobeOctopusNcommBootstrapProperties::setMaxRequests(const OAIConfigNodePropertyInteger &max_requests) {
    this->max_requests = max_requests;
    this->m_max_requests_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeOctopusNcommBootstrapProperties::getRequestTimeout() const {
    return request_timeout;
}
void
OAIComAdobeOctopusNcommBootstrapProperties::setRequestTimeout(const OAIConfigNodePropertyInteger &request_timeout) {
    this->request_timeout = request_timeout;
    this->m_request_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeOctopusNcommBootstrapProperties::getRequestRetries() const {
    return request_retries;
}
void
OAIComAdobeOctopusNcommBootstrapProperties::setRequestRetries(const OAIConfigNodePropertyInteger &request_retries) {
    this->request_retries = request_retries;
    this->m_request_retries_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeOctopusNcommBootstrapProperties::getLaunchTimeout() const {
    return launch_timeout;
}
void
OAIComAdobeOctopusNcommBootstrapProperties::setLaunchTimeout(const OAIConfigNodePropertyInteger &launch_timeout) {
    this->launch_timeout = launch_timeout;
    this->m_launch_timeout_isSet = true;
}


bool
OAIComAdobeOctopusNcommBootstrapProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(max_connections.isSet()){ isObjectUpdated = true; break;}
    
        if(max_requests.isSet()){ isObjectUpdated = true; break;}
    
        if(request_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(request_retries.isSet()){ isObjectUpdated = true; break;}
    
        if(launch_timeout.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

