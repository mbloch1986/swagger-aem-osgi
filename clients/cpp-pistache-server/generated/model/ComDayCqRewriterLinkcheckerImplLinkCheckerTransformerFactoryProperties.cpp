/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties()
{
    m_Linkcheckertransformer_disableRewritingIsSet = false;
    m_Linkcheckertransformer_disableCheckingIsSet = false;
    m_Linkcheckertransformer_mapCacheSizeIsSet = false;
    m_Linkcheckertransformer_strictExtensionCheckIsSet = false;
    m_Linkcheckertransformer_stripHtmltExtensionIsSet = false;
    m_Linkcheckertransformer_rewriteElementsIsSet = false;
    m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet = false;
    
}

ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::~ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties()
{
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Linkcheckertransformer_disableRewritingIsSet)
    {
        val["linkcheckertransformer.disableRewriting"] = ModelBase::toJson(m_Linkcheckertransformer_disableRewriting);
    }
    if(m_Linkcheckertransformer_disableCheckingIsSet)
    {
        val["linkcheckertransformer.disableChecking"] = ModelBase::toJson(m_Linkcheckertransformer_disableChecking);
    }
    if(m_Linkcheckertransformer_mapCacheSizeIsSet)
    {
        val["linkcheckertransformer.mapCacheSize"] = ModelBase::toJson(m_Linkcheckertransformer_mapCacheSize);
    }
    if(m_Linkcheckertransformer_strictExtensionCheckIsSet)
    {
        val["linkcheckertransformer.strictExtensionCheck"] = ModelBase::toJson(m_Linkcheckertransformer_strictExtensionCheck);
    }
    if(m_Linkcheckertransformer_stripHtmltExtensionIsSet)
    {
        val["linkcheckertransformer.stripHtmltExtension"] = ModelBase::toJson(m_Linkcheckertransformer_stripHtmltExtension);
    }
    if(m_Linkcheckertransformer_rewriteElementsIsSet)
    {
        val["linkcheckertransformer.rewriteElements"] = ModelBase::toJson(m_Linkcheckertransformer_rewriteElements);
    }
    if(m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet)
    {
        val["linkcheckertransformer.stripExtensionPathBlacklist"] = ModelBase::toJson(m_Linkcheckertransformer_stripExtensionPathBlacklist);
    }
    

    return val;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::fromJson(nlohmann::json& val)
{
    if(val.find("linkcheckertransformer.disableRewriting") != val.end())
    {
        if(!val["linkcheckertransformer.disableRewriting"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["linkcheckertransformer.disableRewriting"]);
            setLinkcheckertransformerDisableRewriting( newItem );
        }
        
    }
    if(val.find("linkcheckertransformer.disableChecking") != val.end())
    {
        if(!val["linkcheckertransformer.disableChecking"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["linkcheckertransformer.disableChecking"]);
            setLinkcheckertransformerDisableChecking( newItem );
        }
        
    }
    if(val.find("linkcheckertransformer.mapCacheSize") != val.end())
    {
        if(!val["linkcheckertransformer.mapCacheSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["linkcheckertransformer.mapCacheSize"]);
            setLinkcheckertransformerMapCacheSize( newItem );
        }
        
    }
    if(val.find("linkcheckertransformer.strictExtensionCheck") != val.end())
    {
        if(!val["linkcheckertransformer.strictExtensionCheck"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["linkcheckertransformer.strictExtensionCheck"]);
            setLinkcheckertransformerStrictExtensionCheck( newItem );
        }
        
    }
    if(val.find("linkcheckertransformer.stripHtmltExtension") != val.end())
    {
        if(!val["linkcheckertransformer.stripHtmltExtension"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["linkcheckertransformer.stripHtmltExtension"]);
            setLinkcheckertransformerStripHtmltExtension( newItem );
        }
        
    }
    if(val.find("linkcheckertransformer.rewriteElements") != val.end())
    {
        if(!val["linkcheckertransformer.rewriteElements"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["linkcheckertransformer.rewriteElements"]);
            setLinkcheckertransformerRewriteElements( newItem );
        }
        
    }
    if(val.find("linkcheckertransformer.stripExtensionPathBlacklist") != val.end())
    {
        if(!val["linkcheckertransformer.stripExtensionPathBlacklist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["linkcheckertransformer.stripExtensionPathBlacklist"]);
            setLinkcheckertransformerStripExtensionPathBlacklist( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerDisableRewriting() const
{
    return m_Linkcheckertransformer_disableRewriting;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerDisableRewriting(ConfigNodePropertyBoolean const& value)
{
    m_Linkcheckertransformer_disableRewriting = value;
    m_Linkcheckertransformer_disableRewritingIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerDisableRewritingIsSet() const
{
    return m_Linkcheckertransformer_disableRewritingIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_disableRewriting()
{
    m_Linkcheckertransformer_disableRewritingIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerDisableChecking() const
{
    return m_Linkcheckertransformer_disableChecking;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerDisableChecking(ConfigNodePropertyBoolean const& value)
{
    m_Linkcheckertransformer_disableChecking = value;
    m_Linkcheckertransformer_disableCheckingIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerDisableCheckingIsSet() const
{
    return m_Linkcheckertransformer_disableCheckingIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_disableChecking()
{
    m_Linkcheckertransformer_disableCheckingIsSet = false;
}
ConfigNodePropertyInteger ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerMapCacheSize() const
{
    return m_Linkcheckertransformer_mapCacheSize;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerMapCacheSize(ConfigNodePropertyInteger const& value)
{
    m_Linkcheckertransformer_mapCacheSize = value;
    m_Linkcheckertransformer_mapCacheSizeIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerMapCacheSizeIsSet() const
{
    return m_Linkcheckertransformer_mapCacheSizeIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_mapCacheSize()
{
    m_Linkcheckertransformer_mapCacheSizeIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStrictExtensionCheck() const
{
    return m_Linkcheckertransformer_strictExtensionCheck;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStrictExtensionCheck(ConfigNodePropertyBoolean const& value)
{
    m_Linkcheckertransformer_strictExtensionCheck = value;
    m_Linkcheckertransformer_strictExtensionCheckIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerStrictExtensionCheckIsSet() const
{
    return m_Linkcheckertransformer_strictExtensionCheckIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_strictExtensionCheck()
{
    m_Linkcheckertransformer_strictExtensionCheckIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStripHtmltExtension() const
{
    return m_Linkcheckertransformer_stripHtmltExtension;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStripHtmltExtension(ConfigNodePropertyBoolean const& value)
{
    m_Linkcheckertransformer_stripHtmltExtension = value;
    m_Linkcheckertransformer_stripHtmltExtensionIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerStripHtmltExtensionIsSet() const
{
    return m_Linkcheckertransformer_stripHtmltExtensionIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_stripHtmltExtension()
{
    m_Linkcheckertransformer_stripHtmltExtensionIsSet = false;
}
ConfigNodePropertyArray ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerRewriteElements() const
{
    return m_Linkcheckertransformer_rewriteElements;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerRewriteElements(ConfigNodePropertyArray const& value)
{
    m_Linkcheckertransformer_rewriteElements = value;
    m_Linkcheckertransformer_rewriteElementsIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerRewriteElementsIsSet() const
{
    return m_Linkcheckertransformer_rewriteElementsIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_rewriteElements()
{
    m_Linkcheckertransformer_rewriteElementsIsSet = false;
}
ConfigNodePropertyArray ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStripExtensionPathBlacklist() const
{
    return m_Linkcheckertransformer_stripExtensionPathBlacklist;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStripExtensionPathBlacklist(ConfigNodePropertyArray const& value)
{
    m_Linkcheckertransformer_stripExtensionPathBlacklist = value;
    m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerStripExtensionPathBlacklistIsSet() const
{
    return m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_stripExtensionPathBlacklist()
{
    m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet = false;
}

}
}
}
}

