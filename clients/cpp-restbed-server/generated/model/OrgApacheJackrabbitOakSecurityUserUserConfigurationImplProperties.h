/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.h
 *
 * 
 */

#ifndef OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_
#define OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties
{
public:
    OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties();
    virtual ~OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUsersPath() const;
    void setUsersPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupsPath() const;
    void setGroupsPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSystemRelativePath() const;
    void setSystemRelativePath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getDefaultDepth() const;
    void setDefaultDepth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getImportBehavior() const;
    void setImportBehavior(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPasswordHashAlgorithm() const;
    void setPasswordHashAlgorithm(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordHashIterations() const;
    void setPasswordHashIterations(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordSaltSize() const;
    void setPasswordSaltSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOmitAdminPw() const;
    void setOmitAdminPw(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSupportAutoSave() const;
    void setSupportAutoSave(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordMaxAge() const;
    void setPasswordMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getInitialPasswordChange() const;
    void setInitialPasswordChange(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordHistorySize() const;
    void setPasswordHistorySize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPasswordExpiryForAdmin() const;
    void setPasswordExpiryForAdmin(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheExpiration() const;
    void setCacheExpiration(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableRFC7613UsercaseMappedProfile() const;
    void setEnableRFC7613UsercaseMappedProfile(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_UsersPath;
    std::shared_ptr<ConfigNodePropertyString> m_GroupsPath;
    std::shared_ptr<ConfigNodePropertyString> m_SystemRelativePath;
    std::shared_ptr<ConfigNodePropertyInteger> m_DefaultDepth;
    std::shared_ptr<ConfigNodePropertyDropDown> m_ImportBehavior;
    std::shared_ptr<ConfigNodePropertyString> m_PasswordHashAlgorithm;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordHashIterations;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordSaltSize;
    std::shared_ptr<ConfigNodePropertyBoolean> m_OmitAdminPw;
    std::shared_ptr<ConfigNodePropertyBoolean> m_SupportAutoSave;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordMaxAge;
    std::shared_ptr<ConfigNodePropertyBoolean> m_InitialPasswordChange;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordHistorySize;
    std::shared_ptr<ConfigNodePropertyBoolean> m_PasswordExpiryForAdmin;
    std::shared_ptr<ConfigNodePropertyInteger> m_CacheExpiration;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableRFC7613UsercaseMappedProfile;
};

}
}
}
}

#endif /* OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_ */
