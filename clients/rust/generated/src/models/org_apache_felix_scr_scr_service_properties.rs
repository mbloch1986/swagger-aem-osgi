/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheFelixScrScrServiceProperties {
  #[serde(rename = "ds.loglevel")]
  ds_loglevel: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "ds.factory.enabled")]
  ds_factory_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "ds.delayed.keepInstances")]
  ds_delayed_keep_instances: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "ds.lock.timeout.milliseconds")]
  ds_lock_timeout_milliseconds: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "ds.stop.timeout.milliseconds")]
  ds_stop_timeout_milliseconds: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "ds.global.extender")]
  ds_global_extender: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheFelixScrScrServiceProperties {
  pub fn new() -> OrgApacheFelixScrScrServiceProperties {
    OrgApacheFelixScrScrServiceProperties {
      ds_loglevel: None,
      ds_factory_enabled: None,
      ds_delayed_keep_instances: None,
      ds_lock_timeout_milliseconds: None,
      ds_stop_timeout_milliseconds: None,
      ds_global_extender: None
    }
  }

  pub fn set_ds_loglevel(&mut self, ds_loglevel: ::models::ConfigNodePropertyDropDown) {
    self.ds_loglevel = Some(ds_loglevel);
  }

  pub fn with_ds_loglevel(mut self, ds_loglevel: ::models::ConfigNodePropertyDropDown) -> OrgApacheFelixScrScrServiceProperties {
    self.ds_loglevel = Some(ds_loglevel);
    self
  }

  pub fn ds_loglevel(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.ds_loglevel.as_ref()
  }

  pub fn reset_ds_loglevel(&mut self) {
    self.ds_loglevel = None;
  }

  pub fn set_ds_factory_enabled(&mut self, ds_factory_enabled: ::models::ConfigNodePropertyBoolean) {
    self.ds_factory_enabled = Some(ds_factory_enabled);
  }

  pub fn with_ds_factory_enabled(mut self, ds_factory_enabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheFelixScrScrServiceProperties {
    self.ds_factory_enabled = Some(ds_factory_enabled);
    self
  }

  pub fn ds_factory_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.ds_factory_enabled.as_ref()
  }

  pub fn reset_ds_factory_enabled(&mut self) {
    self.ds_factory_enabled = None;
  }

  pub fn set_ds_delayed_keep_instances(&mut self, ds_delayed_keep_instances: ::models::ConfigNodePropertyBoolean) {
    self.ds_delayed_keep_instances = Some(ds_delayed_keep_instances);
  }

  pub fn with_ds_delayed_keep_instances(mut self, ds_delayed_keep_instances: ::models::ConfigNodePropertyBoolean) -> OrgApacheFelixScrScrServiceProperties {
    self.ds_delayed_keep_instances = Some(ds_delayed_keep_instances);
    self
  }

  pub fn ds_delayed_keep_instances(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.ds_delayed_keep_instances.as_ref()
  }

  pub fn reset_ds_delayed_keep_instances(&mut self) {
    self.ds_delayed_keep_instances = None;
  }

  pub fn set_ds_lock_timeout_milliseconds(&mut self, ds_lock_timeout_milliseconds: ::models::ConfigNodePropertyInteger) {
    self.ds_lock_timeout_milliseconds = Some(ds_lock_timeout_milliseconds);
  }

  pub fn with_ds_lock_timeout_milliseconds(mut self, ds_lock_timeout_milliseconds: ::models::ConfigNodePropertyInteger) -> OrgApacheFelixScrScrServiceProperties {
    self.ds_lock_timeout_milliseconds = Some(ds_lock_timeout_milliseconds);
    self
  }

  pub fn ds_lock_timeout_milliseconds(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.ds_lock_timeout_milliseconds.as_ref()
  }

  pub fn reset_ds_lock_timeout_milliseconds(&mut self) {
    self.ds_lock_timeout_milliseconds = None;
  }

  pub fn set_ds_stop_timeout_milliseconds(&mut self, ds_stop_timeout_milliseconds: ::models::ConfigNodePropertyInteger) {
    self.ds_stop_timeout_milliseconds = Some(ds_stop_timeout_milliseconds);
  }

  pub fn with_ds_stop_timeout_milliseconds(mut self, ds_stop_timeout_milliseconds: ::models::ConfigNodePropertyInteger) -> OrgApacheFelixScrScrServiceProperties {
    self.ds_stop_timeout_milliseconds = Some(ds_stop_timeout_milliseconds);
    self
  }

  pub fn ds_stop_timeout_milliseconds(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.ds_stop_timeout_milliseconds.as_ref()
  }

  pub fn reset_ds_stop_timeout_milliseconds(&mut self) {
    self.ds_stop_timeout_milliseconds = None;
  }

  pub fn set_ds_global_extender(&mut self, ds_global_extender: ::models::ConfigNodePropertyBoolean) {
    self.ds_global_extender = Some(ds_global_extender);
  }

  pub fn with_ds_global_extender(mut self, ds_global_extender: ::models::ConfigNodePropertyBoolean) -> OrgApacheFelixScrScrServiceProperties {
    self.ds_global_extender = Some(ds_global_extender);
    self
  }

  pub fn ds_global_extender(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.ds_global_extender.as_ref()
  }

  pub fn reset_ds_global_extender(&mut self) {
    self.ds_global_extender = None;
  }

}



