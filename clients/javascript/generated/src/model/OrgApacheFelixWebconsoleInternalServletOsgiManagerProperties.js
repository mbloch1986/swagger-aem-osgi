/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConfigNodePropertyDropDown', 'model/ConfigNodePropertyString'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ConfigNodePropertyDropDown'), require('./ConfigNodePropertyString'));
  } else {
    // Browser globals (root is window)
    if (!root.NodeSwaggerAemOsgi) {
      root.NodeSwaggerAemOsgi = {};
    }
    root.NodeSwaggerAemOsgi.OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties = factory(root.NodeSwaggerAemOsgi.ApiClient, root.NodeSwaggerAemOsgi.ConfigNodePropertyDropDown, root.NodeSwaggerAemOsgi.ConfigNodePropertyString);
  }
}(this, function(ApiClient, ConfigNodePropertyDropDown, ConfigNodePropertyString) {
  'use strict';




  /**
   * The OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties model module.
   * @module model/OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties</code>.
   * @alias module:model/OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties
   * @class
   */
  var exports = function() {
    var _this = this;











  };

  /**
   * Constructs a <code>OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties} obj Optional instance to populate.
   * @return {module:model/OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties} The populated <code>OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('manager.root')) {
        obj['manager.root'] = ConfigNodePropertyString.constructFromObject(data['manager.root']);
      }
      if (data.hasOwnProperty('http.service.filter')) {
        obj['http.service.filter'] = ConfigNodePropertyString.constructFromObject(data['http.service.filter']);
      }
      if (data.hasOwnProperty('default.render')) {
        obj['default.render'] = ConfigNodePropertyString.constructFromObject(data['default.render']);
      }
      if (data.hasOwnProperty('realm')) {
        obj['realm'] = ConfigNodePropertyString.constructFromObject(data['realm']);
      }
      if (data.hasOwnProperty('username')) {
        obj['username'] = ConfigNodePropertyString.constructFromObject(data['username']);
      }
      if (data.hasOwnProperty('password')) {
        obj['password'] = ConfigNodePropertyString.constructFromObject(data['password']);
      }
      if (data.hasOwnProperty('category')) {
        obj['category'] = ConfigNodePropertyString.constructFromObject(data['category']);
      }
      if (data.hasOwnProperty('locale')) {
        obj['locale'] = ConfigNodePropertyString.constructFromObject(data['locale']);
      }
      if (data.hasOwnProperty('loglevel')) {
        obj['loglevel'] = ConfigNodePropertyDropDown.constructFromObject(data['loglevel']);
      }
      if (data.hasOwnProperty('plugins')) {
        obj['plugins'] = ConfigNodePropertyDropDown.constructFromObject(data['plugins']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/ConfigNodePropertyString} manager.root
   */
  exports.prototype['manager.root'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} http.service.filter
   */
  exports.prototype['http.service.filter'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} default.render
   */
  exports.prototype['default.render'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} realm
   */
  exports.prototype['realm'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} username
   */
  exports.prototype['username'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} password
   */
  exports.prototype['password'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} category
   */
  exports.prototype['category'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} locale
   */
  exports.prototype['locale'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyDropDown} loglevel
   */
  exports.prototype['loglevel'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyDropDown} plugins
   */
  exports.prototype['plugins'] = undefined;



  return exports;
}));


