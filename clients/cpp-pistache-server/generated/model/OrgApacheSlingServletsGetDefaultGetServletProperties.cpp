/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingServletsGetDefaultGetServletProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingServletsGetDefaultGetServletProperties::OrgApacheSlingServletsGetDefaultGetServletProperties()
{
    m_AliasesIsSet = false;
    m_IndexIsSet = false;
    m_Index_filesIsSet = false;
    m_Enable_htmlIsSet = false;
    m_Enable_jsonIsSet = false;
    m_Enable_txtIsSet = false;
    m_Enable_xmlIsSet = false;
    m_Json_maximumresultsIsSet = false;
    m_EcmaSuportIsSet = false;
    
}

OrgApacheSlingServletsGetDefaultGetServletProperties::~OrgApacheSlingServletsGetDefaultGetServletProperties()
{
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingServletsGetDefaultGetServletProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_AliasesIsSet)
    {
        val["aliases"] = ModelBase::toJson(m_Aliases);
    }
    if(m_IndexIsSet)
    {
        val["index"] = ModelBase::toJson(m_Index);
    }
    if(m_Index_filesIsSet)
    {
        val["index.files"] = ModelBase::toJson(m_Index_files);
    }
    if(m_Enable_htmlIsSet)
    {
        val["enable.html"] = ModelBase::toJson(m_Enable_html);
    }
    if(m_Enable_jsonIsSet)
    {
        val["enable.json"] = ModelBase::toJson(m_Enable_json);
    }
    if(m_Enable_txtIsSet)
    {
        val["enable.txt"] = ModelBase::toJson(m_Enable_txt);
    }
    if(m_Enable_xmlIsSet)
    {
        val["enable.xml"] = ModelBase::toJson(m_Enable_xml);
    }
    if(m_Json_maximumresultsIsSet)
    {
        val["json.maximumresults"] = ModelBase::toJson(m_Json_maximumresults);
    }
    if(m_EcmaSuportIsSet)
    {
        val["ecmaSuport"] = ModelBase::toJson(m_EcmaSuport);
    }
    

    return val;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::fromJson(nlohmann::json& val)
{
    if(val.find("aliases") != val.end())
    {
        if(!val["aliases"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["aliases"]);
            setAliases( newItem );
        }
        
    }
    if(val.find("index") != val.end())
    {
        if(!val["index"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["index"]);
            setIndex( newItem );
        }
        
    }
    if(val.find("index.files") != val.end())
    {
        if(!val["index.files"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["index.files"]);
            setIndexFiles( newItem );
        }
        
    }
    if(val.find("enable.html") != val.end())
    {
        if(!val["enable.html"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enable.html"]);
            setEnableHtml( newItem );
        }
        
    }
    if(val.find("enable.json") != val.end())
    {
        if(!val["enable.json"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enable.json"]);
            setEnableJson( newItem );
        }
        
    }
    if(val.find("enable.txt") != val.end())
    {
        if(!val["enable.txt"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enable.txt"]);
            setEnableTxt( newItem );
        }
        
    }
    if(val.find("enable.xml") != val.end())
    {
        if(!val["enable.xml"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enable.xml"]);
            setEnableXml( newItem );
        }
        
    }
    if(val.find("json.maximumresults") != val.end())
    {
        if(!val["json.maximumresults"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["json.maximumresults"]);
            setJsonMaximumresults( newItem );
        }
        
    }
    if(val.find("ecmaSuport") != val.end())
    {
        if(!val["ecmaSuport"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["ecmaSuport"]);
            setEcmaSuport( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray OrgApacheSlingServletsGetDefaultGetServletProperties::getAliases() const
{
    return m_Aliases;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::setAliases(ConfigNodePropertyArray const& value)
{
    m_Aliases = value;
    m_AliasesIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::aliasesIsSet() const
{
    return m_AliasesIsSet;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetAliases()
{
    m_AliasesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServletsGetDefaultGetServletProperties::getIndex() const
{
    return m_Index;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::setIndex(ConfigNodePropertyBoolean const& value)
{
    m_Index = value;
    m_IndexIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::indexIsSet() const
{
    return m_IndexIsSet;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetIndex()
{
    m_IndexIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingServletsGetDefaultGetServletProperties::getIndexFiles() const
{
    return m_Index_files;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::setIndexFiles(ConfigNodePropertyArray const& value)
{
    m_Index_files = value;
    m_Index_filesIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::indexFilesIsSet() const
{
    return m_Index_filesIsSet;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetIndex_files()
{
    m_Index_filesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServletsGetDefaultGetServletProperties::getEnableHtml() const
{
    return m_Enable_html;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::setEnableHtml(ConfigNodePropertyBoolean const& value)
{
    m_Enable_html = value;
    m_Enable_htmlIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::enableHtmlIsSet() const
{
    return m_Enable_htmlIsSet;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetEnable_html()
{
    m_Enable_htmlIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServletsGetDefaultGetServletProperties::getEnableJson() const
{
    return m_Enable_json;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::setEnableJson(ConfigNodePropertyBoolean const& value)
{
    m_Enable_json = value;
    m_Enable_jsonIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::enableJsonIsSet() const
{
    return m_Enable_jsonIsSet;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetEnable_json()
{
    m_Enable_jsonIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServletsGetDefaultGetServletProperties::getEnableTxt() const
{
    return m_Enable_txt;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::setEnableTxt(ConfigNodePropertyBoolean const& value)
{
    m_Enable_txt = value;
    m_Enable_txtIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::enableTxtIsSet() const
{
    return m_Enable_txtIsSet;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetEnable_txt()
{
    m_Enable_txtIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServletsGetDefaultGetServletProperties::getEnableXml() const
{
    return m_Enable_xml;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::setEnableXml(ConfigNodePropertyBoolean const& value)
{
    m_Enable_xml = value;
    m_Enable_xmlIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::enableXmlIsSet() const
{
    return m_Enable_xmlIsSet;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetEnable_xml()
{
    m_Enable_xmlIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingServletsGetDefaultGetServletProperties::getJsonMaximumresults() const
{
    return m_Json_maximumresults;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::setJsonMaximumresults(ConfigNodePropertyInteger const& value)
{
    m_Json_maximumresults = value;
    m_Json_maximumresultsIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::jsonMaximumresultsIsSet() const
{
    return m_Json_maximumresultsIsSet;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetJson_maximumresults()
{
    m_Json_maximumresultsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServletsGetDefaultGetServletProperties::getEcmaSuport() const
{
    return m_EcmaSuport;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::setEcmaSuport(ConfigNodePropertyBoolean const& value)
{
    m_EcmaSuport = value;
    m_EcmaSuportIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::ecmaSuportIsSet() const
{
    return m_EcmaSuportIsSet;
}
void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetEcmaSuport()
{
    m_EcmaSuportIsSet = false;
}

}
}
}
}

