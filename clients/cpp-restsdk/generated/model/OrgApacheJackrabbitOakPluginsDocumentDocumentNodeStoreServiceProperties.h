/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties();
    virtual ~OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getMongouri() const;
    bool mongouriIsSet() const;
    void unsetMongouri();
    void setMongouri(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDb() const;
    bool dbIsSet() const;
    void unsetDb();
    void setDb(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSocketKeepAlive() const;
    bool socketKeepAliveIsSet() const;
    void unsetSocketKeepAlive();
    void setSocketKeepAlive(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCache() const;
    bool cacheIsSet() const;
    void unsetCache();
    void setCache(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getNodeCachePercentage() const;
    bool nodeCachePercentageIsSet() const;
    void unsetNodeCachePercentage();
    void setNodeCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPrevDocCachePercentage() const;
    bool prevDocCachePercentageIsSet() const;
    void unsetPrevDocCachePercentage();
    void setPrevDocCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getChildrenCachePercentage() const;
    bool childrenCachePercentageIsSet() const;
    void unsetChildrenCachePercentage();
    void setChildrenCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getDiffCachePercentage() const;
    bool diffCachePercentageIsSet() const;
    void unsetDiffCachePercentage();
    void setDiffCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheSegmentCount() const;
    bool cacheSegmentCountIsSet() const;
    void unsetCacheSegmentCount();
    void setCacheSegmentCount(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheStackMoveDistance() const;
    bool cacheStackMoveDistanceIsSet() const;
    void unsetCacheStackMoveDistance();
    void setCacheStackMoveDistance(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBlobCacheSize() const;
    bool blobCacheSizeIsSet() const;
    void unsetBlobCacheSize();
    void setBlobCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPersistentCache() const;
    bool persistentCacheIsSet() const;
    void unsetPersistentCache();
    void setPersistentCache(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJournalCache() const;
    bool journalCacheIsSet() const;
    void unsetJournalCache();
    void setJournalCache(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCustomBlobStore() const;
    bool customBlobStoreIsSet() const;
    void unsetCustomBlobStore();
    void setCustomBlobStore(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getJournalGCInterval() const;
    bool journalGCIntervalIsSet() const;
    void unsetJournalGCInterval();
    void setJournalGCInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getJournalGCMaxAge() const;
    bool journalGCMaxAgeIsSet() const;
    void unsetJournalGCMaxAge();
    void setJournalGCMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPrefetchExternalChanges() const;
    bool prefetchExternalChangesIsSet() const;
    void unsetPrefetchExternalChanges();
    void setPrefetchExternalChanges(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRole() const;
    bool roleIsSet() const;
    void unsetRole();
    void setRole(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getVersionGcMaxAgeInSecs() const;
    bool versionGcMaxAgeInSecsIsSet() const;
    void unsetVersionGcMaxAgeInSecs();
    void setVersionGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getVersionGCExpression() const;
    bool versionGCExpressionIsSet() const;
    void unsetVersionGCExpression();
    void setVersionGCExpression(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getVersionGCTimeLimitInSecs() const;
    bool versionGCTimeLimitInSecsIsSet() const;
    void unsetVersionGCTimeLimitInSecs();
    void setVersionGCTimeLimitInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBlobGcMaxAgeInSecs() const;
    bool blobGcMaxAgeInSecsIsSet() const;
    void unsetBlobGcMaxAgeInSecs();
    void setBlobGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBlobTrackSnapshotIntervalInSecs() const;
    bool blobTrackSnapshotIntervalInSecsIsSet() const;
    void unsetBlobTrackSnapshotIntervalInSecs();
    void setBlobTrackSnapshotIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepositoryHome() const;
    bool repositoryHomeIsSet() const;
    void unsetRepository_home();
    void setRepositoryHome(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxReplicationLagInSecs() const;
    bool maxReplicationLagInSecsIsSet() const;
    void unsetMaxReplicationLagInSecs();
    void setMaxReplicationLagInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDocumentStoreType() const;
    bool documentStoreTypeIsSet() const;
    void unsetDocumentStoreType();
    void setDocumentStoreType(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getBundlingDisabled() const;
    bool bundlingDisabledIsSet() const;
    void unsetBundlingDisabled();
    void setBundlingDisabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getUpdateLimit() const;
    bool updateLimitIsSet() const;
    void unsetUpdateLimit();
    void setUpdateLimit(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPersistentCacheIncludes() const;
    bool persistentCacheIncludesIsSet() const;
    void unsetPersistentCacheIncludes();
    void setPersistentCacheIncludes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getLeaseCheckMode() const;
    bool leaseCheckModeIsSet() const;
    void unsetLeaseCheckMode();
    void setLeaseCheckMode(std::shared_ptr<ConfigNodePropertyDropDown> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Mongouri;
    bool m_MongouriIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Db;
    bool m_DbIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_SocketKeepAlive;
    bool m_SocketKeepAliveIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cache;
    bool m_CacheIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_NodeCachePercentage;
    bool m_NodeCachePercentageIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_PrevDocCachePercentage;
    bool m_PrevDocCachePercentageIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ChildrenCachePercentage;
    bool m_ChildrenCachePercentageIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_DiffCachePercentage;
    bool m_DiffCachePercentageIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_CacheSegmentCount;
    bool m_CacheSegmentCountIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_CacheStackMoveDistance;
    bool m_CacheStackMoveDistanceIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_BlobCacheSize;
    bool m_BlobCacheSizeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_PersistentCache;
    bool m_PersistentCacheIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_JournalCache;
    bool m_JournalCacheIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_CustomBlobStore;
    bool m_CustomBlobStoreIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_JournalGCInterval;
    bool m_JournalGCIntervalIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_JournalGCMaxAge;
    bool m_JournalGCMaxAgeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_PrefetchExternalChanges;
    bool m_PrefetchExternalChangesIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Role;
    bool m_RoleIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_VersionGcMaxAgeInSecs;
    bool m_VersionGcMaxAgeInSecsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_VersionGCExpression;
    bool m_VersionGCExpressionIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_VersionGCTimeLimitInSecs;
    bool m_VersionGCTimeLimitInSecsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_BlobGcMaxAgeInSecs;
    bool m_BlobGcMaxAgeInSecsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_BlobTrackSnapshotIntervalInSecs;
    bool m_BlobTrackSnapshotIntervalInSecsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Repository_home;
    bool m_Repository_homeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxReplicationLagInSecs;
    bool m_MaxReplicationLagInSecsIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_DocumentStoreType;
    bool m_DocumentStoreTypeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_BundlingDisabled;
    bool m_BundlingDisabledIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_UpdateLimit;
    bool m_UpdateLimitIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_PersistentCacheIncludes;
    bool m_PersistentCacheIncludesIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_LeaseCheckMode;
    bool m_LeaseCheckModeIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H_ */
