/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingI18nImplJcrResourceBundleProviderProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingI18nImplJcrResourceBundleProviderProperties :  IEquatable<OrgApacheSlingI18nImplJcrResourceBundleProviderProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingI18nImplJcrResourceBundleProviderProperties" /> class.
        /// </summary>
        /// <param name="localeDefault">localeDefault.</param>
        /// <param name="preloadBundles">preloadBundles.</param>
        /// <param name="invalidationDelay">invalidationDelay.</param>
        public OrgApacheSlingI18nImplJcrResourceBundleProviderProperties(ConfigNodePropertyString localeDefault = default(ConfigNodePropertyString), ConfigNodePropertyBoolean preloadBundles = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger invalidationDelay = default(ConfigNodePropertyInteger))
        {
            this.LocaleDefault = localeDefault;
            this.PreloadBundles = preloadBundles;
            this.InvalidationDelay = invalidationDelay;
        }
        
        /// <summary>
        /// Gets or Sets LocaleDefault
        /// </summary>
        [DataMember(Name="locale.default", EmitDefaultValue=false)]
        public ConfigNodePropertyString LocaleDefault { get; set; }

        /// <summary>
        /// Gets or Sets PreloadBundles
        /// </summary>
        [DataMember(Name="preload.bundles", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean PreloadBundles { get; set; }

        /// <summary>
        /// Gets or Sets InvalidationDelay
        /// </summary>
        [DataMember(Name="invalidation.delay", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger InvalidationDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {\n");
            sb.Append("  LocaleDefault: ").Append(LocaleDefault).Append("\n");
            sb.Append("  PreloadBundles: ").Append(PreloadBundles).Append("\n");
            sb.Append("  InvalidationDelay: ").Append(InvalidationDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingI18nImplJcrResourceBundleProviderProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingI18nImplJcrResourceBundleProviderProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingI18nImplJcrResourceBundleProviderProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingI18nImplJcrResourceBundleProviderProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocaleDefault == input.LocaleDefault ||
                    (this.LocaleDefault != null &&
                    this.LocaleDefault.Equals(input.LocaleDefault))
                ) && 
                (
                    this.PreloadBundles == input.PreloadBundles ||
                    (this.PreloadBundles != null &&
                    this.PreloadBundles.Equals(input.PreloadBundles))
                ) && 
                (
                    this.InvalidationDelay == input.InvalidationDelay ||
                    (this.InvalidationDelay != null &&
                    this.InvalidationDelay.Equals(input.InvalidationDelay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocaleDefault != null)
                    hashCode = hashCode * 59 + this.LocaleDefault.GetHashCode();
                if (this.PreloadBundles != null)
                    hashCode = hashCode * 59 + this.PreloadBundles.GetHashCode();
                if (this.InvalidationDelay != null)
                    hashCode = hashCode * 59 + this.InvalidationDelay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
