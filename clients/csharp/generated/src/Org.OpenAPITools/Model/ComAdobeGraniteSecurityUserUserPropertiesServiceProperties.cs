/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteSecurityUserUserPropertiesServiceProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteSecurityUserUserPropertiesServiceProperties :  IEquatable<ComAdobeGraniteSecurityUserUserPropertiesServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteSecurityUserUserPropertiesServiceProperties" /> class.
        /// </summary>
        /// <param name="adapterCondition">adapterCondition.</param>
        /// <param name="graniteUserpropertiesNodetypes">graniteUserpropertiesNodetypes.</param>
        /// <param name="graniteUserpropertiesResourcetypes">graniteUserpropertiesResourcetypes.</param>
        public ComAdobeGraniteSecurityUserUserPropertiesServiceProperties(ConfigNodePropertyString adapterCondition = default(ConfigNodePropertyString), ConfigNodePropertyArray graniteUserpropertiesNodetypes = default(ConfigNodePropertyArray), ConfigNodePropertyArray graniteUserpropertiesResourcetypes = default(ConfigNodePropertyArray))
        {
            this.AdapterCondition = adapterCondition;
            this.GraniteUserpropertiesNodetypes = graniteUserpropertiesNodetypes;
            this.GraniteUserpropertiesResourcetypes = graniteUserpropertiesResourcetypes;
        }
        
        /// <summary>
        /// Gets or Sets AdapterCondition
        /// </summary>
        [DataMember(Name="adapter.condition", EmitDefaultValue=false)]
        public ConfigNodePropertyString AdapterCondition { get; set; }

        /// <summary>
        /// Gets or Sets GraniteUserpropertiesNodetypes
        /// </summary>
        [DataMember(Name="granite.userproperties.nodetypes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray GraniteUserpropertiesNodetypes { get; set; }

        /// <summary>
        /// Gets or Sets GraniteUserpropertiesResourcetypes
        /// </summary>
        [DataMember(Name="granite.userproperties.resourcetypes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray GraniteUserpropertiesResourcetypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteSecurityUserUserPropertiesServiceProperties {\n");
            sb.Append("  AdapterCondition: ").Append(AdapterCondition).Append("\n");
            sb.Append("  GraniteUserpropertiesNodetypes: ").Append(GraniteUserpropertiesNodetypes).Append("\n");
            sb.Append("  GraniteUserpropertiesResourcetypes: ").Append(GraniteUserpropertiesResourcetypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteSecurityUserUserPropertiesServiceProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteSecurityUserUserPropertiesServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteSecurityUserUserPropertiesServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteSecurityUserUserPropertiesServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdapterCondition == input.AdapterCondition ||
                    (this.AdapterCondition != null &&
                    this.AdapterCondition.Equals(input.AdapterCondition))
                ) && 
                (
                    this.GraniteUserpropertiesNodetypes == input.GraniteUserpropertiesNodetypes ||
                    (this.GraniteUserpropertiesNodetypes != null &&
                    this.GraniteUserpropertiesNodetypes.Equals(input.GraniteUserpropertiesNodetypes))
                ) && 
                (
                    this.GraniteUserpropertiesResourcetypes == input.GraniteUserpropertiesResourcetypes ||
                    (this.GraniteUserpropertiesResourcetypes != null &&
                    this.GraniteUserpropertiesResourcetypes.Equals(input.GraniteUserpropertiesResourcetypes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdapterCondition != null)
                    hashCode = hashCode * 59 + this.AdapterCondition.GetHashCode();
                if (this.GraniteUserpropertiesNodetypes != null)
                    hashCode = hashCode * 59 + this.GraniteUserpropertiesNodetypes.GetHashCode();
                if (this.GraniteUserpropertiesResourcetypes != null)
                    hashCode = hashCode * 59 + this.GraniteUserpropertiesResourcetypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
