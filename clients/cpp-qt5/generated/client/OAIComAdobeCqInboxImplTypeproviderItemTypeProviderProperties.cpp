/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties() {
    init();
}

OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::~OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties() {
    this->cleanup();
}

void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::init() {
    inbox_impl_typeprovider_registrypaths = new OAIConfigNodePropertyArray();
    m_inbox_impl_typeprovider_registrypaths_isSet = false;
    inbox_impl_typeprovider_legacypaths = new OAIConfigNodePropertyArray();
    m_inbox_impl_typeprovider_legacypaths_isSet = false;
    inbox_impl_typeprovider_defaulturl_failureitem = new OAIConfigNodePropertyString();
    m_inbox_impl_typeprovider_defaulturl_failureitem_isSet = false;
    inbox_impl_typeprovider_defaulturl_workitem = new OAIConfigNodePropertyString();
    m_inbox_impl_typeprovider_defaulturl_workitem_isSet = false;
    inbox_impl_typeprovider_defaulturl_task = new OAIConfigNodePropertyString();
    m_inbox_impl_typeprovider_defaulturl_task_isSet = false;
}

void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::cleanup() {
    if(inbox_impl_typeprovider_registrypaths != nullptr) { 
        delete inbox_impl_typeprovider_registrypaths;
    }
    if(inbox_impl_typeprovider_legacypaths != nullptr) { 
        delete inbox_impl_typeprovider_legacypaths;
    }
    if(inbox_impl_typeprovider_defaulturl_failureitem != nullptr) { 
        delete inbox_impl_typeprovider_defaulturl_failureitem;
    }
    if(inbox_impl_typeprovider_defaulturl_workitem != nullptr) { 
        delete inbox_impl_typeprovider_defaulturl_workitem;
    }
    if(inbox_impl_typeprovider_defaulturl_task != nullptr) { 
        delete inbox_impl_typeprovider_defaulturl_task;
    }
}

OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties*
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&inbox_impl_typeprovider_registrypaths, pJson["inbox.impl.typeprovider.registrypaths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&inbox_impl_typeprovider_legacypaths, pJson["inbox.impl.typeprovider.legacypaths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&inbox_impl_typeprovider_defaulturl_failureitem, pJson["inbox.impl.typeprovider.defaulturl.failureitem"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&inbox_impl_typeprovider_defaulturl_workitem, pJson["inbox.impl.typeprovider.defaulturl.workitem"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&inbox_impl_typeprovider_defaulturl_task, pJson["inbox.impl.typeprovider.defaulturl.task"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::asJsonObject() {
    QJsonObject obj;
    if((inbox_impl_typeprovider_registrypaths != nullptr) && (inbox_impl_typeprovider_registrypaths->isSet())){
        toJsonValue(QString("inbox.impl.typeprovider.registrypaths"), inbox_impl_typeprovider_registrypaths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((inbox_impl_typeprovider_legacypaths != nullptr) && (inbox_impl_typeprovider_legacypaths->isSet())){
        toJsonValue(QString("inbox.impl.typeprovider.legacypaths"), inbox_impl_typeprovider_legacypaths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((inbox_impl_typeprovider_defaulturl_failureitem != nullptr) && (inbox_impl_typeprovider_defaulturl_failureitem->isSet())){
        toJsonValue(QString("inbox.impl.typeprovider.defaulturl.failureitem"), inbox_impl_typeprovider_defaulturl_failureitem, obj, QString("OAIConfigNodePropertyString"));
    }
    if((inbox_impl_typeprovider_defaulturl_workitem != nullptr) && (inbox_impl_typeprovider_defaulturl_workitem->isSet())){
        toJsonValue(QString("inbox.impl.typeprovider.defaulturl.workitem"), inbox_impl_typeprovider_defaulturl_workitem, obj, QString("OAIConfigNodePropertyString"));
    }
    if((inbox_impl_typeprovider_defaulturl_task != nullptr) && (inbox_impl_typeprovider_defaulturl_task->isSet())){
        toJsonValue(QString("inbox.impl.typeprovider.defaulturl.task"), inbox_impl_typeprovider_defaulturl_task, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderRegistrypaths() {
    return inbox_impl_typeprovider_registrypaths;
}
void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderRegistrypaths(OAIConfigNodePropertyArray* inbox_impl_typeprovider_registrypaths) {
    this->inbox_impl_typeprovider_registrypaths = inbox_impl_typeprovider_registrypaths;
    this->m_inbox_impl_typeprovider_registrypaths_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderLegacypaths() {
    return inbox_impl_typeprovider_legacypaths;
}
void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderLegacypaths(OAIConfigNodePropertyArray* inbox_impl_typeprovider_legacypaths) {
    this->inbox_impl_typeprovider_legacypaths = inbox_impl_typeprovider_legacypaths;
    this->m_inbox_impl_typeprovider_legacypaths_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderDefaulturlFailureitem() {
    return inbox_impl_typeprovider_defaulturl_failureitem;
}
void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderDefaulturlFailureitem(OAIConfigNodePropertyString* inbox_impl_typeprovider_defaulturl_failureitem) {
    this->inbox_impl_typeprovider_defaulturl_failureitem = inbox_impl_typeprovider_defaulturl_failureitem;
    this->m_inbox_impl_typeprovider_defaulturl_failureitem_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderDefaulturlWorkitem() {
    return inbox_impl_typeprovider_defaulturl_workitem;
}
void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderDefaulturlWorkitem(OAIConfigNodePropertyString* inbox_impl_typeprovider_defaulturl_workitem) {
    this->inbox_impl_typeprovider_defaulturl_workitem = inbox_impl_typeprovider_defaulturl_workitem;
    this->m_inbox_impl_typeprovider_defaulturl_workitem_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderDefaulturlTask() {
    return inbox_impl_typeprovider_defaulturl_task;
}
void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderDefaulturlTask(OAIConfigNodePropertyString* inbox_impl_typeprovider_defaulturl_task) {
    this->inbox_impl_typeprovider_defaulturl_task = inbox_impl_typeprovider_defaulturl_task;
    this->m_inbox_impl_typeprovider_defaulturl_task_isSet = true;
}


bool
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(inbox_impl_typeprovider_registrypaths != nullptr && inbox_impl_typeprovider_registrypaths->isSet()){ isObjectUpdated = true; break;}
        if(inbox_impl_typeprovider_legacypaths != nullptr && inbox_impl_typeprovider_legacypaths->isSet()){ isObjectUpdated = true; break;}
        if(inbox_impl_typeprovider_defaulturl_failureitem != nullptr && inbox_impl_typeprovider_defaulturl_failureitem->isSet()){ isObjectUpdated = true; break;}
        if(inbox_impl_typeprovider_defaulturl_workitem != nullptr && inbox_impl_typeprovider_defaulturl_workitem->isSet()){ isObjectUpdated = true; break;}
        if(inbox_impl_typeprovider_defaulturl_task != nullptr && inbox_impl_typeprovider_defaulturl_task->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

