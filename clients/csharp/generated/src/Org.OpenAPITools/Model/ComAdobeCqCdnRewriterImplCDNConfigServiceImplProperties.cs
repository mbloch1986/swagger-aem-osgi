/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties :  IEquatable<ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties" /> class.
        /// </summary>
        /// <param name="cdnConfigDistributionDomain">cdnConfigDistributionDomain.</param>
        /// <param name="cdnConfigEnableRewriting">cdnConfigEnableRewriting.</param>
        /// <param name="cdnConfigPathPrefixes">cdnConfigPathPrefixes.</param>
        /// <param name="cdnConfigCdnttl">cdnConfigCdnttl.</param>
        /// <param name="cdnConfigApplicationProtocol">cdnConfigApplicationProtocol.</param>
        public ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties(ConfigNodePropertyString cdnConfigDistributionDomain = default(ConfigNodePropertyString), ConfigNodePropertyBoolean cdnConfigEnableRewriting = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray cdnConfigPathPrefixes = default(ConfigNodePropertyArray), ConfigNodePropertyInteger cdnConfigCdnttl = default(ConfigNodePropertyInteger), ConfigNodePropertyString cdnConfigApplicationProtocol = default(ConfigNodePropertyString))
        {
            this.CdnConfigDistributionDomain = cdnConfigDistributionDomain;
            this.CdnConfigEnableRewriting = cdnConfigEnableRewriting;
            this.CdnConfigPathPrefixes = cdnConfigPathPrefixes;
            this.CdnConfigCdnttl = cdnConfigCdnttl;
            this.CdnConfigApplicationProtocol = cdnConfigApplicationProtocol;
        }
        
        /// <summary>
        /// Gets or Sets CdnConfigDistributionDomain
        /// </summary>
        [DataMember(Name="cdn.config.distribution.domain", EmitDefaultValue=false)]
        public ConfigNodePropertyString CdnConfigDistributionDomain { get; set; }

        /// <summary>
        /// Gets or Sets CdnConfigEnableRewriting
        /// </summary>
        [DataMember(Name="cdn.config.enable.rewriting", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean CdnConfigEnableRewriting { get; set; }

        /// <summary>
        /// Gets or Sets CdnConfigPathPrefixes
        /// </summary>
        [DataMember(Name="cdn.config.path.prefixes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray CdnConfigPathPrefixes { get; set; }

        /// <summary>
        /// Gets or Sets CdnConfigCdnttl
        /// </summary>
        [DataMember(Name="cdn.config.cdnttl", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CdnConfigCdnttl { get; set; }

        /// <summary>
        /// Gets or Sets CdnConfigApplicationProtocol
        /// </summary>
        [DataMember(Name="cdn.config.application.protocol", EmitDefaultValue=false)]
        public ConfigNodePropertyString CdnConfigApplicationProtocol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties {\n");
            sb.Append("  CdnConfigDistributionDomain: ").Append(CdnConfigDistributionDomain).Append("\n");
            sb.Append("  CdnConfigEnableRewriting: ").Append(CdnConfigEnableRewriting).Append("\n");
            sb.Append("  CdnConfigPathPrefixes: ").Append(CdnConfigPathPrefixes).Append("\n");
            sb.Append("  CdnConfigCdnttl: ").Append(CdnConfigCdnttl).Append("\n");
            sb.Append("  CdnConfigApplicationProtocol: ").Append(CdnConfigApplicationProtocol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CdnConfigDistributionDomain == input.CdnConfigDistributionDomain ||
                    (this.CdnConfigDistributionDomain != null &&
                    this.CdnConfigDistributionDomain.Equals(input.CdnConfigDistributionDomain))
                ) && 
                (
                    this.CdnConfigEnableRewriting == input.CdnConfigEnableRewriting ||
                    (this.CdnConfigEnableRewriting != null &&
                    this.CdnConfigEnableRewriting.Equals(input.CdnConfigEnableRewriting))
                ) && 
                (
                    this.CdnConfigPathPrefixes == input.CdnConfigPathPrefixes ||
                    (this.CdnConfigPathPrefixes != null &&
                    this.CdnConfigPathPrefixes.Equals(input.CdnConfigPathPrefixes))
                ) && 
                (
                    this.CdnConfigCdnttl == input.CdnConfigCdnttl ||
                    (this.CdnConfigCdnttl != null &&
                    this.CdnConfigCdnttl.Equals(input.CdnConfigCdnttl))
                ) && 
                (
                    this.CdnConfigApplicationProtocol == input.CdnConfigApplicationProtocol ||
                    (this.CdnConfigApplicationProtocol != null &&
                    this.CdnConfigApplicationProtocol.Equals(input.CdnConfigApplicationProtocol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CdnConfigDistributionDomain != null)
                    hashCode = hashCode * 59 + this.CdnConfigDistributionDomain.GetHashCode();
                if (this.CdnConfigEnableRewriting != null)
                    hashCode = hashCode * 59 + this.CdnConfigEnableRewriting.GetHashCode();
                if (this.CdnConfigPathPrefixes != null)
                    hashCode = hashCode * 59 + this.CdnConfigPathPrefixes.GetHashCode();
                if (this.CdnConfigCdnttl != null)
                    hashCode = hashCode * 59 + this.CdnConfigCdnttl.GetHashCode();
                if (this.CdnConfigApplicationProtocol != null)
                    hashCode = hashCode * 59 + this.CdnConfigApplicationProtocol.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
