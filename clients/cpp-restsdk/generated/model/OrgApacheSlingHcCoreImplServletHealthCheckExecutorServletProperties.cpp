/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties()
{
    m_ServletPathIsSet = false;
    m_DisabledIsSet = false;
    m_Cors_accessControlAllowOriginIsSet = false;
}

OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::~OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties()
{
}

void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ServletPathIsSet)
    {
        val[utility::conversions::to_string_t("servletPath")] = ModelBase::toJson(m_ServletPath);
    }
    if(m_DisabledIsSet)
    {
        val[utility::conversions::to_string_t("disabled")] = ModelBase::toJson(m_Disabled);
    }
    if(m_Cors_accessControlAllowOriginIsSet)
    {
        val[utility::conversions::to_string_t("cors.accessControlAllowOrigin")] = ModelBase::toJson(m_Cors_accessControlAllowOrigin);
    }

    return val;
}

void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("servletPath")))
    {
        if(!val[utility::conversions::to_string_t("servletPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("servletPath")]);
            setServletPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("disabled")))
    {
        if(!val[utility::conversions::to_string_t("disabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("disabled")]);
            setDisabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cors.accessControlAllowOrigin")))
    {
        if(!val[utility::conversions::to_string_t("cors.accessControlAllowOrigin")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cors.accessControlAllowOrigin")]);
            setCorsAccessControlAllowOrigin( newItem );
        }
    }
}

void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ServletPathIsSet)
    {
        if (m_ServletPath.get())
        {
            m_ServletPath->toMultipart(multipart, utility::conversions::to_string_t("servletPath."));
        }
    }
    if(m_DisabledIsSet)
    {
        if (m_Disabled.get())
        {
            m_Disabled->toMultipart(multipart, utility::conversions::to_string_t("disabled."));
        }
    }
    if(m_Cors_accessControlAllowOriginIsSet)
    {
        if (m_Cors_accessControlAllowOrigin.get())
        {
            m_Cors_accessControlAllowOrigin->toMultipart(multipart, utility::conversions::to_string_t("cors.accessControlAllowOrigin."));
        }
    }
}

void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("servletPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("servletPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("servletPath."));
            setServletPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("disabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("disabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("disabled."));
            setDisabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cors.accessControlAllowOrigin")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cors.accessControlAllowOrigin")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cors.accessControlAllowOrigin."));
            setCorsAccessControlAllowOrigin( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::getServletPath() const
{
    return m_ServletPath;
}


void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::setServletPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ServletPath = value;
    m_ServletPathIsSet = true;
}
bool OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::servletPathIsSet() const
{
    return m_ServletPathIsSet;
}

void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::unsetServletPath()
{
    m_ServletPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::getDisabled() const
{
    return m_Disabled;
}


void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::setDisabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}
bool OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::disabledIsSet() const
{
    return m_DisabledIsSet;
}

void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::unsetDisabled()
{
    m_DisabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::getCorsAccessControlAllowOrigin() const
{
    return m_Cors_accessControlAllowOrigin;
}


void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::setCorsAccessControlAllowOrigin(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cors_accessControlAllowOrigin = value;
    m_Cors_accessControlAllowOriginIsSet = true;
}
bool OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::corsAccessControlAllowOriginIsSet() const
{
    return m_Cors_accessControlAllowOriginIsSet;
}

void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::unsetCors_accessControlAllowOrigin()
{
    m_Cors_accessControlAllowOriginIsSet = false;
}

}
}
}
}

