/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqReplicationContentStaticContentBuilderProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqReplicationContentStaticContentBuilderProperties::ComDayCqReplicationContentStaticContentBuilderProperties()
{
    m_HostIsSet = false;
    m_PortIsSet = false;
    
}

ComDayCqReplicationContentStaticContentBuilderProperties::~ComDayCqReplicationContentStaticContentBuilderProperties()
{
}

void ComDayCqReplicationContentStaticContentBuilderProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqReplicationContentStaticContentBuilderProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_HostIsSet)
    {
        val["host"] = ModelBase::toJson(m_Host);
    }
    if(m_PortIsSet)
    {
        val["port"] = ModelBase::toJson(m_Port);
    }
    

    return val;
}

void ComDayCqReplicationContentStaticContentBuilderProperties::fromJson(nlohmann::json& val)
{
    if(val.find("host") != val.end())
    {
        if(!val["host"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["host"]);
            setHost( newItem );
        }
        
    }
    if(val.find("port") != val.end())
    {
        if(!val["port"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["port"]);
            setPort( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqReplicationContentStaticContentBuilderProperties::getHost() const
{
    return m_Host;
}
void ComDayCqReplicationContentStaticContentBuilderProperties::setHost(ConfigNodePropertyString const& value)
{
    m_Host = value;
    m_HostIsSet = true;
}
bool ComDayCqReplicationContentStaticContentBuilderProperties::hostIsSet() const
{
    return m_HostIsSet;
}
void ComDayCqReplicationContentStaticContentBuilderProperties::unsetHost()
{
    m_HostIsSet = false;
}
ConfigNodePropertyInteger ComDayCqReplicationContentStaticContentBuilderProperties::getPort() const
{
    return m_Port;
}
void ComDayCqReplicationContentStaticContentBuilderProperties::setPort(ConfigNodePropertyInteger const& value)
{
    m_Port = value;
    m_PortIsSet = true;
}
bool ComDayCqReplicationContentStaticContentBuilderProperties::portIsSet() const
{
    return m_PortIsSet;
}
void ComDayCqReplicationContentStaticContentBuilderProperties::unsetPort()
{
    m_PortIsSet = false;
}

}
}
}
}

