/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties :  IEquatable<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties" /> class.
        /// </summary>
        /// <param name="pathDescField">pathDescField.</param>
        /// <param name="pathChildField">pathChildField.</param>
        /// <param name="pathParentField">pathParentField.</param>
        /// <param name="pathExactField">pathExactField.</param>
        /// <param name="catchAllField">catchAllField.</param>
        /// <param name="collapsedPathField">collapsedPathField.</param>
        /// <param name="pathDepthField">pathDepthField.</param>
        /// <param name="commitPolicy">commitPolicy.</param>
        /// <param name="rows">rows.</param>
        /// <param name="pathRestrictions">pathRestrictions.</param>
        /// <param name="propertyRestrictions">propertyRestrictions.</param>
        /// <param name="primarytypesRestrictions">primarytypesRestrictions.</param>
        /// <param name="ignoredProperties">ignoredProperties.</param>
        /// <param name="usedProperties">usedProperties.</param>
        /// <param name="typeMappings">typeMappings.</param>
        /// <param name="propertyMappings">propertyMappings.</param>
        /// <param name="collapseJcrcontentNodes">collapseJcrcontentNodes.</param>
        public OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties(ConfigNodePropertyString pathDescField = default(ConfigNodePropertyString), ConfigNodePropertyString pathChildField = default(ConfigNodePropertyString), ConfigNodePropertyString pathParentField = default(ConfigNodePropertyString), ConfigNodePropertyString pathExactField = default(ConfigNodePropertyString), ConfigNodePropertyString catchAllField = default(ConfigNodePropertyString), ConfigNodePropertyString collapsedPathField = default(ConfigNodePropertyString), ConfigNodePropertyString pathDepthField = default(ConfigNodePropertyString), ConfigNodePropertyDropDown commitPolicy = default(ConfigNodePropertyDropDown), ConfigNodePropertyInteger rows = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean pathRestrictions = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean propertyRestrictions = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean primarytypesRestrictions = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray ignoredProperties = default(ConfigNodePropertyArray), ConfigNodePropertyArray usedProperties = default(ConfigNodePropertyArray), ConfigNodePropertyArray typeMappings = default(ConfigNodePropertyArray), ConfigNodePropertyArray propertyMappings = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean collapseJcrcontentNodes = default(ConfigNodePropertyBoolean))
        {
            this.PathDescField = pathDescField;
            this.PathChildField = pathChildField;
            this.PathParentField = pathParentField;
            this.PathExactField = pathExactField;
            this.CatchAllField = catchAllField;
            this.CollapsedPathField = collapsedPathField;
            this.PathDepthField = pathDepthField;
            this.CommitPolicy = commitPolicy;
            this.Rows = rows;
            this.PathRestrictions = pathRestrictions;
            this.PropertyRestrictions = propertyRestrictions;
            this.PrimarytypesRestrictions = primarytypesRestrictions;
            this.IgnoredProperties = ignoredProperties;
            this.UsedProperties = usedProperties;
            this.TypeMappings = typeMappings;
            this.PropertyMappings = propertyMappings;
            this.CollapseJcrcontentNodes = collapseJcrcontentNodes;
        }
        
        /// <summary>
        /// Gets or Sets PathDescField
        /// </summary>
        [DataMember(Name="path.desc.field", EmitDefaultValue=false)]
        public ConfigNodePropertyString PathDescField { get; set; }

        /// <summary>
        /// Gets or Sets PathChildField
        /// </summary>
        [DataMember(Name="path.child.field", EmitDefaultValue=false)]
        public ConfigNodePropertyString PathChildField { get; set; }

        /// <summary>
        /// Gets or Sets PathParentField
        /// </summary>
        [DataMember(Name="path.parent.field", EmitDefaultValue=false)]
        public ConfigNodePropertyString PathParentField { get; set; }

        /// <summary>
        /// Gets or Sets PathExactField
        /// </summary>
        [DataMember(Name="path.exact.field", EmitDefaultValue=false)]
        public ConfigNodePropertyString PathExactField { get; set; }

        /// <summary>
        /// Gets or Sets CatchAllField
        /// </summary>
        [DataMember(Name="catch.all.field", EmitDefaultValue=false)]
        public ConfigNodePropertyString CatchAllField { get; set; }

        /// <summary>
        /// Gets or Sets CollapsedPathField
        /// </summary>
        [DataMember(Name="collapsed.path.field", EmitDefaultValue=false)]
        public ConfigNodePropertyString CollapsedPathField { get; set; }

        /// <summary>
        /// Gets or Sets PathDepthField
        /// </summary>
        [DataMember(Name="path.depth.field", EmitDefaultValue=false)]
        public ConfigNodePropertyString PathDepthField { get; set; }

        /// <summary>
        /// Gets or Sets CommitPolicy
        /// </summary>
        [DataMember(Name="commit.policy", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown CommitPolicy { get; set; }

        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name="rows", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger Rows { get; set; }

        /// <summary>
        /// Gets or Sets PathRestrictions
        /// </summary>
        [DataMember(Name="path.restrictions", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean PathRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets PropertyRestrictions
        /// </summary>
        [DataMember(Name="property.restrictions", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean PropertyRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets PrimarytypesRestrictions
        /// </summary>
        [DataMember(Name="primarytypes.restrictions", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean PrimarytypesRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets IgnoredProperties
        /// </summary>
        [DataMember(Name="ignored.properties", EmitDefaultValue=false)]
        public ConfigNodePropertyArray IgnoredProperties { get; set; }

        /// <summary>
        /// Gets or Sets UsedProperties
        /// </summary>
        [DataMember(Name="used.properties", EmitDefaultValue=false)]
        public ConfigNodePropertyArray UsedProperties { get; set; }

        /// <summary>
        /// Gets or Sets TypeMappings
        /// </summary>
        [DataMember(Name="type.mappings", EmitDefaultValue=false)]
        public ConfigNodePropertyArray TypeMappings { get; set; }

        /// <summary>
        /// Gets or Sets PropertyMappings
        /// </summary>
        [DataMember(Name="property.mappings", EmitDefaultValue=false)]
        public ConfigNodePropertyArray PropertyMappings { get; set; }

        /// <summary>
        /// Gets or Sets CollapseJcrcontentNodes
        /// </summary>
        [DataMember(Name="collapse.jcrcontent.nodes", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean CollapseJcrcontentNodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {\n");
            sb.Append("  PathDescField: ").Append(PathDescField).Append("\n");
            sb.Append("  PathChildField: ").Append(PathChildField).Append("\n");
            sb.Append("  PathParentField: ").Append(PathParentField).Append("\n");
            sb.Append("  PathExactField: ").Append(PathExactField).Append("\n");
            sb.Append("  CatchAllField: ").Append(CatchAllField).Append("\n");
            sb.Append("  CollapsedPathField: ").Append(CollapsedPathField).Append("\n");
            sb.Append("  PathDepthField: ").Append(PathDepthField).Append("\n");
            sb.Append("  CommitPolicy: ").Append(CommitPolicy).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  PathRestrictions: ").Append(PathRestrictions).Append("\n");
            sb.Append("  PropertyRestrictions: ").Append(PropertyRestrictions).Append("\n");
            sb.Append("  PrimarytypesRestrictions: ").Append(PrimarytypesRestrictions).Append("\n");
            sb.Append("  IgnoredProperties: ").Append(IgnoredProperties).Append("\n");
            sb.Append("  UsedProperties: ").Append(UsedProperties).Append("\n");
            sb.Append("  TypeMappings: ").Append(TypeMappings).Append("\n");
            sb.Append("  PropertyMappings: ").Append(PropertyMappings).Append("\n");
            sb.Append("  CollapseJcrcontentNodes: ").Append(CollapseJcrcontentNodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PathDescField == input.PathDescField ||
                    (this.PathDescField != null &&
                    this.PathDescField.Equals(input.PathDescField))
                ) && 
                (
                    this.PathChildField == input.PathChildField ||
                    (this.PathChildField != null &&
                    this.PathChildField.Equals(input.PathChildField))
                ) && 
                (
                    this.PathParentField == input.PathParentField ||
                    (this.PathParentField != null &&
                    this.PathParentField.Equals(input.PathParentField))
                ) && 
                (
                    this.PathExactField == input.PathExactField ||
                    (this.PathExactField != null &&
                    this.PathExactField.Equals(input.PathExactField))
                ) && 
                (
                    this.CatchAllField == input.CatchAllField ||
                    (this.CatchAllField != null &&
                    this.CatchAllField.Equals(input.CatchAllField))
                ) && 
                (
                    this.CollapsedPathField == input.CollapsedPathField ||
                    (this.CollapsedPathField != null &&
                    this.CollapsedPathField.Equals(input.CollapsedPathField))
                ) && 
                (
                    this.PathDepthField == input.PathDepthField ||
                    (this.PathDepthField != null &&
                    this.PathDepthField.Equals(input.PathDepthField))
                ) && 
                (
                    this.CommitPolicy == input.CommitPolicy ||
                    (this.CommitPolicy != null &&
                    this.CommitPolicy.Equals(input.CommitPolicy))
                ) && 
                (
                    this.Rows == input.Rows ||
                    (this.Rows != null &&
                    this.Rows.Equals(input.Rows))
                ) && 
                (
                    this.PathRestrictions == input.PathRestrictions ||
                    (this.PathRestrictions != null &&
                    this.PathRestrictions.Equals(input.PathRestrictions))
                ) && 
                (
                    this.PropertyRestrictions == input.PropertyRestrictions ||
                    (this.PropertyRestrictions != null &&
                    this.PropertyRestrictions.Equals(input.PropertyRestrictions))
                ) && 
                (
                    this.PrimarytypesRestrictions == input.PrimarytypesRestrictions ||
                    (this.PrimarytypesRestrictions != null &&
                    this.PrimarytypesRestrictions.Equals(input.PrimarytypesRestrictions))
                ) && 
                (
                    this.IgnoredProperties == input.IgnoredProperties ||
                    (this.IgnoredProperties != null &&
                    this.IgnoredProperties.Equals(input.IgnoredProperties))
                ) && 
                (
                    this.UsedProperties == input.UsedProperties ||
                    (this.UsedProperties != null &&
                    this.UsedProperties.Equals(input.UsedProperties))
                ) && 
                (
                    this.TypeMappings == input.TypeMappings ||
                    (this.TypeMappings != null &&
                    this.TypeMappings.Equals(input.TypeMappings))
                ) && 
                (
                    this.PropertyMappings == input.PropertyMappings ||
                    (this.PropertyMappings != null &&
                    this.PropertyMappings.Equals(input.PropertyMappings))
                ) && 
                (
                    this.CollapseJcrcontentNodes == input.CollapseJcrcontentNodes ||
                    (this.CollapseJcrcontentNodes != null &&
                    this.CollapseJcrcontentNodes.Equals(input.CollapseJcrcontentNodes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PathDescField != null)
                    hashCode = hashCode * 59 + this.PathDescField.GetHashCode();
                if (this.PathChildField != null)
                    hashCode = hashCode * 59 + this.PathChildField.GetHashCode();
                if (this.PathParentField != null)
                    hashCode = hashCode * 59 + this.PathParentField.GetHashCode();
                if (this.PathExactField != null)
                    hashCode = hashCode * 59 + this.PathExactField.GetHashCode();
                if (this.CatchAllField != null)
                    hashCode = hashCode * 59 + this.CatchAllField.GetHashCode();
                if (this.CollapsedPathField != null)
                    hashCode = hashCode * 59 + this.CollapsedPathField.GetHashCode();
                if (this.PathDepthField != null)
                    hashCode = hashCode * 59 + this.PathDepthField.GetHashCode();
                if (this.CommitPolicy != null)
                    hashCode = hashCode * 59 + this.CommitPolicy.GetHashCode();
                if (this.Rows != null)
                    hashCode = hashCode * 59 + this.Rows.GetHashCode();
                if (this.PathRestrictions != null)
                    hashCode = hashCode * 59 + this.PathRestrictions.GetHashCode();
                if (this.PropertyRestrictions != null)
                    hashCode = hashCode * 59 + this.PropertyRestrictions.GetHashCode();
                if (this.PrimarytypesRestrictions != null)
                    hashCode = hashCode * 59 + this.PrimarytypesRestrictions.GetHashCode();
                if (this.IgnoredProperties != null)
                    hashCode = hashCode * 59 + this.IgnoredProperties.GetHashCode();
                if (this.UsedProperties != null)
                    hashCode = hashCode * 59 + this.UsedProperties.GetHashCode();
                if (this.TypeMappings != null)
                    hashCode = hashCode * 59 + this.TypeMappings.GetHashCode();
                if (this.PropertyMappings != null)
                    hashCode = hashCode * 59 + this.PropertyMappings.GetHashCode();
                if (this.CollapseJcrcontentNodes != null)
                    hashCode = hashCode * 59 + this.CollapseJcrcontentNodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
