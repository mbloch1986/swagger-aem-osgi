/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties
    : public ModelBase
{
public:
    OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties();
    virtual ~OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getFelixMemoryusageDumpThreshold() const;
    bool felixMemoryusageDumpThresholdIsSet() const;
    void unsetFelix_memoryusage_dump_threshold();
    void setFelixMemoryusageDumpThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getFelixMemoryusageDumpInterval() const;
    bool felixMemoryusageDumpIntervalIsSet() const;
    void unsetFelix_memoryusage_dump_interval();
    void setFelixMemoryusageDumpInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getFelixMemoryusageDumpLocation() const;
    bool felixMemoryusageDumpLocationIsSet() const;
    void unsetFelix_memoryusage_dump_location();
    void setFelixMemoryusageDumpLocation(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Felix_memoryusage_dump_threshold;
    bool m_Felix_memoryusage_dump_thresholdIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Felix_memoryusage_dump_interval;
    bool m_Felix_memoryusage_dump_intervalIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Felix_memoryusage_dump_location;
    bool m_Felix_memoryusage_dump_locationIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties_H_ */
