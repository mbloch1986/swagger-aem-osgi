/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyDropDown;
import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties {
  
  @SerializedName("usersPath")
  private ConfigNodePropertyString usersPath = null;
  @SerializedName("groupsPath")
  private ConfigNodePropertyString groupsPath = null;
  @SerializedName("systemRelativePath")
  private ConfigNodePropertyString systemRelativePath = null;
  @SerializedName("defaultDepth")
  private ConfigNodePropertyInteger defaultDepth = null;
  @SerializedName("importBehavior")
  private ConfigNodePropertyDropDown importBehavior = null;
  @SerializedName("passwordHashAlgorithm")
  private ConfigNodePropertyString passwordHashAlgorithm = null;
  @SerializedName("passwordHashIterations")
  private ConfigNodePropertyInteger passwordHashIterations = null;
  @SerializedName("passwordSaltSize")
  private ConfigNodePropertyInteger passwordSaltSize = null;
  @SerializedName("omitAdminPw")
  private ConfigNodePropertyBoolean omitAdminPw = null;
  @SerializedName("supportAutoSave")
  private ConfigNodePropertyBoolean supportAutoSave = null;
  @SerializedName("passwordMaxAge")
  private ConfigNodePropertyInteger passwordMaxAge = null;
  @SerializedName("initialPasswordChange")
  private ConfigNodePropertyBoolean initialPasswordChange = null;
  @SerializedName("passwordHistorySize")
  private ConfigNodePropertyInteger passwordHistorySize = null;
  @SerializedName("passwordExpiryForAdmin")
  private ConfigNodePropertyBoolean passwordExpiryForAdmin = null;
  @SerializedName("cacheExpiration")
  private ConfigNodePropertyInteger cacheExpiration = null;
  @SerializedName("enableRFC7613UsercaseMappedProfile")
  private ConfigNodePropertyBoolean enableRFC7613UsercaseMappedProfile = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getUsersPath() {
    return usersPath;
  }
  public void setUsersPath(ConfigNodePropertyString usersPath) {
    this.usersPath = usersPath;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getGroupsPath() {
    return groupsPath;
  }
  public void setGroupsPath(ConfigNodePropertyString groupsPath) {
    this.groupsPath = groupsPath;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getSystemRelativePath() {
    return systemRelativePath;
  }
  public void setSystemRelativePath(ConfigNodePropertyString systemRelativePath) {
    this.systemRelativePath = systemRelativePath;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getDefaultDepth() {
    return defaultDepth;
  }
  public void setDefaultDepth(ConfigNodePropertyInteger defaultDepth) {
    this.defaultDepth = defaultDepth;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyDropDown getImportBehavior() {
    return importBehavior;
  }
  public void setImportBehavior(ConfigNodePropertyDropDown importBehavior) {
    this.importBehavior = importBehavior;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getPasswordHashAlgorithm() {
    return passwordHashAlgorithm;
  }
  public void setPasswordHashAlgorithm(ConfigNodePropertyString passwordHashAlgorithm) {
    this.passwordHashAlgorithm = passwordHashAlgorithm;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getPasswordHashIterations() {
    return passwordHashIterations;
  }
  public void setPasswordHashIterations(ConfigNodePropertyInteger passwordHashIterations) {
    this.passwordHashIterations = passwordHashIterations;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getPasswordSaltSize() {
    return passwordSaltSize;
  }
  public void setPasswordSaltSize(ConfigNodePropertyInteger passwordSaltSize) {
    this.passwordSaltSize = passwordSaltSize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getOmitAdminPw() {
    return omitAdminPw;
  }
  public void setOmitAdminPw(ConfigNodePropertyBoolean omitAdminPw) {
    this.omitAdminPw = omitAdminPw;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getSupportAutoSave() {
    return supportAutoSave;
  }
  public void setSupportAutoSave(ConfigNodePropertyBoolean supportAutoSave) {
    this.supportAutoSave = supportAutoSave;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getPasswordMaxAge() {
    return passwordMaxAge;
  }
  public void setPasswordMaxAge(ConfigNodePropertyInteger passwordMaxAge) {
    this.passwordMaxAge = passwordMaxAge;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getInitialPasswordChange() {
    return initialPasswordChange;
  }
  public void setInitialPasswordChange(ConfigNodePropertyBoolean initialPasswordChange) {
    this.initialPasswordChange = initialPasswordChange;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getPasswordHistorySize() {
    return passwordHistorySize;
  }
  public void setPasswordHistorySize(ConfigNodePropertyInteger passwordHistorySize) {
    this.passwordHistorySize = passwordHistorySize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getPasswordExpiryForAdmin() {
    return passwordExpiryForAdmin;
  }
  public void setPasswordExpiryForAdmin(ConfigNodePropertyBoolean passwordExpiryForAdmin) {
    this.passwordExpiryForAdmin = passwordExpiryForAdmin;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getCacheExpiration() {
    return cacheExpiration;
  }
  public void setCacheExpiration(ConfigNodePropertyInteger cacheExpiration) {
    this.cacheExpiration = cacheExpiration;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getEnableRFC7613UsercaseMappedProfile() {
    return enableRFC7613UsercaseMappedProfile;
  }
  public void setEnableRFC7613UsercaseMappedProfile(ConfigNodePropertyBoolean enableRFC7613UsercaseMappedProfile) {
    this.enableRFC7613UsercaseMappedProfile = enableRFC7613UsercaseMappedProfile;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties = (OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties) o;
    return (this.usersPath == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.usersPath == null : this.usersPath.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.usersPath)) &&
        (this.groupsPath == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.groupsPath == null : this.groupsPath.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.groupsPath)) &&
        (this.systemRelativePath == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.systemRelativePath == null : this.systemRelativePath.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.systemRelativePath)) &&
        (this.defaultDepth == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.defaultDepth == null : this.defaultDepth.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.defaultDepth)) &&
        (this.importBehavior == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.importBehavior == null : this.importBehavior.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.importBehavior)) &&
        (this.passwordHashAlgorithm == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHashAlgorithm == null : this.passwordHashAlgorithm.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHashAlgorithm)) &&
        (this.passwordHashIterations == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHashIterations == null : this.passwordHashIterations.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHashIterations)) &&
        (this.passwordSaltSize == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordSaltSize == null : this.passwordSaltSize.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordSaltSize)) &&
        (this.omitAdminPw == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.omitAdminPw == null : this.omitAdminPw.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.omitAdminPw)) &&
        (this.supportAutoSave == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.supportAutoSave == null : this.supportAutoSave.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.supportAutoSave)) &&
        (this.passwordMaxAge == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordMaxAge == null : this.passwordMaxAge.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordMaxAge)) &&
        (this.initialPasswordChange == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.initialPasswordChange == null : this.initialPasswordChange.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.initialPasswordChange)) &&
        (this.passwordHistorySize == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHistorySize == null : this.passwordHistorySize.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHistorySize)) &&
        (this.passwordExpiryForAdmin == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordExpiryForAdmin == null : this.passwordExpiryForAdmin.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordExpiryForAdmin)) &&
        (this.cacheExpiration == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.cacheExpiration == null : this.cacheExpiration.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.cacheExpiration)) &&
        (this.enableRFC7613UsercaseMappedProfile == null ? orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.enableRFC7613UsercaseMappedProfile == null : this.enableRFC7613UsercaseMappedProfile.equals(orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.enableRFC7613UsercaseMappedProfile));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.usersPath == null ? 0: this.usersPath.hashCode());
    result = 31 * result + (this.groupsPath == null ? 0: this.groupsPath.hashCode());
    result = 31 * result + (this.systemRelativePath == null ? 0: this.systemRelativePath.hashCode());
    result = 31 * result + (this.defaultDepth == null ? 0: this.defaultDepth.hashCode());
    result = 31 * result + (this.importBehavior == null ? 0: this.importBehavior.hashCode());
    result = 31 * result + (this.passwordHashAlgorithm == null ? 0: this.passwordHashAlgorithm.hashCode());
    result = 31 * result + (this.passwordHashIterations == null ? 0: this.passwordHashIterations.hashCode());
    result = 31 * result + (this.passwordSaltSize == null ? 0: this.passwordSaltSize.hashCode());
    result = 31 * result + (this.omitAdminPw == null ? 0: this.omitAdminPw.hashCode());
    result = 31 * result + (this.supportAutoSave == null ? 0: this.supportAutoSave.hashCode());
    result = 31 * result + (this.passwordMaxAge == null ? 0: this.passwordMaxAge.hashCode());
    result = 31 * result + (this.initialPasswordChange == null ? 0: this.initialPasswordChange.hashCode());
    result = 31 * result + (this.passwordHistorySize == null ? 0: this.passwordHistorySize.hashCode());
    result = 31 * result + (this.passwordExpiryForAdmin == null ? 0: this.passwordExpiryForAdmin.hashCode());
    result = 31 * result + (this.cacheExpiration == null ? 0: this.cacheExpiration.hashCode());
    result = 31 * result + (this.enableRFC7613UsercaseMappedProfile == null ? 0: this.enableRFC7613UsercaseMappedProfile.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties {\n");
    
    sb.append("  usersPath: ").append(usersPath).append("\n");
    sb.append("  groupsPath: ").append(groupsPath).append("\n");
    sb.append("  systemRelativePath: ").append(systemRelativePath).append("\n");
    sb.append("  defaultDepth: ").append(defaultDepth).append("\n");
    sb.append("  importBehavior: ").append(importBehavior).append("\n");
    sb.append("  passwordHashAlgorithm: ").append(passwordHashAlgorithm).append("\n");
    sb.append("  passwordHashIterations: ").append(passwordHashIterations).append("\n");
    sb.append("  passwordSaltSize: ").append(passwordSaltSize).append("\n");
    sb.append("  omitAdminPw: ").append(omitAdminPw).append("\n");
    sb.append("  supportAutoSave: ").append(supportAutoSave).append("\n");
    sb.append("  passwordMaxAge: ").append(passwordMaxAge).append("\n");
    sb.append("  initialPasswordChange: ").append(initialPasswordChange).append("\n");
    sb.append("  passwordHistorySize: ").append(passwordHistorySize).append("\n");
    sb.append("  passwordExpiryForAdmin: ").append(passwordExpiryForAdmin).append("\n");
    sb.append("  cacheExpiration: ").append(cacheExpiration).append("\n");
    sb.append("  enableRFC7613UsercaseMappedProfile: ").append(enableRFC7613UsercaseMappedProfile).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
