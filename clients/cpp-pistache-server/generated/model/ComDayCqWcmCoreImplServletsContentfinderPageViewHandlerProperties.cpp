/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties()
{
    m_GuessTotalIsSet = false;
    m_TagTitleSearchIsSet = false;
    
}

ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::~ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties()
{
}

void ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_GuessTotalIsSet)
    {
        val["guessTotal"] = ModelBase::toJson(m_GuessTotal);
    }
    if(m_TagTitleSearchIsSet)
    {
        val["tagTitleSearch"] = ModelBase::toJson(m_TagTitleSearch);
    }
    

    return val;
}

void ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("guessTotal") != val.end())
    {
        if(!val["guessTotal"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["guessTotal"]);
            setGuessTotal( newItem );
        }
        
    }
    if(val.find("tagTitleSearch") != val.end())
    {
        if(!val["tagTitleSearch"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["tagTitleSearch"]);
            setTagTitleSearch( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::getGuessTotal() const
{
    return m_GuessTotal;
}
void ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::setGuessTotal(ConfigNodePropertyString const& value)
{
    m_GuessTotal = value;
    m_GuessTotalIsSet = true;
}
bool ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::guessTotalIsSet() const
{
    return m_GuessTotalIsSet;
}
void ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::unsetGuessTotal()
{
    m_GuessTotalIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::getTagTitleSearch() const
{
    return m_TagTitleSearch;
}
void ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::setTagTitleSearch(ConfigNodePropertyBoolean const& value)
{
    m_TagTitleSearch = value;
    m_TagTitleSearchIsSet = true;
}
bool ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::tagTitleSearchIsSet() const
{
    return m_TagTitleSearchIsSet;
}
void ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::unsetTagTitleSearch()
{
    m_TagTitleSearchIsSet = false;
}

}
}
}
}

