/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplDamEventPurgeServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplDamEventPurgeServiceProperties::ComDayCqDamCoreImplDamEventPurgeServiceProperties()
{
    m_Scheduler_expressionIsSet = false;
    m_MaxSavedActivitiesIsSet = false;
    m_SaveIntervalIsSet = false;
    m_EnableActivityPurgeIsSet = false;
    m_EventTypesIsSet = false;
}

ComDayCqDamCoreImplDamEventPurgeServiceProperties::~ComDayCqDamCoreImplDamEventPurgeServiceProperties()
{
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplDamEventPurgeServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Scheduler_expressionIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.expression")] = ModelBase::toJson(m_Scheduler_expression);
    }
    if(m_MaxSavedActivitiesIsSet)
    {
        val[utility::conversions::to_string_t("maxSavedActivities")] = ModelBase::toJson(m_MaxSavedActivities);
    }
    if(m_SaveIntervalIsSet)
    {
        val[utility::conversions::to_string_t("saveInterval")] = ModelBase::toJson(m_SaveInterval);
    }
    if(m_EnableActivityPurgeIsSet)
    {
        val[utility::conversions::to_string_t("enableActivityPurge")] = ModelBase::toJson(m_EnableActivityPurge);
    }
    if(m_EventTypesIsSet)
    {
        val[utility::conversions::to_string_t("eventTypes")] = ModelBase::toJson(m_EventTypes);
    }

    return val;
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("scheduler.expression")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.expression")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.expression")]);
            setSchedulerExpression( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxSavedActivities")))
    {
        if(!val[utility::conversions::to_string_t("maxSavedActivities")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxSavedActivities")]);
            setMaxSavedActivities( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("saveInterval")))
    {
        if(!val[utility::conversions::to_string_t("saveInterval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("saveInterval")]);
            setSaveInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enableActivityPurge")))
    {
        if(!val[utility::conversions::to_string_t("enableActivityPurge")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableActivityPurge")]);
            setEnableActivityPurge( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventTypes")))
    {
        if(!val[utility::conversions::to_string_t("eventTypes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("eventTypes")]);
            setEventTypes( newItem );
        }
    }
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Scheduler_expressionIsSet)
    {
        if (m_Scheduler_expression.get())
        {
            m_Scheduler_expression->toMultipart(multipart, utility::conversions::to_string_t("scheduler.expression."));
        }
    }
    if(m_MaxSavedActivitiesIsSet)
    {
        if (m_MaxSavedActivities.get())
        {
            m_MaxSavedActivities->toMultipart(multipart, utility::conversions::to_string_t("maxSavedActivities."));
        }
    }
    if(m_SaveIntervalIsSet)
    {
        if (m_SaveInterval.get())
        {
            m_SaveInterval->toMultipart(multipart, utility::conversions::to_string_t("saveInterval."));
        }
    }
    if(m_EnableActivityPurgeIsSet)
    {
        if (m_EnableActivityPurge.get())
        {
            m_EnableActivityPurge->toMultipart(multipart, utility::conversions::to_string_t("enableActivityPurge."));
        }
    }
    if(m_EventTypesIsSet)
    {
        if (m_EventTypes.get())
        {
            m_EventTypes->toMultipart(multipart, utility::conversions::to_string_t("eventTypes."));
        }
    }
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.expression")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.expression")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.expression."));
            setSchedulerExpression( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxSavedActivities")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxSavedActivities")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxSavedActivities."));
            setMaxSavedActivities( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("saveInterval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("saveInterval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("saveInterval."));
            setSaveInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enableActivityPurge")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableActivityPurge")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableActivityPurge."));
            setEnableActivityPurge( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventTypes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("eventTypes")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("eventTypes."));
            setEventTypes( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplDamEventPurgeServiceProperties::getSchedulerExpression() const
{
    return m_Scheduler_expression;
}


void ComDayCqDamCoreImplDamEventPurgeServiceProperties::setSchedulerExpression(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Scheduler_expression = value;
    m_Scheduler_expressionIsSet = true;
}
bool ComDayCqDamCoreImplDamEventPurgeServiceProperties::schedulerExpressionIsSet() const
{
    return m_Scheduler_expressionIsSet;
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::unsetScheduler_expression()
{
    m_Scheduler_expressionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplDamEventPurgeServiceProperties::getMaxSavedActivities() const
{
    return m_MaxSavedActivities;
}


void ComDayCqDamCoreImplDamEventPurgeServiceProperties::setMaxSavedActivities(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxSavedActivities = value;
    m_MaxSavedActivitiesIsSet = true;
}
bool ComDayCqDamCoreImplDamEventPurgeServiceProperties::maxSavedActivitiesIsSet() const
{
    return m_MaxSavedActivitiesIsSet;
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::unsetMaxSavedActivities()
{
    m_MaxSavedActivitiesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplDamEventPurgeServiceProperties::getSaveInterval() const
{
    return m_SaveInterval;
}


void ComDayCqDamCoreImplDamEventPurgeServiceProperties::setSaveInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_SaveInterval = value;
    m_SaveIntervalIsSet = true;
}
bool ComDayCqDamCoreImplDamEventPurgeServiceProperties::saveIntervalIsSet() const
{
    return m_SaveIntervalIsSet;
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::unsetSaveInterval()
{
    m_SaveIntervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplDamEventPurgeServiceProperties::getEnableActivityPurge() const
{
    return m_EnableActivityPurge;
}


void ComDayCqDamCoreImplDamEventPurgeServiceProperties::setEnableActivityPurge(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableActivityPurge = value;
    m_EnableActivityPurgeIsSet = true;
}
bool ComDayCqDamCoreImplDamEventPurgeServiceProperties::enableActivityPurgeIsSet() const
{
    return m_EnableActivityPurgeIsSet;
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::unsetEnableActivityPurge()
{
    m_EnableActivityPurgeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComDayCqDamCoreImplDamEventPurgeServiceProperties::getEventTypes() const
{
    return m_EventTypes;
}


void ComDayCqDamCoreImplDamEventPurgeServiceProperties::setEventTypes(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_EventTypes = value;
    m_EventTypesIsSet = true;
}
bool ComDayCqDamCoreImplDamEventPurgeServiceProperties::eventTypesIsSet() const
{
    return m_EventTypesIsSet;
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::unsetEventTypes()
{
    m_EventTypesIsSet = false;
}

}
}
}
}

