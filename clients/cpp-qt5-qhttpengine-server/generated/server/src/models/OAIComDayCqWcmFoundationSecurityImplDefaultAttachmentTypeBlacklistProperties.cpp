/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties() {
    this->init();
}

OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::~OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties() {
    
}

void
OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::init() {
    m_default_attachment_type_blacklist_isSet = false;
    m_baseline_attachment_type_blacklist_isSet = false;
}

void
OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(default_attachment_type_blacklist, json[QString("default.attachment.type.blacklist")]);
    
    ::OpenAPI::fromJsonValue(baseline_attachment_type_blacklist, json[QString("baseline.attachment.type.blacklist")]);
    
}

QString
OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::asJsonObject() const {
    QJsonObject obj;
	if(default_attachment_type_blacklist.isSet()){
        obj.insert(QString("default.attachment.type.blacklist"), ::OpenAPI::toJsonValue(default_attachment_type_blacklist));
    }
	if(baseline_attachment_type_blacklist.isSet()){
        obj.insert(QString("baseline.attachment.type.blacklist"), ::OpenAPI::toJsonValue(baseline_attachment_type_blacklist));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::getDefaultAttachmentTypeBlacklist() const {
    return default_attachment_type_blacklist;
}
void
OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::setDefaultAttachmentTypeBlacklist(const OAIConfigNodePropertyArray &default_attachment_type_blacklist) {
    this->default_attachment_type_blacklist = default_attachment_type_blacklist;
    this->m_default_attachment_type_blacklist_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::getBaselineAttachmentTypeBlacklist() const {
    return baseline_attachment_type_blacklist;
}
void
OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::setBaselineAttachmentTypeBlacklist(const OAIConfigNodePropertyArray &baseline_attachment_type_blacklist) {
    this->baseline_attachment_type_blacklist = baseline_attachment_type_blacklist;
    this->m_baseline_attachment_type_blacklist_isSet = true;
}


bool
OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(default_attachment_type_blacklist.isSet()){ isObjectUpdated = true; break;}
    
        if(baseline_attachment_type_blacklist.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

