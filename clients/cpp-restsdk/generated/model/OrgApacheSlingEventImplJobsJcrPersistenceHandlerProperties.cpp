/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties()
{
    m_Job_consumermanager_disableDistributionIsSet = false;
    m_Startup_delayIsSet = false;
    m_Cleanup_periodIsSet = false;
}

OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::~OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties()
{
}

void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Job_consumermanager_disableDistributionIsSet)
    {
        val[utility::conversions::to_string_t("job.consumermanager.disableDistribution")] = ModelBase::toJson(m_Job_consumermanager_disableDistribution);
    }
    if(m_Startup_delayIsSet)
    {
        val[utility::conversions::to_string_t("startup.delay")] = ModelBase::toJson(m_Startup_delay);
    }
    if(m_Cleanup_periodIsSet)
    {
        val[utility::conversions::to_string_t("cleanup.period")] = ModelBase::toJson(m_Cleanup_period);
    }

    return val;
}

void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("job.consumermanager.disableDistribution")))
    {
        if(!val[utility::conversions::to_string_t("job.consumermanager.disableDistribution")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("job.consumermanager.disableDistribution")]);
            setJobConsumermanagerDisableDistribution( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startup.delay")))
    {
        if(!val[utility::conversions::to_string_t("startup.delay")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("startup.delay")]);
            setStartupDelay( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cleanup.period")))
    {
        if(!val[utility::conversions::to_string_t("cleanup.period")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cleanup.period")]);
            setCleanupPeriod( newItem );
        }
    }
}

void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Job_consumermanager_disableDistributionIsSet)
    {
        if (m_Job_consumermanager_disableDistribution.get())
        {
            m_Job_consumermanager_disableDistribution->toMultipart(multipart, utility::conversions::to_string_t("job.consumermanager.disableDistribution."));
        }
    }
    if(m_Startup_delayIsSet)
    {
        if (m_Startup_delay.get())
        {
            m_Startup_delay->toMultipart(multipart, utility::conversions::to_string_t("startup.delay."));
        }
    }
    if(m_Cleanup_periodIsSet)
    {
        if (m_Cleanup_period.get())
        {
            m_Cleanup_period->toMultipart(multipart, utility::conversions::to_string_t("cleanup.period."));
        }
    }
}

void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("job.consumermanager.disableDistribution")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("job.consumermanager.disableDistribution")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("job.consumermanager.disableDistribution."));
            setJobConsumermanagerDisableDistribution( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startup.delay")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("startup.delay")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("startup.delay."));
            setStartupDelay( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cleanup.period")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cleanup.period")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cleanup.period."));
            setCleanupPeriod( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::getJobConsumermanagerDisableDistribution() const
{
    return m_Job_consumermanager_disableDistribution;
}


void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::setJobConsumermanagerDisableDistribution(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Job_consumermanager_disableDistribution = value;
    m_Job_consumermanager_disableDistributionIsSet = true;
}
bool OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::jobConsumermanagerDisableDistributionIsSet() const
{
    return m_Job_consumermanager_disableDistributionIsSet;
}

void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::unsetJob_consumermanager_disableDistribution()
{
    m_Job_consumermanager_disableDistributionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::getStartupDelay() const
{
    return m_Startup_delay;
}


void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::setStartupDelay(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Startup_delay = value;
    m_Startup_delayIsSet = true;
}
bool OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::startupDelayIsSet() const
{
    return m_Startup_delayIsSet;
}

void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::unsetStartup_delay()
{
    m_Startup_delayIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::getCleanupPeriod() const
{
    return m_Cleanup_period;
}


void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::setCleanupPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cleanup_period = value;
    m_Cleanup_periodIsSet = true;
}
bool OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::cleanupPeriodIsSet() const
{
    return m_Cleanup_periodIsSet;
}

void OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties::unsetCleanup_period()
{
    m_Cleanup_periodIsSet = false;
}

}
}
}
}

