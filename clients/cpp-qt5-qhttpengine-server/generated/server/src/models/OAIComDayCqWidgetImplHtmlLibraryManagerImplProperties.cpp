/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties() {
    this->init();
}

OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::~OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties() {
    
}

void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::init() {
    m_htmllibmanager_clientmanager_isSet = false;
    m_htmllibmanager_debug_isSet = false;
    m_htmllibmanager_debug_console_isSet = false;
    m_htmllibmanager_debug_init_js_isSet = false;
    m_htmllibmanager_defaultthemename_isSet = false;
    m_htmllibmanager_defaultuserthemename_isSet = false;
    m_htmllibmanager_firebuglite_path_isSet = false;
    m_htmllibmanager_force_cq_url_info_isSet = false;
    m_htmllibmanager_gzip_isSet = false;
    m_htmllibmanager_maxage_isSet = false;
    m_htmllibmanager_max_data_uri_size_isSet = false;
    m_htmllibmanager_minify_isSet = false;
    m_htmllibmanager_path_list_isSet = false;
    m_htmllibmanager_timing_isSet = false;
}

void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(htmllibmanager_clientmanager, json[QString("htmllibmanager.clientmanager")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_debug, json[QString("htmllibmanager.debug")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_debug_console, json[QString("htmllibmanager.debug.console")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_debug_init_js, json[QString("htmllibmanager.debug.init.js")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_defaultthemename, json[QString("htmllibmanager.defaultthemename")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_defaultuserthemename, json[QString("htmllibmanager.defaultuserthemename")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_firebuglite_path, json[QString("htmllibmanager.firebuglite.path")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_force_cq_url_info, json[QString("htmllibmanager.forceCQUrlInfo")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_gzip, json[QString("htmllibmanager.gzip")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_maxage, json[QString("htmllibmanager.maxage")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_max_data_uri_size, json[QString("htmllibmanager.maxDataUriSize")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_minify, json[QString("htmllibmanager.minify")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_path_list, json[QString("htmllibmanager.path.list")]);
    
    ::OpenAPI::fromJsonValue(htmllibmanager_timing, json[QString("htmllibmanager.timing")]);
    
}

QString
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(htmllibmanager_clientmanager.isSet()){
        obj.insert(QString("htmllibmanager.clientmanager"), ::OpenAPI::toJsonValue(htmllibmanager_clientmanager));
    }
	if(htmllibmanager_debug.isSet()){
        obj.insert(QString("htmllibmanager.debug"), ::OpenAPI::toJsonValue(htmllibmanager_debug));
    }
	if(htmllibmanager_debug_console.isSet()){
        obj.insert(QString("htmllibmanager.debug.console"), ::OpenAPI::toJsonValue(htmllibmanager_debug_console));
    }
	if(htmllibmanager_debug_init_js.isSet()){
        obj.insert(QString("htmllibmanager.debug.init.js"), ::OpenAPI::toJsonValue(htmllibmanager_debug_init_js));
    }
	if(htmllibmanager_defaultthemename.isSet()){
        obj.insert(QString("htmllibmanager.defaultthemename"), ::OpenAPI::toJsonValue(htmllibmanager_defaultthemename));
    }
	if(htmllibmanager_defaultuserthemename.isSet()){
        obj.insert(QString("htmllibmanager.defaultuserthemename"), ::OpenAPI::toJsonValue(htmllibmanager_defaultuserthemename));
    }
	if(htmllibmanager_firebuglite_path.isSet()){
        obj.insert(QString("htmllibmanager.firebuglite.path"), ::OpenAPI::toJsonValue(htmllibmanager_firebuglite_path));
    }
	if(htmllibmanager_force_cq_url_info.isSet()){
        obj.insert(QString("htmllibmanager.forceCQUrlInfo"), ::OpenAPI::toJsonValue(htmllibmanager_force_cq_url_info));
    }
	if(htmllibmanager_gzip.isSet()){
        obj.insert(QString("htmllibmanager.gzip"), ::OpenAPI::toJsonValue(htmllibmanager_gzip));
    }
	if(htmllibmanager_maxage.isSet()){
        obj.insert(QString("htmllibmanager.maxage"), ::OpenAPI::toJsonValue(htmllibmanager_maxage));
    }
	if(htmllibmanager_max_data_uri_size.isSet()){
        obj.insert(QString("htmllibmanager.maxDataUriSize"), ::OpenAPI::toJsonValue(htmllibmanager_max_data_uri_size));
    }
	if(htmllibmanager_minify.isSet()){
        obj.insert(QString("htmllibmanager.minify"), ::OpenAPI::toJsonValue(htmllibmanager_minify));
    }
	if(htmllibmanager_path_list.isSet()){
        obj.insert(QString("htmllibmanager.path.list"), ::OpenAPI::toJsonValue(htmllibmanager_path_list));
    }
	if(htmllibmanager_timing.isSet()){
        obj.insert(QString("htmllibmanager.timing"), ::OpenAPI::toJsonValue(htmllibmanager_timing));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerClientmanager() const {
    return htmllibmanager_clientmanager;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerClientmanager(const OAIConfigNodePropertyString &htmllibmanager_clientmanager) {
    this->htmllibmanager_clientmanager = htmllibmanager_clientmanager;
    this->m_htmllibmanager_clientmanager_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerDebug() const {
    return htmllibmanager_debug;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerDebug(const OAIConfigNodePropertyBoolean &htmllibmanager_debug) {
    this->htmllibmanager_debug = htmllibmanager_debug;
    this->m_htmllibmanager_debug_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerDebugConsole() const {
    return htmllibmanager_debug_console;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerDebugConsole(const OAIConfigNodePropertyBoolean &htmllibmanager_debug_console) {
    this->htmllibmanager_debug_console = htmllibmanager_debug_console;
    this->m_htmllibmanager_debug_console_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerDebugInitJs() const {
    return htmllibmanager_debug_init_js;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerDebugInitJs(const OAIConfigNodePropertyString &htmllibmanager_debug_init_js) {
    this->htmllibmanager_debug_init_js = htmllibmanager_debug_init_js;
    this->m_htmllibmanager_debug_init_js_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerDefaultthemename() const {
    return htmllibmanager_defaultthemename;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerDefaultthemename(const OAIConfigNodePropertyString &htmllibmanager_defaultthemename) {
    this->htmllibmanager_defaultthemename = htmllibmanager_defaultthemename;
    this->m_htmllibmanager_defaultthemename_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerDefaultuserthemename() const {
    return htmllibmanager_defaultuserthemename;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerDefaultuserthemename(const OAIConfigNodePropertyString &htmllibmanager_defaultuserthemename) {
    this->htmllibmanager_defaultuserthemename = htmllibmanager_defaultuserthemename;
    this->m_htmllibmanager_defaultuserthemename_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerFirebuglitePath() const {
    return htmllibmanager_firebuglite_path;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerFirebuglitePath(const OAIConfigNodePropertyString &htmllibmanager_firebuglite_path) {
    this->htmllibmanager_firebuglite_path = htmllibmanager_firebuglite_path;
    this->m_htmllibmanager_firebuglite_path_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerForceCqUrlInfo() const {
    return htmllibmanager_force_cq_url_info;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerForceCqUrlInfo(const OAIConfigNodePropertyBoolean &htmllibmanager_force_cq_url_info) {
    this->htmllibmanager_force_cq_url_info = htmllibmanager_force_cq_url_info;
    this->m_htmllibmanager_force_cq_url_info_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerGzip() const {
    return htmllibmanager_gzip;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerGzip(const OAIConfigNodePropertyBoolean &htmllibmanager_gzip) {
    this->htmllibmanager_gzip = htmllibmanager_gzip;
    this->m_htmllibmanager_gzip_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerMaxage() const {
    return htmllibmanager_maxage;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerMaxage(const OAIConfigNodePropertyInteger &htmllibmanager_maxage) {
    this->htmllibmanager_maxage = htmllibmanager_maxage;
    this->m_htmllibmanager_maxage_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerMaxDataUriSize() const {
    return htmllibmanager_max_data_uri_size;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerMaxDataUriSize(const OAIConfigNodePropertyInteger &htmllibmanager_max_data_uri_size) {
    this->htmllibmanager_max_data_uri_size = htmllibmanager_max_data_uri_size;
    this->m_htmllibmanager_max_data_uri_size_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerMinify() const {
    return htmllibmanager_minify;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerMinify(const OAIConfigNodePropertyBoolean &htmllibmanager_minify) {
    this->htmllibmanager_minify = htmllibmanager_minify;
    this->m_htmllibmanager_minify_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerPathList() const {
    return htmllibmanager_path_list;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerPathList(const OAIConfigNodePropertyArray &htmllibmanager_path_list) {
    this->htmllibmanager_path_list = htmllibmanager_path_list;
    this->m_htmllibmanager_path_list_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::getHtmllibmanagerTiming() const {
    return htmllibmanager_timing;
}
void
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::setHtmllibmanagerTiming(const OAIConfigNodePropertyBoolean &htmllibmanager_timing) {
    this->htmllibmanager_timing = htmllibmanager_timing;
    this->m_htmllibmanager_timing_isSet = true;
}


bool
OAIComDayCqWidgetImplHtmlLibraryManagerImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(htmllibmanager_clientmanager.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_debug.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_debug_console.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_debug_init_js.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_defaultthemename.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_defaultuserthemename.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_firebuglite_path.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_force_cq_url_info.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_gzip.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_maxage.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_max_data_uri_size.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_minify.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_path_list.isSet()){ isObjectUpdated = true; break;}
    
        if(htmllibmanager_timing.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

