/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheFelixSystemreadySystemReadyMonitorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheFelixSystemreadySystemReadyMonitorProperties::OrgApacheFelixSystemreadySystemReadyMonitorProperties()
{
    m_Poll_intervalIsSet = false;
}

OrgApacheFelixSystemreadySystemReadyMonitorProperties::~OrgApacheFelixSystemreadySystemReadyMonitorProperties()
{
}

void OrgApacheFelixSystemreadySystemReadyMonitorProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheFelixSystemreadySystemReadyMonitorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Poll_intervalIsSet)
    {
        val[utility::conversions::to_string_t("poll.interval")] = ModelBase::toJson(m_Poll_interval);
    }

    return val;
}

void OrgApacheFelixSystemreadySystemReadyMonitorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("poll.interval")))
    {
        if(!val[utility::conversions::to_string_t("poll.interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("poll.interval")]);
            setPollInterval( newItem );
        }
    }
}

void OrgApacheFelixSystemreadySystemReadyMonitorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Poll_intervalIsSet)
    {
        if (m_Poll_interval.get())
        {
            m_Poll_interval->toMultipart(multipart, utility::conversions::to_string_t("poll.interval."));
        }
    }
}

void OrgApacheFelixSystemreadySystemReadyMonitorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("poll.interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("poll.interval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("poll.interval."));
            setPollInterval( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixSystemreadySystemReadyMonitorProperties::getPollInterval() const
{
    return m_Poll_interval;
}


void OrgApacheFelixSystemreadySystemReadyMonitorProperties::setPollInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Poll_interval = value;
    m_Poll_intervalIsSet = true;
}
bool OrgApacheFelixSystemreadySystemReadyMonitorProperties::pollIntervalIsSet() const
{
    return m_Poll_intervalIsSet;
}

void OrgApacheFelixSystemreadySystemReadyMonitorProperties::unsetPoll_interval()
{
    m_Poll_intervalIsSet = false;
}

}
}
}
}

