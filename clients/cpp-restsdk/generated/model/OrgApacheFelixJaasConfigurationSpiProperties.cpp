/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheFelixJaasConfigurationSpiProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheFelixJaasConfigurationSpiProperties::OrgApacheFelixJaasConfigurationSpiProperties()
{
    m_Jaas_defaultRealmNameIsSet = false;
    m_Jaas_configProviderNameIsSet = false;
    m_Jaas_globalConfigPolicyIsSet = false;
}

OrgApacheFelixJaasConfigurationSpiProperties::~OrgApacheFelixJaasConfigurationSpiProperties()
{
}

void OrgApacheFelixJaasConfigurationSpiProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheFelixJaasConfigurationSpiProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Jaas_defaultRealmNameIsSet)
    {
        val[utility::conversions::to_string_t("jaas.defaultRealmName")] = ModelBase::toJson(m_Jaas_defaultRealmName);
    }
    if(m_Jaas_configProviderNameIsSet)
    {
        val[utility::conversions::to_string_t("jaas.configProviderName")] = ModelBase::toJson(m_Jaas_configProviderName);
    }
    if(m_Jaas_globalConfigPolicyIsSet)
    {
        val[utility::conversions::to_string_t("jaas.globalConfigPolicy")] = ModelBase::toJson(m_Jaas_globalConfigPolicy);
    }

    return val;
}

void OrgApacheFelixJaasConfigurationSpiProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("jaas.defaultRealmName")))
    {
        if(!val[utility::conversions::to_string_t("jaas.defaultRealmName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.defaultRealmName")]);
            setJaasDefaultRealmName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jaas.configProviderName")))
    {
        if(!val[utility::conversions::to_string_t("jaas.configProviderName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.configProviderName")]);
            setJaasConfigProviderName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jaas.globalConfigPolicy")))
    {
        if(!val[utility::conversions::to_string_t("jaas.globalConfigPolicy")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.globalConfigPolicy")]);
            setJaasGlobalConfigPolicy( newItem );
        }
    }
}

void OrgApacheFelixJaasConfigurationSpiProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Jaas_defaultRealmNameIsSet)
    {
        if (m_Jaas_defaultRealmName.get())
        {
            m_Jaas_defaultRealmName->toMultipart(multipart, utility::conversions::to_string_t("jaas.defaultRealmName."));
        }
    }
    if(m_Jaas_configProviderNameIsSet)
    {
        if (m_Jaas_configProviderName.get())
        {
            m_Jaas_configProviderName->toMultipart(multipart, utility::conversions::to_string_t("jaas.configProviderName."));
        }
    }
    if(m_Jaas_globalConfigPolicyIsSet)
    {
        if (m_Jaas_globalConfigPolicy.get())
        {
            m_Jaas_globalConfigPolicy->toMultipart(multipart, utility::conversions::to_string_t("jaas.globalConfigPolicy."));
        }
    }
}

void OrgApacheFelixJaasConfigurationSpiProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("jaas.defaultRealmName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.defaultRealmName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.defaultRealmName."));
            setJaasDefaultRealmName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jaas.configProviderName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.configProviderName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.configProviderName."));
            setJaasConfigProviderName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jaas.globalConfigPolicy")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.globalConfigPolicy")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.globalConfigPolicy."));
            setJaasGlobalConfigPolicy( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixJaasConfigurationSpiProperties::getJaasDefaultRealmName() const
{
    return m_Jaas_defaultRealmName;
}


void OrgApacheFelixJaasConfigurationSpiProperties::setJaasDefaultRealmName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jaas_defaultRealmName = value;
    m_Jaas_defaultRealmNameIsSet = true;
}
bool OrgApacheFelixJaasConfigurationSpiProperties::jaasDefaultRealmNameIsSet() const
{
    return m_Jaas_defaultRealmNameIsSet;
}

void OrgApacheFelixJaasConfigurationSpiProperties::unsetJaas_defaultRealmName()
{
    m_Jaas_defaultRealmNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixJaasConfigurationSpiProperties::getJaasConfigProviderName() const
{
    return m_Jaas_configProviderName;
}


void OrgApacheFelixJaasConfigurationSpiProperties::setJaasConfigProviderName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jaas_configProviderName = value;
    m_Jaas_configProviderNameIsSet = true;
}
bool OrgApacheFelixJaasConfigurationSpiProperties::jaasConfigProviderNameIsSet() const
{
    return m_Jaas_configProviderNameIsSet;
}

void OrgApacheFelixJaasConfigurationSpiProperties::unsetJaas_configProviderName()
{
    m_Jaas_configProviderNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheFelixJaasConfigurationSpiProperties::getJaasGlobalConfigPolicy() const
{
    return m_Jaas_globalConfigPolicy;
}


void OrgApacheFelixJaasConfigurationSpiProperties::setJaasGlobalConfigPolicy(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Jaas_globalConfigPolicy = value;
    m_Jaas_globalConfigPolicyIsSet = true;
}
bool OrgApacheFelixJaasConfigurationSpiProperties::jaasGlobalConfigPolicyIsSet() const
{
    return m_Jaas_globalConfigPolicyIsSet;
}

void OrgApacheFelixJaasConfigurationSpiProperties::unsetJaas_globalConfigPolicy()
{
    m_Jaas_globalConfigPolicyIsSet = false;
}

}
}
}
}

