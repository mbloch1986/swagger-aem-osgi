/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties()
{
    m_Cq_analytics_sitecatalyst_service_datacenter_urlIsSet = false;
    m_DevhostnamepatternsIsSet = false;
    m_Connection_timeoutIsSet = false;
    m_Socket_timeoutIsSet = false;
    
}

ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::~ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties()
{
}

void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cq_analytics_sitecatalyst_service_datacenter_urlIsSet)
    {
        val["cq.analytics.sitecatalyst.service.datacenter.url"] = ModelBase::toJson(m_Cq_analytics_sitecatalyst_service_datacenter_url);
    }
    if(m_DevhostnamepatternsIsSet)
    {
        val["devhostnamepatterns"] = ModelBase::toJson(m_Devhostnamepatterns);
    }
    if(m_Connection_timeoutIsSet)
    {
        val["connection.timeout"] = ModelBase::toJson(m_Connection_timeout);
    }
    if(m_Socket_timeoutIsSet)
    {
        val["socket.timeout"] = ModelBase::toJson(m_Socket_timeout);
    }
    

    return val;
}

void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cq.analytics.sitecatalyst.service.datacenter.url") != val.end())
    {
        if(!val["cq.analytics.sitecatalyst.service.datacenter.url"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.analytics.sitecatalyst.service.datacenter.url"]);
            setCqAnalyticsSitecatalystServiceDatacenterUrl( newItem );
        }
        
    }
    if(val.find("devhostnamepatterns") != val.end())
    {
        if(!val["devhostnamepatterns"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["devhostnamepatterns"]);
            setDevhostnamepatterns( newItem );
        }
        
    }
    if(val.find("connection.timeout") != val.end())
    {
        if(!val["connection.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["connection.timeout"]);
            setConnectionTimeout( newItem );
        }
        
    }
    if(val.find("socket.timeout") != val.end())
    {
        if(!val["socket.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["socket.timeout"]);
            setSocketTimeout( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::getCqAnalyticsSitecatalystServiceDatacenterUrl() const
{
    return m_Cq_analytics_sitecatalyst_service_datacenter_url;
}
void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::setCqAnalyticsSitecatalystServiceDatacenterUrl(ConfigNodePropertyArray const& value)
{
    m_Cq_analytics_sitecatalyst_service_datacenter_url = value;
    m_Cq_analytics_sitecatalyst_service_datacenter_urlIsSet = true;
}
bool ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::cqAnalyticsSitecatalystServiceDatacenterUrlIsSet() const
{
    return m_Cq_analytics_sitecatalyst_service_datacenter_urlIsSet;
}
void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::unsetCq_analytics_sitecatalyst_service_datacenter_url()
{
    m_Cq_analytics_sitecatalyst_service_datacenter_urlIsSet = false;
}
ConfigNodePropertyArray ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::getDevhostnamepatterns() const
{
    return m_Devhostnamepatterns;
}
void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::setDevhostnamepatterns(ConfigNodePropertyArray const& value)
{
    m_Devhostnamepatterns = value;
    m_DevhostnamepatternsIsSet = true;
}
bool ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::devhostnamepatternsIsSet() const
{
    return m_DevhostnamepatternsIsSet;
}
void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::unsetDevhostnamepatterns()
{
    m_DevhostnamepatternsIsSet = false;
}
ConfigNodePropertyInteger ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::getConnectionTimeout() const
{
    return m_Connection_timeout;
}
void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::setConnectionTimeout(ConfigNodePropertyInteger const& value)
{
    m_Connection_timeout = value;
    m_Connection_timeoutIsSet = true;
}
bool ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::connectionTimeoutIsSet() const
{
    return m_Connection_timeoutIsSet;
}
void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::unsetConnection_timeout()
{
    m_Connection_timeoutIsSet = false;
}
ConfigNodePropertyInteger ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::getSocketTimeout() const
{
    return m_Socket_timeout;
}
void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::setSocketTimeout(ConfigNodePropertyInteger const& value)
{
    m_Socket_timeout = value;
    m_Socket_timeoutIsSet = true;
}
bool ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::socketTimeoutIsSet() const
{
    return m_Socket_timeoutIsSet;
}
void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::unsetSocket_timeout()
{
    m_Socket_timeoutIsSet = false;
}

}
}
}
}

