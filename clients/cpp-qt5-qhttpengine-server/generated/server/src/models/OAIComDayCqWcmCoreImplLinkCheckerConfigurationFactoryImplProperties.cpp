/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties() {
    this->init();
}

OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::~OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties() {
    
}

void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::init() {
    m_link_expired_prefix_isSet = false;
    m_link_expired_remove_isSet = false;
    m_link_expired_suffix_isSet = false;
    m_link_invalid_prefix_isSet = false;
    m_link_invalid_remove_isSet = false;
    m_link_invalid_suffix_isSet = false;
    m_link_predated_prefix_isSet = false;
    m_link_predated_remove_isSet = false;
    m_link_predated_suffix_isSet = false;
    m_link_wcmmodes_isSet = false;
}

void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(link_expired_prefix, json[QString("link.expired.prefix")]);
    
    ::OpenAPI::fromJsonValue(link_expired_remove, json[QString("link.expired.remove")]);
    
    ::OpenAPI::fromJsonValue(link_expired_suffix, json[QString("link.expired.suffix")]);
    
    ::OpenAPI::fromJsonValue(link_invalid_prefix, json[QString("link.invalid.prefix")]);
    
    ::OpenAPI::fromJsonValue(link_invalid_remove, json[QString("link.invalid.remove")]);
    
    ::OpenAPI::fromJsonValue(link_invalid_suffix, json[QString("link.invalid.suffix")]);
    
    ::OpenAPI::fromJsonValue(link_predated_prefix, json[QString("link.predated.prefix")]);
    
    ::OpenAPI::fromJsonValue(link_predated_remove, json[QString("link.predated.remove")]);
    
    ::OpenAPI::fromJsonValue(link_predated_suffix, json[QString("link.predated.suffix")]);
    
    ::OpenAPI::fromJsonValue(link_wcmmodes, json[QString("link.wcmmodes")]);
    
}

QString
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(link_expired_prefix.isSet()){
        obj.insert(QString("link.expired.prefix"), ::OpenAPI::toJsonValue(link_expired_prefix));
    }
	if(link_expired_remove.isSet()){
        obj.insert(QString("link.expired.remove"), ::OpenAPI::toJsonValue(link_expired_remove));
    }
	if(link_expired_suffix.isSet()){
        obj.insert(QString("link.expired.suffix"), ::OpenAPI::toJsonValue(link_expired_suffix));
    }
	if(link_invalid_prefix.isSet()){
        obj.insert(QString("link.invalid.prefix"), ::OpenAPI::toJsonValue(link_invalid_prefix));
    }
	if(link_invalid_remove.isSet()){
        obj.insert(QString("link.invalid.remove"), ::OpenAPI::toJsonValue(link_invalid_remove));
    }
	if(link_invalid_suffix.isSet()){
        obj.insert(QString("link.invalid.suffix"), ::OpenAPI::toJsonValue(link_invalid_suffix));
    }
	if(link_predated_prefix.isSet()){
        obj.insert(QString("link.predated.prefix"), ::OpenAPI::toJsonValue(link_predated_prefix));
    }
	if(link_predated_remove.isSet()){
        obj.insert(QString("link.predated.remove"), ::OpenAPI::toJsonValue(link_predated_remove));
    }
	if(link_predated_suffix.isSet()){
        obj.insert(QString("link.predated.suffix"), ::OpenAPI::toJsonValue(link_predated_suffix));
    }
	if(link_wcmmodes.isSet()){
        obj.insert(QString("link.wcmmodes"), ::OpenAPI::toJsonValue(link_wcmmodes));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkExpiredPrefix() const {
    return link_expired_prefix;
}
void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkExpiredPrefix(const OAIConfigNodePropertyString &link_expired_prefix) {
    this->link_expired_prefix = link_expired_prefix;
    this->m_link_expired_prefix_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkExpiredRemove() const {
    return link_expired_remove;
}
void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkExpiredRemove(const OAIConfigNodePropertyBoolean &link_expired_remove) {
    this->link_expired_remove = link_expired_remove;
    this->m_link_expired_remove_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkExpiredSuffix() const {
    return link_expired_suffix;
}
void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkExpiredSuffix(const OAIConfigNodePropertyString &link_expired_suffix) {
    this->link_expired_suffix = link_expired_suffix;
    this->m_link_expired_suffix_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkInvalidPrefix() const {
    return link_invalid_prefix;
}
void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkInvalidPrefix(const OAIConfigNodePropertyString &link_invalid_prefix) {
    this->link_invalid_prefix = link_invalid_prefix;
    this->m_link_invalid_prefix_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkInvalidRemove() const {
    return link_invalid_remove;
}
void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkInvalidRemove(const OAIConfigNodePropertyBoolean &link_invalid_remove) {
    this->link_invalid_remove = link_invalid_remove;
    this->m_link_invalid_remove_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkInvalidSuffix() const {
    return link_invalid_suffix;
}
void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkInvalidSuffix(const OAIConfigNodePropertyString &link_invalid_suffix) {
    this->link_invalid_suffix = link_invalid_suffix;
    this->m_link_invalid_suffix_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkPredatedPrefix() const {
    return link_predated_prefix;
}
void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkPredatedPrefix(const OAIConfigNodePropertyString &link_predated_prefix) {
    this->link_predated_prefix = link_predated_prefix;
    this->m_link_predated_prefix_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkPredatedRemove() const {
    return link_predated_remove;
}
void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkPredatedRemove(const OAIConfigNodePropertyBoolean &link_predated_remove) {
    this->link_predated_remove = link_predated_remove;
    this->m_link_predated_remove_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkPredatedSuffix() const {
    return link_predated_suffix;
}
void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkPredatedSuffix(const OAIConfigNodePropertyString &link_predated_suffix) {
    this->link_predated_suffix = link_predated_suffix;
    this->m_link_predated_suffix_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkWcmmodes() const {
    return link_wcmmodes;
}
void
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkWcmmodes(const OAIConfigNodePropertyArray &link_wcmmodes) {
    this->link_wcmmodes = link_wcmmodes;
    this->m_link_wcmmodes_isSet = true;
}


bool
OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(link_expired_prefix.isSet()){ isObjectUpdated = true; break;}
    
        if(link_expired_remove.isSet()){ isObjectUpdated = true; break;}
    
        if(link_expired_suffix.isSet()){ isObjectUpdated = true; break;}
    
        if(link_invalid_prefix.isSet()){ isObjectUpdated = true; break;}
    
        if(link_invalid_remove.isSet()){ isObjectUpdated = true; break;}
    
        if(link_invalid_suffix.isSet()){ isObjectUpdated = true; break;}
    
        if(link_predated_prefix.isSet()){ isObjectUpdated = true; break;}
    
        if(link_predated_remove.isSet()){ isObjectUpdated = true; break;}
    
        if(link_predated_suffix.isSet()){ isObjectUpdated = true; break;}
    
        if(link_wcmmodes.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

