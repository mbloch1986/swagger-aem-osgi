/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties() {
    init();
}

OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::~OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::init() {
    enabled = new OAIConfigNodePropertyBoolean();
    m_enabled_isSet = false;
    config_path = new OAIConfigNodePropertyString();
    m_config_path_isSet = false;
    fallback_paths = new OAIConfigNodePropertyArray();
    m_fallback_paths_isSet = false;
    config_collection_inheritance_property_names = new OAIConfigNodePropertyArray();
    m_config_collection_inheritance_property_names_isSet = false;
}

void
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::cleanup() {
    if(enabled != nullptr) { 
        delete enabled;
    }
    if(config_path != nullptr) { 
        delete config_path;
    }
    if(fallback_paths != nullptr) { 
        delete fallback_paths;
    }
    if(config_collection_inheritance_property_names != nullptr) { 
        delete config_collection_inheritance_property_names;
    }
}

OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties*
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&enabled, pJson["enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&config_path, pJson["configPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&fallback_paths, pJson["fallbackPaths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&config_collection_inheritance_property_names, pJson["configCollectionInheritancePropertyNames"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::asJsonObject() {
    QJsonObject obj;
    if((enabled != nullptr) && (enabled->isSet())){
        toJsonValue(QString("enabled"), enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((config_path != nullptr) && (config_path->isSet())){
        toJsonValue(QString("configPath"), config_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((fallback_paths != nullptr) && (fallback_paths->isSet())){
        toJsonValue(QString("fallbackPaths"), fallback_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((config_collection_inheritance_property_names != nullptr) && (config_collection_inheritance_property_names->isSet())){
        toJsonValue(QString("configCollectionInheritancePropertyNames"), config_collection_inheritance_property_names, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::getEnabled() {
    return enabled;
}
void
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::setEnabled(OAIConfigNodePropertyBoolean* enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::getConfigPath() {
    return config_path;
}
void
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::setConfigPath(OAIConfigNodePropertyString* config_path) {
    this->config_path = config_path;
    this->m_config_path_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::getFallbackPaths() {
    return fallback_paths;
}
void
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::setFallbackPaths(OAIConfigNodePropertyArray* fallback_paths) {
    this->fallback_paths = fallback_paths;
    this->m_fallback_paths_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::getConfigCollectionInheritancePropertyNames() {
    return config_collection_inheritance_property_names;
}
void
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::setConfigCollectionInheritancePropertyNames(OAIConfigNodePropertyArray* config_collection_inheritance_property_names) {
    this->config_collection_inheritance_property_names = config_collection_inheritance_property_names;
    this->m_config_collection_inheritance_property_names_isSet = true;
}


bool
OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(enabled != nullptr && enabled->isSet()){ isObjectUpdated = true; break;}
        if(config_path != nullptr && config_path->isSet()){ isObjectUpdated = true; break;}
        if(fallback_paths != nullptr && fallback_paths->isSet()){ isObjectUpdated = true; break;}
        if(config_collection_inheritance_property_names != nullptr && config_collection_inheritance_property_names->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

