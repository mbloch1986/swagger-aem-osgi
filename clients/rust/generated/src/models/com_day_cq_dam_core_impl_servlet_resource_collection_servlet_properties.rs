/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletResourceCollectionServletProperties {
  #[serde(rename = "sling.servlet.resourceTypes")]
  sling_servlet_resource_types: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "sling.servlet.methods")]
  sling_servlet_methods: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sling.servlet.selectors")]
  sling_servlet_selectors: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "download.config")]
  download_config: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "view.selector")]
  view_selector: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "send_email")]
  send_email: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqDamCoreImplServletResourceCollectionServletProperties {
  pub fn new() -> ComDayCqDamCoreImplServletResourceCollectionServletProperties {
    ComDayCqDamCoreImplServletResourceCollectionServletProperties {
      sling_servlet_resource_types: None,
      sling_servlet_methods: None,
      sling_servlet_selectors: None,
      download_config: None,
      view_selector: None,
      send_email: None
    }
  }

  pub fn set_sling_servlet_resource_types(&mut self, sling_servlet_resource_types: ::models::ConfigNodePropertyArray) {
    self.sling_servlet_resource_types = Some(sling_servlet_resource_types);
  }

  pub fn with_sling_servlet_resource_types(mut self, sling_servlet_resource_types: ::models::ConfigNodePropertyArray) -> ComDayCqDamCoreImplServletResourceCollectionServletProperties {
    self.sling_servlet_resource_types = Some(sling_servlet_resource_types);
    self
  }

  pub fn sling_servlet_resource_types(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.sling_servlet_resource_types.as_ref()
  }

  pub fn reset_sling_servlet_resource_types(&mut self) {
    self.sling_servlet_resource_types = None;
  }

  pub fn set_sling_servlet_methods(&mut self, sling_servlet_methods: ::models::ConfigNodePropertyString) {
    self.sling_servlet_methods = Some(sling_servlet_methods);
  }

  pub fn with_sling_servlet_methods(mut self, sling_servlet_methods: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplServletResourceCollectionServletProperties {
    self.sling_servlet_methods = Some(sling_servlet_methods);
    self
  }

  pub fn sling_servlet_methods(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_servlet_methods.as_ref()
  }

  pub fn reset_sling_servlet_methods(&mut self) {
    self.sling_servlet_methods = None;
  }

  pub fn set_sling_servlet_selectors(&mut self, sling_servlet_selectors: ::models::ConfigNodePropertyString) {
    self.sling_servlet_selectors = Some(sling_servlet_selectors);
  }

  pub fn with_sling_servlet_selectors(mut self, sling_servlet_selectors: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplServletResourceCollectionServletProperties {
    self.sling_servlet_selectors = Some(sling_servlet_selectors);
    self
  }

  pub fn sling_servlet_selectors(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_servlet_selectors.as_ref()
  }

  pub fn reset_sling_servlet_selectors(&mut self) {
    self.sling_servlet_selectors = None;
  }

  pub fn set_download_config(&mut self, download_config: ::models::ConfigNodePropertyString) {
    self.download_config = Some(download_config);
  }

  pub fn with_download_config(mut self, download_config: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplServletResourceCollectionServletProperties {
    self.download_config = Some(download_config);
    self
  }

  pub fn download_config(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.download_config.as_ref()
  }

  pub fn reset_download_config(&mut self) {
    self.download_config = None;
  }

  pub fn set_view_selector(&mut self, view_selector: ::models::ConfigNodePropertyString) {
    self.view_selector = Some(view_selector);
  }

  pub fn with_view_selector(mut self, view_selector: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplServletResourceCollectionServletProperties {
    self.view_selector = Some(view_selector);
    self
  }

  pub fn view_selector(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.view_selector.as_ref()
  }

  pub fn reset_view_selector(&mut self) {
    self.view_selector = None;
  }

  pub fn set_send_email(&mut self, send_email: ::models::ConfigNodePropertyBoolean) {
    self.send_email = Some(send_email);
  }

  pub fn with_send_email(mut self, send_email: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCoreImplServletResourceCollectionServletProperties {
    self.send_email = Some(send_email);
    self
  }

  pub fn send_email(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.send_email.as_ref()
  }

  pub fn reset_send_email(&mut self) {
    self.send_email = None;
  }

}



