/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties()
{
    
}

OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::~OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties()
{
}

std::string OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMinPoolSize() const
{
    return m_MinPoolSize;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMinPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinPoolSize = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMaxPoolSize() const
{
    return m_MaxPoolSize;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMaxPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxPoolSize = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getQueueSize() const
{
    return m_QueueSize;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_QueueSize = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMaxThreadAge() const
{
    return m_MaxThreadAge;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMaxThreadAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxThreadAge = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getKeepAliveTime() const
{
    return m_KeepAliveTime;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setKeepAliveTime(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_KeepAliveTime = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getBlockPolicy() const
{
    return m_BlockPolicy;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setBlockPolicy(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_BlockPolicy = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getShutdownGraceful() const
{
    return m_ShutdownGraceful;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setShutdownGraceful(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_ShutdownGraceful = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getDaemon() const
{
    return m_Daemon;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setDaemon(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Daemon = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getShutdownWaitTime() const
{
    return m_ShutdownWaitTime;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setShutdownWaitTime(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ShutdownWaitTime = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getPriority() const
{
    return m_Priority;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setPriority(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Priority = value;
}

}
}
}
}

