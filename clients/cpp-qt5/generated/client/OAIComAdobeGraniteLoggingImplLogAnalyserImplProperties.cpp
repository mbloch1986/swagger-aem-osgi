/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties() {
    init();
}

OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::~OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::init() {
    messages_queue_size = new OAIConfigNodePropertyInteger();
    m_messages_queue_size_isSet = false;
    logger_config = new OAIConfigNodePropertyArray();
    m_logger_config_isSet = false;
    messages_size = new OAIConfigNodePropertyInteger();
    m_messages_size_isSet = false;
}

void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::cleanup() {
    if(messages_queue_size != nullptr) { 
        delete messages_queue_size;
    }
    if(logger_config != nullptr) { 
        delete logger_config;
    }
    if(messages_size != nullptr) { 
        delete messages_size;
    }
}

OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties*
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&messages_queue_size, pJson["messages.queue.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&logger_config, pJson["logger.config"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&messages_size, pJson["messages.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::asJsonObject() {
    QJsonObject obj;
    if((messages_queue_size != nullptr) && (messages_queue_size->isSet())){
        toJsonValue(QString("messages.queue.size"), messages_queue_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((logger_config != nullptr) && (logger_config->isSet())){
        toJsonValue(QString("logger.config"), logger_config, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((messages_size != nullptr) && (messages_size->isSet())){
        toJsonValue(QString("messages.size"), messages_size, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::getMessagesQueueSize() {
    return messages_queue_size;
}
void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::setMessagesQueueSize(OAIConfigNodePropertyInteger* messages_queue_size) {
    this->messages_queue_size = messages_queue_size;
    this->m_messages_queue_size_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::getLoggerConfig() {
    return logger_config;
}
void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::setLoggerConfig(OAIConfigNodePropertyArray* logger_config) {
    this->logger_config = logger_config;
    this->m_logger_config_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::getMessagesSize() {
    return messages_size;
}
void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::setMessagesSize(OAIConfigNodePropertyInteger* messages_size) {
    this->messages_size = messages_size;
    this->m_messages_size_isSet = true;
}


bool
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(messages_queue_size != nullptr && messages_queue_size->isSet()){ isObjectUpdated = true; break;}
        if(logger_config != nullptr && logger_config->isSet()){ isObjectUpdated = true; break;}
        if(messages_size != nullptr && messages_size->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

