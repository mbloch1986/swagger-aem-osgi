/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties()
{
    m_Cdn_config_distribution_domainIsSet = false;
    m_Cdn_config_enable_rewritingIsSet = false;
    m_Cdn_config_path_prefixesIsSet = false;
    m_Cdn_config_cdnttlIsSet = false;
    m_Cdn_config_application_protocolIsSet = false;
    
}

ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::~ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties()
{
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cdn_config_distribution_domainIsSet)
    {
        val["cdn.config.distribution.domain"] = ModelBase::toJson(m_Cdn_config_distribution_domain);
    }
    if(m_Cdn_config_enable_rewritingIsSet)
    {
        val["cdn.config.enable.rewriting"] = ModelBase::toJson(m_Cdn_config_enable_rewriting);
    }
    if(m_Cdn_config_path_prefixesIsSet)
    {
        val["cdn.config.path.prefixes"] = ModelBase::toJson(m_Cdn_config_path_prefixes);
    }
    if(m_Cdn_config_cdnttlIsSet)
    {
        val["cdn.config.cdnttl"] = ModelBase::toJson(m_Cdn_config_cdnttl);
    }
    if(m_Cdn_config_application_protocolIsSet)
    {
        val["cdn.config.application.protocol"] = ModelBase::toJson(m_Cdn_config_application_protocol);
    }
    

    return val;
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cdn.config.distribution.domain") != val.end())
    {
        if(!val["cdn.config.distribution.domain"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cdn.config.distribution.domain"]);
            setCdnConfigDistributionDomain( newItem );
        }
        
    }
    if(val.find("cdn.config.enable.rewriting") != val.end())
    {
        if(!val["cdn.config.enable.rewriting"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cdn.config.enable.rewriting"]);
            setCdnConfigEnableRewriting( newItem );
        }
        
    }
    if(val.find("cdn.config.path.prefixes") != val.end())
    {
        if(!val["cdn.config.path.prefixes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cdn.config.path.prefixes"]);
            setCdnConfigPathPrefixes( newItem );
        }
        
    }
    if(val.find("cdn.config.cdnttl") != val.end())
    {
        if(!val["cdn.config.cdnttl"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cdn.config.cdnttl"]);
            setCdnConfigCdnttl( newItem );
        }
        
    }
    if(val.find("cdn.config.application.protocol") != val.end())
    {
        if(!val["cdn.config.application.protocol"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cdn.config.application.protocol"]);
            setCdnConfigApplicationProtocol( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigDistributionDomain() const
{
    return m_Cdn_config_distribution_domain;
}
void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigDistributionDomain(ConfigNodePropertyString const& value)
{
    m_Cdn_config_distribution_domain = value;
    m_Cdn_config_distribution_domainIsSet = true;
}
bool ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::cdnConfigDistributionDomainIsSet() const
{
    return m_Cdn_config_distribution_domainIsSet;
}
void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::unsetCdn_config_distribution_domain()
{
    m_Cdn_config_distribution_domainIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigEnableRewriting() const
{
    return m_Cdn_config_enable_rewriting;
}
void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigEnableRewriting(ConfigNodePropertyBoolean const& value)
{
    m_Cdn_config_enable_rewriting = value;
    m_Cdn_config_enable_rewritingIsSet = true;
}
bool ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::cdnConfigEnableRewritingIsSet() const
{
    return m_Cdn_config_enable_rewritingIsSet;
}
void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::unsetCdn_config_enable_rewriting()
{
    m_Cdn_config_enable_rewritingIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigPathPrefixes() const
{
    return m_Cdn_config_path_prefixes;
}
void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigPathPrefixes(ConfigNodePropertyArray const& value)
{
    m_Cdn_config_path_prefixes = value;
    m_Cdn_config_path_prefixesIsSet = true;
}
bool ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::cdnConfigPathPrefixesIsSet() const
{
    return m_Cdn_config_path_prefixesIsSet;
}
void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::unsetCdn_config_path_prefixes()
{
    m_Cdn_config_path_prefixesIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigCdnttl() const
{
    return m_Cdn_config_cdnttl;
}
void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigCdnttl(ConfigNodePropertyInteger const& value)
{
    m_Cdn_config_cdnttl = value;
    m_Cdn_config_cdnttlIsSet = true;
}
bool ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::cdnConfigCdnttlIsSet() const
{
    return m_Cdn_config_cdnttlIsSet;
}
void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::unsetCdn_config_cdnttl()
{
    m_Cdn_config_cdnttlIsSet = false;
}
ConfigNodePropertyString ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigApplicationProtocol() const
{
    return m_Cdn_config_application_protocol;
}
void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigApplicationProtocol(ConfigNodePropertyString const& value)
{
    m_Cdn_config_application_protocol = value;
    m_Cdn_config_application_protocolIsSet = true;
}
bool ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::cdnConfigApplicationProtocolIsSet() const
{
    return m_Cdn_config_application_protocolIsSet;
}
void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::unsetCdn_config_application_protocol()
{
    m_Cdn_config_application_protocolIsSet = false;
}

}
}
}
}

