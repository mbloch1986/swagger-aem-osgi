/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteHttpcacheFileFileCacheStoreProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::ComAdobeGraniteHttpcacheFileFileCacheStoreProperties()
{
    m_Com_adobe_granite_httpcache_file_documentRootIsSet = false;
    m_Com_adobe_granite_httpcache_file_includeHostIsSet = false;
}

ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::~ComAdobeGraniteHttpcacheFileFileCacheStoreProperties()
{
}

void ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Com_adobe_granite_httpcache_file_documentRootIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.httpcache.file.documentRoot")] = ModelBase::toJson(m_Com_adobe_granite_httpcache_file_documentRoot);
    }
    if(m_Com_adobe_granite_httpcache_file_includeHostIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.httpcache.file.includeHost")] = ModelBase::toJson(m_Com_adobe_granite_httpcache_file_includeHost);
    }

    return val;
}

void ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.httpcache.file.documentRoot")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.httpcache.file.documentRoot")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.httpcache.file.documentRoot")]);
            setComAdobeGraniteHttpcacheFileDocumentRoot( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.httpcache.file.includeHost")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.httpcache.file.includeHost")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.httpcache.file.includeHost")]);
            setComAdobeGraniteHttpcacheFileIncludeHost( newItem );
        }
    }
}

void ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Com_adobe_granite_httpcache_file_documentRootIsSet)
    {
        if (m_Com_adobe_granite_httpcache_file_documentRoot.get())
        {
            m_Com_adobe_granite_httpcache_file_documentRoot->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.httpcache.file.documentRoot."));
        }
    }
    if(m_Com_adobe_granite_httpcache_file_includeHostIsSet)
    {
        if (m_Com_adobe_granite_httpcache_file_includeHost.get())
        {
            m_Com_adobe_granite_httpcache_file_includeHost->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.httpcache.file.includeHost."));
        }
    }
}

void ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.httpcache.file.documentRoot")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.httpcache.file.documentRoot")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.httpcache.file.documentRoot."));
            setComAdobeGraniteHttpcacheFileDocumentRoot( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.httpcache.file.includeHost")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.httpcache.file.includeHost")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.httpcache.file.includeHost."));
            setComAdobeGraniteHttpcacheFileIncludeHost( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::getComAdobeGraniteHttpcacheFileDocumentRoot() const
{
    return m_Com_adobe_granite_httpcache_file_documentRoot;
}


void ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::setComAdobeGraniteHttpcacheFileDocumentRoot(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_httpcache_file_documentRoot = value;
    m_Com_adobe_granite_httpcache_file_documentRootIsSet = true;
}
bool ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::comAdobeGraniteHttpcacheFileDocumentRootIsSet() const
{
    return m_Com_adobe_granite_httpcache_file_documentRootIsSet;
}

void ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::unsetCom_adobe_granite_httpcache_file_documentRoot()
{
    m_Com_adobe_granite_httpcache_file_documentRootIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::getComAdobeGraniteHttpcacheFileIncludeHost() const
{
    return m_Com_adobe_granite_httpcache_file_includeHost;
}


void ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::setComAdobeGraniteHttpcacheFileIncludeHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_httpcache_file_includeHost = value;
    m_Com_adobe_granite_httpcache_file_includeHostIsSet = true;
}
bool ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::comAdobeGraniteHttpcacheFileIncludeHostIsSet() const
{
    return m_Com_adobe_granite_httpcache_file_includeHostIsSet;
}

void ComAdobeGraniteHttpcacheFileFileCacheStoreProperties::unsetCom_adobe_granite_httpcache_file_includeHost()
{
    m_Com_adobe_granite_httpcache_file_includeHostIsSet = false;
}

}
}
}
}

