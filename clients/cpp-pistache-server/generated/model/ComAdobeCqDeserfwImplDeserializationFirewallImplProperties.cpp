/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqDeserfwImplDeserializationFirewallImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::ComAdobeCqDeserfwImplDeserializationFirewallImplProperties()
{
    m_Firewall_deserialization_whitelistIsSet = false;
    m_Firewall_deserialization_blacklistIsSet = false;
    m_Firewall_deserialization_diagnosticsIsSet = false;
    
}

ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::~ComAdobeCqDeserfwImplDeserializationFirewallImplProperties()
{
}

void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Firewall_deserialization_whitelistIsSet)
    {
        val["firewall.deserialization.whitelist"] = ModelBase::toJson(m_Firewall_deserialization_whitelist);
    }
    if(m_Firewall_deserialization_blacklistIsSet)
    {
        val["firewall.deserialization.blacklist"] = ModelBase::toJson(m_Firewall_deserialization_blacklist);
    }
    if(m_Firewall_deserialization_diagnosticsIsSet)
    {
        val["firewall.deserialization.diagnostics"] = ModelBase::toJson(m_Firewall_deserialization_diagnostics);
    }
    

    return val;
}

void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("firewall.deserialization.whitelist") != val.end())
    {
        if(!val["firewall.deserialization.whitelist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["firewall.deserialization.whitelist"]);
            setFirewallDeserializationWhitelist( newItem );
        }
        
    }
    if(val.find("firewall.deserialization.blacklist") != val.end())
    {
        if(!val["firewall.deserialization.blacklist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["firewall.deserialization.blacklist"]);
            setFirewallDeserializationBlacklist( newItem );
        }
        
    }
    if(val.find("firewall.deserialization.diagnostics") != val.end())
    {
        if(!val["firewall.deserialization.diagnostics"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["firewall.deserialization.diagnostics"]);
            setFirewallDeserializationDiagnostics( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::getFirewallDeserializationWhitelist() const
{
    return m_Firewall_deserialization_whitelist;
}
void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::setFirewallDeserializationWhitelist(ConfigNodePropertyArray const& value)
{
    m_Firewall_deserialization_whitelist = value;
    m_Firewall_deserialization_whitelistIsSet = true;
}
bool ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::firewallDeserializationWhitelistIsSet() const
{
    return m_Firewall_deserialization_whitelistIsSet;
}
void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::unsetFirewall_deserialization_whitelist()
{
    m_Firewall_deserialization_whitelistIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::getFirewallDeserializationBlacklist() const
{
    return m_Firewall_deserialization_blacklist;
}
void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::setFirewallDeserializationBlacklist(ConfigNodePropertyArray const& value)
{
    m_Firewall_deserialization_blacklist = value;
    m_Firewall_deserialization_blacklistIsSet = true;
}
bool ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::firewallDeserializationBlacklistIsSet() const
{
    return m_Firewall_deserialization_blacklistIsSet;
}
void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::unsetFirewall_deserialization_blacklist()
{
    m_Firewall_deserialization_blacklistIsSet = false;
}
ConfigNodePropertyString ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::getFirewallDeserializationDiagnostics() const
{
    return m_Firewall_deserialization_diagnostics;
}
void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::setFirewallDeserializationDiagnostics(ConfigNodePropertyString const& value)
{
    m_Firewall_deserialization_diagnostics = value;
    m_Firewall_deserialization_diagnosticsIsSet = true;
}
bool ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::firewallDeserializationDiagnosticsIsSet() const
{
    return m_Firewall_deserialization_diagnosticsIsSet;
}
void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::unsetFirewall_deserialization_diagnostics()
{
    m_Firewall_deserialization_diagnosticsIsSet = false;
}

}
}
}
}

