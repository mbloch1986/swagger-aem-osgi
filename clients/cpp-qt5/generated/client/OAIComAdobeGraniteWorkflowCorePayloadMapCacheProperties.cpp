/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties() {
    init();
}

OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::~OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::init() {
    get_system_workflow_models = new OAIConfigNodePropertyArray();
    m_get_system_workflow_models_isSet = false;
    get_package_root_path = new OAIConfigNodePropertyString();
    m_get_package_root_path_isSet = false;
}

void
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::cleanup() {
    if(get_system_workflow_models != nullptr) { 
        delete get_system_workflow_models;
    }
    if(get_package_root_path != nullptr) { 
        delete get_package_root_path;
    }
}

OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties*
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&get_system_workflow_models, pJson["getSystemWorkflowModels"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&get_package_root_path, pJson["getPackageRootPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::asJsonObject() {
    QJsonObject obj;
    if((get_system_workflow_models != nullptr) && (get_system_workflow_models->isSet())){
        toJsonValue(QString("getSystemWorkflowModels"), get_system_workflow_models, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((get_package_root_path != nullptr) && (get_package_root_path->isSet())){
        toJsonValue(QString("getPackageRootPath"), get_package_root_path, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::getGetSystemWorkflowModels() {
    return get_system_workflow_models;
}
void
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::setGetSystemWorkflowModels(OAIConfigNodePropertyArray* get_system_workflow_models) {
    this->get_system_workflow_models = get_system_workflow_models;
    this->m_get_system_workflow_models_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::getGetPackageRootPath() {
    return get_package_root_path;
}
void
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::setGetPackageRootPath(OAIConfigNodePropertyString* get_package_root_path) {
    this->get_package_root_path = get_package_root_path;
    this->m_get_package_root_path_isSet = true;
}


bool
OAIComAdobeGraniteWorkflowCorePayloadMapCacheProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(get_system_workflow_models != nullptr && get_system_workflow_models->isSet()){ isObjectUpdated = true; break;}
        if(get_package_root_path != nullptr && get_package_root_path->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

