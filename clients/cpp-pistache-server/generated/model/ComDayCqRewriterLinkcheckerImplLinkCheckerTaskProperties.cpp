/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties()
{
    m_Scheduler_periodIsSet = false;
    m_Scheduler_concurrentIsSet = false;
    m_Good_link_test_intervalIsSet = false;
    m_Bad_link_test_intervalIsSet = false;
    m_Link_unused_intervalIsSet = false;
    m_Connection_timeoutIsSet = false;
    
}

ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::~ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties()
{
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Scheduler_periodIsSet)
    {
        val["scheduler.period"] = ModelBase::toJson(m_Scheduler_period);
    }
    if(m_Scheduler_concurrentIsSet)
    {
        val["scheduler.concurrent"] = ModelBase::toJson(m_Scheduler_concurrent);
    }
    if(m_Good_link_test_intervalIsSet)
    {
        val["good_link_test_interval"] = ModelBase::toJson(m_Good_link_test_interval);
    }
    if(m_Bad_link_test_intervalIsSet)
    {
        val["bad_link_test_interval"] = ModelBase::toJson(m_Bad_link_test_interval);
    }
    if(m_Link_unused_intervalIsSet)
    {
        val["link_unused_interval"] = ModelBase::toJson(m_Link_unused_interval);
    }
    if(m_Connection_timeoutIsSet)
    {
        val["connection.timeout"] = ModelBase::toJson(m_Connection_timeout);
    }
    

    return val;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::fromJson(nlohmann::json& val)
{
    if(val.find("scheduler.period") != val.end())
    {
        if(!val["scheduler.period"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["scheduler.period"]);
            setSchedulerPeriod( newItem );
        }
        
    }
    if(val.find("scheduler.concurrent") != val.end())
    {
        if(!val["scheduler.concurrent"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["scheduler.concurrent"]);
            setSchedulerConcurrent( newItem );
        }
        
    }
    if(val.find("good_link_test_interval") != val.end())
    {
        if(!val["good_link_test_interval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["good_link_test_interval"]);
            setGoodLinkTestInterval( newItem );
        }
        
    }
    if(val.find("bad_link_test_interval") != val.end())
    {
        if(!val["bad_link_test_interval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["bad_link_test_interval"]);
            setBadLinkTestInterval( newItem );
        }
        
    }
    if(val.find("link_unused_interval") != val.end())
    {
        if(!val["link_unused_interval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["link_unused_interval"]);
            setLinkUnusedInterval( newItem );
        }
        
    }
    if(val.find("connection.timeout") != val.end())
    {
        if(!val["connection.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["connection.timeout"]);
            setConnectionTimeout( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getSchedulerPeriod() const
{
    return m_Scheduler_period;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setSchedulerPeriod(ConfigNodePropertyInteger const& value)
{
    m_Scheduler_period = value;
    m_Scheduler_periodIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::schedulerPeriodIsSet() const
{
    return m_Scheduler_periodIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::unsetScheduler_period()
{
    m_Scheduler_periodIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getSchedulerConcurrent() const
{
    return m_Scheduler_concurrent;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setSchedulerConcurrent(ConfigNodePropertyBoolean const& value)
{
    m_Scheduler_concurrent = value;
    m_Scheduler_concurrentIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::schedulerConcurrentIsSet() const
{
    return m_Scheduler_concurrentIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::unsetScheduler_concurrent()
{
    m_Scheduler_concurrentIsSet = false;
}
ConfigNodePropertyInteger ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getGoodLinkTestInterval() const
{
    return m_Good_link_test_interval;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setGoodLinkTestInterval(ConfigNodePropertyInteger const& value)
{
    m_Good_link_test_interval = value;
    m_Good_link_test_intervalIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::goodLinkTestIntervalIsSet() const
{
    return m_Good_link_test_intervalIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::unsetGood_link_test_interval()
{
    m_Good_link_test_intervalIsSet = false;
}
ConfigNodePropertyInteger ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getBadLinkTestInterval() const
{
    return m_Bad_link_test_interval;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setBadLinkTestInterval(ConfigNodePropertyInteger const& value)
{
    m_Bad_link_test_interval = value;
    m_Bad_link_test_intervalIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::badLinkTestIntervalIsSet() const
{
    return m_Bad_link_test_intervalIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::unsetBad_link_test_interval()
{
    m_Bad_link_test_intervalIsSet = false;
}
ConfigNodePropertyInteger ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getLinkUnusedInterval() const
{
    return m_Link_unused_interval;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setLinkUnusedInterval(ConfigNodePropertyInteger const& value)
{
    m_Link_unused_interval = value;
    m_Link_unused_intervalIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::linkUnusedIntervalIsSet() const
{
    return m_Link_unused_intervalIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::unsetLink_unused_interval()
{
    m_Link_unused_intervalIsSet = false;
}
ConfigNodePropertyInteger ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getConnectionTimeout() const
{
    return m_Connection_timeout;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setConnectionTimeout(ConfigNodePropertyInteger const& value)
{
    m_Connection_timeout = value;
    m_Connection_timeoutIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::connectionTimeoutIsSet() const
{
    return m_Connection_timeoutIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::unsetConnection_timeout()
{
    m_Connection_timeoutIsSet = false;
}

}
}
}
}

