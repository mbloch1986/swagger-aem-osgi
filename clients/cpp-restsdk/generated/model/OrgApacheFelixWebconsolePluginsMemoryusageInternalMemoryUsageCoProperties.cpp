/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties()
{
    m_Felix_memoryusage_dump_thresholdIsSet = false;
    m_Felix_memoryusage_dump_intervalIsSet = false;
    m_Felix_memoryusage_dump_locationIsSet = false;
}

OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::~OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties()
{
}

void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Felix_memoryusage_dump_thresholdIsSet)
    {
        val[utility::conversions::to_string_t("felix.memoryusage.dump.threshold")] = ModelBase::toJson(m_Felix_memoryusage_dump_threshold);
    }
    if(m_Felix_memoryusage_dump_intervalIsSet)
    {
        val[utility::conversions::to_string_t("felix.memoryusage.dump.interval")] = ModelBase::toJson(m_Felix_memoryusage_dump_interval);
    }
    if(m_Felix_memoryusage_dump_locationIsSet)
    {
        val[utility::conversions::to_string_t("felix.memoryusage.dump.location")] = ModelBase::toJson(m_Felix_memoryusage_dump_location);
    }

    return val;
}

void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("felix.memoryusage.dump.threshold")))
    {
        if(!val[utility::conversions::to_string_t("felix.memoryusage.dump.threshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("felix.memoryusage.dump.threshold")]);
            setFelixMemoryusageDumpThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("felix.memoryusage.dump.interval")))
    {
        if(!val[utility::conversions::to_string_t("felix.memoryusage.dump.interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("felix.memoryusage.dump.interval")]);
            setFelixMemoryusageDumpInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("felix.memoryusage.dump.location")))
    {
        if(!val[utility::conversions::to_string_t("felix.memoryusage.dump.location")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("felix.memoryusage.dump.location")]);
            setFelixMemoryusageDumpLocation( newItem );
        }
    }
}

void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Felix_memoryusage_dump_thresholdIsSet)
    {
        if (m_Felix_memoryusage_dump_threshold.get())
        {
            m_Felix_memoryusage_dump_threshold->toMultipart(multipart, utility::conversions::to_string_t("felix.memoryusage.dump.threshold."));
        }
    }
    if(m_Felix_memoryusage_dump_intervalIsSet)
    {
        if (m_Felix_memoryusage_dump_interval.get())
        {
            m_Felix_memoryusage_dump_interval->toMultipart(multipart, utility::conversions::to_string_t("felix.memoryusage.dump.interval."));
        }
    }
    if(m_Felix_memoryusage_dump_locationIsSet)
    {
        if (m_Felix_memoryusage_dump_location.get())
        {
            m_Felix_memoryusage_dump_location->toMultipart(multipart, utility::conversions::to_string_t("felix.memoryusage.dump.location."));
        }
    }
}

void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("felix.memoryusage.dump.threshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("felix.memoryusage.dump.threshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("felix.memoryusage.dump.threshold."));
            setFelixMemoryusageDumpThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("felix.memoryusage.dump.interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("felix.memoryusage.dump.interval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("felix.memoryusage.dump.interval."));
            setFelixMemoryusageDumpInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("felix.memoryusage.dump.location")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("felix.memoryusage.dump.location")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("felix.memoryusage.dump.location."));
            setFelixMemoryusageDumpLocation( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::getFelixMemoryusageDumpThreshold() const
{
    return m_Felix_memoryusage_dump_threshold;
}


void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::setFelixMemoryusageDumpThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Felix_memoryusage_dump_threshold = value;
    m_Felix_memoryusage_dump_thresholdIsSet = true;
}
bool OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::felixMemoryusageDumpThresholdIsSet() const
{
    return m_Felix_memoryusage_dump_thresholdIsSet;
}

void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::unsetFelix_memoryusage_dump_threshold()
{
    m_Felix_memoryusage_dump_thresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::getFelixMemoryusageDumpInterval() const
{
    return m_Felix_memoryusage_dump_interval;
}


void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::setFelixMemoryusageDumpInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Felix_memoryusage_dump_interval = value;
    m_Felix_memoryusage_dump_intervalIsSet = true;
}
bool OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::felixMemoryusageDumpIntervalIsSet() const
{
    return m_Felix_memoryusage_dump_intervalIsSet;
}

void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::unsetFelix_memoryusage_dump_interval()
{
    m_Felix_memoryusage_dump_intervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::getFelixMemoryusageDumpLocation() const
{
    return m_Felix_memoryusage_dump_location;
}


void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::setFelixMemoryusageDumpLocation(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Felix_memoryusage_dump_location = value;
    m_Felix_memoryusage_dump_locationIsSet = true;
}
bool OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::felixMemoryusageDumpLocationIsSet() const
{
    return m_Felix_memoryusage_dump_locationIsSet;
}

void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::unsetFelix_memoryusage_dump_location()
{
    m_Felix_memoryusage_dump_locationIsSet = false;
}

}
}
}
}

