<?php
/**
 * ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'link_expired_prefix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'link_expired_remove' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'link_expired_suffix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'link_invalid_prefix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'link_invalid_remove' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'link_invalid_suffix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'link_predated_prefix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'link_predated_remove' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'link_predated_suffix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'link_wcmmodes' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'link_expired_prefix' => null,
        'link_expired_remove' => null,
        'link_expired_suffix' => null,
        'link_invalid_prefix' => null,
        'link_invalid_remove' => null,
        'link_invalid_suffix' => null,
        'link_predated_prefix' => null,
        'link_predated_remove' => null,
        'link_predated_suffix' => null,
        'link_wcmmodes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'link_expired_prefix' => 'link.expired.prefix',
        'link_expired_remove' => 'link.expired.remove',
        'link_expired_suffix' => 'link.expired.suffix',
        'link_invalid_prefix' => 'link.invalid.prefix',
        'link_invalid_remove' => 'link.invalid.remove',
        'link_invalid_suffix' => 'link.invalid.suffix',
        'link_predated_prefix' => 'link.predated.prefix',
        'link_predated_remove' => 'link.predated.remove',
        'link_predated_suffix' => 'link.predated.suffix',
        'link_wcmmodes' => 'link.wcmmodes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'link_expired_prefix' => 'setLinkExpiredPrefix',
        'link_expired_remove' => 'setLinkExpiredRemove',
        'link_expired_suffix' => 'setLinkExpiredSuffix',
        'link_invalid_prefix' => 'setLinkInvalidPrefix',
        'link_invalid_remove' => 'setLinkInvalidRemove',
        'link_invalid_suffix' => 'setLinkInvalidSuffix',
        'link_predated_prefix' => 'setLinkPredatedPrefix',
        'link_predated_remove' => 'setLinkPredatedRemove',
        'link_predated_suffix' => 'setLinkPredatedSuffix',
        'link_wcmmodes' => 'setLinkWcmmodes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'link_expired_prefix' => 'getLinkExpiredPrefix',
        'link_expired_remove' => 'getLinkExpiredRemove',
        'link_expired_suffix' => 'getLinkExpiredSuffix',
        'link_invalid_prefix' => 'getLinkInvalidPrefix',
        'link_invalid_remove' => 'getLinkInvalidRemove',
        'link_invalid_suffix' => 'getLinkInvalidSuffix',
        'link_predated_prefix' => 'getLinkPredatedPrefix',
        'link_predated_remove' => 'getLinkPredatedRemove',
        'link_predated_suffix' => 'getLinkPredatedSuffix',
        'link_wcmmodes' => 'getLinkWcmmodes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['link_expired_prefix'] = isset($data['link_expired_prefix']) ? $data['link_expired_prefix'] : null;
        $this->container['link_expired_remove'] = isset($data['link_expired_remove']) ? $data['link_expired_remove'] : null;
        $this->container['link_expired_suffix'] = isset($data['link_expired_suffix']) ? $data['link_expired_suffix'] : null;
        $this->container['link_invalid_prefix'] = isset($data['link_invalid_prefix']) ? $data['link_invalid_prefix'] : null;
        $this->container['link_invalid_remove'] = isset($data['link_invalid_remove']) ? $data['link_invalid_remove'] : null;
        $this->container['link_invalid_suffix'] = isset($data['link_invalid_suffix']) ? $data['link_invalid_suffix'] : null;
        $this->container['link_predated_prefix'] = isset($data['link_predated_prefix']) ? $data['link_predated_prefix'] : null;
        $this->container['link_predated_remove'] = isset($data['link_predated_remove']) ? $data['link_predated_remove'] : null;
        $this->container['link_predated_suffix'] = isset($data['link_predated_suffix']) ? $data['link_predated_suffix'] : null;
        $this->container['link_wcmmodes'] = isset($data['link_wcmmodes']) ? $data['link_wcmmodes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets link_expired_prefix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getLinkExpiredPrefix()
    {
        return $this->container['link_expired_prefix'];
    }

    /**
     * Sets link_expired_prefix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $link_expired_prefix link_expired_prefix
     *
     * @return $this
     */
    public function setLinkExpiredPrefix($link_expired_prefix)
    {
        $this->container['link_expired_prefix'] = $link_expired_prefix;

        return $this;
    }

    /**
     * Gets link_expired_remove
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getLinkExpiredRemove()
    {
        return $this->container['link_expired_remove'];
    }

    /**
     * Sets link_expired_remove
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $link_expired_remove link_expired_remove
     *
     * @return $this
     */
    public function setLinkExpiredRemove($link_expired_remove)
    {
        $this->container['link_expired_remove'] = $link_expired_remove;

        return $this;
    }

    /**
     * Gets link_expired_suffix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getLinkExpiredSuffix()
    {
        return $this->container['link_expired_suffix'];
    }

    /**
     * Sets link_expired_suffix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $link_expired_suffix link_expired_suffix
     *
     * @return $this
     */
    public function setLinkExpiredSuffix($link_expired_suffix)
    {
        $this->container['link_expired_suffix'] = $link_expired_suffix;

        return $this;
    }

    /**
     * Gets link_invalid_prefix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getLinkInvalidPrefix()
    {
        return $this->container['link_invalid_prefix'];
    }

    /**
     * Sets link_invalid_prefix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $link_invalid_prefix link_invalid_prefix
     *
     * @return $this
     */
    public function setLinkInvalidPrefix($link_invalid_prefix)
    {
        $this->container['link_invalid_prefix'] = $link_invalid_prefix;

        return $this;
    }

    /**
     * Gets link_invalid_remove
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getLinkInvalidRemove()
    {
        return $this->container['link_invalid_remove'];
    }

    /**
     * Sets link_invalid_remove
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $link_invalid_remove link_invalid_remove
     *
     * @return $this
     */
    public function setLinkInvalidRemove($link_invalid_remove)
    {
        $this->container['link_invalid_remove'] = $link_invalid_remove;

        return $this;
    }

    /**
     * Gets link_invalid_suffix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getLinkInvalidSuffix()
    {
        return $this->container['link_invalid_suffix'];
    }

    /**
     * Sets link_invalid_suffix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $link_invalid_suffix link_invalid_suffix
     *
     * @return $this
     */
    public function setLinkInvalidSuffix($link_invalid_suffix)
    {
        $this->container['link_invalid_suffix'] = $link_invalid_suffix;

        return $this;
    }

    /**
     * Gets link_predated_prefix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getLinkPredatedPrefix()
    {
        return $this->container['link_predated_prefix'];
    }

    /**
     * Sets link_predated_prefix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $link_predated_prefix link_predated_prefix
     *
     * @return $this
     */
    public function setLinkPredatedPrefix($link_predated_prefix)
    {
        $this->container['link_predated_prefix'] = $link_predated_prefix;

        return $this;
    }

    /**
     * Gets link_predated_remove
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getLinkPredatedRemove()
    {
        return $this->container['link_predated_remove'];
    }

    /**
     * Sets link_predated_remove
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $link_predated_remove link_predated_remove
     *
     * @return $this
     */
    public function setLinkPredatedRemove($link_predated_remove)
    {
        $this->container['link_predated_remove'] = $link_predated_remove;

        return $this;
    }

    /**
     * Gets link_predated_suffix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getLinkPredatedSuffix()
    {
        return $this->container['link_predated_suffix'];
    }

    /**
     * Sets link_predated_suffix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $link_predated_suffix link_predated_suffix
     *
     * @return $this
     */
    public function setLinkPredatedSuffix($link_predated_suffix)
    {
        $this->container['link_predated_suffix'] = $link_predated_suffix;

        return $this;
    }

    /**
     * Gets link_wcmmodes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getLinkWcmmodes()
    {
        return $this->container['link_wcmmodes'];
    }

    /**
     * Sets link_wcmmodes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $link_wcmmodes link_wcmmodes
     *
     * @return $this
     */
    public function setLinkWcmmodes($link_wcmmodes)
    {
        $this->container['link_wcmmodes'] = $link_wcmmodes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


