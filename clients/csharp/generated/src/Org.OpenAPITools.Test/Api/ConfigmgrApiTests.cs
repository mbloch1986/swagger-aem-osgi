/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ConfigmgrApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConfigmgrApiTests
    {
        private ConfigmgrApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConfigmgrApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConfigmgrApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ConfigmgrApi
            //Assert.IsInstanceOfType(typeof(ConfigmgrApi), instance, "instance is a ConfigmgrApi");
        }

        
        /// <summary>
        /// Test AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration
        /// </summary>
        [Test]
        public void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? showPlaceholder = null;
            //int? maximumCacheEntries = null;
            //string afScriptingCompatversion = null;
            //bool? makeFileNameUnique = null;
            //bool? generatingCompliantData = null;
            //var response = instance.AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post, apply, delete, action, location, propertylist, showPlaceholder, maximumCacheEntries, afScriptingCompatversion, makeFileNameUnique, generatingCompliantData);
            //Assert.IsInstanceOf<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo> (response, "response is AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo");
        }
        
        /// <summary>
        /// Test AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur
        /// </summary>
        [Test]
        public void AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fontList = null;
            //var response = instance.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post, apply, delete, action, location, propertylist, fontList);
            //Assert.IsInstanceOf<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo> (response, "response is AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo");
        }
        
        /// <summary>
        /// Test AnalyticsComponentQueryCacheService
        /// </summary>
        [Test]
        public void AnalyticsComponentQueryCacheServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqAnalyticsComponentQueryCacheSize = null;
            //var response = instance.AnalyticsComponentQueryCacheService(post, apply, delete, action, location, propertylist, cqAnalyticsComponentQueryCacheSize);
            //Assert.IsInstanceOf<AnalyticsComponentQueryCacheServiceInfo> (response, "response is AnalyticsComponentQueryCacheServiceInfo");
        }
        
        /// <summary>
        /// Test ApacheSlingHealthCheckResultHTMLSerializer
        /// </summary>
        [Test]
        public void ApacheSlingHealthCheckResultHTMLSerializerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string styleString = null;
            //var response = instance.ApacheSlingHealthCheckResultHTMLSerializer(post, apply, delete, action, location, propertylist, styleString);
            //Assert.IsInstanceOf<ApacheSlingHealthCheckResultHTMLSerializerInfo> (response, "response is ApacheSlingHealthCheckResultHTMLSerializerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration
        /// </summary>
        [Test]
        public void ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? formsManagerConfigIncludeOOTBTemplates = null;
            //bool? formsManagerConfigIncludeDeprecatedTemplates = null;
            //var response = instance.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post, apply, delete, action, location, propertylist, formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates);
            //Assert.IsInstanceOf<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo> (response, "response is ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo");
        }
        
        /// <summary>
        /// Test ComAdobeAemTransactionCoreImplTransactionRecorder
        /// </summary>
        [Test]
        public void ComAdobeAemTransactionCoreImplTransactionRecorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? isTransactionRecordingEnabled = null;
            //var response = instance.ComAdobeAemTransactionCoreImplTransactionRecorder(post, apply, delete, action, location, propertylist, isTransactionRecordingEnabled);
            //Assert.IsInstanceOf<ComAdobeAemTransactionCoreImplTransactionRecorderInfo> (response, "response is ComAdobeAemTransactionCoreImplTransactionRecorderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC
        /// </summary>
        [Test]
        public void ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string hcName = null;
            //List<string> hcTags = null;
            //string hcMbeanName = null;
            //var response = instance.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName);
            //Assert.IsInstanceOf<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo> (response, "response is ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo");
        }
        
        /// <summary>
        /// Test ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC
        /// </summary>
        [Test]
        public void ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string hcName = null;
            //List<string> hcTags = null;
            //string hcMbeanName = null;
            //var response = instance.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName);
            //Assert.IsInstanceOf<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo> (response, "response is ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo");
        }
        
        /// <summary>
        /// Test ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl
        /// </summary>
        [Test]
        public void ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> preUpgradeMaintenanceTasks = null;
            //List<string> preUpgradeHcTags = null;
            //var response = instance.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post, apply, delete, action, location, propertylist, preUpgradeMaintenanceTasks, preUpgradeHcTags);
            //Assert.IsInstanceOf<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo> (response, "response is ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl
        /// </summary>
        [Test]
        public void ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string rootPath = null;
            //bool? fixInconsistencies = null;
            //var response = instance.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post, apply, delete, action, location, propertylist, rootPath, fixInconsistencies);
            //Assert.IsInstanceOf<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo> (response, "response is ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqAccountApiAccountManagementService
        /// </summary>
        [Test]
        public void ComAdobeCqAccountApiAccountManagementServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqAccountmanagerTokenValidityPeriod = null;
            //string cqAccountmanagerConfigRequestnewaccountMail = null;
            //string cqAccountmanagerConfigRequestnewpwdMail = null;
            //var response = instance.ComAdobeCqAccountApiAccountManagementService(post, apply, delete, action, location, propertylist, cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail);
            //Assert.IsInstanceOf<ComAdobeCqAccountApiAccountManagementServiceInfo> (response, "response is ComAdobeCqAccountApiAccountManagementServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqAccountImplAccountManagementServlet
        /// </summary>
        [Test]
        public void ComAdobeCqAccountImplAccountManagementServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string cqAccountmanagerConfigInformnewaccountMail = null;
            //string cqAccountmanagerConfigInformnewpwdMail = null;
            //var response = instance.ComAdobeCqAccountImplAccountManagementServlet(post, apply, delete, action, location, propertylist, cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail);
            //Assert.IsInstanceOf<ComAdobeCqAccountImplAccountManagementServletInfo> (response, "response is ComAdobeCqAccountImplAccountManagementServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqAddressImplLocationLocationListServlet
        /// </summary>
        [Test]
        public void ComAdobeCqAddressImplLocationLocationListServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqAddressLocationDefaultMaxResults = null;
            //var response = instance.ComAdobeCqAddressImplLocationLocationListServlet(post, apply, delete, action, location, propertylist, cqAddressLocationDefaultMaxResults);
            //Assert.IsInstanceOf<ComAdobeCqAddressImplLocationLocationListServletInfo> (response, "response is ComAdobeCqAddressImplLocationLocationListServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqAuditPurgeDam
        /// </summary>
        [Test]
        public void ComAdobeCqAuditPurgeDamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string auditlogRuleName = null;
            //string auditlogRuleContentpath = null;
            //int? auditlogRuleMinimumage = null;
            //string auditlogRuleTypes = null;
            //var response = instance.ComAdobeCqAuditPurgeDam(post, apply, delete, action, location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
            //Assert.IsInstanceOf<ComAdobeCqAuditPurgeDamInfo> (response, "response is ComAdobeCqAuditPurgeDamInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqAuditPurgePages
        /// </summary>
        [Test]
        public void ComAdobeCqAuditPurgePagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string auditlogRuleName = null;
            //string auditlogRuleContentpath = null;
            //int? auditlogRuleMinimumage = null;
            //string auditlogRuleTypes = null;
            //var response = instance.ComAdobeCqAuditPurgePages(post, apply, delete, action, location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
            //Assert.IsInstanceOf<ComAdobeCqAuditPurgePagesInfo> (response, "response is ComAdobeCqAuditPurgePagesInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqAuditPurgeReplication
        /// </summary>
        [Test]
        public void ComAdobeCqAuditPurgeReplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string auditlogRuleName = null;
            //string auditlogRuleContentpath = null;
            //int? auditlogRuleMinimumage = null;
            //string auditlogRuleTypes = null;
            //var response = instance.ComAdobeCqAuditPurgeReplication(post, apply, delete, action, location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
            //Assert.IsInstanceOf<ComAdobeCqAuditPurgeReplicationInfo> (response, "response is ComAdobeCqAuditPurgeReplicationInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter
        /// </summary>
        [Test]
        public void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string keypairId = null;
            //string keypairAlias = null;
            //List<string> cdnrewriterAttributes = null;
            //string cdnRewriterDistributionDomain = null;
            //var response = instance.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post, apply, delete, action, location, propertylist, serviceRanking, keypairId, keypairAlias, cdnrewriterAttributes, cdnRewriterDistributionDomain);
            //Assert.IsInstanceOf<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo> (response, "response is ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCdnRewriterImplCDNConfigServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqCdnRewriterImplCDNConfigServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string cdnConfigDistributionDomain = null;
            //bool? cdnConfigEnableRewriting = null;
            //List<string> cdnConfigPathPrefixes = null;
            //int? cdnConfigCdnttl = null;
            //string cdnConfigApplicationProtocol = null;
            //var response = instance.ComAdobeCqCdnRewriterImplCDNConfigServiceImpl(post, apply, delete, action, location, propertylist, cdnConfigDistributionDomain, cdnConfigEnableRewriting, cdnConfigPathPrefixes, cdnConfigCdnttl, cdnConfigApplicationProtocol);
            //Assert.IsInstanceOf<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo> (response, "response is ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCdnRewriterImplCDNRewriter
        /// </summary>
        [Test]
        public void ComAdobeCqCdnRewriterImplCDNRewriterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //List<string> cdnrewriterAttributes = null;
            //string cdnRewriterDistributionDomain = null;
            //var response = instance.ComAdobeCqCdnRewriterImplCDNRewriter(post, apply, delete, action, location, propertylist, serviceRanking, cdnrewriterAttributes, cdnRewriterDistributionDomain);
            //Assert.IsInstanceOf<ComAdobeCqCdnRewriterImplCDNRewriterInfo> (response, "response is ComAdobeCqCdnRewriterImplCDNRewriterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle
        /// </summary>
        [Test]
        public void ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> flushAgents = null;
            //var response = instance.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post, apply, delete, action, location, propertylist, flushAgents);
            //Assert.IsInstanceOf<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo> (response, "response is ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCommerceImplAssetDynamicImageHandler
        /// </summary>
        [Test]
        public void ComAdobeCqCommerceImplAssetDynamicImageHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqCommerceAssetHandlerActive = null;
            //string cqCommerceAssetHandlerName = null;
            //var response = instance.ComAdobeCqCommerceImplAssetDynamicImageHandler(post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
            //Assert.IsInstanceOf<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo> (response, "response is ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl
        /// </summary>
        [Test]
        public void ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string cqCommerceAssetHandlerFallback = null;
            //var response = instance.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerFallback);
            //Assert.IsInstanceOf<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo> (response, "response is ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCommerceImplAssetStaticImageHandler
        /// </summary>
        [Test]
        public void ComAdobeCqCommerceImplAssetStaticImageHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqCommerceAssetHandlerActive = null;
            //string cqCommerceAssetHandlerName = null;
            //var response = instance.ComAdobeCqCommerceImplAssetStaticImageHandler(post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
            //Assert.IsInstanceOf<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo> (response, "response is ComAdobeCqCommerceImplAssetStaticImageHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCommerceImplAssetVideoHandler
        /// </summary>
        [Test]
        public void ComAdobeCqCommerceImplAssetVideoHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqCommerceAssetHandlerActive = null;
            //string cqCommerceAssetHandlerName = null;
            //var response = instance.ComAdobeCqCommerceImplAssetVideoHandler(post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
            //Assert.IsInstanceOf<ComAdobeCqCommerceImplAssetVideoHandlerInfo> (response, "response is ComAdobeCqCommerceImplAssetVideoHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCommerceImplPromotionPromotionManagerImpl
        /// </summary>
        [Test]
        public void ComAdobeCqCommerceImplPromotionPromotionManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string cqCommercePromotionRoot = null;
            //var response = instance.ComAdobeCqCommerceImplPromotionPromotionManagerImpl(post, apply, delete, action, location, propertylist, cqCommercePromotionRoot);
            //Assert.IsInstanceOf<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo> (response, "response is ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl
        /// </summary>
        [Test]
        public void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqCommerceCataloggeneratorBucketsize = null;
            //string cqCommerceCataloggeneratorBucketname = null;
            //List<string> cqCommerceCataloggeneratorExcludedtemplateproperties = null;
            //var response = instance.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post, apply, delete, action, location, propertylist, cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties);
            //Assert.IsInstanceOf<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo> (response, "response is ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCommercePimImplPageEventListener
        /// </summary>
        [Test]
        public void ComAdobeCqCommercePimImplPageEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqCommercePageeventlistenerEnabled = null;
            //var response = instance.ComAdobeCqCommercePimImplPageEventListener(post, apply, delete, action, location, propertylist, cqCommercePageeventlistenerEnabled);
            //Assert.IsInstanceOf<ComAdobeCqCommercePimImplPageEventListenerInfo> (response, "response is ComAdobeCqCommercePimImplPageEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string feedGeneratorAlgorithm = null;
            //var response = instance.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post, apply, delete, action, location, propertylist, feedGeneratorAlgorithm);
            //Assert.IsInstanceOf<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo> (response, "response is ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqContentinsightImplReportingServicesSettingsProvider
        /// </summary>
        [Test]
        public void ComAdobeCqContentinsightImplReportingServicesSettingsProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string reportingservicesUrl = null;
            //var response = instance.ComAdobeCqContentinsightImplReportingServicesSettingsProvider(post, apply, delete, action, location, propertylist, reportingservicesUrl);
            //Assert.IsInstanceOf<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo> (response, "response is ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet
        /// </summary>
        [Test]
        public void ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string brightedgeUrl = null;
            //var response = instance.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post, apply, delete, action, location, propertylist, brightedgeUrl);
            //Assert.IsInstanceOf<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo> (response, "response is ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqContentinsightImplServletsReportingServicesProxyServle
        /// </summary>
        [Test]
        public void ComAdobeCqContentinsightImplServletsReportingServicesProxyServleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> reportingservicesProxyWhitelist = null;
            //var response = instance.ComAdobeCqContentinsightImplServletsReportingServicesProxyServle(post, apply, delete, action, location, propertylist, reportingservicesProxyWhitelist);
            //Assert.IsInstanceOf<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo> (response, "response is ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamCfmImplComponentComponentConfigImpl
        /// </summary>
        [Test]
        public void ComAdobeCqDamCfmImplComponentComponentConfigImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string damCfmComponentResourceType = null;
            //string damCfmComponentFileReferenceProp = null;
            //string damCfmComponentElementsProp = null;
            //string damCfmComponentVariationProp = null;
            //var response = instance.ComAdobeCqDamCfmImplComponentComponentConfigImpl(post, apply, delete, action, location, propertylist, damCfmComponentResourceType, damCfmComponentFileReferenceProp, damCfmComponentElementsProp, damCfmComponentVariationProp);
            //Assert.IsInstanceOf<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo> (response, "response is ComAdobeCqDamCfmImplComponentComponentConfigImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamCfmImplConfFeatureConfigImpl
        /// </summary>
        [Test]
        public void ComAdobeCqDamCfmImplConfFeatureConfigImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> damCfmResourceTypes = null;
            //List<string> damCfmReferenceProperties = null;
            //var response = instance.ComAdobeCqDamCfmImplConfFeatureConfigImpl(post, apply, delete, action, location, propertylist, damCfmResourceTypes, damCfmReferenceProperties);
            //Assert.IsInstanceOf<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo> (response, "response is ComAdobeCqDamCfmImplConfFeatureConfigImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamCfmImplContentRewriterAssetProcessor
        /// </summary>
        [Test]
        public void ComAdobeCqDamCfmImplContentRewriterAssetProcessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string pipelineType = null;
            //var response = instance.ComAdobeCqDamCfmImplContentRewriterAssetProcessor(post, apply, delete, action, location, propertylist, pipelineType);
            //Assert.IsInstanceOf<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo> (response, "response is ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamCfmImplContentRewriterParRangeFilter
        /// </summary>
        [Test]
        public void ComAdobeCqDamCfmImplContentRewriterParRangeFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string pipelineType = null;
            //var response = instance.ComAdobeCqDamCfmImplContentRewriterParRangeFilter(post, apply, delete, action, location, propertylist, pipelineType);
            //Assert.IsInstanceOf<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo> (response, "response is ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamCfmImplContentRewriterPayloadFilter
        /// </summary>
        [Test]
        public void ComAdobeCqDamCfmImplContentRewriterPayloadFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string pipelineType = null;
            //var response = instance.ComAdobeCqDamCfmImplContentRewriterPayloadFilter(post, apply, delete, action, location, propertylist, pipelineType);
            //Assert.IsInstanceOf<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo> (response, "response is ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamDmProcessImagePTiffManagerImpl
        /// </summary>
        [Test]
        public void ComAdobeCqDamDmProcessImagePTiffManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxMemory = null;
            //var response = instance.ComAdobeCqDamDmProcessImagePTiffManagerImpl(post, apply, delete, action, location, propertylist, maxMemory);
            //Assert.IsInstanceOf<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo> (response, "response is ComAdobeCqDamDmProcessImagePTiffManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker
        /// </summary>
        [Test]
        public void ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? dmreplicateonmodifyEnabled = null;
            //bool? dmreplicateonmodifyForcesyncdeletes = null;
            //var response = instance.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post, apply, delete, action, location, propertylist, dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes);
            //Assert.IsInstanceOf<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo> (response, "response is ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl
        /// </summary>
        [Test]
        public void ComAdobeCqDamMacSyncHelperImplMACSyncClientImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? comAdobeDamMacSyncClientSoTimeout = null;
            //var response = instance.ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post, apply, delete, action, location, propertylist, comAdobeDamMacSyncClientSoTimeout);
            //Assert.IsInstanceOf<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo> (response, "response is ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamMacSyncImplDAMSyncServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqDamMacSyncImplDAMSyncServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths = null;
            //bool? comAdobeCqDamMacSyncDamsyncserviceSyncRenditions = null;
            //int? comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = null;
            //string comAdobeCqDamMacSyncDamsyncservicePlatform = null;
            //var response = instance.ComAdobeCqDamMacSyncImplDAMSyncServiceImpl(post, apply, delete, action, location, propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform);
            //Assert.IsInstanceOf<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo> (response, "response is ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamProcessorNuiImplNuiAssetProcessor
        /// </summary>
        [Test]
        public void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? nuiEnabled = null;
            //string nuiServiceUrl = null;
            //string nuiApiKey = null;
            //var response = instance.ComAdobeCqDamProcessorNuiImplNuiAssetProcessor(post, apply, delete, action, location, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey);
            //Assert.IsInstanceOf<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo> (response, "response is ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamS7imagingImplIsImageServerComponent
        /// </summary>
        [Test]
        public void ComAdobeCqDamS7imagingImplIsImageServerComponentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string tcpPort = null;
            //bool? allowRemoteAccess = null;
            //string maxRenderRgnPixels = null;
            //string maxMessageSize = null;
            //int? randomAccessUrlTimeout = null;
            //int? workerThreads = null;
            //var response = instance.ComAdobeCqDamS7imagingImplIsImageServerComponent(post, apply, delete, action, location, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads);
            //Assert.IsInstanceOf<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo> (response, "response is ComAdobeCqDamS7imagingImplIsImageServerComponentInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamS7imagingImplPsPlatformServerServlet
        /// </summary>
        [Test]
        public void ComAdobeCqDamS7imagingImplPsPlatformServerServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cacheEnable = null;
            //List<string> cacheRootPaths = null;
            //int? cacheMaxSize = null;
            //int? cacheMaxEntries = null;
            //var response = instance.ComAdobeCqDamS7imagingImplPsPlatformServerServlet(post, apply, delete, action, location, propertylist, cacheEnable, cacheRootPaths, cacheMaxSize, cacheMaxEntries);
            //Assert.IsInstanceOf<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo> (response, "response is ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamWebdavImplIoAssetIOHandler
        /// </summary>
        [Test]
        public void ComAdobeCqDamWebdavImplIoAssetIOHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string pathPrefix = null;
            //bool? createVersion = null;
            //var response = instance.ComAdobeCqDamWebdavImplIoAssetIOHandler(post, apply, delete, action, location, propertylist, serviceRanking, pathPrefix, createVersion);
            //Assert.IsInstanceOf<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo> (response, "response is ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob
        /// </summary>
        [Test]
        public void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamWebdavVersionLinkingEnable = null;
            //int? cqDamWebdavVersionLinkingSchedulerPeriod = null;
            //int? cqDamWebdavVersionLinkingStagingTimeout = null;
            //var response = instance.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post, apply, delete, action, location, propertylist, cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout);
            //Assert.IsInstanceOf<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo> (response, "response is ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDamWebdavImplIoSpecialFilesHandler
        /// </summary>
        [Test]
        public void ComAdobeCqDamWebdavImplIoSpecialFilesHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters = null;
            //var response = instance.ComAdobeCqDamWebdavImplIoSpecialFilesHandler(post, apply, delete, action, location, propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters);
            //Assert.IsInstanceOf<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo> (response, "response is ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDeserfwImplDeserializationFirewallImpl
        /// </summary>
        [Test]
        public void ComAdobeCqDeserfwImplDeserializationFirewallImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> firewallDeserializationWhitelist = null;
            //List<string> firewallDeserializationBlacklist = null;
            //string firewallDeserializationDiagnostics = null;
            //var response = instance.ComAdobeCqDeserfwImplDeserializationFirewallImpl(post, apply, delete, action, location, propertylist, firewallDeserializationWhitelist, firewallDeserializationBlacklist, firewallDeserializationDiagnostics);
            //Assert.IsInstanceOf<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo> (response, "response is ComAdobeCqDeserfwImplDeserializationFirewallImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDtmImplServiceDTMWebServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqDtmImplServiceDTMWebServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? connectionTimeout = null;
            //int? socketTimeout = null;
            //var response = instance.ComAdobeCqDtmImplServiceDTMWebServiceImpl(post, apply, delete, action, location, propertylist, connectionTimeout, socketTimeout);
            //Assert.IsInstanceOf<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo> (response, "response is ComAdobeCqDtmImplServiceDTMWebServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDtmImplServletsDTMDeployHookServlet
        /// </summary>
        [Test]
        public void ComAdobeCqDtmImplServletsDTMDeployHookServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> dtmStagingIpWhitelist = null;
            //List<string> dtmProductionIpWhitelist = null;
            //var response = instance.ComAdobeCqDtmImplServletsDTMDeployHookServlet(post, apply, delete, action, location, propertylist, dtmStagingIpWhitelist, dtmProductionIpWhitelist);
            //Assert.IsInstanceOf<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo> (response, "response is ComAdobeCqDtmImplServletsDTMDeployHookServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqDtmReactorImplServiceWebServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqDtmReactorImplServiceWebServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string endpointUri = null;
            //int? connectionTimeout = null;
            //int? socketTimeout = null;
            //var response = instance.ComAdobeCqDtmReactorImplServiceWebServiceImpl(post, apply, delete, action, location, propertylist, endpointUri, connectionTimeout, socketTimeout);
            //Assert.IsInstanceOf<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo> (response, "response is ComAdobeCqDtmReactorImplServiceWebServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqExperiencelogImplExperienceLogConfigServlet
        /// </summary>
        [Test]
        public void ComAdobeCqExperiencelogImplExperienceLogConfigServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //List<string> disabledForGroups = null;
            //var response = instance.ComAdobeCqExperiencelogImplExperienceLogConfigServlet(post, apply, delete, action, location, propertylist, enabled, disabledForGroups);
            //Assert.IsInstanceOf<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo> (response, "response is ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqHcContentPackagesHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeCqHcContentPackagesHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string hcName = null;
            //List<string> hcTags = null;
            //string hcMbeanName = null;
            //List<string> packageNames = null;
            //var response = instance.ComAdobeCqHcContentPackagesHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, packageNames);
            //Assert.IsInstanceOf<ComAdobeCqHcContentPackagesHealthCheckInfo> (response, "response is ComAdobeCqHcContentPackagesHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqHistoryImplHistoryRequestFilter
        /// </summary>
        [Test]
        public void ComAdobeCqHistoryImplHistoryRequestFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> historyRequestFilterExcludedSelectors = null;
            //List<string> historyRequestFilterExcludedExtensions = null;
            //var response = instance.ComAdobeCqHistoryImplHistoryRequestFilter(post, apply, delete, action, location, propertylist, historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions);
            //Assert.IsInstanceOf<ComAdobeCqHistoryImplHistoryRequestFilterInfo> (response, "response is ComAdobeCqHistoryImplHistoryRequestFilterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqHistoryImplHistoryServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqHistoryImplHistoryServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> historyServiceResourceTypes = null;
            //List<string> historyServicePathFilter = null;
            //var response = instance.ComAdobeCqHistoryImplHistoryServiceImpl(post, apply, delete, action, location, propertylist, historyServiceResourceTypes, historyServicePathFilter);
            //Assert.IsInstanceOf<ComAdobeCqHistoryImplHistoryServiceImplInfo> (response, "response is ComAdobeCqHistoryImplHistoryServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqInboxImplTypeproviderItemTypeProvider
        /// </summary>
        [Test]
        public void ComAdobeCqInboxImplTypeproviderItemTypeProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> inboxImplTypeproviderRegistrypaths = null;
            //List<string> inboxImplTypeproviderLegacypaths = null;
            //string inboxImplTypeproviderDefaulturlFailureitem = null;
            //string inboxImplTypeproviderDefaulturlWorkitem = null;
            //string inboxImplTypeproviderDefaulturlTask = null;
            //var response = instance.ComAdobeCqInboxImplTypeproviderItemTypeProvider(post, apply, delete, action, location, propertylist, inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask);
            //Assert.IsInstanceOf<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo> (response, "response is ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqProjectsImplServletProjectImageServlet
        /// </summary>
        [Test]
        public void ComAdobeCqProjectsImplServletProjectImageServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string imageQuality = null;
            //string imageSupportedResolutions = null;
            //var response = instance.ComAdobeCqProjectsImplServletProjectImageServlet(post, apply, delete, action, location, propertylist, imageQuality, imageSupportedResolutions);
            //Assert.IsInstanceOf<ComAdobeCqProjectsImplServletProjectImageServletInfo> (response, "response is ComAdobeCqProjectsImplServletProjectImageServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqProjectsPurgeScheduler
        /// </summary>
        [Test]
        public void ComAdobeCqProjectsPurgeSchedulerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string scheduledpurgeName = null;
            //bool? scheduledpurgePurgeActive = null;
            //List<string> scheduledpurgeTemplates = null;
            //bool? scheduledpurgePurgeGroups = null;
            //bool? scheduledpurgePurgeAssets = null;
            //bool? scheduledpurgeTerminateRunningWorkflows = null;
            //int? scheduledpurgeDaysold = null;
            //int? scheduledpurgeSaveThreshold = null;
            //var response = instance.ComAdobeCqProjectsPurgeScheduler(post, apply, delete, action, location, propertylist, scheduledpurgeName, scheduledpurgePurgeActive, scheduledpurgeTemplates, scheduledpurgePurgeGroups, scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold, scheduledpurgeSaveThreshold);
            //Assert.IsInstanceOf<ComAdobeCqProjectsPurgeSchedulerInfo> (response, "response is ComAdobeCqProjectsPurgeSchedulerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScheduledExporterImplScheduledExporterImpl
        /// </summary>
        [Test]
        public void ComAdobeCqScheduledExporterImplScheduledExporterImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> includePaths = null;
            //string exporterUser = null;
            //var response = instance.ComAdobeCqScheduledExporterImplScheduledExporterImpl(post, apply, delete, action, location, propertylist, includePaths, exporterUser);
            //Assert.IsInstanceOf<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo> (response, "response is ComAdobeCqScheduledExporterImplScheduledExporterImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string comAdobeCqScreensAnalyticsImplUrl = null;
            //string comAdobeCqScreensAnalyticsImplApikey = null;
            //string comAdobeCqScreensAnalyticsImplProject = null;
            //string comAdobeCqScreensAnalyticsImplEnvironment = null;
            //int? comAdobeCqScreensAnalyticsImplSendFrequency = null;
            //var response = instance.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post, apply, delete, action, location, propertylist, comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency);
            //Assert.IsInstanceOf<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo> (response, "response is ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensDeviceImplDeviceService
        /// </summary>
        [Test]
        public void ComAdobeCqScreensDeviceImplDeviceServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? comAdobeAemScreensPlayerPingfrequency = null;
            //string comAdobeAemScreensDevicePaswordSpecialchars = null;
            //int? comAdobeAemScreensDevicePaswordMinlowercasechars = null;
            //int? comAdobeAemScreensDevicePaswordMinuppercasechars = null;
            //int? comAdobeAemScreensDevicePaswordMinnumberchars = null;
            //int? comAdobeAemScreensDevicePaswordMinspecialchars = null;
            //int? comAdobeAemScreensDevicePaswordMinlength = null;
            //var response = instance.ComAdobeCqScreensDeviceImplDeviceService(post, apply, delete, action, location, propertylist, comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength);
            //Assert.IsInstanceOf<ComAdobeCqScreensDeviceImplDeviceServiceInfo> (response, "response is ComAdobeCqScreensDeviceImplDeviceServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? deviceRegistrationTimeout = null;
            //var response = instance.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post, apply, delete, action, location, propertylist, deviceRegistrationTimeout);
            //Assert.IsInstanceOf<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo> (response, "response is ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensImplHandlerChannelsUpdateHandler
        /// </summary>
        [Test]
        public void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqPagesupdatehandlerImageresourcetypes = null;
            //List<string> cqPagesupdatehandlerProductresourcetypes = null;
            //List<string> cqPagesupdatehandlerVideoresourcetypes = null;
            //List<string> cqPagesupdatehandlerDynamicsequenceresourcetypes = null;
            //List<string> cqPagesupdatehandlerPreviewmodepaths = null;
            //var response = instance.ComAdobeCqScreensImplHandlerChannelsUpdateHandler(post, apply, delete, action, location, propertylist, cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths);
            //Assert.IsInstanceOf<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo> (response, "response is ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob
        /// </summary>
        [Test]
        public void ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //var response = instance.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post, apply, delete, action, location, propertylist, schedulerExpression);
            //Assert.IsInstanceOf<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo> (response, "response is ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl
        /// </summary>
        [Test]
        public void ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? comAdobeAemScreensImplRemoteRequestTimeout = null;
            //var response = instance.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post, apply, delete, action, location, propertylist, comAdobeAemScreensImplRemoteRequestTimeout);
            //Assert.IsInstanceOf<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo> (response, "response is ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensImplScreensChannelPostProcessor
        /// </summary>
        [Test]
        public void ComAdobeCqScreensImplScreensChannelPostProcessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> screensChannelsPropertiesToRemove = null;
            //var response = instance.ComAdobeCqScreensImplScreensChannelPostProcessor(post, apply, delete, action, location, propertylist, screensChannelsPropertiesToRemove);
            //Assert.IsInstanceOf<ComAdobeCqScreensImplScreensChannelPostProcessorInfo> (response, "response is ComAdobeCqScreensImplScreensChannelPostProcessorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath = null;
            //string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = null;
            //int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = null;
            //string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = null;
            //string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = null;
            //int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = null;
            //bool? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = null;
            //string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = null;
            //string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = null;
            //var response = instance.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post, apply, delete, action, location, propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword);
            //Assert.IsInstanceOf<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo> (response, "response is ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensMqActivemqImplArtemisJMSProvider
        /// </summary>
        [Test]
        public void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //int? globalSize = null;
            //int? maxDiskUsage = null;
            //bool? persistenceEnabled = null;
            //int? threadPoolMaxSize = null;
            //int? scheduledThreadPoolMaxSize = null;
            //int? gracefulShutdownTimeout = null;
            //List<string> queues = null;
            //List<string> topics = null;
            //int? addressesMaxDeliveryAttempts = null;
            //int? addressesExpiryDelay = null;
            //string addressesAddressFullMessagePolicy = null;
            //int? addressesMaxSizeBytes = null;
            //int? addressesPageSizeBytes = null;
            //int? addressesPageCacheMaxSize = null;
            //string clusterUser = null;
            //string clusterPassword = null;
            //int? clusterCallTimeout = null;
            //int? clusterCallFailoverTimeout = null;
            //int? clusterClientFailureCheckPeriod = null;
            //int? clusterNotificationAttempts = null;
            //int? clusterNotificationInterval = null;
            //int? idCacheSize = null;
            //int? clusterConfirmationWindowSize = null;
            //int? clusterConnectionTtl = null;
            //bool? clusterDuplicateDetection = null;
            //int? clusterInitialConnectAttempts = null;
            //int? clusterMaxRetryInterval = null;
            //int? clusterMinLargeMessageSize = null;
            //int? clusterProducerWindowSize = null;
            //int? clusterReconnectAttempts = null;
            //int? clusterRetryInterval = null;
            //decimal? clusterRetryIntervalMultiplier = null;
            //var response = instance.ComAdobeCqScreensMqActivemqImplArtemisJMSProvider(post, apply, delete, action, location, propertylist, serviceRanking, globalSize, maxDiskUsage, persistenceEnabled, threadPoolMaxSize, scheduledThreadPoolMaxSize, gracefulShutdownTimeout, queues, topics, addressesMaxDeliveryAttempts, addressesExpiryDelay, addressesAddressFullMessagePolicy, addressesMaxSizeBytes, addressesPageSizeBytes, addressesPageCacheMaxSize, clusterUser, clusterPassword, clusterCallTimeout, clusterCallFailoverTimeout, clusterClientFailureCheckPeriod, clusterNotificationAttempts, clusterNotificationInterval, idCacheSize, clusterConfirmationWindowSize, clusterConnectionTtl, clusterDuplicateDetection, clusterInitialConnectAttempts, clusterMaxRetryInterval, clusterMinLargeMessageSize, clusterProducerWindowSize, clusterReconnectAttempts, clusterRetryInterval, clusterRetryIntervalMultiplier);
            //Assert.IsInstanceOf<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo> (response, "response is ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath = null;
            //string comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = null;
            //var response = instance.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post, apply, delete, action, location, propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency);
            //Assert.IsInstanceOf<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo> (response, "response is ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? disableSmartSync = null;
            //var response = instance.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post, apply, delete, action, location, propertylist, disableSmartSync);
            //Assert.IsInstanceOf<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo> (response, "response is ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag
        /// </summary>
        [Test]
        public void ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enableDataTriggeredContent = null;
            //var response = instance.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post, apply, delete, action, location, propertylist, enableDataTriggeredContent);
            //Assert.IsInstanceOf<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo> (response, "response is ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh
        /// </summary>
        [Test]
        public void ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo> (response, "response is ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo> (response, "response is ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //string dispatcherAddress = null;
            //List<string> dispatcherFilterAllowed = null;
            //List<string> dispatcherFilterBlocked = null;
            //var response = instance.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post, apply, delete, action, location, propertylist, hcTags, dispatcherAddress, dispatcherFilterAllowed, dispatcherFilterBlocked);
            //Assert.IsInstanceOf<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo> (response, "response is ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo> (response, "response is ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //string webserverAddress = null;
            //var response = instance.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post, apply, delete, action, location, propertylist, hcTags, webserverAddress);
            //Assert.IsInstanceOf<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo> (response, "response is ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm
        /// </summary>
        [Test]
        public void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enable = null;
            //int? ttl1 = null;
            //int? ttl2 = null;
            //var response = instance.ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post, apply, delete, action, location, propertylist, enable, ttl1, ttl2);
            //Assert.IsInstanceOf<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo> (response, "response is ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen
        /// </summary>
        [Test]
        public void ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priority = null;
            //var response = instance.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post, apply, delete, action, location, propertylist, priority);
            //Assert.IsInstanceOf<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo> (response, "response is ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo
        /// </summary>
        [Test]
        public void ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priority = null;
            //var response = instance.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post, apply, delete, action, location, propertylist, priority);
            //Assert.IsInstanceOf<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo> (response, "response is ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler
        /// </summary>
        [Test]
        public void ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventTopics = null;
            //string eventFilter = null;
            //var response = instance.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
            //Assert.IsInstanceOf<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo> (response, "response is ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten
        /// </summary>
        [Test]
        public void ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? accepted = null;
            //int? ranked = null;
            //var response = instance.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post, apply, delete, action, location, propertylist, accepted, ranked);
            //Assert.IsInstanceOf<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo> (response, "response is ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS
        /// </summary>
        [Test]
        public void ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? ranking = null;
            //bool? enable = null;
            //var response = instance.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post, apply, delete, action, location, propertylist, ranking, enable);
            //Assert.IsInstanceOf<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo> (response, "response is ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre
        /// </summary>
        [Test]
        public void ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string streamPath = null;
            //string streamName = null;
            //var response = instance.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post, apply, delete, action, location, propertylist, streamPath, streamName);
            //Assert.IsInstanceOf<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo> (response, "response is ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxRetry = null;
            //List<string> fieldWhitelist = null;
            //List<string> attachmentTypeBlacklist = null;
            //var response = instance.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post, apply, delete, action, location, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo> (response, "response is ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string attachmentTypeBlacklist = null;
            //int? extensionOrder = null;
            //var response = instance.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post, apply, delete, action, location, propertylist, attachmentTypeBlacklist, extensionOrder);
            //Assert.IsInstanceOf<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo> (response, "response is ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCalendarServletsTimeZoneServlet
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCalendarServletsTimeZoneServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? timezonesExpirytime = null;
            //var response = instance.ComAdobeCqSocialCalendarServletsTimeZoneServlet(post, apply, delete, action, location, propertylist, timezonesExpirytime);
            //Assert.IsInstanceOf<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo> (response, "response is ComAdobeCqSocialCalendarServletsTimeZoneServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? ranking = null;
            //var response = instance.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post, apply, delete, action, location, propertylist, ranking);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo> (response, "response is ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //List<string> attachmentTypeBlacklist = null;
            //var response = instance.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo> (response, "response is ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //List<string> attachmentTypeBlacklist = null;
            //var response = instance.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo> (response, "response is ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? numUserLimit = null;
            //var response = instance.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post, apply, delete, action, location, propertylist, numUserLimit);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo> (response, "response is ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enableScheduledPostsSearch = null;
            //int? numberOfMinutes = null;
            //int? maxSearchLimit = null;
            //var response = instance.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post, apply, delete, action, location, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo> (response, "response is ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? corsEnabling = null;
            //var response = instance.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post, apply, delete, action, location, propertylist, corsEnabling);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo> (response, "response is ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priorityOrder = null;
            //List<string> replyEmailPatterns = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string contextPath = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post, apply, delete, action, location, propertylist, contextPath);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventTopics = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post, apply, delete, action, location, propertylist, eventTopics);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priorityOrder = null;
            //List<string> replyEmailPatterns = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string patternTime = null;
            //string patternNewline = null;
            //string patternDayOfMonth = null;
            //string patternMonth = null;
            //string patternYear = null;
            //string patternDate = null;
            //string patternDateTime = null;
            //string patternEmail = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post, apply, delete, action, location, propertylist, patternTime, patternNewline, patternDayOfMonth, patternMonth, patternYear, patternDate, patternDateTime, patternEmail);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string emailName = null;
            //bool? emailCreatePostFromReply = null;
            //string emailAddCommentIdTo = null;
            //int? emailSubjectMaximumLength = null;
            //string emailReplyToAddress = null;
            //string emailReplyToDelimiter = null;
            //string emailTrackerIdPrefixInSubject = null;
            //string emailTrackerIdPrefixInBody = null;
            //bool? emailAsHTML = null;
            //string emailDefaultUserName = null;
            //string emailTemplatesRootPath = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post, apply, delete, action, location, propertylist, emailName, emailCreatePostFromReply, emailAddCommentIdTo, emailSubjectMaximumLength, emailReplyToAddress, emailReplyToDelimiter, emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody, emailAsHTML, emailDefaultUserName, emailTemplatesRootPath);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string connectProtocol = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post, apply, delete, action, location, propertylist, connectProtocol);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priorityOrder = null;
            //List<string> replyEmailPatterns = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priorityOrder = null;
            //List<string> replyEmailPatterns = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priorityOrder = null;
            //List<string> replyEmailPatterns = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priorityOrder = null;
            //List<string> replyEmailPatterns = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> replyEmailPatterns = null;
            //int? priorityOrder = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post, apply, delete, action, location, propertylist, replyEmailPatterns, priorityOrder);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priorityOrder = null;
            //List<string> replyEmailPatterns = null;
            //var response = instance.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo> (response, "response is ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? numberOfDays = null;
            //int? ageOfFile = null;
            //var response = instance.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post, apply, delete, action, location, propertylist, numberOfDays, ageOfFile);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo> (response, "response is ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventTopics = null;
            //string eventFilter = null;
            //List<string> verbs = null;
            //var response = instance.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post, apply, delete, action, location, propertylist, eventTopics, eventFilter, verbs);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo> (response, "response is ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit
        /// </summary>
        [Test]
        public void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enable = null;
            //int? uGCLimit = null;
            //int? ugcLimitDuration = null;
            //List<string> domains = null;
            //List<string> toList = null;
            //var response = instance.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post, apply, delete, action, location, propertylist, enable, uGCLimit, ugcLimitDuration, domains, toList);
            //Assert.IsInstanceOf<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo> (response, "response is ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialConnectOauthImplFacebookProviderImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialConnectOauthImplFacebookProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthProviderId = null;
            //string oauthCloudConfigRoot = null;
            //string providerConfigRoot = null;
            //bool? providerConfigCreateTagsEnabled = null;
            //string providerConfigUserFolder = null;
            //bool? providerConfigFacebookFetchFields = null;
            //List<string> providerConfigFacebookFields = null;
            //bool? providerConfigRefreshUserdataEnabled = null;
            //var response = instance.ComAdobeCqSocialConnectOauthImplFacebookProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigCreateTagsEnabled, providerConfigUserFolder, providerConfigFacebookFetchFields, providerConfigFacebookFields, providerConfigRefreshUserdataEnabled);
            //Assert.IsInstanceOf<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo> (response, "response is ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle
        /// </summary>
        [Test]
        public void ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> path = null;
            //int? serviceRanking = null;
            //var response = instance.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post, apply, delete, action, location, propertylist, path, serviceRanking);
            //Assert.IsInstanceOf<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo> (response, "response is ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper
        /// </summary>
        [Test]
        public void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> facebook = null;
            //List<string> twitter = null;
            //string providerConfigUserFolder = null;
            //var response = instance.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post, apply, delete, action, location, propertylist, facebook, twitter, providerConfigUserFolder);
            //Assert.IsInstanceOf<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo> (response, "response is ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialConnectOauthImplTwitterProviderImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialConnectOauthImplTwitterProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthProviderId = null;
            //string oauthCloudConfigRoot = null;
            //string providerConfigRoot = null;
            //string providerConfigUserFolder = null;
            //bool? providerConfigTwitterEnableParams = null;
            //List<string> providerConfigTwitterParams = null;
            //bool? providerConfigRefreshUserdataEnabled = null;
            //var response = instance.ComAdobeCqSocialConnectOauthImplTwitterProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigUserFolder, providerConfigTwitterEnableParams, providerConfigTwitterParams, providerConfigRefreshUserdataEnabled);
            //Assert.IsInstanceOf<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo> (response, "response is ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen
        /// </summary>
        [Test]
        public void ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqSocialContentFragmentsServicesEnabled = null;
            //int? cqSocialContentFragmentsServicesWaitTimeSeconds = null;
            //var response = instance.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post, apply, delete, action, location, propertylist, cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds);
            //Assert.IsInstanceOf<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo> (response, "response is ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory
        /// </summary>
        [Test]
        public void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string versionId = null;
            //bool? cacheOn = null;
            //int? concurrencyLevel = null;
            //int? cacheStartSize = null;
            //int? cacheTtl = null;
            //int? cacheSize = null;
            //int? timeLimit = null;
            //var response = instance.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post, apply, delete, action, location, propertylist, versionId, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, timeLimit);
            //Assert.IsInstanceOf<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo> (response, "response is ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory
        /// </summary>
        [Test]
        public void ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string solrZkTimeout = null;
            //string solrCommit = null;
            //bool? cacheOn = null;
            //int? concurrencyLevel = null;
            //int? cacheStartSize = null;
            //int? cacheTtl = null;
            //int? cacheSize = null;
            //var response = instance.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post, apply, delete, action, location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);
            //Assert.IsInstanceOf<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo> (response, "response is ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor
        /// </summary>
        [Test]
        public void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string solrZkTimeout = null;
            //string solrCommit = null;
            //bool? cacheOn = null;
            //int? concurrencyLevel = null;
            //int? cacheStartSize = null;
            //int? cacheTtl = null;
            //int? cacheSize = null;
            //var response = instance.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post, apply, delete, action, location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);
            //Assert.IsInstanceOf<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo> (response, "response is ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF
        /// </summary>
        [Test]
        public void ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? isMemberCheck = null;
            //var response = instance.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post, apply, delete, action, location, propertylist, isMemberCheck);
            //Assert.IsInstanceOf<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo> (response, "response is ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto
        /// </summary>
        [Test]
        public void ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? isMemberCheck = null;
            //var response = instance.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post, apply, delete, action, location, propertylist, isMemberCheck);
            //Assert.IsInstanceOf<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo> (response, "response is ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL
        /// </summary>
        [Test]
        public void ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //var response = instance.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post, apply, delete, action, location, propertylist, fieldWhitelist);
            //Assert.IsInstanceOf<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo> (response, "response is ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou
        /// </summary>
        [Test]
        public void ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //var response = instance.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post, apply, delete, action, location, propertylist, fieldWhitelist);
            //Assert.IsInstanceOf<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo> (response, "response is ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //var response = instance.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post, apply, delete, action, location, propertylist, serviceRanking);
            //Assert.IsInstanceOf<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo> (response, "response is ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe
        /// </summary>
        [Test]
        public void ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingServletSelectors = null;
            //string slingServletExtensions = null;
            //var response = instance.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post, apply, delete, action, location, propertylist, slingServletSelectors, slingServletExtensions);
            //Assert.IsInstanceOf<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo> (response, "response is ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera
        /// </summary>
        [Test]
        public void ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //List<string> attachmentTypeBlacklist = null;
            //var response = instance.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo> (response, "response is ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialForumClientEndpointsImplForumOperationsService
        /// </summary>
        [Test]
        public void ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //List<string> attachmentTypeBlacklist = null;
            //var response = instance.ComAdobeCqSocialForumClientEndpointsImplForumOperationsService(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo> (response, "response is ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialForumDispatcherImplFlushOperations
        /// </summary>
        [Test]
        public void ComAdobeCqSocialForumDispatcherImplFlushOperationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? extensionOrder = null;
            //bool? flushForumontopic = null;
            //var response = instance.ComAdobeCqSocialForumDispatcherImplFlushOperations(post, apply, delete, action, location, propertylist, extensionOrder, flushForumontopic);
            //Assert.IsInstanceOf<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo> (response, "response is ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen
        /// </summary>
        [Test]
        public void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? groupListingPaginationEnable = null;
            //bool? groupListingLazyloadingEnable = null;
            //int? pageSize = null;
            //int? priority = null;
            //var response = instance.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post, apply, delete, action, location, propertylist, groupListingPaginationEnable, groupListingLazyloadingEnable, pageSize, priority);
            //Assert.IsInstanceOf<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo> (response, "response is ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialGroupImplGroupServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialGroupImplGroupServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxWaitTime = null;
            //int? minWaitBetweenRetries = null;
            //var response = instance.ComAdobeCqSocialGroupImplGroupServiceImpl(post, apply, delete, action, location, propertylist, maxWaitTime, minWaitBetweenRetries);
            //Assert.IsInstanceOf<ComAdobeCqSocialGroupImplGroupServiceImplInfo> (response, "response is ComAdobeCqSocialGroupImplGroupServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? parameterGuavaCacheEnabled = null;
            //string parameterGuavaCacheParams = null;
            //bool? parameterGuavaCacheReload = null;
            //int? serviceRanking = null;
            //var response = instance.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post, apply, delete, action, location, propertylist, parameterGuavaCacheEnabled, parameterGuavaCacheParams, parameterGuavaCacheReload, serviceRanking);
            //Assert.IsInstanceOf<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo> (response, "response is ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS
        /// </summary>
        [Test]
        public void ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //List<string> attachmentTypeBlacklist = null;
            //var response = instance.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo> (response, "response is ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer
        /// </summary>
        [Test]
        public void ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //List<string> attachmentTypeBlacklist = null;
            //var response = instance.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo> (response, "response is ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile
        /// </summary>
        [Test]
        public void ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //var response = instance.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post, apply, delete, action, location, propertylist, fieldWhitelist);
            //Assert.IsInstanceOf<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo> (response, "response is ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO
        /// </summary>
        [Test]
        public void ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //var response = instance.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post, apply, delete, action, location, propertylist, fieldWhitelist);
            //Assert.IsInstanceOf<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo> (response, "response is ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF
        /// </summary>
        [Test]
        public void ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? everyoneLimit = null;
            //int? priority = null;
            //var response = instance.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post, apply, delete, action, location, propertylist, everyoneLimit, priority);
            //Assert.IsInstanceOf<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo> (response, "response is ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation
        /// </summary>
        [Test]
        public void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> messageProperties = null;
            //int? messageBoxSizeLimit = null;
            //int? messageCountLimit = null;
            //bool? notifyFailure = null;
            //string failureMessageFrom = null;
            //string failureTemplatePath = null;
            //int? maxRetries = null;
            //int? minWaitBetweenRetries = null;
            //int? countUpdatePoolSize = null;
            //string inboxPath = null;
            //string sentitemsPath = null;
            //bool? supportAttachments = null;
            //bool? supportGroupMessaging = null;
            //int? maxTotalRecipients = null;
            //int? batchSize = null;
            //int? maxTotalAttachmentSize = null;
            //List<string> attachmentTypeBlacklist = null;
            //List<string> allowedAttachmentTypes = null;
            //string serviceSelector = null;
            //List<string> fieldWhitelist = null;
            //var response = instance.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post, apply, delete, action, location, propertylist, messageProperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPath, sentitemsPath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist);
            //Assert.IsInstanceOf<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo> (response, "response is ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen
        /// </summary>
        [Test]
        public void ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> resourceTypeFilters = null;
            //int? priority = null;
            //var response = instance.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post, apply, delete, action, location, propertylist, resourceTypeFilters, priority);
            //Assert.IsInstanceOf<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo> (response, "response is ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial
        /// </summary>
        [Test]
        public void ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priority = null;
            //var response = instance.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post, apply, delete, action, location, propertylist, priority);
            //Assert.IsInstanceOf<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo> (response, "response is ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen
        /// </summary>
        [Test]
        public void ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priority = null;
            //var response = instance.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post, apply, delete, action, location, propertylist, priority);
            //Assert.IsInstanceOf<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo> (response, "response is ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci
        /// </summary>
        [Test]
        public void ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> resourceTypeFilters = null;
            //int? priority = null;
            //var response = instance.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post, apply, delete, action, location, propertylist, resourceTypeFilters, priority);
            //Assert.IsInstanceOf<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo> (response, "response is ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialNotificationsImplMentionsRouter
        /// </summary>
        [Test]
        public void ComAdobeCqSocialNotificationsImplMentionsRouterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventTopics = null;
            //string eventFilter = null;
            //var response = instance.ComAdobeCqSocialNotificationsImplMentionsRouter(post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
            //Assert.IsInstanceOf<ComAdobeCqSocialNotificationsImplMentionsRouterInfo> (response, "response is ComAdobeCqSocialNotificationsImplMentionsRouterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialNotificationsImplNotificationManagerImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialNotificationsImplNotificationManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxUnreadNotificationCount = null;
            //var response = instance.ComAdobeCqSocialNotificationsImplNotificationManagerImpl(post, apply, delete, action, location, propertylist, maxUnreadNotificationCount);
            //Assert.IsInstanceOf<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo> (response, "response is ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialNotificationsImplNotificationsRouter
        /// </summary>
        [Test]
        public void ComAdobeCqSocialNotificationsImplNotificationsRouterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventTopics = null;
            //string eventFilter = null;
            //var response = instance.ComAdobeCqSocialNotificationsImplNotificationsRouter(post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
            //Assert.IsInstanceOf<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo> (response, "response is ComAdobeCqSocialNotificationsImplNotificationsRouterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic
        /// </summary>
        [Test]
        public void ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //List<string> attachmentTypeBlacklist = null;
            //var response = instance.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo> (response, "response is ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI
        /// </summary>
        [Test]
        public void ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqSocialReportingAnalyticsPollingImporterInterval = null;
            //int? cqSocialReportingAnalyticsPollingImporterPageSize = null;
            //var response = instance.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post, apply, delete, action, location, propertylist, cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize);
            //Assert.IsInstanceOf<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo> (response, "response is ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM
        /// </summary>
        [Test]
        public void ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? reportFetchDelay = null;
            //var response = instance.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post, apply, delete, action, location, propertylist, reportFetchDelay);
            //Assert.IsInstanceOf<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo> (response, "response is ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS
        /// </summary>
        [Test]
        public void ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqSocialConsoleAnalyticsSitesMapping = null;
            //int? priority = null;
            //var response = instance.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post, apply, delete, action, location, propertylist, cqSocialConsoleAnalyticsSitesMapping, priority);
            //Assert.IsInstanceOf<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo> (response, "response is ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi
        /// </summary>
        [Test]
        public void ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //List<string> attachmentTypeBlacklist = null;
            //var response = instance.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo> (response, "response is ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet
        /// </summary>
        [Test]
        public void ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingServletSelectors = null;
            //string slingServletExtensions = null;
            //var response = instance.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post, apply, delete, action, location, propertylist, slingServletSelectors, slingServletExtensions);
            //Assert.IsInstanceOf<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo> (response, "response is ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet
        /// </summary>
        [Test]
        public void ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> slingServletSelectors = null;
            //string slingServletExtensions = null;
            //var response = instance.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post, apply, delete, action, location, propertylist, slingServletSelectors, slingServletExtensions);
            //Assert.IsInstanceOf<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo> (response, "response is ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialScoringImplScoringEventListener
        /// </summary>
        [Test]
        public void ComAdobeCqSocialScoringImplScoringEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventTopics = null;
            //string eventFilter = null;
            //var response = instance.ComAdobeCqSocialScoringImplScoringEventListener(post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
            //Assert.IsInstanceOf<ComAdobeCqSocialScoringImplScoringEventListenerInfo> (response, "response is ComAdobeCqSocialScoringImplScoringEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enableFallback = null;
            //var response = instance.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post, apply, delete, action, location, propertylist, enableFallback);
            //Assert.IsInstanceOf<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo> (response, "response is ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialSiteEndpointsImplSiteOperationService
        /// </summary>
        [Test]
        public void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fieldWhitelist = null;
            //List<string> sitePathFilters = null;
            //string sitePackageGroup = null;
            //var response = instance.ComAdobeCqSocialSiteEndpointsImplSiteOperationService(post, apply, delete, action, location, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup);
            //Assert.IsInstanceOf<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo> (response, "response is ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm
        /// </summary>
        [Test]
        public void ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqSocialConsoleAnalyticsComponents = null;
            //var response = instance.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post, apply, delete, action, location, propertylist, cqSocialConsoleAnalyticsComponents);
            //Assert.IsInstanceOf<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo> (response, "response is ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialSiteImplSiteConfiguratorImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialSiteImplSiteConfiguratorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> componentsUsingTags = null;
            //var response = instance.ComAdobeCqSocialSiteImplSiteConfiguratorImpl(post, apply, delete, action, location, propertylist, componentsUsingTags);
            //Assert.IsInstanceOf<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo> (response, "response is ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialSrpImplSocialSolrConnector
        /// </summary>
        [Test]
        public void ComAdobeCqSocialSrpImplSocialSolrConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string srpType = null;
            //var response = instance.ComAdobeCqSocialSrpImplSocialSolrConnector(post, apply, delete, action, location, propertylist, srpType);
            //Assert.IsInstanceOf<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo> (response, "response is ComAdobeCqSocialSrpImplSocialSolrConnectorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialSyncImplDiffChangesObserver
        /// </summary>
        [Test]
        public void ComAdobeCqSocialSyncImplDiffChangesObserverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //string agentName = null;
            //string diffPath = null;
            //string propertyNames = null;
            //var response = instance.ComAdobeCqSocialSyncImplDiffChangesObserver(post, apply, delete, action, location, propertylist, enabled, agentName, diffPath, propertyNames);
            //Assert.IsInstanceOf<ComAdobeCqSocialSyncImplDiffChangesObserverInfo> (response, "response is ComAdobeCqSocialSyncImplDiffChangesObserverInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialSyncImplGroupSyncListenerImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialSyncImplGroupSyncListenerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> nodetypes = null;
            //List<string> ignorableprops = null;
            //string ignorablenodes = null;
            //bool? enabled = null;
            //string distfolders = null;
            //var response = instance.ComAdobeCqSocialSyncImplGroupSyncListenerImpl(post, apply, delete, action, location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);
            //Assert.IsInstanceOf<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo> (response, "response is ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialSyncImplPublisherSyncServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialSyncImplPublisherSyncServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> activeRunModes = null;
            //var response = instance.ComAdobeCqSocialSyncImplPublisherSyncServiceImpl(post, apply, delete, action, location, propertylist, activeRunModes);
            //Assert.IsInstanceOf<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo> (response, "response is ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialSyncImplUserSyncListenerImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialSyncImplUserSyncListenerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> nodetypes = null;
            //List<string> ignorableprops = null;
            //List<string> ignorablenodes = null;
            //bool? enabled = null;
            //List<string> distfolders = null;
            //var response = instance.ComAdobeCqSocialSyncImplUserSyncListenerImpl(post, apply, delete, action, location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);
            //Assert.IsInstanceOf<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo> (response, "response is ComAdobeCqSocialSyncImplUserSyncListenerImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialTranslationImplTranslationServiceConfigManager
        /// </summary>
        [Test]
        public void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string translateLanguage = null;
            //string translateDisplay = null;
            //bool? translateAttribution = null;
            //string translateCaching = null;
            //string translateSmartRendering = null;
            //string translateCachingDuration = null;
            //string translateSessionSaveInterval = null;
            //string translateSessionSaveBatchLimit = null;
            //var response = instance.ComAdobeCqSocialTranslationImplTranslationServiceConfigManager(post, apply, delete, action, location, propertylist, translateLanguage, translateDisplay, translateAttribution, translateCaching, translateSmartRendering, translateCachingDuration, translateSessionSaveInterval, translateSessionSaveBatchLimit);
            //Assert.IsInstanceOf<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo> (response, "response is ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialTranslationImplUGCLanguageDetector
        /// </summary>
        [Test]
        public void ComAdobeCqSocialTranslationImplUGCLanguageDetectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventTopics = null;
            //string eventFilter = null;
            //List<string> translateListenerType = null;
            //List<string> translatePropertyList = null;
            //int? poolSize = null;
            //int? maxPoolSize = null;
            //int? queueSize = null;
            //int? keepAliveTime = null;
            //var response = instance.ComAdobeCqSocialTranslationImplUGCLanguageDetector(post, apply, delete, action, location, propertylist, eventTopics, eventFilter, translateListenerType, translatePropertyList, poolSize, maxPoolSize, queueSize, keepAliveTime);
            //Assert.IsInstanceOf<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo> (response, "response is ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? threadPoolSize = null;
            //int? delayTime = null;
            //int? workerSleepTime = null;
            //var response = instance.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post, apply, delete, action, location, propertylist, threadPoolSize, delayTime, workerSleepTime);
            //Assert.IsInstanceOf<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo> (response, "response is ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? poolSize = null;
            //int? maxPoolSize = null;
            //int? queueSize = null;
            //int? keepAliveTime = null;
            //var response = instance.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post, apply, delete, action, location, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime);
            //Assert.IsInstanceOf<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo> (response, "response is ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? isPrimaryPublisher = null;
            //var response = instance.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post, apply, delete, action, location, propertylist, isPrimaryPublisher);
            //Assert.IsInstanceOf<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo> (response, "response is ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialUgcbaseImplSocialUtilsImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialUgcbaseImplSocialUtilsImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? legacyCloudUGCPathMapping = null;
            //var response = instance.ComAdobeCqSocialUgcbaseImplSocialUtilsImpl(post, apply, delete, action, location, propertylist, legacyCloudUGCPathMapping);
            //Assert.IsInstanceOf<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo> (response, "response is ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> automoderationSequence = null;
            //bool? automoderationOnfailurestop = null;
            //var response = instance.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post, apply, delete, action, location, propertylist, automoderationSequence, automoderationOnfailurestop);
            //Assert.IsInstanceOf<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo> (response, "response is ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialUgcbaseModerationImplSentimentProcess
        /// </summary>
        [Test]
        public void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> watchwordsPositive = null;
            //List<string> watchwordsNegative = null;
            //string watchwordsPath = null;
            //string sentimentPath = null;
            //var response = instance.ComAdobeCqSocialUgcbaseModerationImplSentimentProcess(post, apply, delete, action, location, propertylist, watchwordsPositive, watchwordsNegative, watchwordsPath, sentimentPath);
            //Assert.IsInstanceOf<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo> (response, "response is ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli
        /// </summary>
        [Test]
        public void ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> defaultAttachmentTypeBlacklist = null;
            //List<string> baselineAttachmentTypeBlacklist = null;
            //var response = instance.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post, apply, delete, action, location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo> (response, "response is ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl
        /// </summary>
        [Test]
        public void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> parameterWhitelist = null;
            //List<string> parameterWhitelistPrefixes = null;
            //List<string> binaryParameterWhitelist = null;
            //List<string> modifierWhitelist = null;
            //List<string> operationWhitelist = null;
            //List<string> operationWhitelistPrefixes = null;
            //List<string> typehintWhitelist = null;
            //List<string> resourcetypeWhitelist = null;
            //var response = instance.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);
            //Assert.IsInstanceOf<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo> (response, "response is ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet
        /// </summary>
        [Test]
        public void ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingServletExtensions = null;
            //string slingServletPaths = null;
            //string slingServletMethods = null;
            //var response = instance.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post, apply, delete, action, location, propertylist, slingServletExtensions, slingServletPaths, slingServletMethods);
            //Assert.IsInstanceOf<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo> (response, "response is ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqSocialUserImplTransportHttpToPublisher
        /// </summary>
        [Test]
        public void ComAdobeCqSocialUserImplTransportHttpToPublisherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enable = null;
            //List<string> agentConfiguration = null;
            //string contextPath = null;
            //List<string> disabledCipherSuites = null;
            //List<string> enabledCipherSuites = null;
            //var response = instance.ComAdobeCqSocialUserImplTransportHttpToPublisher(post, apply, delete, action, location, propertylist, enable, agentConfiguration, contextPath, disabledCipherSuites, enabledCipherSuites);
            //Assert.IsInstanceOf<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo> (response, "response is ComAdobeCqSocialUserImplTransportHttpToPublisherInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact
        /// </summary>
        [Test]
        public void ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> resourceTypes = null;
            //var response = instance.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post, apply, delete, action, location, propertylist, resourceTypes);
            //Assert.IsInstanceOf<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo> (response, "response is ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup
        /// </summary>
        [Test]
        public void ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> deletePathRegexps = null;
            //string deleteSql2Query = null;
            //var response = instance.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post, apply, delete, action, location, propertylist, deletePathRegexps, deleteSql2Query);
            //Assert.IsInstanceOf<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo> (response, "response is ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup
        /// </summary>
        [Test]
        public void ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> deleteNameRegexps = null;
            //var response = instance.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post, apply, delete, action, location, propertylist, deleteNameRegexps);
            //Assert.IsInstanceOf<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo> (response, "response is ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService
        /// </summary>
        [Test]
        public void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? threshold = null;
            //string jobTopicName = null;
            //bool? emailEnabled = null;
            //var response = instance.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post, apply, delete, action, location, propertylist, threshold, jobTopicName, emailEnabled);
            //Assert.IsInstanceOf<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo> (response, "response is ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask
        /// </summary>
        [Test]
        public void ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //int? jobPurgeThreshold = null;
            //int? jobPurgeMaxJobs = null;
            //var response = instance.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post, apply, delete, action, location, propertylist, schedulerExpression, jobPurgeThreshold, jobPurgeMaxJobs);
            //Assert.IsInstanceOf<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo> (response, "response is ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService
        /// </summary>
        [Test]
        public void ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? threshold = null;
            //string jobTopicName = null;
            //bool? emailEnabled = null;
            //var response = instance.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post, apply, delete, action, location, propertylist, threshold, jobTopicName, emailEnabled);
            //Assert.IsInstanceOf<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo> (response, "response is ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService
        /// </summary>
        [Test]
        public void ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? threshold = null;
            //string jobTopicName = null;
            //bool? emailEnabled = null;
            //var response = instance.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post, apply, delete, action, location, propertylist, threshold, jobTopicName, emailEnabled);
            //Assert.IsInstanceOf<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo> (response, "response is ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqWcmLaunchesImplLaunchesEventHandler
        /// </summary>
        [Test]
        public void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventFilter = null;
            //int? launchesEventhandlerThreadpoolMaxsize = null;
            //string launchesEventhandlerThreadpoolPriority = null;
            //bool? launchesEventhandlerUpdatelastmodification = null;
            //var response = instance.ComAdobeCqWcmLaunchesImplLaunchesEventHandler(post, apply, delete, action, location, propertylist, eventFilter, launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification);
            //Assert.IsInstanceOf<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo> (response, "response is ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator
        /// </summary>
        [Test]
        public void ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqWcmQrcodeServletWhitelist = null;
            //var response = instance.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post, apply, delete, action, location, propertylist, cqWcmQrcodeServletWhitelist);
            //Assert.IsInstanceOf<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo> (response, "response is ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl
        /// </summary>
        [Test]
        public void ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? size = null;
            //var response = instance.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post, apply, delete, action, location, propertylist, size);
            //Assert.IsInstanceOf<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo> (response, "response is ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl
        /// </summary>
        [Test]
        public void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string syncTranslationStateSchedulingFormat = null;
            //string schedulingRepeatTranslationSchedulingFormat = null;
            //string syncTranslationStateLockTimeoutInMinutes = null;
            //string exportFormat = null;
            //var response = instance.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post, apply, delete, action, location, propertylist, syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes, exportFormat);
            //Assert.IsInstanceOf<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo> (response, "response is ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService
        /// </summary>
        [Test]
        public void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> portalOutboxes = null;
            //string draftDataService = null;
            //string draftMetadataService = null;
            //string submitDataService = null;
            //string submitMetadataService = null;
            //string pendingSignDataService = null;
            //string pendingSignMetadataService = null;
            //var response = instance.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post, apply, delete, action, location, propertylist, portalOutboxes, draftDataService, draftMetadataService, submitDataService, submitMetadataService, pendingSignDataService, pendingSignMetadataService);
            //Assert.IsInstanceOf<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo> (response, "response is ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeFdFpConfigFormsPortalSchedulerService
        /// </summary>
        [Test]
        public void ComAdobeFdFpConfigFormsPortalSchedulerServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string formportalInterval = null;
            //var response = instance.ComAdobeFdFpConfigFormsPortalSchedulerService(post, apply, delete, action, location, propertylist, formportalInterval);
            //Assert.IsInstanceOf<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo> (response, "response is ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeFormsCommonServiceImplDefaultDataProvider
        /// </summary>
        [Test]
        public void ComAdobeFormsCommonServiceImplDefaultDataProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> alloweddataFileLocations = null;
            //var response = instance.ComAdobeFormsCommonServiceImplDefaultDataProvider(post, apply, delete, action, location, propertylist, alloweddataFileLocations);
            //Assert.IsInstanceOf<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo> (response, "response is ComAdobeFormsCommonServiceImplDefaultDataProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp
        /// </summary>
        [Test]
        public void ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string tempStorageConfig = null;
            //var response = instance.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post, apply, delete, action, location, propertylist, tempStorageConfig);
            //Assert.IsInstanceOf<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo> (response, "response is ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo");
        }
        
        /// <summary>
        /// Test ComAdobeFormsCommonServletTempCleanUpTask
        /// </summary>
        [Test]
        public void ComAdobeFormsCommonServletTempCleanUpTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //string durationForTemporaryStorage = null;
            //string durationForAnonymousStorage = null;
            //var response = instance.ComAdobeFormsCommonServletTempCleanUpTask(post, apply, delete, action, location, propertylist, schedulerExpression, durationForTemporaryStorage, durationForAnonymousStorage);
            //Assert.IsInstanceOf<ComAdobeFormsCommonServletTempCleanUpTaskInfo> (response, "response is ComAdobeFormsCommonServletTempCleanUpTaskInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAcpPlatformPlatformServlet
        /// </summary>
        [Test]
        public void ComAdobeGraniteAcpPlatformPlatformServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? queryLimit = null;
            //List<string> fileTypeExtensionMap = null;
            //var response = instance.ComAdobeGraniteAcpPlatformPlatformServlet(post, apply, delete, action, location, propertylist, queryLimit, fileTypeExtensionMap);
            //Assert.IsInstanceOf<ComAdobeGraniteAcpPlatformPlatformServletInfo> (response, "response is ComAdobeGraniteAcpPlatformPlatformServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteActivitystreamsImplActivityManagerImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteActivitystreamsImplActivityManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> aggregateRelationships = null;
            //bool? aggregateDescendVirtual = null;
            //var response = instance.ComAdobeGraniteActivitystreamsImplActivityManagerImpl(post, apply, delete, action, location, propertylist, aggregateRelationships, aggregateDescendVirtual);
            //Assert.IsInstanceOf<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo> (response, "response is ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAnalyzerBaseSystemStatusServlet
        /// </summary>
        [Test]
        public void ComAdobeGraniteAnalyzerBaseSystemStatusServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? disabled = null;
            //var response = instance.ComAdobeGraniteAnalyzerBaseSystemStatusServlet(post, apply, delete, action, location, propertylist, disabled);
            //Assert.IsInstanceOf<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo> (response, "response is ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet
        /// </summary>
        [Test]
        public void ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? disabled = null;
            //var response = instance.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post, apply, delete, action, location, propertylist, disabled);
            //Assert.IsInstanceOf<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo> (response, "response is ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteApicontrollerFilterResolverHookFactory
        /// </summary>
        [Test]
        public void ComAdobeGraniteApicontrollerFilterResolverHookFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string comAdobeCqCdnCdnRewriter = null;
            //string comAdobeCqCloudConfigComponents = null;
            //string comAdobeCqCloudConfigCore = null;
            //string comAdobeCqCloudConfigUi = null;
            //string comAdobeCqComAdobeCqEditor = null;
            //string comAdobeCqComAdobeCqProjectsCore = null;
            //string comAdobeCqComAdobeCqProjectsWcmCore = null;
            //string comAdobeCqComAdobeCqUiCommons = null;
            //string comAdobeCqComAdobeCqWcmStyle = null;
            //string comAdobeCqCqActivitymapIntegration = null;
            //string comAdobeCqCqContexthubCommons = null;
            //string comAdobeCqCqDtm = null;
            //string comAdobeCqCqHealthcheck = null;
            //string comAdobeCqCqMultisiteTargeting = null;
            //string comAdobeCqCqPreUpgradeCleanup = null;
            //string comAdobeCqCqProductInfoProvider = null;
            //string comAdobeCqCqRestSites = null;
            //string comAdobeCqCqSecurityHc = null;
            //string comAdobeCqDamCqDamSvgHandler = null;
            //string comAdobeCqDamCqScene7Imaging = null;
            //string comAdobeCqDtmReactorCore = null;
            //string comAdobeCqDtmReactorUi = null;
            //string comAdobeCqExpJspelResolver = null;
            //string comAdobeCqInboxCqInbox = null;
            //string comAdobeCqJsonSchemaParser = null;
            //string comAdobeCqMediaCqMediaPublishingDpsFpCore = null;
            //string comAdobeCqMobileCqMobileCaas = null;
            //string comAdobeCqMobileCqMobileIndexBuilder = null;
            //string comAdobeCqMobileCqMobilePhonegapBuild = null;
            //string comAdobeCqMyspell = null;
            //string comAdobeCqSampleWeRetailCore = null;
            //string comAdobeCqScreensComAdobeCqScreensDcc = null;
            //string comAdobeCqScreensComAdobeCqScreensMqCore = null;
            //string comAdobeCqSocialCqSocialAsProvider = null;
            //string comAdobeCqSocialCqSocialBadgingBasicImpl = null;
            //string comAdobeCqSocialCqSocialBadgingImpl = null;
            //string comAdobeCqSocialCqSocialCalendarImpl = null;
            //string comAdobeCqSocialCqSocialContentFragmentsImpl = null;
            //string comAdobeCqSocialCqSocialEnablementImpl = null;
            //string comAdobeCqSocialCqSocialGraphImpl = null;
            //string comAdobeCqSocialCqSocialIdeationImpl = null;
            //string comAdobeCqSocialCqSocialJcrProvider = null;
            //string comAdobeCqSocialCqSocialMembersImpl = null;
            //string comAdobeCqSocialCqSocialMsProvider = null;
            //string comAdobeCqSocialCqSocialNotificationsChannelsWeb = null;
            //string comAdobeCqSocialCqSocialNotificationsImpl = null;
            //string comAdobeCqSocialCqSocialRdbProvider = null;
            //string comAdobeCqSocialCqSocialScfImpl = null;
            //string comAdobeCqSocialCqSocialScoringBasicImpl = null;
            //string comAdobeCqSocialCqSocialScoringImpl = null;
            //string comAdobeCqSocialCqSocialServiceusersImpl = null;
            //string comAdobeCqSocialCqSocialSrpImpl = null;
            //string comAdobeCqSocialCqSocialUgcbaseImpl = null;
            //string comAdobeDamCqDamCfmImpl = null;
            //string comAdobeFormsFoundationFormsFoundationBase = null;
            //string comAdobeGraniteApicontroller = null;
            //string comAdobeGraniteAssetCore = null;
            //string comAdobeGraniteAuthSso = null;
            //string comAdobeGraniteBundlesHcImpl = null;
            //string comAdobeGraniteCompatRouter = null;
            //string comAdobeGraniteConf = null;
            //string comAdobeGraniteConfUiCore = null;
            //string comAdobeGraniteCors = null;
            //string comAdobeGraniteCrxExplorer = null;
            //string comAdobeGraniteCrxdeLite = null;
            //string comAdobeGraniteCryptoConfig = null;
            //string comAdobeGraniteCryptoExtension = null;
            //string comAdobeGraniteCryptoFile = null;
            //string comAdobeGraniteCryptoJcr = null;
            //string comAdobeGraniteCsrf = null;
            //string comAdobeGraniteDistributionCore = null;
            //string comAdobeGraniteDropwizardMetrics = null;
            //string comAdobeGraniteFragsImpl = null;
            //string comAdobeGraniteGibson = null;
            //string comAdobeGraniteInfocollector = null;
            //string comAdobeGraniteInstallerFactoryPackages = null;
            //string comAdobeGraniteJettySsl = null;
            //string comAdobeGraniteJobsAsync = null;
            //string comAdobeGraniteMaintenanceOak = null;
            //string comAdobeGraniteMonitoringCore = null;
            //string comAdobeGraniteQueries = null;
            //string comAdobeGraniteReplicationHcImpl = null;
            //string comAdobeGraniteRepositoryChecker = null;
            //string comAdobeGraniteRepositoryHcImpl = null;
            //string comAdobeGraniteRestAssets = null;
            //string comAdobeGraniteSecurityUi = null;
            //string comAdobeGraniteStartup = null;
            //string comAdobeGraniteTagsoup = null;
            //string comAdobeGraniteTaskmanagementCore = null;
            //string comAdobeGraniteTaskmanagementWorkflow = null;
            //string comAdobeGraniteUiClientlibsCompilerLess = null;
            //string comAdobeGraniteUiClientlibsProcessorGcc = null;
            //string comAdobeGraniteWebconsolePlugins = null;
            //string comAdobeGraniteWorkflowConsole = null;
            //string comAdobeXmpWorkerFilesNativeFragmentLinux = null;
            //string comAdobeXmpWorkerFilesNativeFragmentMacosx = null;
            //string comAdobeXmpWorkerFilesNativeFragmentWin = null;
            //string comDayCommonsOsgiWrapperSimpleJndi = null;
            //string comDayCqCqAuthhandler = null;
            //string comDayCqCqCompatConfigupdate = null;
            //string comDayCqCqLicensebranding = null;
            //string comDayCqCqNotifcationImpl = null;
            //string comDayCqCqReplicationAudit = null;
            //string comDayCqCqSearchExt = null;
            //string comDayCqDamCqDamAnnotationPrint = null;
            //string comDayCqDamCqDamAssetUsage = null;
            //string comDayCqDamCqDamS7dam = null;
            //string comDayCqDamCqDamSimilaritysearch = null;
            //string comDayCqDamDamWebdavSupport = null;
            //string comDayCqPreUpgradeTasks = null;
            //string comDayCqReplicationExtensions = null;
            //string comDayCqWcmCqMsmCore = null;
            //string comDayCqWcmCqWcmTranslation = null;
            //string dayCommonsJrawio = null;
            //string orgApacheAriesJmxWhiteboard = null;
            //string orgApacheFelixHttpSslfilter = null;
            //string orgApacheFelixOrgApacheFelixThreaddump = null;
            //string orgApacheFelixWebconsolePluginsDs = null;
            //string orgApacheFelixWebconsolePluginsEvent = null;
            //string orgApacheFelixWebconsolePluginsMemoryusage = null;
            //string orgApacheFelixWebconsolePluginsPackageadmin = null;
            //string orgApacheJackrabbitOakAuthLdap = null;
            //string orgApacheJackrabbitOakSegmentTar = null;
            //string orgApacheJackrabbitOakSolrOsgi = null;
            //string orgApacheSlingBundleresourceImpl = null;
            //string orgApacheSlingCommonsFsclassloader = null;
            //string orgApacheSlingCommonsLogWebconsole = null;
            //string orgApacheSlingDatasource = null;
            //string orgApacheSlingDiscoveryBase = null;
            //string orgApacheSlingDiscoveryOak = null;
            //string orgApacheSlingDiscoverySupport = null;
            //string orgApacheSlingDistributionApi = null;
            //string orgApacheSlingDistributionCore = null;
            //string orgApacheSlingExtensionsWebconsolesecurityprovider = null;
            //string orgApacheSlingHcWebconsole = null;
            //string orgApacheSlingInstallerConsole = null;
            //string orgApacheSlingInstallerProviderFile = null;
            //string orgApacheSlingInstallerProviderJcr = null;
            //string orgApacheSlingJcrDavex = null;
            //string orgApacheSlingJcrResourcesecurity = null;
            //string orgApacheSlingJmxProvider = null;
            //string orgApacheSlingLaunchpadInstaller = null;
            //string orgApacheSlingModelsImpl = null;
            //string orgApacheSlingRepoinitParser = null;
            //string orgApacheSlingResourceInventory = null;
            //string orgApacheSlingResourceresolver = null;
            //string orgApacheSlingScriptingJavascript = null;
            //string orgApacheSlingScriptingJst = null;
            //string orgApacheSlingScriptingSightlyJsProvider = null;
            //string orgApacheSlingScriptingSightlyModelsProvider = null;
            //string orgApacheSlingSecurity = null;
            //string orgApacheSlingServletsCompat = null;
            //string orgApacheSlingServletsGet = null;
            //string orgApacheSlingStartupfilterDisabler = null;
            //string orgApacheSlingTracer = null;
            //string weRetailClientAppCore = null;
            //var response = instance.ComAdobeGraniteApicontrollerFilterResolverHookFactory(post, apply, delete, action, location, propertylist, comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons, comAdobeCqCqDtm, comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites, comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell, comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller, comAdobeGraniteAssetCore, comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter, comAdobeGraniteConf, comAdobeGraniteConfUiCore, comAdobeGraniteCors, comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf, comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl, comAdobeGraniteGibson, comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore, comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi, comAdobeGraniteStartup, comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding, comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit, comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks, comDayCqReplicationExtensions, comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation, dayCommonsJrawio, orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource, orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi, orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory, orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity, orgApacheSlingServletsCompat, orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer, weRetailClientAppCore);
            //Assert.IsInstanceOf<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo> (response, "response is ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthCertImplClientCertAuthHandler
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthCertImplClientCertAuthHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string path = null;
            //int? serviceRanking = null;
            //var response = instance.ComAdobeGraniteAuthCertImplClientCertAuthHandler(post, apply, delete, action, location, propertylist, path, serviceRanking);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo> (response, "response is ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthIms
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthImsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string configid = null;
            //string scope = null;
            //var response = instance.ComAdobeGraniteAuthIms(post, apply, delete, action, location, propertylist, configid, scope);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthImsInfo> (response, "response is ComAdobeGraniteAuthImsInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthProviderId = null;
            //var response = instance.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post, apply, delete, action, location, propertylist, oauthProviderId);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo> (response, "response is ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string authImsClientSecret = null;
            //string customizerType = null;
            //var response = instance.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post, apply, delete, action, location, propertylist, authImsClientSecret, customizerType);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo> (response, "response is ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthProviderId = null;
            //var response = instance.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post, apply, delete, action, location, propertylist, oauthProviderId);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo> (response, "response is ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthImsImplIMSProviderImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthImsImplIMSProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthProviderId = null;
            //string oauthProviderImsAuthorizationUrl = null;
            //string oauthProviderImsTokenUrl = null;
            //string oauthProviderImsProfileUrl = null;
            //List<string> oauthProviderImsExtendedDetailsUrls = null;
            //string oauthProviderImsValidateTokenUrl = null;
            //string oauthProviderImsSessionProperty = null;
            //string oauthProviderImsServiceTokenClientId = null;
            //string oauthProviderImsServiceTokenClientSecret = null;
            //string oauthProviderImsServiceToken = null;
            //string imsOrgRef = null;
            //List<string> imsGroupMapping = null;
            //bool? oauthProviderImsOnlyLicenseGroup = null;
            //var response = instance.ComAdobeGraniteAuthImsImplIMSProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId, oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl, oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken, imsOrgRef, imsGroupMapping, oauthProviderImsOnlyLicenseGroup);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthImsImplIMSProviderImplInfo> (response, "response is ComAdobeGraniteAuthImsImplIMSProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthImsImplImsConfigProviderImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthImsImplImsConfigProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthConfigmanagerImsConfigid = null;
            //string imsOwningEntity = null;
            //string aemInstanceId = null;
            //string imsServiceCode = null;
            //var response = instance.ComAdobeGraniteAuthImsImplImsConfigProviderImpl(post, apply, delete, action, location, propertylist, oauthConfigmanagerImsConfigid, imsOwningEntity, aemInstanceId, imsServiceCode);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo> (response, "response is ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthAccesstokenProvider
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthAccesstokenProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string authTokenProviderTitle = null;
            //List<string> authTokenProviderDefaultClaims = null;
            //string authTokenProviderEndpoint = null;
            //string authAccessTokenRequest = null;
            //string authTokenProviderKeypairAlias = null;
            //int? authTokenProviderConnTimeout = null;
            //int? authTokenProviderSoTimeout = null;
            //string authTokenProviderClientId = null;
            //string authTokenProviderScope = null;
            //bool? authTokenProviderReuseAccessToken = null;
            //bool? authTokenProviderRelaxedSsl = null;
            //string tokenRequestCustomizerType = null;
            //string authTokenValidatorType = null;
            //var response = instance.ComAdobeGraniteAuthOauthAccesstokenProvider(post, apply, delete, action, location, propertylist, name, authTokenProviderTitle, authTokenProviderDefaultClaims, authTokenProviderEndpoint, authAccessTokenRequest, authTokenProviderKeypairAlias, authTokenProviderConnTimeout, authTokenProviderSoTimeout, authTokenProviderClientId, authTokenProviderScope, authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl, tokenRequestCustomizerType, authTokenValidatorType);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthAccesstokenProviderInfo> (response, "response is ComAdobeGraniteAuthOauthAccesstokenProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string path = null;
            //List<string> oauthClientIdsAllowed = null;
            //bool? authBearerSyncIms = null;
            //string authTokenRequestParameter = null;
            //string oauthBearerConfigid = null;
            //bool? oauthJwtSupport = null;
            //var response = instance.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post, apply, delete, action, location, propertylist, path, oauthClientIdsAllowed, authBearerSyncIms, authTokenRequestParameter, oauthBearerConfigid, oauthJwtSupport);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo> (response, "response is ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string authTokenValidatorType = null;
            //var response = instance.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post, apply, delete, action, location, propertylist, authTokenValidatorType);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo> (response, "response is ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthImplFacebookProviderImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthImplFacebookProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthProviderId = null;
            //var response = instance.ComAdobeGraniteAuthOauthImplFacebookProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo> (response, "response is ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthImplGithubProviderImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthImplGithubProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthProviderId = null;
            //string oauthProviderGithubAuthorizationUrl = null;
            //string oauthProviderGithubTokenUrl = null;
            //string oauthProviderGithubProfileUrl = null;
            //var response = instance.ComAdobeGraniteAuthOauthImplGithubProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId, oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo> (response, "response is ComAdobeGraniteAuthOauthImplGithubProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthImplGraniteProvider
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthImplGraniteProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthProviderId = null;
            //string oauthProviderGraniteAuthorizationUrl = null;
            //string oauthProviderGraniteTokenUrl = null;
            //string oauthProviderGraniteProfileUrl = null;
            //string oauthProviderGraniteExtendedDetailsUrls = null;
            //var response = instance.ComAdobeGraniteAuthOauthImplGraniteProvider(post, apply, delete, action, location, propertylist, oauthProviderId, oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthImplGraniteProviderInfo> (response, "response is ComAdobeGraniteAuthOauthImplGraniteProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthImplHelperProviderConfigManager
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthCookieLoginTimeout = null;
            //string oauthCookieMaxAge = null;
            //var response = instance.ComAdobeGraniteAuthOauthImplHelperProviderConfigManager(post, apply, delete, action, location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo> (response, "response is ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthCookieLoginTimeout = null;
            //string oauthCookieMaxAge = null;
            //var response = instance.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post, apply, delete, action, location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo> (response, "response is ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string path = null;
            //var response = instance.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post, apply, delete, action, location, propertylist, path);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo> (response, "response is ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthImplTwitterProviderImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthImplTwitterProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthProviderId = null;
            //var response = instance.ComAdobeGraniteAuthOauthImplTwitterProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo> (response, "response is ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthOauthProvider
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthOauthProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthConfigId = null;
            //string oauthClientId = null;
            //string oauthClientSecret = null;
            //List<string> oauthScope = null;
            //string oauthConfigProviderId = null;
            //bool? oauthCreateUsers = null;
            //string oauthUseridProperty = null;
            //bool? forceStrictUsernameMatching = null;
            //bool? oauthEncodeUserids = null;
            //bool? oauthHashUserids = null;
            //string oauthCallBackUrl = null;
            //bool? oauthAccessTokenPersist = null;
            //bool? oauthAccessTokenPersistCookie = null;
            //bool? oauthCsrfStateProtection = null;
            //bool? oauthRedirectRequestParams = null;
            //bool? oauthConfigSiblingsAllow = null;
            //var response = instance.ComAdobeGraniteAuthOauthProvider(post, apply, delete, action, location, propertylist, oauthConfigId, oauthClientId, oauthClientSecret, oauthScope, oauthConfigProviderId, oauthCreateUsers, oauthUseridProperty, forceStrictUsernameMatching, oauthEncodeUserids, oauthHashUserids, oauthCallBackUrl, oauthAccessTokenPersist, oauthAccessTokenPersistCookie, oauthCsrfStateProtection, oauthRedirectRequestParams, oauthConfigSiblingsAllow);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthOauthProviderInfo> (response, "response is ComAdobeGraniteAuthOauthProviderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> supportedPaths = null;
            //var response = instance.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post, apply, delete, action, location, propertylist, supportedPaths);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo> (response, "response is ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthSamlSamlAuthenticationHandler
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> path = null;
            //int? serviceRanking = null;
            //string idpUrl = null;
            //string idpCertAlias = null;
            //bool? idpHttpRedirect = null;
            //string serviceProviderEntityId = null;
            //string assertionConsumerServiceURL = null;
            //string spPrivateKeyAlias = null;
            //string keyStorePassword = null;
            //string defaultRedirectUrl = null;
            //string userIDAttribute = null;
            //bool? useEncryption = null;
            //bool? createUser = null;
            //string userIntermediatePath = null;
            //bool? addGroupMemberships = null;
            //string groupMembershipAttribute = null;
            //List<string> defaultGroups = null;
            //string nameIdFormat = null;
            //List<string> synchronizeAttributes = null;
            //bool? handleLogout = null;
            //string logoutUrl = null;
            //int? clockTolerance = null;
            //string digestMethod = null;
            //string signatureMethod = null;
            //string identitySyncType = null;
            //string idpIdentifier = null;
            //var response = instance.ComAdobeGraniteAuthSamlSamlAuthenticationHandler(post, apply, delete, action, location, propertylist, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo> (response, "response is ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler
        /// </summary>
        [Test]
        public void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string path = null;
            //int? serviceRanking = null;
            //string jaasControlFlag = null;
            //string jaasRealmName = null;
            //int? jaasRanking = null;
            //List<string> headers = null;
            //List<string> cookies = null;
            //List<string> parameters = null;
            //List<string> usermap = null;
            //string format = null;
            //string trustedCredentialsAttribute = null;
            //var response = instance.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post, apply, delete, action, location, propertylist, path, serviceRanking, jaasControlFlag, jaasRealmName, jaasRanking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute);
            //Assert.IsInstanceOf<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo> (response, "response is ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //int? minimumCodeCacheSize = null;
            //var response = instance.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post, apply, delete, action, location, propertylist, hcTags, minimumCodeCacheSize);
            //Assert.IsInstanceOf<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo> (response, "response is ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo> (response, "response is ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo> (response, "response is ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //List<string> ignoredBundles = null;
            //var response = instance.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post, apply, delete, action, location, propertylist, hcTags, ignoredBundles);
            //Assert.IsInstanceOf<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo> (response, "response is ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteBundlesHcImplJobsHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteBundlesHcImplJobsHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //int? maxQueuedJobs = null;
            //var response = instance.ComAdobeGraniteBundlesHcImplJobsHealthCheck(post, apply, delete, action, location, propertylist, hcTags, maxQueuedJobs);
            //Assert.IsInstanceOf<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo> (response, "response is ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo> (response, "response is ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo> (response, "response is ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo> (response, "response is ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo> (response, "response is ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo> (response, "response is ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac
        /// </summary>
        [Test]
        public void ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> replicateCommentResourceTypes = null;
            //var response = instance.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post, apply, delete, action, location, propertylist, replicateCommentResourceTypes);
            //Assert.IsInstanceOf<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo> (response, "response is ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> compatgroups = null;
            //bool? enabled = null;
            //var response = instance.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post, apply, delete, action, location, propertylist, compatgroups, enabled);
            //Assert.IsInstanceOf<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo> (response, "response is ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteCompatrouterImplRoutingConfig
        /// </summary>
        [Test]
        public void ComAdobeGraniteCompatrouterImplRoutingConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string id = null;
            //string compatPath = null;
            //string newPath = null;
            //var response = instance.ComAdobeGraniteCompatrouterImplRoutingConfig(post, apply, delete, action, location, propertylist, id, compatPath, newPath);
            //Assert.IsInstanceOf<ComAdobeGraniteCompatrouterImplRoutingConfigInfo> (response, "response is ComAdobeGraniteCompatrouterImplRoutingConfigInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteCompatrouterImplSwitchMappingConfig
        /// </summary>
        [Test]
        public void ComAdobeGraniteCompatrouterImplSwitchMappingConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string group = null;
            //List<string> ids = null;
            //var response = instance.ComAdobeGraniteCompatrouterImplSwitchMappingConfig(post, apply, delete, action, location, propertylist, group, ids);
            //Assert.IsInstanceOf<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo> (response, "response is ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving
        /// </summary>
        [Test]
        public void ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //List<string> fallbackPaths = null;
            //var response = instance.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post, apply, delete, action, location, propertylist, enabled, fallbackPaths);
            //Assert.IsInstanceOf<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo> (response, "response is ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteContexthubImplContextHubImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteContexthubImplContextHubImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? comAdobeGraniteContexthubSilentMode = null;
            //bool? comAdobeGraniteContexthubShowUi = null;
            //var response = instance.ComAdobeGraniteContexthubImplContextHubImpl(post, apply, delete, action, location, propertylist, comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi);
            //Assert.IsInstanceOf<ComAdobeGraniteContexthubImplContextHubImplInfo> (response, "response is ComAdobeGraniteContexthubImplContextHubImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteCorsImplCORSPolicyImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteCorsImplCORSPolicyImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> alloworigin = null;
            //List<string> alloworiginregexp = null;
            //List<string> allowedpaths = null;
            //List<string> exposedheaders = null;
            //int? maxage = null;
            //List<string> supportedheaders = null;
            //List<string> supportedmethods = null;
            //bool? supportscredentials = null;
            //var response = instance.ComAdobeGraniteCorsImplCORSPolicyImpl(post, apply, delete, action, location, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials);
            //Assert.IsInstanceOf<ComAdobeGraniteCorsImplCORSPolicyImplInfo> (response, "response is ComAdobeGraniteCorsImplCORSPolicyImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteCsrfImplCSRFFilter
        /// </summary>
        [Test]
        public void ComAdobeGraniteCsrfImplCSRFFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> filterMethods = null;
            //bool? filterEnableSafeUserAgents = null;
            //List<string> filterSafeUserAgents = null;
            //List<string> filterExcludedPaths = null;
            //var response = instance.ComAdobeGraniteCsrfImplCSRFFilter(post, apply, delete, action, location, propertylist, filterMethods, filterEnableSafeUserAgents, filterSafeUserAgents, filterExcludedPaths);
            //Assert.IsInstanceOf<ComAdobeGraniteCsrfImplCSRFFilterInfo> (response, "response is ComAdobeGraniteCsrfImplCSRFFilterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteCsrfImplCSRFServlet
        /// </summary>
        [Test]
        public void ComAdobeGraniteCsrfImplCSRFServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? csrfTokenExpiresIn = null;
            //string slingAuthRequirements = null;
            //var response = instance.ComAdobeGraniteCsrfImplCSRFServlet(post, apply, delete, action, location, propertylist, csrfTokenExpiresIn, slingAuthRequirements);
            //Assert.IsInstanceOf<ComAdobeGraniteCsrfImplCSRFServletInfo> (response, "response is ComAdobeGraniteCsrfImplCSRFServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe
        /// </summary>
        [Test]
        public void ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string username = null;
            //string encryptedPassword = null;
            //var response = instance.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post, apply, delete, action, location, propertylist, name, username, encryptedPassword);
            //Assert.IsInstanceOf<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo> (response, "response is ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver
        /// </summary>
        [Test]
        public void ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //string agentName = null;
            //string diffPath = null;
            //string observedPath = null;
            //string serviceName = null;
            //string propertyNames = null;
            //int? distributionDelay = null;
            //string serviceUserTarget = null;
            //var response = instance.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post, apply, delete, action, location, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserTarget);
            //Assert.IsInstanceOf<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo> (response, "response is ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteDistributionCoreImplDiffDiffEventListener
        /// </summary>
        [Test]
        public void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string diffPath = null;
            //string serviceName = null;
            //string serviceUserTarget = null;
            //var response = instance.ComAdobeGraniteDistributionCoreImplDiffDiffEventListener(post, apply, delete, action, location, propertylist, diffPath, serviceName, serviceUserTarget);
            //Assert.IsInstanceOf<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo> (response, "response is ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven
        /// </summary>
        [Test]
        public void ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> importerName = null;
            //var response = instance.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post, apply, delete, action, location, propertylist, importerName);
            //Assert.IsInstanceOf<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo> (response, "response is ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat
        /// </summary>
        [Test]
        public void ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string providerName = null;
            //bool? forwardRequests = null;
            //var response = instance.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post, apply, delete, action, location, propertylist, providerName, forwardRequests);
            //Assert.IsInstanceOf<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo> (response, "response is ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans
        /// </summary>
        [Test]
        public void ComAdobeGraniteDistributionCoreImplReplicationDistributionTransTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? forwardRequests = null;
            //var response = instance.ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post, apply, delete, action, location, propertylist, forwardRequests);
            //Assert.IsInstanceOf<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo> (response, "response is ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu
        /// </summary>
        [Test]
        public void ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string serviceName = null;
            //string userId = null;
            //string accessTokenProviderTarget = null;
            //var response = instance.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post, apply, delete, action, location, propertylist, name, serviceName, userId, accessTokenProviderTarget);
            //Assert.IsInstanceOf<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo> (response, "response is ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteFragsImplCheckHttpHeaderFlag
        /// </summary>
        [Test]
        public void ComAdobeGraniteFragsImplCheckHttpHeaderFlagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string featureName = null;
            //string featureDescription = null;
            //string httpHeaderName = null;
            //string httpHeaderValuepattern = null;
            //var response = instance.ComAdobeGraniteFragsImplCheckHttpHeaderFlag(post, apply, delete, action, location, propertylist, featureName, featureDescription, httpHeaderName, httpHeaderValuepattern);
            //Assert.IsInstanceOf<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo> (response, "response is ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteFragsImplRandomFeature
        /// </summary>
        [Test]
        public void ComAdobeGraniteFragsImplRandomFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string featureName = null;
            //string featureDescription = null;
            //string activePercentage = null;
            //string cookieName = null;
            //int? cookieMaxAge = null;
            //var response = instance.ComAdobeGraniteFragsImplRandomFeature(post, apply, delete, action, location, propertylist, featureName, featureDescription, activePercentage, cookieName, cookieMaxAge);
            //Assert.IsInstanceOf<ComAdobeGraniteFragsImplRandomFeatureInfo> (response, "response is ComAdobeGraniteFragsImplRandomFeatureInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteHttpcacheFileFileCacheStore
        /// </summary>
        [Test]
        public void ComAdobeGraniteHttpcacheFileFileCacheStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string comAdobeGraniteHttpcacheFileDocumentRoot = null;
            //string comAdobeGraniteHttpcacheFileIncludeHost = null;
            //var response = instance.ComAdobeGraniteHttpcacheFileFileCacheStore(post, apply, delete, action, location, propertylist, comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost);
            //Assert.IsInstanceOf<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo> (response, "response is ComAdobeGraniteHttpcacheFileFileCacheStoreInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteHttpcacheImplOuterCacheFilter
        /// </summary>
        [Test]
        public void ComAdobeGraniteHttpcacheImplOuterCacheFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> comAdobeGraniteHttpcacheUrlPaths = null;
            //var response = instance.ComAdobeGraniteHttpcacheImplOuterCacheFilter(post, apply, delete, action, location, propertylist, comAdobeGraniteHttpcacheUrlPaths);
            //Assert.IsInstanceOf<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo> (response, "response is ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteI18nImplBundlePseudoTranslations
        /// </summary>
        [Test]
        public void ComAdobeGraniteI18nImplBundlePseudoTranslationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> pseudoPatterns = null;
            //var response = instance.ComAdobeGraniteI18nImplBundlePseudoTranslations(post, apply, delete, action, location, propertylist, pseudoPatterns);
            //Assert.IsInstanceOf<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo> (response, "response is ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteI18nImplPreferencesLocaleResolverService
        /// </summary>
        [Test]
        public void ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string securityPreferencesName = null;
            //var response = instance.ComAdobeGraniteI18nImplPreferencesLocaleResolverService(post, apply, delete, action, location, propertylist, securityPreferencesName);
            //Assert.IsInstanceOf<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo> (response, "response is ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteInfocollectorInfoCollector
        /// </summary>
        [Test]
        public void ComAdobeGraniteInfocollectorInfoCollectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? graniteInfocollectorIncludeThreadDumps = null;
            //bool? graniteInfocollectorIncludeHeapDump = null;
            //var response = instance.ComAdobeGraniteInfocollectorInfoCollector(post, apply, delete, action, location, propertylist, graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump);
            //Assert.IsInstanceOf<ComAdobeGraniteInfocollectorInfoCollectorInfo> (response, "response is ComAdobeGraniteInfocollectorInfoCollectorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory
        /// </summary>
        [Test]
        public void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? comAdobeGraniteJettySslPort = null;
            //string comAdobeGraniteJettySslKeystoreUser = null;
            //string comAdobeGraniteJettySslKeystorePassword = null;
            //List<string> comAdobeGraniteJettySslCiphersuitesExcluded = null;
            //List<string> comAdobeGraniteJettySslCiphersuitesIncluded = null;
            //string comAdobeGraniteJettySslClientCertificate = null;
            //var response = instance.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post, apply, delete, action, location, propertylist, comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate);
            //Assert.IsInstanceOf<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo> (response, "response is ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteLicenseImplLicenseCheckFilter
        /// </summary>
        [Test]
        public void ComAdobeGraniteLicenseImplLicenseCheckFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? checkInternval = null;
            //List<string> excludeIds = null;
            //bool? encryptPing = null;
            //var response = instance.ComAdobeGraniteLicenseImplLicenseCheckFilter(post, apply, delete, action, location, propertylist, checkInternval, excludeIds, encryptPing);
            //Assert.IsInstanceOf<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo> (response, "response is ComAdobeGraniteLicenseImplLicenseCheckFilterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteLoggingImplLogAnalyserImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteLoggingImplLogAnalyserImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? messagesQueueSize = null;
            //List<string> loggerConfig = null;
            //int? messagesSize = null;
            //var response = instance.ComAdobeGraniteLoggingImplLogAnalyserImpl(post, apply, delete, action, location, propertylist, messagesQueueSize, loggerConfig, messagesSize);
            //Assert.IsInstanceOf<ComAdobeGraniteLoggingImplLogAnalyserImplInfo> (response, "response is ComAdobeGraniteLoggingImplLogAnalyserImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteLoggingImplLogErrorHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteLoggingImplLogErrorHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteLoggingImplLogErrorHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo> (response, "response is ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask
        /// </summary>
        [Test]
        public void ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? graniteMaintenanceMandatory = null;
            //string jobTopics = null;
            //var response = instance.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post, apply, delete, action, location, propertylist, graniteMaintenanceMandatory, jobTopics);
            //Assert.IsInstanceOf<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo> (response, "response is ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask
        /// </summary>
        [Test]
        public void ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string jobTopics = null;
            //var response = instance.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post, apply, delete, action, location, propertylist, jobTopics);
            //Assert.IsInstanceOf<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo> (response, "response is ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask
        /// </summary>
        [Test]
        public void ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fullGcDays = null;
            //var response = instance.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post, apply, delete, action, location, propertylist, fullGcDays);
            //Assert.IsInstanceOf<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo> (response, "response is ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteMonitoringImplScriptConfigImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteMonitoringImplScriptConfigImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string scriptFilename = null;
            //string scriptDisplay = null;
            //string scriptPath = null;
            //List<string> scriptPlatform = null;
            //int? interval = null;
            //string jmxdomain = null;
            //var response = instance.ComAdobeGraniteMonitoringImplScriptConfigImpl(post, apply, delete, action, location, propertylist, scriptFilename, scriptDisplay, scriptPath, scriptPlatform, interval, jmxdomain);
            //Assert.IsInstanceOf<ComAdobeGraniteMonitoringImplScriptConfigImplInfo> (response, "response is ComAdobeGraniteMonitoringImplScriptConfigImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan
        /// </summary>
        [Test]
        public void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string path = null;
            //string jaasControlFlag = null;
            //string jaasRealmName = null;
            //int? jaasRanking = null;
            //bool? oauthOfflineValidation = null;
            //var response = instance.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post, apply, delete, action, location, propertylist, path, jaasControlFlag, jaasRealmName, jaasRanking, oauthOfflineValidation);
            //Assert.IsInstanceOf<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo> (response, "response is ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOauthServerImplAccessTokenCleanupTask
        /// </summary>
        [Test]
        public void ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //var response = instance.ComAdobeGraniteOauthServerImplAccessTokenCleanupTask(post, apply, delete, action, location, propertylist, schedulerExpression);
            //Assert.IsInstanceOf<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo> (response, "response is ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet
        /// </summary>
        [Test]
        public void ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? oauthClientRevocationActive = null;
            //var response = instance.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post, apply, delete, action, location, propertylist, oauthClientRevocationActive);
            //Assert.IsInstanceOf<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo> (response, "response is ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet
        /// </summary>
        [Test]
        public void ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingServletPaths = null;
            //bool? oauthRevocationActive = null;
            //var response = instance.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post, apply, delete, action, location, propertylist, slingServletPaths, oauthRevocationActive);
            //Assert.IsInstanceOf<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo> (response, "response is ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet
        /// </summary>
        [Test]
        public void ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string oauthIssuer = null;
            //string oauthAccessTokenExpiresIn = null;
            //string osgiHttpWhiteboardServletPattern = null;
            //string osgiHttpWhiteboardContextSelect = null;
            //var response = instance.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post, apply, delete, action, location, propertylist, oauthIssuer, oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
            //Assert.IsInstanceOf<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo> (response, "response is ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet
        /// </summary>
        [Test]
        public void ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? oauthTokenRevocationActive = null;
            //var response = instance.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post, apply, delete, action, location, propertylist, oauthTokenRevocationActive);
            //Assert.IsInstanceOf<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo> (response, "response is ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOffloadingImplOffloadingConfigurator
        /// </summary>
        [Test]
        public void ComAdobeGraniteOffloadingImplOffloadingConfiguratorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string offloadingTransporter = null;
            //bool? offloadingCleanupPayload = null;
            //var response = instance.ComAdobeGraniteOffloadingImplOffloadingConfigurator(post, apply, delete, action, location, propertylist, offloadingTransporter, offloadingCleanupPayload);
            //Assert.IsInstanceOf<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo> (response, "response is ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOffloadingImplOffloadingJobCloner
        /// </summary>
        [Test]
        public void ComAdobeGraniteOffloadingImplOffloadingJobClonerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? offloadingJobclonerEnabled = null;
            //var response = instance.ComAdobeGraniteOffloadingImplOffloadingJobCloner(post, apply, delete, action, location, propertylist, offloadingJobclonerEnabled);
            //Assert.IsInstanceOf<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo> (response, "response is ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOffloadingImplOffloadingJobOffloader
        /// </summary>
        [Test]
        public void ComAdobeGraniteOffloadingImplOffloadingJobOffloaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? offloadingOffloaderEnabled = null;
            //var response = instance.ComAdobeGraniteOffloadingImplOffloadingJobOffloader(post, apply, delete, action, location, propertylist, offloadingOffloaderEnabled);
            //Assert.IsInstanceOf<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo> (response, "response is ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager
        /// </summary>
        [Test]
        public void ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? offloadingAgentmanagerEnabled = null;
            //var response = instance.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post, apply, delete, action, location, propertylist, offloadingAgentmanagerEnabled);
            //Assert.IsInstanceOf<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo> (response, "response is ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo
        /// </summary>
        [Test]
        public void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string defaultTransportAgentToWorkerPrefix = null;
            //string defaultTransportAgentToMasterPrefix = null;
            //string defaultTransportInputPackage = null;
            //string defaultTransportOutputPackage = null;
            //bool? defaultTransportReplicationSynchronous = null;
            //bool? defaultTransportContentpackage = null;
            //bool? offloadingTransporterDefaultEnabled = null;
            //var response = instance.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post, apply, delete, action, location, propertylist, defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix, defaultTransportInputPackage, defaultTransportOutputPackage, defaultTransportReplicationSynchronous, defaultTransportContentpackage, offloadingTransporterDefaultEnabled);
            //Assert.IsInstanceOf<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo> (response, "response is ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? omnisearchSuggestionRequiretextMin = null;
            //bool? omnisearchSuggestionSpellcheckRequire = null;
            //var response = instance.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post, apply, delete, action, location, propertylist, omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire);
            //Assert.IsInstanceOf<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo> (response, "response is ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteOptoutImplOptOutServiceImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteOptoutImplOptOutServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> optoutCookies = null;
            //List<string> optoutHeaders = null;
            //List<string> optoutWhitelistCookies = null;
            //var response = instance.ComAdobeGraniteOptoutImplOptOutServiceImpl(post, apply, delete, action, location, propertylist, optoutCookies, optoutHeaders, optoutWhitelistCookies);
            //Assert.IsInstanceOf<ComAdobeGraniteOptoutImplOptOutServiceImplInfo> (response, "response is ComAdobeGraniteOptoutImplOptOutServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? indexingCriticalThreshold = null;
            //int? indexingWarnThreshold = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post, apply, delete, action, location, propertylist, indexingCriticalThreshold, indexingWarnThreshold, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo> (response, "response is ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? largeIndexCriticalThreshold = null;
            //int? largeIndexWarnThreshold = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post, apply, delete, action, location, propertylist, largeIndexCriticalThreshold, largeIndexWarnThreshold, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo> (response, "response is ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo> (response, "response is ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics
        /// </summary>
        [Test]
        public void ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? getPeriod = null;
            //var response = instance.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post, apply, delete, action, location, propertylist, getPeriod);
            //Assert.IsInstanceOf<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo> (response, "response is ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo> (response, "response is ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? numberOfRetriesAllowed = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post, apply, delete, action, location, propertylist, numberOfRetriesAllowed, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo> (response, "response is ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC
        /// </summary>
        [Test]
        public void ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo> (response, "response is ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo> (response, "response is ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC
        /// </summary>
        [Test]
        public void ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //List<string> excludeSearchPath = null;
            //var response = instance.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post, apply, delete, action, location, propertylist, hcTags, excludeSearchPath);
            //Assert.IsInstanceOf<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo> (response, "response is ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo> (response, "response is ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe
        /// </summary>
        [Test]
        public void ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo> (response, "response is ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //List<string> accountLogins = null;
            //List<string> consoleLogins = null;
            //var response = instance.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post, apply, delete, action, location, propertylist, hcTags, accountLogins, consoleLogins);
            //Assert.IsInstanceOf<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo> (response, "response is ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //int? diskSpaceWarnThreshold = null;
            //int? diskSpaceErrorThreshold = null;
            //var response = instance.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post, apply, delete, action, location, propertylist, hcTags, diskSpaceWarnThreshold, diskSpaceErrorThreshold);
            //Assert.IsInstanceOf<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo> (response, "response is ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck
        /// </summary>
        [Test]
        public void ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo> (response, "response is ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRepositoryImplCommitStatsConfig
        /// </summary>
        [Test]
        public void ComAdobeGraniteRepositoryImplCommitStatsConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //int? intervalSeconds = null;
            //int? commitsPerIntervalThreshold = null;
            //int? maxLocationLength = null;
            //int? maxDetailsShown = null;
            //int? minDetailsPercentage = null;
            //List<string> threadMatchers = null;
            //int? maxGreedyDepth = null;
            //string greedyStackMatchers = null;
            //List<string> stackFilters = null;
            //List<string> stackMatchers = null;
            //List<string> stackCategorizers = null;
            //List<string> stackShorteners = null;
            //var response = instance.ComAdobeGraniteRepositoryImplCommitStatsConfig(post, apply, delete, action, location, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners);
            //Assert.IsInstanceOf<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo> (response, "response is ComAdobeGraniteRepositoryImplCommitStatsConfigInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRepositoryServiceUserConfiguration
        /// </summary>
        [Test]
        public void ComAdobeGraniteRepositoryServiceUserConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //bool? serviceusersSimpleSubjectPopulation = null;
            //List<string> serviceusersList = null;
            //var response = instance.ComAdobeGraniteRepositoryServiceUserConfiguration(post, apply, delete, action, location, propertylist, serviceRanking, serviceusersSimpleSubjectPopulation, serviceusersList);
            //Assert.IsInstanceOf<ComAdobeGraniteRepositoryServiceUserConfigurationInfo> (response, "response is ComAdobeGraniteRepositoryServiceUserConfigurationInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm
        /// </summary>
        [Test]
        public void ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo> (response, "response is ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteResourcestatusImplCompositeStatusType
        /// </summary>
        [Test]
        public void ComAdobeGraniteResourcestatusImplCompositeStatusTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //List<string> types = null;
            //var response = instance.ComAdobeGraniteResourcestatusImplCompositeStatusType(post, apply, delete, action, location, propertylist, name, types);
            //Assert.IsInstanceOf<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo> (response, "response is ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteResourcestatusImplStatusResourceProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string providerRoot = null;
            //var response = instance.ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post, apply, delete, action, location, propertylist, providerRoot);
            //Assert.IsInstanceOf<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo> (response, "response is ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter
        /// </summary>
        [Test]
        public void ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? mimeAllowEmpty = null;
            //List<string> mimeAllowed = null;
            //var response = instance.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post, apply, delete, action, location, propertylist, mimeAllowEmpty, mimeAllowed);
            //Assert.IsInstanceOf<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo> (response, "response is ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string providerRoots = null;
            //var response = instance.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post, apply, delete, action, location, propertylist, providerRoots);
            //Assert.IsInstanceOf<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo> (response, "response is ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteRestImplServletDefaultGETServlet
        /// </summary>
        [Test]
        public void ComAdobeGraniteRestImplServletDefaultGETServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? defaultLimit = null;
            //bool? useAbsoluteUri = null;
            //var response = instance.ComAdobeGraniteRestImplServletDefaultGETServlet(post, apply, delete, action, location, propertylist, defaultLimit, useAbsoluteUri);
            //Assert.IsInstanceOf<ComAdobeGraniteRestImplServletDefaultGETServletInfo> (response, "response is ComAdobeGraniteRestImplServletDefaultGETServletInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS
        /// </summary>
        [Test]
        public void ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> hcTags = null;
            //var response = instance.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post, apply, delete, action, location, propertylist, hcTags);
            //Assert.IsInstanceOf<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo> (response, "response is ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteSecurityUserUserPropertiesService
        /// </summary>
        [Test]
        public void ComAdobeGraniteSecurityUserUserPropertiesServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string adapterCondition = null;
            //List<string> graniteUserpropertiesNodetypes = null;
            //List<string> graniteUserpropertiesResourcetypes = null;
            //var response = instance.ComAdobeGraniteSecurityUserUserPropertiesService(post, apply, delete, action, location, propertylist, adapterCondition, graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes);
            //Assert.IsInstanceOf<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo> (response, "response is ComAdobeGraniteSecurityUserUserPropertiesServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string group2memberRelationshipOutgoing = null;
            //List<string> group2memberExcludedOutgoing = null;
            //string group2memberRelationshipIncoming = null;
            //List<string> group2memberExcludedIncoming = null;
            //var response = instance.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post, apply, delete, action, location, propertylist, group2memberRelationshipOutgoing, group2memberExcludedOutgoing, group2memberRelationshipIncoming, group2memberExcludedIncoming);
            //Assert.IsInstanceOf<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo> (response, "response is ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //string jmxObjectname = null;
            //var response = instance.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post, apply, delete, action, location, propertylist, schedulerExpression, jmxObjectname);
            //Assert.IsInstanceOf<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo> (response, "response is ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory
        /// </summary>
        [Test]
        public void ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string adapterCondition = null;
            //var response = instance.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post, apply, delete, action, location, propertylist, adapterCondition);
            //Assert.IsInstanceOf<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo> (response, "response is ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService
        /// </summary>
        [Test]
        public void ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? archivingEnabled = null;
            //string schedulerExpression = null;
            //int? archiveSinceDaysCompleted = null;
            //var response = instance.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post, apply, delete, action, location, propertylist, archivingEnabled, schedulerExpression, archiveSinceDaysCompleted);
            //Assert.IsInstanceOf<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo> (response, "response is ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask
        /// </summary>
        [Test]
        public void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? purgeCompleted = null;
            //int? completedAge = null;
            //bool? purgeActive = null;
            //int? activeAge = null;
            //int? saveThreshold = null;
            //var response = instance.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post, apply, delete, action, location, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold);
            //Assert.IsInstanceOf<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo> (response, "response is ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor
        /// </summary>
        [Test]
        public void ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string adapterCondition = null;
            //List<string> taskmanagerAdmingroups = null;
            //var response = instance.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post, apply, delete, action, location, propertylist, adapterCondition, taskmanagerAdmingroups);
            //Assert.IsInstanceOf<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo> (response, "response is ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteThreaddumpThreadDumpCollector
        /// </summary>
        [Test]
        public void ComAdobeGraniteThreaddumpThreadDumpCollectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? schedulerPeriod = null;
            //string schedulerRunOn = null;
            //bool? graniteThreaddumpEnabled = null;
            //int? graniteThreaddumpDumpsPerFile = null;
            //bool? graniteThreaddumpEnableGzipCompression = null;
            //bool? graniteThreaddumpEnableDirectoriesCompression = null;
            //bool? graniteThreaddumpEnableJStack = null;
            //int? graniteThreaddumpMaxBackupDays = null;
            //string graniteThreaddumpBackupCleanTrigger = null;
            //var response = instance.ComAdobeGraniteThreaddumpThreadDumpCollector(post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerRunOn, graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger);
            //Assert.IsInstanceOf<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo> (response, "response is ComAdobeGraniteThreaddumpThreadDumpCollectorInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl
        /// </summary>
        [Test]
        public void ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string translationFactory = null;
            //string defaultConnectorLabel = null;
            //string defaultConnectorAttribution = null;
            //string defaultConnectorWorkspaceId = null;
            //string defaultConnectorSubscriptionKey = null;
            //string languageMapLocation = null;
            //string categoryMapLocation = null;
            //int? retryAttempts = null;
            //int? timeoutCount = null;
            //var response = instance.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post, apply, delete, action, location, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount);
            //Assert.IsInstanceOf<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo> (response, "response is ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteTranslationCoreImplTranslationManagerImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteTranslationCoreImplTranslationManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string defaultConnectorName = null;
            //string defaultCategory = null;
            //var response = instance.ComAdobeGraniteTranslationCoreImplTranslationManagerImpl(post, apply, delete, action, location, propertylist, defaultConnectorName, defaultCategory);
            //Assert.IsInstanceOf<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo> (response, "response is ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl
        /// </summary>
        [Test]
        public void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? htmllibmanagerTiming = null;
            //string htmllibmanagerDebugInitJs = null;
            //bool? htmllibmanagerMinify = null;
            //bool? htmllibmanagerDebug = null;
            //bool? htmllibmanagerGzip = null;
            //int? htmllibmanagerMaxDataUriSize = null;
            //int? htmllibmanagerMaxage = null;
            //bool? htmllibmanagerForceCQUrlInfo = null;
            //string htmllibmanagerDefaultthemename = null;
            //string htmllibmanagerDefaultuserthemename = null;
            //string htmllibmanagerClientmanager = null;
            //List<string> htmllibmanagerPathList = null;
            //List<string> htmllibmanagerExcludedPathList = null;
            //List<string> htmllibmanagerProcessorJs = null;
            //List<string> htmllibmanagerProcessorCss = null;
            //List<string> htmllibmanagerLongcachePatterns = null;
            //string htmllibmanagerLongcacheFormat = null;
            //bool? htmllibmanagerUseFileSystemOutputCache = null;
            //string htmllibmanagerFileSystemOutputCacheLocation = null;
            //List<string> htmllibmanagerDisableReplacement = null;
            //var response = instance.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post, apply, delete, action, location, propertylist, htmllibmanagerTiming, htmllibmanagerDebugInitJs, htmllibmanagerMinify, htmllibmanagerDebug, htmllibmanagerGzip, htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager, htmllibmanagerPathList, htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs, htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement);
            //Assert.IsInstanceOf<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo> (response, "response is ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //var response = instance.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post, apply, delete, action, location, propertylist, enabled);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo> (response, "response is ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? graniteWorkflowWorkflowPublishEventServiceEnabled = null;
            //var response = instance.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post, apply, delete, action, location, propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo> (response, "response is ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? bucketSize = null;
            //var response = instance.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post, apply, delete, action, location, propertylist, bucketSize);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo> (response, "response is ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? defaultTimeout = null;
            //int? maxTimeout = null;
            //int? defaultPeriod = null;
            //var response = instance.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post, apply, delete, action, location, propertylist, defaultTimeout, maxTimeout, defaultPeriod);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo> (response, "response is ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowCoreJobJobHandler
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowCoreJobJobHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> jobTopics = null;
            //bool? allowSelfProcessTermination = null;
            //var response = instance.ComAdobeGraniteWorkflowCoreJobJobHandler(post, apply, delete, action, location, propertylist, jobTopics, allowSelfProcessTermination);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo> (response, "response is ComAdobeGraniteWorkflowCoreJobJobHandlerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string jobTopics = null;
            //var response = instance.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post, apply, delete, action, location, propertylist, jobTopics);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo> (response, "response is ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowCorePayloadMapCache
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowCorePayloadMapCacheTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> getSystemWorkflowModels = null;
            //string getPackageRootPath = null;
            //var response = instance.ComAdobeGraniteWorkflowCorePayloadMapCache(post, apply, delete, action, location, propertylist, getSystemWorkflowModels, getPackageRootPath);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo> (response, "response is ComAdobeGraniteWorkflowCorePayloadMapCacheInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> payloadMoveWhiteList = null;
            //bool? payloadMoveHandleFromWorkflowProcess = null;
            //var response = instance.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post, apply, delete, action, location, propertylist, payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo> (response, "response is ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowCoreWorkflowConfig
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowCoreWorkflowConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqWorkflowConfigWorkflowPackagesRootPath = null;
            //bool? cqWorkflowConfigWorkflowProcessLegacyMode = null;
            //bool? cqWorkflowConfigAllowLocking = null;
            //var response = instance.ComAdobeGraniteWorkflowCoreWorkflowConfig(post, apply, delete, action, location, propertylist, cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo> (response, "response is ComAdobeGraniteWorkflowCoreWorkflowConfigInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowCoreWorkflowSessionFactory
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string graniteWorkflowinboxSortPropertyName = null;
            //string graniteWorkflowinboxSortOrder = null;
            //int? cqWorkflowJobRetry = null;
            //List<string> cqWorkflowSuperuser = null;
            //int? graniteWorkflowInboxQuerySize = null;
            //bool? graniteWorkflowAdminUserGroupFilter = null;
            //bool? graniteWorkflowEnforceWorkitemAssigneePermissions = null;
            //bool? graniteWorkflowEnforceWorkflowInitiatorPermissions = null;
            //bool? graniteWorkflowInjectTenantIdInJobTopics = null;
            //int? graniteWorkflowMaxPurgeSaveThreshold = null;
            //int? graniteWorkflowMaxPurgeQueryCount = null;
            //var response = instance.ComAdobeGraniteWorkflowCoreWorkflowSessionFactory(post, apply, delete, action, location, propertylist, graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder, cqWorkflowJobRetry, cqWorkflowSuperuser, graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo> (response, "response is ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo");
        }
        
        /// <summary>
        /// Test ComAdobeGraniteWorkflowPurgeScheduler
        /// </summary>
        [Test]
        public void ComAdobeGraniteWorkflowPurgeSchedulerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string scheduledpurgeName = null;
            //string scheduledpurgeWorkflowStatus = null;
            //List<string> scheduledpurgeModelIds = null;
            //int? scheduledpurgeDaysold = null;
            //var response = instance.ComAdobeGraniteWorkflowPurgeScheduler(post, apply, delete, action, location, propertylist, scheduledpurgeName, scheduledpurgeWorkflowStatus, scheduledpurgeModelIds, scheduledpurgeDaysold);
            //Assert.IsInstanceOf<ComAdobeGraniteWorkflowPurgeSchedulerInfo> (response, "response is ComAdobeGraniteWorkflowPurgeSchedulerInfo");
        }
        
        /// <summary>
        /// Test ComAdobeOctopusNcommBootstrap
        /// </summary>
        [Test]
        public void ComAdobeOctopusNcommBootstrapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxConnections = null;
            //int? maxRequests = null;
            //int? requestTimeout = null;
            //int? requestRetries = null;
            //int? launchTimeout = null;
            //var response = instance.ComAdobeOctopusNcommBootstrap(post, apply, delete, action, location, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout);
            //Assert.IsInstanceOf<ComAdobeOctopusNcommBootstrapInfo> (response, "response is ComAdobeOctopusNcommBootstrapInfo");
        }
        
        /// <summary>
        /// Test ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS
        /// </summary>
        [Test]
        public void ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string communitiesIntegrationLivefyreSlingEventFilter = null;
            //var response = instance.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post, apply, delete, action, location, propertylist, communitiesIntegrationLivefyreSlingEventFilter);
            //Assert.IsInstanceOf<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo> (response, "response is ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo");
        }
        
        /// <summary>
        /// Test ComAdobeXmpWorkerFilesNcommXMPFilesNComm
        /// </summary>
        [Test]
        public void ComAdobeXmpWorkerFilesNcommXMPFilesNCommTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string maxConnections = null;
            //string maxRequests = null;
            //string requestTimeout = null;
            //string logDir = null;
            //var response = instance.ComAdobeXmpWorkerFilesNcommXMPFilesNComm(post, apply, delete, action, location, propertylist, maxConnections, maxRequests, requestTimeout, logDir);
            //Assert.IsInstanceOf<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo> (response, "response is ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo");
        }
        
        /// <summary>
        /// Test ComDayCommonsDatasourceJdbcpoolJdbcPoolService
        /// </summary>
        [Test]
        public void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string jdbcDriverClass = null;
            //string jdbcConnectionUri = null;
            //string jdbcUsername = null;
            //string jdbcPassword = null;
            //string jdbcValidationQuery = null;
            //bool? defaultReadonly = null;
            //bool? defaultAutocommit = null;
            //int? poolSize = null;
            //int? poolMaxWaitMsec = null;
            //string datasourceName = null;
            //List<string> datasourceSvcProperties = null;
            //var response = instance.ComDayCommonsDatasourceJdbcpoolJdbcPoolService(post, apply, delete, action, location, propertylist, jdbcDriverClass, jdbcConnectionUri, jdbcUsername, jdbcPassword, jdbcValidationQuery, defaultReadonly, defaultAutocommit, poolSize, poolMaxWaitMsec, datasourceName, datasourceSvcProperties);
            //Assert.IsInstanceOf<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo> (response, "response is ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo");
        }
        
        /// <summary>
        /// Test ComDayCommonsHttpclient
        /// </summary>
        [Test]
        public void ComDayCommonsHttpclientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? proxyEnabled = null;
            //string proxyHost = null;
            //string proxyUser = null;
            //string proxyPassword = null;
            //string proxyNtlmHost = null;
            //string proxyNtlmDomain = null;
            //List<string> proxyExceptions = null;
            //var response = instance.ComDayCommonsHttpclient(post, apply, delete, action, location, propertylist, proxyEnabled, proxyHost, proxyUser, proxyPassword, proxyNtlmHost, proxyNtlmDomain, proxyExceptions);
            //Assert.IsInstanceOf<ComDayCommonsHttpclientInfo> (response, "response is ComDayCommonsHttpclientInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsImplStorePropertiesChangeListener
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsImplStorePropertiesChangeListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqStoreListenerAdditionalStorePaths = null;
            //var response = instance.ComDayCqAnalyticsImplStorePropertiesChangeListener(post, apply, delete, action, location, propertylist, cqStoreListenerAdditionalStorePaths);
            //Assert.IsInstanceOf<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo> (response, "response is ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> allowedPaths = null;
            //int? cqAnalyticsSaintExporterPagesize = null;
            //var response = instance.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post, apply, delete, action, location, propertylist, allowedPaths, cqAnalyticsSaintExporterPagesize);
            //Assert.IsInstanceOf<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo> (response, "response is ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsSitecatalystImplImporterReportImporter
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsSitecatalystImplImporterReportImporterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? reportFetchAttempts = null;
            //int? reportFetchDelay = null;
            //var response = instance.ComDayCqAnalyticsSitecatalystImplImporterReportImporter(post, apply, delete, action, location, propertylist, reportFetchAttempts, reportFetchDelay);
            //Assert.IsInstanceOf<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo> (response, "response is ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqAnalyticsAdapterfactoryContextstores = null;
            //var response = instance.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post, apply, delete, action, location, propertylist, cqAnalyticsAdapterfactoryContextstores);
            //Assert.IsInstanceOf<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo> (response, "response is ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqAnalyticsSitecatalystServiceDatacenterUrl = null;
            //List<string> devhostnamepatterns = null;
            //int? connectionTimeout = null;
            //int? socketTimeout = null;
            //var response = instance.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post, apply, delete, action, location, propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns, connectionTimeout, socketTimeout);
            //Assert.IsInstanceOf<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo> (response, "response is ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqAnalyticsTestandtargetAccountoptionsupdaterEnabled = null;
            //var response = instance.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled);
            //Assert.IsInstanceOf<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo> (response, "response is ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = null;
            //var response = instance.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled);
            //Assert.IsInstanceOf<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo> (response, "response is ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = null;
            //var response = instance.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled);
            //Assert.IsInstanceOf<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo> (response, "response is ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsTestandtargetImplSegmentImporter
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsTestandtargetImplSegmentImporterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqAnalyticsTestandtargetSegmentimporterEnabled = null;
            //var response = instance.ComDayCqAnalyticsTestandtargetImplSegmentImporter(post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled);
            //Assert.IsInstanceOf<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo> (response, "response is ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string endpointUri = null;
            //int? connectionTimeout = null;
            //int? socketTimeout = null;
            //var response = instance.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post, apply, delete, action, location, propertylist, endpointUri, connectionTimeout, socketTimeout);
            //Assert.IsInstanceOf<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo> (response, "response is ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string testandtargetEndpointUrl = null;
            //var response = instance.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post, apply, delete, action, location, propertylist, testandtargetEndpointUrl);
            //Assert.IsInstanceOf<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo> (response, "response is ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl
        /// </summary>
        [Test]
        public void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string cqAnalyticsTestandtargetApiUrl = null;
            //int? cqAnalyticsTestandtargetTimeout = null;
            //int? cqAnalyticsTestandtargetSockettimeout = null;
            //string cqAnalyticsTestandtargetRecommendationsUrlReplace = null;
            //string cqAnalyticsTestandtargetRecommendationsUrlReplacewith = null;
            //var response = instance.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith);
            //Assert.IsInstanceOf<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo> (response, "response is ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAuthImplCugCugSupportImpl
        /// </summary>
        [Test]
        public void ComDayCqAuthImplCugCugSupportImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cugExemptedPrincipals = null;
            //bool? cugEnabled = null;
            //string cugPrincipalsRegex = null;
            //string cugPrincipalsReplacement = null;
            //var response = instance.ComDayCqAuthImplCugCugSupportImpl(post, apply, delete, action, location, propertylist, cugExemptedPrincipals, cugEnabled, cugPrincipalsRegex, cugPrincipalsReplacement);
            //Assert.IsInstanceOf<ComDayCqAuthImplCugCugSupportImplInfo> (response, "response is ComDayCqAuthImplCugCugSupportImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqAuthImplLoginSelectorHandler
        /// </summary>
        [Test]
        public void ComDayCqAuthImplLoginSelectorHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string path = null;
            //int? serviceRanking = null;
            //List<string> authLoginselectorMappings = null;
            //List<string> authLoginselectorChangepwMappings = null;
            //string authLoginselectorDefaultloginpage = null;
            //string authLoginselectorDefaultchangepwpage = null;
            //List<string> authLoginselectorHandle = null;
            //bool? authLoginselectorHandleAllExtensions = null;
            //var response = instance.ComDayCqAuthImplLoginSelectorHandler(post, apply, delete, action, location, propertylist, path, serviceRanking, authLoginselectorMappings, authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage, authLoginselectorHandle, authLoginselectorHandleAllExtensions);
            //Assert.IsInstanceOf<ComDayCqAuthImplLoginSelectorHandlerInfo> (response, "response is ComDayCqAuthImplLoginSelectorHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqCommonsImplExternalizerImpl
        /// </summary>
        [Test]
        public void ComDayCqCommonsImplExternalizerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> externalizerDomains = null;
            //string externalizerHost = null;
            //string externalizerContextpath = null;
            //bool? externalizerEncodedpath = null;
            //var response = instance.ComDayCqCommonsImplExternalizerImpl(post, apply, delete, action, location, propertylist, externalizerDomains, externalizerHost, externalizerContextpath, externalizerEncodedpath);
            //Assert.IsInstanceOf<ComDayCqCommonsImplExternalizerImplInfo> (response, "response is ComDayCqCommonsImplExternalizerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqCommonsServletsRootMappingServlet
        /// </summary>
        [Test]
        public void ComDayCqCommonsServletsRootMappingServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string rootmappingTarget = null;
            //var response = instance.ComDayCqCommonsServletsRootMappingServlet(post, apply, delete, action, location, propertylist, rootmappingTarget);
            //Assert.IsInstanceOf<ComDayCqCommonsServletsRootMappingServletInfo> (response, "response is ComDayCqCommonsServletsRootMappingServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke
        /// </summary>
        [Test]
        public void ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> codeupgradetasks = null;
            //List<string> codeupgradetaskfilters = null;
            //var response = instance.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post, apply, delete, action, location, propertylist, codeupgradetasks, codeupgradetaskfilters);
            //Assert.IsInstanceOf<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo> (response, "response is ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo");
        }
        
        /// <summary>
        /// Test ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList
        /// </summary>
        [Test]
        public void ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> upgradeTaskIgnoreList = null;
            //var response = instance.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post, apply, delete, action, location, propertylist, upgradeTaskIgnoreList);
            //Assert.IsInstanceOf<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo> (response, "response is ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo");
        }
        
        /// <summary>
        /// Test ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist
        /// </summary>
        [Test]
        public void ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string effectiveBundleListPath = null;
            //var response = instance.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post, apply, delete, action, location, propertylist, effectiveBundleListPath);
            //Assert.IsInstanceOf<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo> (response, "response is ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo");
        }
        
        /// <summary>
        /// Test ComDayCqContentsyncImplContentSyncManagerImpl
        /// </summary>
        [Test]
        public void ComDayCqContentsyncImplContentSyncManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string contentsyncFallbackAuthorizable = null;
            //string contentsyncFallbackUpdateuser = null;
            //var response = instance.ComDayCqContentsyncImplContentSyncManagerImpl(post, apply, delete, action, location, propertylist, contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser);
            //Assert.IsInstanceOf<ComDayCqContentsyncImplContentSyncManagerImplInfo> (response, "response is ComDayCqContentsyncImplContentSyncManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCommonsHandlerStandardImageHandler
        /// </summary>
        [Test]
        public void ComDayCqDamCommonsHandlerStandardImageHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? largeFileThreshold = null;
            //int? largeCommentThreshold = null;
            //bool? cqDamEnableExtMetaExtraction = null;
            //var response = instance.ComDayCqDamCommonsHandlerStandardImageHandler(post, apply, delete, action, location, propertylist, largeFileThreshold, largeCommentThreshold, cqDamEnableExtMetaExtraction);
            //Assert.IsInstanceOf<ComDayCqDamCommonsHandlerStandardImageHandlerInfo> (response, "response is ComDayCqDamCommonsHandlerStandardImageHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCommonsMetadataXmpFilterBlackWhite
        /// </summary>
        [Test]
        public void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? xmpFilterApplyWhitelist = null;
            //List<string> xmpFilterWhitelist = null;
            //bool? xmpFilterApplyBlacklist = null;
            //List<string> xmpFilterBlacklist = null;
            //var response = instance.ComDayCqDamCommonsMetadataXmpFilterBlackWhite(post, apply, delete, action, location, propertylist, xmpFilterApplyWhitelist, xmpFilterWhitelist, xmpFilterApplyBlacklist, xmpFilterBlacklist);
            //Assert.IsInstanceOf<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo> (response, "response is ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCommonsUtilImplAssetCacheImpl
        /// </summary>
        [Test]
        public void ComDayCqDamCommonsUtilImplAssetCacheImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? largeFileMin = null;
            //bool? cacheApply = null;
            //List<string> mimeTypes = null;
            //var response = instance.ComDayCqDamCommonsUtilImplAssetCacheImpl(post, apply, delete, action, location, propertylist, largeFileMin, cacheApply, mimeTypes);
            //Assert.IsInstanceOf<ComDayCqDamCommonsUtilImplAssetCacheImplInfo> (response, "response is ComDayCqDamCommonsUtilImplAssetCacheImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqDamConfigAnnotationPdfDocumentWidth = null;
            //int? cqDamConfigAnnotationPdfDocumentHeight = null;
            //int? cqDamConfigAnnotationPdfDocumentPaddingHorizontal = null;
            //int? cqDamConfigAnnotationPdfDocumentPaddingVertical = null;
            //int? cqDamConfigAnnotationPdfFontSize = null;
            //string cqDamConfigAnnotationPdfFontColor = null;
            //string cqDamConfigAnnotationPdfFontFamily = null;
            //string cqDamConfigAnnotationPdfFontLight = null;
            //int? cqDamConfigAnnotationPdfMarginTextImage = null;
            //int? cqDamConfigAnnotationPdfMinImageHeight = null;
            //int? cqDamConfigAnnotationPdfReviewStatusWidth = null;
            //string cqDamConfigAnnotationPdfReviewStatusColorApproved = null;
            //string cqDamConfigAnnotationPdfReviewStatusColorRejected = null;
            //string cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = null;
            //int? cqDamConfigAnnotationPdfAnnotationMarkerWidth = null;
            //int? cqDamConfigAnnotationPdfAssetMinheight = null;
            //var response = instance.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post, apply, delete, action, location, propertylist, cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo> (response, "response is ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplAssetMoveListener
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplAssetMoveListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //var response = instance.ComDayCqDamCoreImplAssetMoveListener(post, apply, delete, action, location, propertylist, enabled);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplAssetMoveListenerInfo> (response, "response is ComDayCqDamCoreImplAssetMoveListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? isEnabled = null;
            //var response = instance.ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post, apply, delete, action, location, propertylist, isEnabled);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo> (response, "response is ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqDamAdhocAssetSharePrezipMaxcontentsize = null;
            //var response = instance.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post, apply, delete, action, location, propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo> (response, "response is ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplCacheCQBufferedImageCache
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplCacheCQBufferedImageCacheTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqDamImageCacheMaxMemory = null;
            //int? cqDamImageCacheMaxAge = null;
            //string cqDamImageCacheMaxDimension = null;
            //var response = instance.ComDayCqDamCoreImplCacheCQBufferedImageCache(post, apply, delete, action, location, propertylist, cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo> (response, "response is ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplDamChangeEventListener
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplDamChangeEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> changeeventlistenerObservedPaths = null;
            //var response = instance.ComDayCqDamCoreImplDamChangeEventListener(post, apply, delete, action, location, propertylist, changeeventlistenerObservedPaths);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplDamChangeEventListenerInfo> (response, "response is ComDayCqDamCoreImplDamChangeEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplDamEventPurgeService
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplDamEventPurgeServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //int? maxSavedActivities = null;
            //int? saveInterval = null;
            //bool? enableActivityPurge = null;
            //string eventTypes = null;
            //var response = instance.ComDayCqDamCoreImplDamEventPurgeService(post, apply, delete, action, location, propertylist, schedulerExpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplDamEventPurgeServiceInfo> (response, "response is ComDayCqDamCoreImplDamEventPurgeServiceInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplDamEventRecorderImpl
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplDamEventRecorderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventFilter = null;
            //int? eventQueueLength = null;
            //bool? eventrecorderEnabled = null;
            //List<string> eventrecorderBlacklist = null;
            //string eventrecorderEventtypes = null;
            //var response = instance.ComDayCqDamCoreImplDamEventRecorderImpl(post, apply, delete, action, location, propertylist, eventFilter, eventQueueLength, eventrecorderEnabled, eventrecorderBlacklist, eventrecorderEventtypes);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplDamEventRecorderImplInfo> (response, "response is ComDayCqDamCoreImplDamEventRecorderImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplEventDamEventAuditListener
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplEventDamEventAuditListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventFilter = null;
            //bool? enabled = null;
            //var response = instance.ComDayCqDamCoreImplEventDamEventAuditListener(post, apply, delete, action, location, propertylist, eventFilter, enabled);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplEventDamEventAuditListenerInfo> (response, "response is ComDayCqDamCoreImplEventDamEventAuditListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplExpiryNotificationJobImpl
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplExpiryNotificationJobImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamExpiryNotificationSchedulerIstimebased = null;
            //string cqDamExpiryNotificationSchedulerTimebasedRule = null;
            //int? cqDamExpiryNotificationSchedulerPeriodRule = null;
            //bool? sendEmail = null;
            //int? assetExpiredLimit = null;
            //int? priorNotificationSeconds = null;
            //string cqDamExpiryNotificationUrlProtocol = null;
            //var response = instance.ComDayCqDamCoreImplExpiryNotificationJobImpl(post, apply, delete, action, location, propertylist, cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplExpiryNotificationJobImplInfo> (response, "response is ComDayCqDamCoreImplExpiryNotificationJobImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? isEnabled = null;
            //var response = instance.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post, apply, delete, action, location, propertylist, isEnabled);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo> (response, "response is ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplGfxCommonsGfxRenderer
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplGfxCommonsGfxRendererTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? skipBufferedcache = null;
            //var response = instance.ComDayCqDamCoreImplGfxCommonsGfxRenderer(post, apply, delete, action, location, propertylist, skipBufferedcache);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo> (response, "response is ComDayCqDamCoreImplGfxCommonsGfxRendererInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplHandlerEPSFormatHandler
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplHandlerEPSFormatHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string mimetype = null;
            //var response = instance.ComDayCqDamCoreImplHandlerEPSFormatHandler(post, apply, delete, action, location, propertylist, mimetype);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo> (response, "response is ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplHandlerIndesignFormatHandler
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplHandlerIndesignFormatHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> mimetype = null;
            //var response = instance.ComDayCqDamCoreImplHandlerIndesignFormatHandler(post, apply, delete, action, location, propertylist, mimetype);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo> (response, "response is ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplHandlerJpegHandler
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplHandlerJpegHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamEnableExtMetaExtraction = null;
            //int? largeFileThreshold = null;
            //int? largeCommentThreshold = null;
            //var response = instance.ComDayCqDamCoreImplHandlerJpegHandler(post, apply, delete, action, location, propertylist, cqDamEnableExtMetaExtraction, largeFileThreshold, largeCommentThreshold);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplHandlerJpegHandlerInfo> (response, "response is ComDayCqDamCoreImplHandlerJpegHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplHandlerXmpNCommXMPHandler
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> xmphandlerCqFormats = null;
            //var response = instance.ComDayCqDamCoreImplHandlerXmpNCommXMPHandler(post, apply, delete, action, location, propertylist, xmphandlerCqFormats);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo> (response, "response is ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string jmxObjectname = null;
            //bool? propertyMeasureEnabled = null;
            //string propertyName = null;
            //int? propertyMaxWaitMs = null;
            //decimal? propertyMaxRate = null;
            //bool? fulltextMeasureEnabled = null;
            //string fulltextName = null;
            //int? fulltextMaxWaitMs = null;
            //decimal? fulltextMaxRate = null;
            //var response = instance.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post, apply, delete, action, location, propertylist, jmxObjectname, propertyMeasureEnabled, propertyName, propertyMaxWaitMs, propertyMaxRate, fulltextMeasureEnabled, fulltextName, fulltextMaxWaitMs, fulltextMaxRate);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo> (response, "response is ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplJmxAssetMigrationMBeanImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string jmxObjectname = null;
            //var response = instance.ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post, apply, delete, action, location, propertylist, jmxObjectname);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo> (response, "response is ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplJmxAssetUpdateMonitorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string jmxObjectname = null;
            //bool? active = null;
            //var response = instance.ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post, apply, delete, action, location, propertylist, jmxObjectname, active);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo> (response, "response is ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string operation = null;
            //bool? emailEnabled = null;
            //var response = instance.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post, apply, delete, action, location, propertylist, operation, emailEnabled);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo> (response, "response is ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string operation = null;
            //string operationIcon = null;
            //string topicName = null;
            //bool? emailEnabled = null;
            //var response = instance.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post, apply, delete, action, location, propertylist, operation, operationIcon, topicName, emailEnabled);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo> (response, "response is ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplLightboxLightboxServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplLightboxLightboxServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingServletPaths = null;
            //List<string> slingServletMethods = null;
            //bool? cqDamEnableAnonymous = null;
            //var response = instance.ComDayCqDamCoreImplLightboxLightboxServlet(post, apply, delete, action, location, propertylist, slingServletPaths, slingServletMethods, cqDamEnableAnonymous);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplLightboxLightboxServletInfo> (response, "response is ComDayCqDamCoreImplLightboxLightboxServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplMetadataEditorSelectComponentHandler
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> granitedata = null;
            //var response = instance.ComDayCqDamCoreImplMetadataEditorSelectComponentHandler(post, apply, delete, action, location, propertylist, granitedata);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo> (response, "response is ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamAllowAllMime = null;
            //List<string> cqDamAllowedAssetMimes = null;
            //var response = instance.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post, apply, delete, action, location, propertylist, cqDamAllowAllMime, cqDamAllowedAssetMimes);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo> (response, "response is ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamDetectAssetMimeFromContent = null;
            //var response = instance.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post, apply, delete, action, location, propertylist, cqDamDetectAssetMimeFromContent);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo> (response, "response is ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplMissingMetadataNotificationJob
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplMissingMetadataNotificationJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamMissingmetadataNotificationSchedulerIstimebased = null;
            //string cqDamMissingmetadataNotificationSchedulerTimebasedRule = null;
            //int? cqDamMissingmetadataNotificationSchedulerPeriodRule = null;
            //string cqDamMissingmetadataNotificationRecipient = null;
            //var response = instance.ComDayCqDamCoreImplMissingMetadataNotificationJob(post, apply, delete, action, location, propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo> (response, "response is ComDayCqDamCoreImplMissingMetadataNotificationJobInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string processLabel = null;
            //bool? notifyOnComplete = null;
            //var response = instance.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post, apply, delete, action, location, propertylist, processLabel, notifyOnComplete);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo> (response, "response is ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplProcessTextExtractionProcess
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplProcessTextExtractionProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> mimeTypes = null;
            //int? maxExtract = null;
            //var response = instance.ComDayCqDamCoreImplProcessTextExtractionProcess(post, apply, delete, action, location, propertylist, mimeTypes, maxExtract);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplProcessTextExtractionProcessInfo> (response, "response is ComDayCqDamCoreImplProcessTextExtractionProcessInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplRenditionMakerImpl
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplRenditionMakerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? xmpPropagate = null;
            //List<string> xmpExcludes = null;
            //var response = instance.ComDayCqDamCoreImplRenditionMakerImpl(post, apply, delete, action, location, propertylist, xmpPropagate, xmpExcludes);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplRenditionMakerImplInfo> (response, "response is ComDayCqDamCoreImplRenditionMakerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplReportsReportExportService
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplReportsReportExportServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? queryBatchSize = null;
            //var response = instance.ComDayCqDamCoreImplReportsReportExportService(post, apply, delete, action, location, propertylist, queryBatchSize);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplReportsReportExportServiceInfo> (response, "response is ComDayCqDamCoreImplReportsReportExportServiceInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplReportsReportPurgeService
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplReportsReportPurgeServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //int? maxSavedReports = null;
            //int? timeDuration = null;
            //bool? enableReportPurge = null;
            //var response = instance.ComDayCqDamCoreImplReportsReportPurgeService(post, apply, delete, action, location, propertylist, schedulerExpression, maxSavedReports, timeDuration, enableReportPurge);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplReportsReportPurgeServiceInfo> (response, "response is ComDayCqDamCoreImplReportsReportPurgeServiceInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletAssetDownloadServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletAssetDownloadServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //var response = instance.ComDayCqDamCoreImplServletAssetDownloadServlet(post, apply, delete, action, location, propertylist, enabled);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletAssetDownloadServletInfo> (response, "response is ComDayCqDamCoreImplServletAssetDownloadServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletAssetStatusServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletAssetStatusServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqDamBatchStatusMaxassets = null;
            //var response = instance.ComDayCqDamCoreImplServletAssetStatusServlet(post, apply, delete, action, location, propertylist, cqDamBatchStatusMaxassets);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletAssetStatusServletInfo> (response, "response is ComDayCqDamCoreImplServletAssetStatusServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletAssetXMPSearchServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletAssetXMPSearchServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqDamBatchIndesignMaxassets = null;
            //var response = instance.ComDayCqDamCoreImplServletAssetXMPSearchServlet(post, apply, delete, action, location, propertylist, cqDamBatchIndesignMaxassets);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo> (response, "response is ComDayCqDamCoreImplServletAssetXMPSearchServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletBatchMetadataServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletBatchMetadataServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqDamBatchMetadataAssetDefault = null;
            //List<string> cqDamBatchMetadataCollectionDefault = null;
            //int? cqDamBatchMetadataMaxresources = null;
            //var response = instance.ComDayCqDamCoreImplServletBatchMetadataServlet(post, apply, delete, action, location, propertylist, cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletBatchMetadataServletInfo> (response, "response is ComDayCqDamCoreImplServletBatchMetadataServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletBinaryProviderServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletBinaryProviderServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> slingServletResourceTypes = null;
            //List<string> slingServletMethods = null;
            //bool? cqDamDrmEnable = null;
            //var response = instance.ComDayCqDamCoreImplServletBinaryProviderServlet(post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletMethods, cqDamDrmEnable);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletBinaryProviderServletInfo> (response, "response is ComDayCqDamCoreImplServletBinaryProviderServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletCollectionServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletCollectionServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqDamBatchCollectionProperties = null;
            //int? cqDamBatchCollectionMaxcollections = null;
            //var response = instance.ComDayCqDamCoreImplServletCollectionServlet(post, apply, delete, action, location, propertylist, cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletCollectionServletInfo> (response, "response is ComDayCqDamCoreImplServletCollectionServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletCollectionsServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletCollectionsServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqDamBatchCollectionsProperties = null;
            //int? cqDamBatchCollectionsLimit = null;
            //var response = instance.ComDayCqDamCoreImplServletCollectionsServlet(post, apply, delete, action, location, propertylist, cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletCollectionsServletInfo> (response, "response is ComDayCqDamCoreImplServletCollectionsServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletCompanionServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletCompanionServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string moreInfo = null;
            //string mntoverlaydamguicontentassetsmoreinfoHtmlpath = null;
            //var response = instance.ComDayCqDamCoreImplServletCompanionServlet(post, apply, delete, action, location, propertylist, moreInfo, mntoverlaydamguicontentassetsmoreinfoHtmlpath);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletCompanionServletInfo> (response, "response is ComDayCqDamCoreImplServletCompanionServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletCreateAssetServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletCreateAssetServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? detectDuplicate = null;
            //var response = instance.ComDayCqDamCoreImplServletCreateAssetServlet(post, apply, delete, action, location, propertylist, detectDuplicate);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletCreateAssetServletInfo> (response, "response is ComDayCqDamCoreImplServletCreateAssetServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletDamContentDispositionFilter
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletDamContentDispositionFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqMimeTypeBlacklist = null;
            //bool? cqDamEmptyMime = null;
            //var response = instance.ComDayCqDamCoreImplServletDamContentDispositionFilter(post, apply, delete, action, location, propertylist, cqMimeTypeBlacklist, cqDamEmptyMime);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo> (response, "response is ComDayCqDamCoreImplServletDamContentDispositionFilterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletGuidLookupFilter
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletGuidLookupFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamCoreGuidlookupfilterEnabled = null;
            //var response = instance.ComDayCqDamCoreImplServletGuidLookupFilter(post, apply, delete, action, location, propertylist, cqDamCoreGuidlookupfilterEnabled);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletGuidLookupFilterInfo> (response, "response is ComDayCqDamCoreImplServletGuidLookupFilterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletHealthCheckServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletHealthCheckServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string cqDamSyncWorkflowId = null;
            //List<string> cqDamSyncFolderTypes = null;
            //var response = instance.ComDayCqDamCoreImplServletHealthCheckServlet(post, apply, delete, action, location, propertylist, cqDamSyncWorkflowId, cqDamSyncFolderTypes);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletHealthCheckServletInfo> (response, "response is ComDayCqDamCoreImplServletHealthCheckServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletMetadataGetServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletMetadataGetServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingServletResourceTypes = null;
            //string slingServletMethods = null;
            //string slingServletExtensions = null;
            //string slingServletSelectors = null;
            //var response = instance.ComDayCqDamCoreImplServletMetadataGetServlet(post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletExtensions, slingServletSelectors);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletMetadataGetServletInfo> (response, "response is ComDayCqDamCoreImplServletMetadataGetServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletMultipleLicenseAcceptServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamDrmEnable = null;
            //var response = instance.ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post, apply, delete, action, location, propertylist, cqDamDrmEnable);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo> (response, "response is ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplServletResourceCollectionServlet
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplServletResourceCollectionServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> slingServletResourceTypes = null;
            //string slingServletMethods = null;
            //string slingServletSelectors = null;
            //string downloadConfig = null;
            //string viewSelector = null;
            //bool? sendEmail = null;
            //var response = instance.ComDayCqDamCoreImplServletResourceCollectionServlet(post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletSelectors, downloadConfig, viewSelector, sendEmail);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplServletResourceCollectionServletInfo> (response, "response is ComDayCqDamCoreImplServletResourceCollectionServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? createPreviewEnabled = null;
            //bool? updatePreviewEnabled = null;
            //int? queueSize = null;
            //string folderPreviewRenditionRegex = null;
            //var response = instance.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post, apply, delete, action, location, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo> (response, "response is ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreImplUnzipUnzipConfig
        /// </summary>
        [Test]
        public void ComDayCqDamCoreImplUnzipUnzipConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqDamConfigUnzipMaxuncompressedsize = null;
            //string cqDamConfigUnzipEncoding = null;
            //var response = instance.ComDayCqDamCoreImplUnzipUnzipConfig(post, apply, delete, action, location, propertylist, cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding);
            //Assert.IsInstanceOf<ComDayCqDamCoreImplUnzipUnzipConfigInfo> (response, "response is ComDayCqDamCoreImplUnzipUnzipConfigInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreProcessExifToolExtractMetadataProcess
        /// </summary>
        [Test]
        public void ComDayCqDamCoreProcessExifToolExtractMetadataProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string processLabel = null;
            //bool? cqDamEnableSha1 = null;
            //var response = instance.ComDayCqDamCoreProcessExifToolExtractMetadataProcess(post, apply, delete, action, location, propertylist, processLabel, cqDamEnableSha1);
            //Assert.IsInstanceOf<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo> (response, "response is ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreProcessExtractMetadataProcess
        /// </summary>
        [Test]
        public void ComDayCqDamCoreProcessExtractMetadataProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string processLabel = null;
            //bool? cqDamEnableSha1 = null;
            //var response = instance.ComDayCqDamCoreProcessExtractMetadataProcess(post, apply, delete, action, location, propertylist, processLabel, cqDamEnableSha1);
            //Assert.IsInstanceOf<ComDayCqDamCoreProcessExtractMetadataProcessInfo> (response, "response is ComDayCqDamCoreProcessExtractMetadataProcessInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamCoreProcessMetadataProcessorProcess
        /// </summary>
        [Test]
        public void ComDayCqDamCoreProcessMetadataProcessorProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string processLabel = null;
            //bool? cqDamEnableSha1 = null;
            //List<string> cqDamMetadataXssprotectedProperties = null;
            //var response = instance.ComDayCqDamCoreProcessMetadataProcessorProcess(post, apply, delete, action, location, propertylist, processLabel, cqDamEnableSha1, cqDamMetadataXssprotectedProperties);
            //Assert.IsInstanceOf<ComDayCqDamCoreProcessMetadataProcessorProcessInfo> (response, "response is ComDayCqDamCoreProcessMetadataProcessorProcessInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamHandlerFfmpegLocatorImpl
        /// </summary>
        [Test]
        public void ComDayCqDamHandlerFfmpegLocatorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> executableSearchpath = null;
            //var response = instance.ComDayCqDamHandlerFfmpegLocatorImpl(post, apply, delete, action, location, propertylist, executableSearchpath);
            //Assert.IsInstanceOf<ComDayCqDamHandlerFfmpegLocatorImplInfo> (response, "response is ComDayCqDamHandlerFfmpegLocatorImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventFilter = null;
            //List<string> fontmgrSystemFontDir = null;
            //string fontmgrAdobeFontDir = null;
            //string fontmgrCustomerFontDir = null;
            //var response = instance.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post, apply, delete, action, location, propertylist, eventFilter, fontmgrSystemFontDir, fontmgrAdobeFontDir, fontmgrCustomerFontDir);
            //Assert.IsInstanceOf<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo> (response, "response is ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamHandlerStandardPdfPdfHandler
        /// </summary>
        [Test]
        public void ComDayCqDamHandlerStandardPdfPdfHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? rasterAnnotation = null;
            //var response = instance.ComDayCqDamHandlerStandardPdfPdfHandler(post, apply, delete, action, location, propertylist, rasterAnnotation);
            //Assert.IsInstanceOf<ComDayCqDamHandlerStandardPdfPdfHandlerInfo> (response, "response is ComDayCqDamHandlerStandardPdfPdfHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamHandlerStandardPsPostScriptHandler
        /// </summary>
        [Test]
        public void ComDayCqDamHandlerStandardPsPostScriptHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? rasterAnnotation = null;
            //var response = instance.ComDayCqDamHandlerStandardPsPostScriptHandler(post, apply, delete, action, location, propertylist, rasterAnnotation);
            //Assert.IsInstanceOf<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo> (response, "response is ComDayCqDamHandlerStandardPsPostScriptHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamHandlerStandardPsdPsdHandler
        /// </summary>
        [Test]
        public void ComDayCqDamHandlerStandardPsdPsdHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? largeFileThreshold = null;
            //var response = instance.ComDayCqDamHandlerStandardPsdPsdHandler(post, apply, delete, action, location, propertylist, largeFileThreshold);
            //Assert.IsInstanceOf<ComDayCqDamHandlerStandardPsdPsdHandlerInfo> (response, "response is ComDayCqDamHandlerStandardPsdPsdHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamIdsImplIDSJobProcessor
        /// </summary>
        [Test]
        public void ComDayCqDamIdsImplIDSJobProcessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enableMultisession = null;
            //bool? idsCcEnable = null;
            //bool? enableRetry = null;
            //bool? enableRetryScripterror = null;
            //string externalizerDomainCqhost = null;
            //string externalizerDomainHttp = null;
            //var response = instance.ComDayCqDamIdsImplIDSJobProcessor(post, apply, delete, action, location, propertylist, enableMultisession, idsCcEnable, enableRetry, enableRetryScripterror, externalizerDomainCqhost, externalizerDomainHttp);
            //Assert.IsInstanceOf<ComDayCqDamIdsImplIDSJobProcessorInfo> (response, "response is ComDayCqDamIdsImplIDSJobProcessorInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamIdsImplIDSPoolManagerImpl
        /// </summary>
        [Test]
        public void ComDayCqDamIdsImplIDSPoolManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxErrorsToBlacklist = null;
            //int? retryIntervalToWhitelist = null;
            //int? connectTimeout = null;
            //int? socketTimeout = null;
            //string processLabel = null;
            //int? connectionUseMax = null;
            //var response = instance.ComDayCqDamIdsImplIDSPoolManagerImpl(post, apply, delete, action, location, propertylist, maxErrorsToBlacklist, retryIntervalToWhitelist, connectTimeout, socketTimeout, processLabel, connectionUseMax);
            //Assert.IsInstanceOf<ComDayCqDamIdsImplIDSPoolManagerImplInfo> (response, "response is ComDayCqDamIdsImplIDSPoolManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamInddImplHandlerIndesignXMPHandler
        /// </summary>
        [Test]
        public void ComDayCqDamInddImplHandlerIndesignXMPHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string processLabel = null;
            //bool? extractPages = null;
            //var response = instance.ComDayCqDamInddImplHandlerIndesignXMPHandler(post, apply, delete, action, location, propertylist, processLabel, extractPages);
            //Assert.IsInstanceOf<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo> (response, "response is ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamInddImplServletSnippetCreationServlet
        /// </summary>
        [Test]
        public void ComDayCqDamInddImplServletSnippetCreationServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? snippetcreationMaxcollections = null;
            //var response = instance.ComDayCqDamInddImplServletSnippetCreationServlet(post, apply, delete, action, location, propertylist, snippetcreationMaxcollections);
            //Assert.IsInstanceOf<ComDayCqDamInddImplServletSnippetCreationServletInfo> (response, "response is ComDayCqDamInddImplServletSnippetCreationServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamInddProcessINDDMediaExtractProcess
        /// </summary>
        [Test]
        public void ComDayCqDamInddProcessINDDMediaExtractProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string processLabel = null;
            //string cqDamInddPagesRegex = null;
            //bool? idsJobDecoupled = null;
            //string idsJobWorkflowModel = null;
            //var response = instance.ComDayCqDamInddProcessINDDMediaExtractProcess(post, apply, delete, action, location, propertylist, processLabel, cqDamInddPagesRegex, idsJobDecoupled, idsJobWorkflowModel);
            //Assert.IsInstanceOf<ComDayCqDamInddProcessINDDMediaExtractProcessInfo> (response, "response is ComDayCqDamInddProcessINDDMediaExtractProcessInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl
        /// </summary>
        [Test]
        public void ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? batchCommitSize = null;
            //var response = instance.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post, apply, delete, action, location, propertylist, batchCommitSize);
            //Assert.IsInstanceOf<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo> (response, "response is ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob
        /// </summary>
        [Test]
        public void ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //var response = instance.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post, apply, delete, action, location, propertylist, schedulerExpression);
            //Assert.IsInstanceOf<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo> (response, "response is ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro
        /// </summary>
        [Test]
        public void ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? deleteZipFile = null;
            //var response = instance.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post, apply, delete, action, location, propertylist, deleteZipFile);
            //Assert.IsInstanceOf<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo> (response, "response is ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven
        /// </summary>
        [Test]
        public void ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamS7damDynamicmediaconfigeventlistenerEnabled = null;
            //var response = instance.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post, apply, delete, action, location, propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled);
            //Assert.IsInstanceOf<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo> (response, "response is ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner
        /// </summary>
        [Test]
        public void ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //bool? schedulerConcurrent = null;
            //var response = instance.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post, apply, delete, action, location, propertylist, schedulerExpression, schedulerConcurrent);
            //Assert.IsInstanceOf<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo> (response, "response is ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamS7damCommonPostServletsSetCreateHandler
        /// </summary>
        [Test]
        public void ComDayCqDamS7damCommonPostServletsSetCreateHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingPostOperation = null;
            //string slingServletMethods = null;
            //var response = instance.ComDayCqDamS7damCommonPostServletsSetCreateHandler(post, apply, delete, action, location, propertylist, slingPostOperation, slingServletMethods);
            //Assert.IsInstanceOf<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo> (response, "response is ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamS7damCommonPostServletsSetModifyHandler
        /// </summary>
        [Test]
        public void ComDayCqDamS7damCommonPostServletsSetModifyHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingPostOperation = null;
            //string slingServletMethods = null;
            //var response = instance.ComDayCqDamS7damCommonPostServletsSetModifyHandler(post, apply, delete, action, location, propertylist, slingPostOperation, slingServletMethods);
            //Assert.IsInstanceOf<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo> (response, "response is ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess
        /// </summary>
        [Test]
        public void ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string processLabel = null;
            //var response = instance.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post, apply, delete, action, location, propertylist, processLabel);
            //Assert.IsInstanceOf<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo> (response, "response is ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamS7damCommonS7damDamChangeEventListener
        /// </summary>
        [Test]
        public void ComDayCqDamS7damCommonS7damDamChangeEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamS7damDamchangeeventlistenerEnabled = null;
            //var response = instance.ComDayCqDamS7damCommonS7damDamChangeEventListener(post, apply, delete, action, location, propertylist, cqDamS7damDamchangeeventlistenerEnabled);
            //Assert.IsInstanceOf<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo> (response, "response is ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamS7damCommonServletsS7damProductInfoServlet
        /// </summary>
        [Test]
        public void ComDayCqDamS7damCommonServletsS7damProductInfoServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingServletPaths = null;
            //string slingServletMethods = null;
            //var response = instance.ComDayCqDamS7damCommonServletsS7damProductInfoServlet(post, apply, delete, action, location, propertylist, slingServletPaths, slingServletMethods);
            //Assert.IsInstanceOf<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo> (response, "response is ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = null;
            //int? cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = null;
            //int? cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = null;
            //int? cqDamS7damVideoproxyclientserviceHttpReadtimeoutName = null;
            //int? cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = null;
            //int? cqDamS7damVideoproxyclientserviceHttpMaxretrycountName = null;
            //int? cqDamS7damVideoproxyclientserviceUploadprogressIntervalName = null;
            //var response = instance.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post, apply, delete, action, location, propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName);
            //Assert.IsInstanceOf<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo> (response, "response is ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamScene7ImplScene7APIClientImpl
        /// </summary>
        [Test]
        public void ComDayCqDamScene7ImplScene7APIClientImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqDamScene7ApiclientRecordsperpageNofilterName = null;
            //int? cqDamScene7ApiclientRecordsperpageWithfilterName = null;
            //var response = instance.ComDayCqDamScene7ImplScene7APIClientImpl(post, apply, delete, action, location, propertylist, cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName);
            //Assert.IsInstanceOf<ComDayCqDamScene7ImplScene7APIClientImplInfo> (response, "response is ComDayCqDamScene7ImplScene7APIClientImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqDamScene7AssetmimetypeserviceMapping = null;
            //var response = instance.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post, apply, delete, action, location, propertylist, cqDamScene7AssetmimetypeserviceMapping);
            //Assert.IsInstanceOf<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo> (response, "response is ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamScene7ImplScene7ConfigurationEventListener
        /// </summary>
        [Test]
        public void ComDayCqDamScene7ImplScene7ConfigurationEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamScene7ConfigurationeventlistenerEnabled = null;
            //var response = instance.ComDayCqDamScene7ImplScene7ConfigurationEventListener(post, apply, delete, action, location, propertylist, cqDamScene7ConfigurationeventlistenerEnabled);
            //Assert.IsInstanceOf<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo> (response, "response is ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamScene7ImplScene7DamChangeEventListener
        /// </summary>
        [Test]
        public void ComDayCqDamScene7ImplScene7DamChangeEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqDamScene7DamchangeeventlistenerEnabled = null;
            //List<string> cqDamScene7DamchangeeventlistenerObservedPaths = null;
            //var response = instance.ComDayCqDamScene7ImplScene7DamChangeEventListener(post, apply, delete, action, location, propertylist, cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths);
            //Assert.IsInstanceOf<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo> (response, "response is ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string scene7FlashTemplatesRti = null;
            //string scene7FlashTemplatesRsi = null;
            //string scene7FlashTemplatesRb = null;
            //string scene7FlashTemplatesRurl = null;
            //string scene7FlashTemplateUrlFormatParameter = null;
            //var response = instance.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post, apply, delete, action, location, propertylist, scene7FlashTemplatesRti, scene7FlashTemplatesRsi, scene7FlashTemplatesRb, scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter);
            //Assert.IsInstanceOf<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo> (response, "response is ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamScene7ImplScene7UploadServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqDamScene7ImplScene7UploadServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? cqDamScene7UploadserviceActivejobtimeoutLabel = null;
            //int? cqDamScene7UploadserviceConnectionmaxperrouteLabel = null;
            //var response = instance.ComDayCqDamScene7ImplScene7UploadServiceImpl(post, apply, delete, action, location, propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel);
            //Assert.IsInstanceOf<ComDayCqDamScene7ImplScene7UploadServiceImplInfo> (response, "response is ComDayCqDamScene7ImplScene7UploadServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer
        /// </summary>
        [Test]
        public void ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string getCacheExpirationUnit = null;
            //int? getCacheExpirationValue = null;
            //var response = instance.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post, apply, delete, action, location, propertylist, getCacheExpirationUnit, getCacheExpirationValue);
            //Assert.IsInstanceOf<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo> (response, "response is ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamStockIntegrationImplConfigurationStockConfiguration
        /// </summary>
        [Test]
        public void ComDayCqDamStockIntegrationImplConfigurationStockConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string locale = null;
            //string imsConfig = null;
            //var response = instance.ComDayCqDamStockIntegrationImplConfigurationStockConfiguration(post, apply, delete, action, location, propertylist, name, locale, imsConfig);
            //Assert.IsInstanceOf<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo> (response, "response is ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo");
        }
        
        /// <summary>
        /// Test ComDayCqDamVideoImplServletVideoTestServlet
        /// </summary>
        [Test]
        public void ComDayCqDamVideoImplServletVideoTestServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //var response = instance.ComDayCqDamVideoImplServletVideoTestServlet(post, apply, delete, action, location, propertylist, enabled);
            //Assert.IsInstanceOf<ComDayCqDamVideoImplServletVideoTestServletInfo> (response, "response is ComDayCqDamVideoImplServletVideoTestServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqExtwidgetServletsImageSpriteServlet
        /// </summary>
        [Test]
        public void ComDayCqExtwidgetServletsImageSpriteServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //var response = instance.ComDayCqExtwidgetServletsImageSpriteServlet(post, apply, delete, action, location, propertylist, maxWidth, maxHeight);
            //Assert.IsInstanceOf<ComDayCqExtwidgetServletsImageSpriteServletInfo> (response, "response is ComDayCqExtwidgetServletsImageSpriteServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqImageInternalFontFontHelper
        /// </summary>
        [Test]
        public void ComDayCqImageInternalFontFontHelperTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> fontpath = null;
            //int? oversamplingFactor = null;
            //var response = instance.ComDayCqImageInternalFontFontHelper(post, apply, delete, action, location, propertylist, fontpath, oversamplingFactor);
            //Assert.IsInstanceOf<ComDayCqImageInternalFontFontHelperInfo> (response, "response is ComDayCqImageInternalFontFontHelperInfo");
        }
        
        /// <summary>
        /// Test ComDayCqJcrclustersupportClusterStartLevelController
        /// </summary>
        [Test]
        public void ComDayCqJcrclustersupportClusterStartLevelControllerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? clusterLevelEnable = null;
            //int? clusterMasterLevel = null;
            //int? clusterSlaveLevel = null;
            //var response = instance.ComDayCqJcrclustersupportClusterStartLevelController(post, apply, delete, action, location, propertylist, clusterLevelEnable, clusterMasterLevel, clusterSlaveLevel);
            //Assert.IsInstanceOf<ComDayCqJcrclustersupportClusterStartLevelControllerInfo> (response, "response is ComDayCqJcrclustersupportClusterStartLevelControllerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMailerDefaultMailService
        /// </summary>
        [Test]
        public void ComDayCqMailerDefaultMailServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string smtpHost = null;
            //int? smtpPort = null;
            //string smtpUser = null;
            //string smtpPassword = null;
            //string fromAddress = null;
            //bool? smtpSsl = null;
            //bool? smtpStarttls = null;
            //bool? debugEmail = null;
            //var response = instance.ComDayCqMailerDefaultMailService(post, apply, delete, action, location, propertylist, smtpHost, smtpPort, smtpUser, smtpPassword, fromAddress, smtpSsl, smtpStarttls, debugEmail);
            //Assert.IsInstanceOf<ComDayCqMailerDefaultMailServiceInfo> (response, "response is ComDayCqMailerDefaultMailServiceInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMailerImplCqMailingService
        /// </summary>
        [Test]
        public void ComDayCqMailerImplCqMailingServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string maxRecipientCount = null;
            //var response = instance.ComDayCqMailerImplCqMailingService(post, apply, delete, action, location, propertylist, maxRecipientCount);
            //Assert.IsInstanceOf<ComDayCqMailerImplCqMailingServiceInfo> (response, "response is ComDayCqMailerImplCqMailingServiceInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMailerImplEmailCqEmailTemplateFactory
        /// </summary>
        [Test]
        public void ComDayCqMailerImplEmailCqEmailTemplateFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string mailerEmailCharset = null;
            //var response = instance.ComDayCqMailerImplEmailCqEmailTemplateFactory(post, apply, delete, action, location, propertylist, mailerEmailCharset);
            //Assert.IsInstanceOf<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo> (response, "response is ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMailerImplEmailCqRetrieverTemplateFactory
        /// </summary>
        [Test]
        public void ComDayCqMailerImplEmailCqRetrieverTemplateFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? mailerEmailEmbed = null;
            //string mailerEmailCharset = null;
            //string mailerEmailRetrieverUserID = null;
            //string mailerEmailRetrieverUserPWD = null;
            //var response = instance.ComDayCqMailerImplEmailCqRetrieverTemplateFactory(post, apply, delete, action, location, propertylist, mailerEmailEmbed, mailerEmailCharset, mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD);
            //Assert.IsInstanceOf<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo> (response, "response is ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMcmCampaignImplIntegrationConfigImpl
        /// </summary>
        [Test]
        public void ComDayCqMcmCampaignImplIntegrationConfigImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> aemMcmCampaignFormConstraints = null;
            //string aemMcmCampaignPublicUrl = null;
            //bool? aemMcmCampaignRelaxedSSL = null;
            //var response = instance.ComDayCqMcmCampaignImplIntegrationConfigImpl(post, apply, delete, action, location, propertylist, aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL);
            //Assert.IsInstanceOf<ComDayCqMcmCampaignImplIntegrationConfigImplInfo> (response, "response is ComDayCqMcmCampaignImplIntegrationConfigImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory
        /// </summary>
        [Test]
        public void ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo> (response, "response is ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string fromAddress = null;
            //string senderHost = null;
            //string maxBounceCount = null;
            //var response = instance.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post, apply, delete, action, location, propertylist, fromAddress, senderHost, maxBounceCount);
            //Assert.IsInstanceOf<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo> (response, "response is ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMcmImplMCMConfiguration
        /// </summary>
        [Test]
        public void ComDayCqMcmImplMCMConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> experienceIndirection = null;
            //List<string> touchpointIndirection = null;
            //var response = instance.ComDayCqMcmImplMCMConfiguration(post, apply, delete, action, location, propertylist, experienceIndirection, touchpointIndirection);
            //Assert.IsInstanceOf<ComDayCqMcmImplMCMConfigurationInfo> (response, "response is ComDayCqMcmImplMCMConfigurationInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen
        /// </summary>
        [Test]
        public void ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //string componentResourceType = null;
            //var response = instance.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            //Assert.IsInstanceOf<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo> (response, "response is ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug
        /// </summary>
        [Test]
        public void ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //string componentResourceType = null;
            //var response = instance.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            //Assert.IsInstanceOf<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo> (response, "response is ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent
        /// </summary>
        [Test]
        public void ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo> (response, "response is ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa
        /// </summary>
        [Test]
        public void ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo> (response, "response is ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo");
        }
        
        /// <summary>
        /// Test ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH
        /// </summary>
        [Test]
        public void ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //string componentResourceType = null;
            //var response = instance.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            //Assert.IsInstanceOf<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo> (response, "response is ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo");
        }
        
        /// <summary>
        /// Test ComDayCqNotificationImplNotificationServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqNotificationImplNotificationServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventFilter = null;
            //var response = instance.ComDayCqNotificationImplNotificationServiceImpl(post, apply, delete, action, location, propertylist, eventFilter);
            //Assert.IsInstanceOf<ComDayCqNotificationImplNotificationServiceImplInfo> (response, "response is ComDayCqNotificationImplNotificationServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqPersonalizationImplServletsTargetingConfigurationServlet
        /// </summary>
        [Test]
        public void ComDayCqPersonalizationImplServletsTargetingConfigurationServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? forcelocation = null;
            //var response = instance.ComDayCqPersonalizationImplServletsTargetingConfigurationServlet(post, apply, delete, action, location, propertylist, forcelocation);
            //Assert.IsInstanceOf<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo> (response, "response is ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqPollingImporterImplManagedPollConfigImpl
        /// </summary>
        [Test]
        public void ComDayCqPollingImporterImplManagedPollConfigImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string id = null;
            //bool? enabled = null;
            //bool? reference = null;
            //int? interval = null;
            //string expression = null;
            //string source = null;
            //string target = null;
            //string login = null;
            //string password = null;
            //var response = instance.ComDayCqPollingImporterImplManagedPollConfigImpl(post, apply, delete, action, location, propertylist, id, enabled, reference, interval, expression, source, target, login, password);
            //Assert.IsInstanceOf<ComDayCqPollingImporterImplManagedPollConfigImplInfo> (response, "response is ComDayCqPollingImporterImplManagedPollConfigImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqPollingImporterImplManagedPollingImporterImpl
        /// </summary>
        [Test]
        public void ComDayCqPollingImporterImplManagedPollingImporterImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string importerUser = null;
            //var response = instance.ComDayCqPollingImporterImplManagedPollingImporterImpl(post, apply, delete, action, location, propertylist, importerUser);
            //Assert.IsInstanceOf<ComDayCqPollingImporterImplManagedPollingImporterImplInfo> (response, "response is ComDayCqPollingImporterImplManagedPollingImporterImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqPollingImporterImplPollingImporterImpl
        /// </summary>
        [Test]
        public void ComDayCqPollingImporterImplPollingImporterImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? importerMinInterval = null;
            //string importerUser = null;
            //List<string> excludePaths = null;
            //List<string> includePaths = null;
            //var response = instance.ComDayCqPollingImporterImplPollingImporterImpl(post, apply, delete, action, location, propertylist, importerMinInterval, importerUser, excludePaths, includePaths);
            //Assert.IsInstanceOf<ComDayCqPollingImporterImplPollingImporterImplInfo> (response, "response is ComDayCqPollingImporterImplPollingImporterImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationAuditReplicationEventListener
        /// </summary>
        [Test]
        public void ComDayCqReplicationAuditReplicationEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //var response = instance.ComDayCqReplicationAuditReplicationEventListener(post, apply, delete, action, location, propertylist, serviceRanking);
            //Assert.IsInstanceOf<ComDayCqReplicationAuditReplicationEventListenerInfo> (response, "response is ComDayCqReplicationAuditReplicationEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationContentStaticContentBuilder
        /// </summary>
        [Test]
        public void ComDayCqReplicationContentStaticContentBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string host = null;
            //int? port = null;
            //var response = instance.ComDayCqReplicationContentStaticContentBuilder(post, apply, delete, action, location, propertylist, host, port);
            //Assert.IsInstanceOf<ComDayCqReplicationContentStaticContentBuilderInfo> (response, "response is ComDayCqReplicationContentStaticContentBuilderInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationImplAgentManagerImpl
        /// </summary>
        [Test]
        public void ComDayCqReplicationImplAgentManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string jobTopics = null;
            //string serviceUserTarget = null;
            //string agentProviderTarget = null;
            //var response = instance.ComDayCqReplicationImplAgentManagerImpl(post, apply, delete, action, location, propertylist, jobTopics, serviceUserTarget, agentProviderTarget);
            //Assert.IsInstanceOf<ComDayCqReplicationImplAgentManagerImplInfo> (response, "response is ComDayCqReplicationImplAgentManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationImplContentDurboBinaryLessContentBuilder
        /// </summary>
        [Test]
        public void ComDayCqReplicationImplContentDurboBinaryLessContentBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? binaryThreshold = null;
            //var response = instance.ComDayCqReplicationImplContentDurboBinaryLessContentBuilder(post, apply, delete, action, location, propertylist, binaryThreshold);
            //Assert.IsInstanceOf<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo> (response, "response is ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationImplContentDurboDurboImportConfigurationProv
        /// </summary>
        [Test]
        public void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? preserveHierarchyNodes = null;
            //bool? ignoreVersioning = null;
            //bool? importAcl = null;
            //int? saveThreshold = null;
            //bool? preserveUserPaths = null;
            //bool? preserveUuid = null;
            //List<string> preserveUuidNodetypes = null;
            //List<string> preserveUuidSubtrees = null;
            //bool? autoCommit = null;
            //var response = instance.ComDayCqReplicationImplContentDurboDurboImportConfigurationProv(post, apply, delete, action, location, propertylist, preserveHierarchyNodes, ignoreVersioning, importAcl, saveThreshold, preserveUserPaths, preserveUuid, preserveUuidNodetypes, preserveUuidSubtrees, autoCommit);
            //Assert.IsInstanceOf<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo> (response, "response is ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationImplReplicationContentFactoryProviderImpl
        /// </summary>
        [Test]
        public void ComDayCqReplicationImplReplicationContentFactoryProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? replicationContentUseFileStorage = null;
            //int? replicationContentMaxCommitAttempts = null;
            //var response = instance.ComDayCqReplicationImplReplicationContentFactoryProviderImpl(post, apply, delete, action, location, propertylist, replicationContentUseFileStorage, replicationContentMaxCommitAttempts);
            //Assert.IsInstanceOf<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo> (response, "response is ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationImplReplicationReceiverImpl
        /// </summary>
        [Test]
        public void ComDayCqReplicationImplReplicationReceiverImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? receiverTmpfileThreshold = null;
            //bool? receiverPackagesUseInstall = null;
            //var response = instance.ComDayCqReplicationImplReplicationReceiverImpl(post, apply, delete, action, location, propertylist, receiverTmpfileThreshold, receiverPackagesUseInstall);
            //Assert.IsInstanceOf<ComDayCqReplicationImplReplicationReceiverImplInfo> (response, "response is ComDayCqReplicationImplReplicationReceiverImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationImplReplicatorImpl
        /// </summary>
        [Test]
        public void ComDayCqReplicationImplReplicatorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? distributeEvents = null;
            //var response = instance.ComDayCqReplicationImplReplicatorImpl(post, apply, delete, action, location, propertylist, distributeEvents);
            //Assert.IsInstanceOf<ComDayCqReplicationImplReplicatorImplInfo> (response, "response is ComDayCqReplicationImplReplicatorImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationImplReverseReplicator
        /// </summary>
        [Test]
        public void ComDayCqReplicationImplReverseReplicatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? schedulerPeriod = null;
            //var response = instance.ComDayCqReplicationImplReverseReplicator(post, apply, delete, action, location, propertylist, schedulerPeriod);
            //Assert.IsInstanceOf<ComDayCqReplicationImplReverseReplicatorInfo> (response, "response is ComDayCqReplicationImplReverseReplicatorInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationImplTransportBinaryLessTransportHandler
        /// </summary>
        [Test]
        public void ComDayCqReplicationImplTransportBinaryLessTransportHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> disabledCipherSuites = null;
            //List<string> enabledCipherSuites = null;
            //var response = instance.ComDayCqReplicationImplTransportBinaryLessTransportHandler(post, apply, delete, action, location, propertylist, disabledCipherSuites, enabledCipherSuites);
            //Assert.IsInstanceOf<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo> (response, "response is ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReplicationImplTransportHttp
        /// </summary>
        [Test]
        public void ComDayCqReplicationImplTransportHttpTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> disabledCipherSuites = null;
            //List<string> enabledCipherSuites = null;
            //var response = instance.ComDayCqReplicationImplTransportHttp(post, apply, delete, action, location, propertylist, disabledCipherSuites, enabledCipherSuites);
            //Assert.IsInstanceOf<ComDayCqReplicationImplTransportHttpInfo> (response, "response is ComDayCqReplicationImplTransportHttpInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReportingImplCacheCacheImpl
        /// </summary>
        [Test]
        public void ComDayCqReportingImplCacheCacheImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? repcacheEnable = null;
            //int? repcacheTtl = null;
            //int? repcacheMax = null;
            //var response = instance.ComDayCqReportingImplCacheCacheImpl(post, apply, delete, action, location, propertylist, repcacheEnable, repcacheTtl, repcacheMax);
            //Assert.IsInstanceOf<ComDayCqReportingImplCacheCacheImplInfo> (response, "response is ComDayCqReportingImplCacheCacheImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReportingImplConfigServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqReportingImplConfigServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string repconfTimezone = null;
            //string repconfLocale = null;
            //string repconfSnapshots = null;
            //string repconfRepdir = null;
            //int? repconfHourofday = null;
            //int? repconfMinofhour = null;
            //int? repconfMaxrows = null;
            //bool? repconfFakedata = null;
            //string repconfSnapshotuser = null;
            //bool? repconfEnforcesnapshotuser = null;
            //var response = instance.ComDayCqReportingImplConfigServiceImpl(post, apply, delete, action, location, propertylist, repconfTimezone, repconfLocale, repconfSnapshots, repconfRepdir, repconfHourofday, repconfMinofhour, repconfMaxrows, repconfFakedata, repconfSnapshotuser, repconfEnforcesnapshotuser);
            //Assert.IsInstanceOf<ComDayCqReportingImplConfigServiceImplInfo> (response, "response is ComDayCqReportingImplConfigServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqReportingImplRLogAnalyzer
        /// </summary>
        [Test]
        public void ComDayCqReportingImplRLogAnalyzerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string requestLogOutput = null;
            //var response = instance.ComDayCqReportingImplRLogAnalyzer(post, apply, delete, action, location, propertylist, requestLogOutput);
            //Assert.IsInstanceOf<ComDayCqReportingImplRLogAnalyzerInfo> (response, "response is ComDayCqReportingImplRLogAnalyzerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqRewriterLinkcheckerImplLinkCheckerImpl
        /// </summary>
        [Test]
        public void ComDayCqRewriterLinkcheckerImplLinkCheckerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? schedulerPeriod = null;
            //bool? schedulerConcurrent = null;
            //int? serviceBadLinkToleranceInterval = null;
            //List<string> serviceCheckOverridePatterns = null;
            //bool? serviceCacheBrokenInternalLinks = null;
            //List<string> serviceSpecialLinkPrefix = null;
            //List<string> serviceSpecialLinkPatterns = null;
            //var response = instance.ComDayCqRewriterLinkcheckerImplLinkCheckerImpl(post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerConcurrent, serviceBadLinkToleranceInterval, serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix, serviceSpecialLinkPatterns);
            //Assert.IsInstanceOf<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo> (response, "response is ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqRewriterLinkcheckerImplLinkCheckerTask
        /// </summary>
        [Test]
        public void ComDayCqRewriterLinkcheckerImplLinkCheckerTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? schedulerPeriod = null;
            //bool? schedulerConcurrent = null;
            //int? goodLinkTestInterval = null;
            //int? badLinkTestInterval = null;
            //int? linkUnusedInterval = null;
            //int? connectionTimeout = null;
            //var response = instance.ComDayCqRewriterLinkcheckerImplLinkCheckerTask(post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerConcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionTimeout);
            //Assert.IsInstanceOf<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo> (response, "response is ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo");
        }
        
        /// <summary>
        /// Test ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory
        /// </summary>
        [Test]
        public void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? linkcheckertransformerDisableRewriting = null;
            //bool? linkcheckertransformerDisableChecking = null;
            //int? linkcheckertransformerMapCacheSize = null;
            //bool? linkcheckertransformerStrictExtensionCheck = null;
            //bool? linkcheckertransformerStripHtmltExtension = null;
            //List<string> linkcheckertransformerRewriteElements = null;
            //List<string> linkcheckertransformerStripExtensionPathBlacklist = null;
            //var response = instance.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post, apply, delete, action, location, propertylist, linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist);
            //Assert.IsInstanceOf<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo> (response, "response is ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl
        /// </summary>
        [Test]
        public void ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceMaxLinksPerHost = null;
            //bool? serviceSaveExternalLinkReferences = null;
            //var response = instance.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post, apply, delete, action, location, propertylist, serviceMaxLinksPerHost, serviceSaveExternalLinkReferences);
            //Assert.IsInstanceOf<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo> (response, "response is ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqRewriterProcessorImplHtmlParserFactory
        /// </summary>
        [Test]
        public void ComDayCqRewriterProcessorImplHtmlParserFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> htmlparserProcessTags = null;
            //bool? htmlparserPreserveCamelCase = null;
            //var response = instance.ComDayCqRewriterProcessorImplHtmlParserFactory(post, apply, delete, action, location, propertylist, htmlparserProcessTags, htmlparserPreserveCamelCase);
            //Assert.IsInstanceOf<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo> (response, "response is ComDayCqRewriterProcessorImplHtmlParserFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqSearchImplBuilderQueryBuilderImpl
        /// </summary>
        [Test]
        public void ComDayCqSearchImplBuilderQueryBuilderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> excerptProperties = null;
            //int? cacheMaxEntries = null;
            //int? cacheEntryLifetime = null;
            //bool? xpathUnion = null;
            //var response = instance.ComDayCqSearchImplBuilderQueryBuilderImpl(post, apply, delete, action, location, propertylist, excerptProperties, cacheMaxEntries, cacheEntryLifetime, xpathUnion);
            //Assert.IsInstanceOf<ComDayCqSearchImplBuilderQueryBuilderImplInfo> (response, "response is ComDayCqSearchImplBuilderQueryBuilderImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqSearchSuggestImplSuggestionIndexManagerImpl
        /// </summary>
        [Test]
        public void ComDayCqSearchSuggestImplSuggestionIndexManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string pathBuilderTarget = null;
            //string suggestBasepath = null;
            //var response = instance.ComDayCqSearchSuggestImplSuggestionIndexManagerImpl(post, apply, delete, action, location, propertylist, pathBuilderTarget, suggestBasepath);
            //Assert.IsInstanceOf<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo> (response, "response is ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler
        /// </summary>
        [Test]
        public void ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqSearchpromoteConfighandlerEnabled = null;
            //var response = instance.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post, apply, delete, action, location, propertylist, cqSearchpromoteConfighandlerEnabled);
            //Assert.IsInstanceOf<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo> (response, "response is ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqSearchpromoteImplSearchPromoteServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqSearchpromoteImplSearchPromoteServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string cqSearchpromoteConfigurationServerUri = null;
            //string cqSearchpromoteConfigurationEnvironment = null;
            //int? connectionTimeout = null;
            //int? socketTimeout = null;
            //var response = instance.ComDayCqSearchpromoteImplSearchPromoteServiceImpl(post, apply, delete, action, location, propertylist, cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment, connectionTimeout, socketTimeout);
            //Assert.IsInstanceOf<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo> (response, "response is ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqSecurityACLSetup
        /// </summary>
        [Test]
        public void ComDayCqSecurityACLSetupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqAclsetupRules = null;
            //var response = instance.ComDayCqSecurityACLSetup(post, apply, delete, action, location, propertylist, cqAclsetupRules);
            //Assert.IsInstanceOf<ComDayCqSecurityACLSetupInfo> (response, "response is ComDayCqSecurityACLSetupInfo");
        }
        
        /// <summary>
        /// Test ComDayCqStatisticsImplStatisticsServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqStatisticsImplStatisticsServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? schedulerPeriod = null;
            //bool? schedulerConcurrent = null;
            //string path = null;
            //string workspace = null;
            //string keywordsPath = null;
            //bool? asyncEntries = null;
            //var response = instance.ComDayCqStatisticsImplStatisticsServiceImpl(post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerConcurrent, path, workspace, keywordsPath, asyncEntries);
            //Assert.IsInstanceOf<ComDayCqStatisticsImplStatisticsServiceImplInfo> (response, "response is ComDayCqStatisticsImplStatisticsServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqTaggingImplJcrTagManagerFactoryImpl
        /// </summary>
        [Test]
        public void ComDayCqTaggingImplJcrTagManagerFactoryImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? validationEnabled = null;
            //var response = instance.ComDayCqTaggingImplJcrTagManagerFactoryImpl(post, apply, delete, action, location, propertylist, validationEnabled);
            //Assert.IsInstanceOf<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo> (response, "response is ComDayCqTaggingImplJcrTagManagerFactoryImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqTaggingImplSearchTagPredicateEvaluator
        /// </summary>
        [Test]
        public void ComDayCqTaggingImplSearchTagPredicateEvaluatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? ignorePath = null;
            //var response = instance.ComDayCqTaggingImplSearchTagPredicateEvaluator(post, apply, delete, action, location, propertylist, ignorePath);
            //Assert.IsInstanceOf<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo> (response, "response is ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo");
        }
        
        /// <summary>
        /// Test ComDayCqTaggingImplTagGarbageCollector
        /// </summary>
        [Test]
        public void ComDayCqTaggingImplTagGarbageCollectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //var response = instance.ComDayCqTaggingImplTagGarbageCollector(post, apply, delete, action, location, propertylist, schedulerExpression);
            //Assert.IsInstanceOf<ComDayCqTaggingImplTagGarbageCollectorInfo> (response, "response is ComDayCqTaggingImplTagGarbageCollectorInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler
        /// </summary>
        [Test]
        public void ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqPagesupdatehandlerImageresourcetypes = null;
            //var response = instance.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post, apply, delete, action, location, propertylist, cqPagesupdatehandlerImageresourcetypes);
            //Assert.IsInstanceOf<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo> (response, "response is ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor
        /// </summary>
        [Test]
        public void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqContentsyncPathrewritertransformerMappingLinks = null;
            //List<string> cqContentsyncPathrewritertransformerMappingClientlibs = null;
            //List<string> cqContentsyncPathrewritertransformerMappingImages = null;
            //string cqContentsyncPathrewritertransformerAttributePattern = null;
            //string cqContentsyncPathrewritertransformerClientlibraryPattern = null;
            //string cqContentsyncPathrewritertransformerClientlibraryReplace = null;
            //var response = instance.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post, apply, delete, action, location, propertylist, cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace);
            //Assert.IsInstanceOf<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo> (response, "response is ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplAuthoringUIModeServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplAuthoringUIModeServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string authoringUIModeServiceDefault = null;
            //var response = instance.ComDayCqWcmCoreImplAuthoringUIModeServiceImpl(post, apply, delete, action, location, propertylist, authoringUIModeServiceDefault);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo> (response, "response is ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplCommandsWCMCommandServlet
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplCommandsWCMCommandServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> wcmcommandservletDeleteWhitelist = null;
            //var response = instance.ComDayCqWcmCoreImplCommandsWCMCommandServlet(post, apply, delete, action, location, propertylist, wcmcommandservletDeleteWhitelist);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo> (response, "response is ComDayCqWcmCoreImplCommandsWCMCommandServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string dimDefaultMode = null;
            //bool? dimAppcacheEnabled = null;
            //var response = instance.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post, apply, delete, action, location, propertylist, dimDefaultMode, dimAppcacheEnabled);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo> (response, "response is ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplEventPageEventAuditListener
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplEventPageEventAuditListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string configured = null;
            //var response = instance.ComDayCqWcmCoreImplEventPageEventAuditListener(post, apply, delete, action, location, propertylist, configured);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo> (response, "response is ComDayCqWcmCoreImplEventPageEventAuditListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplEventPagePostProcessor
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplEventPagePostProcessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> paths = null;
            //var response = instance.ComDayCqWcmCoreImplEventPagePostProcessor(post, apply, delete, action, location, propertylist, paths);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplEventPagePostProcessorInfo> (response, "response is ComDayCqWcmCoreImplEventPagePostProcessorInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplEventRepositoryChangeEventListener
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplEventRepositoryChangeEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> paths = null;
            //List<string> excludedPaths = null;
            //var response = instance.ComDayCqWcmCoreImplEventRepositoryChangeEventListener(post, apply, delete, action, location, propertylist, paths, excludedPaths);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo> (response, "response is ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplEventTemplatePostProcessor
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplEventTemplatePostProcessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string paths = null;
            //var response = instance.ComDayCqWcmCoreImplEventTemplatePostProcessor(post, apply, delete, action, location, propertylist, paths);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo> (response, "response is ComDayCqWcmCoreImplEventTemplatePostProcessorInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplLanguageManagerImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplLanguageManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string langmgrListPath = null;
            //List<string> langmgrCountryDefault = null;
            //var response = instance.ComDayCqWcmCoreImplLanguageManagerImpl(post, apply, delete, action, location, propertylist, langmgrListPath, langmgrCountryDefault);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplLanguageManagerImplInfo> (response, "response is ComDayCqWcmCoreImplLanguageManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string linkExpiredPrefix = null;
            //bool? linkExpiredRemove = null;
            //string linkExpiredSuffix = null;
            //string linkInvalidPrefix = null;
            //bool? linkInvalidRemove = null;
            //string linkInvalidSuffix = null;
            //string linkPredatedPrefix = null;
            //bool? linkPredatedRemove = null;
            //string linkPredatedSuffix = null;
            //List<string> linkWcmmodes = null;
            //var response = instance.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post, apply, delete, action, location, propertylist, linkExpiredPrefix, linkExpiredRemove, linkExpiredSuffix, linkInvalidPrefix, linkInvalidRemove, linkInvalidSuffix, linkPredatedPrefix, linkPredatedRemove, linkPredatedSuffix, linkWcmmodes);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo> (response, "response is ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplPagePageInfoAggregatorImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplPagePageInfoAggregatorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string pageInfoProviderPropertyRegexDefault = null;
            //string pageInfoProviderPropertyName = null;
            //var response = instance.ComDayCqWcmCoreImplPagePageInfoAggregatorImpl(post, apply, delete, action, location, propertylist, pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo> (response, "response is ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplPagePageManagerFactoryImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplPagePageManagerFactoryImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string illegalCharMapping = null;
            //bool? pageSubTreeActivationCheck = null;
            //var response = instance.ComDayCqWcmCoreImplPagePageManagerFactoryImpl(post, apply, delete, action, location, propertylist, illegalCharMapping, pageSubTreeActivationCheck);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo> (response, "response is ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplReferencesContentContentReferenceConfig
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplReferencesContentContentReferenceConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> contentReferenceConfigResourceTypes = null;
            //var response = instance.ComDayCqWcmCoreImplReferencesContentContentReferenceConfig(post, apply, delete, action, location, propertylist, contentReferenceConfigResourceTypes);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo> (response, "response is ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? damShowexpired = null;
            //bool? damShowhidden = null;
            //bool? tagTitleSearch = null;
            //string guessTotal = null;
            //string damExpiryProperty = null;
            //var response = instance.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post, apply, delete, action, location, propertylist, damShowexpired, damShowhidden, tagTitleSearch, guessTotal, damExpiryProperty);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo> (response, "response is ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> itemResourceTypes = null;
            //var response = instance.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post, apply, delete, action, location, propertylist, itemResourceTypes);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo> (response, "response is ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplServletsContentfinderPageViewHandler
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string guessTotal = null;
            //bool? tagTitleSearch = null;
            //var response = instance.ComDayCqWcmCoreImplServletsContentfinderPageViewHandler(post, apply, delete, action, location, propertylist, guessTotal, tagTitleSearch);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo> (response, "response is ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplServletsFindReplaceServlet
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplServletsFindReplaceServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> scope = null;
            //var response = instance.ComDayCqWcmCoreImplServletsFindReplaceServlet(post, apply, delete, action, location, propertylist, scope);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplServletsFindReplaceServletInfo> (response, "response is ComDayCqWcmCoreImplServletsFindReplaceServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplServletsReferenceSearchServlet
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplServletsReferenceSearchServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? referencesearchservletMaxReferencesPerPage = null;
            //int? referencesearchservletMaxPages = null;
            //var response = instance.ComDayCqWcmCoreImplServletsReferenceSearchServlet(post, apply, delete, action, location, propertylist, referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo> (response, "response is ComDayCqWcmCoreImplServletsReferenceSearchServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplServletsThumbnailServlet
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplServletsThumbnailServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string workspace = null;
            //List<string> dimensions = null;
            //var response = instance.ComDayCqWcmCoreImplServletsThumbnailServlet(post, apply, delete, action, location, propertylist, workspace, dimensions);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplServletsThumbnailServletInfo> (response, "response is ComDayCqWcmCoreImplServletsThumbnailServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplUtilsDefaultPageNameValidator
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string nonValidChars = null;
            //var response = instance.ComDayCqWcmCoreImplUtilsDefaultPageNameValidator(post, apply, delete, action, location, propertylist, nonValidChars);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo> (response, "response is ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplVariantsPageVariantsProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string defaultExternalizerDomain = null;
            //var response = instance.ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post, apply, delete, action, location, propertylist, defaultExternalizerDomain);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo> (response, "response is ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplVersionManagerImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplVersionManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? versionmanagerCreateVersionOnActivation = null;
            //bool? versionmanagerPurgingEnabled = null;
            //List<string> versionmanagerPurgePaths = null;
            //List<string> versionmanagerIvPaths = null;
            //int? versionmanagerMaxAgeDays = null;
            //int? versionmanagerMaxNumberVersions = null;
            //int? versionmanagerMinNumberVersions = null;
            //var response = instance.ComDayCqWcmCoreImplVersionManagerImpl(post, apply, delete, action, location, propertylist, versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled, versionmanagerPurgePaths, versionmanagerIvPaths, versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplVersionManagerImplInfo> (response, "response is ComDayCqWcmCoreImplVersionManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplVersionPurgeTask
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplVersionPurgeTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> versionpurgePaths = null;
            //bool? versionpurgeRecursive = null;
            //int? versionpurgeMaxVersions = null;
            //int? versionpurgeMinVersions = null;
            //int? versionpurgeMaxAgeDays = null;
            //var response = instance.ComDayCqWcmCoreImplVersionPurgeTask(post, apply, delete, action, location, propertylist, versionpurgePaths, versionpurgeRecursive, versionpurgeMaxVersions, versionpurgeMinVersions, versionpurgeMaxAgeDays);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplVersionPurgeTaskInfo> (response, "response is ComDayCqWcmCoreImplVersionPurgeTaskInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplWCMDebugFilter
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplWCMDebugFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? wcmdbgfilterEnabled = null;
            //bool? wcmdbgfilterJspDebug = null;
            //var response = instance.ComDayCqWcmCoreImplWCMDebugFilter(post, apply, delete, action, location, propertylist, wcmdbgfilterEnabled, wcmdbgfilterJspDebug);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplWCMDebugFilterInfo> (response, "response is ComDayCqWcmCoreImplWCMDebugFilterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplWCMDeveloperModeFilter
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplWCMDeveloperModeFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? wcmdevmodefilterEnabled = null;
            //var response = instance.ComDayCqWcmCoreImplWCMDeveloperModeFilter(post, apply, delete, action, location, propertylist, wcmdevmodefilterEnabled);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo> (response, "response is ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreImplWarpTimeWarpFilter
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreImplWarpTimeWarpFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string filterOrder = null;
            //string filterScope = null;
            //var response = instance.ComDayCqWcmCoreImplWarpTimeWarpFilter(post, apply, delete, action, location, propertylist, filterOrder, filterScope);
            //Assert.IsInstanceOf<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo> (response, "response is ComDayCqWcmCoreImplWarpTimeWarpFilterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreMvtMVTStatisticsImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreMvtMVTStatisticsImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string mvtstatisticsTrackingurl = null;
            //var response = instance.ComDayCqWcmCoreMvtMVTStatisticsImpl(post, apply, delete, action, location, propertylist, mvtstatisticsTrackingurl);
            //Assert.IsInstanceOf<ComDayCqWcmCoreMvtMVTStatisticsImplInfo> (response, "response is ComDayCqWcmCoreMvtMVTStatisticsImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreStatsPageViewStatisticsImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreStatsPageViewStatisticsImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string pageviewstatisticsTrackingurl = null;
            //string pageviewstatisticsTrackingscriptEnabled = null;
            //var response = instance.ComDayCqWcmCoreStatsPageViewStatisticsImpl(post, apply, delete, action, location, propertylist, pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled);
            //Assert.IsInstanceOf<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo> (response, "response is ComDayCqWcmCoreStatsPageViewStatisticsImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmCoreWCMRequestFilter
        /// </summary>
        [Test]
        public void ComDayCqWcmCoreWCMRequestFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string wcmfilterMode = null;
            //var response = instance.ComDayCqWcmCoreWCMRequestFilter(post, apply, delete, action, location, propertylist, wcmfilterMode);
            //Assert.IsInstanceOf<ComDayCqWcmCoreWCMRequestFilterInfo> (response, "response is ComDayCqWcmCoreWCMRequestFilterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterDesignPackageImporter
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterDesignPackageImporterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> extractFilter = null;
            //var response = instance.ComDayCqWcmDesignimporterDesignPackageImporter(post, apply, delete, action, location, propertylist, extractFilter);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterDesignPackageImporterInfo> (response, "response is ComDayCqWcmDesignimporterDesignPackageImporterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterImplCanvasBuilderImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterImplCanvasBuilderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string filepattern = null;
            //bool? buildPageNodes = null;
            //bool? buildClientLibs = null;
            //bool? buildCanvasComponent = null;
            //var response = instance.ComDayCqWcmDesignimporterImplCanvasBuilderImpl(post, apply, delete, action, location, propertylist, filepattern, buildPageNodes, buildClientLibs, buildCanvasComponent);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo> (response, "response is ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? minThreadPoolSize = null;
            //int? maxThreadPoolSize = null;
            //var response = instance.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post, apply, delete, action, location, propertylist, minThreadPoolSize, maxThreadPoolSize);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo> (response, "response is ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterImplEntryPreprocessorImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterImplEntryPreprocessorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string searchPattern = null;
            //string replacePattern = null;
            //var response = instance.ComDayCqWcmDesignimporterImplEntryPreprocessorImpl(post, apply, delete, action, location, propertylist, searchPattern, replacePattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo> (response, "response is ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string filepattern = null;
            //List<string> deviceGroups = null;
            //bool? buildPageNodes = null;
            //bool? buildClientLibs = null;
            //bool? buildCanvasComponent = null;
            //var response = instance.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post, apply, delete, action, location, propertylist, filepattern, deviceGroups, buildPageNodes, buildClientLibs, buildCanvasComponent);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo> (response, "response is ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //string componentResourceType = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //string componentResourceType = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //string componentResourceType = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //string componentResourceType = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl
        /// </summary>
        [Test]
        public void ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string tagpattern = null;
            //var response = instance.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            //Assert.IsInstanceOf<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo> (response, "response is ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmFoundationFormsImplFormChooserServlet
        /// </summary>
        [Test]
        public void ComDayCqWcmFoundationFormsImplFormChooserServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string serviceName = null;
            //string slingServletResourceTypes = null;
            //string slingServletSelectors = null;
            //List<string> slingServletMethods = null;
            //bool? formsFormchooserservletAdvansesearchRequire = null;
            //var response = instance.ComDayCqWcmFoundationFormsImplFormChooserServlet(post, apply, delete, action, location, propertylist, serviceName, slingServletResourceTypes, slingServletSelectors, slingServletMethods, formsFormchooserservletAdvansesearchRequire);
            //Assert.IsInstanceOf<ComDayCqWcmFoundationFormsImplFormChooserServletInfo> (response, "response is ComDayCqWcmFoundationFormsImplFormChooserServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor
        /// </summary>
        [Test]
        public void ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? formsFormparagraphpostprocessorEnabled = null;
            //List<string> formsFormparagraphpostprocessorFormresourcetypes = null;
            //var response = instance.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post, apply, delete, action, location, propertylist, formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes);
            //Assert.IsInstanceOf<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo> (response, "response is ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmFoundationFormsImplFormsHandlingServlet
        /// </summary>
        [Test]
        public void ComDayCqWcmFoundationFormsImplFormsHandlingServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string nameWhitelist = null;
            //bool? allowExpressions = null;
            //var response = instance.ComDayCqWcmFoundationFormsImplFormsHandlingServlet(post, apply, delete, action, location, propertylist, nameWhitelist, allowExpressions);
            //Assert.IsInstanceOf<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo> (response, "response is ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmFoundationFormsImplMailServlet
        /// </summary>
        [Test]
        public void ComDayCqWcmFoundationFormsImplMailServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingServletResourceTypes = null;
            //string slingServletSelectors = null;
            //List<string> resourceWhitelist = null;
            //string resourceBlacklist = null;
            //var response = instance.ComDayCqWcmFoundationFormsImplMailServlet(post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletSelectors, resourceWhitelist, resourceBlacklist);
            //Assert.IsInstanceOf<ComDayCqWcmFoundationFormsImplMailServletInfo> (response, "response is ComDayCqWcmFoundationFormsImplMailServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmFoundationImplAdaptiveImageComponentServlet
        /// </summary>
        [Test]
        public void ComDayCqWcmFoundationImplAdaptiveImageComponentServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> adaptSupportedWidths = null;
            //var response = instance.ComDayCqWcmFoundationImplAdaptiveImageComponentServlet(post, apply, delete, action, location, propertylist, adaptSupportedWidths);
            //Assert.IsInstanceOf<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo> (response, "response is ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmFoundationImplHTTPAuthHandler
        /// </summary>
        [Test]
        public void ComDayCqWcmFoundationImplHTTPAuthHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string path = null;
            //bool? authHttpNologin = null;
            //string authHttpRealm = null;
            //string authDefaultLoginpage = null;
            //List<string> authCredForm = null;
            //List<string> authCredUtf8 = null;
            //var response = instance.ComDayCqWcmFoundationImplHTTPAuthHandler(post, apply, delete, action, location, propertylist, path, authHttpNologin, authHttpRealm, authDefaultLoginpage, authCredForm, authCredUtf8);
            //Assert.IsInstanceOf<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo> (response, "response is ComDayCqWcmFoundationImplHTTPAuthHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmFoundationImplPageImpressionsTracker
        /// </summary>
        [Test]
        public void ComDayCqWcmFoundationImplPageImpressionsTrackerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingAuthRequirements = null;
            //var response = instance.ComDayCqWcmFoundationImplPageImpressionsTracker(post, apply, delete, action, location, propertylist, slingAuthRequirements);
            //Assert.IsInstanceOf<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo> (response, "response is ComDayCqWcmFoundationImplPageImpressionsTrackerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmFoundationImplPageRedirectServlet
        /// </summary>
        [Test]
        public void ComDayCqWcmFoundationImplPageRedirectServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> excludedResourceTypes = null;
            //var response = instance.ComDayCqWcmFoundationImplPageRedirectServlet(post, apply, delete, action, location, propertylist, excludedResourceTypes);
            //Assert.IsInstanceOf<ComDayCqWcmFoundationImplPageRedirectServletInfo> (response, "response is ComDayCqWcmFoundationImplPageRedirectServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist
        /// </summary>
        [Test]
        public void ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> defaultAttachmentTypeBlacklist = null;
            //List<string> baselineAttachmentTypeBlacklist = null;
            //var response = instance.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post, apply, delete, action, location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);
            //Assert.IsInstanceOf<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo> (response, "response is ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> parameterWhitelist = null;
            //List<string> parameterWhitelistPrefixes = null;
            //List<string> binaryParameterWhitelist = null;
            //List<string> modifierWhitelist = null;
            //List<string> operationWhitelist = null;
            //List<string> operationWhitelistPrefixes = null;
            //List<string> typehintWhitelist = null;
            //List<string> resourcetypeWhitelist = null;
            //var response = instance.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);
            //Assert.IsInstanceOf<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo> (response, "response is ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory
        /// </summary>
        [Test]
        public void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? deviceInfoTransformerEnabled = null;
            //string deviceInfoTransformerCssStyle = null;
            //var response = instance.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post, apply, delete, action, location, propertylist, deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle);
            //Assert.IsInstanceOf<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo> (response, "response is ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMobileCoreImplRedirectRedirectFilter
        /// </summary>
        [Test]
        public void ComDayCqWcmMobileCoreImplRedirectRedirectFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? redirectEnabled = null;
            //bool? redirectStatsEnabled = null;
            //List<string> redirectExtensions = null;
            //List<string> redirectPaths = null;
            //var response = instance.ComDayCqWcmMobileCoreImplRedirectRedirectFilter(post, apply, delete, action, location, propertylist, redirectEnabled, redirectStatsEnabled, redirectExtensions, redirectPaths);
            //Assert.IsInstanceOf<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo> (response, "response is ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMsmImplActionsContentCopyActionFactory
        /// </summary>
        [Test]
        public void ComDayCqWcmMsmImplActionsContentCopyActionFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqWcmMsmActionExcludednodetypes = null;
            //List<string> cqWcmMsmActionExcludedparagraphitems = null;
            //List<string> cqWcmMsmActionExcludedprops = null;
            //string contentcopyactionOrderStyle = null;
            //var response = instance.ComDayCqWcmMsmImplActionsContentCopyActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle);
            //Assert.IsInstanceOf<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo> (response, "response is ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMsmImplActionsContentDeleteActionFactory
        /// </summary>
        [Test]
        public void ComDayCqWcmMsmImplActionsContentDeleteActionFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqWcmMsmActionExcludednodetypes = null;
            //List<string> cqWcmMsmActionExcludedparagraphitems = null;
            //List<string> cqWcmMsmActionExcludedprops = null;
            //var response = instance.ComDayCqWcmMsmImplActionsContentDeleteActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
            //Assert.IsInstanceOf<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo> (response, "response is ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMsmImplActionsContentUpdateActionFactory
        /// </summary>
        [Test]
        public void ComDayCqWcmMsmImplActionsContentUpdateActionFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqWcmMsmActionExcludednodetypes = null;
            //List<string> cqWcmMsmActionExcludedparagraphitems = null;
            //List<string> cqWcmMsmActionExcludedprops = null;
            //List<string> cqWcmMsmActionIgnoredMixin = null;
            //var response = instance.ComDayCqWcmMsmImplActionsContentUpdateActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin);
            //Assert.IsInstanceOf<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo> (response, "response is ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMsmImplActionsOrderChildrenActionFactory
        /// </summary>
        [Test]
        public void ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqWcmMsmActionExcludednodetypes = null;
            //List<string> cqWcmMsmActionExcludedparagraphitems = null;
            //List<string> cqWcmMsmActionExcludedprops = null;
            //var response = instance.ComDayCqWcmMsmImplActionsOrderChildrenActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
            //Assert.IsInstanceOf<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo> (response, "response is ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMsmImplActionsPageMoveActionFactory
        /// </summary>
        [Test]
        public void ComDayCqWcmMsmImplActionsPageMoveActionFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqWcmMsmActionExcludednodetypes = null;
            //List<string> cqWcmMsmActionExcludedparagraphitems = null;
            //List<string> cqWcmMsmActionExcludedprops = null;
            //bool? cqWcmMsmImplActionsPagemovePropReferenceUpdate = null;
            //var response = instance.ComDayCqWcmMsmImplActionsPageMoveActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate);
            //Assert.IsInstanceOf<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo> (response, "response is ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory
        /// </summary>
        [Test]
        public void ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqWcmMsmActionExcludednodetypes = null;
            //List<string> cqWcmMsmActionExcludedparagraphitems = null;
            //List<string> cqWcmMsmActionExcludedprops = null;
            //bool? cqWcmMsmImplActionReferencesupdatePropUpdateNested = null;
            //var response = instance.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested);
            //Assert.IsInstanceOf<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo> (response, "response is ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMsmImplActionsVersionCopyActionFactory
        /// </summary>
        [Test]
        public void ComDayCqWcmMsmImplActionsVersionCopyActionFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cqWcmMsmActionExcludednodetypes = null;
            //List<string> cqWcmMsmActionExcludedparagraphitems = null;
            //List<string> cqWcmMsmActionExcludedprops = null;
            //var response = instance.ComDayCqWcmMsmImplActionsVersionCopyActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
            //Assert.IsInstanceOf<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo> (response, "response is ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMsmImplLiveRelationshipManagerImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmMsmImplLiveRelationshipManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string liverelationshipmgrRelationsconfigDefault = null;
            //var response = instance.ComDayCqWcmMsmImplLiveRelationshipManagerImpl(post, apply, delete, action, location, propertylist, liverelationshipmgrRelationsconfigDefault);
            //Assert.IsInstanceOf<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo> (response, "response is ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMsmImplRolloutManagerImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmMsmImplRolloutManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventFilter = null;
            //List<string> rolloutmgrExcludedpropsDefault = null;
            //List<string> rolloutmgrExcludedparagraphpropsDefault = null;
            //List<string> rolloutmgrExcludednodetypesDefault = null;
            //int? rolloutmgrThreadpoolMaxsize = null;
            //int? rolloutmgrThreadpoolMaxshutdowntime = null;
            //string rolloutmgrThreadpoolPriority = null;
            //int? rolloutmgrCommitSize = null;
            //bool? rolloutmgrConflicthandlingEnabled = null;
            //var response = instance.ComDayCqWcmMsmImplRolloutManagerImpl(post, apply, delete, action, location, propertylist, eventFilter, rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority, rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled);
            //Assert.IsInstanceOf<ComDayCqWcmMsmImplRolloutManagerImplInfo> (response, "response is ComDayCqWcmMsmImplRolloutManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmMsmImplServletsAuditLogServlet
        /// </summary>
        [Test]
        public void ComDayCqWcmMsmImplServletsAuditLogServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? auditlogservletDefaultEventsCount = null;
            //string auditlogservletDefaultPath = null;
            //var response = instance.ComDayCqWcmMsmImplServletsAuditLogServlet(post, apply, delete, action, location, propertylist, auditlogservletDefaultEventsCount, auditlogservletDefaultPath);
            //Assert.IsInstanceOf<ComDayCqWcmMsmImplServletsAuditLogServletInfo> (response, "response is ComDayCqWcmMsmImplServletsAuditLogServletInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmNotificationEmailImplEmailChannel
        /// </summary>
        [Test]
        public void ComDayCqWcmNotificationEmailImplEmailChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string emailFrom = null;
            //var response = instance.ComDayCqWcmNotificationEmailImplEmailChannel(post, apply, delete, action, location, propertylist, emailFrom);
            //Assert.IsInstanceOf<ComDayCqWcmNotificationEmailImplEmailChannelInfo> (response, "response is ComDayCqWcmNotificationEmailImplEmailChannelInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmNotificationImplNotificationManagerImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmNotificationImplNotificationManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> eventTopics = null;
            //var response = instance.ComDayCqWcmNotificationImplNotificationManagerImpl(post, apply, delete, action, location, propertylist, eventTopics);
            //Assert.IsInstanceOf<ComDayCqWcmNotificationImplNotificationManagerImplInfo> (response, "response is ComDayCqWcmNotificationImplNotificationManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmScriptingImplBVPManager
        /// </summary>
        [Test]
        public void ComDayCqWcmScriptingImplBVPManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> comDayCqWcmScriptingBvpScriptEngines = null;
            //var response = instance.ComDayCqWcmScriptingImplBVPManager(post, apply, delete, action, location, propertylist, comDayCqWcmScriptingBvpScriptEngines);
            //Assert.IsInstanceOf<ComDayCqWcmScriptingImplBVPManagerInfo> (response, "response is ComDayCqWcmScriptingImplBVPManagerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmUndoUndoConfig
        /// </summary>
        [Test]
        public void ComDayCqWcmUndoUndoConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? cqWcmUndoEnabled = null;
            //string cqWcmUndoPath = null;
            //int? cqWcmUndoValidity = null;
            //int? cqWcmUndoSteps = null;
            //string cqWcmUndoPersistence = null;
            //bool? cqWcmUndoPersistenceMode = null;
            //string cqWcmUndoMarkermode = null;
            //List<string> cqWcmUndoWhitelist = null;
            //List<string> cqWcmUndoBlacklist = null;
            //var response = instance.ComDayCqWcmUndoUndoConfig(post, apply, delete, action, location, propertylist, cqWcmUndoEnabled, cqWcmUndoPath, cqWcmUndoValidity, cqWcmUndoSteps, cqWcmUndoPersistence, cqWcmUndoPersistenceMode, cqWcmUndoMarkermode, cqWcmUndoWhitelist, cqWcmUndoBlacklist);
            //Assert.IsInstanceOf<ComDayCqWcmUndoUndoConfigInfo> (response, "response is ComDayCqWcmUndoUndoConfigInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmWebservicesupportImplReplicationEventListener
        /// </summary>
        [Test]
        public void ComDayCqWcmWebservicesupportImplReplicationEventListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> flushAgents = null;
            //var response = instance.ComDayCqWcmWebservicesupportImplReplicationEventListener(post, apply, delete, action, location, propertylist, flushAgents);
            //Assert.IsInstanceOf<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo> (response, "response is ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl
        /// </summary>
        [Test]
        public void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string eventFilter = null;
            //int? minThreadPoolSize = null;
            //int? maxThreadPoolSize = null;
            //bool? cqWcmWorkflowTerminateOnActivate = null;
            //List<string> cqWcmWorklfowTerminateExclusionList = null;
            //var response = instance.ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post, apply, delete, action, location, propertylist, eventFilter, minThreadPoolSize, maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList);
            //Assert.IsInstanceOf<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo> (response, "response is ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider
        /// </summary>
        [Test]
        public void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> workflowpackageinfoproviderFilter = null;
            //string workflowpackageinfoproviderFilterRootpath = null;
            //var response = instance.ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post, apply, delete, action, location, propertylist, workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath);
            //Assert.IsInstanceOf<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo> (response, "response is ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWidgetImplHtmlLibraryManagerImpl
        /// </summary>
        [Test]
        public void ComDayCqWidgetImplHtmlLibraryManagerImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string htmllibmanagerClientmanager = null;
            //bool? htmllibmanagerDebug = null;
            //bool? htmllibmanagerDebugConsole = null;
            //string htmllibmanagerDebugInitJs = null;
            //string htmllibmanagerDefaultthemename = null;
            //string htmllibmanagerDefaultuserthemename = null;
            //string htmllibmanagerFirebuglitePath = null;
            //bool? htmllibmanagerForceCQUrlInfo = null;
            //bool? htmllibmanagerGzip = null;
            //int? htmllibmanagerMaxage = null;
            //int? htmllibmanagerMaxDataUriSize = null;
            //bool? htmllibmanagerMinify = null;
            //List<string> htmllibmanagerPathList = null;
            //bool? htmllibmanagerTiming = null;
            //var response = instance.ComDayCqWidgetImplHtmlLibraryManagerImpl(post, apply, delete, action, location, propertylist, htmllibmanagerClientmanager, htmllibmanagerDebug, htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip, htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize, htmllibmanagerMinify, htmllibmanagerPathList, htmllibmanagerTiming);
            //Assert.IsInstanceOf<ComDayCqWidgetImplHtmlLibraryManagerImplInfo> (response, "response is ComDayCqWidgetImplHtmlLibraryManagerImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWidgetImplWidgetExtensionProviderImpl
        /// </summary>
        [Test]
        public void ComDayCqWidgetImplWidgetExtensionProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> extendableWidgets = null;
            //bool? widgetextensionproviderDebug = null;
            //var response = instance.ComDayCqWidgetImplWidgetExtensionProviderImpl(post, apply, delete, action, location, propertylist, extendableWidgets, widgetextensionproviderDebug);
            //Assert.IsInstanceOf<ComDayCqWidgetImplWidgetExtensionProviderImplInfo> (response, "response is ComDayCqWidgetImplWidgetExtensionProviderImplInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWorkflowImplEmailEMailNotificationService
        /// </summary>
        [Test]
        public void ComDayCqWorkflowImplEmailEMailNotificationServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string fromAddress = null;
            //string hostPrefix = null;
            //bool? notifyOnabort = null;
            //bool? notifyOncomplete = null;
            //bool? notifyOncontainercomplete = null;
            //bool? notifyUseronly = null;
            //var response = instance.ComDayCqWorkflowImplEmailEMailNotificationService(post, apply, delete, action, location, propertylist, fromAddress, hostPrefix, notifyOnabort, notifyOncomplete, notifyOncontainercomplete, notifyUseronly);
            //Assert.IsInstanceOf<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo> (response, "response is ComDayCqWorkflowImplEmailEMailNotificationServiceInfo");
        }
        
        /// <summary>
        /// Test ComDayCqWorkflowImplEmailTaskEMailNotificationService
        /// </summary>
        [Test]
        public void ComDayCqWorkflowImplEmailTaskEMailNotificationServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? notifyOnupdate = null;
            //bool? notifyOncomplete = null;
            //var response = instance.ComDayCqWorkflowImplEmailTaskEMailNotificationService(post, apply, delete, action, location, propertylist, notifyOnupdate, notifyOncomplete);
            //Assert.IsInstanceOf<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo> (response, "response is ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo");
        }
        
        /// <summary>
        /// Test ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler
        /// </summary>
        [Test]
        public void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string path = null;
            //string tokenRequiredAttr = null;
            //string tokenAlternateUrl = null;
            //bool? tokenEncapsulated = null;
            //List<string> skipTokenRefresh = null;
            //var response = instance.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post, apply, delete, action, location, propertylist, path, tokenRequiredAttr, tokenAlternateUrl, tokenEncapsulated, skipTokenRefresh);
            //Assert.IsInstanceOf<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo> (response, "response is ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo");
        }
        
        /// <summary>
        /// Test ComDayCrxSecurityTokenImplTokenCleanupTask
        /// </summary>
        [Test]
        public void ComDayCrxSecurityTokenImplTokenCleanupTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enableTokenCleanupTask = null;
            //string schedulerExpression = null;
            //int? batchSize = null;
            //var response = instance.ComDayCrxSecurityTokenImplTokenCleanupTask(post, apply, delete, action, location, propertylist, enableTokenCleanupTask, schedulerExpression, batchSize);
            //Assert.IsInstanceOf<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo> (response, "response is ComDayCrxSecurityTokenImplTokenCleanupTaskInfo");
        }
        
        /// <summary>
        /// Test GuideLocalizationService
        /// </summary>
        [Test]
        public void GuideLocalizationServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> supportedLocales = null;
            //List<string> localizableProperties = null;
            //var response = instance.GuideLocalizationService(post, apply, delete, action, location, propertylist, supportedLocales, localizableProperties);
            //Assert.IsInstanceOf<GuideLocalizationServiceInfo> (response, "response is GuideLocalizationServiceInfo");
        }
        
        /// <summary>
        /// Test MessagingUserComponentFactory
        /// </summary>
        [Test]
        public void MessagingUserComponentFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? priority = null;
            //var response = instance.MessagingUserComponentFactory(post, apply, delete, action, location, propertylist, priority);
            //Assert.IsInstanceOf<MessagingUserComponentFactoryInfo> (response, "response is MessagingUserComponentFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheAriesJmxFrameworkStateConfig
        /// </summary>
        [Test]
        public void OrgApacheAriesJmxFrameworkStateConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? attributeChangeNotificationEnabled = null;
            //var response = instance.OrgApacheAriesJmxFrameworkStateConfig(post, apply, delete, action, location, propertylist, attributeChangeNotificationEnabled);
            //Assert.IsInstanceOf<OrgApacheAriesJmxFrameworkStateConfigInfo> (response, "response is OrgApacheAriesJmxFrameworkStateConfigInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixEventadminImplEventAdmin
        /// </summary>
        [Test]
        public void OrgApacheFelixEventadminImplEventAdminTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? orgApacheFelixEventadminThreadPoolSize = null;
            //decimal? orgApacheFelixEventadminAsyncToSyncThreadRatio = null;
            //int? orgApacheFelixEventadminTimeout = null;
            //bool? orgApacheFelixEventadminRequireTopic = null;
            //List<string> orgApacheFelixEventadminIgnoreTimeout = null;
            //List<string> orgApacheFelixEventadminIgnoreTopic = null;
            //var response = instance.OrgApacheFelixEventadminImplEventAdmin(post, apply, delete, action, location, propertylist, orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic);
            //Assert.IsInstanceOf<OrgApacheFelixEventadminImplEventAdminInfo> (response, "response is OrgApacheFelixEventadminImplEventAdminInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixHttp
        /// </summary>
        [Test]
        public void OrgApacheFelixHttpTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string orgApacheFelixHttpHost = null;
            //bool? orgApacheFelixHttpEnable = null;
            //int? orgOsgiServiceHttpPort = null;
            //int? orgApacheFelixHttpTimeout = null;
            //bool? orgApacheFelixHttpsEnable = null;
            //int? orgOsgiServiceHttpPortSecure = null;
            //string orgApacheFelixHttpsKeystore = null;
            //string orgApacheFelixHttpsKeystorePassword = null;
            //string orgApacheFelixHttpsKeystoreKeyPassword = null;
            //string orgApacheFelixHttpsTruststore = null;
            //string orgApacheFelixHttpsTruststorePassword = null;
            //string orgApacheFelixHttpsClientcertificate = null;
            //string orgApacheFelixHttpContextPath = null;
            //bool? orgApacheFelixHttpMbeans = null;
            //int? orgApacheFelixHttpSessionTimeout = null;
            //int? orgApacheFelixHttpJettyThreadpoolMax = null;
            //int? orgApacheFelixHttpJettyAcceptors = null;
            //int? orgApacheFelixHttpJettySelectors = null;
            //int? orgApacheFelixHttpJettyHeaderBufferSize = null;
            //int? orgApacheFelixHttpJettyRequestBufferSize = null;
            //int? orgApacheFelixHttpJettyResponseBufferSize = null;
            //int? orgApacheFelixHttpJettyMaxFormSize = null;
            //List<string> orgApacheFelixHttpPathExclusions = null;
            //List<string> orgApacheFelixHttpsJettyCiphersuitesExcluded = null;
            //List<string> orgApacheFelixHttpsJettyCiphersuitesIncluded = null;
            //bool? orgApacheFelixHttpJettySendServerHeader = null;
            //List<string> orgApacheFelixHttpsJettyProtocolsIncluded = null;
            //List<string> orgApacheFelixHttpsJettyProtocolsExcluded = null;
            //bool? orgApacheFelixProxyLoadBalancerConnectionEnable = null;
            //bool? orgApacheFelixHttpsJettyRenegotiateAllowed = null;
            //bool? orgApacheFelixHttpsJettySessionCookieHttpOnly = null;
            //bool? orgApacheFelixHttpsJettySessionCookieSecure = null;
            //string orgEclipseJettyServletSessionIdPathParameterName = null;
            //bool? orgEclipseJettyServletCheckingRemoteSessionIdEncoding = null;
            //string orgEclipseJettyServletSessionCookie = null;
            //string orgEclipseJettyServletSessionDomain = null;
            //string orgEclipseJettyServletSessionPath = null;
            //int? orgEclipseJettyServletMaxAge = null;
            //string orgApacheFelixHttpName = null;
            //bool? orgApacheFelixJettyGziphandlerEnable = null;
            //int? orgApacheFelixJettyGzipMinGzipSize = null;
            //int? orgApacheFelixJettyGzipCompressionLevel = null;
            //int? orgApacheFelixJettyGzipInflateBufferSize = null;
            //bool? orgApacheFelixJettyGzipSyncFlush = null;
            //List<string> orgApacheFelixJettyGzipExcludedUserAgents = null;
            //List<string> orgApacheFelixJettyGzipIncludedMethods = null;
            //List<string> orgApacheFelixJettyGzipExcludedMethods = null;
            //List<string> orgApacheFelixJettyGzipIncludedPaths = null;
            //List<string> orgApacheFelixJettyGzipExcludedPaths = null;
            //List<string> orgApacheFelixJettyGzipIncludedMimeTypes = null;
            //List<string> orgApacheFelixJettyGzipExcludedMimeTypes = null;
            //bool? orgApacheFelixHttpSessionInvalidate = null;
            //bool? orgApacheFelixHttpSessionUniqueid = null;
            //var response = instance.OrgApacheFelixHttp(post, apply, delete, action, location, propertylist, orgApacheFelixHttpHost, orgApacheFelixHttpEnable, orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge, orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid);
            //Assert.IsInstanceOf<OrgApacheFelixHttpInfo> (response, "response is OrgApacheFelixHttpInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixHttpSslfilterSslFilter
        /// </summary>
        [Test]
        public void OrgApacheFelixHttpSslfilterSslFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string sslForwardHeader = null;
            //string sslForwardValue = null;
            //string sslForwardCertHeader = null;
            //bool? rewriteAbsoluteUrls = null;
            //var response = instance.OrgApacheFelixHttpSslfilterSslFilter(post, apply, delete, action, location, propertylist, sslForwardHeader, sslForwardValue, sslForwardCertHeader, rewriteAbsoluteUrls);
            //Assert.IsInstanceOf<OrgApacheFelixHttpSslfilterSslFilterInfo> (response, "response is OrgApacheFelixHttpSslfilterSslFilterInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixJaasConfigurationFactory
        /// </summary>
        [Test]
        public void OrgApacheFelixJaasConfigurationFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string jaasControlFlag = null;
            //int? jaasRanking = null;
            //string jaasRealmName = null;
            //string jaasClassname = null;
            //List<string> jaasOptions = null;
            //var response = instance.OrgApacheFelixJaasConfigurationFactory(post, apply, delete, action, location, propertylist, jaasControlFlag, jaasRanking, jaasRealmName, jaasClassname, jaasOptions);
            //Assert.IsInstanceOf<OrgApacheFelixJaasConfigurationFactoryInfo> (response, "response is OrgApacheFelixJaasConfigurationFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixJaasConfigurationSpi
        /// </summary>
        [Test]
        public void OrgApacheFelixJaasConfigurationSpiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string jaasDefaultRealmName = null;
            //string jaasConfigProviderName = null;
            //string jaasGlobalConfigPolicy = null;
            //var response = instance.OrgApacheFelixJaasConfigurationSpi(post, apply, delete, action, location, propertylist, jaasDefaultRealmName, jaasConfigProviderName, jaasGlobalConfigPolicy);
            //Assert.IsInstanceOf<OrgApacheFelixJaasConfigurationSpiInfo> (response, "response is OrgApacheFelixJaasConfigurationSpiInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixScrScrService
        /// </summary>
        [Test]
        public void OrgApacheFelixScrScrServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? dsLoglevel = null;
            //bool? dsFactoryEnabled = null;
            //bool? dsDelayedKeepInstances = null;
            //int? dsLockTimeoutMilliseconds = null;
            //int? dsStopTimeoutMilliseconds = null;
            //bool? dsGlobalExtender = null;
            //var response = instance.OrgApacheFelixScrScrService(post, apply, delete, action, location, propertylist, dsLoglevel, dsFactoryEnabled, dsDelayedKeepInstances, dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds, dsGlobalExtender);
            //Assert.IsInstanceOf<OrgApacheFelixScrScrServiceInfo> (response, "response is OrgApacheFelixScrScrServiceInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixSystemreadyImplComponentsCheck
        /// </summary>
        [Test]
        public void OrgApacheFelixSystemreadyImplComponentsCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> componentsList = null;
            //string type = null;
            //var response = instance.OrgApacheFelixSystemreadyImplComponentsCheck(post, apply, delete, action, location, propertylist, componentsList, type);
            //Assert.IsInstanceOf<OrgApacheFelixSystemreadyImplComponentsCheckInfo> (response, "response is OrgApacheFelixSystemreadyImplComponentsCheckInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixSystemreadyImplFrameworkStartCheck
        /// </summary>
        [Test]
        public void OrgApacheFelixSystemreadyImplFrameworkStartCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? timeout = null;
            //int? targetStartLevel = null;
            //string targetStartLevelPropName = null;
            //string type = null;
            //var response = instance.OrgApacheFelixSystemreadyImplFrameworkStartCheck(post, apply, delete, action, location, propertylist, timeout, targetStartLevel, targetStartLevelPropName, type);
            //Assert.IsInstanceOf<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo> (response, "response is OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixSystemreadyImplServicesCheck
        /// </summary>
        [Test]
        public void OrgApacheFelixSystemreadyImplServicesCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> servicesList = null;
            //string type = null;
            //var response = instance.OrgApacheFelixSystemreadyImplServicesCheck(post, apply, delete, action, location, propertylist, servicesList, type);
            //Assert.IsInstanceOf<OrgApacheFelixSystemreadyImplServicesCheckInfo> (response, "response is OrgApacheFelixSystemreadyImplServicesCheckInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixSystemreadyImplServletSystemAliveServlet
        /// </summary>
        [Test]
        public void OrgApacheFelixSystemreadyImplServletSystemAliveServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string osgiHttpWhiteboardServletPattern = null;
            //string osgiHttpWhiteboardContextSelect = null;
            //var response = instance.OrgApacheFelixSystemreadyImplServletSystemAliveServlet(post, apply, delete, action, location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
            //Assert.IsInstanceOf<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo> (response, "response is OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixSystemreadyImplServletSystemReadyServlet
        /// </summary>
        [Test]
        public void OrgApacheFelixSystemreadyImplServletSystemReadyServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string osgiHttpWhiteboardServletPattern = null;
            //string osgiHttpWhiteboardContextSelect = null;
            //var response = instance.OrgApacheFelixSystemreadyImplServletSystemReadyServlet(post, apply, delete, action, location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
            //Assert.IsInstanceOf<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo> (response, "response is OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixSystemreadySystemReadyMonitor
        /// </summary>
        [Test]
        public void OrgApacheFelixSystemreadySystemReadyMonitorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? pollInterval = null;
            //var response = instance.OrgApacheFelixSystemreadySystemReadyMonitor(post, apply, delete, action, location, propertylist, pollInterval);
            //Assert.IsInstanceOf<OrgApacheFelixSystemreadySystemReadyMonitorInfo> (response, "response is OrgApacheFelixSystemreadySystemReadyMonitorInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixWebconsoleInternalServletOsgiManager
        /// </summary>
        [Test]
        public void OrgApacheFelixWebconsoleInternalServletOsgiManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string managerRoot = null;
            //string httpServiceFilter = null;
            //string defaultRender = null;
            //string realm = null;
            //string username = null;
            //string password = null;
            //string category = null;
            //string locale = null;
            //int? loglevel = null;
            //string plugins = null;
            //var response = instance.OrgApacheFelixWebconsoleInternalServletOsgiManager(post, apply, delete, action, location, propertylist, managerRoot, httpServiceFilter, defaultRender, realm, username, password, category, locale, loglevel, plugins);
            //Assert.IsInstanceOf<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo> (response, "response is OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixWebconsolePluginsEventInternalPluginServlet
        /// </summary>
        [Test]
        public void OrgApacheFelixWebconsolePluginsEventInternalPluginServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxSize = null;
            //var response = instance.OrgApacheFelixWebconsolePluginsEventInternalPluginServlet(post, apply, delete, action, location, propertylist, maxSize);
            //Assert.IsInstanceOf<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo> (response, "response is OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo
        /// </summary>
        [Test]
        public void OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? felixMemoryusageDumpThreshold = null;
            //int? felixMemoryusageDumpInterval = null;
            //string felixMemoryusageDumpLocation = null;
            //var response = instance.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post, apply, delete, action, location, propertylist, felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval, felixMemoryusageDumpLocation);
            //Assert.IsInstanceOf<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo> (response, "response is OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo");
        }
        
        /// <summary>
        /// Test OrgApacheHttpProxyconfigurator
        /// </summary>
        [Test]
        public void OrgApacheHttpProxyconfiguratorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? proxyEnabled = null;
            //string proxyHost = null;
            //int? proxyPort = null;
            //string proxyUser = null;
            //string proxyPassword = null;
            //List<string> proxyExceptions = null;
            //var response = instance.OrgApacheHttpProxyconfigurator(post, apply, delete, action, location, propertylist, proxyEnabled, proxyHost, proxyPort, proxyUser, proxyPassword, proxyExceptions);
            //Assert.IsInstanceOf<OrgApacheHttpProxyconfiguratorInfo> (response, "response is OrgApacheHttpProxyconfiguratorInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string dir = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post, apply, delete, action, location, propertylist, dir);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo> (response, "response is OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string path = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post, apply, delete, action, location, propertylist, path);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo> (response, "response is OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string mongouri = null;
            //string db = null;
            //bool? socketKeepAlive = null;
            //int? cache = null;
            //int? nodeCachePercentage = null;
            //int? prevDocCachePercentage = null;
            //int? childrenCachePercentage = null;
            //int? diffCachePercentage = null;
            //int? cacheSegmentCount = null;
            //int? cacheStackMoveDistance = null;
            //int? blobCacheSize = null;
            //string persistentCache = null;
            //string journalCache = null;
            //bool? customBlobStore = null;
            //int? journalGCInterval = null;
            //int? journalGCMaxAge = null;
            //bool? prefetchExternalChanges = null;
            //string role = null;
            //int? versionGcMaxAgeInSecs = null;
            //string versionGCExpression = null;
            //int? versionGCTimeLimitInSecs = null;
            //int? blobGcMaxAgeInSecs = null;
            //int? blobTrackSnapshotIntervalInSecs = null;
            //string repositoryHome = null;
            //int? maxReplicationLagInSecs = null;
            //string documentStoreType = null;
            //bool? bundlingDisabled = null;
            //int? updateLimit = null;
            //List<string> persistentCacheIncludes = null;
            //string leaseCheckMode = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post, apply, delete, action, location, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryHome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo> (response, "response is OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> persistentCacheIncludes = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post, apply, delete, action, location, propertylist, persistentCacheIncludes);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo> (response, "response is OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> includedPaths = null;
            //bool? enableAsyncObserver = null;
            //int? observerQueueSize = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post, apply, delete, action, location, propertylist, includedPaths, enableAsyncObserver, observerQueueSize);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo> (response, "response is OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> asyncConfigs = null;
            //int? leaseTimeOutMinutes = null;
            //int? failingIndexTimeoutSeconds = null;
            //int? errorWarnIntervalSeconds = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post, apply, delete, action, location, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo> (response, "response is OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? disabled = null;
            //bool? debug = null;
            //string localIndexDir = null;
            //bool? enableOpenIndexAsync = null;
            //int? threadPoolSize = null;
            //bool? prefetchIndexFiles = null;
            //int? extractedTextCacheSizeInMB = null;
            //int? extractedTextCacheExpiryInSecs = null;
            //bool? alwaysUsePreExtractedCache = null;
            //int? booleanClauseLimit = null;
            //bool? enableHybridIndexing = null;
            //int? hybridQueueSize = null;
            //bool? disableStoredIndexDefinition = null;
            //bool? deletedBlobsCollectionEnabled = null;
            //int? propIndexCleanerIntervalInSecs = null;
            //bool? enableSingleBlobIndexFiles = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post, apply, delete, action, location, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo> (response, "response is OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string solrHomePath = null;
            //string solrCoreName = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post, apply, delete, action, location, propertylist, solrHomePath, solrCoreName);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo> (response, "response is OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post, apply, delete, action, location, propertylist, enabled);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo> (response, "response is OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string pathDescField = null;
            //string pathChildField = null;
            //string pathParentField = null;
            //string pathExactField = null;
            //string catchAllField = null;
            //string collapsedPathField = null;
            //string pathDepthField = null;
            //string commitPolicy = null;
            //int? rows = null;
            //bool? pathRestrictions = null;
            //bool? propertyRestrictions = null;
            //bool? primarytypesRestrictions = null;
            //List<string> ignoredProperties = null;
            //List<string> usedProperties = null;
            //List<string> typeMappings = null;
            //List<string> propertyMappings = null;
            //bool? collapseJcrcontentNodes = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post, apply, delete, action, location, propertylist, pathDescField, pathChildField, pathParentField, pathExactField, catchAllField, collapsedPathField, pathDepthField, commitPolicy, rows, pathRestrictions, propertyRestrictions, primarytypesRestrictions, ignoredProperties, usedProperties, typeMappings, propertyMappings, collapseJcrcontentNodes);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo> (response, "response is OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string solrHttpUrl = null;
            //string solrZkHost = null;
            //string solrCollection = null;
            //int? solrSocketTimeout = null;
            //int? solrConnectionTimeout = null;
            //int? solrShardsNo = null;
            //int? solrReplicationFactor = null;
            //string solrConfDir = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post, apply, delete, action, location, propertylist, solrHttpUrl, solrZkHost, solrCollection, solrSocketTimeout, solrConnectionTimeout, solrShardsNo, solrReplicationFactor, solrConfDir);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo> (response, "response is OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? queryAggregation = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post, apply, delete, action, location, propertylist, queryAggregation);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo> (response, "response is OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string serverType = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post, apply, delete, action, location, propertylist, serverType);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo> (response, "response is OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string providerType = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post, apply, delete, action, location, propertylist, providerType);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo> (response, "response is OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxItems = null;
            //int? maxPathDepth = null;
            //bool? enabled = null;
            //var response = instance.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post, apply, delete, action, location, propertylist, maxItems, maxPathDepth, enabled);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo> (response, "response is OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakQueryQueryEngineSettingsService
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? queryLimitInMemory = null;
            //int? queryLimitReads = null;
            //bool? queryFailTraversal = null;
            //bool? fastQuerySize = null;
            //var response = instance.OrgApacheJackrabbitOakQueryQueryEngineSettingsService(post, apply, delete, action, location, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo> (response, "response is OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string orgApacheJackrabbitOakAuthenticationAppName = null;
            //string orgApacheJackrabbitOakAuthenticationConfigSpiName = null;
            //var response = instance.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post, apply, delete, action, location, propertylist, orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo> (response, "response is OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string providerName = null;
            //string hostName = null;
            //int? hostPort = null;
            //bool? hostSsl = null;
            //bool? hostTls = null;
            //bool? hostNoCertCheck = null;
            //string bindDn = null;
            //string bindPassword = null;
            //string searchTimeout = null;
            //int? adminPoolMaxActive = null;
            //bool? adminPoolLookupOnValidate = null;
            //int? userPoolMaxActive = null;
            //bool? userPoolLookupOnValidate = null;
            //string userBaseDN = null;
            //List<string> userObjectclass = null;
            //string userIdAttribute = null;
            //string userExtraFilter = null;
            //bool? userMakeDnPath = null;
            //string groupBaseDN = null;
            //List<string> groupObjectclass = null;
            //string groupNameAttribute = null;
            //string groupExtraFilter = null;
            //bool? groupMakeDnPath = null;
            //string groupMemberAttribute = null;
            //bool? useUidForExtId = null;
            //List<string> customattributes = null;
            //var response = instance.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post, apply, delete, action, location, propertylist, providerName, hostName, hostPort, hostSsl, hostTls, hostNoCertCheck, bindDn, bindPassword, searchTimeout, adminPoolMaxActive, adminPoolLookupOnValidate, userPoolMaxActive, userPoolLookupOnValidate, userBaseDN, userObjectclass, userIdAttribute, userExtraFilter, userMakeDnPath, groupBaseDN, groupObjectclass, groupNameAttribute, groupExtraFilter, groupMakeDnPath, groupMemberAttribute, useUidForExtId, customattributes);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo> (response, "response is OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string tokenExpiration = null;
            //string tokenLength = null;
            //bool? tokenRefresh = null;
            //int? tokenCleanupThreshold = null;
            //string passwordHashAlgorithm = null;
            //int? passwordHashIterations = null;
            //int? passwordSaltSize = null;
            //var response = instance.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post, apply, delete, action, location, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo> (response, "response is OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string permissionsJr2 = null;
            //string importBehavior = null;
            //List<string> readPaths = null;
            //List<string> administrativePrincipals = null;
            //int? configurationRanking = null;
            //var response = instance.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post, apply, delete, action, location, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo> (response, "response is OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> requiredServicePids = null;
            //string authorizationCompositionType = null;
            //var response = instance.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post, apply, delete, action, location, propertylist, requiredServicePids, authorizationCompositionType);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo> (response, "response is OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? length = null;
            //var response = instance.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post, apply, delete, action, location, propertylist, length);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo> (response, "response is OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string usersPath = null;
            //string groupsPath = null;
            //string systemRelativePath = null;
            //int? defaultDepth = null;
            //string importBehavior = null;
            //string passwordHashAlgorithm = null;
            //int? passwordHashIterations = null;
            //int? passwordSaltSize = null;
            //bool? omitAdminPw = null;
            //bool? supportAutoSave = null;
            //int? passwordMaxAge = null;
            //bool? initialPasswordChange = null;
            //int? passwordHistorySize = null;
            //bool? passwordExpiryForAdmin = null;
            //int? cacheExpiration = null;
            //bool? enableRFC7613UsercaseMappedProfile = null;
            //var response = instance.OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post, apply, delete, action, location, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo> (response, "response is OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string accountName = null;
            //string containerName = null;
            //string accessKey = null;
            //string rootPath = null;
            //string connectionURL = null;
            //var response = instance.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post, apply, delete, action, location, propertylist, accountName, containerName, accessKey, rootPath, connectionURL);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo> (response, "response is OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string repositoryHome = null;
            //string tarmkMode = null;
            //int? tarmkSize = null;
            //int? segmentCacheSize = null;
            //int? stringCacheSize = null;
            //int? templateCacheSize = null;
            //int? stringDeduplicationCacheSize = null;
            //int? templateDeduplicationCacheSize = null;
            //int? nodeDeduplicationCacheSize = null;
            //bool? pauseCompaction = null;
            //int? compactionRetryCount = null;
            //int? compactionForceTimeout = null;
            //int? compactionSizeDeltaEstimation = null;
            //bool? compactionDisableEstimation = null;
            //int? compactionRetainedGenerations = null;
            //int? compactionMemoryThreshold = null;
            //int? compactionProgressLog = null;
            //bool? standby = null;
            //bool? customBlobStore = null;
            //bool? customSegmentStore = null;
            //bool? splitPersistence = null;
            //string repositoryBackupDir = null;
            //int? blobGcMaxAgeInSecs = null;
            //int? blobTrackSnapshotIntervalInSecs = null;
            //string role = null;
            //bool? registerDescriptors = null;
            //bool? dispatchChanges = null;
            //var response = instance.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post, apply, delete, action, location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo> (response, "response is OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> commitsTrackerWriterGroups = null;
            //var response = instance.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post, apply, delete, action, location, propertylist, commitsTrackerWriterGroups);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo> (response, "response is OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSegmentSegmentNodeStoreService
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string repositoryHome = null;
            //string tarmkMode = null;
            //int? tarmkSize = null;
            //int? segmentCacheSize = null;
            //int? stringCacheSize = null;
            //int? templateCacheSize = null;
            //int? stringDeduplicationCacheSize = null;
            //int? templateDeduplicationCacheSize = null;
            //int? nodeDeduplicationCacheSize = null;
            //bool? pauseCompaction = null;
            //int? compactionRetryCount = null;
            //int? compactionForceTimeout = null;
            //int? compactionSizeDeltaEstimation = null;
            //bool? compactionDisableEstimation = null;
            //int? compactionRetainedGenerations = null;
            //int? compactionMemoryThreshold = null;
            //int? compactionProgressLog = null;
            //bool? standby = null;
            //bool? customBlobStore = null;
            //bool? customSegmentStore = null;
            //bool? splitPersistence = null;
            //string repositoryBackupDir = null;
            //int? blobGcMaxAgeInSecs = null;
            //int? blobTrackSnapshotIntervalInSecs = null;
            //var response = instance.OrgApacheJackrabbitOakSegmentSegmentNodeStoreService(post, apply, delete, action, location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo> (response, "response is OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? orgApacheSlingInstallerConfigurationPersist = null;
            //string mode = null;
            //int? port = null;
            //string primaryHost = null;
            //int? interval = null;
            //List<string> primaryAllowedClientIpRanges = null;
            //bool? secure = null;
            //int? standbyReadtimeout = null;
            //bool? standbyAutoclean = null;
            //var response = instance.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post, apply, delete, action, location, propertylist, orgApacheSlingInstallerConfigurationPersist, mode, port, primaryHost, interval, primaryAllowedClientIpRanges, secure, standbyReadtimeout, standbyAutoclean);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo> (response, "response is OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string handlerName = null;
            //string userExpirationTime = null;
            //List<string> userAutoMembership = null;
            //List<string> userPropertyMapping = null;
            //string userPathPrefix = null;
            //string userMembershipExpTime = null;
            //int? userMembershipNestingDepth = null;
            //bool? userDynamicMembership = null;
            //bool? userDisableMissing = null;
            //string groupExpirationTime = null;
            //List<string> groupAutoMembership = null;
            //List<string> groupPropertyMapping = null;
            //string groupPathPrefix = null;
            //bool? enableRFC7613UsercaseMappedProfile = null;
            //var response = instance.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post, apply, delete, action, location, propertylist, handlerName, userExpirationTime, userAutoMembership, userPropertyMapping, userPathPrefix, userMembershipExpTime, userMembershipNestingDepth, userDynamicMembership, userDisableMissing, groupExpirationTime, groupAutoMembership, groupPropertyMapping, groupPathPrefix, enableRFC7613UsercaseMappedProfile);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo> (response, "response is OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? jaasRanking = null;
            //string jaasControlFlag = null;
            //string jaasRealmName = null;
            //string idpName = null;
            //string syncHandlerName = null;
            //var response = instance.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post, apply, delete, action, location, propertylist, jaasRanking, jaasControlFlag, jaasRealmName, idpName, syncHandlerName);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo> (response, "response is OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? protectExternalId = null;
            //var response = instance.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post, apply, delete, action, location, propertylist, protectExternalId);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo> (response, "response is OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> cugSupportedPaths = null;
            //bool? cugEnabled = null;
            //int? configurationRanking = null;
            //var response = instance.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post, apply, delete, action, location, propertylist, cugSupportedPaths, cugEnabled, configurationRanking);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo> (response, "response is OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> principalNames = null;
            //var response = instance.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post, apply, delete, action, location, propertylist, principalNames);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo> (response, "response is OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string enabledActions = null;
            //List<string> userPrivilegeNames = null;
            //List<string> groupPrivilegeNames = null;
            //string constraint = null;
            //var response = instance.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post, apply, delete, action, location, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint);
            //Assert.IsInstanceOf<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo> (response, "response is OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitVaultPackagingImplPackagingImpl
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitVaultPackagingImplPackagingImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> packageRoots = null;
            //var response = instance.OrgApacheJackrabbitVaultPackagingImplPackagingImpl(post, apply, delete, action, location, propertylist, packageRoots);
            //Assert.IsInstanceOf<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo> (response, "response is OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry
        /// </summary>
        [Test]
        public void OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string homePath = null;
            //var response = instance.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post, apply, delete, action, location, propertylist, homePath);
            //Assert.IsInstanceOf<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo> (response, "response is OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingAuthCoreImplLogoutServlet
        /// </summary>
        [Test]
        public void OrgApacheSlingAuthCoreImplLogoutServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> slingServletMethods = null;
            //string slingServletPaths = null;
            //var response = instance.OrgApacheSlingAuthCoreImplLogoutServlet(post, apply, delete, action, location, propertylist, slingServletMethods, slingServletPaths);
            //Assert.IsInstanceOf<OrgApacheSlingAuthCoreImplLogoutServletInfo> (response, "response is OrgApacheSlingAuthCoreImplLogoutServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider
        /// </summary>
        [Test]
        public void OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //var response = instance.OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post, apply, delete, action, location, propertylist, enabled);
            //Assert.IsInstanceOf<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo> (response, "response is OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCaconfigImplConfigurationResolverImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingCaconfigImplConfigurationResolverImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> configBucketNames = null;
            //var response = instance.OrgApacheSlingCaconfigImplConfigurationResolverImpl(post, apply, delete, action, location, propertylist, configBucketNames);
            //Assert.IsInstanceOf<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo> (response, "response is OrgApacheSlingCaconfigImplConfigurationResolverImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra
        /// </summary>
        [Test]
        public void OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //List<string> configPropertyInheritancePropertyNames = null;
            //var response = instance.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post, apply, delete, action, location, propertylist, enabled, configPropertyInheritancePropertyNames);
            //Assert.IsInstanceOf<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo> (response, "response is OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra
        /// </summary>
        [Test]
        public void OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //var response = instance.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post, apply, delete, action, location, propertylist, enabled);
            //Assert.IsInstanceOf<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo> (response, "response is OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi
        /// </summary>
        [Test]
        public void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string description = null;
            //List<string> overrides = null;
            //bool? enabled = null;
            //int? serviceRanking = null;
            //var response = instance.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post, apply, delete, action, location, propertylist, description, overrides, enabled, serviceRanking);
            //Assert.IsInstanceOf<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo> (response, "response is OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve
        /// </summary>
        [Test]
        public void OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //int? serviceRanking = null;
            //var response = instance.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post, apply, delete, action, location, propertylist, enabled, serviceRanking);
            //Assert.IsInstanceOf<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo> (response, "response is OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti
        /// </summary>
        [Test]
        public void OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> ignorePropertyNameRegex = null;
            //List<string> configCollectionPropertiesResourceNames = null;
            //var response = instance.OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post, apply, delete, action, location, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames);
            //Assert.IsInstanceOf<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo> (response, "response is OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour
        /// </summary>
        [Test]
        public void OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //string configPath = null;
            //List<string> fallbackPaths = null;
            //List<string> configCollectionInheritancePropertyNames = null;
            //var response = instance.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post, apply, delete, action, location, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames);
            //Assert.IsInstanceOf<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo> (response, "response is OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy
        /// </summary>
        [Test]
        public void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? enabled = null;
            //List<string> configRefResourceNames = null;
            //List<string> configRefPropertyNames = null;
            //int? serviceRanking = null;
            //var response = instance.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post, apply, delete, action, location, propertylist, enabled, configRefResourceNames, configRefPropertyNames, serviceRanking);
            //Assert.IsInstanceOf<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo> (response, "response is OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser
        /// </summary>
        [Test]
        public void OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> parserFeatures = null;
            //var response = instance.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post, apply, delete, action, location, propertylist, parserFeatures);
            //Assert.IsInstanceOf<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo> (response, "response is OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCommonsLogLogManager
        /// </summary>
        [Test]
        public void OrgApacheSlingCommonsLogLogManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string orgApacheSlingCommonsLogLevel = null;
            //string orgApacheSlingCommonsLogFile = null;
            //int? orgApacheSlingCommonsLogFileNumber = null;
            //string orgApacheSlingCommonsLogFileSize = null;
            //string orgApacheSlingCommonsLogPattern = null;
            //string orgApacheSlingCommonsLogConfigurationFile = null;
            //bool? orgApacheSlingCommonsLogPackagingDataEnabled = null;
            //int? orgApacheSlingCommonsLogMaxCallerDataDepth = null;
            //int? orgApacheSlingCommonsLogMaxOldFileCountInDump = null;
            //int? orgApacheSlingCommonsLogNumOfLines = null;
            //var response = instance.OrgApacheSlingCommonsLogLogManager(post, apply, delete, action, location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines);
            //Assert.IsInstanceOf<OrgApacheSlingCommonsLogLogManagerInfo> (response, "response is OrgApacheSlingCommonsLogLogManagerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCommonsLogLogManagerFactoryConfig
        /// </summary>
        [Test]
        public void OrgApacheSlingCommonsLogLogManagerFactoryConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string orgApacheSlingCommonsLogLevel = null;
            //string orgApacheSlingCommonsLogFile = null;
            //string orgApacheSlingCommonsLogPattern = null;
            //List<string> orgApacheSlingCommonsLogNames = null;
            //bool? orgApacheSlingCommonsLogAdditiv = null;
            //var response = instance.OrgApacheSlingCommonsLogLogManagerFactoryConfig(post, apply, delete, action, location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv);
            //Assert.IsInstanceOf<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo> (response, "response is OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCommonsLogLogManagerFactoryWriter
        /// </summary>
        [Test]
        public void OrgApacheSlingCommonsLogLogManagerFactoryWriterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string orgApacheSlingCommonsLogFile = null;
            //int? orgApacheSlingCommonsLogFileNumber = null;
            //string orgApacheSlingCommonsLogFileSize = null;
            //bool? orgApacheSlingCommonsLogFileBuffered = null;
            //var response = instance.OrgApacheSlingCommonsLogLogManagerFactoryWriter(post, apply, delete, action, location, propertylist, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered);
            //Assert.IsInstanceOf<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo> (response, "response is OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCommonsMetricsInternalLogReporter
        /// </summary>
        [Test]
        public void OrgApacheSlingCommonsMetricsInternalLogReporterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? period = null;
            //string timeUnit = null;
            //string level = null;
            //string loggerName = null;
            //string prefix = null;
            //string pattern = null;
            //string registryName = null;
            //var response = instance.OrgApacheSlingCommonsMetricsInternalLogReporter(post, apply, delete, action, location, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName);
            //Assert.IsInstanceOf<OrgApacheSlingCommonsMetricsInternalLogReporterInfo> (response, "response is OrgApacheSlingCommonsMetricsInternalLogReporterInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter
        /// </summary>
        [Test]
        public void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> datasources = null;
            //int? step = null;
            //List<string> archives = null;
            //string path = null;
            //var response = instance.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post, apply, delete, action, location, propertylist, datasources, step, archives, path);
            //Assert.IsInstanceOf<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo> (response, "response is OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> mimeTypes = null;
            //var response = instance.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post, apply, delete, action, location, propertylist, mimeTypes);
            //Assert.IsInstanceOf<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo> (response, "response is OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCommonsSchedulerImplQuartzScheduler
        /// </summary>
        [Test]
        public void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string poolName = null;
            //List<string> allowedPoolNames = null;
            //bool? schedulerUseleaderforsingle = null;
            //List<string> metricsFilters = null;
            //int? slowThresholdMillis = null;
            //var response = instance.OrgApacheSlingCommonsSchedulerImplQuartzScheduler(post, apply, delete, action, location, propertylist, poolName, allowedPoolNames, schedulerUseleaderforsingle, metricsFilters, slowThresholdMillis);
            //Assert.IsInstanceOf<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo> (response, "response is OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck
        /// </summary>
        [Test]
        public void OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxQuartzJobDurationAcceptable = null;
            //var response = instance.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post, apply, delete, action, location, propertylist, maxQuartzJobDurationAcceptable);
            //Assert.IsInstanceOf<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo> (response, "response is OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory
        /// </summary>
        [Test]
        public void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //int? minPoolSize = null;
            //int? maxPoolSize = null;
            //int? queueSize = null;
            //int? maxThreadAge = null;
            //int? keepAliveTime = null;
            //string blockPolicy = null;
            //bool? shutdownGraceful = null;
            //bool? daemon = null;
            //int? shutdownWaitTime = null;
            //string priority = null;
            //var response = instance.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post, apply, delete, action, location, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority);
            //Assert.IsInstanceOf<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo> (response, "response is OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDatasourceDataSourceFactory
        /// </summary>
        [Test]
        public void OrgApacheSlingDatasourceDataSourceFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string datasourceName = null;
            //string datasourceSvcPropName = null;
            //string driverClassName = null;
            //string url = null;
            //string username = null;
            //string password = null;
            //string defaultAutoCommit = null;
            //string defaultReadOnly = null;
            //string defaultTransactionIsolation = null;
            //string defaultCatalog = null;
            //int? maxActive = null;
            //int? maxIdle = null;
            //int? minIdle = null;
            //int? initialSize = null;
            //int? maxWait = null;
            //int? maxAge = null;
            //bool? testOnBorrow = null;
            //bool? testOnReturn = null;
            //bool? testWhileIdle = null;
            //string validationQuery = null;
            //int? validationQueryTimeout = null;
            //int? timeBetweenEvictionRunsMillis = null;
            //int? minEvictableIdleTimeMillis = null;
            //string connectionProperties = null;
            //string initSQL = null;
            //string jdbcInterceptors = null;
            //int? validationInterval = null;
            //bool? logValidationErrors = null;
            //List<string> datasourceSvcProperties = null;
            //var response = instance.OrgApacheSlingDatasourceDataSourceFactory(post, apply, delete, action, location, propertylist, datasourceName, datasourceSvcPropName, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourceSvcProperties);
            //Assert.IsInstanceOf<OrgApacheSlingDatasourceDataSourceFactoryInfo> (response, "response is OrgApacheSlingDatasourceDataSourceFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDatasourceJNDIDataSourceFactory
        /// </summary>
        [Test]
        public void OrgApacheSlingDatasourceJNDIDataSourceFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string datasourceName = null;
            //string datasourceSvcPropName = null;
            //string datasourceJndiName = null;
            //List<string> jndiProperties = null;
            //var response = instance.OrgApacheSlingDatasourceJNDIDataSourceFactory(post, apply, delete, action, location, propertylist, datasourceName, datasourceSvcPropName, datasourceJndiName, jndiProperties);
            //Assert.IsInstanceOf<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo> (response, "response is OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDiscoveryOakConfig
        /// </summary>
        [Test]
        public void OrgApacheSlingDiscoveryOakConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? connectorPingTimeout = null;
            //int? connectorPingInterval = null;
            //int? discoveryLiteCheckInterval = null;
            //int? clusterSyncServiceTimeout = null;
            //int? clusterSyncServiceInterval = null;
            //bool? enableSyncToken = null;
            //int? minEventDelay = null;
            //int? socketConnectTimeout = null;
            //int? soTimeout = null;
            //List<string> topologyConnectorUrls = null;
            //List<string> topologyConnectorWhitelist = null;
            //bool? autoStopLocalLoopEnabled = null;
            //bool? gzipConnectorRequestsEnabled = null;
            //bool? hmacEnabled = null;
            //bool? enableEncryption = null;
            //string sharedKey = null;
            //int? hmacSharedKeyTTL = null;
            //string backoffStandbyFactor = null;
            //string backoffStableFactor = null;
            //var response = instance.OrgApacheSlingDiscoveryOakConfig(post, apply, delete, action, location, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor);
            //Assert.IsInstanceOf<OrgApacheSlingDiscoveryOakConfigInfo> (response, "response is OrgApacheSlingDiscoveryOakConfigInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck
        /// </summary>
        [Test]
        public void OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string hcName = null;
            //List<string> hcTags = null;
            //string hcMbeanName = null;
            //var response = instance.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName);
            //Assert.IsInstanceOf<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo> (response, "response is OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string title = null;
            //string details = null;
            //bool? enabled = null;
            //string serviceName = null;
            //string logLevel = null;
            //List<string> allowedRoots = null;
            //bool? queueProcessingEnabled = null;
            //List<string> packageImporterEndpoints = null;
            //List<string> passiveQueues = null;
            //List<string> priorityQueues = null;
            //string retryStrategy = null;
            //int? retryAttempts = null;
            //string requestAuthorizationStrategyTarget = null;
            //string transportSecretProviderTarget = null;
            //string packageBuilderTarget = null;
            //string triggersTarget = null;
            //string queueProvider = null;
            //bool? asyncDelivery = null;
            //int? httpConnTimeout = null;
            //var response = instance.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, queueProcessingEnabled, packageImporterEndpoints, passiveQueues, priorityQueues, retryStrategy, retryAttempts, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, queueProvider, asyncDelivery, httpConnTimeout);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo> (response, "response is OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestATest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string jcrPrivilege = null;
            //var response = instance.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post, apply, delete, action, location, propertylist, name, jcrPrivilege);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo> (response, "response is OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string title = null;
            //string details = null;
            //bool? enabled = null;
            //string serviceName = null;
            //string logLevel = null;
            //List<string> allowedRoots = null;
            //string requestAuthorizationStrategyTarget = null;
            //string queueProviderFactoryTarget = null;
            //string packageBuilderTarget = null;
            //string triggersTarget = null;
            //List<string> priorityQueues = null;
            //var response = instance.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, requestAuthorizationStrategyTarget, queueProviderFactoryTarget, packageBuilderTarget, triggersTarget, priorityQueues);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo> (response, "response is OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string title = null;
            //string details = null;
            //bool? enabled = null;
            //string serviceName = null;
            //string logLevel = null;
            //bool? queueProcessingEnabled = null;
            //List<string> packageExporterEndpoints = null;
            //int? pullItems = null;
            //int? httpConnTimeout = null;
            //string requestAuthorizationStrategyTarget = null;
            //string transportSecretProviderTarget = null;
            //string packageBuilderTarget = null;
            //string triggersTarget = null;
            //var response = instance.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterEndpoints, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo> (response, "response is OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string title = null;
            //string details = null;
            //bool? enabled = null;
            //string serviceName = null;
            //string logLevel = null;
            //bool? queueProcessingEnabled = null;
            //string packageExporterTarget = null;
            //string packageImporterTarget = null;
            //string requestAuthorizationStrategyTarget = null;
            //string triggersTarget = null;
            //var response = instance.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterTarget, packageImporterTarget, requestAuthorizationStrategyTarget, triggersTarget);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo> (response, "response is OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string title = null;
            //string details = null;
            //bool? enabled = null;
            //string serviceName = null;
            //string logLevel = null;
            //bool? queueProcessingEnabled = null;
            //List<string> passiveQueues = null;
            //List<string> packageExporterEndpoints = null;
            //List<string> packageImporterEndpoints = null;
            //string retryStrategy = null;
            //int? retryAttempts = null;
            //int? pullItems = null;
            //int? httpConnTimeout = null;
            //string requestAuthorizationStrategyTarget = null;
            //string transportSecretProviderTarget = null;
            //string packageBuilderTarget = null;
            //string triggersTarget = null;
            //var response = instance.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, passiveQueues, packageExporterEndpoints, packageImporterEndpoints, retryStrategy, retryAttempts, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo> (response, "response is OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string hcName = null;
            //List<string> hcTags = null;
            //string hcMbeanName = null;
            //int? numberOfRetriesAllowed = null;
            //var response = instance.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, numberOfRetriesAllowed);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo> (response, "response is OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionPackagingImplExporterAgentDistributio
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string queue = null;
            //bool? dropInvalidItems = null;
            //string agentTarget = null;
            //var response = instance.OrgApacheSlingDistributionPackagingImplExporterAgentDistributio(post, apply, delete, action, location, propertylist, name, queue, dropInvalidItems, agentTarget);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo> (response, "response is OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionPackagingImplExporterLocalDistributio
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionPackagingImplExporterLocalDistributioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string packageBuilderTarget = null;
            //var response = instance.OrgApacheSlingDistributionPackagingImplExporterLocalDistributio(post, apply, delete, action, location, propertylist, name, packageBuilderTarget);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo> (response, "response is OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //List<string> endpoints = null;
            //int? pullItems = null;
            //string packageBuilderTarget = null;
            //string transportSecretProviderTarget = null;
            //var response = instance.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post, apply, delete, action, location, propertylist, name, endpoints, pullItems, packageBuilderTarget, transportSecretProviderTarget);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo> (response, "response is OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionPackagingImplImporterLocalDistributio
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionPackagingImplImporterLocalDistributioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string packageBuilderTarget = null;
            //var response = instance.OrgApacheSlingDistributionPackagingImplImporterLocalDistributio(post, apply, delete, action, location, propertylist, name, packageBuilderTarget);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo> (response, "response is OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //List<string> endpoints = null;
            //string transportSecretProviderTarget = null;
            //var response = instance.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post, apply, delete, action, location, propertylist, name, endpoints, transportSecretProviderTarget);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo> (response, "response is OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string serviceName = null;
            //string path = null;
            //string privilegeName = null;
            //var response = instance.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post, apply, delete, action, location, propertylist, name, serviceName, path, privilegeName);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo> (response, "response is OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionResourcesImplDistributionConfiguration
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionResourcesImplDistributionConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string providerRoots = null;
            //string kind = null;
            //var response = instance.OrgApacheSlingDistributionResourcesImplDistributionConfiguration(post, apply, delete, action, location, propertylist, providerRoots, kind);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo> (response, "response is OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionResourcesImplDistributionServiceResour
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionResourcesImplDistributionServiceResourTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string providerRoots = null;
            //string kind = null;
            //var response = instance.OrgApacheSlingDistributionResourcesImplDistributionServiceResour(post, apply, delete, action, location, propertylist, providerRoots, kind);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo> (response, "response is OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionSerializationImplDistributionPackageBu
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionSerializationImplDistributionPackageBuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string type = null;
            //string formatTarget = null;
            //string tempFsFolder = null;
            //int? fileThreshold = null;
            //string memoryUnit = null;
            //bool? useOffHeapMemory = null;
            //string digestAlgorithm = null;
            //int? monitoringQueueSize = null;
            //int? cleanupDelay = null;
            //List<string> packageFilters = null;
            //List<string> propertyFilters = null;
            //var response = instance.OrgApacheSlingDistributionSerializationImplDistributionPackageBu(post, apply, delete, action, location, propertylist, name, type, formatTarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packageFilters, propertyFilters);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo> (response, "response is OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionSerializationImplVltVaultDistribution
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionSerializationImplVltVaultDistributionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string type = null;
            //string importMode = null;
            //string aclHandling = null;
            //string packageRoots = null;
            //List<string> packageFilters = null;
            //List<string> propertyFilters = null;
            //string tempFsFolder = null;
            //bool? useBinaryReferences = null;
            //int? autoSaveThreshold = null;
            //int? cleanupDelay = null;
            //int? fileThreshold = null;
            //string MEGA_BYTES = null;
            //bool? useOffHeapMemory = null;
            //string digestAlgorithm = null;
            //int? monitoringQueueSize = null;
            //List<string> pathsMapping = null;
            //bool? strictImport = null;
            //var response = instance.OrgApacheSlingDistributionSerializationImplVltVaultDistribution(post, apply, delete, action, location, propertylist, name, type, importMode, aclHandling, packageRoots, packageFilters, propertyFilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, MEGA_BYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo> (response, "response is OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionTransportImplUserCredentialsDistributi
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionTransportImplUserCredentialsDistributiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string username = null;
            //string password = null;
            //var response = instance.OrgApacheSlingDistributionTransportImplUserCredentialsDistributi(post, apply, delete, action, location, propertylist, name, username, password);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo> (response, "response is OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionTriggerImplDistributionEventDistribute
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionTriggerImplDistributionEventDistributeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string path = null;
            //var response = instance.OrgApacheSlingDistributionTriggerImplDistributionEventDistribute(post, apply, delete, action, location, propertylist, name, path);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo> (response, "response is OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string path = null;
            //List<string> ignoredPathsPatterns = null;
            //string serviceName = null;
            //bool? deep = null;
            //var response = instance.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post, apply, delete, action, location, propertylist, name, path, ignoredPathsPatterns, serviceName, deep);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo> (response, "response is OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string path = null;
            //string serviceName = null;
            //string nuggetsPath = null;
            //var response = instance.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post, apply, delete, action, location, propertylist, name, path, serviceName, nuggetsPath);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo> (response, "response is OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string endpoint = null;
            //string transportSecretProviderTarget = null;
            //var response = instance.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post, apply, delete, action, location, propertylist, name, endpoint, transportSecretProviderTarget);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo> (response, "response is OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string path = null;
            //var response = instance.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post, apply, delete, action, location, propertylist, name, path);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo> (response, "response is OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge
        /// </summary>
        [Test]
        public void OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string path = null;
            //string seconds = null;
            //string serviceName = null;
            //var response = instance.OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post, apply, delete, action, location, propertylist, name, path, seconds, serviceName);
            //Assert.IsInstanceOf<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo> (response, "response is OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEngineImplAuthSlingAuthenticator
        /// </summary>
        [Test]
        public void OrgApacheSlingEngineImplAuthSlingAuthenticatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string osgiHttpWhiteboardContextSelect = null;
            //string osgiHttpWhiteboardListener = null;
            //string authSudoCookie = null;
            //string authSudoParameter = null;
            //bool? authAnnonymous = null;
            //List<string> slingAuthRequirements = null;
            //string slingAuthAnonymousUser = null;
            //string slingAuthAnonymousPassword = null;
            //string authHttp = null;
            //string authHttpRealm = null;
            //List<string> authUriSuffix = null;
            //var response = instance.OrgApacheSlingEngineImplAuthSlingAuthenticator(post, apply, delete, action, location, propertylist, osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener, authSudoCookie, authSudoParameter, authAnnonymous, slingAuthRequirements, slingAuthAnonymousUser, slingAuthAnonymousPassword, authHttp, authHttpRealm, authUriSuffix);
            //Assert.IsInstanceOf<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo> (response, "response is OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter
        /// </summary>
        [Test]
        public void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> extensions = null;
            //int? minDurationMs = null;
            //int? maxDurationMs = null;
            //bool? compactLogFormat = null;
            //var response = instance.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post, apply, delete, action, location, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat);
            //Assert.IsInstanceOf<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo> (response, "response is OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEngineImplLogRequestLogger
        /// </summary>
        [Test]
        public void OrgApacheSlingEngineImplLogRequestLoggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string requestLogOutput = null;
            //int? requestLogOutputtype = null;
            //bool? requestLogEnabled = null;
            //string accessLogOutput = null;
            //int? accessLogOutputtype = null;
            //bool? accessLogEnabled = null;
            //var response = instance.OrgApacheSlingEngineImplLogRequestLogger(post, apply, delete, action, location, propertylist, requestLogOutput, requestLogOutputtype, requestLogEnabled, accessLogOutput, accessLogOutputtype, accessLogEnabled);
            //Assert.IsInstanceOf<OrgApacheSlingEngineImplLogRequestLoggerInfo> (response, "response is OrgApacheSlingEngineImplLogRequestLoggerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEngineImplLogRequestLoggerService
        /// </summary>
        [Test]
        public void OrgApacheSlingEngineImplLogRequestLoggerServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string requestLogServiceFormat = null;
            //string requestLogServiceOutput = null;
            //int? requestLogServiceOutputtype = null;
            //bool? requestLogServiceOnentry = null;
            //var response = instance.OrgApacheSlingEngineImplLogRequestLoggerService(post, apply, delete, action, location, propertylist, requestLogServiceFormat, requestLogServiceOutput, requestLogServiceOutputtype, requestLogServiceOnentry);
            //Assert.IsInstanceOf<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo> (response, "response is OrgApacheSlingEngineImplLogRequestLoggerServiceInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEngineImplSlingMainServlet
        /// </summary>
        [Test]
        public void OrgApacheSlingEngineImplSlingMainServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? slingMaxCalls = null;
            //int? slingMaxInclusions = null;
            //bool? slingTraceAllow = null;
            //int? slingMaxRecordRequests = null;
            //List<string> slingStorePatternRequests = null;
            //string slingServerinfo = null;
            //List<string> slingAdditionalResponseHeaders = null;
            //var response = instance.OrgApacheSlingEngineImplSlingMainServlet(post, apply, delete, action, location, propertylist, slingMaxCalls, slingMaxInclusions, slingTraceAllow, slingMaxRecordRequests, slingStorePatternRequests, slingServerinfo, slingAdditionalResponseHeaders);
            //Assert.IsInstanceOf<OrgApacheSlingEngineImplSlingMainServletInfo> (response, "response is OrgApacheSlingEngineImplSlingMainServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEngineParameters
        /// </summary>
        [Test]
        public void OrgApacheSlingEngineParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingDefaultParameterEncoding = null;
            //int? slingDefaultMaxParameters = null;
            //string fileLocation = null;
            //int? fileThreshold = null;
            //int? fileMax = null;
            //int? requestMax = null;
            //bool? slingDefaultParameterCheckForAdditionalContainerParameters = null;
            //var response = instance.OrgApacheSlingEngineParameters(post, apply, delete, action, location, propertylist, slingDefaultParameterEncoding, slingDefaultMaxParameters, fileLocation, fileThreshold, fileMax, requestMax, slingDefaultParameterCheckForAdditionalContainerParameters);
            //Assert.IsInstanceOf<OrgApacheSlingEngineParametersInfo> (response, "response is OrgApacheSlingEngineParametersInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEventImplEventingThreadPool
        /// </summary>
        [Test]
        public void OrgApacheSlingEventImplEventingThreadPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? minPoolSize = null;
            //var response = instance.OrgApacheSlingEventImplEventingThreadPool(post, apply, delete, action, location, propertylist, minPoolSize);
            //Assert.IsInstanceOf<OrgApacheSlingEventImplEventingThreadPoolInfo> (response, "response is OrgApacheSlingEventImplEventingThreadPoolInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEventImplJobsDefaultJobManager
        /// </summary>
        [Test]
        public void OrgApacheSlingEventImplJobsDefaultJobManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string queuePriority = null;
            //int? queueRetries = null;
            //int? queueRetrydelay = null;
            //int? queueMaxparallel = null;
            //var response = instance.OrgApacheSlingEventImplJobsDefaultJobManager(post, apply, delete, action, location, propertylist, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel);
            //Assert.IsInstanceOf<OrgApacheSlingEventImplJobsDefaultJobManagerInfo> (response, "response is OrgApacheSlingEventImplJobsDefaultJobManagerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEventImplJobsJcrPersistenceHandler
        /// </summary>
        [Test]
        public void OrgApacheSlingEventImplJobsJcrPersistenceHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? jobConsumermanagerDisableDistribution = null;
            //int? startupDelay = null;
            //int? cleanupPeriod = null;
            //var response = instance.OrgApacheSlingEventImplJobsJcrPersistenceHandler(post, apply, delete, action, location, propertylist, jobConsumermanagerDisableDistribution, startupDelay, cleanupPeriod);
            //Assert.IsInstanceOf<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo> (response, "response is OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEventImplJobsJobConsumerManager
        /// </summary>
        [Test]
        public void OrgApacheSlingEventImplJobsJobConsumerManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? orgApacheSlingInstallerConfigurationPersist = null;
            //List<string> jobConsumermanagerWhitelist = null;
            //List<string> jobConsumermanagerBlacklist = null;
            //var response = instance.OrgApacheSlingEventImplJobsJobConsumerManager(post, apply, delete, action, location, propertylist, orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist, jobConsumermanagerBlacklist);
            //Assert.IsInstanceOf<OrgApacheSlingEventImplJobsJobConsumerManagerInfo> (response, "response is OrgApacheSlingEventImplJobsJobConsumerManagerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingEventJobsQueueConfiguration
        /// </summary>
        [Test]
        public void OrgApacheSlingEventJobsQueueConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string queueName = null;
            //List<string> queueTopics = null;
            //string queueType = null;
            //string queuePriority = null;
            //int? queueRetries = null;
            //int? queueRetrydelay = null;
            //decimal? queueMaxparallel = null;
            //bool? queueKeepJobs = null;
            //bool? queuePreferRunOnCreationInstance = null;
            //int? queueThreadPoolSize = null;
            //int? serviceRanking = null;
            //var response = instance.OrgApacheSlingEventJobsQueueConfiguration(post, apply, delete, action, location, propertylist, queueName, queueTopics, queueType, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, queueKeepJobs, queuePreferRunOnCreationInstance, queueThreadPoolSize, serviceRanking);
            //Assert.IsInstanceOf<OrgApacheSlingEventJobsQueueConfigurationInfo> (response, "response is OrgApacheSlingEventJobsQueueConfigurationInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW
        /// </summary>
        [Test]
        public void OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> users = null;
            //List<string> groups = null;
            //var response = instance.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post, apply, delete, action, location, propertylist, users, groups);
            //Assert.IsInstanceOf<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo> (response, "response is OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingFeatureflagsFeature
        /// </summary>
        [Test]
        public void OrgApacheSlingFeatureflagsFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string description = null;
            //bool? enabled = null;
            //var response = instance.OrgApacheSlingFeatureflagsFeature(post, apply, delete, action, location, propertylist, name, description, enabled);
            //Assert.IsInstanceOf<OrgApacheSlingFeatureflagsFeatureInfo> (response, "response is OrgApacheSlingFeatureflagsFeatureInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingFeatureflagsImplConfiguredFeature
        /// </summary>
        [Test]
        public void OrgApacheSlingFeatureflagsImplConfiguredFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string name = null;
            //string description = null;
            //bool? enabled = null;
            //var response = instance.OrgApacheSlingFeatureflagsImplConfiguredFeature(post, apply, delete, action, location, propertylist, name, description, enabled);
            //Assert.IsInstanceOf<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo> (response, "response is OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingHapiImplHApiUtilImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingHapiImplHApiUtilImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string orgApacheSlingHapiToolsResourcetype = null;
            //string orgApacheSlingHapiToolsCollectionresourcetype = null;
            //List<string> orgApacheSlingHapiToolsSearchpaths = null;
            //string orgApacheSlingHapiToolsExternalurl = null;
            //bool? orgApacheSlingHapiToolsEnabled = null;
            //var response = instance.OrgApacheSlingHapiImplHApiUtilImpl(post, apply, delete, action, location, propertylist, orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled);
            //Assert.IsInstanceOf<OrgApacheSlingHapiImplHApiUtilImplInfo> (response, "response is OrgApacheSlingHapiImplHApiUtilImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingHcCoreImplCompositeHealthCheck
        /// </summary>
        [Test]
        public void OrgApacheSlingHcCoreImplCompositeHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string hcName = null;
            //List<string> hcTags = null;
            //string hcMbeanName = null;
            //List<string> filterTags = null;
            //bool? filterCombineTagsWithOr = null;
            //var response = instance.OrgApacheSlingHcCoreImplCompositeHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, filterTags, filterCombineTagsWithOr);
            //Assert.IsInstanceOf<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo> (response, "response is OrgApacheSlingHcCoreImplCompositeHealthCheckInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? timeoutInMs = null;
            //int? longRunningFutureThresholdForCriticalMs = null;
            //int? resultCacheTtlInMs = null;
            //var response = instance.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post, apply, delete, action, location, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs);
            //Assert.IsInstanceOf<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo> (response, "response is OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingHcCoreImplJmxAttributeHealthCheck
        /// </summary>
        [Test]
        public void OrgApacheSlingHcCoreImplJmxAttributeHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string hcName = null;
            //List<string> hcTags = null;
            //string hcMbeanName = null;
            //string mbeanName = null;
            //string attributeName = null;
            //string attributeValueConstraint = null;
            //var response = instance.OrgApacheSlingHcCoreImplJmxAttributeHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, mbeanName, attributeName, attributeValueConstraint);
            //Assert.IsInstanceOf<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo> (response, "response is OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingHcCoreImplScriptableHealthCheck
        /// </summary>
        [Test]
        public void OrgApacheSlingHcCoreImplScriptableHealthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string hcName = null;
            //List<string> hcTags = null;
            //string hcMbeanName = null;
            //string expression = null;
            //string languageExtension = null;
            //var response = instance.OrgApacheSlingHcCoreImplScriptableHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, expression, languageExtension);
            //Assert.IsInstanceOf<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo> (response, "response is OrgApacheSlingHcCoreImplScriptableHealthCheckInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet
        /// </summary>
        [Test]
        public void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string servletPath = null;
            //bool? disabled = null;
            //string corsAccessControlAllowOrigin = null;
            //var response = instance.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post, apply, delete, action, location, propertylist, servletPath, disabled, corsAccessControlAllowOrigin);
            //Assert.IsInstanceOf<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo> (response, "response is OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer
        /// </summary>
        [Test]
        public void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? totalWidth = null;
            //int? colWidthName = null;
            //int? colWidthResult = null;
            //int? colWidthTiming = null;
            //var response = instance.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post, apply, delete, action, location, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming);
            //Assert.IsInstanceOf<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo> (response, "response is OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingI18nImplI18NFilter
        /// </summary>
        [Test]
        public void OrgApacheSlingI18nImplI18NFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //List<string> slingFilterScope = null;
            //var response = instance.OrgApacheSlingI18nImplI18NFilter(post, apply, delete, action, location, propertylist, serviceRanking, slingFilterScope);
            //Assert.IsInstanceOf<OrgApacheSlingI18nImplI18NFilterInfo> (response, "response is OrgApacheSlingI18nImplI18NFilterInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingI18nImplJcrResourceBundleProvider
        /// </summary>
        [Test]
        public void OrgApacheSlingI18nImplJcrResourceBundleProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string localeDefault = null;
            //bool? preloadBundles = null;
            //int? invalidationDelay = null;
            //var response = instance.OrgApacheSlingI18nImplJcrResourceBundleProvider(post, apply, delete, action, location, propertylist, localeDefault, preloadBundles, invalidationDelay);
            //Assert.IsInstanceOf<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo> (response, "response is OrgApacheSlingI18nImplJcrResourceBundleProviderInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingInstallerProviderJcrImplJcrInstaller
        /// </summary>
        [Test]
        public void OrgApacheSlingInstallerProviderJcrImplJcrInstallerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> handlerSchemes = null;
            //string slingJcrinstallFolderNameRegexp = null;
            //int? slingJcrinstallFolderMaxDepth = null;
            //List<string> slingJcrinstallSearchPath = null;
            //string slingJcrinstallNewConfigPath = null;
            //string slingJcrinstallSignalPath = null;
            //bool? slingJcrinstallEnableWriteback = null;
            //var response = instance.OrgApacheSlingInstallerProviderJcrImplJcrInstaller(post, apply, delete, action, location, propertylist, handlerSchemes, slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath, slingJcrinstallNewConfigPath, slingJcrinstallSignalPath, slingJcrinstallEnableWriteback);
            //Assert.IsInstanceOf<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo> (response, "response is OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrBaseInternalLoginAdminWhitelist
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? whitelistBypass = null;
            //string whitelistBundlesRegexp = null;
            //var response = instance.OrgApacheSlingJcrBaseInternalLoginAdminWhitelist(post, apply, delete, action, location, propertylist, whitelistBypass, whitelistBundlesRegexp);
            //Assert.IsInstanceOf<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo> (response, "response is OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string whitelistName = null;
            //List<string> whitelistBundles = null;
            //var response = instance.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post, apply, delete, action, location, propertylist, whitelistName, whitelistBundles);
            //Assert.IsInstanceOf<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo> (response, "response is OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrDavexImplServletsSlingDavExServlet
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrDavexImplServletsSlingDavExServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string alias = null;
            //bool? davCreateAbsoluteUri = null;
            //string davProtectedhandlers = null;
            //var response = instance.OrgApacheSlingJcrDavexImplServletsSlingDavExServlet(post, apply, delete, action, location, propertylist, alias, davCreateAbsoluteUri, davProtectedhandlers);
            //Assert.IsInstanceOf<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo> (response, "response is OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string javaNamingFactoryInitial = null;
            //string javaNamingProviderUrl = null;
            //var response = instance.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post, apply, delete, action, location, propertylist, javaNamingFactoryInitial, javaNamingProviderUrl);
            //Assert.IsInstanceOf<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo> (response, "response is OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? port = null;
            //var response = instance.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post, apply, delete, action, location, propertylist, port);
            //Assert.IsInstanceOf<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo> (response, "response is OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrRepoinitImplRepositoryInitializer
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrRepoinitImplRepositoryInitializerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> references = null;
            //var response = instance.OrgApacheSlingJcrRepoinitImplRepositoryInitializer(post, apply, delete, action, location, propertylist, references);
            //Assert.IsInstanceOf<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo> (response, "response is OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrRepoinitRepositoryInitializer
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrRepoinitRepositoryInitializerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> references = null;
            //List<string> scripts = null;
            //var response = instance.OrgApacheSlingJcrRepoinitRepositoryInitializer(post, apply, delete, action, location, propertylist, references, scripts);
            //Assert.IsInstanceOf<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo> (response, "response is OrgApacheSlingJcrRepoinitRepositoryInitializerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> resourceResolverSearchpath = null;
            //bool? resourceResolverManglenamespaces = null;
            //bool? resourceResolverAllowDirect = null;
            //List<string> resourceResolverRequiredProviders = null;
            //List<string> resourceResolverRequiredProvidernames = null;
            //List<string> resourceResolverVirtual = null;
            //List<string> resourceResolverMapping = null;
            //string resourceResolverMapLocation = null;
            //List<string> resourceResolverMapObservation = null;
            //int? resourceResolverDefaultVanityRedirectStatus = null;
            //bool? resourceResolverEnableVanitypath = null;
            //int? resourceResolverVanitypathMaxEntries = null;
            //bool? resourceResolverVanitypathMaxEntriesStartup = null;
            //int? resourceResolverVanitypathBloomfilterMaxBytes = null;
            //bool? resourceResolverOptimizeAliasResolution = null;
            //List<string> resourceResolverVanitypathWhitelist = null;
            //List<string> resourceResolverVanitypathBlacklist = null;
            //bool? resourceResolverVanityPrecedence = null;
            //bool? resourceResolverProviderhandlingParanoid = null;
            //bool? resourceResolverLogClosing = null;
            //bool? resourceResolverLogUnclosed = null;
            //var response = instance.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post, apply, delete, action, location, propertylist, resourceResolverSearchpath, resourceResolverManglenamespaces, resourceResolverAllowDirect, resourceResolverRequiredProviders, resourceResolverRequiredProvidernames, resourceResolverVirtual, resourceResolverMapping, resourceResolverMapLocation, resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid, resourceResolverLogClosing, resourceResolverLogUnclosed);
            //Assert.IsInstanceOf<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo> (response, "response is OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrResourceInternalJcrSystemUserValidator
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? allowOnlySystemUser = null;
            //var response = instance.OrgApacheSlingJcrResourceInternalJcrSystemUserValidator(post, apply, delete, action, location, propertylist, allowOnlySystemUser);
            //Assert.IsInstanceOf<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo> (response, "response is OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string path = null;
            //string checkpathPrefix = null;
            //string jcrPath = null;
            //var response = instance.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post, apply, delete, action, location, propertylist, path, checkpathPrefix, jcrPath);
            //Assert.IsInstanceOf<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo> (response, "response is OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //string typeCollections = null;
            //string typeNoncollections = null;
            //string typeContent = null;
            //var response = instance.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post, apply, delete, action, location, propertylist, serviceRanking, typeCollections, typeNoncollections, typeContent);
            //Assert.IsInstanceOf<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo> (response, "response is OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //var response = instance.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post, apply, delete, action, location, propertylist, serviceRanking);
            //Assert.IsInstanceOf<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo> (response, "response is OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet
        /// </summary>
        [Test]
        public void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string davRoot = null;
            //bool? davCreateAbsoluteUri = null;
            //string davRealm = null;
            //List<string> collectionTypes = null;
            //List<string> filterPrefixes = null;
            //string filterTypes = null;
            //string filterUris = null;
            //string typeCollections = null;
            //string typeNoncollections = null;
            //string typeContent = null;
            //var response = instance.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post, apply, delete, action, location, propertylist, davRoot, davCreateAbsoluteUri, davRealm, collectionTypes, filterPrefixes, filterTypes, filterUris, typeCollections, typeNoncollections, typeContent);
            //Assert.IsInstanceOf<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo> (response, "response is OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingJmxProviderImplJMXResourceProvider
        /// </summary>
        [Test]
        public void OrgApacheSlingJmxProviderImplJMXResourceProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string providerRoots = null;
            //var response = instance.OrgApacheSlingJmxProviderImplJMXResourceProvider(post, apply, delete, action, location, propertylist, providerRoots);
            //Assert.IsInstanceOf<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo> (response, "response is OrgApacheSlingJmxProviderImplJMXResourceProviderInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingModelsImplModelAdapterFactory
        /// </summary>
        [Test]
        public void OrgApacheSlingModelsImplModelAdapterFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string osgiHttpWhiteboardListener = null;
            //string osgiHttpWhiteboardContextSelect = null;
            //int? maxRecursionDepth = null;
            //int? cleanupJobPeriod = null;
            //var response = instance.OrgApacheSlingModelsImplModelAdapterFactory(post, apply, delete, action, location, propertylist, osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect, maxRecursionDepth, cleanupJobPeriod);
            //Assert.IsInstanceOf<OrgApacheSlingModelsImplModelAdapterFactoryInfo> (response, "response is OrgApacheSlingModelsImplModelAdapterFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider
        /// </summary>
        [Test]
        public void OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? maxRecursionLevels = null;
            //var response = instance.OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post, apply, delete, action, location, propertylist, maxRecursionLevels);
            //Assert.IsInstanceOf<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo> (response, "response is OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto
        /// </summary>
        [Test]
        public void OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string felixInventoryPrinterName = null;
            //string felixInventoryPrinterTitle = null;
            //string path = null;
            //var response = instance.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post, apply, delete, action, location, propertylist, felixInventoryPrinterName, felixInventoryPrinterTitle, path);
            //Assert.IsInstanceOf<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo> (response, "response is OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingResourcemergerImplMergedResourceProviderFactory
        /// </summary>
        [Test]
        public void OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string mergeRoot = null;
            //bool? mergeReadOnly = null;
            //var response = instance.OrgApacheSlingResourcemergerImplMergedResourceProviderFactory(post, apply, delete, action, location, propertylist, mergeRoot, mergeReadOnly);
            //Assert.IsInstanceOf<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo> (response, "response is OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingResourcemergerPickerOverriding
        /// </summary>
        [Test]
        public void OrgApacheSlingResourcemergerPickerOverridingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string mergeRoot = null;
            //bool? mergeReadOnly = null;
            //var response = instance.OrgApacheSlingResourcemergerPickerOverriding(post, apply, delete, action, location, propertylist, mergeRoot, mergeReadOnly);
            //Assert.IsInstanceOf<OrgApacheSlingResourcemergerPickerOverridingInfo> (response, "response is OrgApacheSlingResourcemergerPickerOverridingInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingScriptingCoreImplScriptCacheImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingScriptingCoreImplScriptCacheImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? orgApacheSlingScriptingCacheSize = null;
            //List<string> orgApacheSlingScriptingCacheAdditionalExtensions = null;
            //var response = instance.OrgApacheSlingScriptingCoreImplScriptCacheImpl(post, apply, delete, action, location, propertylist, orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions);
            //Assert.IsInstanceOf<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo> (response, "response is OrgApacheSlingScriptingCoreImplScriptCacheImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider
        /// </summary>
        [Test]
        public void OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? logStacktraceOnclose = null;
            //var response = instance.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post, apply, delete, action, location, propertylist, logStacktraceOnclose);
            //Assert.IsInstanceOf<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo> (response, "response is OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory
        /// </summary>
        [Test]
        public void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? javaClassdebuginfo = null;
            //string javaJavaEncoding = null;
            //string javaCompilerSourceVM = null;
            //string javaCompilerTargetVM = null;
            //var response = instance.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post, apply, delete, action, location, propertylist, javaClassdebuginfo, javaJavaEncoding, javaCompilerSourceVM, javaCompilerTargetVM);
            //Assert.IsInstanceOf<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo> (response, "response is OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa
        /// </summary>
        [Test]
        public void OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? orgApacheSlingScriptingJavascriptRhinoOptLevel = null;
            //var response = instance.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post, apply, delete, action, location, propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel);
            //Assert.IsInstanceOf<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo> (response, "response is OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingScriptingJspJspScriptEngineFactory
        /// </summary>
        [Test]
        public void OrgApacheSlingScriptingJspJspScriptEngineFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string jasperCompilerTargetVM = null;
            //string jasperCompilerSourceVM = null;
            //bool? jasperClassdebuginfo = null;
            //bool? jasperEnablePooling = null;
            //string jasperIeClassId = null;
            //bool? jasperGenStringAsCharArray = null;
            //bool? jasperKeepgenerated = null;
            //bool? jasperMappedfile = null;
            //bool? jasperTrimSpaces = null;
            //bool? jasperDisplaySourceFragments = null;
            //bool? defaultIsSession = null;
            //var response = instance.OrgApacheSlingScriptingJspJspScriptEngineFactory(post, apply, delete, action, location, propertylist, jasperCompilerTargetVM, jasperCompilerSourceVM, jasperClassdebuginfo, jasperEnablePooling, jasperIeClassId, jasperGenStringAsCharArray, jasperKeepgenerated, jasperMappedfile, jasperTrimSpaces, jasperDisplaySourceFragments, defaultIsSession);
            //Assert.IsInstanceOf<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo> (response, "response is OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv
        /// </summary>
        [Test]
        public void OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> orgApacheSlingScriptingSightlyJsBindings = null;
            //var response = instance.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post, apply, delete, action, location, propertylist, orgApacheSlingScriptingSightlyJsBindings);
            //Assert.IsInstanceOf<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo> (response, "response is OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingSecurityImplContentDispositionFilter
        /// </summary>
        [Test]
        public void OrgApacheSlingSecurityImplContentDispositionFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> slingContentDispositionPaths = null;
            //List<string> slingContentDispositionExcludedPaths = null;
            //bool? slingContentDispositionAllPaths = null;
            //var response = instance.OrgApacheSlingSecurityImplContentDispositionFilter(post, apply, delete, action, location, propertylist, slingContentDispositionPaths, slingContentDispositionExcludedPaths, slingContentDispositionAllPaths);
            //Assert.IsInstanceOf<OrgApacheSlingSecurityImplContentDispositionFilterInfo> (response, "response is OrgApacheSlingSecurityImplContentDispositionFilterInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingSecurityImplReferrerFilter
        /// </summary>
        [Test]
        public void OrgApacheSlingSecurityImplReferrerFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? allowEmpty = null;
            //List<string> allowHosts = null;
            //List<string> allowHostsRegexp = null;
            //List<string> filterMethods = null;
            //List<string> excludeAgentsRegexp = null;
            //var response = instance.OrgApacheSlingSecurityImplReferrerFilter(post, apply, delete, action, location, propertylist, allowEmpty, allowHosts, allowHostsRegexp, filterMethods, excludeAgentsRegexp);
            //Assert.IsInstanceOf<OrgApacheSlingSecurityImplReferrerFilterInfo> (response, "response is OrgApacheSlingSecurityImplReferrerFilterInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingServiceusermappingImplServiceUserMapperImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingServiceusermappingImplServiceUserMapperImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> userMapping = null;
            //string userDefault = null;
            //bool? userEnableDefaultMapping = null;
            //bool? requireValidation = null;
            //var response = instance.OrgApacheSlingServiceusermappingImplServiceUserMapperImpl(post, apply, delete, action, location, propertylist, userMapping, userDefault, userEnableDefaultMapping, requireValidation);
            //Assert.IsInstanceOf<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo> (response, "response is OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended
        /// </summary>
        [Test]
        public void OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //int? serviceRanking = null;
            //List<string> userMapping = null;
            //var response = instance.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post, apply, delete, action, location, propertylist, serviceRanking, userMapping);
            //Assert.IsInstanceOf<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo> (response, "response is OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingServletsGetDefaultGetServlet
        /// </summary>
        [Test]
        public void OrgApacheSlingServletsGetDefaultGetServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> aliases = null;
            //bool? index = null;
            //List<string> indexFiles = null;
            //bool? enableHtml = null;
            //bool? enableJson = null;
            //bool? enableTxt = null;
            //bool? enableXml = null;
            //int? jsonMaximumresults = null;
            //bool? ecmaSuport = null;
            //var response = instance.OrgApacheSlingServletsGetDefaultGetServlet(post, apply, delete, action, location, propertylist, aliases, index, indexFiles, enableHtml, enableJson, enableTxt, enableXml, jsonMaximumresults, ecmaSuport);
            //Assert.IsInstanceOf<OrgApacheSlingServletsGetDefaultGetServletInfo> (response, "response is OrgApacheSlingServletsGetDefaultGetServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingServletsGetImplVersionVersionInfoServlet
        /// </summary>
        [Test]
        public void OrgApacheSlingServletsGetImplVersionVersionInfoServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> slingServletSelectors = null;
            //bool? ecmaSuport = null;
            //var response = instance.OrgApacheSlingServletsGetImplVersionVersionInfoServlet(post, apply, delete, action, location, propertylist, slingServletSelectors, ecmaSuport);
            //Assert.IsInstanceOf<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo> (response, "response is OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingServletsPostImplHelperChunkCleanUpTask
        /// </summary>
        [Test]
        public void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string schedulerExpression = null;
            //bool? schedulerConcurrent = null;
            //int? chunkCleanupAge = null;
            //var response = instance.OrgApacheSlingServletsPostImplHelperChunkCleanUpTask(post, apply, delete, action, location, propertylist, schedulerExpression, schedulerConcurrent, chunkCleanupAge);
            //Assert.IsInstanceOf<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo> (response, "response is OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingServletsPostImplSlingPostServlet
        /// </summary>
        [Test]
        public void OrgApacheSlingServletsPostImplSlingPostServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> servletPostDateFormats = null;
            //List<string> servletPostNodeNameHints = null;
            //int? servletPostNodeNameMaxLength = null;
            //bool? servletPostCheckinNewVersionableNodes = null;
            //bool? servletPostAutoCheckout = null;
            //bool? servletPostAutoCheckin = null;
            //string servletPostIgnorePattern = null;
            //var response = instance.OrgApacheSlingServletsPostImplSlingPostServlet(post, apply, delete, action, location, propertylist, servletPostDateFormats, servletPostNodeNameHints, servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes, servletPostAutoCheckout, servletPostAutoCheckin, servletPostIgnorePattern);
            //Assert.IsInstanceOf<OrgApacheSlingServletsPostImplSlingPostServletInfo> (response, "response is OrgApacheSlingServletsPostImplSlingPostServletInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingServletsResolverSlingServletResolver
        /// </summary>
        [Test]
        public void OrgApacheSlingServletsResolverSlingServletResolverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string servletresolverServletRoot = null;
            //int? servletresolverCacheSize = null;
            //List<string> servletresolverPaths = null;
            //List<string> servletresolverDefaultExtensions = null;
            //var response = instance.OrgApacheSlingServletsResolverSlingServletResolver(post, apply, delete, action, location, propertylist, servletresolverServletRoot, servletresolverCacheSize, servletresolverPaths, servletresolverDefaultExtensions);
            //Assert.IsInstanceOf<OrgApacheSlingServletsResolverSlingServletResolverInfo> (response, "response is OrgApacheSlingServletsResolverSlingServletResolverInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingSettingsImplSlingSettingsServiceImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingSettingsImplSlingSettingsServiceImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string slingName = null;
            //string slingDescription = null;
            //var response = instance.OrgApacheSlingSettingsImplSlingSettingsServiceImpl(post, apply, delete, action, location, propertylist, slingName, slingDescription);
            //Assert.IsInstanceOf<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo> (response, "response is OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingStartupfilterImplStartupFilterImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingStartupfilterImplStartupFilterImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //bool? activeByDefault = null;
            //string defaultMessage = null;
            //var response = instance.OrgApacheSlingStartupfilterImplStartupFilterImpl(post, apply, delete, action, location, propertylist, activeByDefault, defaultMessage);
            //Assert.IsInstanceOf<OrgApacheSlingStartupfilterImplStartupFilterImplInfo> (response, "response is OrgApacheSlingStartupfilterImplStartupFilterImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingTenantInternalTenantProviderImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingTenantInternalTenantProviderImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string tenantRoot = null;
            //List<string> tenantPathMatcher = null;
            //var response = instance.OrgApacheSlingTenantInternalTenantProviderImpl(post, apply, delete, action, location, propertylist, tenantRoot, tenantPathMatcher);
            //Assert.IsInstanceOf<OrgApacheSlingTenantInternalTenantProviderImplInfo> (response, "response is OrgApacheSlingTenantInternalTenantProviderImplInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingTracerInternalLogTracer
        /// </summary>
        [Test]
        public void OrgApacheSlingTracerInternalLogTracerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //List<string> tracerSets = null;
            //bool? enabled = null;
            //bool? servletEnabled = null;
            //int? recordingCacheSizeInMB = null;
            //int? recordingCacheDurationInSecs = null;
            //bool? recordingCompressionEnabled = null;
            //bool? gzipResponse = null;
            //var response = instance.OrgApacheSlingTracerInternalLogTracer(post, apply, delete, action, location, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse);
            //Assert.IsInstanceOf<OrgApacheSlingTracerInternalLogTracerInfo> (response, "response is OrgApacheSlingTracerInternalLogTracerInfo");
        }
        
        /// <summary>
        /// Test OrgApacheSlingXssImplXSSFilterImpl
        /// </summary>
        [Test]
        public void OrgApacheSlingXssImplXSSFilterImplTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? post = null;
            //bool? apply = null;
            //bool? delete = null;
            //string action = null;
            //string location = null;
            //List<string> propertylist = null;
            //string policyPath = null;
            //var response = instance.OrgApacheSlingXssImplXSSFilterImpl(post, apply, delete, action, location, propertylist, policyPath);
            //Assert.IsInstanceOf<OrgApacheSlingXssImplXSSFilterImplInfo> (response, "response is OrgApacheSlingXssImplXSSFilterImplInfo");
        }
        
    }

}
