/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqStatisticsImplStatisticsServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqStatisticsImplStatisticsServiceImplProperties::OAIComDayCqStatisticsImplStatisticsServiceImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqStatisticsImplStatisticsServiceImplProperties::OAIComDayCqStatisticsImplStatisticsServiceImplProperties() {
    this->init();
}

OAIComDayCqStatisticsImplStatisticsServiceImplProperties::~OAIComDayCqStatisticsImplStatisticsServiceImplProperties() {
    
}

void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::init() {
    m_scheduler_period_isSet = false;
    m_scheduler_concurrent_isSet = false;
    m_path_isSet = false;
    m_workspace_isSet = false;
    m_keywords_path_isSet = false;
    m_async_entries_isSet = false;
}

void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(scheduler_period, json[QString("scheduler.period")]);
    
    ::OpenAPI::fromJsonValue(scheduler_concurrent, json[QString("scheduler.concurrent")]);
    
    ::OpenAPI::fromJsonValue(path, json[QString("path")]);
    
    ::OpenAPI::fromJsonValue(workspace, json[QString("workspace")]);
    
    ::OpenAPI::fromJsonValue(keywords_path, json[QString("keywordsPath")]);
    
    ::OpenAPI::fromJsonValue(async_entries, json[QString("asyncEntries")]);
    
}

QString
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(scheduler_period.isSet()){
        obj.insert(QString("scheduler.period"), ::OpenAPI::toJsonValue(scheduler_period));
    }
	if(scheduler_concurrent.isSet()){
        obj.insert(QString("scheduler.concurrent"), ::OpenAPI::toJsonValue(scheduler_concurrent));
    }
	if(path.isSet()){
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(path));
    }
	if(workspace.isSet()){
        obj.insert(QString("workspace"), ::OpenAPI::toJsonValue(workspace));
    }
	if(keywords_path.isSet()){
        obj.insert(QString("keywordsPath"), ::OpenAPI::toJsonValue(keywords_path));
    }
	if(async_entries.isSet()){
        obj.insert(QString("asyncEntries"), ::OpenAPI::toJsonValue(async_entries));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getSchedulerPeriod() const {
    return scheduler_period;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setSchedulerPeriod(const OAIConfigNodePropertyInteger &scheduler_period) {
    this->scheduler_period = scheduler_period;
    this->m_scheduler_period_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getSchedulerConcurrent() const {
    return scheduler_concurrent;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setSchedulerConcurrent(const OAIConfigNodePropertyBoolean &scheduler_concurrent) {
    this->scheduler_concurrent = scheduler_concurrent;
    this->m_scheduler_concurrent_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getPath() const {
    return path;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setPath(const OAIConfigNodePropertyString &path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getWorkspace() const {
    return workspace;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setWorkspace(const OAIConfigNodePropertyString &workspace) {
    this->workspace = workspace;
    this->m_workspace_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getKeywordsPath() const {
    return keywords_path;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setKeywordsPath(const OAIConfigNodePropertyString &keywords_path) {
    this->keywords_path = keywords_path;
    this->m_keywords_path_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getAsyncEntries() const {
    return async_entries;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setAsyncEntries(const OAIConfigNodePropertyBoolean &async_entries) {
    this->async_entries = async_entries;
    this->m_async_entries_isSet = true;
}


bool
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(scheduler_period.isSet()){ isObjectUpdated = true; break;}
    
        if(scheduler_concurrent.isSet()){ isObjectUpdated = true; break;}
    
        if(path.isSet()){ isObjectUpdated = true; break;}
    
        if(workspace.isSet()){ isObjectUpdated = true; break;}
    
        if(keywords_path.isSet()){ isObjectUpdated = true; break;}
    
        if(async_entries.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

