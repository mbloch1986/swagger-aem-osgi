/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqScreensDeviceImplDeviceServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::OAIComAdobeCqScreensDeviceImplDeviceServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::OAIComAdobeCqScreensDeviceImplDeviceServiceProperties() {
    init();
}

OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::~OAIComAdobeCqScreensDeviceImplDeviceServiceProperties() {
    this->cleanup();
}

void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::init() {
    com_adobe_aem_screens_player_pingfrequency = new OAIConfigNodePropertyInteger();
    m_com_adobe_aem_screens_player_pingfrequency_isSet = false;
    com_adobe_aem_screens_device_pasword_specialchars = new OAIConfigNodePropertyString();
    m_com_adobe_aem_screens_device_pasword_specialchars_isSet = false;
    com_adobe_aem_screens_device_pasword_minlowercasechars = new OAIConfigNodePropertyInteger();
    m_com_adobe_aem_screens_device_pasword_minlowercasechars_isSet = false;
    com_adobe_aem_screens_device_pasword_minuppercasechars = new OAIConfigNodePropertyInteger();
    m_com_adobe_aem_screens_device_pasword_minuppercasechars_isSet = false;
    com_adobe_aem_screens_device_pasword_minnumberchars = new OAIConfigNodePropertyInteger();
    m_com_adobe_aem_screens_device_pasword_minnumberchars_isSet = false;
    com_adobe_aem_screens_device_pasword_minspecialchars = new OAIConfigNodePropertyInteger();
    m_com_adobe_aem_screens_device_pasword_minspecialchars_isSet = false;
    com_adobe_aem_screens_device_pasword_minlength = new OAIConfigNodePropertyInteger();
    m_com_adobe_aem_screens_device_pasword_minlength_isSet = false;
}

void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::cleanup() {
    if(com_adobe_aem_screens_player_pingfrequency != nullptr) { 
        delete com_adobe_aem_screens_player_pingfrequency;
    }
    if(com_adobe_aem_screens_device_pasword_specialchars != nullptr) { 
        delete com_adobe_aem_screens_device_pasword_specialchars;
    }
    if(com_adobe_aem_screens_device_pasword_minlowercasechars != nullptr) { 
        delete com_adobe_aem_screens_device_pasword_minlowercasechars;
    }
    if(com_adobe_aem_screens_device_pasword_minuppercasechars != nullptr) { 
        delete com_adobe_aem_screens_device_pasword_minuppercasechars;
    }
    if(com_adobe_aem_screens_device_pasword_minnumberchars != nullptr) { 
        delete com_adobe_aem_screens_device_pasword_minnumberchars;
    }
    if(com_adobe_aem_screens_device_pasword_minspecialchars != nullptr) { 
        delete com_adobe_aem_screens_device_pasword_minspecialchars;
    }
    if(com_adobe_aem_screens_device_pasword_minlength != nullptr) { 
        delete com_adobe_aem_screens_device_pasword_minlength;
    }
}

OAIComAdobeCqScreensDeviceImplDeviceServiceProperties*
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&com_adobe_aem_screens_player_pingfrequency, pJson["com.adobe.aem.screens.player.pingfrequency"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&com_adobe_aem_screens_device_pasword_specialchars, pJson["com.adobe.aem.screens.device.pasword.specialchars"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&com_adobe_aem_screens_device_pasword_minlowercasechars, pJson["com.adobe.aem.screens.device.pasword.minlowercasechars"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&com_adobe_aem_screens_device_pasword_minuppercasechars, pJson["com.adobe.aem.screens.device.pasword.minuppercasechars"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&com_adobe_aem_screens_device_pasword_minnumberchars, pJson["com.adobe.aem.screens.device.pasword.minnumberchars"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&com_adobe_aem_screens_device_pasword_minspecialchars, pJson["com.adobe.aem.screens.device.pasword.minspecialchars"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&com_adobe_aem_screens_device_pasword_minlength, pJson["com.adobe.aem.screens.device.pasword.minlength"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((com_adobe_aem_screens_player_pingfrequency != nullptr) && (com_adobe_aem_screens_player_pingfrequency->isSet())){
        toJsonValue(QString("com.adobe.aem.screens.player.pingfrequency"), com_adobe_aem_screens_player_pingfrequency, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((com_adobe_aem_screens_device_pasword_specialchars != nullptr) && (com_adobe_aem_screens_device_pasword_specialchars->isSet())){
        toJsonValue(QString("com.adobe.aem.screens.device.pasword.specialchars"), com_adobe_aem_screens_device_pasword_specialchars, obj, QString("OAIConfigNodePropertyString"));
    }
    if((com_adobe_aem_screens_device_pasword_minlowercasechars != nullptr) && (com_adobe_aem_screens_device_pasword_minlowercasechars->isSet())){
        toJsonValue(QString("com.adobe.aem.screens.device.pasword.minlowercasechars"), com_adobe_aem_screens_device_pasword_minlowercasechars, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((com_adobe_aem_screens_device_pasword_minuppercasechars != nullptr) && (com_adobe_aem_screens_device_pasword_minuppercasechars->isSet())){
        toJsonValue(QString("com.adobe.aem.screens.device.pasword.minuppercasechars"), com_adobe_aem_screens_device_pasword_minuppercasechars, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((com_adobe_aem_screens_device_pasword_minnumberchars != nullptr) && (com_adobe_aem_screens_device_pasword_minnumberchars->isSet())){
        toJsonValue(QString("com.adobe.aem.screens.device.pasword.minnumberchars"), com_adobe_aem_screens_device_pasword_minnumberchars, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((com_adobe_aem_screens_device_pasword_minspecialchars != nullptr) && (com_adobe_aem_screens_device_pasword_minspecialchars->isSet())){
        toJsonValue(QString("com.adobe.aem.screens.device.pasword.minspecialchars"), com_adobe_aem_screens_device_pasword_minspecialchars, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((com_adobe_aem_screens_device_pasword_minlength != nullptr) && (com_adobe_aem_screens_device_pasword_minlength->isSet())){
        toJsonValue(QString("com.adobe.aem.screens.device.pasword.minlength"), com_adobe_aem_screens_device_pasword_minlength, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensPlayerPingfrequency() {
    return com_adobe_aem_screens_player_pingfrequency;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensPlayerPingfrequency(OAIConfigNodePropertyInteger* com_adobe_aem_screens_player_pingfrequency) {
    this->com_adobe_aem_screens_player_pingfrequency = com_adobe_aem_screens_player_pingfrequency;
    this->m_com_adobe_aem_screens_player_pingfrequency_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordSpecialchars() {
    return com_adobe_aem_screens_device_pasword_specialchars;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordSpecialchars(OAIConfigNodePropertyString* com_adobe_aem_screens_device_pasword_specialchars) {
    this->com_adobe_aem_screens_device_pasword_specialchars = com_adobe_aem_screens_device_pasword_specialchars;
    this->m_com_adobe_aem_screens_device_pasword_specialchars_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinlowercasechars() {
    return com_adobe_aem_screens_device_pasword_minlowercasechars;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinlowercasechars(OAIConfigNodePropertyInteger* com_adobe_aem_screens_device_pasword_minlowercasechars) {
    this->com_adobe_aem_screens_device_pasword_minlowercasechars = com_adobe_aem_screens_device_pasword_minlowercasechars;
    this->m_com_adobe_aem_screens_device_pasword_minlowercasechars_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinuppercasechars() {
    return com_adobe_aem_screens_device_pasword_minuppercasechars;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinuppercasechars(OAIConfigNodePropertyInteger* com_adobe_aem_screens_device_pasword_minuppercasechars) {
    this->com_adobe_aem_screens_device_pasword_minuppercasechars = com_adobe_aem_screens_device_pasword_minuppercasechars;
    this->m_com_adobe_aem_screens_device_pasword_minuppercasechars_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinnumberchars() {
    return com_adobe_aem_screens_device_pasword_minnumberchars;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinnumberchars(OAIConfigNodePropertyInteger* com_adobe_aem_screens_device_pasword_minnumberchars) {
    this->com_adobe_aem_screens_device_pasword_minnumberchars = com_adobe_aem_screens_device_pasword_minnumberchars;
    this->m_com_adobe_aem_screens_device_pasword_minnumberchars_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinspecialchars() {
    return com_adobe_aem_screens_device_pasword_minspecialchars;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinspecialchars(OAIConfigNodePropertyInteger* com_adobe_aem_screens_device_pasword_minspecialchars) {
    this->com_adobe_aem_screens_device_pasword_minspecialchars = com_adobe_aem_screens_device_pasword_minspecialchars;
    this->m_com_adobe_aem_screens_device_pasword_minspecialchars_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinlength() {
    return com_adobe_aem_screens_device_pasword_minlength;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinlength(OAIConfigNodePropertyInteger* com_adobe_aem_screens_device_pasword_minlength) {
    this->com_adobe_aem_screens_device_pasword_minlength = com_adobe_aem_screens_device_pasword_minlength;
    this->m_com_adobe_aem_screens_device_pasword_minlength_isSet = true;
}


bool
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(com_adobe_aem_screens_player_pingfrequency != nullptr && com_adobe_aem_screens_player_pingfrequency->isSet()){ isObjectUpdated = true; break;}
        if(com_adobe_aem_screens_device_pasword_specialchars != nullptr && com_adobe_aem_screens_device_pasword_specialchars->isSet()){ isObjectUpdated = true; break;}
        if(com_adobe_aem_screens_device_pasword_minlowercasechars != nullptr && com_adobe_aem_screens_device_pasword_minlowercasechars->isSet()){ isObjectUpdated = true; break;}
        if(com_adobe_aem_screens_device_pasword_minuppercasechars != nullptr && com_adobe_aem_screens_device_pasword_minuppercasechars->isSet()){ isObjectUpdated = true; break;}
        if(com_adobe_aem_screens_device_pasword_minnumberchars != nullptr && com_adobe_aem_screens_device_pasword_minnumberchars->isSet()){ isObjectUpdated = true; break;}
        if(com_adobe_aem_screens_device_pasword_minspecialchars != nullptr && com_adobe_aem_screens_device_pasword_minspecialchars->isSet()){ isObjectUpdated = true; break;}
        if(com_adobe_aem_screens_device_pasword_minlength != nullptr && com_adobe_aem_screens_device_pasword_minlength->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

