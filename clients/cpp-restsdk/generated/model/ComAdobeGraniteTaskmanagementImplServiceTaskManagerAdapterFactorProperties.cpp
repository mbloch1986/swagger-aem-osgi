/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties()
{
    m_Adapter_conditionIsSet = false;
    m_Taskmanager_admingroupsIsSet = false;
}

ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::~ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties()
{
}

void ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Adapter_conditionIsSet)
    {
        val[utility::conversions::to_string_t("adapter.condition")] = ModelBase::toJson(m_Adapter_condition);
    }
    if(m_Taskmanager_admingroupsIsSet)
    {
        val[utility::conversions::to_string_t("taskmanager.admingroups")] = ModelBase::toJson(m_Taskmanager_admingroups);
    }

    return val;
}

void ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("adapter.condition")))
    {
        if(!val[utility::conversions::to_string_t("adapter.condition")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("adapter.condition")]);
            setAdapterCondition( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("taskmanager.admingroups")))
    {
        if(!val[utility::conversions::to_string_t("taskmanager.admingroups")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("taskmanager.admingroups")]);
            setTaskmanagerAdmingroups( newItem );
        }
    }
}

void ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Adapter_conditionIsSet)
    {
        if (m_Adapter_condition.get())
        {
            m_Adapter_condition->toMultipart(multipart, utility::conversions::to_string_t("adapter.condition."));
        }
    }
    if(m_Taskmanager_admingroupsIsSet)
    {
        if (m_Taskmanager_admingroups.get())
        {
            m_Taskmanager_admingroups->toMultipart(multipart, utility::conversions::to_string_t("taskmanager.admingroups."));
        }
    }
}

void ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("adapter.condition")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("adapter.condition")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("adapter.condition."));
            setAdapterCondition( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("taskmanager.admingroups")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("taskmanager.admingroups")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("taskmanager.admingroups."));
            setTaskmanagerAdmingroups( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::getAdapterCondition() const
{
    return m_Adapter_condition;
}


void ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::setAdapterCondition(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Adapter_condition = value;
    m_Adapter_conditionIsSet = true;
}
bool ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::adapterConditionIsSet() const
{
    return m_Adapter_conditionIsSet;
}

void ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::unsetAdapter_condition()
{
    m_Adapter_conditionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::getTaskmanagerAdmingroups() const
{
    return m_Taskmanager_admingroups;
}


void ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::setTaskmanagerAdmingroups(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Taskmanager_admingroups = value;
    m_Taskmanager_admingroupsIsSet = true;
}
bool ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::taskmanagerAdmingroupsIsSet() const
{
    return m_Taskmanager_admingroupsIsSet;
}

void ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::unsetTaskmanager_admingroups()
{
    m_Taskmanager_admingroupsIsSet = false;
}

}
}
}
}

