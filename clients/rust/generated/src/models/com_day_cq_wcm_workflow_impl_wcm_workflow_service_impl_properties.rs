/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
  #[serde(rename = "event.filter")]
  event_filter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "minThreadPoolSize")]
  min_thread_pool_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "maxThreadPoolSize")]
  max_thread_pool_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cq.wcm.workflow.terminate.on.activate")]
  cq_wcm_workflow_terminate_on_activate: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "cq.wcm.worklfow.terminate.exclusion.list")]
  cq_wcm_worklfow_terminate_exclusion_list: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
  pub fn new() -> ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
    ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
      event_filter: None,
      min_thread_pool_size: None,
      max_thread_pool_size: None,
      cq_wcm_workflow_terminate_on_activate: None,
      cq_wcm_worklfow_terminate_exclusion_list: None
    }
  }

  pub fn set_event_filter(&mut self, event_filter: ::models::ConfigNodePropertyString) {
    self.event_filter = Some(event_filter);
  }

  pub fn with_event_filter(mut self, event_filter: ::models::ConfigNodePropertyString) -> ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
    self.event_filter = Some(event_filter);
    self
  }

  pub fn event_filter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.event_filter.as_ref()
  }

  pub fn reset_event_filter(&mut self) {
    self.event_filter = None;
  }

  pub fn set_min_thread_pool_size(&mut self, min_thread_pool_size: ::models::ConfigNodePropertyInteger) {
    self.min_thread_pool_size = Some(min_thread_pool_size);
  }

  pub fn with_min_thread_pool_size(mut self, min_thread_pool_size: ::models::ConfigNodePropertyInteger) -> ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
    self.min_thread_pool_size = Some(min_thread_pool_size);
    self
  }

  pub fn min_thread_pool_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.min_thread_pool_size.as_ref()
  }

  pub fn reset_min_thread_pool_size(&mut self) {
    self.min_thread_pool_size = None;
  }

  pub fn set_max_thread_pool_size(&mut self, max_thread_pool_size: ::models::ConfigNodePropertyInteger) {
    self.max_thread_pool_size = Some(max_thread_pool_size);
  }

  pub fn with_max_thread_pool_size(mut self, max_thread_pool_size: ::models::ConfigNodePropertyInteger) -> ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
    self.max_thread_pool_size = Some(max_thread_pool_size);
    self
  }

  pub fn max_thread_pool_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_thread_pool_size.as_ref()
  }

  pub fn reset_max_thread_pool_size(&mut self) {
    self.max_thread_pool_size = None;
  }

  pub fn set_cq_wcm_workflow_terminate_on_activate(&mut self, cq_wcm_workflow_terminate_on_activate: ::models::ConfigNodePropertyBoolean) {
    self.cq_wcm_workflow_terminate_on_activate = Some(cq_wcm_workflow_terminate_on_activate);
  }

  pub fn with_cq_wcm_workflow_terminate_on_activate(mut self, cq_wcm_workflow_terminate_on_activate: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
    self.cq_wcm_workflow_terminate_on_activate = Some(cq_wcm_workflow_terminate_on_activate);
    self
  }

  pub fn cq_wcm_workflow_terminate_on_activate(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cq_wcm_workflow_terminate_on_activate.as_ref()
  }

  pub fn reset_cq_wcm_workflow_terminate_on_activate(&mut self) {
    self.cq_wcm_workflow_terminate_on_activate = None;
  }

  pub fn set_cq_wcm_worklfow_terminate_exclusion_list(&mut self, cq_wcm_worklfow_terminate_exclusion_list: ::models::ConfigNodePropertyArray) {
    self.cq_wcm_worklfow_terminate_exclusion_list = Some(cq_wcm_worklfow_terminate_exclusion_list);
  }

  pub fn with_cq_wcm_worklfow_terminate_exclusion_list(mut self, cq_wcm_worklfow_terminate_exclusion_list: ::models::ConfigNodePropertyArray) -> ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
    self.cq_wcm_worklfow_terminate_exclusion_list = Some(cq_wcm_worklfow_terminate_exclusion_list);
    self
  }

  pub fn cq_wcm_worklfow_terminate_exclusion_list(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cq_wcm_worklfow_terminate_exclusion_list.as_ref()
  }

  pub fn reset_cq_wcm_worklfow_terminate_exclusion_list(&mut self) {
    self.cq_wcm_worklfow_terminate_exclusion_list = None;
  }

}



