/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties()
{
    m_Provider_rootsIsSet = false;
    m_KindIsSet = false;
    
}

OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::~OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties()
{
}

void OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Provider_rootsIsSet)
    {
        val["provider.roots"] = ModelBase::toJson(m_Provider_roots);
    }
    if(m_KindIsSet)
    {
        val["kind"] = ModelBase::toJson(m_Kind);
    }
    

    return val;
}

void OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::fromJson(nlohmann::json& val)
{
    if(val.find("provider.roots") != val.end())
    {
        if(!val["provider.roots"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["provider.roots"]);
            setProviderRoots( newItem );
        }
        
    }
    if(val.find("kind") != val.end())
    {
        if(!val["kind"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["kind"]);
            setKind( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::getProviderRoots() const
{
    return m_Provider_roots;
}
void OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::setProviderRoots(ConfigNodePropertyString const& value)
{
    m_Provider_roots = value;
    m_Provider_rootsIsSet = true;
}
bool OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::providerRootsIsSet() const
{
    return m_Provider_rootsIsSet;
}
void OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::unsetProvider_roots()
{
    m_Provider_rootsIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::getKind() const
{
    return m_Kind;
}
void OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::setKind(ConfigNodePropertyString const& value)
{
    m_Kind = value;
    m_KindIsSet = true;
}
bool OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::kindIsSet() const
{
    return m_KindIsSet;
}
void OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties::unsetKind()
{
    m_KindIsSet = false;
}

}
}
}
}

