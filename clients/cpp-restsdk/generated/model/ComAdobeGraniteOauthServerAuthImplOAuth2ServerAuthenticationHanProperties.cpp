/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties()
{
    m_PathIsSet = false;
    m_Jaas_controlFlagIsSet = false;
    m_Jaas_realmNameIsSet = false;
    m_Jaas_rankingIsSet = false;
    m_Oauth_offline_validationIsSet = false;
}

ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::~ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties()
{
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_Jaas_controlFlagIsSet)
    {
        val[utility::conversions::to_string_t("jaas.controlFlag")] = ModelBase::toJson(m_Jaas_controlFlag);
    }
    if(m_Jaas_realmNameIsSet)
    {
        val[utility::conversions::to_string_t("jaas.realmName")] = ModelBase::toJson(m_Jaas_realmName);
    }
    if(m_Jaas_rankingIsSet)
    {
        val[utility::conversions::to_string_t("jaas.ranking")] = ModelBase::toJson(m_Jaas_ranking);
    }
    if(m_Oauth_offline_validationIsSet)
    {
        val[utility::conversions::to_string_t("oauth.offline.validation")] = ModelBase::toJson(m_Oauth_offline_validation);
    }

    return val;
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        if(!val[utility::conversions::to_string_t("path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path")]);
            setPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jaas.controlFlag")))
    {
        if(!val[utility::conversions::to_string_t("jaas.controlFlag")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.controlFlag")]);
            setJaasControlFlag( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jaas.realmName")))
    {
        if(!val[utility::conversions::to_string_t("jaas.realmName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.realmName")]);
            setJaasRealmName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jaas.ranking")))
    {
        if(!val[utility::conversions::to_string_t("jaas.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.ranking")]);
            setJaasRanking( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.offline.validation")))
    {
        if(!val[utility::conversions::to_string_t("oauth.offline.validation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.offline.validation")]);
            setOauthOfflineValidation( newItem );
        }
    }
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PathIsSet)
    {
        if (m_Path.get())
        {
            m_Path->toMultipart(multipart, utility::conversions::to_string_t("path."));
        }
    }
    if(m_Jaas_controlFlagIsSet)
    {
        if (m_Jaas_controlFlag.get())
        {
            m_Jaas_controlFlag->toMultipart(multipart, utility::conversions::to_string_t("jaas.controlFlag."));
        }
    }
    if(m_Jaas_realmNameIsSet)
    {
        if (m_Jaas_realmName.get())
        {
            m_Jaas_realmName->toMultipart(multipart, utility::conversions::to_string_t("jaas.realmName."));
        }
    }
    if(m_Jaas_rankingIsSet)
    {
        if (m_Jaas_ranking.get())
        {
            m_Jaas_ranking->toMultipart(multipart, utility::conversions::to_string_t("jaas.ranking."));
        }
    }
    if(m_Oauth_offline_validationIsSet)
    {
        if (m_Oauth_offline_validation.get())
        {
            m_Oauth_offline_validation->toMultipart(multipart, utility::conversions::to_string_t("oauth.offline.validation."));
        }
    }
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path."));
            setPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jaas.controlFlag")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.controlFlag")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.controlFlag."));
            setJaasControlFlag( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jaas.realmName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.realmName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.realmName."));
            setJaasRealmName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jaas.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.ranking."));
            setJaasRanking( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.offline.validation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.offline.validation")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.offline.validation."));
            setOauthOfflineValidation( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::getPath() const
{
    return m_Path;
}


void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::setPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::unsetPath()
{
    m_PathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::getJaasControlFlag() const
{
    return m_Jaas_controlFlag;
}


void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::setJaasControlFlag(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jaas_controlFlag = value;
    m_Jaas_controlFlagIsSet = true;
}
bool ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::jaasControlFlagIsSet() const
{
    return m_Jaas_controlFlagIsSet;
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::unsetJaas_controlFlag()
{
    m_Jaas_controlFlagIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::getJaasRealmName() const
{
    return m_Jaas_realmName;
}


void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::setJaasRealmName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jaas_realmName = value;
    m_Jaas_realmNameIsSet = true;
}
bool ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::jaasRealmNameIsSet() const
{
    return m_Jaas_realmNameIsSet;
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::unsetJaas_realmName()
{
    m_Jaas_realmNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::getJaasRanking() const
{
    return m_Jaas_ranking;
}


void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::setJaasRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Jaas_ranking = value;
    m_Jaas_rankingIsSet = true;
}
bool ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::jaasRankingIsSet() const
{
    return m_Jaas_rankingIsSet;
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::unsetJaas_ranking()
{
    m_Jaas_rankingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::getOauthOfflineValidation() const
{
    return m_Oauth_offline_validation;
}


void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::setOauthOfflineValidation(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Oauth_offline_validation = value;
    m_Oauth_offline_validationIsSet = true;
}
bool ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::oauthOfflineValidationIsSet() const
{
    return m_Oauth_offline_validationIsSet;
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::unsetOauth_offline_validation()
{
    m_Oauth_offline_validationIsSet = false;
}

}
}
}
}

