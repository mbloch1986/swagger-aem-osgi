/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties()
{
    m_Event_filterIsSet = false;
    m_Fontmgr_system_font_dirIsSet = false;
    m_Fontmgr_adobe_font_dirIsSet = false;
    m_Fontmgr_customer_font_dirIsSet = false;
    
}

ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::~ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties()
{
}

void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Event_filterIsSet)
    {
        val["event.filter"] = ModelBase::toJson(m_Event_filter);
    }
    if(m_Fontmgr_system_font_dirIsSet)
    {
        val["fontmgr.system.font.dir"] = ModelBase::toJson(m_Fontmgr_system_font_dir);
    }
    if(m_Fontmgr_adobe_font_dirIsSet)
    {
        val["fontmgr.adobe.font.dir"] = ModelBase::toJson(m_Fontmgr_adobe_font_dir);
    }
    if(m_Fontmgr_customer_font_dirIsSet)
    {
        val["fontmgr.customer.font.dir"] = ModelBase::toJson(m_Fontmgr_customer_font_dir);
    }
    

    return val;
}

void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("event.filter") != val.end())
    {
        if(!val["event.filter"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["event.filter"]);
            setEventFilter( newItem );
        }
        
    }
    if(val.find("fontmgr.system.font.dir") != val.end())
    {
        if(!val["fontmgr.system.font.dir"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["fontmgr.system.font.dir"]);
            setFontmgrSystemFontDir( newItem );
        }
        
    }
    if(val.find("fontmgr.adobe.font.dir") != val.end())
    {
        if(!val["fontmgr.adobe.font.dir"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["fontmgr.adobe.font.dir"]);
            setFontmgrAdobeFontDir( newItem );
        }
        
    }
    if(val.find("fontmgr.customer.font.dir") != val.end())
    {
        if(!val["fontmgr.customer.font.dir"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["fontmgr.customer.font.dir"]);
            setFontmgrCustomerFontDir( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::getEventFilter() const
{
    return m_Event_filter;
}
void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::setEventFilter(ConfigNodePropertyString const& value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}
void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}
ConfigNodePropertyArray ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::getFontmgrSystemFontDir() const
{
    return m_Fontmgr_system_font_dir;
}
void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::setFontmgrSystemFontDir(ConfigNodePropertyArray const& value)
{
    m_Fontmgr_system_font_dir = value;
    m_Fontmgr_system_font_dirIsSet = true;
}
bool ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::fontmgrSystemFontDirIsSet() const
{
    return m_Fontmgr_system_font_dirIsSet;
}
void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::unsetFontmgr_system_font_dir()
{
    m_Fontmgr_system_font_dirIsSet = false;
}
ConfigNodePropertyString ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::getFontmgrAdobeFontDir() const
{
    return m_Fontmgr_adobe_font_dir;
}
void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::setFontmgrAdobeFontDir(ConfigNodePropertyString const& value)
{
    m_Fontmgr_adobe_font_dir = value;
    m_Fontmgr_adobe_font_dirIsSet = true;
}
bool ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::fontmgrAdobeFontDirIsSet() const
{
    return m_Fontmgr_adobe_font_dirIsSet;
}
void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::unsetFontmgr_adobe_font_dir()
{
    m_Fontmgr_adobe_font_dirIsSet = false;
}
ConfigNodePropertyString ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::getFontmgrCustomerFontDir() const
{
    return m_Fontmgr_customer_font_dir;
}
void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::setFontmgrCustomerFontDir(ConfigNodePropertyString const& value)
{
    m_Fontmgr_customer_font_dir = value;
    m_Fontmgr_customer_font_dirIsSet = true;
}
bool ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::fontmgrCustomerFontDirIsSet() const
{
    return m_Fontmgr_customer_font_dirIsSet;
}
void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::unsetFontmgr_customer_font_dir()
{
    m_Fontmgr_customer_font_dirIsSet = false;
}

}
}
}
}

