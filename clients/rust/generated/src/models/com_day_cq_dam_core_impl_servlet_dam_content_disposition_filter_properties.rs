/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletDamContentDispositionFilterProperties {
  #[serde(rename = "cq.mime.type.blacklist")]
  cq_mime_type_blacklist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cq.dam.empty.mime")]
  cq_dam_empty_mime: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqDamCoreImplServletDamContentDispositionFilterProperties {
  pub fn new() -> ComDayCqDamCoreImplServletDamContentDispositionFilterProperties {
    ComDayCqDamCoreImplServletDamContentDispositionFilterProperties {
      cq_mime_type_blacklist: None,
      cq_dam_empty_mime: None
    }
  }

  pub fn set_cq_mime_type_blacklist(&mut self, cq_mime_type_blacklist: ::models::ConfigNodePropertyArray) {
    self.cq_mime_type_blacklist = Some(cq_mime_type_blacklist);
  }

  pub fn with_cq_mime_type_blacklist(mut self, cq_mime_type_blacklist: ::models::ConfigNodePropertyArray) -> ComDayCqDamCoreImplServletDamContentDispositionFilterProperties {
    self.cq_mime_type_blacklist = Some(cq_mime_type_blacklist);
    self
  }

  pub fn cq_mime_type_blacklist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cq_mime_type_blacklist.as_ref()
  }

  pub fn reset_cq_mime_type_blacklist(&mut self) {
    self.cq_mime_type_blacklist = None;
  }

  pub fn set_cq_dam_empty_mime(&mut self, cq_dam_empty_mime: ::models::ConfigNodePropertyBoolean) {
    self.cq_dam_empty_mime = Some(cq_dam_empty_mime);
  }

  pub fn with_cq_dam_empty_mime(mut self, cq_dam_empty_mime: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCoreImplServletDamContentDispositionFilterProperties {
    self.cq_dam_empty_mime = Some(cq_dam_empty_mime);
    self
  }

  pub fn cq_dam_empty_mime(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cq_dam_empty_mime.as_ref()
  }

  pub fn reset_cq_dam_empty_mime(&mut self) {
    self.cq_dam_empty_mime = None;
  }

}



