/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheSlingDiscoveryOakConfigProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingDiscoveryOakConfigProperties_H_
#define OrgApacheSlingDiscoveryOakConfigProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDiscoveryOakConfigProperties
    : public ModelBase
{
public:
    OrgApacheSlingDiscoveryOakConfigProperties();
    virtual ~OrgApacheSlingDiscoveryOakConfigProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingDiscoveryOakConfigProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getConnectorPingTimeout() const;
    void setConnectorPingTimeout(ConfigNodePropertyInteger const& value);
    bool connectorPingTimeoutIsSet() const;
    void unsetConnectorPingTimeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getConnectorPingInterval() const;
    void setConnectorPingInterval(ConfigNodePropertyInteger const& value);
    bool connectorPingIntervalIsSet() const;
    void unsetConnectorPingInterval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getDiscoveryLiteCheckInterval() const;
    void setDiscoveryLiteCheckInterval(ConfigNodePropertyInteger const& value);
    bool discoveryLiteCheckIntervalIsSet() const;
    void unsetDiscoveryLiteCheckInterval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterSyncServiceTimeout() const;
    void setClusterSyncServiceTimeout(ConfigNodePropertyInteger const& value);
    bool clusterSyncServiceTimeoutIsSet() const;
    void unsetClusterSyncServiceTimeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterSyncServiceInterval() const;
    void setClusterSyncServiceInterval(ConfigNodePropertyInteger const& value);
    bool clusterSyncServiceIntervalIsSet() const;
    void unsetClusterSyncServiceInterval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getEnableSyncToken() const;
    void setEnableSyncToken(ConfigNodePropertyBoolean const& value);
    bool enableSyncTokenIsSet() const;
    void unsetEnableSyncToken();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMinEventDelay() const;
    void setMinEventDelay(ConfigNodePropertyInteger const& value);
    bool minEventDelayIsSet() const;
    void unsetMinEventDelay();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getSocketConnectTimeout() const;
    void setSocketConnectTimeout(ConfigNodePropertyInteger const& value);
    bool socketConnectTimeoutIsSet() const;
    void unsetSocketConnectTimeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getSoTimeout() const;
    void setSoTimeout(ConfigNodePropertyInteger const& value);
    bool soTimeoutIsSet() const;
    void unsetSoTimeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getTopologyConnectorUrls() const;
    void setTopologyConnectorUrls(ConfigNodePropertyArray const& value);
    bool topologyConnectorUrlsIsSet() const;
    void unsetTopologyConnectorUrls();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getTopologyConnectorWhitelist() const;
    void setTopologyConnectorWhitelist(ConfigNodePropertyArray const& value);
    bool topologyConnectorWhitelistIsSet() const;
    void unsetTopologyConnectorWhitelist();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getAutoStopLocalLoopEnabled() const;
    void setAutoStopLocalLoopEnabled(ConfigNodePropertyBoolean const& value);
    bool autoStopLocalLoopEnabledIsSet() const;
    void unsetAutoStopLocalLoopEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getGzipConnectorRequestsEnabled() const;
    void setGzipConnectorRequestsEnabled(ConfigNodePropertyBoolean const& value);
    bool gzipConnectorRequestsEnabledIsSet() const;
    void unsetGzipConnectorRequestsEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getHmacEnabled() const;
    void setHmacEnabled(ConfigNodePropertyBoolean const& value);
    bool hmacEnabledIsSet() const;
    void unsetHmacEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getEnableEncryption() const;
    void setEnableEncryption(ConfigNodePropertyBoolean const& value);
    bool enableEncryptionIsSet() const;
    void unsetEnableEncryption();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getSharedKey() const;
    void setSharedKey(ConfigNodePropertyString const& value);
    bool sharedKeyIsSet() const;
    void unsetSharedKey();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getHmacSharedKeyTTL() const;
    void setHmacSharedKeyTTL(ConfigNodePropertyInteger const& value);
    bool hmacSharedKeyTTLIsSet() const;
    void unsetHmacSharedKeyTTL();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getBackoffStandbyFactor() const;
    void setBackoffStandbyFactor(ConfigNodePropertyString const& value);
    bool backoffStandbyFactorIsSet() const;
    void unsetBackoffStandbyFactor();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getBackoffStableFactor() const;
    void setBackoffStableFactor(ConfigNodePropertyString const& value);
    bool backoffStableFactorIsSet() const;
    void unsetBackoffStableFactor();

protected:
    ConfigNodePropertyInteger m_ConnectorPingTimeout;
    bool m_ConnectorPingTimeoutIsSet;
    ConfigNodePropertyInteger m_ConnectorPingInterval;
    bool m_ConnectorPingIntervalIsSet;
    ConfigNodePropertyInteger m_DiscoveryLiteCheckInterval;
    bool m_DiscoveryLiteCheckIntervalIsSet;
    ConfigNodePropertyInteger m_ClusterSyncServiceTimeout;
    bool m_ClusterSyncServiceTimeoutIsSet;
    ConfigNodePropertyInteger m_ClusterSyncServiceInterval;
    bool m_ClusterSyncServiceIntervalIsSet;
    ConfigNodePropertyBoolean m_EnableSyncToken;
    bool m_EnableSyncTokenIsSet;
    ConfigNodePropertyInteger m_MinEventDelay;
    bool m_MinEventDelayIsSet;
    ConfigNodePropertyInteger m_SocketConnectTimeout;
    bool m_SocketConnectTimeoutIsSet;
    ConfigNodePropertyInteger m_SoTimeout;
    bool m_SoTimeoutIsSet;
    ConfigNodePropertyArray m_TopologyConnectorUrls;
    bool m_TopologyConnectorUrlsIsSet;
    ConfigNodePropertyArray m_TopologyConnectorWhitelist;
    bool m_TopologyConnectorWhitelistIsSet;
    ConfigNodePropertyBoolean m_AutoStopLocalLoopEnabled;
    bool m_AutoStopLocalLoopEnabledIsSet;
    ConfigNodePropertyBoolean m_GzipConnectorRequestsEnabled;
    bool m_GzipConnectorRequestsEnabledIsSet;
    ConfigNodePropertyBoolean m_HmacEnabled;
    bool m_HmacEnabledIsSet;
    ConfigNodePropertyBoolean m_EnableEncryption;
    bool m_EnableEncryptionIsSet;
    ConfigNodePropertyString m_SharedKey;
    bool m_SharedKeyIsSet;
    ConfigNodePropertyInteger m_HmacSharedKeyTTL;
    bool m_HmacSharedKeyTTLIsSet;
    ConfigNodePropertyString m_BackoffStandbyFactor;
    bool m_BackoffStandbyFactorIsSet;
    ConfigNodePropertyString m_BackoffStableFactor;
    bool m_BackoffStableFactorIsSet;
};

}
}
}
}

#endif /* OrgApacheSlingDiscoveryOakConfigProperties_H_ */
