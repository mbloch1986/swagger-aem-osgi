/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqReplicationImplTransportHttpProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqReplicationImplTransportHttpProperties::OAIComDayCqReplicationImplTransportHttpProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqReplicationImplTransportHttpProperties::OAIComDayCqReplicationImplTransportHttpProperties() {
    init();
}

OAIComDayCqReplicationImplTransportHttpProperties::~OAIComDayCqReplicationImplTransportHttpProperties() {
    this->cleanup();
}

void
OAIComDayCqReplicationImplTransportHttpProperties::init() {
    disabled_cipher_suites = new OAIConfigNodePropertyArray();
    m_disabled_cipher_suites_isSet = false;
    enabled_cipher_suites = new OAIConfigNodePropertyArray();
    m_enabled_cipher_suites_isSet = false;
}

void
OAIComDayCqReplicationImplTransportHttpProperties::cleanup() {
    if(disabled_cipher_suites != nullptr) { 
        delete disabled_cipher_suites;
    }
    if(enabled_cipher_suites != nullptr) { 
        delete enabled_cipher_suites;
    }
}

OAIComDayCqReplicationImplTransportHttpProperties*
OAIComDayCqReplicationImplTransportHttpProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqReplicationImplTransportHttpProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&disabled_cipher_suites, pJson["disabled.cipher.suites"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&enabled_cipher_suites, pJson["enabled.cipher.suites"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCqReplicationImplTransportHttpProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqReplicationImplTransportHttpProperties::asJsonObject() {
    QJsonObject obj;
    if((disabled_cipher_suites != nullptr) && (disabled_cipher_suites->isSet())){
        toJsonValue(QString("disabled.cipher.suites"), disabled_cipher_suites, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((enabled_cipher_suites != nullptr) && (enabled_cipher_suites->isSet())){
        toJsonValue(QString("enabled.cipher.suites"), enabled_cipher_suites, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComDayCqReplicationImplTransportHttpProperties::getDisabledCipherSuites() {
    return disabled_cipher_suites;
}
void
OAIComDayCqReplicationImplTransportHttpProperties::setDisabledCipherSuites(OAIConfigNodePropertyArray* disabled_cipher_suites) {
    this->disabled_cipher_suites = disabled_cipher_suites;
    this->m_disabled_cipher_suites_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqReplicationImplTransportHttpProperties::getEnabledCipherSuites() {
    return enabled_cipher_suites;
}
void
OAIComDayCqReplicationImplTransportHttpProperties::setEnabledCipherSuites(OAIConfigNodePropertyArray* enabled_cipher_suites) {
    this->enabled_cipher_suites = enabled_cipher_suites;
    this->m_enabled_cipher_suites_isSet = true;
}


bool
OAIComDayCqReplicationImplTransportHttpProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(disabled_cipher_suites != nullptr && disabled_cipher_suites->isSet()){ isObjectUpdated = true; break;}
        if(enabled_cipher_suites != nullptr && enabled_cipher_suites->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

