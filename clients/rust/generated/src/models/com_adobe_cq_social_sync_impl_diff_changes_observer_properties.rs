/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
  #[serde(rename = "enabled")]
  enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "agentName")]
  agent_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "diffPath")]
  diff_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "propertyNames")]
  property_names: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
  pub fn new() -> ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
    ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
      enabled: None,
      agent_name: None,
      diff_path: None,
      property_names: None
    }
  }

  pub fn set_enabled(&mut self, enabled: ::models::ConfigNodePropertyBoolean) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_agent_name(&mut self, agent_name: ::models::ConfigNodePropertyString) {
    self.agent_name = Some(agent_name);
  }

  pub fn with_agent_name(mut self, agent_name: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
    self.agent_name = Some(agent_name);
    self
  }

  pub fn agent_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.agent_name.as_ref()
  }

  pub fn reset_agent_name(&mut self) {
    self.agent_name = None;
  }

  pub fn set_diff_path(&mut self, diff_path: ::models::ConfigNodePropertyString) {
    self.diff_path = Some(diff_path);
  }

  pub fn with_diff_path(mut self, diff_path: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
    self.diff_path = Some(diff_path);
    self
  }

  pub fn diff_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.diff_path.as_ref()
  }

  pub fn reset_diff_path(&mut self) {
    self.diff_path = None;
  }

  pub fn set_property_names(&mut self, property_names: ::models::ConfigNodePropertyString) {
    self.property_names = Some(property_names);
  }

  pub fn with_property_names(mut self, property_names: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
    self.property_names = Some(property_names);
    self
  }

  pub fn property_names(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.property_names.as_ref()
  }

  pub fn reset_property_names(&mut self) {
    self.property_names = None;
  }

}



