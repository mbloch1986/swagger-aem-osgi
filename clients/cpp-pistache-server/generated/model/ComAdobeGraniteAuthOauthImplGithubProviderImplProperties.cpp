/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteAuthOauthImplGithubProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::ComAdobeGraniteAuthOauthImplGithubProviderImplProperties()
{
    m_Oauth_provider_idIsSet = false;
    m_Oauth_provider_github_authorization_urlIsSet = false;
    m_Oauth_provider_github_token_urlIsSet = false;
    m_Oauth_provider_github_profile_urlIsSet = false;
    
}

ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::~ComAdobeGraniteAuthOauthImplGithubProviderImplProperties()
{
}

void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Oauth_provider_idIsSet)
    {
        val["oauth.provider.id"] = ModelBase::toJson(m_Oauth_provider_id);
    }
    if(m_Oauth_provider_github_authorization_urlIsSet)
    {
        val["oauth.provider.github.authorization.url"] = ModelBase::toJson(m_Oauth_provider_github_authorization_url);
    }
    if(m_Oauth_provider_github_token_urlIsSet)
    {
        val["oauth.provider.github.token.url"] = ModelBase::toJson(m_Oauth_provider_github_token_url);
    }
    if(m_Oauth_provider_github_profile_urlIsSet)
    {
        val["oauth.provider.github.profile.url"] = ModelBase::toJson(m_Oauth_provider_github_profile_url);
    }
    

    return val;
}

void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("oauth.provider.id") != val.end())
    {
        if(!val["oauth.provider.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.id"]);
            setOauthProviderId( newItem );
        }
        
    }
    if(val.find("oauth.provider.github.authorization.url") != val.end())
    {
        if(!val["oauth.provider.github.authorization.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.github.authorization.url"]);
            setOauthProviderGithubAuthorizationUrl( newItem );
        }
        
    }
    if(val.find("oauth.provider.github.token.url") != val.end())
    {
        if(!val["oauth.provider.github.token.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.github.token.url"]);
            setOauthProviderGithubTokenUrl( newItem );
        }
        
    }
    if(val.find("oauth.provider.github.profile.url") != val.end())
    {
        if(!val["oauth.provider.github.profile.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.github.profile.url"]);
            setOauthProviderGithubProfileUrl( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderId() const
{
    return m_Oauth_provider_id;
}
void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderId(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_id = value;
    m_Oauth_provider_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::oauthProviderIdIsSet() const
{
    return m_Oauth_provider_idIsSet;
}
void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::unsetOauth_provider_id()
{
    m_Oauth_provider_idIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderGithubAuthorizationUrl() const
{
    return m_Oauth_provider_github_authorization_url;
}
void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderGithubAuthorizationUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_github_authorization_url = value;
    m_Oauth_provider_github_authorization_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::oauthProviderGithubAuthorizationUrlIsSet() const
{
    return m_Oauth_provider_github_authorization_urlIsSet;
}
void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::unsetOauth_provider_github_authorization_url()
{
    m_Oauth_provider_github_authorization_urlIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderGithubTokenUrl() const
{
    return m_Oauth_provider_github_token_url;
}
void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderGithubTokenUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_github_token_url = value;
    m_Oauth_provider_github_token_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::oauthProviderGithubTokenUrlIsSet() const
{
    return m_Oauth_provider_github_token_urlIsSet;
}
void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::unsetOauth_provider_github_token_url()
{
    m_Oauth_provider_github_token_urlIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderGithubProfileUrl() const
{
    return m_Oauth_provider_github_profile_url;
}
void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderGithubProfileUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_github_profile_url = value;
    m_Oauth_provider_github_profile_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::oauthProviderGithubProfileUrlIsSet() const
{
    return m_Oauth_provider_github_profile_urlIsSet;
}
void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::unsetOauth_provider_github_profile_url()
{
    m_Oauth_provider_github_profile_urlIsSet = false;
}

}
}
}
}

