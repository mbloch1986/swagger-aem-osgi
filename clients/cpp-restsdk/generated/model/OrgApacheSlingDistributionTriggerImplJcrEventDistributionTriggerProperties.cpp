/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties()
{
    m_NameIsSet = false;
    m_PathIsSet = false;
    m_IgnoredPathsPatternsIsSet = false;
    m_ServiceNameIsSet = false;
    m_DeepIsSet = false;
}

OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::~OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties()
{
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_IgnoredPathsPatternsIsSet)
    {
        val[utility::conversions::to_string_t("ignoredPathsPatterns")] = ModelBase::toJson(m_IgnoredPathsPatterns);
    }
    if(m_ServiceNameIsSet)
    {
        val[utility::conversions::to_string_t("serviceName")] = ModelBase::toJson(m_ServiceName);
    }
    if(m_DeepIsSet)
    {
        val[utility::conversions::to_string_t("deep")] = ModelBase::toJson(m_Deep);
    }

    return val;
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        if(!val[utility::conversions::to_string_t("path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path")]);
            setPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ignoredPathsPatterns")))
    {
        if(!val[utility::conversions::to_string_t("ignoredPathsPatterns")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("ignoredPathsPatterns")]);
            setIgnoredPathsPatterns( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceName")))
    {
        if(!val[utility::conversions::to_string_t("serviceName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("serviceName")]);
            setServiceName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deep")))
    {
        if(!val[utility::conversions::to_string_t("deep")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("deep")]);
            setDeep( newItem );
        }
    }
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_PathIsSet)
    {
        if (m_Path.get())
        {
            m_Path->toMultipart(multipart, utility::conversions::to_string_t("path."));
        }
    }
    if(m_IgnoredPathsPatternsIsSet)
    {
        if (m_IgnoredPathsPatterns.get())
        {
            m_IgnoredPathsPatterns->toMultipart(multipart, utility::conversions::to_string_t("ignoredPathsPatterns."));
        }
    }
    if(m_ServiceNameIsSet)
    {
        if (m_ServiceName.get())
        {
            m_ServiceName->toMultipart(multipart, utility::conversions::to_string_t("serviceName."));
        }
    }
    if(m_DeepIsSet)
    {
        if (m_Deep.get())
        {
            m_Deep->toMultipart(multipart, utility::conversions::to_string_t("deep."));
        }
    }
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path."));
            setPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ignoredPathsPatterns")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ignoredPathsPatterns")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ignoredPathsPatterns."));
            setIgnoredPathsPatterns( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("serviceName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("serviceName."));
            setServiceName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deep")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("deep")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("deep."));
            setDeep( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::getName() const
{
    return m_Name;
}


void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::getPath() const
{
    return m_Path;
}


void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::setPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::unsetPath()
{
    m_PathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::getIgnoredPathsPatterns() const
{
    return m_IgnoredPathsPatterns;
}


void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::setIgnoredPathsPatterns(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_IgnoredPathsPatterns = value;
    m_IgnoredPathsPatternsIsSet = true;
}
bool OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::ignoredPathsPatternsIsSet() const
{
    return m_IgnoredPathsPatternsIsSet;
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::unsetIgnoredPathsPatterns()
{
    m_IgnoredPathsPatternsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::getServiceName() const
{
    return m_ServiceName;
}


void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::setServiceName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}
bool OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::getDeep() const
{
    return m_Deep;
}


void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::setDeep(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Deep = value;
    m_DeepIsSet = true;
}
bool OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::deepIsSet() const
{
    return m_DeepIsSet;
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::unsetDeep()
{
    m_DeepIsSet = false;
}

}
}
}
}

