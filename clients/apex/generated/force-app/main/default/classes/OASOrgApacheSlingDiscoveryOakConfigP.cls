/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheSlingDiscoveryOakConfigP
 */
public class OASOrgApacheSlingDiscoveryOakConfigP {
    /**
     * Get connectorPingTimeout
     * @return connectorPingTimeout
     */
    public OASConfigNodePropertyInteger connectorPingTimeout { get; set; }

    /**
     * Get connectorPingInterval
     * @return connectorPingInterval
     */
    public OASConfigNodePropertyInteger connectorPingInterval { get; set; }

    /**
     * Get discoveryLiteCheckInterval
     * @return discoveryLiteCheckInterval
     */
    public OASConfigNodePropertyInteger discoveryLiteCheckInterval { get; set; }

    /**
     * Get clusterSyncServiceTimeout
     * @return clusterSyncServiceTimeout
     */
    public OASConfigNodePropertyInteger clusterSyncServiceTimeout { get; set; }

    /**
     * Get clusterSyncServiceInterval
     * @return clusterSyncServiceInterval
     */
    public OASConfigNodePropertyInteger clusterSyncServiceInterval { get; set; }

    /**
     * Get enableSyncToken
     * @return enableSyncToken
     */
    public OASConfigNodePropertyBoolean enableSyncToken { get; set; }

    /**
     * Get minEventDelay
     * @return minEventDelay
     */
    public OASConfigNodePropertyInteger minEventDelay { get; set; }

    /**
     * Get socketConnectTimeout
     * @return socketConnectTimeout
     */
    public OASConfigNodePropertyInteger socketConnectTimeout { get; set; }

    /**
     * Get soTimeout
     * @return soTimeout
     */
    public OASConfigNodePropertyInteger soTimeout { get; set; }

    /**
     * Get topologyConnectorUrls
     * @return topologyConnectorUrls
     */
    public OASConfigNodePropertyArray topologyConnectorUrls { get; set; }

    /**
     * Get topologyConnectorWhitelist
     * @return topologyConnectorWhitelist
     */
    public OASConfigNodePropertyArray topologyConnectorWhitelist { get; set; }

    /**
     * Get autoStopLocalLoopEnabled
     * @return autoStopLocalLoopEnabled
     */
    public OASConfigNodePropertyBoolean autoStopLocalLoopEnabled { get; set; }

    /**
     * Get gzipConnectorRequestsEnabled
     * @return gzipConnectorRequestsEnabled
     */
    public OASConfigNodePropertyBoolean gzipConnectorRequestsEnabled { get; set; }

    /**
     * Get hmacEnabled
     * @return hmacEnabled
     */
    public OASConfigNodePropertyBoolean hmacEnabled { get; set; }

    /**
     * Get enableEncryption
     * @return enableEncryption
     */
    public OASConfigNodePropertyBoolean enableEncryption { get; set; }

    /**
     * Get sharedKey
     * @return sharedKey
     */
    public OASConfigNodePropertyString sharedKey { get; set; }

    /**
     * Get hmacSharedKeyTTL
     * @return hmacSharedKeyTTL
     */
    public OASConfigNodePropertyInteger hmacSharedKeyTTL { get; set; }

    /**
     * Get backoffStandbyFactor
     * @return backoffStandbyFactor
     */
    public OASConfigNodePropertyString backoffStandbyFactor { get; set; }

    /**
     * Get backoffStableFactor
     * @return backoffStableFactor
     */
    public OASConfigNodePropertyString backoffStableFactor { get; set; }

    public static OASOrgApacheSlingDiscoveryOakConfigP getExample() {
        OASOrgApacheSlingDiscoveryOakConfigP orgApacheSlingDiscoveryOakConfigProperties = new OASOrgApacheSlingDiscoveryOakConfigP();
          orgApacheSlingDiscoveryOakConfigProperties.connectorPingTimeout = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.connectorPingInterval = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.discoveryLiteCheckInterval = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.clusterSyncServiceTimeout = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.clusterSyncServiceInterval = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.enableSyncToken = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.minEventDelay = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.socketConnectTimeout = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.soTimeout = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.topologyConnectorUrls = OASConfigNodePropertyArray.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.topologyConnectorWhitelist = OASConfigNodePropertyArray.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.autoStopLocalLoopEnabled = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.gzipConnectorRequestsEnabled = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.hmacEnabled = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.enableEncryption = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.sharedKey = OASConfigNodePropertyString.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.hmacSharedKeyTTL = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.backoffStandbyFactor = OASConfigNodePropertyString.getExample();
          orgApacheSlingDiscoveryOakConfigProperties.backoffStableFactor = OASConfigNodePropertyString.getExample();
        return orgApacheSlingDiscoveryOakConfigProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheSlingDiscoveryOakConfigP) {           
            OASOrgApacheSlingDiscoveryOakConfigP orgApacheSlingDiscoveryOakConfigProperties = (OASOrgApacheSlingDiscoveryOakConfigP) obj;
            return this.connectorPingTimeout == orgApacheSlingDiscoveryOakConfigProperties.connectorPingTimeout
                && this.connectorPingInterval == orgApacheSlingDiscoveryOakConfigProperties.connectorPingInterval
                && this.discoveryLiteCheckInterval == orgApacheSlingDiscoveryOakConfigProperties.discoveryLiteCheckInterval
                && this.clusterSyncServiceTimeout == orgApacheSlingDiscoveryOakConfigProperties.clusterSyncServiceTimeout
                && this.clusterSyncServiceInterval == orgApacheSlingDiscoveryOakConfigProperties.clusterSyncServiceInterval
                && this.enableSyncToken == orgApacheSlingDiscoveryOakConfigProperties.enableSyncToken
                && this.minEventDelay == orgApacheSlingDiscoveryOakConfigProperties.minEventDelay
                && this.socketConnectTimeout == orgApacheSlingDiscoveryOakConfigProperties.socketConnectTimeout
                && this.soTimeout == orgApacheSlingDiscoveryOakConfigProperties.soTimeout
                && this.topologyConnectorUrls == orgApacheSlingDiscoveryOakConfigProperties.topologyConnectorUrls
                && this.topologyConnectorWhitelist == orgApacheSlingDiscoveryOakConfigProperties.topologyConnectorWhitelist
                && this.autoStopLocalLoopEnabled == orgApacheSlingDiscoveryOakConfigProperties.autoStopLocalLoopEnabled
                && this.gzipConnectorRequestsEnabled == orgApacheSlingDiscoveryOakConfigProperties.gzipConnectorRequestsEnabled
                && this.hmacEnabled == orgApacheSlingDiscoveryOakConfigProperties.hmacEnabled
                && this.enableEncryption == orgApacheSlingDiscoveryOakConfigProperties.enableEncryption
                && this.sharedKey == orgApacheSlingDiscoveryOakConfigProperties.sharedKey
                && this.hmacSharedKeyTTL == orgApacheSlingDiscoveryOakConfigProperties.hmacSharedKeyTTL
                && this.backoffStandbyFactor == orgApacheSlingDiscoveryOakConfigProperties.backoffStandbyFactor
                && this.backoffStableFactor == orgApacheSlingDiscoveryOakConfigProperties.backoffStableFactor;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (connectorPingTimeout == null ? 0 : System.hashCode(connectorPingTimeout));
        hashCode = (17 * hashCode) + (connectorPingInterval == null ? 0 : System.hashCode(connectorPingInterval));
        hashCode = (17 * hashCode) + (discoveryLiteCheckInterval == null ? 0 : System.hashCode(discoveryLiteCheckInterval));
        hashCode = (17 * hashCode) + (clusterSyncServiceTimeout == null ? 0 : System.hashCode(clusterSyncServiceTimeout));
        hashCode = (17 * hashCode) + (clusterSyncServiceInterval == null ? 0 : System.hashCode(clusterSyncServiceInterval));
        hashCode = (17 * hashCode) + (enableSyncToken == null ? 0 : System.hashCode(enableSyncToken));
        hashCode = (17 * hashCode) + (minEventDelay == null ? 0 : System.hashCode(minEventDelay));
        hashCode = (17 * hashCode) + (socketConnectTimeout == null ? 0 : System.hashCode(socketConnectTimeout));
        hashCode = (17 * hashCode) + (soTimeout == null ? 0 : System.hashCode(soTimeout));
        hashCode = (17 * hashCode) + (topologyConnectorUrls == null ? 0 : System.hashCode(topologyConnectorUrls));
        hashCode = (17 * hashCode) + (topologyConnectorWhitelist == null ? 0 : System.hashCode(topologyConnectorWhitelist));
        hashCode = (17 * hashCode) + (autoStopLocalLoopEnabled == null ? 0 : System.hashCode(autoStopLocalLoopEnabled));
        hashCode = (17 * hashCode) + (gzipConnectorRequestsEnabled == null ? 0 : System.hashCode(gzipConnectorRequestsEnabled));
        hashCode = (17 * hashCode) + (hmacEnabled == null ? 0 : System.hashCode(hmacEnabled));
        hashCode = (17 * hashCode) + (enableEncryption == null ? 0 : System.hashCode(enableEncryption));
        hashCode = (17 * hashCode) + (sharedKey == null ? 0 : System.hashCode(sharedKey));
        hashCode = (17 * hashCode) + (hmacSharedKeyTTL == null ? 0 : System.hashCode(hmacSharedKeyTTL));
        hashCode = (17 * hashCode) + (backoffStandbyFactor == null ? 0 : System.hashCode(backoffStandbyFactor));
        hashCode = (17 * hashCode) + (backoffStableFactor == null ? 0 : System.hashCode(backoffStableFactor));
        return hashCode;
    }
}

