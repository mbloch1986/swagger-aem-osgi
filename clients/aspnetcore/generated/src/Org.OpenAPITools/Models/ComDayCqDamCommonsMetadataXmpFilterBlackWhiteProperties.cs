/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties : IEquatable<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties>
    { 
        /// <summary>
        /// Gets or Sets XmpFilterApplyWhitelist
        /// </summary>
        [DataMember(Name="xmp.filter.apply_whitelist")]
        public ConfigNodePropertyBoolean XmpFilterApplyWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets XmpFilterWhitelist
        /// </summary>
        [DataMember(Name="xmp.filter.whitelist")]
        public ConfigNodePropertyArray XmpFilterWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets XmpFilterApplyBlacklist
        /// </summary>
        [DataMember(Name="xmp.filter.apply_blacklist")]
        public ConfigNodePropertyBoolean XmpFilterApplyBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets XmpFilterBlacklist
        /// </summary>
        [DataMember(Name="xmp.filter.blacklist")]
        public ConfigNodePropertyArray XmpFilterBlacklist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {\n");
            sb.Append("  XmpFilterApplyWhitelist: ").Append(XmpFilterApplyWhitelist).Append("\n");
            sb.Append("  XmpFilterWhitelist: ").Append(XmpFilterWhitelist).Append("\n");
            sb.Append("  XmpFilterApplyBlacklist: ").Append(XmpFilterApplyBlacklist).Append("\n");
            sb.Append("  XmpFilterBlacklist: ").Append(XmpFilterBlacklist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    XmpFilterApplyWhitelist == other.XmpFilterApplyWhitelist ||
                    XmpFilterApplyWhitelist != null &&
                    XmpFilterApplyWhitelist.Equals(other.XmpFilterApplyWhitelist)
                ) && 
                (
                    XmpFilterWhitelist == other.XmpFilterWhitelist ||
                    XmpFilterWhitelist != null &&
                    XmpFilterWhitelist.Equals(other.XmpFilterWhitelist)
                ) && 
                (
                    XmpFilterApplyBlacklist == other.XmpFilterApplyBlacklist ||
                    XmpFilterApplyBlacklist != null &&
                    XmpFilterApplyBlacklist.Equals(other.XmpFilterApplyBlacklist)
                ) && 
                (
                    XmpFilterBlacklist == other.XmpFilterBlacklist ||
                    XmpFilterBlacklist != null &&
                    XmpFilterBlacklist.Equals(other.XmpFilterBlacklist)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (XmpFilterApplyWhitelist != null)
                    hashCode = hashCode * 59 + XmpFilterApplyWhitelist.GetHashCode();
                    if (XmpFilterWhitelist != null)
                    hashCode = hashCode * 59 + XmpFilterWhitelist.GetHashCode();
                    if (XmpFilterApplyBlacklist != null)
                    hashCode = hashCode * 59 + XmpFilterApplyBlacklist.GetHashCode();
                    if (XmpFilterBlacklist != null)
                    hashCode = hashCode * 59 + XmpFilterBlacklist.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties left, ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties left, ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
