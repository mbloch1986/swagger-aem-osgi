/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties()
{
    
}

OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::~OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties()
{
}

std::string OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDisabled() const
{
    return m_Disabled;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDisabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Disabled = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDebug() const
{
    return m_Debug;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDebug(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Debug = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getLocalIndexDir() const
{
    return m_LocalIndexDir;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setLocalIndexDir(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_LocalIndexDir = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableOpenIndexAsync() const
{
    return m_EnableOpenIndexAsync;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableOpenIndexAsync(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableOpenIndexAsync = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getThreadPoolSize() const
{
    return m_ThreadPoolSize;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setThreadPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ThreadPoolSize = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getPrefetchIndexFiles() const
{
    return m_PrefetchIndexFiles;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setPrefetchIndexFiles(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_PrefetchIndexFiles = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getExtractedTextCacheSizeInMB() const
{
    return m_ExtractedTextCacheSizeInMB;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setExtractedTextCacheSizeInMB(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ExtractedTextCacheSizeInMB = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getExtractedTextCacheExpiryInSecs() const
{
    return m_ExtractedTextCacheExpiryInSecs;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setExtractedTextCacheExpiryInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ExtractedTextCacheExpiryInSecs = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getAlwaysUsePreExtractedCache() const
{
    return m_AlwaysUsePreExtractedCache;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setAlwaysUsePreExtractedCache(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_AlwaysUsePreExtractedCache = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getBooleanClauseLimit() const
{
    return m_BooleanClauseLimit;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setBooleanClauseLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BooleanClauseLimit = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableHybridIndexing() const
{
    return m_EnableHybridIndexing;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableHybridIndexing(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableHybridIndexing = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getHybridQueueSize() const
{
    return m_HybridQueueSize;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setHybridQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_HybridQueueSize = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDisableStoredIndexDefinition() const
{
    return m_DisableStoredIndexDefinition;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDisableStoredIndexDefinition(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_DisableStoredIndexDefinition = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDeletedBlobsCollectionEnabled() const
{
    return m_DeletedBlobsCollectionEnabled;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDeletedBlobsCollectionEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_DeletedBlobsCollectionEnabled = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getPropIndexCleanerIntervalInSecs() const
{
    return m_PropIndexCleanerIntervalInSecs;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setPropIndexCleanerIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PropIndexCleanerIntervalInSecs = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableSingleBlobIndexFiles() const
{
    return m_EnableSingleBlobIndexFiles;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableSingleBlobIndexFiles(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableSingleBlobIndexFiles = value;
}

}
}
}
}

