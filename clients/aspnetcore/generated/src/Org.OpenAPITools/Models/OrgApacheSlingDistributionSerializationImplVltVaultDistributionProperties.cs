/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties : IEquatable<OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public ConfigNodePropertyString Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type")]
        public ConfigNodePropertyDropDown Type { get; set; }

        /// <summary>
        /// Gets or Sets ImportMode
        /// </summary>
        [DataMember(Name="importMode")]
        public ConfigNodePropertyString ImportMode { get; set; }

        /// <summary>
        /// Gets or Sets AclHandling
        /// </summary>
        [DataMember(Name="aclHandling")]
        public ConfigNodePropertyString AclHandling { get; set; }

        /// <summary>
        /// Gets or Sets PackageRoots
        /// </summary>
        [DataMember(Name="package.roots")]
        public ConfigNodePropertyString PackageRoots { get; set; }

        /// <summary>
        /// Gets or Sets PackageFilters
        /// </summary>
        [DataMember(Name="package.filters")]
        public ConfigNodePropertyArray PackageFilters { get; set; }

        /// <summary>
        /// Gets or Sets PropertyFilters
        /// </summary>
        [DataMember(Name="property.filters")]
        public ConfigNodePropertyArray PropertyFilters { get; set; }

        /// <summary>
        /// Gets or Sets TempFsFolder
        /// </summary>
        [DataMember(Name="tempFsFolder")]
        public ConfigNodePropertyString TempFsFolder { get; set; }

        /// <summary>
        /// Gets or Sets UseBinaryReferences
        /// </summary>
        [DataMember(Name="useBinaryReferences")]
        public ConfigNodePropertyBoolean UseBinaryReferences { get; set; }

        /// <summary>
        /// Gets or Sets AutoSaveThreshold
        /// </summary>
        [DataMember(Name="autoSaveThreshold")]
        public ConfigNodePropertyInteger AutoSaveThreshold { get; set; }

        /// <summary>
        /// Gets or Sets CleanupDelay
        /// </summary>
        [DataMember(Name="cleanupDelay")]
        public ConfigNodePropertyInteger CleanupDelay { get; set; }

        /// <summary>
        /// Gets or Sets FileThreshold
        /// </summary>
        [DataMember(Name="fileThreshold")]
        public ConfigNodePropertyInteger FileThreshold { get; set; }

        /// <summary>
        /// Gets or Sets MEGA_BYTES
        /// </summary>
        [DataMember(Name="MEGA_BYTES")]
        public ConfigNodePropertyDropDown MEGA_BYTES { get; set; }

        /// <summary>
        /// Gets or Sets UseOffHeapMemory
        /// </summary>
        [DataMember(Name="useOffHeapMemory")]
        public ConfigNodePropertyBoolean UseOffHeapMemory { get; set; }

        /// <summary>
        /// Gets or Sets DigestAlgorithm
        /// </summary>
        [DataMember(Name="digestAlgorithm")]
        public ConfigNodePropertyDropDown DigestAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets MonitoringQueueSize
        /// </summary>
        [DataMember(Name="monitoringQueueSize")]
        public ConfigNodePropertyInteger MonitoringQueueSize { get; set; }

        /// <summary>
        /// Gets or Sets PathsMapping
        /// </summary>
        [DataMember(Name="pathsMapping")]
        public ConfigNodePropertyArray PathsMapping { get; set; }

        /// <summary>
        /// Gets or Sets StrictImport
        /// </summary>
        [DataMember(Name="strictImport")]
        public ConfigNodePropertyBoolean StrictImport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ImportMode: ").Append(ImportMode).Append("\n");
            sb.Append("  AclHandling: ").Append(AclHandling).Append("\n");
            sb.Append("  PackageRoots: ").Append(PackageRoots).Append("\n");
            sb.Append("  PackageFilters: ").Append(PackageFilters).Append("\n");
            sb.Append("  PropertyFilters: ").Append(PropertyFilters).Append("\n");
            sb.Append("  TempFsFolder: ").Append(TempFsFolder).Append("\n");
            sb.Append("  UseBinaryReferences: ").Append(UseBinaryReferences).Append("\n");
            sb.Append("  AutoSaveThreshold: ").Append(AutoSaveThreshold).Append("\n");
            sb.Append("  CleanupDelay: ").Append(CleanupDelay).Append("\n");
            sb.Append("  FileThreshold: ").Append(FileThreshold).Append("\n");
            sb.Append("  MEGA_BYTES: ").Append(MEGA_BYTES).Append("\n");
            sb.Append("  UseOffHeapMemory: ").Append(UseOffHeapMemory).Append("\n");
            sb.Append("  DigestAlgorithm: ").Append(DigestAlgorithm).Append("\n");
            sb.Append("  MonitoringQueueSize: ").Append(MonitoringQueueSize).Append("\n");
            sb.Append("  PathsMapping: ").Append(PathsMapping).Append("\n");
            sb.Append("  StrictImport: ").Append(StrictImport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    ImportMode == other.ImportMode ||
                    ImportMode != null &&
                    ImportMode.Equals(other.ImportMode)
                ) && 
                (
                    AclHandling == other.AclHandling ||
                    AclHandling != null &&
                    AclHandling.Equals(other.AclHandling)
                ) && 
                (
                    PackageRoots == other.PackageRoots ||
                    PackageRoots != null &&
                    PackageRoots.Equals(other.PackageRoots)
                ) && 
                (
                    PackageFilters == other.PackageFilters ||
                    PackageFilters != null &&
                    PackageFilters.Equals(other.PackageFilters)
                ) && 
                (
                    PropertyFilters == other.PropertyFilters ||
                    PropertyFilters != null &&
                    PropertyFilters.Equals(other.PropertyFilters)
                ) && 
                (
                    TempFsFolder == other.TempFsFolder ||
                    TempFsFolder != null &&
                    TempFsFolder.Equals(other.TempFsFolder)
                ) && 
                (
                    UseBinaryReferences == other.UseBinaryReferences ||
                    UseBinaryReferences != null &&
                    UseBinaryReferences.Equals(other.UseBinaryReferences)
                ) && 
                (
                    AutoSaveThreshold == other.AutoSaveThreshold ||
                    AutoSaveThreshold != null &&
                    AutoSaveThreshold.Equals(other.AutoSaveThreshold)
                ) && 
                (
                    CleanupDelay == other.CleanupDelay ||
                    CleanupDelay != null &&
                    CleanupDelay.Equals(other.CleanupDelay)
                ) && 
                (
                    FileThreshold == other.FileThreshold ||
                    FileThreshold != null &&
                    FileThreshold.Equals(other.FileThreshold)
                ) && 
                (
                    MEGA_BYTES == other.MEGA_BYTES ||
                    MEGA_BYTES != null &&
                    MEGA_BYTES.Equals(other.MEGA_BYTES)
                ) && 
                (
                    UseOffHeapMemory == other.UseOffHeapMemory ||
                    UseOffHeapMemory != null &&
                    UseOffHeapMemory.Equals(other.UseOffHeapMemory)
                ) && 
                (
                    DigestAlgorithm == other.DigestAlgorithm ||
                    DigestAlgorithm != null &&
                    DigestAlgorithm.Equals(other.DigestAlgorithm)
                ) && 
                (
                    MonitoringQueueSize == other.MonitoringQueueSize ||
                    MonitoringQueueSize != null &&
                    MonitoringQueueSize.Equals(other.MonitoringQueueSize)
                ) && 
                (
                    PathsMapping == other.PathsMapping ||
                    PathsMapping != null &&
                    PathsMapping.Equals(other.PathsMapping)
                ) && 
                (
                    StrictImport == other.StrictImport ||
                    StrictImport != null &&
                    StrictImport.Equals(other.StrictImport)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (ImportMode != null)
                    hashCode = hashCode * 59 + ImportMode.GetHashCode();
                    if (AclHandling != null)
                    hashCode = hashCode * 59 + AclHandling.GetHashCode();
                    if (PackageRoots != null)
                    hashCode = hashCode * 59 + PackageRoots.GetHashCode();
                    if (PackageFilters != null)
                    hashCode = hashCode * 59 + PackageFilters.GetHashCode();
                    if (PropertyFilters != null)
                    hashCode = hashCode * 59 + PropertyFilters.GetHashCode();
                    if (TempFsFolder != null)
                    hashCode = hashCode * 59 + TempFsFolder.GetHashCode();
                    if (UseBinaryReferences != null)
                    hashCode = hashCode * 59 + UseBinaryReferences.GetHashCode();
                    if (AutoSaveThreshold != null)
                    hashCode = hashCode * 59 + AutoSaveThreshold.GetHashCode();
                    if (CleanupDelay != null)
                    hashCode = hashCode * 59 + CleanupDelay.GetHashCode();
                    if (FileThreshold != null)
                    hashCode = hashCode * 59 + FileThreshold.GetHashCode();
                    if (MEGA_BYTES != null)
                    hashCode = hashCode * 59 + MEGA_BYTES.GetHashCode();
                    if (UseOffHeapMemory != null)
                    hashCode = hashCode * 59 + UseOffHeapMemory.GetHashCode();
                    if (DigestAlgorithm != null)
                    hashCode = hashCode * 59 + DigestAlgorithm.GetHashCode();
                    if (MonitoringQueueSize != null)
                    hashCode = hashCode * 59 + MonitoringQueueSize.GetHashCode();
                    if (PathsMapping != null)
                    hashCode = hashCode * 59 + PathsMapping.GetHashCode();
                    if (StrictImport != null)
                    hashCode = hashCode * 59 + StrictImport.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties left, OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties left, OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
