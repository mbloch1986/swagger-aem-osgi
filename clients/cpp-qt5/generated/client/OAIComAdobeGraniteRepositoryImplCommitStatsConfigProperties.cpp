/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties() {
    init();
}

OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::~OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::init() {
    enabled = new OAIConfigNodePropertyBoolean();
    m_enabled_isSet = false;
    interval_seconds = new OAIConfigNodePropertyInteger();
    m_interval_seconds_isSet = false;
    commits_per_interval_threshold = new OAIConfigNodePropertyInteger();
    m_commits_per_interval_threshold_isSet = false;
    max_location_length = new OAIConfigNodePropertyInteger();
    m_max_location_length_isSet = false;
    max_details_shown = new OAIConfigNodePropertyInteger();
    m_max_details_shown_isSet = false;
    min_details_percentage = new OAIConfigNodePropertyInteger();
    m_min_details_percentage_isSet = false;
    thread_matchers = new OAIConfigNodePropertyArray();
    m_thread_matchers_isSet = false;
    max_greedy_depth = new OAIConfigNodePropertyInteger();
    m_max_greedy_depth_isSet = false;
    greedy_stack_matchers = new OAIConfigNodePropertyString();
    m_greedy_stack_matchers_isSet = false;
    stack_filters = new OAIConfigNodePropertyArray();
    m_stack_filters_isSet = false;
    stack_matchers = new OAIConfigNodePropertyArray();
    m_stack_matchers_isSet = false;
    stack_categorizers = new OAIConfigNodePropertyArray();
    m_stack_categorizers_isSet = false;
    stack_shorteners = new OAIConfigNodePropertyArray();
    m_stack_shorteners_isSet = false;
}

void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::cleanup() {
    if(enabled != nullptr) { 
        delete enabled;
    }
    if(interval_seconds != nullptr) { 
        delete interval_seconds;
    }
    if(commits_per_interval_threshold != nullptr) { 
        delete commits_per_interval_threshold;
    }
    if(max_location_length != nullptr) { 
        delete max_location_length;
    }
    if(max_details_shown != nullptr) { 
        delete max_details_shown;
    }
    if(min_details_percentage != nullptr) { 
        delete min_details_percentage;
    }
    if(thread_matchers != nullptr) { 
        delete thread_matchers;
    }
    if(max_greedy_depth != nullptr) { 
        delete max_greedy_depth;
    }
    if(greedy_stack_matchers != nullptr) { 
        delete greedy_stack_matchers;
    }
    if(stack_filters != nullptr) { 
        delete stack_filters;
    }
    if(stack_matchers != nullptr) { 
        delete stack_matchers;
    }
    if(stack_categorizers != nullptr) { 
        delete stack_categorizers;
    }
    if(stack_shorteners != nullptr) { 
        delete stack_shorteners;
    }
}

OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&enabled, pJson["enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&interval_seconds, pJson["intervalSeconds"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&commits_per_interval_threshold, pJson["commitsPerIntervalThreshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_location_length, pJson["maxLocationLength"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_details_shown, pJson["maxDetailsShown"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&min_details_percentage, pJson["minDetailsPercentage"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&thread_matchers, pJson["threadMatchers"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&max_greedy_depth, pJson["maxGreedyDepth"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&greedy_stack_matchers, pJson["greedyStackMatchers"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&stack_filters, pJson["stackFilters"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&stack_matchers, pJson["stackMatchers"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&stack_categorizers, pJson["stackCategorizers"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&stack_shorteners, pJson["stackShorteners"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::asJsonObject() {
    QJsonObject obj;
    if((enabled != nullptr) && (enabled->isSet())){
        toJsonValue(QString("enabled"), enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((interval_seconds != nullptr) && (interval_seconds->isSet())){
        toJsonValue(QString("intervalSeconds"), interval_seconds, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((commits_per_interval_threshold != nullptr) && (commits_per_interval_threshold->isSet())){
        toJsonValue(QString("commitsPerIntervalThreshold"), commits_per_interval_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_location_length != nullptr) && (max_location_length->isSet())){
        toJsonValue(QString("maxLocationLength"), max_location_length, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_details_shown != nullptr) && (max_details_shown->isSet())){
        toJsonValue(QString("maxDetailsShown"), max_details_shown, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((min_details_percentage != nullptr) && (min_details_percentage->isSet())){
        toJsonValue(QString("minDetailsPercentage"), min_details_percentage, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((thread_matchers != nullptr) && (thread_matchers->isSet())){
        toJsonValue(QString("threadMatchers"), thread_matchers, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((max_greedy_depth != nullptr) && (max_greedy_depth->isSet())){
        toJsonValue(QString("maxGreedyDepth"), max_greedy_depth, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((greedy_stack_matchers != nullptr) && (greedy_stack_matchers->isSet())){
        toJsonValue(QString("greedyStackMatchers"), greedy_stack_matchers, obj, QString("OAIConfigNodePropertyString"));
    }
    if((stack_filters != nullptr) && (stack_filters->isSet())){
        toJsonValue(QString("stackFilters"), stack_filters, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((stack_matchers != nullptr) && (stack_matchers->isSet())){
        toJsonValue(QString("stackMatchers"), stack_matchers, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((stack_categorizers != nullptr) && (stack_categorizers->isSet())){
        toJsonValue(QString("stackCategorizers"), stack_categorizers, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((stack_shorteners != nullptr) && (stack_shorteners->isSet())){
        toJsonValue(QString("stackShorteners"), stack_shorteners, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getEnabled() {
    return enabled;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setEnabled(OAIConfigNodePropertyBoolean* enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getIntervalSeconds() {
    return interval_seconds;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setIntervalSeconds(OAIConfigNodePropertyInteger* interval_seconds) {
    this->interval_seconds = interval_seconds;
    this->m_interval_seconds_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getCommitsPerIntervalThreshold() {
    return commits_per_interval_threshold;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setCommitsPerIntervalThreshold(OAIConfigNodePropertyInteger* commits_per_interval_threshold) {
    this->commits_per_interval_threshold = commits_per_interval_threshold;
    this->m_commits_per_interval_threshold_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxLocationLength() {
    return max_location_length;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxLocationLength(OAIConfigNodePropertyInteger* max_location_length) {
    this->max_location_length = max_location_length;
    this->m_max_location_length_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxDetailsShown() {
    return max_details_shown;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxDetailsShown(OAIConfigNodePropertyInteger* max_details_shown) {
    this->max_details_shown = max_details_shown;
    this->m_max_details_shown_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMinDetailsPercentage() {
    return min_details_percentage;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMinDetailsPercentage(OAIConfigNodePropertyInteger* min_details_percentage) {
    this->min_details_percentage = min_details_percentage;
    this->m_min_details_percentage_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getThreadMatchers() {
    return thread_matchers;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setThreadMatchers(OAIConfigNodePropertyArray* thread_matchers) {
    this->thread_matchers = thread_matchers;
    this->m_thread_matchers_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxGreedyDepth() {
    return max_greedy_depth;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxGreedyDepth(OAIConfigNodePropertyInteger* max_greedy_depth) {
    this->max_greedy_depth = max_greedy_depth;
    this->m_max_greedy_depth_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getGreedyStackMatchers() {
    return greedy_stack_matchers;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setGreedyStackMatchers(OAIConfigNodePropertyString* greedy_stack_matchers) {
    this->greedy_stack_matchers = greedy_stack_matchers;
    this->m_greedy_stack_matchers_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackFilters() {
    return stack_filters;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackFilters(OAIConfigNodePropertyArray* stack_filters) {
    this->stack_filters = stack_filters;
    this->m_stack_filters_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackMatchers() {
    return stack_matchers;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackMatchers(OAIConfigNodePropertyArray* stack_matchers) {
    this->stack_matchers = stack_matchers;
    this->m_stack_matchers_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackCategorizers() {
    return stack_categorizers;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackCategorizers(OAIConfigNodePropertyArray* stack_categorizers) {
    this->stack_categorizers = stack_categorizers;
    this->m_stack_categorizers_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackShorteners() {
    return stack_shorteners;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackShorteners(OAIConfigNodePropertyArray* stack_shorteners) {
    this->stack_shorteners = stack_shorteners;
    this->m_stack_shorteners_isSet = true;
}


bool
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(enabled != nullptr && enabled->isSet()){ isObjectUpdated = true; break;}
        if(interval_seconds != nullptr && interval_seconds->isSet()){ isObjectUpdated = true; break;}
        if(commits_per_interval_threshold != nullptr && commits_per_interval_threshold->isSet()){ isObjectUpdated = true; break;}
        if(max_location_length != nullptr && max_location_length->isSet()){ isObjectUpdated = true; break;}
        if(max_details_shown != nullptr && max_details_shown->isSet()){ isObjectUpdated = true; break;}
        if(min_details_percentage != nullptr && min_details_percentage->isSet()){ isObjectUpdated = true; break;}
        if(thread_matchers != nullptr && thread_matchers->isSet()){ isObjectUpdated = true; break;}
        if(max_greedy_depth != nullptr && max_greedy_depth->isSet()){ isObjectUpdated = true; break;}
        if(greedy_stack_matchers != nullptr && greedy_stack_matchers->isSet()){ isObjectUpdated = true; break;}
        if(stack_filters != nullptr && stack_filters->isSet()){ isObjectUpdated = true; break;}
        if(stack_matchers != nullptr && stack_matchers->isSet()){ isObjectUpdated = true; break;}
        if(stack_categorizers != nullptr && stack_categorizers->isSet()){ isObjectUpdated = true; break;}
        if(stack_shorteners != nullptr && stack_shorteners->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

