<?php
/**
 * ComAdobeGraniteAuthOauthAccesstokenProviderProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeGraniteAuthOauthAccesstokenProviderProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeGraniteAuthOauthAccesstokenProviderProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeGraniteAuthOauthAccesstokenProviderProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_token_provider_title' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_token_provider_default_claims' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'auth_token_provider_endpoint' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_access_token_request' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_token_provider_keypair_alias' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_token_provider_conn_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'auth_token_provider_so_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'auth_token_provider_client_id' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_token_provider_scope' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_token_provider_reuse_access_token' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'auth_token_provider_relaxed_ssl' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'token_request_customizer_type' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_token_validator_type' => '\OpenAPI\Client\Model\ConfigNodePropertyString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'auth_token_provider_title' => null,
        'auth_token_provider_default_claims' => null,
        'auth_token_provider_endpoint' => null,
        'auth_access_token_request' => null,
        'auth_token_provider_keypair_alias' => null,
        'auth_token_provider_conn_timeout' => null,
        'auth_token_provider_so_timeout' => null,
        'auth_token_provider_client_id' => null,
        'auth_token_provider_scope' => null,
        'auth_token_provider_reuse_access_token' => null,
        'auth_token_provider_relaxed_ssl' => null,
        'token_request_customizer_type' => null,
        'auth_token_validator_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'auth_token_provider_title' => 'auth.token.provider.title',
        'auth_token_provider_default_claims' => 'auth.token.provider.default.claims',
        'auth_token_provider_endpoint' => 'auth.token.provider.endpoint',
        'auth_access_token_request' => 'auth.access.token.request',
        'auth_token_provider_keypair_alias' => 'auth.token.provider.keypair.alias',
        'auth_token_provider_conn_timeout' => 'auth.token.provider.conn.timeout',
        'auth_token_provider_so_timeout' => 'auth.token.provider.so.timeout',
        'auth_token_provider_client_id' => 'auth.token.provider.client.id',
        'auth_token_provider_scope' => 'auth.token.provider.scope',
        'auth_token_provider_reuse_access_token' => 'auth.token.provider.reuse.access.token',
        'auth_token_provider_relaxed_ssl' => 'auth.token.provider.relaxed.ssl',
        'token_request_customizer_type' => 'token.request.customizer.type',
        'auth_token_validator_type' => 'auth.token.validator.type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'auth_token_provider_title' => 'setAuthTokenProviderTitle',
        'auth_token_provider_default_claims' => 'setAuthTokenProviderDefaultClaims',
        'auth_token_provider_endpoint' => 'setAuthTokenProviderEndpoint',
        'auth_access_token_request' => 'setAuthAccessTokenRequest',
        'auth_token_provider_keypair_alias' => 'setAuthTokenProviderKeypairAlias',
        'auth_token_provider_conn_timeout' => 'setAuthTokenProviderConnTimeout',
        'auth_token_provider_so_timeout' => 'setAuthTokenProviderSoTimeout',
        'auth_token_provider_client_id' => 'setAuthTokenProviderClientId',
        'auth_token_provider_scope' => 'setAuthTokenProviderScope',
        'auth_token_provider_reuse_access_token' => 'setAuthTokenProviderReuseAccessToken',
        'auth_token_provider_relaxed_ssl' => 'setAuthTokenProviderRelaxedSsl',
        'token_request_customizer_type' => 'setTokenRequestCustomizerType',
        'auth_token_validator_type' => 'setAuthTokenValidatorType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'auth_token_provider_title' => 'getAuthTokenProviderTitle',
        'auth_token_provider_default_claims' => 'getAuthTokenProviderDefaultClaims',
        'auth_token_provider_endpoint' => 'getAuthTokenProviderEndpoint',
        'auth_access_token_request' => 'getAuthAccessTokenRequest',
        'auth_token_provider_keypair_alias' => 'getAuthTokenProviderKeypairAlias',
        'auth_token_provider_conn_timeout' => 'getAuthTokenProviderConnTimeout',
        'auth_token_provider_so_timeout' => 'getAuthTokenProviderSoTimeout',
        'auth_token_provider_client_id' => 'getAuthTokenProviderClientId',
        'auth_token_provider_scope' => 'getAuthTokenProviderScope',
        'auth_token_provider_reuse_access_token' => 'getAuthTokenProviderReuseAccessToken',
        'auth_token_provider_relaxed_ssl' => 'getAuthTokenProviderRelaxedSsl',
        'token_request_customizer_type' => 'getTokenRequestCustomizerType',
        'auth_token_validator_type' => 'getAuthTokenValidatorType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['auth_token_provider_title'] = isset($data['auth_token_provider_title']) ? $data['auth_token_provider_title'] : null;
        $this->container['auth_token_provider_default_claims'] = isset($data['auth_token_provider_default_claims']) ? $data['auth_token_provider_default_claims'] : null;
        $this->container['auth_token_provider_endpoint'] = isset($data['auth_token_provider_endpoint']) ? $data['auth_token_provider_endpoint'] : null;
        $this->container['auth_access_token_request'] = isset($data['auth_access_token_request']) ? $data['auth_access_token_request'] : null;
        $this->container['auth_token_provider_keypair_alias'] = isset($data['auth_token_provider_keypair_alias']) ? $data['auth_token_provider_keypair_alias'] : null;
        $this->container['auth_token_provider_conn_timeout'] = isset($data['auth_token_provider_conn_timeout']) ? $data['auth_token_provider_conn_timeout'] : null;
        $this->container['auth_token_provider_so_timeout'] = isset($data['auth_token_provider_so_timeout']) ? $data['auth_token_provider_so_timeout'] : null;
        $this->container['auth_token_provider_client_id'] = isset($data['auth_token_provider_client_id']) ? $data['auth_token_provider_client_id'] : null;
        $this->container['auth_token_provider_scope'] = isset($data['auth_token_provider_scope']) ? $data['auth_token_provider_scope'] : null;
        $this->container['auth_token_provider_reuse_access_token'] = isset($data['auth_token_provider_reuse_access_token']) ? $data['auth_token_provider_reuse_access_token'] : null;
        $this->container['auth_token_provider_relaxed_ssl'] = isset($data['auth_token_provider_relaxed_ssl']) ? $data['auth_token_provider_relaxed_ssl'] : null;
        $this->container['token_request_customizer_type'] = isset($data['token_request_customizer_type']) ? $data['token_request_customizer_type'] : null;
        $this->container['auth_token_validator_type'] = isset($data['auth_token_validator_type']) ? $data['auth_token_validator_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets auth_token_provider_title
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthTokenProviderTitle()
    {
        return $this->container['auth_token_provider_title'];
    }

    /**
     * Sets auth_token_provider_title
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_token_provider_title auth_token_provider_title
     *
     * @return $this
     */
    public function setAuthTokenProviderTitle($auth_token_provider_title)
    {
        $this->container['auth_token_provider_title'] = $auth_token_provider_title;

        return $this;
    }

    /**
     * Gets auth_token_provider_default_claims
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAuthTokenProviderDefaultClaims()
    {
        return $this->container['auth_token_provider_default_claims'];
    }

    /**
     * Sets auth_token_provider_default_claims
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $auth_token_provider_default_claims auth_token_provider_default_claims
     *
     * @return $this
     */
    public function setAuthTokenProviderDefaultClaims($auth_token_provider_default_claims)
    {
        $this->container['auth_token_provider_default_claims'] = $auth_token_provider_default_claims;

        return $this;
    }

    /**
     * Gets auth_token_provider_endpoint
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthTokenProviderEndpoint()
    {
        return $this->container['auth_token_provider_endpoint'];
    }

    /**
     * Sets auth_token_provider_endpoint
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_token_provider_endpoint auth_token_provider_endpoint
     *
     * @return $this
     */
    public function setAuthTokenProviderEndpoint($auth_token_provider_endpoint)
    {
        $this->container['auth_token_provider_endpoint'] = $auth_token_provider_endpoint;

        return $this;
    }

    /**
     * Gets auth_access_token_request
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthAccessTokenRequest()
    {
        return $this->container['auth_access_token_request'];
    }

    /**
     * Sets auth_access_token_request
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_access_token_request auth_access_token_request
     *
     * @return $this
     */
    public function setAuthAccessTokenRequest($auth_access_token_request)
    {
        $this->container['auth_access_token_request'] = $auth_access_token_request;

        return $this;
    }

    /**
     * Gets auth_token_provider_keypair_alias
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthTokenProviderKeypairAlias()
    {
        return $this->container['auth_token_provider_keypair_alias'];
    }

    /**
     * Sets auth_token_provider_keypair_alias
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_token_provider_keypair_alias auth_token_provider_keypair_alias
     *
     * @return $this
     */
    public function setAuthTokenProviderKeypairAlias($auth_token_provider_keypair_alias)
    {
        $this->container['auth_token_provider_keypair_alias'] = $auth_token_provider_keypair_alias;

        return $this;
    }

    /**
     * Gets auth_token_provider_conn_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getAuthTokenProviderConnTimeout()
    {
        return $this->container['auth_token_provider_conn_timeout'];
    }

    /**
     * Sets auth_token_provider_conn_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $auth_token_provider_conn_timeout auth_token_provider_conn_timeout
     *
     * @return $this
     */
    public function setAuthTokenProviderConnTimeout($auth_token_provider_conn_timeout)
    {
        $this->container['auth_token_provider_conn_timeout'] = $auth_token_provider_conn_timeout;

        return $this;
    }

    /**
     * Gets auth_token_provider_so_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getAuthTokenProviderSoTimeout()
    {
        return $this->container['auth_token_provider_so_timeout'];
    }

    /**
     * Sets auth_token_provider_so_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $auth_token_provider_so_timeout auth_token_provider_so_timeout
     *
     * @return $this
     */
    public function setAuthTokenProviderSoTimeout($auth_token_provider_so_timeout)
    {
        $this->container['auth_token_provider_so_timeout'] = $auth_token_provider_so_timeout;

        return $this;
    }

    /**
     * Gets auth_token_provider_client_id
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthTokenProviderClientId()
    {
        return $this->container['auth_token_provider_client_id'];
    }

    /**
     * Sets auth_token_provider_client_id
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_token_provider_client_id auth_token_provider_client_id
     *
     * @return $this
     */
    public function setAuthTokenProviderClientId($auth_token_provider_client_id)
    {
        $this->container['auth_token_provider_client_id'] = $auth_token_provider_client_id;

        return $this;
    }

    /**
     * Gets auth_token_provider_scope
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthTokenProviderScope()
    {
        return $this->container['auth_token_provider_scope'];
    }

    /**
     * Sets auth_token_provider_scope
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_token_provider_scope auth_token_provider_scope
     *
     * @return $this
     */
    public function setAuthTokenProviderScope($auth_token_provider_scope)
    {
        $this->container['auth_token_provider_scope'] = $auth_token_provider_scope;

        return $this;
    }

    /**
     * Gets auth_token_provider_reuse_access_token
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getAuthTokenProviderReuseAccessToken()
    {
        return $this->container['auth_token_provider_reuse_access_token'];
    }

    /**
     * Sets auth_token_provider_reuse_access_token
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $auth_token_provider_reuse_access_token auth_token_provider_reuse_access_token
     *
     * @return $this
     */
    public function setAuthTokenProviderReuseAccessToken($auth_token_provider_reuse_access_token)
    {
        $this->container['auth_token_provider_reuse_access_token'] = $auth_token_provider_reuse_access_token;

        return $this;
    }

    /**
     * Gets auth_token_provider_relaxed_ssl
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getAuthTokenProviderRelaxedSsl()
    {
        return $this->container['auth_token_provider_relaxed_ssl'];
    }

    /**
     * Sets auth_token_provider_relaxed_ssl
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $auth_token_provider_relaxed_ssl auth_token_provider_relaxed_ssl
     *
     * @return $this
     */
    public function setAuthTokenProviderRelaxedSsl($auth_token_provider_relaxed_ssl)
    {
        $this->container['auth_token_provider_relaxed_ssl'] = $auth_token_provider_relaxed_ssl;

        return $this;
    }

    /**
     * Gets token_request_customizer_type
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTokenRequestCustomizerType()
    {
        return $this->container['token_request_customizer_type'];
    }

    /**
     * Sets token_request_customizer_type
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $token_request_customizer_type token_request_customizer_type
     *
     * @return $this
     */
    public function setTokenRequestCustomizerType($token_request_customizer_type)
    {
        $this->container['token_request_customizer_type'] = $token_request_customizer_type;

        return $this;
    }

    /**
     * Gets auth_token_validator_type
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthTokenValidatorType()
    {
        return $this->container['auth_token_validator_type'];
    }

    /**
     * Sets auth_token_validator_type
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_token_validator_type auth_token_validator_type
     *
     * @return $this
     */
    public function setAuthTokenValidatorType($auth_token_validator_type)
    {
        $this->container['auth_token_validator_type'] = $auth_token_validator_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


