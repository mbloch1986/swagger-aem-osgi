/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties() {
    init();
}

OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::~OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::init() {
    user_mapping = new OAIConfigNodePropertyArray();
    m_user_mapping_isSet = false;
    user_default = new OAIConfigNodePropertyString();
    m_user_default_isSet = false;
    user_enable_default_mapping = new OAIConfigNodePropertyBoolean();
    m_user_enable_default_mapping_isSet = false;
    require_validation = new OAIConfigNodePropertyBoolean();
    m_require_validation_isSet = false;
}

void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::cleanup() {
    if(user_mapping != nullptr) { 
        delete user_mapping;
    }
    if(user_default != nullptr) { 
        delete user_default;
    }
    if(user_enable_default_mapping != nullptr) { 
        delete user_enable_default_mapping;
    }
    if(require_validation != nullptr) { 
        delete require_validation;
    }
}

OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties*
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&user_mapping, pJson["user.mapping"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&user_default, pJson["user.default"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&user_enable_default_mapping, pJson["user.enable.default.mapping"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&require_validation, pJson["require.validation"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::asJsonObject() {
    QJsonObject obj;
    if((user_mapping != nullptr) && (user_mapping->isSet())){
        toJsonValue(QString("user.mapping"), user_mapping, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((user_default != nullptr) && (user_default->isSet())){
        toJsonValue(QString("user.default"), user_default, obj, QString("OAIConfigNodePropertyString"));
    }
    if((user_enable_default_mapping != nullptr) && (user_enable_default_mapping->isSet())){
        toJsonValue(QString("user.enable.default.mapping"), user_enable_default_mapping, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((require_validation != nullptr) && (require_validation->isSet())){
        toJsonValue(QString("require.validation"), require_validation, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserMapping() {
    return user_mapping;
}
void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserMapping(OAIConfigNodePropertyArray* user_mapping) {
    this->user_mapping = user_mapping;
    this->m_user_mapping_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserDefault() {
    return user_default;
}
void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserDefault(OAIConfigNodePropertyString* user_default) {
    this->user_default = user_default;
    this->m_user_default_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserEnableDefaultMapping() {
    return user_enable_default_mapping;
}
void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserEnableDefaultMapping(OAIConfigNodePropertyBoolean* user_enable_default_mapping) {
    this->user_enable_default_mapping = user_enable_default_mapping;
    this->m_user_enable_default_mapping_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getRequireValidation() {
    return require_validation;
}
void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setRequireValidation(OAIConfigNodePropertyBoolean* require_validation) {
    this->require_validation = require_validation;
    this->m_require_validation_isSet = true;
}


bool
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(user_mapping != nullptr && user_mapping->isSet()){ isObjectUpdated = true; break;}
        if(user_default != nullptr && user_default->isSet()){ isObjectUpdated = true; break;}
        if(user_enable_default_mapping != nullptr && user_enable_default_mapping->isSet()){ isObjectUpdated = true; break;}
        if(require_validation != nullptr && require_validation->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

