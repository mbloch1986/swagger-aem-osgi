/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheSlingDiscoveryOakConfigProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheSlingDiscoveryOakConfigProperties_H
#define OAIOrgApacheSlingDiscoveryOakConfigProperties_H

#include <QJsonObject>


#include "OAIConfigNodePropertyArray.h"
#include "OAIConfigNodePropertyBoolean.h"
#include "OAIConfigNodePropertyInteger.h"
#include "OAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheSlingDiscoveryOakConfigProperties: public OAIObject {
public:
    OAIOrgApacheSlingDiscoveryOakConfigProperties();
    OAIOrgApacheSlingDiscoveryOakConfigProperties(QString json);
    ~OAIOrgApacheSlingDiscoveryOakConfigProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigNodePropertyInteger getConnectorPingTimeout() const;
    void setConnectorPingTimeout(const OAIConfigNodePropertyInteger &connector_ping_timeout);

    OAIConfigNodePropertyInteger getConnectorPingInterval() const;
    void setConnectorPingInterval(const OAIConfigNodePropertyInteger &connector_ping_interval);

    OAIConfigNodePropertyInteger getDiscoveryLiteCheckInterval() const;
    void setDiscoveryLiteCheckInterval(const OAIConfigNodePropertyInteger &discovery_lite_check_interval);

    OAIConfigNodePropertyInteger getClusterSyncServiceTimeout() const;
    void setClusterSyncServiceTimeout(const OAIConfigNodePropertyInteger &cluster_sync_service_timeout);

    OAIConfigNodePropertyInteger getClusterSyncServiceInterval() const;
    void setClusterSyncServiceInterval(const OAIConfigNodePropertyInteger &cluster_sync_service_interval);

    OAIConfigNodePropertyBoolean getEnableSyncToken() const;
    void setEnableSyncToken(const OAIConfigNodePropertyBoolean &enable_sync_token);

    OAIConfigNodePropertyInteger getMinEventDelay() const;
    void setMinEventDelay(const OAIConfigNodePropertyInteger &min_event_delay);

    OAIConfigNodePropertyInteger getSocketConnectTimeout() const;
    void setSocketConnectTimeout(const OAIConfigNodePropertyInteger &socket_connect_timeout);

    OAIConfigNodePropertyInteger getSoTimeout() const;
    void setSoTimeout(const OAIConfigNodePropertyInteger &so_timeout);

    OAIConfigNodePropertyArray getTopologyConnectorUrls() const;
    void setTopologyConnectorUrls(const OAIConfigNodePropertyArray &topology_connector_urls);

    OAIConfigNodePropertyArray getTopologyConnectorWhitelist() const;
    void setTopologyConnectorWhitelist(const OAIConfigNodePropertyArray &topology_connector_whitelist);

    OAIConfigNodePropertyBoolean getAutoStopLocalLoopEnabled() const;
    void setAutoStopLocalLoopEnabled(const OAIConfigNodePropertyBoolean &auto_stop_local_loop_enabled);

    OAIConfigNodePropertyBoolean getGzipConnectorRequestsEnabled() const;
    void setGzipConnectorRequestsEnabled(const OAIConfigNodePropertyBoolean &gzip_connector_requests_enabled);

    OAIConfigNodePropertyBoolean getHmacEnabled() const;
    void setHmacEnabled(const OAIConfigNodePropertyBoolean &hmac_enabled);

    OAIConfigNodePropertyBoolean getEnableEncryption() const;
    void setEnableEncryption(const OAIConfigNodePropertyBoolean &enable_encryption);

    OAIConfigNodePropertyString getSharedKey() const;
    void setSharedKey(const OAIConfigNodePropertyString &shared_key);

    OAIConfigNodePropertyInteger getHmacSharedKeyTtl() const;
    void setHmacSharedKeyTtl(const OAIConfigNodePropertyInteger &hmac_shared_key_ttl);

    OAIConfigNodePropertyString getBackoffStandbyFactor() const;
    void setBackoffStandbyFactor(const OAIConfigNodePropertyString &backoff_standby_factor);

    OAIConfigNodePropertyString getBackoffStableFactor() const;
    void setBackoffStableFactor(const OAIConfigNodePropertyString &backoff_stable_factor);

    virtual bool isSet() const override;

private:
    OAIConfigNodePropertyInteger connector_ping_timeout;
    bool m_connector_ping_timeout_isSet;

    OAIConfigNodePropertyInteger connector_ping_interval;
    bool m_connector_ping_interval_isSet;

    OAIConfigNodePropertyInteger discovery_lite_check_interval;
    bool m_discovery_lite_check_interval_isSet;

    OAIConfigNodePropertyInteger cluster_sync_service_timeout;
    bool m_cluster_sync_service_timeout_isSet;

    OAIConfigNodePropertyInteger cluster_sync_service_interval;
    bool m_cluster_sync_service_interval_isSet;

    OAIConfigNodePropertyBoolean enable_sync_token;
    bool m_enable_sync_token_isSet;

    OAIConfigNodePropertyInteger min_event_delay;
    bool m_min_event_delay_isSet;

    OAIConfigNodePropertyInteger socket_connect_timeout;
    bool m_socket_connect_timeout_isSet;

    OAIConfigNodePropertyInteger so_timeout;
    bool m_so_timeout_isSet;

    OAIConfigNodePropertyArray topology_connector_urls;
    bool m_topology_connector_urls_isSet;

    OAIConfigNodePropertyArray topology_connector_whitelist;
    bool m_topology_connector_whitelist_isSet;

    OAIConfigNodePropertyBoolean auto_stop_local_loop_enabled;
    bool m_auto_stop_local_loop_enabled_isSet;

    OAIConfigNodePropertyBoolean gzip_connector_requests_enabled;
    bool m_gzip_connector_requests_enabled_isSet;

    OAIConfigNodePropertyBoolean hmac_enabled;
    bool m_hmac_enabled_isSet;

    OAIConfigNodePropertyBoolean enable_encryption;
    bool m_enable_encryption_isSet;

    OAIConfigNodePropertyString shared_key;
    bool m_shared_key_isSet;

    OAIConfigNodePropertyInteger hmac_shared_key_ttl;
    bool m_hmac_shared_key_ttl_isSet;

    OAIConfigNodePropertyString backoff_standby_factor;
    bool m_backoff_standby_factor_isSet;

    OAIConfigNodePropertyString backoff_stable_factor;
    bool m_backoff_stable_factor_isSet;

};

}

#endif // OAIOrgApacheSlingDiscoveryOakConfigProperties_H
