/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqDamCoreImplDamEventRecorderImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreImplDamEventRecorderImplProperties :  IEquatable<ComDayCqDamCoreImplDamEventRecorderImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqDamCoreImplDamEventRecorderImplProperties" /> class.
        /// </summary>
        /// <param name="eventFilter">eventFilter.</param>
        /// <param name="eventQueueLength">eventQueueLength.</param>
        /// <param name="eventrecorderEnabled">eventrecorderEnabled.</param>
        /// <param name="eventrecorderBlacklist">eventrecorderBlacklist.</param>
        /// <param name="eventrecorderEventtypes">eventrecorderEventtypes.</param>
        public ComDayCqDamCoreImplDamEventRecorderImplProperties(ConfigNodePropertyString eventFilter = default(ConfigNodePropertyString), ConfigNodePropertyInteger eventQueueLength = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean eventrecorderEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray eventrecorderBlacklist = default(ConfigNodePropertyArray), ConfigNodePropertyDropDown eventrecorderEventtypes = default(ConfigNodePropertyDropDown))
        {
            this.EventFilter = eventFilter;
            this.EventQueueLength = eventQueueLength;
            this.EventrecorderEnabled = eventrecorderEnabled;
            this.EventrecorderBlacklist = eventrecorderBlacklist;
            this.EventrecorderEventtypes = eventrecorderEventtypes;
        }
        
        /// <summary>
        /// Gets or Sets EventFilter
        /// </summary>
        [DataMember(Name="event.filter", EmitDefaultValue=false)]
        public ConfigNodePropertyString EventFilter { get; set; }

        /// <summary>
        /// Gets or Sets EventQueueLength
        /// </summary>
        [DataMember(Name="event.queue.length", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger EventQueueLength { get; set; }

        /// <summary>
        /// Gets or Sets EventrecorderEnabled
        /// </summary>
        [DataMember(Name="eventrecorder.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EventrecorderEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EventrecorderBlacklist
        /// </summary>
        [DataMember(Name="eventrecorder.blacklist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray EventrecorderBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets EventrecorderEventtypes
        /// </summary>
        [DataMember(Name="eventrecorder.eventtypes", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown EventrecorderEventtypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreImplDamEventRecorderImplProperties {\n");
            sb.Append("  EventFilter: ").Append(EventFilter).Append("\n");
            sb.Append("  EventQueueLength: ").Append(EventQueueLength).Append("\n");
            sb.Append("  EventrecorderEnabled: ").Append(EventrecorderEnabled).Append("\n");
            sb.Append("  EventrecorderBlacklist: ").Append(EventrecorderBlacklist).Append("\n");
            sb.Append("  EventrecorderEventtypes: ").Append(EventrecorderEventtypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqDamCoreImplDamEventRecorderImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreImplDamEventRecorderImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqDamCoreImplDamEventRecorderImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreImplDamEventRecorderImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventFilter == input.EventFilter ||
                    (this.EventFilter != null &&
                    this.EventFilter.Equals(input.EventFilter))
                ) && 
                (
                    this.EventQueueLength == input.EventQueueLength ||
                    (this.EventQueueLength != null &&
                    this.EventQueueLength.Equals(input.EventQueueLength))
                ) && 
                (
                    this.EventrecorderEnabled == input.EventrecorderEnabled ||
                    (this.EventrecorderEnabled != null &&
                    this.EventrecorderEnabled.Equals(input.EventrecorderEnabled))
                ) && 
                (
                    this.EventrecorderBlacklist == input.EventrecorderBlacklist ||
                    (this.EventrecorderBlacklist != null &&
                    this.EventrecorderBlacklist.Equals(input.EventrecorderBlacklist))
                ) && 
                (
                    this.EventrecorderEventtypes == input.EventrecorderEventtypes ||
                    (this.EventrecorderEventtypes != null &&
                    this.EventrecorderEventtypes.Equals(input.EventrecorderEventtypes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventFilter != null)
                    hashCode = hashCode * 59 + this.EventFilter.GetHashCode();
                if (this.EventQueueLength != null)
                    hashCode = hashCode * 59 + this.EventQueueLength.GetHashCode();
                if (this.EventrecorderEnabled != null)
                    hashCode = hashCode * 59 + this.EventrecorderEnabled.GetHashCode();
                if (this.EventrecorderBlacklist != null)
                    hashCode = hashCode * 59 + this.EventrecorderBlacklist.GetHashCode();
                if (this.EventrecorderEventtypes != null)
                    hashCode = hashCode * 59 + this.EventrecorderEventtypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
