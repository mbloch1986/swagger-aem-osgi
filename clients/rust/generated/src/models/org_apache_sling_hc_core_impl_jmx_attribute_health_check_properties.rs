/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
  #[serde(rename = "hc.name")]
  hc_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "hc.tags")]
  hc_tags: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "hc.mbean.name")]
  hc_mbean_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "mbean.name")]
  mbean_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "attribute.name")]
  attribute_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "attribute.value.constraint")]
  attribute_value_constraint: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
  pub fn new() -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
    OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
      hc_name: None,
      hc_tags: None,
      hc_mbean_name: None,
      mbean_name: None,
      attribute_name: None,
      attribute_value_constraint: None
    }
  }

  pub fn set_hc_name(&mut self, hc_name: ::models::ConfigNodePropertyString) {
    self.hc_name = Some(hc_name);
  }

  pub fn with_hc_name(mut self, hc_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
    self.hc_name = Some(hc_name);
    self
  }

  pub fn hc_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.hc_name.as_ref()
  }

  pub fn reset_hc_name(&mut self) {
    self.hc_name = None;
  }

  pub fn set_hc_tags(&mut self, hc_tags: ::models::ConfigNodePropertyArray) {
    self.hc_tags = Some(hc_tags);
  }

  pub fn with_hc_tags(mut self, hc_tags: ::models::ConfigNodePropertyArray) -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
    self.hc_tags = Some(hc_tags);
    self
  }

  pub fn hc_tags(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.hc_tags.as_ref()
  }

  pub fn reset_hc_tags(&mut self) {
    self.hc_tags = None;
  }

  pub fn set_hc_mbean_name(&mut self, hc_mbean_name: ::models::ConfigNodePropertyString) {
    self.hc_mbean_name = Some(hc_mbean_name);
  }

  pub fn with_hc_mbean_name(mut self, hc_mbean_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
    self.hc_mbean_name = Some(hc_mbean_name);
    self
  }

  pub fn hc_mbean_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.hc_mbean_name.as_ref()
  }

  pub fn reset_hc_mbean_name(&mut self) {
    self.hc_mbean_name = None;
  }

  pub fn set_mbean_name(&mut self, mbean_name: ::models::ConfigNodePropertyString) {
    self.mbean_name = Some(mbean_name);
  }

  pub fn with_mbean_name(mut self, mbean_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
    self.mbean_name = Some(mbean_name);
    self
  }

  pub fn mbean_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.mbean_name.as_ref()
  }

  pub fn reset_mbean_name(&mut self) {
    self.mbean_name = None;
  }

  pub fn set_attribute_name(&mut self, attribute_name: ::models::ConfigNodePropertyString) {
    self.attribute_name = Some(attribute_name);
  }

  pub fn with_attribute_name(mut self, attribute_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
    self.attribute_name = Some(attribute_name);
    self
  }

  pub fn attribute_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.attribute_name.as_ref()
  }

  pub fn reset_attribute_name(&mut self) {
    self.attribute_name = None;
  }

  pub fn set_attribute_value_constraint(&mut self, attribute_value_constraint: ::models::ConfigNodePropertyString) {
    self.attribute_value_constraint = Some(attribute_value_constraint);
  }

  pub fn with_attribute_value_constraint(mut self, attribute_value_constraint: ::models::ConfigNodePropertyString) -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
    self.attribute_value_constraint = Some(attribute_value_constraint);
    self
  }

  pub fn attribute_value_constraint(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.attribute_value_constraint.as_ref()
  }

  pub fn reset_attribute_value_constraint(&mut self) {
    self.attribute_value_constraint = None;
  }

}



