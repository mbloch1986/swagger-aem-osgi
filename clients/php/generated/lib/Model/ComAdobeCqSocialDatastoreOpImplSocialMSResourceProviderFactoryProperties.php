<?php
/**
 * ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'solr_zk_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'solr_commit' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'cache_on' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'concurrency_level' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cache_start_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cache_ttl' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cache_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'solr_zk_timeout' => null,
        'solr_commit' => null,
        'cache_on' => null,
        'concurrency_level' => null,
        'cache_start_size' => null,
        'cache_ttl' => null,
        'cache_size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'solr_zk_timeout' => 'solr.zk.timeout',
        'solr_commit' => 'solr.commit',
        'cache_on' => 'cache.on',
        'concurrency_level' => 'concurrency.level',
        'cache_start_size' => 'cache.start.size',
        'cache_ttl' => 'cache.ttl',
        'cache_size' => 'cache.size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'solr_zk_timeout' => 'setSolrZkTimeout',
        'solr_commit' => 'setSolrCommit',
        'cache_on' => 'setCacheOn',
        'concurrency_level' => 'setConcurrencyLevel',
        'cache_start_size' => 'setCacheStartSize',
        'cache_ttl' => 'setCacheTtl',
        'cache_size' => 'setCacheSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'solr_zk_timeout' => 'getSolrZkTimeout',
        'solr_commit' => 'getSolrCommit',
        'cache_on' => 'getCacheOn',
        'concurrency_level' => 'getConcurrencyLevel',
        'cache_start_size' => 'getCacheStartSize',
        'cache_ttl' => 'getCacheTtl',
        'cache_size' => 'getCacheSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['solr_zk_timeout'] = isset($data['solr_zk_timeout']) ? $data['solr_zk_timeout'] : null;
        $this->container['solr_commit'] = isset($data['solr_commit']) ? $data['solr_commit'] : null;
        $this->container['cache_on'] = isset($data['cache_on']) ? $data['cache_on'] : null;
        $this->container['concurrency_level'] = isset($data['concurrency_level']) ? $data['concurrency_level'] : null;
        $this->container['cache_start_size'] = isset($data['cache_start_size']) ? $data['cache_start_size'] : null;
        $this->container['cache_ttl'] = isset($data['cache_ttl']) ? $data['cache_ttl'] : null;
        $this->container['cache_size'] = isset($data['cache_size']) ? $data['cache_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets solr_zk_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSolrZkTimeout()
    {
        return $this->container['solr_zk_timeout'];
    }

    /**
     * Sets solr_zk_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $solr_zk_timeout solr_zk_timeout
     *
     * @return $this
     */
    public function setSolrZkTimeout($solr_zk_timeout)
    {
        $this->container['solr_zk_timeout'] = $solr_zk_timeout;

        return $this;
    }

    /**
     * Gets solr_commit
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSolrCommit()
    {
        return $this->container['solr_commit'];
    }

    /**
     * Sets solr_commit
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $solr_commit solr_commit
     *
     * @return $this
     */
    public function setSolrCommit($solr_commit)
    {
        $this->container['solr_commit'] = $solr_commit;

        return $this;
    }

    /**
     * Gets cache_on
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getCacheOn()
    {
        return $this->container['cache_on'];
    }

    /**
     * Sets cache_on
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $cache_on cache_on
     *
     * @return $this
     */
    public function setCacheOn($cache_on)
    {
        $this->container['cache_on'] = $cache_on;

        return $this;
    }

    /**
     * Gets concurrency_level
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getConcurrencyLevel()
    {
        return $this->container['concurrency_level'];
    }

    /**
     * Sets concurrency_level
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $concurrency_level concurrency_level
     *
     * @return $this
     */
    public function setConcurrencyLevel($concurrency_level)
    {
        $this->container['concurrency_level'] = $concurrency_level;

        return $this;
    }

    /**
     * Gets cache_start_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getCacheStartSize()
    {
        return $this->container['cache_start_size'];
    }

    /**
     * Sets cache_start_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cache_start_size cache_start_size
     *
     * @return $this
     */
    public function setCacheStartSize($cache_start_size)
    {
        $this->container['cache_start_size'] = $cache_start_size;

        return $this;
    }

    /**
     * Gets cache_ttl
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getCacheTtl()
    {
        return $this->container['cache_ttl'];
    }

    /**
     * Sets cache_ttl
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cache_ttl cache_ttl
     *
     * @return $this
     */
    public function setCacheTtl($cache_ttl)
    {
        $this->container['cache_ttl'] = $cache_ttl;

        return $this;
    }

    /**
     * Gets cache_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getCacheSize()
    {
        return $this->container['cache_size'];
    }

    /**
     * Sets cache_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cache_size cache_size
     *
     * @return $this
     */
    public function setCacheSize($cache_size)
    {
        $this->container['cache_size'] = $cache_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


