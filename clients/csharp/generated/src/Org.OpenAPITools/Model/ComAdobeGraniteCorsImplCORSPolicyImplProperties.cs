/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteCorsImplCORSPolicyImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteCorsImplCORSPolicyImplProperties :  IEquatable<ComAdobeGraniteCorsImplCORSPolicyImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteCorsImplCORSPolicyImplProperties" /> class.
        /// </summary>
        /// <param name="alloworigin">alloworigin.</param>
        /// <param name="alloworiginregexp">alloworiginregexp.</param>
        /// <param name="allowedpaths">allowedpaths.</param>
        /// <param name="exposedheaders">exposedheaders.</param>
        /// <param name="maxage">maxage.</param>
        /// <param name="supportedheaders">supportedheaders.</param>
        /// <param name="supportedmethods">supportedmethods.</param>
        /// <param name="supportscredentials">supportscredentials.</param>
        public ComAdobeGraniteCorsImplCORSPolicyImplProperties(ConfigNodePropertyArray alloworigin = default(ConfigNodePropertyArray), ConfigNodePropertyArray alloworiginregexp = default(ConfigNodePropertyArray), ConfigNodePropertyArray allowedpaths = default(ConfigNodePropertyArray), ConfigNodePropertyArray exposedheaders = default(ConfigNodePropertyArray), ConfigNodePropertyInteger maxage = default(ConfigNodePropertyInteger), ConfigNodePropertyArray supportedheaders = default(ConfigNodePropertyArray), ConfigNodePropertyArray supportedmethods = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean supportscredentials = default(ConfigNodePropertyBoolean))
        {
            this.Alloworigin = alloworigin;
            this.Alloworiginregexp = alloworiginregexp;
            this.Allowedpaths = allowedpaths;
            this.Exposedheaders = exposedheaders;
            this.Maxage = maxage;
            this.Supportedheaders = supportedheaders;
            this.Supportedmethods = supportedmethods;
            this.Supportscredentials = supportscredentials;
        }
        
        /// <summary>
        /// Gets or Sets Alloworigin
        /// </summary>
        [DataMember(Name="alloworigin", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Alloworigin { get; set; }

        /// <summary>
        /// Gets or Sets Alloworiginregexp
        /// </summary>
        [DataMember(Name="alloworiginregexp", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Alloworiginregexp { get; set; }

        /// <summary>
        /// Gets or Sets Allowedpaths
        /// </summary>
        [DataMember(Name="allowedpaths", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Allowedpaths { get; set; }

        /// <summary>
        /// Gets or Sets Exposedheaders
        /// </summary>
        [DataMember(Name="exposedheaders", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Exposedheaders { get; set; }

        /// <summary>
        /// Gets or Sets Maxage
        /// </summary>
        [DataMember(Name="maxage", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger Maxage { get; set; }

        /// <summary>
        /// Gets or Sets Supportedheaders
        /// </summary>
        [DataMember(Name="supportedheaders", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Supportedheaders { get; set; }

        /// <summary>
        /// Gets or Sets Supportedmethods
        /// </summary>
        [DataMember(Name="supportedmethods", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Supportedmethods { get; set; }

        /// <summary>
        /// Gets or Sets Supportscredentials
        /// </summary>
        [DataMember(Name="supportscredentials", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Supportscredentials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteCorsImplCORSPolicyImplProperties {\n");
            sb.Append("  Alloworigin: ").Append(Alloworigin).Append("\n");
            sb.Append("  Alloworiginregexp: ").Append(Alloworiginregexp).Append("\n");
            sb.Append("  Allowedpaths: ").Append(Allowedpaths).Append("\n");
            sb.Append("  Exposedheaders: ").Append(Exposedheaders).Append("\n");
            sb.Append("  Maxage: ").Append(Maxage).Append("\n");
            sb.Append("  Supportedheaders: ").Append(Supportedheaders).Append("\n");
            sb.Append("  Supportedmethods: ").Append(Supportedmethods).Append("\n");
            sb.Append("  Supportscredentials: ").Append(Supportscredentials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteCorsImplCORSPolicyImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteCorsImplCORSPolicyImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteCorsImplCORSPolicyImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteCorsImplCORSPolicyImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alloworigin == input.Alloworigin ||
                    (this.Alloworigin != null &&
                    this.Alloworigin.Equals(input.Alloworigin))
                ) && 
                (
                    this.Alloworiginregexp == input.Alloworiginregexp ||
                    (this.Alloworiginregexp != null &&
                    this.Alloworiginregexp.Equals(input.Alloworiginregexp))
                ) && 
                (
                    this.Allowedpaths == input.Allowedpaths ||
                    (this.Allowedpaths != null &&
                    this.Allowedpaths.Equals(input.Allowedpaths))
                ) && 
                (
                    this.Exposedheaders == input.Exposedheaders ||
                    (this.Exposedheaders != null &&
                    this.Exposedheaders.Equals(input.Exposedheaders))
                ) && 
                (
                    this.Maxage == input.Maxage ||
                    (this.Maxage != null &&
                    this.Maxage.Equals(input.Maxage))
                ) && 
                (
                    this.Supportedheaders == input.Supportedheaders ||
                    (this.Supportedheaders != null &&
                    this.Supportedheaders.Equals(input.Supportedheaders))
                ) && 
                (
                    this.Supportedmethods == input.Supportedmethods ||
                    (this.Supportedmethods != null &&
                    this.Supportedmethods.Equals(input.Supportedmethods))
                ) && 
                (
                    this.Supportscredentials == input.Supportscredentials ||
                    (this.Supportscredentials != null &&
                    this.Supportscredentials.Equals(input.Supportscredentials))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alloworigin != null)
                    hashCode = hashCode * 59 + this.Alloworigin.GetHashCode();
                if (this.Alloworiginregexp != null)
                    hashCode = hashCode * 59 + this.Alloworiginregexp.GetHashCode();
                if (this.Allowedpaths != null)
                    hashCode = hashCode * 59 + this.Allowedpaths.GetHashCode();
                if (this.Exposedheaders != null)
                    hashCode = hashCode * 59 + this.Exposedheaders.GetHashCode();
                if (this.Maxage != null)
                    hashCode = hashCode * 59 + this.Maxage.GetHashCode();
                if (this.Supportedheaders != null)
                    hashCode = hashCode * 59 + this.Supportedheaders.GetHashCode();
                if (this.Supportedmethods != null)
                    hashCode = hashCode * 59 + this.Supportedmethods.GetHashCode();
                if (this.Supportscredentials != null)
                    hashCode = hashCode * 59 + this.Supportscredentials.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
