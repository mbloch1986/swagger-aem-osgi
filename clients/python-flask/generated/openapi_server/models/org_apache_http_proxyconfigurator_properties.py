# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_array import ConfigNodePropertyArray  # noqa: F401,E501
from openapi_server.models.config_node_property_boolean import ConfigNodePropertyBoolean  # noqa: F401,E501
from openapi_server.models.config_node_property_integer import ConfigNodePropertyInteger  # noqa: F401,E501
from openapi_server.models.config_node_property_string import ConfigNodePropertyString  # noqa: F401,E501
from openapi_server import util


class OrgApacheHttpProxyconfiguratorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, proxy_enabled: ConfigNodePropertyBoolean=None, proxy_host: ConfigNodePropertyString=None, proxy_port: ConfigNodePropertyInteger=None, proxy_user: ConfigNodePropertyString=None, proxy_password: ConfigNodePropertyString=None, proxy_exceptions: ConfigNodePropertyArray=None):  # noqa: E501
        """OrgApacheHttpProxyconfiguratorProperties - a model defined in OpenAPI

        :param proxy_enabled: The proxy_enabled of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type proxy_enabled: ConfigNodePropertyBoolean
        :param proxy_host: The proxy_host of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type proxy_host: ConfigNodePropertyString
        :param proxy_port: The proxy_port of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type proxy_port: ConfigNodePropertyInteger
        :param proxy_user: The proxy_user of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type proxy_user: ConfigNodePropertyString
        :param proxy_password: The proxy_password of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type proxy_password: ConfigNodePropertyString
        :param proxy_exceptions: The proxy_exceptions of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type proxy_exceptions: ConfigNodePropertyArray
        """
        self.openapi_types = {
            'proxy_enabled': ConfigNodePropertyBoolean,
            'proxy_host': ConfigNodePropertyString,
            'proxy_port': ConfigNodePropertyInteger,
            'proxy_user': ConfigNodePropertyString,
            'proxy_password': ConfigNodePropertyString,
            'proxy_exceptions': ConfigNodePropertyArray
        }

        self.attribute_map = {
            'proxy_enabled': 'proxy.enabled',
            'proxy_host': 'proxy.host',
            'proxy_port': 'proxy.port',
            'proxy_user': 'proxy.user',
            'proxy_password': 'proxy.password',
            'proxy_exceptions': 'proxy.exceptions'
        }

        self._proxy_enabled = proxy_enabled
        self._proxy_host = proxy_host
        self._proxy_port = proxy_port
        self._proxy_user = proxy_user
        self._proxy_password = proxy_password
        self._proxy_exceptions = proxy_exceptions

    @classmethod
    def from_dict(cls, dikt) -> 'OrgApacheHttpProxyconfiguratorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The orgApacheHttpProxyconfiguratorProperties of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :rtype: OrgApacheHttpProxyconfiguratorProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def proxy_enabled(self) -> ConfigNodePropertyBoolean:
        """Gets the proxy_enabled of this OrgApacheHttpProxyconfiguratorProperties.


        :return: The proxy_enabled of this OrgApacheHttpProxyconfiguratorProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._proxy_enabled

    @proxy_enabled.setter
    def proxy_enabled(self, proxy_enabled: ConfigNodePropertyBoolean):
        """Sets the proxy_enabled of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_enabled: The proxy_enabled of this OrgApacheHttpProxyconfiguratorProperties.
        :type proxy_enabled: ConfigNodePropertyBoolean
        """

        self._proxy_enabled = proxy_enabled

    @property
    def proxy_host(self) -> ConfigNodePropertyString:
        """Gets the proxy_host of this OrgApacheHttpProxyconfiguratorProperties.


        :return: The proxy_host of this OrgApacheHttpProxyconfiguratorProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._proxy_host

    @proxy_host.setter
    def proxy_host(self, proxy_host: ConfigNodePropertyString):
        """Sets the proxy_host of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_host: The proxy_host of this OrgApacheHttpProxyconfiguratorProperties.
        :type proxy_host: ConfigNodePropertyString
        """

        self._proxy_host = proxy_host

    @property
    def proxy_port(self) -> ConfigNodePropertyInteger:
        """Gets the proxy_port of this OrgApacheHttpProxyconfiguratorProperties.


        :return: The proxy_port of this OrgApacheHttpProxyconfiguratorProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._proxy_port

    @proxy_port.setter
    def proxy_port(self, proxy_port: ConfigNodePropertyInteger):
        """Sets the proxy_port of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_port: The proxy_port of this OrgApacheHttpProxyconfiguratorProperties.
        :type proxy_port: ConfigNodePropertyInteger
        """

        self._proxy_port = proxy_port

    @property
    def proxy_user(self) -> ConfigNodePropertyString:
        """Gets the proxy_user of this OrgApacheHttpProxyconfiguratorProperties.


        :return: The proxy_user of this OrgApacheHttpProxyconfiguratorProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._proxy_user

    @proxy_user.setter
    def proxy_user(self, proxy_user: ConfigNodePropertyString):
        """Sets the proxy_user of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_user: The proxy_user of this OrgApacheHttpProxyconfiguratorProperties.
        :type proxy_user: ConfigNodePropertyString
        """

        self._proxy_user = proxy_user

    @property
    def proxy_password(self) -> ConfigNodePropertyString:
        """Gets the proxy_password of this OrgApacheHttpProxyconfiguratorProperties.


        :return: The proxy_password of this OrgApacheHttpProxyconfiguratorProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._proxy_password

    @proxy_password.setter
    def proxy_password(self, proxy_password: ConfigNodePropertyString):
        """Sets the proxy_password of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_password: The proxy_password of this OrgApacheHttpProxyconfiguratorProperties.
        :type proxy_password: ConfigNodePropertyString
        """

        self._proxy_password = proxy_password

    @property
    def proxy_exceptions(self) -> ConfigNodePropertyArray:
        """Gets the proxy_exceptions of this OrgApacheHttpProxyconfiguratorProperties.


        :return: The proxy_exceptions of this OrgApacheHttpProxyconfiguratorProperties.
        :rtype: ConfigNodePropertyArray
        """
        return self._proxy_exceptions

    @proxy_exceptions.setter
    def proxy_exceptions(self, proxy_exceptions: ConfigNodePropertyArray):
        """Sets the proxy_exceptions of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_exceptions: The proxy_exceptions of this OrgApacheHttpProxyconfiguratorProperties.
        :type proxy_exceptions: ConfigNodePropertyArray
        """

        self._proxy_exceptions = proxy_exceptions
