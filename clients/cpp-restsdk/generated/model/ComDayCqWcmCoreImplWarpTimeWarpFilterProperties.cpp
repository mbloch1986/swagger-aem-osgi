/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmCoreImplWarpTimeWarpFilterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::ComDayCqWcmCoreImplWarpTimeWarpFilterProperties()
{
    m_Filter_orderIsSet = false;
    m_Filter_scopeIsSet = false;
}

ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::~ComDayCqWcmCoreImplWarpTimeWarpFilterProperties()
{
}

void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Filter_orderIsSet)
    {
        val[utility::conversions::to_string_t("filter.order")] = ModelBase::toJson(m_Filter_order);
    }
    if(m_Filter_scopeIsSet)
    {
        val[utility::conversions::to_string_t("filter.scope")] = ModelBase::toJson(m_Filter_scope);
    }

    return val;
}

void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("filter.order")))
    {
        if(!val[utility::conversions::to_string_t("filter.order")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("filter.order")]);
            setFilterOrder( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filter.scope")))
    {
        if(!val[utility::conversions::to_string_t("filter.scope")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("filter.scope")]);
            setFilterScope( newItem );
        }
    }
}

void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Filter_orderIsSet)
    {
        if (m_Filter_order.get())
        {
            m_Filter_order->toMultipart(multipart, utility::conversions::to_string_t("filter.order."));
        }
    }
    if(m_Filter_scopeIsSet)
    {
        if (m_Filter_scope.get())
        {
            m_Filter_scope->toMultipart(multipart, utility::conversions::to_string_t("filter.scope."));
        }
    }
}

void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("filter.order")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("filter.order")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("filter.order."));
            setFilterOrder( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter.scope")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("filter.scope")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("filter.scope."));
            setFilterScope( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::getFilterOrder() const
{
    return m_Filter_order;
}


void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::setFilterOrder(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Filter_order = value;
    m_Filter_orderIsSet = true;
}
bool ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::filterOrderIsSet() const
{
    return m_Filter_orderIsSet;
}

void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::unsetFilter_order()
{
    m_Filter_orderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::getFilterScope() const
{
    return m_Filter_scope;
}


void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::setFilterScope(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Filter_scope = value;
    m_Filter_scopeIsSet = true;
}
bool ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::filterScopeIsSet() const
{
    return m_Filter_scopeIsSet;
}

void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::unsetFilter_scope()
{
    m_Filter_scopeIsSet = false;
}

}
}
}
}

