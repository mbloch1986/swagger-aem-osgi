/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
  #[serde(rename = "mongouri")]
  mongouri: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "db")]
  db: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "socketKeepAlive")]
  socket_keep_alive: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "cache")]
  cache: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "nodeCachePercentage")]
  node_cache_percentage: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "prevDocCachePercentage")]
  prev_doc_cache_percentage: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "childrenCachePercentage")]
  children_cache_percentage: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "diffCachePercentage")]
  diff_cache_percentage: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cacheSegmentCount")]
  cache_segment_count: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cacheStackMoveDistance")]
  cache_stack_move_distance: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "blobCacheSize")]
  blob_cache_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "persistentCache")]
  persistent_cache: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "journalCache")]
  journal_cache: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "customBlobStore")]
  custom_blob_store: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "journalGCInterval")]
  journal_gc_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "journalGCMaxAge")]
  journal_gc_max_age: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "prefetchExternalChanges")]
  prefetch_external_changes: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "role")]
  role: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "versionGcMaxAgeInSecs")]
  version_gc_max_age_in_secs: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "versionGCExpression")]
  version_gc_expression: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "versionGCTimeLimitInSecs")]
  version_gc_time_limit_in_secs: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "blobGcMaxAgeInSecs")]
  blob_gc_max_age_in_secs: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "blobTrackSnapshotIntervalInSecs")]
  blob_track_snapshot_interval_in_secs: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "repository.home")]
  repository_home: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "maxReplicationLagInSecs")]
  max_replication_lag_in_secs: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "documentStoreType")]
  document_store_type: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "bundlingDisabled")]
  bundling_disabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "updateLimit")]
  update_limit: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "persistentCacheIncludes")]
  persistent_cache_includes: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "leaseCheckMode")]
  lease_check_mode: Option<::models::ConfigNodePropertyDropDown>
}

impl OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
  pub fn new() -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
      mongouri: None,
      db: None,
      socket_keep_alive: None,
      cache: None,
      node_cache_percentage: None,
      prev_doc_cache_percentage: None,
      children_cache_percentage: None,
      diff_cache_percentage: None,
      cache_segment_count: None,
      cache_stack_move_distance: None,
      blob_cache_size: None,
      persistent_cache: None,
      journal_cache: None,
      custom_blob_store: None,
      journal_gc_interval: None,
      journal_gc_max_age: None,
      prefetch_external_changes: None,
      role: None,
      version_gc_max_age_in_secs: None,
      version_gc_expression: None,
      version_gc_time_limit_in_secs: None,
      blob_gc_max_age_in_secs: None,
      blob_track_snapshot_interval_in_secs: None,
      repository_home: None,
      max_replication_lag_in_secs: None,
      document_store_type: None,
      bundling_disabled: None,
      update_limit: None,
      persistent_cache_includes: None,
      lease_check_mode: None
    }
  }

  pub fn set_mongouri(&mut self, mongouri: ::models::ConfigNodePropertyString) {
    self.mongouri = Some(mongouri);
  }

  pub fn with_mongouri(mut self, mongouri: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.mongouri = Some(mongouri);
    self
  }

  pub fn mongouri(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.mongouri.as_ref()
  }

  pub fn reset_mongouri(&mut self) {
    self.mongouri = None;
  }

  pub fn set_db(&mut self, db: ::models::ConfigNodePropertyString) {
    self.db = Some(db);
  }

  pub fn with_db(mut self, db: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.db = Some(db);
    self
  }

  pub fn db(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.db.as_ref()
  }

  pub fn reset_db(&mut self) {
    self.db = None;
  }

  pub fn set_socket_keep_alive(&mut self, socket_keep_alive: ::models::ConfigNodePropertyBoolean) {
    self.socket_keep_alive = Some(socket_keep_alive);
  }

  pub fn with_socket_keep_alive(mut self, socket_keep_alive: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.socket_keep_alive = Some(socket_keep_alive);
    self
  }

  pub fn socket_keep_alive(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.socket_keep_alive.as_ref()
  }

  pub fn reset_socket_keep_alive(&mut self) {
    self.socket_keep_alive = None;
  }

  pub fn set_cache(&mut self, cache: ::models::ConfigNodePropertyInteger) {
    self.cache = Some(cache);
  }

  pub fn with_cache(mut self, cache: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.cache = Some(cache);
    self
  }

  pub fn cache(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cache.as_ref()
  }

  pub fn reset_cache(&mut self) {
    self.cache = None;
  }

  pub fn set_node_cache_percentage(&mut self, node_cache_percentage: ::models::ConfigNodePropertyInteger) {
    self.node_cache_percentage = Some(node_cache_percentage);
  }

  pub fn with_node_cache_percentage(mut self, node_cache_percentage: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.node_cache_percentage = Some(node_cache_percentage);
    self
  }

  pub fn node_cache_percentage(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.node_cache_percentage.as_ref()
  }

  pub fn reset_node_cache_percentage(&mut self) {
    self.node_cache_percentage = None;
  }

  pub fn set_prev_doc_cache_percentage(&mut self, prev_doc_cache_percentage: ::models::ConfigNodePropertyInteger) {
    self.prev_doc_cache_percentage = Some(prev_doc_cache_percentage);
  }

  pub fn with_prev_doc_cache_percentage(mut self, prev_doc_cache_percentage: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.prev_doc_cache_percentage = Some(prev_doc_cache_percentage);
    self
  }

  pub fn prev_doc_cache_percentage(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.prev_doc_cache_percentage.as_ref()
  }

  pub fn reset_prev_doc_cache_percentage(&mut self) {
    self.prev_doc_cache_percentage = None;
  }

  pub fn set_children_cache_percentage(&mut self, children_cache_percentage: ::models::ConfigNodePropertyInteger) {
    self.children_cache_percentage = Some(children_cache_percentage);
  }

  pub fn with_children_cache_percentage(mut self, children_cache_percentage: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.children_cache_percentage = Some(children_cache_percentage);
    self
  }

  pub fn children_cache_percentage(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.children_cache_percentage.as_ref()
  }

  pub fn reset_children_cache_percentage(&mut self) {
    self.children_cache_percentage = None;
  }

  pub fn set_diff_cache_percentage(&mut self, diff_cache_percentage: ::models::ConfigNodePropertyInteger) {
    self.diff_cache_percentage = Some(diff_cache_percentage);
  }

  pub fn with_diff_cache_percentage(mut self, diff_cache_percentage: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.diff_cache_percentage = Some(diff_cache_percentage);
    self
  }

  pub fn diff_cache_percentage(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.diff_cache_percentage.as_ref()
  }

  pub fn reset_diff_cache_percentage(&mut self) {
    self.diff_cache_percentage = None;
  }

  pub fn set_cache_segment_count(&mut self, cache_segment_count: ::models::ConfigNodePropertyInteger) {
    self.cache_segment_count = Some(cache_segment_count);
  }

  pub fn with_cache_segment_count(mut self, cache_segment_count: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.cache_segment_count = Some(cache_segment_count);
    self
  }

  pub fn cache_segment_count(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cache_segment_count.as_ref()
  }

  pub fn reset_cache_segment_count(&mut self) {
    self.cache_segment_count = None;
  }

  pub fn set_cache_stack_move_distance(&mut self, cache_stack_move_distance: ::models::ConfigNodePropertyInteger) {
    self.cache_stack_move_distance = Some(cache_stack_move_distance);
  }

  pub fn with_cache_stack_move_distance(mut self, cache_stack_move_distance: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.cache_stack_move_distance = Some(cache_stack_move_distance);
    self
  }

  pub fn cache_stack_move_distance(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cache_stack_move_distance.as_ref()
  }

  pub fn reset_cache_stack_move_distance(&mut self) {
    self.cache_stack_move_distance = None;
  }

  pub fn set_blob_cache_size(&mut self, blob_cache_size: ::models::ConfigNodePropertyInteger) {
    self.blob_cache_size = Some(blob_cache_size);
  }

  pub fn with_blob_cache_size(mut self, blob_cache_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.blob_cache_size = Some(blob_cache_size);
    self
  }

  pub fn blob_cache_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.blob_cache_size.as_ref()
  }

  pub fn reset_blob_cache_size(&mut self) {
    self.blob_cache_size = None;
  }

  pub fn set_persistent_cache(&mut self, persistent_cache: ::models::ConfigNodePropertyString) {
    self.persistent_cache = Some(persistent_cache);
  }

  pub fn with_persistent_cache(mut self, persistent_cache: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.persistent_cache = Some(persistent_cache);
    self
  }

  pub fn persistent_cache(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.persistent_cache.as_ref()
  }

  pub fn reset_persistent_cache(&mut self) {
    self.persistent_cache = None;
  }

  pub fn set_journal_cache(&mut self, journal_cache: ::models::ConfigNodePropertyString) {
    self.journal_cache = Some(journal_cache);
  }

  pub fn with_journal_cache(mut self, journal_cache: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.journal_cache = Some(journal_cache);
    self
  }

  pub fn journal_cache(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.journal_cache.as_ref()
  }

  pub fn reset_journal_cache(&mut self) {
    self.journal_cache = None;
  }

  pub fn set_custom_blob_store(&mut self, custom_blob_store: ::models::ConfigNodePropertyBoolean) {
    self.custom_blob_store = Some(custom_blob_store);
  }

  pub fn with_custom_blob_store(mut self, custom_blob_store: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.custom_blob_store = Some(custom_blob_store);
    self
  }

  pub fn custom_blob_store(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.custom_blob_store.as_ref()
  }

  pub fn reset_custom_blob_store(&mut self) {
    self.custom_blob_store = None;
  }

  pub fn set_journal_gc_interval(&mut self, journal_gc_interval: ::models::ConfigNodePropertyInteger) {
    self.journal_gc_interval = Some(journal_gc_interval);
  }

  pub fn with_journal_gc_interval(mut self, journal_gc_interval: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.journal_gc_interval = Some(journal_gc_interval);
    self
  }

  pub fn journal_gc_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.journal_gc_interval.as_ref()
  }

  pub fn reset_journal_gc_interval(&mut self) {
    self.journal_gc_interval = None;
  }

  pub fn set_journal_gc_max_age(&mut self, journal_gc_max_age: ::models::ConfigNodePropertyInteger) {
    self.journal_gc_max_age = Some(journal_gc_max_age);
  }

  pub fn with_journal_gc_max_age(mut self, journal_gc_max_age: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.journal_gc_max_age = Some(journal_gc_max_age);
    self
  }

  pub fn journal_gc_max_age(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.journal_gc_max_age.as_ref()
  }

  pub fn reset_journal_gc_max_age(&mut self) {
    self.journal_gc_max_age = None;
  }

  pub fn set_prefetch_external_changes(&mut self, prefetch_external_changes: ::models::ConfigNodePropertyBoolean) {
    self.prefetch_external_changes = Some(prefetch_external_changes);
  }

  pub fn with_prefetch_external_changes(mut self, prefetch_external_changes: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.prefetch_external_changes = Some(prefetch_external_changes);
    self
  }

  pub fn prefetch_external_changes(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.prefetch_external_changes.as_ref()
  }

  pub fn reset_prefetch_external_changes(&mut self) {
    self.prefetch_external_changes = None;
  }

  pub fn set_role(&mut self, role: ::models::ConfigNodePropertyString) {
    self.role = Some(role);
  }

  pub fn with_role(mut self, role: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.role = Some(role);
    self
  }

  pub fn role(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.role.as_ref()
  }

  pub fn reset_role(&mut self) {
    self.role = None;
  }

  pub fn set_version_gc_max_age_in_secs(&mut self, version_gc_max_age_in_secs: ::models::ConfigNodePropertyInteger) {
    self.version_gc_max_age_in_secs = Some(version_gc_max_age_in_secs);
  }

  pub fn with_version_gc_max_age_in_secs(mut self, version_gc_max_age_in_secs: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.version_gc_max_age_in_secs = Some(version_gc_max_age_in_secs);
    self
  }

  pub fn version_gc_max_age_in_secs(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.version_gc_max_age_in_secs.as_ref()
  }

  pub fn reset_version_gc_max_age_in_secs(&mut self) {
    self.version_gc_max_age_in_secs = None;
  }

  pub fn set_version_gc_expression(&mut self, version_gc_expression: ::models::ConfigNodePropertyString) {
    self.version_gc_expression = Some(version_gc_expression);
  }

  pub fn with_version_gc_expression(mut self, version_gc_expression: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.version_gc_expression = Some(version_gc_expression);
    self
  }

  pub fn version_gc_expression(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.version_gc_expression.as_ref()
  }

  pub fn reset_version_gc_expression(&mut self) {
    self.version_gc_expression = None;
  }

  pub fn set_version_gc_time_limit_in_secs(&mut self, version_gc_time_limit_in_secs: ::models::ConfigNodePropertyInteger) {
    self.version_gc_time_limit_in_secs = Some(version_gc_time_limit_in_secs);
  }

  pub fn with_version_gc_time_limit_in_secs(mut self, version_gc_time_limit_in_secs: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.version_gc_time_limit_in_secs = Some(version_gc_time_limit_in_secs);
    self
  }

  pub fn version_gc_time_limit_in_secs(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.version_gc_time_limit_in_secs.as_ref()
  }

  pub fn reset_version_gc_time_limit_in_secs(&mut self) {
    self.version_gc_time_limit_in_secs = None;
  }

  pub fn set_blob_gc_max_age_in_secs(&mut self, blob_gc_max_age_in_secs: ::models::ConfigNodePropertyInteger) {
    self.blob_gc_max_age_in_secs = Some(blob_gc_max_age_in_secs);
  }

  pub fn with_blob_gc_max_age_in_secs(mut self, blob_gc_max_age_in_secs: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.blob_gc_max_age_in_secs = Some(blob_gc_max_age_in_secs);
    self
  }

  pub fn blob_gc_max_age_in_secs(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.blob_gc_max_age_in_secs.as_ref()
  }

  pub fn reset_blob_gc_max_age_in_secs(&mut self) {
    self.blob_gc_max_age_in_secs = None;
  }

  pub fn set_blob_track_snapshot_interval_in_secs(&mut self, blob_track_snapshot_interval_in_secs: ::models::ConfigNodePropertyInteger) {
    self.blob_track_snapshot_interval_in_secs = Some(blob_track_snapshot_interval_in_secs);
  }

  pub fn with_blob_track_snapshot_interval_in_secs(mut self, blob_track_snapshot_interval_in_secs: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.blob_track_snapshot_interval_in_secs = Some(blob_track_snapshot_interval_in_secs);
    self
  }

  pub fn blob_track_snapshot_interval_in_secs(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.blob_track_snapshot_interval_in_secs.as_ref()
  }

  pub fn reset_blob_track_snapshot_interval_in_secs(&mut self) {
    self.blob_track_snapshot_interval_in_secs = None;
  }

  pub fn set_repository_home(&mut self, repository_home: ::models::ConfigNodePropertyString) {
    self.repository_home = Some(repository_home);
  }

  pub fn with_repository_home(mut self, repository_home: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.repository_home = Some(repository_home);
    self
  }

  pub fn repository_home(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.repository_home.as_ref()
  }

  pub fn reset_repository_home(&mut self) {
    self.repository_home = None;
  }

  pub fn set_max_replication_lag_in_secs(&mut self, max_replication_lag_in_secs: ::models::ConfigNodePropertyInteger) {
    self.max_replication_lag_in_secs = Some(max_replication_lag_in_secs);
  }

  pub fn with_max_replication_lag_in_secs(mut self, max_replication_lag_in_secs: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.max_replication_lag_in_secs = Some(max_replication_lag_in_secs);
    self
  }

  pub fn max_replication_lag_in_secs(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_replication_lag_in_secs.as_ref()
  }

  pub fn reset_max_replication_lag_in_secs(&mut self) {
    self.max_replication_lag_in_secs = None;
  }

  pub fn set_document_store_type(&mut self, document_store_type: ::models::ConfigNodePropertyDropDown) {
    self.document_store_type = Some(document_store_type);
  }

  pub fn with_document_store_type(mut self, document_store_type: ::models::ConfigNodePropertyDropDown) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.document_store_type = Some(document_store_type);
    self
  }

  pub fn document_store_type(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.document_store_type.as_ref()
  }

  pub fn reset_document_store_type(&mut self) {
    self.document_store_type = None;
  }

  pub fn set_bundling_disabled(&mut self, bundling_disabled: ::models::ConfigNodePropertyBoolean) {
    self.bundling_disabled = Some(bundling_disabled);
  }

  pub fn with_bundling_disabled(mut self, bundling_disabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.bundling_disabled = Some(bundling_disabled);
    self
  }

  pub fn bundling_disabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.bundling_disabled.as_ref()
  }

  pub fn reset_bundling_disabled(&mut self) {
    self.bundling_disabled = None;
  }

  pub fn set_update_limit(&mut self, update_limit: ::models::ConfigNodePropertyInteger) {
    self.update_limit = Some(update_limit);
  }

  pub fn with_update_limit(mut self, update_limit: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.update_limit = Some(update_limit);
    self
  }

  pub fn update_limit(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.update_limit.as_ref()
  }

  pub fn reset_update_limit(&mut self) {
    self.update_limit = None;
  }

  pub fn set_persistent_cache_includes(&mut self, persistent_cache_includes: ::models::ConfigNodePropertyArray) {
    self.persistent_cache_includes = Some(persistent_cache_includes);
  }

  pub fn with_persistent_cache_includes(mut self, persistent_cache_includes: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.persistent_cache_includes = Some(persistent_cache_includes);
    self
  }

  pub fn persistent_cache_includes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.persistent_cache_includes.as_ref()
  }

  pub fn reset_persistent_cache_includes(&mut self) {
    self.persistent_cache_includes = None;
  }

  pub fn set_lease_check_mode(&mut self, lease_check_mode: ::models::ConfigNodePropertyDropDown) {
    self.lease_check_mode = Some(lease_check_mode);
  }

  pub fn with_lease_check_mode(mut self, lease_check_mode: ::models::ConfigNodePropertyDropDown) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    self.lease_check_mode = Some(lease_check_mode);
    self
  }

  pub fn lease_check_mode(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.lease_check_mode.as_ref()
  }

  pub fn reset_lease_check_mode(&mut self) {
    self.lease_check_mode = None;
  }

}



