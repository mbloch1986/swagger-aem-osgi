/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties()
{
    m_PathBuilder_targetIsSet = false;
    m_Suggest_basepathIsSet = false;
}

ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::~ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties()
{
}

void ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PathBuilder_targetIsSet)
    {
        val[utility::conversions::to_string_t("pathBuilder.target")] = ModelBase::toJson(m_PathBuilder_target);
    }
    if(m_Suggest_basepathIsSet)
    {
        val[utility::conversions::to_string_t("suggest.basepath")] = ModelBase::toJson(m_Suggest_basepath);
    }

    return val;
}

void ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("pathBuilder.target")))
    {
        if(!val[utility::conversions::to_string_t("pathBuilder.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pathBuilder.target")]);
            setPathBuilderTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("suggest.basepath")))
    {
        if(!val[utility::conversions::to_string_t("suggest.basepath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("suggest.basepath")]);
            setSuggestBasepath( newItem );
        }
    }
}

void ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PathBuilder_targetIsSet)
    {
        if (m_PathBuilder_target.get())
        {
            m_PathBuilder_target->toMultipart(multipart, utility::conversions::to_string_t("pathBuilder.target."));
        }
    }
    if(m_Suggest_basepathIsSet)
    {
        if (m_Suggest_basepath.get())
        {
            m_Suggest_basepath->toMultipart(multipart, utility::conversions::to_string_t("suggest.basepath."));
        }
    }
}

void ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pathBuilder.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pathBuilder.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pathBuilder.target."));
            setPathBuilderTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("suggest.basepath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("suggest.basepath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("suggest.basepath."));
            setSuggestBasepath( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::getPathBuilderTarget() const
{
    return m_PathBuilder_target;
}


void ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::setPathBuilderTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PathBuilder_target = value;
    m_PathBuilder_targetIsSet = true;
}
bool ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::pathBuilderTargetIsSet() const
{
    return m_PathBuilder_targetIsSet;
}

void ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::unsetPathBuilder_target()
{
    m_PathBuilder_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::getSuggestBasepath() const
{
    return m_Suggest_basepath;
}


void ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::setSuggestBasepath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Suggest_basepath = value;
    m_Suggest_basepathIsSet = true;
}
bool ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::suggestBasepathIsSet() const
{
    return m_Suggest_basepathIsSet;
}

void ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties::unsetSuggest_basepath()
{
    m_Suggest_basepathIsSet = false;
}

}
}
}
}

