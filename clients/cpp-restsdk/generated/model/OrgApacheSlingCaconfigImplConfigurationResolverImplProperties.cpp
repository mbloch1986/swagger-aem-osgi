/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingCaconfigImplConfigurationResolverImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::OrgApacheSlingCaconfigImplConfigurationResolverImplProperties()
{
    m_ConfigBucketNamesIsSet = false;
}

OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::~OrgApacheSlingCaconfigImplConfigurationResolverImplProperties()
{
}

void OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ConfigBucketNamesIsSet)
    {
        val[utility::conversions::to_string_t("configBucketNames")] = ModelBase::toJson(m_ConfigBucketNames);
    }

    return val;
}

void OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("configBucketNames")))
    {
        if(!val[utility::conversions::to_string_t("configBucketNames")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("configBucketNames")]);
            setConfigBucketNames( newItem );
        }
    }
}

void OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ConfigBucketNamesIsSet)
    {
        if (m_ConfigBucketNames.get())
        {
            m_ConfigBucketNames->toMultipart(multipart, utility::conversions::to_string_t("configBucketNames."));
        }
    }
}

void OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("configBucketNames")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("configBucketNames")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("configBucketNames."));
            setConfigBucketNames( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::getConfigBucketNames() const
{
    return m_ConfigBucketNames;
}


void OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::setConfigBucketNames(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_ConfigBucketNames = value;
    m_ConfigBucketNamesIsSet = true;
}
bool OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::configBucketNamesIsSet() const
{
    return m_ConfigBucketNamesIsSet;
}

void OrgApacheSlingCaconfigImplConfigurationResolverImplProperties::unsetConfigBucketNames()
{
    m_ConfigBucketNamesIsSet = false;
}

}
}
}
}

