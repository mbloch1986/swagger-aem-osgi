/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties()
{
    m_NameIsSet = false;
    m_EndpointsIsSet = false;
    m_Pull_itemsIsSet = false;
    m_PackageBuilder_targetIsSet = false;
    m_TransportSecretProvider_targetIsSet = false;
}

OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::~OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties()
{
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_EndpointsIsSet)
    {
        val[utility::conversions::to_string_t("endpoints")] = ModelBase::toJson(m_Endpoints);
    }
    if(m_Pull_itemsIsSet)
    {
        val[utility::conversions::to_string_t("pull.items")] = ModelBase::toJson(m_Pull_items);
    }
    if(m_PackageBuilder_targetIsSet)
    {
        val[utility::conversions::to_string_t("packageBuilder.target")] = ModelBase::toJson(m_PackageBuilder_target);
    }
    if(m_TransportSecretProvider_targetIsSet)
    {
        val[utility::conversions::to_string_t("transportSecretProvider.target")] = ModelBase::toJson(m_TransportSecretProvider_target);
    }

    return val;
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endpoints")))
    {
        if(!val[utility::conversions::to_string_t("endpoints")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("endpoints")]);
            setEndpoints( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pull.items")))
    {
        if(!val[utility::conversions::to_string_t("pull.items")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("pull.items")]);
            setPullItems( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("packageBuilder.target")))
    {
        if(!val[utility::conversions::to_string_t("packageBuilder.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("packageBuilder.target")]);
            setPackageBuilderTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transportSecretProvider.target")))
    {
        if(!val[utility::conversions::to_string_t("transportSecretProvider.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("transportSecretProvider.target")]);
            setTransportSecretProviderTarget( newItem );
        }
    }
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_EndpointsIsSet)
    {
        if (m_Endpoints.get())
        {
            m_Endpoints->toMultipart(multipart, utility::conversions::to_string_t("endpoints."));
        }
    }
    if(m_Pull_itemsIsSet)
    {
        if (m_Pull_items.get())
        {
            m_Pull_items->toMultipart(multipart, utility::conversions::to_string_t("pull.items."));
        }
    }
    if(m_PackageBuilder_targetIsSet)
    {
        if (m_PackageBuilder_target.get())
        {
            m_PackageBuilder_target->toMultipart(multipart, utility::conversions::to_string_t("packageBuilder.target."));
        }
    }
    if(m_TransportSecretProvider_targetIsSet)
    {
        if (m_TransportSecretProvider_target.get())
        {
            m_TransportSecretProvider_target->toMultipart(multipart, utility::conversions::to_string_t("transportSecretProvider.target."));
        }
    }
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endpoints")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("endpoints")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("endpoints."));
            setEndpoints( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pull.items")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pull.items")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pull.items."));
            setPullItems( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("packageBuilder.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("packageBuilder.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("packageBuilder.target."));
            setPackageBuilderTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transportSecretProvider.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("transportSecretProvider.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("transportSecretProvider.target."));
            setTransportSecretProviderTarget( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::getName() const
{
    return m_Name;
}


void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::getEndpoints() const
{
    return m_Endpoints;
}


void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::setEndpoints(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Endpoints = value;
    m_EndpointsIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::endpointsIsSet() const
{
    return m_EndpointsIsSet;
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::unsetEndpoints()
{
    m_EndpointsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::getPullItems() const
{
    return m_Pull_items;
}


void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::setPullItems(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Pull_items = value;
    m_Pull_itemsIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::pullItemsIsSet() const
{
    return m_Pull_itemsIsSet;
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::unsetPull_items()
{
    m_Pull_itemsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::getPackageBuilderTarget() const
{
    return m_PackageBuilder_target;
}


void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::setPackageBuilderTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PackageBuilder_target = value;
    m_PackageBuilder_targetIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::packageBuilderTargetIsSet() const
{
    return m_PackageBuilder_targetIsSet;
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::unsetPackageBuilder_target()
{
    m_PackageBuilder_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::getTransportSecretProviderTarget() const
{
    return m_TransportSecretProvider_target;
}


void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::setTransportSecretProviderTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_TransportSecretProvider_target = value;
    m_TransportSecretProvider_targetIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::transportSecretProviderTargetIsSet() const
{
    return m_TransportSecretProvider_targetIsSet;
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::unsetTransportSecretProvider_target()
{
    m_TransportSecretProvider_targetIsSet = false;
}

}
}
}
}

