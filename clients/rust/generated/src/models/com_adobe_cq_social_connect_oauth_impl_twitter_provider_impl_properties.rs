/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
  #[serde(rename = "oauth.provider.id")]
  oauth_provider_id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "oauth.cloud.config.root")]
  oauth_cloud_config_root: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "provider.config.root")]
  provider_config_root: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "provider.config.user.folder")]
  provider_config_user_folder: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "provider.config.twitter.enable.params")]
  provider_config_twitter_enable_params: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "provider.config.twitter.params")]
  provider_config_twitter_params: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "provider.config.refresh.userdata.enabled")]
  provider_config_refresh_userdata_enabled: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
  pub fn new() -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
    ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
      oauth_provider_id: None,
      oauth_cloud_config_root: None,
      provider_config_root: None,
      provider_config_user_folder: None,
      provider_config_twitter_enable_params: None,
      provider_config_twitter_params: None,
      provider_config_refresh_userdata_enabled: None
    }
  }

  pub fn set_oauth_provider_id(&mut self, oauth_provider_id: ::models::ConfigNodePropertyString) {
    self.oauth_provider_id = Some(oauth_provider_id);
  }

  pub fn with_oauth_provider_id(mut self, oauth_provider_id: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
    self.oauth_provider_id = Some(oauth_provider_id);
    self
  }

  pub fn oauth_provider_id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.oauth_provider_id.as_ref()
  }

  pub fn reset_oauth_provider_id(&mut self) {
    self.oauth_provider_id = None;
  }

  pub fn set_oauth_cloud_config_root(&mut self, oauth_cloud_config_root: ::models::ConfigNodePropertyString) {
    self.oauth_cloud_config_root = Some(oauth_cloud_config_root);
  }

  pub fn with_oauth_cloud_config_root(mut self, oauth_cloud_config_root: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
    self.oauth_cloud_config_root = Some(oauth_cloud_config_root);
    self
  }

  pub fn oauth_cloud_config_root(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.oauth_cloud_config_root.as_ref()
  }

  pub fn reset_oauth_cloud_config_root(&mut self) {
    self.oauth_cloud_config_root = None;
  }

  pub fn set_provider_config_root(&mut self, provider_config_root: ::models::ConfigNodePropertyString) {
    self.provider_config_root = Some(provider_config_root);
  }

  pub fn with_provider_config_root(mut self, provider_config_root: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
    self.provider_config_root = Some(provider_config_root);
    self
  }

  pub fn provider_config_root(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.provider_config_root.as_ref()
  }

  pub fn reset_provider_config_root(&mut self) {
    self.provider_config_root = None;
  }

  pub fn set_provider_config_user_folder(&mut self, provider_config_user_folder: ::models::ConfigNodePropertyDropDown) {
    self.provider_config_user_folder = Some(provider_config_user_folder);
  }

  pub fn with_provider_config_user_folder(mut self, provider_config_user_folder: ::models::ConfigNodePropertyDropDown) -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
    self.provider_config_user_folder = Some(provider_config_user_folder);
    self
  }

  pub fn provider_config_user_folder(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.provider_config_user_folder.as_ref()
  }

  pub fn reset_provider_config_user_folder(&mut self) {
    self.provider_config_user_folder = None;
  }

  pub fn set_provider_config_twitter_enable_params(&mut self, provider_config_twitter_enable_params: ::models::ConfigNodePropertyBoolean) {
    self.provider_config_twitter_enable_params = Some(provider_config_twitter_enable_params);
  }

  pub fn with_provider_config_twitter_enable_params(mut self, provider_config_twitter_enable_params: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
    self.provider_config_twitter_enable_params = Some(provider_config_twitter_enable_params);
    self
  }

  pub fn provider_config_twitter_enable_params(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.provider_config_twitter_enable_params.as_ref()
  }

  pub fn reset_provider_config_twitter_enable_params(&mut self) {
    self.provider_config_twitter_enable_params = None;
  }

  pub fn set_provider_config_twitter_params(&mut self, provider_config_twitter_params: ::models::ConfigNodePropertyArray) {
    self.provider_config_twitter_params = Some(provider_config_twitter_params);
  }

  pub fn with_provider_config_twitter_params(mut self, provider_config_twitter_params: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
    self.provider_config_twitter_params = Some(provider_config_twitter_params);
    self
  }

  pub fn provider_config_twitter_params(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.provider_config_twitter_params.as_ref()
  }

  pub fn reset_provider_config_twitter_params(&mut self) {
    self.provider_config_twitter_params = None;
  }

  pub fn set_provider_config_refresh_userdata_enabled(&mut self, provider_config_refresh_userdata_enabled: ::models::ConfigNodePropertyBoolean) {
    self.provider_config_refresh_userdata_enabled = Some(provider_config_refresh_userdata_enabled);
  }

  pub fn with_provider_config_refresh_userdata_enabled(mut self, provider_config_refresh_userdata_enabled: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
    self.provider_config_refresh_userdata_enabled = Some(provider_config_refresh_userdata_enabled);
    self
  }

  pub fn provider_config_refresh_userdata_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.provider_config_refresh_userdata_enabled.as_ref()
  }

  pub fn reset_provider_config_refresh_userdata_enabled(&mut self) {
    self.provider_config_refresh_userdata_enabled = None;
  }

}



