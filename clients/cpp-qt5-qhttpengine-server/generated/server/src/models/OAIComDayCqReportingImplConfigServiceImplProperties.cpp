/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqReportingImplConfigServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqReportingImplConfigServiceImplProperties::OAIComDayCqReportingImplConfigServiceImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqReportingImplConfigServiceImplProperties::OAIComDayCqReportingImplConfigServiceImplProperties() {
    this->init();
}

OAIComDayCqReportingImplConfigServiceImplProperties::~OAIComDayCqReportingImplConfigServiceImplProperties() {
    
}

void
OAIComDayCqReportingImplConfigServiceImplProperties::init() {
    m_repconf_timezone_isSet = false;
    m_repconf_locale_isSet = false;
    m_repconf_snapshots_isSet = false;
    m_repconf_repdir_isSet = false;
    m_repconf_hourofday_isSet = false;
    m_repconf_minofhour_isSet = false;
    m_repconf_maxrows_isSet = false;
    m_repconf_fakedata_isSet = false;
    m_repconf_snapshotuser_isSet = false;
    m_repconf_enforcesnapshotuser_isSet = false;
}

void
OAIComDayCqReportingImplConfigServiceImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqReportingImplConfigServiceImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(repconf_timezone, json[QString("repconf.timezone")]);
    
    ::OpenAPI::fromJsonValue(repconf_locale, json[QString("repconf.locale")]);
    
    ::OpenAPI::fromJsonValue(repconf_snapshots, json[QString("repconf.snapshots")]);
    
    ::OpenAPI::fromJsonValue(repconf_repdir, json[QString("repconf.repdir")]);
    
    ::OpenAPI::fromJsonValue(repconf_hourofday, json[QString("repconf.hourofday")]);
    
    ::OpenAPI::fromJsonValue(repconf_minofhour, json[QString("repconf.minofhour")]);
    
    ::OpenAPI::fromJsonValue(repconf_maxrows, json[QString("repconf.maxrows")]);
    
    ::OpenAPI::fromJsonValue(repconf_fakedata, json[QString("repconf.fakedata")]);
    
    ::OpenAPI::fromJsonValue(repconf_snapshotuser, json[QString("repconf.snapshotuser")]);
    
    ::OpenAPI::fromJsonValue(repconf_enforcesnapshotuser, json[QString("repconf.enforcesnapshotuser")]);
    
}

QString
OAIComDayCqReportingImplConfigServiceImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqReportingImplConfigServiceImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(repconf_timezone.isSet()){
        obj.insert(QString("repconf.timezone"), ::OpenAPI::toJsonValue(repconf_timezone));
    }
	if(repconf_locale.isSet()){
        obj.insert(QString("repconf.locale"), ::OpenAPI::toJsonValue(repconf_locale));
    }
	if(repconf_snapshots.isSet()){
        obj.insert(QString("repconf.snapshots"), ::OpenAPI::toJsonValue(repconf_snapshots));
    }
	if(repconf_repdir.isSet()){
        obj.insert(QString("repconf.repdir"), ::OpenAPI::toJsonValue(repconf_repdir));
    }
	if(repconf_hourofday.isSet()){
        obj.insert(QString("repconf.hourofday"), ::OpenAPI::toJsonValue(repconf_hourofday));
    }
	if(repconf_minofhour.isSet()){
        obj.insert(QString("repconf.minofhour"), ::OpenAPI::toJsonValue(repconf_minofhour));
    }
	if(repconf_maxrows.isSet()){
        obj.insert(QString("repconf.maxrows"), ::OpenAPI::toJsonValue(repconf_maxrows));
    }
	if(repconf_fakedata.isSet()){
        obj.insert(QString("repconf.fakedata"), ::OpenAPI::toJsonValue(repconf_fakedata));
    }
	if(repconf_snapshotuser.isSet()){
        obj.insert(QString("repconf.snapshotuser"), ::OpenAPI::toJsonValue(repconf_snapshotuser));
    }
	if(repconf_enforcesnapshotuser.isSet()){
        obj.insert(QString("repconf.enforcesnapshotuser"), ::OpenAPI::toJsonValue(repconf_enforcesnapshotuser));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfTimezone() const {
    return repconf_timezone;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfTimezone(const OAIConfigNodePropertyString &repconf_timezone) {
    this->repconf_timezone = repconf_timezone;
    this->m_repconf_timezone_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfLocale() const {
    return repconf_locale;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfLocale(const OAIConfigNodePropertyString &repconf_locale) {
    this->repconf_locale = repconf_locale;
    this->m_repconf_locale_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfSnapshots() const {
    return repconf_snapshots;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfSnapshots(const OAIConfigNodePropertyString &repconf_snapshots) {
    this->repconf_snapshots = repconf_snapshots;
    this->m_repconf_snapshots_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfRepdir() const {
    return repconf_repdir;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfRepdir(const OAIConfigNodePropertyString &repconf_repdir) {
    this->repconf_repdir = repconf_repdir;
    this->m_repconf_repdir_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfHourofday() const {
    return repconf_hourofday;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfHourofday(const OAIConfigNodePropertyInteger &repconf_hourofday) {
    this->repconf_hourofday = repconf_hourofday;
    this->m_repconf_hourofday_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfMinofhour() const {
    return repconf_minofhour;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfMinofhour(const OAIConfigNodePropertyInteger &repconf_minofhour) {
    this->repconf_minofhour = repconf_minofhour;
    this->m_repconf_minofhour_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfMaxrows() const {
    return repconf_maxrows;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfMaxrows(const OAIConfigNodePropertyInteger &repconf_maxrows) {
    this->repconf_maxrows = repconf_maxrows;
    this->m_repconf_maxrows_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfFakedata() const {
    return repconf_fakedata;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfFakedata(const OAIConfigNodePropertyBoolean &repconf_fakedata) {
    this->repconf_fakedata = repconf_fakedata;
    this->m_repconf_fakedata_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfSnapshotuser() const {
    return repconf_snapshotuser;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfSnapshotuser(const OAIConfigNodePropertyString &repconf_snapshotuser) {
    this->repconf_snapshotuser = repconf_snapshotuser;
    this->m_repconf_snapshotuser_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfEnforcesnapshotuser() const {
    return repconf_enforcesnapshotuser;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfEnforcesnapshotuser(const OAIConfigNodePropertyBoolean &repconf_enforcesnapshotuser) {
    this->repconf_enforcesnapshotuser = repconf_enforcesnapshotuser;
    this->m_repconf_enforcesnapshotuser_isSet = true;
}


bool
OAIComDayCqReportingImplConfigServiceImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(repconf_timezone.isSet()){ isObjectUpdated = true; break;}
    
        if(repconf_locale.isSet()){ isObjectUpdated = true; break;}
    
        if(repconf_snapshots.isSet()){ isObjectUpdated = true; break;}
    
        if(repconf_repdir.isSet()){ isObjectUpdated = true; break;}
    
        if(repconf_hourofday.isSet()){ isObjectUpdated = true; break;}
    
        if(repconf_minofhour.isSet()){ isObjectUpdated = true; break;}
    
        if(repconf_maxrows.isSet()){ isObjectUpdated = true; break;}
    
        if(repconf_fakedata.isSet()){ isObjectUpdated = true; break;}
    
        if(repconf_snapshotuser.isSet()){ isObjectUpdated = true; break;}
    
        if(repconf_enforcesnapshotuser.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

