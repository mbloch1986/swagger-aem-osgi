/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties()
{
    m_NumberOfDaysIsSet = false;
    m_AgeOfFileIsSet = false;
}

ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::~ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties()
{
}

void ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NumberOfDaysIsSet)
    {
        val[utility::conversions::to_string_t("numberOfDays")] = ModelBase::toJson(m_NumberOfDays);
    }
    if(m_AgeOfFileIsSet)
    {
        val[utility::conversions::to_string_t("ageOfFile")] = ModelBase::toJson(m_AgeOfFile);
    }

    return val;
}

void ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("numberOfDays")))
    {
        if(!val[utility::conversions::to_string_t("numberOfDays")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("numberOfDays")]);
            setNumberOfDays( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ageOfFile")))
    {
        if(!val[utility::conversions::to_string_t("ageOfFile")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("ageOfFile")]);
            setAgeOfFile( newItem );
        }
    }
}

void ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NumberOfDaysIsSet)
    {
        if (m_NumberOfDays.get())
        {
            m_NumberOfDays->toMultipart(multipart, utility::conversions::to_string_t("numberOfDays."));
        }
    }
    if(m_AgeOfFileIsSet)
    {
        if (m_AgeOfFile.get())
        {
            m_AgeOfFile->toMultipart(multipart, utility::conversions::to_string_t("ageOfFile."));
        }
    }
}

void ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("numberOfDays")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("numberOfDays")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("numberOfDays."));
            setNumberOfDays( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ageOfFile")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ageOfFile")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ageOfFile."));
            setAgeOfFile( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::getNumberOfDays() const
{
    return m_NumberOfDays;
}


void ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::setNumberOfDays(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_NumberOfDays = value;
    m_NumberOfDaysIsSet = true;
}
bool ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::numberOfDaysIsSet() const
{
    return m_NumberOfDaysIsSet;
}

void ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::unsetNumberOfDays()
{
    m_NumberOfDaysIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::getAgeOfFile() const
{
    return m_AgeOfFile;
}


void ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::setAgeOfFile(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_AgeOfFile = value;
    m_AgeOfFileIsSet = true;
}
bool ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::ageOfFileIsSet() const
{
    return m_AgeOfFileIsSet;
}

void ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties::unsetAgeOfFile()
{
    m_AgeOfFileIsSet = false;
}

}
}
}
}

