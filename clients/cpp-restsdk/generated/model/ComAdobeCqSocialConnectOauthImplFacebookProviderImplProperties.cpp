/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties()
{
    m_Oauth_provider_idIsSet = false;
    m_Oauth_cloud_config_rootIsSet = false;
    m_Provider_config_rootIsSet = false;
    m_Provider_config_create_tags_enabledIsSet = false;
    m_Provider_config_user_folderIsSet = false;
    m_Provider_config_facebook_fetch_fieldsIsSet = false;
    m_Provider_config_facebook_fieldsIsSet = false;
    m_Provider_config_refresh_userdata_enabledIsSet = false;
}

ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::~ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties()
{
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Oauth_provider_idIsSet)
    {
        val[utility::conversions::to_string_t("oauth.provider.id")] = ModelBase::toJson(m_Oauth_provider_id);
    }
    if(m_Oauth_cloud_config_rootIsSet)
    {
        val[utility::conversions::to_string_t("oauth.cloud.config.root")] = ModelBase::toJson(m_Oauth_cloud_config_root);
    }
    if(m_Provider_config_rootIsSet)
    {
        val[utility::conversions::to_string_t("provider.config.root")] = ModelBase::toJson(m_Provider_config_root);
    }
    if(m_Provider_config_create_tags_enabledIsSet)
    {
        val[utility::conversions::to_string_t("provider.config.create.tags.enabled")] = ModelBase::toJson(m_Provider_config_create_tags_enabled);
    }
    if(m_Provider_config_user_folderIsSet)
    {
        val[utility::conversions::to_string_t("provider.config.user.folder")] = ModelBase::toJson(m_Provider_config_user_folder);
    }
    if(m_Provider_config_facebook_fetch_fieldsIsSet)
    {
        val[utility::conversions::to_string_t("provider.config.facebook.fetch.fields")] = ModelBase::toJson(m_Provider_config_facebook_fetch_fields);
    }
    if(m_Provider_config_facebook_fieldsIsSet)
    {
        val[utility::conversions::to_string_t("provider.config.facebook.fields")] = ModelBase::toJson(m_Provider_config_facebook_fields);
    }
    if(m_Provider_config_refresh_userdata_enabledIsSet)
    {
        val[utility::conversions::to_string_t("provider.config.refresh.userdata.enabled")] = ModelBase::toJson(m_Provider_config_refresh_userdata_enabled);
    }

    return val;
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("oauth.provider.id")))
    {
        if(!val[utility::conversions::to_string_t("oauth.provider.id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.provider.id")]);
            setOauthProviderId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.cloud.config.root")))
    {
        if(!val[utility::conversions::to_string_t("oauth.cloud.config.root")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.cloud.config.root")]);
            setOauthCloudConfigRoot( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provider.config.root")))
    {
        if(!val[utility::conversions::to_string_t("provider.config.root")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("provider.config.root")]);
            setProviderConfigRoot( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provider.config.create.tags.enabled")))
    {
        if(!val[utility::conversions::to_string_t("provider.config.create.tags.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("provider.config.create.tags.enabled")]);
            setProviderConfigCreateTagsEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provider.config.user.folder")))
    {
        if(!val[utility::conversions::to_string_t("provider.config.user.folder")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("provider.config.user.folder")]);
            setProviderConfigUserFolder( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provider.config.facebook.fetch.fields")))
    {
        if(!val[utility::conversions::to_string_t("provider.config.facebook.fetch.fields")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("provider.config.facebook.fetch.fields")]);
            setProviderConfigFacebookFetchFields( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provider.config.facebook.fields")))
    {
        if(!val[utility::conversions::to_string_t("provider.config.facebook.fields")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("provider.config.facebook.fields")]);
            setProviderConfigFacebookFields( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provider.config.refresh.userdata.enabled")))
    {
        if(!val[utility::conversions::to_string_t("provider.config.refresh.userdata.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("provider.config.refresh.userdata.enabled")]);
            setProviderConfigRefreshUserdataEnabled( newItem );
        }
    }
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Oauth_provider_idIsSet)
    {
        if (m_Oauth_provider_id.get())
        {
            m_Oauth_provider_id->toMultipart(multipart, utility::conversions::to_string_t("oauth.provider.id."));
        }
    }
    if(m_Oauth_cloud_config_rootIsSet)
    {
        if (m_Oauth_cloud_config_root.get())
        {
            m_Oauth_cloud_config_root->toMultipart(multipart, utility::conversions::to_string_t("oauth.cloud.config.root."));
        }
    }
    if(m_Provider_config_rootIsSet)
    {
        if (m_Provider_config_root.get())
        {
            m_Provider_config_root->toMultipart(multipart, utility::conversions::to_string_t("provider.config.root."));
        }
    }
    if(m_Provider_config_create_tags_enabledIsSet)
    {
        if (m_Provider_config_create_tags_enabled.get())
        {
            m_Provider_config_create_tags_enabled->toMultipart(multipart, utility::conversions::to_string_t("provider.config.create.tags.enabled."));
        }
    }
    if(m_Provider_config_user_folderIsSet)
    {
        if (m_Provider_config_user_folder.get())
        {
            m_Provider_config_user_folder->toMultipart(multipart, utility::conversions::to_string_t("provider.config.user.folder."));
        }
    }
    if(m_Provider_config_facebook_fetch_fieldsIsSet)
    {
        if (m_Provider_config_facebook_fetch_fields.get())
        {
            m_Provider_config_facebook_fetch_fields->toMultipart(multipart, utility::conversions::to_string_t("provider.config.facebook.fetch.fields."));
        }
    }
    if(m_Provider_config_facebook_fieldsIsSet)
    {
        if (m_Provider_config_facebook_fields.get())
        {
            m_Provider_config_facebook_fields->toMultipart(multipart, utility::conversions::to_string_t("provider.config.facebook.fields."));
        }
    }
    if(m_Provider_config_refresh_userdata_enabledIsSet)
    {
        if (m_Provider_config_refresh_userdata_enabled.get())
        {
            m_Provider_config_refresh_userdata_enabled->toMultipart(multipart, utility::conversions::to_string_t("provider.config.refresh.userdata.enabled."));
        }
    }
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.provider.id."));
            setOauthProviderId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.cloud.config.root")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.cloud.config.root")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.cloud.config.root."));
            setOauthCloudConfigRoot( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provider.config.root")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("provider.config.root")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("provider.config.root."));
            setProviderConfigRoot( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provider.config.create.tags.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("provider.config.create.tags.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("provider.config.create.tags.enabled."));
            setProviderConfigCreateTagsEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provider.config.user.folder")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("provider.config.user.folder")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("provider.config.user.folder."));
            setProviderConfigUserFolder( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provider.config.facebook.fetch.fields")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("provider.config.facebook.fetch.fields")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("provider.config.facebook.fetch.fields."));
            setProviderConfigFacebookFetchFields( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provider.config.facebook.fields")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("provider.config.facebook.fields")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("provider.config.facebook.fields."));
            setProviderConfigFacebookFields( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provider.config.refresh.userdata.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("provider.config.refresh.userdata.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("provider.config.refresh.userdata.enabled."));
            setProviderConfigRefreshUserdataEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getOauthProviderId() const
{
    return m_Oauth_provider_id;
}


void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setOauthProviderId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_provider_id = value;
    m_Oauth_provider_idIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::oauthProviderIdIsSet() const
{
    return m_Oauth_provider_idIsSet;
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::unsetOauth_provider_id()
{
    m_Oauth_provider_idIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getOauthCloudConfigRoot() const
{
    return m_Oauth_cloud_config_root;
}


void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setOauthCloudConfigRoot(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_cloud_config_root = value;
    m_Oauth_cloud_config_rootIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::oauthCloudConfigRootIsSet() const
{
    return m_Oauth_cloud_config_rootIsSet;
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::unsetOauth_cloud_config_root()
{
    m_Oauth_cloud_config_rootIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigRoot() const
{
    return m_Provider_config_root;
}


void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigRoot(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Provider_config_root = value;
    m_Provider_config_rootIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::providerConfigRootIsSet() const
{
    return m_Provider_config_rootIsSet;
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::unsetProvider_config_root()
{
    m_Provider_config_rootIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigCreateTagsEnabled() const
{
    return m_Provider_config_create_tags_enabled;
}


void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigCreateTagsEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Provider_config_create_tags_enabled = value;
    m_Provider_config_create_tags_enabledIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::providerConfigCreateTagsEnabledIsSet() const
{
    return m_Provider_config_create_tags_enabledIsSet;
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::unsetProvider_config_create_tags_enabled()
{
    m_Provider_config_create_tags_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigUserFolder() const
{
    return m_Provider_config_user_folder;
}


void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigUserFolder(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Provider_config_user_folder = value;
    m_Provider_config_user_folderIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::providerConfigUserFolderIsSet() const
{
    return m_Provider_config_user_folderIsSet;
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::unsetProvider_config_user_folder()
{
    m_Provider_config_user_folderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigFacebookFetchFields() const
{
    return m_Provider_config_facebook_fetch_fields;
}


void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigFacebookFetchFields(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Provider_config_facebook_fetch_fields = value;
    m_Provider_config_facebook_fetch_fieldsIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::providerConfigFacebookFetchFieldsIsSet() const
{
    return m_Provider_config_facebook_fetch_fieldsIsSet;
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::unsetProvider_config_facebook_fetch_fields()
{
    m_Provider_config_facebook_fetch_fieldsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigFacebookFields() const
{
    return m_Provider_config_facebook_fields;
}


void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigFacebookFields(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Provider_config_facebook_fields = value;
    m_Provider_config_facebook_fieldsIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::providerConfigFacebookFieldsIsSet() const
{
    return m_Provider_config_facebook_fieldsIsSet;
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::unsetProvider_config_facebook_fields()
{
    m_Provider_config_facebook_fieldsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigRefreshUserdataEnabled() const
{
    return m_Provider_config_refresh_userdata_enabled;
}


void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigRefreshUserdataEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Provider_config_refresh_userdata_enabled = value;
    m_Provider_config_refresh_userdata_enabledIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::providerConfigRefreshUserdataEnabledIsSet() const
{
    return m_Provider_config_refresh_userdata_enabledIsSet;
}

void ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::unsetProvider_config_refresh_userdata_enabled()
{
    m_Provider_config_refresh_userdata_enabledIsSet = false;
}

}
}
}
}

