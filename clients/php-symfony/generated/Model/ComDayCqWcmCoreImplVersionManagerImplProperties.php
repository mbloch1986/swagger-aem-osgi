<?php
/**
 * ComDayCqWcmCoreImplVersionManagerImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ComDayCqWcmCoreImplVersionManagerImplProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class ComDayCqWcmCoreImplVersionManagerImplProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("versionmanager.createVersionOnActivation")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $versionmanagerCreateVersionOnActivation;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("versionmanager.purgingEnabled")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $versionmanagerPurgingEnabled;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("versionmanager.purgePaths")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $versionmanagerPurgePaths;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("versionmanager.ivPaths")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $versionmanagerIvPaths;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("versionmanager.maxAgeDays")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $versionmanagerMaxAgeDays;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("versionmanager.maxNumberVersions")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $versionmanagerMaxNumberVersions;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("versionmanager.minNumberVersions")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $versionmanagerMinNumberVersions;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->versionmanagerCreateVersionOnActivation = isset($data['versionmanagerCreateVersionOnActivation']) ? $data['versionmanagerCreateVersionOnActivation'] : null;
        $this->versionmanagerPurgingEnabled = isset($data['versionmanagerPurgingEnabled']) ? $data['versionmanagerPurgingEnabled'] : null;
        $this->versionmanagerPurgePaths = isset($data['versionmanagerPurgePaths']) ? $data['versionmanagerPurgePaths'] : null;
        $this->versionmanagerIvPaths = isset($data['versionmanagerIvPaths']) ? $data['versionmanagerIvPaths'] : null;
        $this->versionmanagerMaxAgeDays = isset($data['versionmanagerMaxAgeDays']) ? $data['versionmanagerMaxAgeDays'] : null;
        $this->versionmanagerMaxNumberVersions = isset($data['versionmanagerMaxNumberVersions']) ? $data['versionmanagerMaxNumberVersions'] : null;
        $this->versionmanagerMinNumberVersions = isset($data['versionmanagerMinNumberVersions']) ? $data['versionmanagerMinNumberVersions'] : null;
    }

    /**
     * Gets versionmanagerCreateVersionOnActivation.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getVersionmanagerCreateVersionOnActivation()
    {
        return $this->versionmanagerCreateVersionOnActivation;
    }

    /**
     * Sets versionmanagerCreateVersionOnActivation.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $versionmanagerCreateVersionOnActivation
     *
     * @return $this
     */
    public function setVersionmanagerCreateVersionOnActivation(ConfigNodePropertyBoolean $versionmanagerCreateVersionOnActivation = null)
    {
        $this->versionmanagerCreateVersionOnActivation = $versionmanagerCreateVersionOnActivation;

        return $this;
    }

    /**
     * Gets versionmanagerPurgingEnabled.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getVersionmanagerPurgingEnabled()
    {
        return $this->versionmanagerPurgingEnabled;
    }

    /**
     * Sets versionmanagerPurgingEnabled.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $versionmanagerPurgingEnabled
     *
     * @return $this
     */
    public function setVersionmanagerPurgingEnabled(ConfigNodePropertyBoolean $versionmanagerPurgingEnabled = null)
    {
        $this->versionmanagerPurgingEnabled = $versionmanagerPurgingEnabled;

        return $this;
    }

    /**
     * Gets versionmanagerPurgePaths.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getVersionmanagerPurgePaths()
    {
        return $this->versionmanagerPurgePaths;
    }

    /**
     * Sets versionmanagerPurgePaths.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $versionmanagerPurgePaths
     *
     * @return $this
     */
    public function setVersionmanagerPurgePaths(ConfigNodePropertyArray $versionmanagerPurgePaths = null)
    {
        $this->versionmanagerPurgePaths = $versionmanagerPurgePaths;

        return $this;
    }

    /**
     * Gets versionmanagerIvPaths.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getVersionmanagerIvPaths()
    {
        return $this->versionmanagerIvPaths;
    }

    /**
     * Sets versionmanagerIvPaths.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $versionmanagerIvPaths
     *
     * @return $this
     */
    public function setVersionmanagerIvPaths(ConfigNodePropertyArray $versionmanagerIvPaths = null)
    {
        $this->versionmanagerIvPaths = $versionmanagerIvPaths;

        return $this;
    }

    /**
     * Gets versionmanagerMaxAgeDays.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getVersionmanagerMaxAgeDays()
    {
        return $this->versionmanagerMaxAgeDays;
    }

    /**
     * Sets versionmanagerMaxAgeDays.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $versionmanagerMaxAgeDays
     *
     * @return $this
     */
    public function setVersionmanagerMaxAgeDays(ConfigNodePropertyInteger $versionmanagerMaxAgeDays = null)
    {
        $this->versionmanagerMaxAgeDays = $versionmanagerMaxAgeDays;

        return $this;
    }

    /**
     * Gets versionmanagerMaxNumberVersions.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getVersionmanagerMaxNumberVersions()
    {
        return $this->versionmanagerMaxNumberVersions;
    }

    /**
     * Sets versionmanagerMaxNumberVersions.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $versionmanagerMaxNumberVersions
     *
     * @return $this
     */
    public function setVersionmanagerMaxNumberVersions(ConfigNodePropertyInteger $versionmanagerMaxNumberVersions = null)
    {
        $this->versionmanagerMaxNumberVersions = $versionmanagerMaxNumberVersions;

        return $this;
    }

    /**
     * Gets versionmanagerMinNumberVersions.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getVersionmanagerMinNumberVersions()
    {
        return $this->versionmanagerMinNumberVersions;
    }

    /**
     * Sets versionmanagerMinNumberVersions.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $versionmanagerMinNumberVersions
     *
     * @return $this
     */
    public function setVersionmanagerMinNumberVersions(ConfigNodePropertyInteger $versionmanagerMinNumberVersions = null)
    {
        $this->versionmanagerMinNumberVersions = $versionmanagerMinNumberVersions;

        return $this;
    }
}


