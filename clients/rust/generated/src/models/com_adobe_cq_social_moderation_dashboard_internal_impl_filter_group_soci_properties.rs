/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties {
  #[serde(rename = "resourceType.filters")]
  resource_type_filters: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "priority")]
  priority: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties {
  pub fn new() -> ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties {
    ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties {
      resource_type_filters: None,
      priority: None
    }
  }

  pub fn set_resource_type_filters(&mut self, resource_type_filters: ::models::ConfigNodePropertyArray) {
    self.resource_type_filters = Some(resource_type_filters);
  }

  pub fn with_resource_type_filters(mut self, resource_type_filters: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties {
    self.resource_type_filters = Some(resource_type_filters);
    self
  }

  pub fn resource_type_filters(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.resource_type_filters.as_ref()
  }

  pub fn reset_resource_type_filters(&mut self) {
    self.resource_type_filters = None;
  }

  pub fn set_priority(&mut self, priority: ::models::ConfigNodePropertyInteger) {
    self.priority = Some(priority);
  }

  pub fn with_priority(mut self, priority: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties {
    self.priority = Some(priority);
    self
  }

  pub fn priority(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.priority.as_ref()
  }

  pub fn reset_priority(&mut self) {
    self.priority = None;
  }

}



