/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
  #[serde(rename = "cq.contentsync.pathrewritertransformer.mapping.links")]
  cq_contentsync_pathrewritertransformer_mapping_links: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cq.contentsync.pathrewritertransformer.mapping.clientlibs")]
  cq_contentsync_pathrewritertransformer_mapping_clientlibs: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cq.contentsync.pathrewritertransformer.mapping.images")]
  cq_contentsync_pathrewritertransformer_mapping_images: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cq.contentsync.pathrewritertransformer.attribute.pattern")]
  cq_contentsync_pathrewritertransformer_attribute_pattern: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cq.contentsync.pathrewritertransformer.clientlibrary.pattern")]
  cq_contentsync_pathrewritertransformer_clientlibrary_pattern: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cq.contentsync.pathrewritertransformer.clientlibrary.replace")]
  cq_contentsync_pathrewritertransformer_clientlibrary_replace: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
  pub fn new() -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
    ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
      cq_contentsync_pathrewritertransformer_mapping_links: None,
      cq_contentsync_pathrewritertransformer_mapping_clientlibs: None,
      cq_contentsync_pathrewritertransformer_mapping_images: None,
      cq_contentsync_pathrewritertransformer_attribute_pattern: None,
      cq_contentsync_pathrewritertransformer_clientlibrary_pattern: None,
      cq_contentsync_pathrewritertransformer_clientlibrary_replace: None
    }
  }

  pub fn set_cq_contentsync_pathrewritertransformer_mapping_links(&mut self, cq_contentsync_pathrewritertransformer_mapping_links: ::models::ConfigNodePropertyArray) {
    self.cq_contentsync_pathrewritertransformer_mapping_links = Some(cq_contentsync_pathrewritertransformer_mapping_links);
  }

  pub fn with_cq_contentsync_pathrewritertransformer_mapping_links(mut self, cq_contentsync_pathrewritertransformer_mapping_links: ::models::ConfigNodePropertyArray) -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
    self.cq_contentsync_pathrewritertransformer_mapping_links = Some(cq_contentsync_pathrewritertransformer_mapping_links);
    self
  }

  pub fn cq_contentsync_pathrewritertransformer_mapping_links(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cq_contentsync_pathrewritertransformer_mapping_links.as_ref()
  }

  pub fn reset_cq_contentsync_pathrewritertransformer_mapping_links(&mut self) {
    self.cq_contentsync_pathrewritertransformer_mapping_links = None;
  }

  pub fn set_cq_contentsync_pathrewritertransformer_mapping_clientlibs(&mut self, cq_contentsync_pathrewritertransformer_mapping_clientlibs: ::models::ConfigNodePropertyArray) {
    self.cq_contentsync_pathrewritertransformer_mapping_clientlibs = Some(cq_contentsync_pathrewritertransformer_mapping_clientlibs);
  }

  pub fn with_cq_contentsync_pathrewritertransformer_mapping_clientlibs(mut self, cq_contentsync_pathrewritertransformer_mapping_clientlibs: ::models::ConfigNodePropertyArray) -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
    self.cq_contentsync_pathrewritertransformer_mapping_clientlibs = Some(cq_contentsync_pathrewritertransformer_mapping_clientlibs);
    self
  }

  pub fn cq_contentsync_pathrewritertransformer_mapping_clientlibs(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cq_contentsync_pathrewritertransformer_mapping_clientlibs.as_ref()
  }

  pub fn reset_cq_contentsync_pathrewritertransformer_mapping_clientlibs(&mut self) {
    self.cq_contentsync_pathrewritertransformer_mapping_clientlibs = None;
  }

  pub fn set_cq_contentsync_pathrewritertransformer_mapping_images(&mut self, cq_contentsync_pathrewritertransformer_mapping_images: ::models::ConfigNodePropertyArray) {
    self.cq_contentsync_pathrewritertransformer_mapping_images = Some(cq_contentsync_pathrewritertransformer_mapping_images);
  }

  pub fn with_cq_contentsync_pathrewritertransformer_mapping_images(mut self, cq_contentsync_pathrewritertransformer_mapping_images: ::models::ConfigNodePropertyArray) -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
    self.cq_contentsync_pathrewritertransformer_mapping_images = Some(cq_contentsync_pathrewritertransformer_mapping_images);
    self
  }

  pub fn cq_contentsync_pathrewritertransformer_mapping_images(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cq_contentsync_pathrewritertransformer_mapping_images.as_ref()
  }

  pub fn reset_cq_contentsync_pathrewritertransformer_mapping_images(&mut self) {
    self.cq_contentsync_pathrewritertransformer_mapping_images = None;
  }

  pub fn set_cq_contentsync_pathrewritertransformer_attribute_pattern(&mut self, cq_contentsync_pathrewritertransformer_attribute_pattern: ::models::ConfigNodePropertyString) {
    self.cq_contentsync_pathrewritertransformer_attribute_pattern = Some(cq_contentsync_pathrewritertransformer_attribute_pattern);
  }

  pub fn with_cq_contentsync_pathrewritertransformer_attribute_pattern(mut self, cq_contentsync_pathrewritertransformer_attribute_pattern: ::models::ConfigNodePropertyString) -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
    self.cq_contentsync_pathrewritertransformer_attribute_pattern = Some(cq_contentsync_pathrewritertransformer_attribute_pattern);
    self
  }

  pub fn cq_contentsync_pathrewritertransformer_attribute_pattern(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cq_contentsync_pathrewritertransformer_attribute_pattern.as_ref()
  }

  pub fn reset_cq_contentsync_pathrewritertransformer_attribute_pattern(&mut self) {
    self.cq_contentsync_pathrewritertransformer_attribute_pattern = None;
  }

  pub fn set_cq_contentsync_pathrewritertransformer_clientlibrary_pattern(&mut self, cq_contentsync_pathrewritertransformer_clientlibrary_pattern: ::models::ConfigNodePropertyString) {
    self.cq_contentsync_pathrewritertransformer_clientlibrary_pattern = Some(cq_contentsync_pathrewritertransformer_clientlibrary_pattern);
  }

  pub fn with_cq_contentsync_pathrewritertransformer_clientlibrary_pattern(mut self, cq_contentsync_pathrewritertransformer_clientlibrary_pattern: ::models::ConfigNodePropertyString) -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
    self.cq_contentsync_pathrewritertransformer_clientlibrary_pattern = Some(cq_contentsync_pathrewritertransformer_clientlibrary_pattern);
    self
  }

  pub fn cq_contentsync_pathrewritertransformer_clientlibrary_pattern(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cq_contentsync_pathrewritertransformer_clientlibrary_pattern.as_ref()
  }

  pub fn reset_cq_contentsync_pathrewritertransformer_clientlibrary_pattern(&mut self) {
    self.cq_contentsync_pathrewritertransformer_clientlibrary_pattern = None;
  }

  pub fn set_cq_contentsync_pathrewritertransformer_clientlibrary_replace(&mut self, cq_contentsync_pathrewritertransformer_clientlibrary_replace: ::models::ConfigNodePropertyString) {
    self.cq_contentsync_pathrewritertransformer_clientlibrary_replace = Some(cq_contentsync_pathrewritertransformer_clientlibrary_replace);
  }

  pub fn with_cq_contentsync_pathrewritertransformer_clientlibrary_replace(mut self, cq_contentsync_pathrewritertransformer_clientlibrary_replace: ::models::ConfigNodePropertyString) -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
    self.cq_contentsync_pathrewritertransformer_clientlibrary_replace = Some(cq_contentsync_pathrewritertransformer_clientlibrary_replace);
    self
  }

  pub fn cq_contentsync_pathrewritertransformer_clientlibrary_replace(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cq_contentsync_pathrewritertransformer_clientlibrary_replace.as_ref()
  }

  pub fn reset_cq_contentsync_pathrewritertransformer_clientlibrary_replace(&mut self) {
    self.cq_contentsync_pathrewritertransformer_clientlibrary_replace = None;
  }

}



