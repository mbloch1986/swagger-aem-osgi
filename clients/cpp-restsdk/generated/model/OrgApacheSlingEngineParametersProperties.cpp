/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingEngineParametersProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingEngineParametersProperties::OrgApacheSlingEngineParametersProperties()
{
    m_Sling_default_parameter_encodingIsSet = false;
    m_Sling_default_max_parametersIsSet = false;
    m_File_locationIsSet = false;
    m_File_thresholdIsSet = false;
    m_File_maxIsSet = false;
    m_Request_maxIsSet = false;
    m_Sling_default_parameter_checkForAdditionalContainerParametersIsSet = false;
}

OrgApacheSlingEngineParametersProperties::~OrgApacheSlingEngineParametersProperties()
{
}

void OrgApacheSlingEngineParametersProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingEngineParametersProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Sling_default_parameter_encodingIsSet)
    {
        val[utility::conversions::to_string_t("sling.default.parameter.encoding")] = ModelBase::toJson(m_Sling_default_parameter_encoding);
    }
    if(m_Sling_default_max_parametersIsSet)
    {
        val[utility::conversions::to_string_t("sling.default.max.parameters")] = ModelBase::toJson(m_Sling_default_max_parameters);
    }
    if(m_File_locationIsSet)
    {
        val[utility::conversions::to_string_t("file.location")] = ModelBase::toJson(m_File_location);
    }
    if(m_File_thresholdIsSet)
    {
        val[utility::conversions::to_string_t("file.threshold")] = ModelBase::toJson(m_File_threshold);
    }
    if(m_File_maxIsSet)
    {
        val[utility::conversions::to_string_t("file.max")] = ModelBase::toJson(m_File_max);
    }
    if(m_Request_maxIsSet)
    {
        val[utility::conversions::to_string_t("request.max")] = ModelBase::toJson(m_Request_max);
    }
    if(m_Sling_default_parameter_checkForAdditionalContainerParametersIsSet)
    {
        val[utility::conversions::to_string_t("sling.default.parameter.checkForAdditionalContainerParameters")] = ModelBase::toJson(m_Sling_default_parameter_checkForAdditionalContainerParameters);
    }

    return val;
}

void OrgApacheSlingEngineParametersProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("sling.default.parameter.encoding")))
    {
        if(!val[utility::conversions::to_string_t("sling.default.parameter.encoding")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.default.parameter.encoding")]);
            setSlingDefaultParameterEncoding( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.default.max.parameters")))
    {
        if(!val[utility::conversions::to_string_t("sling.default.max.parameters")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.default.max.parameters")]);
            setSlingDefaultMaxParameters( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("file.location")))
    {
        if(!val[utility::conversions::to_string_t("file.location")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("file.location")]);
            setFileLocation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("file.threshold")))
    {
        if(!val[utility::conversions::to_string_t("file.threshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("file.threshold")]);
            setFileThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("file.max")))
    {
        if(!val[utility::conversions::to_string_t("file.max")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("file.max")]);
            setFileMax( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("request.max")))
    {
        if(!val[utility::conversions::to_string_t("request.max")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("request.max")]);
            setRequestMax( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.default.parameter.checkForAdditionalContainerParameters")))
    {
        if(!val[utility::conversions::to_string_t("sling.default.parameter.checkForAdditionalContainerParameters")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.default.parameter.checkForAdditionalContainerParameters")]);
            setSlingDefaultParameterCheckForAdditionalContainerParameters( newItem );
        }
    }
}

void OrgApacheSlingEngineParametersProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Sling_default_parameter_encodingIsSet)
    {
        if (m_Sling_default_parameter_encoding.get())
        {
            m_Sling_default_parameter_encoding->toMultipart(multipart, utility::conversions::to_string_t("sling.default.parameter.encoding."));
        }
    }
    if(m_Sling_default_max_parametersIsSet)
    {
        if (m_Sling_default_max_parameters.get())
        {
            m_Sling_default_max_parameters->toMultipart(multipart, utility::conversions::to_string_t("sling.default.max.parameters."));
        }
    }
    if(m_File_locationIsSet)
    {
        if (m_File_location.get())
        {
            m_File_location->toMultipart(multipart, utility::conversions::to_string_t("file.location."));
        }
    }
    if(m_File_thresholdIsSet)
    {
        if (m_File_threshold.get())
        {
            m_File_threshold->toMultipart(multipart, utility::conversions::to_string_t("file.threshold."));
        }
    }
    if(m_File_maxIsSet)
    {
        if (m_File_max.get())
        {
            m_File_max->toMultipart(multipart, utility::conversions::to_string_t("file.max."));
        }
    }
    if(m_Request_maxIsSet)
    {
        if (m_Request_max.get())
        {
            m_Request_max->toMultipart(multipart, utility::conversions::to_string_t("request.max."));
        }
    }
    if(m_Sling_default_parameter_checkForAdditionalContainerParametersIsSet)
    {
        if (m_Sling_default_parameter_checkForAdditionalContainerParameters.get())
        {
            m_Sling_default_parameter_checkForAdditionalContainerParameters->toMultipart(multipart, utility::conversions::to_string_t("sling.default.parameter.checkForAdditionalContainerParameters."));
        }
    }
}

void OrgApacheSlingEngineParametersProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sling.default.parameter.encoding")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.default.parameter.encoding")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.default.parameter.encoding."));
            setSlingDefaultParameterEncoding( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.default.max.parameters")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.default.max.parameters")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.default.max.parameters."));
            setSlingDefaultMaxParameters( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("file.location")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("file.location")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("file.location."));
            setFileLocation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("file.threshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("file.threshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("file.threshold."));
            setFileThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("file.max")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("file.max")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("file.max."));
            setFileMax( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("request.max")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("request.max")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("request.max."));
            setRequestMax( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.default.parameter.checkForAdditionalContainerParameters")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.default.parameter.checkForAdditionalContainerParameters")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.default.parameter.checkForAdditionalContainerParameters."));
            setSlingDefaultParameterCheckForAdditionalContainerParameters( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineParametersProperties::getSlingDefaultParameterEncoding() const
{
    return m_Sling_default_parameter_encoding;
}


void OrgApacheSlingEngineParametersProperties::setSlingDefaultParameterEncoding(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sling_default_parameter_encoding = value;
    m_Sling_default_parameter_encodingIsSet = true;
}
bool OrgApacheSlingEngineParametersProperties::slingDefaultParameterEncodingIsSet() const
{
    return m_Sling_default_parameter_encodingIsSet;
}

void OrgApacheSlingEngineParametersProperties::unsetSling_default_parameter_encoding()
{
    m_Sling_default_parameter_encodingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEngineParametersProperties::getSlingDefaultMaxParameters() const
{
    return m_Sling_default_max_parameters;
}


void OrgApacheSlingEngineParametersProperties::setSlingDefaultMaxParameters(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Sling_default_max_parameters = value;
    m_Sling_default_max_parametersIsSet = true;
}
bool OrgApacheSlingEngineParametersProperties::slingDefaultMaxParametersIsSet() const
{
    return m_Sling_default_max_parametersIsSet;
}

void OrgApacheSlingEngineParametersProperties::unsetSling_default_max_parameters()
{
    m_Sling_default_max_parametersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineParametersProperties::getFileLocation() const
{
    return m_File_location;
}


void OrgApacheSlingEngineParametersProperties::setFileLocation(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_File_location = value;
    m_File_locationIsSet = true;
}
bool OrgApacheSlingEngineParametersProperties::fileLocationIsSet() const
{
    return m_File_locationIsSet;
}

void OrgApacheSlingEngineParametersProperties::unsetFile_location()
{
    m_File_locationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEngineParametersProperties::getFileThreshold() const
{
    return m_File_threshold;
}


void OrgApacheSlingEngineParametersProperties::setFileThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_File_threshold = value;
    m_File_thresholdIsSet = true;
}
bool OrgApacheSlingEngineParametersProperties::fileThresholdIsSet() const
{
    return m_File_thresholdIsSet;
}

void OrgApacheSlingEngineParametersProperties::unsetFile_threshold()
{
    m_File_thresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEngineParametersProperties::getFileMax() const
{
    return m_File_max;
}


void OrgApacheSlingEngineParametersProperties::setFileMax(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_File_max = value;
    m_File_maxIsSet = true;
}
bool OrgApacheSlingEngineParametersProperties::fileMaxIsSet() const
{
    return m_File_maxIsSet;
}

void OrgApacheSlingEngineParametersProperties::unsetFile_max()
{
    m_File_maxIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEngineParametersProperties::getRequestMax() const
{
    return m_Request_max;
}


void OrgApacheSlingEngineParametersProperties::setRequestMax(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Request_max = value;
    m_Request_maxIsSet = true;
}
bool OrgApacheSlingEngineParametersProperties::requestMaxIsSet() const
{
    return m_Request_maxIsSet;
}

void OrgApacheSlingEngineParametersProperties::unsetRequest_max()
{
    m_Request_maxIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingEngineParametersProperties::getSlingDefaultParameterCheckForAdditionalContainerParameters() const
{
    return m_Sling_default_parameter_checkForAdditionalContainerParameters;
}


void OrgApacheSlingEngineParametersProperties::setSlingDefaultParameterCheckForAdditionalContainerParameters(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Sling_default_parameter_checkForAdditionalContainerParameters = value;
    m_Sling_default_parameter_checkForAdditionalContainerParametersIsSet = true;
}
bool OrgApacheSlingEngineParametersProperties::slingDefaultParameterCheckForAdditionalContainerParametersIsSet() const
{
    return m_Sling_default_parameter_checkForAdditionalContainerParametersIsSet;
}

void OrgApacheSlingEngineParametersProperties::unsetSling_default_parameter_checkForAdditionalContainerParameters()
{
    m_Sling_default_parameter_checkForAdditionalContainerParametersIsSet = false;
}

}
}
}
}

