/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
  #[serde(rename = "timeout")]
  timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "target.start.level")]
  target_start_level: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "target.start.level.prop.name")]
  target_start_level_prop_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "type")]
  _type: Option<::models::ConfigNodePropertyDropDown>
}

impl OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
  pub fn new() -> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
    OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
      timeout: None,
      target_start_level: None,
      target_start_level_prop_name: None,
      _type: None
    }
  }

  pub fn set_timeout(&mut self, timeout: ::models::ConfigNodePropertyInteger) {
    self.timeout = Some(timeout);
  }

  pub fn with_timeout(mut self, timeout: ::models::ConfigNodePropertyInteger) -> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
    self.timeout = Some(timeout);
    self
  }

  pub fn timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.timeout.as_ref()
  }

  pub fn reset_timeout(&mut self) {
    self.timeout = None;
  }

  pub fn set_target_start_level(&mut self, target_start_level: ::models::ConfigNodePropertyInteger) {
    self.target_start_level = Some(target_start_level);
  }

  pub fn with_target_start_level(mut self, target_start_level: ::models::ConfigNodePropertyInteger) -> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
    self.target_start_level = Some(target_start_level);
    self
  }

  pub fn target_start_level(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.target_start_level.as_ref()
  }

  pub fn reset_target_start_level(&mut self) {
    self.target_start_level = None;
  }

  pub fn set_target_start_level_prop_name(&mut self, target_start_level_prop_name: ::models::ConfigNodePropertyString) {
    self.target_start_level_prop_name = Some(target_start_level_prop_name);
  }

  pub fn with_target_start_level_prop_name(mut self, target_start_level_prop_name: ::models::ConfigNodePropertyString) -> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
    self.target_start_level_prop_name = Some(target_start_level_prop_name);
    self
  }

  pub fn target_start_level_prop_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.target_start_level_prop_name.as_ref()
  }

  pub fn reset_target_start_level_prop_name(&mut self) {
    self.target_start_level_prop_name = None;
  }

  pub fn set__type(&mut self, _type: ::models::ConfigNodePropertyDropDown) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: ::models::ConfigNodePropertyDropDown) -> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



