/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingSecurityImplReferrerFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingSecurityImplReferrerFilterProperties::OAIOrgApacheSlingSecurityImplReferrerFilterProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingSecurityImplReferrerFilterProperties::OAIOrgApacheSlingSecurityImplReferrerFilterProperties() {
    this->init();
}

OAIOrgApacheSlingSecurityImplReferrerFilterProperties::~OAIOrgApacheSlingSecurityImplReferrerFilterProperties() {
    
}

void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::init() {
    m_allow_empty_isSet = false;
    m_allow_hosts_isSet = false;
    m_allow_hosts_regexp_isSet = false;
    m_filter_methods_isSet = false;
    m_exclude_agents_regexp_isSet = false;
}

void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(allow_empty, json[QString("allow.empty")]);
    
    ::OpenAPI::fromJsonValue(allow_hosts, json[QString("allow.hosts")]);
    
    ::OpenAPI::fromJsonValue(allow_hosts_regexp, json[QString("allow.hosts.regexp")]);
    
    ::OpenAPI::fromJsonValue(filter_methods, json[QString("filter.methods")]);
    
    ::OpenAPI::fromJsonValue(exclude_agents_regexp, json[QString("exclude.agents.regexp")]);
    
}

QString
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::asJsonObject() const {
    QJsonObject obj;
	if(allow_empty.isSet()){
        obj.insert(QString("allow.empty"), ::OpenAPI::toJsonValue(allow_empty));
    }
	if(allow_hosts.isSet()){
        obj.insert(QString("allow.hosts"), ::OpenAPI::toJsonValue(allow_hosts));
    }
	if(allow_hosts_regexp.isSet()){
        obj.insert(QString("allow.hosts.regexp"), ::OpenAPI::toJsonValue(allow_hosts_regexp));
    }
	if(filter_methods.isSet()){
        obj.insert(QString("filter.methods"), ::OpenAPI::toJsonValue(filter_methods));
    }
	if(exclude_agents_regexp.isSet()){
        obj.insert(QString("exclude.agents.regexp"), ::OpenAPI::toJsonValue(exclude_agents_regexp));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::getAllowEmpty() const {
    return allow_empty;
}
void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::setAllowEmpty(const OAIConfigNodePropertyBoolean &allow_empty) {
    this->allow_empty = allow_empty;
    this->m_allow_empty_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::getAllowHosts() const {
    return allow_hosts;
}
void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::setAllowHosts(const OAIConfigNodePropertyArray &allow_hosts) {
    this->allow_hosts = allow_hosts;
    this->m_allow_hosts_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::getAllowHostsRegexp() const {
    return allow_hosts_regexp;
}
void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::setAllowHostsRegexp(const OAIConfigNodePropertyArray &allow_hosts_regexp) {
    this->allow_hosts_regexp = allow_hosts_regexp;
    this->m_allow_hosts_regexp_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::getFilterMethods() const {
    return filter_methods;
}
void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::setFilterMethods(const OAIConfigNodePropertyArray &filter_methods) {
    this->filter_methods = filter_methods;
    this->m_filter_methods_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::getExcludeAgentsRegexp() const {
    return exclude_agents_regexp;
}
void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::setExcludeAgentsRegexp(const OAIConfigNodePropertyArray &exclude_agents_regexp) {
    this->exclude_agents_regexp = exclude_agents_regexp;
    this->m_exclude_agents_regexp_isSet = true;
}


bool
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(allow_empty.isSet()){ isObjectUpdated = true; break;}
    
        if(allow_hosts.isSet()){ isObjectUpdated = true; break;}
    
        if(allow_hosts_regexp.isSet()){ isObjectUpdated = true; break;}
    
        if(filter_methods.isSet()){ isObjectUpdated = true; break;}
    
        if(exclude_agents_regexp.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

