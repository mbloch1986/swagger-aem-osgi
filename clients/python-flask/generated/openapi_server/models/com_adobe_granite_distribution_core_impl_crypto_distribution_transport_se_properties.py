# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_string import ConfigNodePropertyString  # noqa: F401,E501
from openapi_server import util


class ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: ConfigNodePropertyString=None, username: ConfigNodePropertyString=None, encrypted_password: ConfigNodePropertyString=None):  # noqa: E501
        """ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties - a model defined in OpenAPI

        :param name: The name of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.  # noqa: E501
        :type name: ConfigNodePropertyString
        :param username: The username of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.  # noqa: E501
        :type username: ConfigNodePropertyString
        :param encrypted_password: The encrypted_password of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.  # noqa: E501
        :type encrypted_password: ConfigNodePropertyString
        """
        self.openapi_types = {
            'name': ConfigNodePropertyString,
            'username': ConfigNodePropertyString,
            'encrypted_password': ConfigNodePropertyString
        }

        self.attribute_map = {
            'name': 'name',
            'username': 'username',
            'encrypted_password': 'encryptedPassword'
        }

        self._name = name
        self._username = username
        self._encrypted_password = encrypted_password

    @classmethod
    def from_dict(cls, dikt) -> 'ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.  # noqa: E501
        :rtype: ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> ConfigNodePropertyString:
        """Gets the name of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.


        :return: The name of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._name

    @name.setter
    def name(self, name: ConfigNodePropertyString):
        """Sets the name of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.


        :param name: The name of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.
        :type name: ConfigNodePropertyString
        """

        self._name = name

    @property
    def username(self) -> ConfigNodePropertyString:
        """Gets the username of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.


        :return: The username of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._username

    @username.setter
    def username(self, username: ConfigNodePropertyString):
        """Sets the username of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.


        :param username: The username of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.
        :type username: ConfigNodePropertyString
        """

        self._username = username

    @property
    def encrypted_password(self) -> ConfigNodePropertyString:
        """Gets the encrypted_password of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.


        :return: The encrypted_password of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password: ConfigNodePropertyString):
        """Sets the encrypted_password of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.


        :param encrypted_password: The encrypted_password of this ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.
        :type encrypted_password: ConfigNodePropertyString
        """

        self._encrypted_password = encrypted_password
