/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteFragsImplRandomFeatureProperties {
  #[serde(rename = "feature.name")]
  feature_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "feature.description")]
  feature_description: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "active.percentage")]
  active_percentage: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cookie.name")]
  cookie_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cookie.maxAge")]
  cookie_max_age: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeGraniteFragsImplRandomFeatureProperties {
  pub fn new() -> ComAdobeGraniteFragsImplRandomFeatureProperties {
    ComAdobeGraniteFragsImplRandomFeatureProperties {
      feature_name: None,
      feature_description: None,
      active_percentage: None,
      cookie_name: None,
      cookie_max_age: None
    }
  }

  pub fn set_feature_name(&mut self, feature_name: ::models::ConfigNodePropertyString) {
    self.feature_name = Some(feature_name);
  }

  pub fn with_feature_name(mut self, feature_name: ::models::ConfigNodePropertyString) -> ComAdobeGraniteFragsImplRandomFeatureProperties {
    self.feature_name = Some(feature_name);
    self
  }

  pub fn feature_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.feature_name.as_ref()
  }

  pub fn reset_feature_name(&mut self) {
    self.feature_name = None;
  }

  pub fn set_feature_description(&mut self, feature_description: ::models::ConfigNodePropertyString) {
    self.feature_description = Some(feature_description);
  }

  pub fn with_feature_description(mut self, feature_description: ::models::ConfigNodePropertyString) -> ComAdobeGraniteFragsImplRandomFeatureProperties {
    self.feature_description = Some(feature_description);
    self
  }

  pub fn feature_description(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.feature_description.as_ref()
  }

  pub fn reset_feature_description(&mut self) {
    self.feature_description = None;
  }

  pub fn set_active_percentage(&mut self, active_percentage: ::models::ConfigNodePropertyString) {
    self.active_percentage = Some(active_percentage);
  }

  pub fn with_active_percentage(mut self, active_percentage: ::models::ConfigNodePropertyString) -> ComAdobeGraniteFragsImplRandomFeatureProperties {
    self.active_percentage = Some(active_percentage);
    self
  }

  pub fn active_percentage(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.active_percentage.as_ref()
  }

  pub fn reset_active_percentage(&mut self) {
    self.active_percentage = None;
  }

  pub fn set_cookie_name(&mut self, cookie_name: ::models::ConfigNodePropertyString) {
    self.cookie_name = Some(cookie_name);
  }

  pub fn with_cookie_name(mut self, cookie_name: ::models::ConfigNodePropertyString) -> ComAdobeGraniteFragsImplRandomFeatureProperties {
    self.cookie_name = Some(cookie_name);
    self
  }

  pub fn cookie_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cookie_name.as_ref()
  }

  pub fn reset_cookie_name(&mut self) {
    self.cookie_name = None;
  }

  pub fn set_cookie_max_age(&mut self, cookie_max_age: ::models::ConfigNodePropertyInteger) {
    self.cookie_max_age = Some(cookie_max_age);
  }

  pub fn with_cookie_max_age(mut self, cookie_max_age: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteFragsImplRandomFeatureProperties {
    self.cookie_max_age = Some(cookie_max_age);
    self
  }

  pub fn cookie_max_age(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cookie_max_age.as_ref()
  }

  pub fn reset_cookie_max_age(&mut self) {
    self.cookie_max_age = None;
  }

}



