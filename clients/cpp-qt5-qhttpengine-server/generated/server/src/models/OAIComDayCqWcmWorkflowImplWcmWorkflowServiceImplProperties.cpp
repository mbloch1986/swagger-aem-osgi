/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties() {
    this->init();
}

OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::~OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties() {
    
}

void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::init() {
    m_event_filter_isSet = false;
    m_min_thread_pool_size_isSet = false;
    m_max_thread_pool_size_isSet = false;
    m_cq_wcm_workflow_terminate_on_activate_isSet = false;
    m_cq_wcm_worklfow_terminate_exclusion_list_isSet = false;
}

void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(event_filter, json[QString("event.filter")]);
    
    ::OpenAPI::fromJsonValue(min_thread_pool_size, json[QString("minThreadPoolSize")]);
    
    ::OpenAPI::fromJsonValue(max_thread_pool_size, json[QString("maxThreadPoolSize")]);
    
    ::OpenAPI::fromJsonValue(cq_wcm_workflow_terminate_on_activate, json[QString("cq.wcm.workflow.terminate.on.activate")]);
    
    ::OpenAPI::fromJsonValue(cq_wcm_worklfow_terminate_exclusion_list, json[QString("cq.wcm.worklfow.terminate.exclusion.list")]);
    
}

QString
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(event_filter.isSet()){
        obj.insert(QString("event.filter"), ::OpenAPI::toJsonValue(event_filter));
    }
	if(min_thread_pool_size.isSet()){
        obj.insert(QString("minThreadPoolSize"), ::OpenAPI::toJsonValue(min_thread_pool_size));
    }
	if(max_thread_pool_size.isSet()){
        obj.insert(QString("maxThreadPoolSize"), ::OpenAPI::toJsonValue(max_thread_pool_size));
    }
	if(cq_wcm_workflow_terminate_on_activate.isSet()){
        obj.insert(QString("cq.wcm.workflow.terminate.on.activate"), ::OpenAPI::toJsonValue(cq_wcm_workflow_terminate_on_activate));
    }
	if(cq_wcm_worklfow_terminate_exclusion_list.isSet()){
        obj.insert(QString("cq.wcm.worklfow.terminate.exclusion.list"), ::OpenAPI::toJsonValue(cq_wcm_worklfow_terminate_exclusion_list));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getEventFilter() const {
    return event_filter;
}
void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setEventFilter(const OAIConfigNodePropertyString &event_filter) {
    this->event_filter = event_filter;
    this->m_event_filter_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getMinThreadPoolSize() const {
    return min_thread_pool_size;
}
void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setMinThreadPoolSize(const OAIConfigNodePropertyInteger &min_thread_pool_size) {
    this->min_thread_pool_size = min_thread_pool_size;
    this->m_min_thread_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getMaxThreadPoolSize() const {
    return max_thread_pool_size;
}
void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setMaxThreadPoolSize(const OAIConfigNodePropertyInteger &max_thread_pool_size) {
    this->max_thread_pool_size = max_thread_pool_size;
    this->m_max_thread_pool_size_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getCqWcmWorkflowTerminateOnActivate() const {
    return cq_wcm_workflow_terminate_on_activate;
}
void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setCqWcmWorkflowTerminateOnActivate(const OAIConfigNodePropertyBoolean &cq_wcm_workflow_terminate_on_activate) {
    this->cq_wcm_workflow_terminate_on_activate = cq_wcm_workflow_terminate_on_activate;
    this->m_cq_wcm_workflow_terminate_on_activate_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getCqWcmWorklfowTerminateExclusionList() const {
    return cq_wcm_worklfow_terminate_exclusion_list;
}
void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setCqWcmWorklfowTerminateExclusionList(const OAIConfigNodePropertyArray &cq_wcm_worklfow_terminate_exclusion_list) {
    this->cq_wcm_worklfow_terminate_exclusion_list = cq_wcm_worklfow_terminate_exclusion_list;
    this->m_cq_wcm_worklfow_terminate_exclusion_list_isSet = true;
}


bool
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(event_filter.isSet()){ isObjectUpdated = true; break;}
    
        if(min_thread_pool_size.isSet()){ isObjectUpdated = true; break;}
    
        if(max_thread_pool_size.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_wcm_workflow_terminate_on_activate.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_wcm_worklfow_terminate_exclusion_list.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

