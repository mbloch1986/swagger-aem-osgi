/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties() {
    this->init();
}

OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::~OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties() {
    
}

void
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::init() {
    m_locale_default_isSet = false;
    m_preload_bundles_isSet = false;
    m_invalidation_delay_isSet = false;
}

void
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(locale_default, json[QString("locale.default")]);
    
    ::OpenAPI::fromJsonValue(preload_bundles, json[QString("preload.bundles")]);
    
    ::OpenAPI::fromJsonValue(invalidation_delay, json[QString("invalidation.delay")]);
    
}

QString
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::asJsonObject() const {
    QJsonObject obj;
	if(locale_default.isSet()){
        obj.insert(QString("locale.default"), ::OpenAPI::toJsonValue(locale_default));
    }
	if(preload_bundles.isSet()){
        obj.insert(QString("preload.bundles"), ::OpenAPI::toJsonValue(preload_bundles));
    }
	if(invalidation_delay.isSet()){
        obj.insert(QString("invalidation.delay"), ::OpenAPI::toJsonValue(invalidation_delay));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::getLocaleDefault() const {
    return locale_default;
}
void
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::setLocaleDefault(const OAIConfigNodePropertyString &locale_default) {
    this->locale_default = locale_default;
    this->m_locale_default_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::getPreloadBundles() const {
    return preload_bundles;
}
void
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::setPreloadBundles(const OAIConfigNodePropertyBoolean &preload_bundles) {
    this->preload_bundles = preload_bundles;
    this->m_preload_bundles_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::getInvalidationDelay() const {
    return invalidation_delay;
}
void
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::setInvalidationDelay(const OAIConfigNodePropertyInteger &invalidation_delay) {
    this->invalidation_delay = invalidation_delay;
    this->m_invalidation_delay_isSet = true;
}


bool
OAIOrgApacheSlingI18nImplJcrResourceBundleProviderProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(locale_default.isSet()){ isObjectUpdated = true; break;}
    
        if(preload_bundles.isSet()){ isObjectUpdated = true; break;}
    
        if(invalidation_delay.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

