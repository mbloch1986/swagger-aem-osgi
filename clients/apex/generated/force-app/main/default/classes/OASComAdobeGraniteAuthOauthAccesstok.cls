/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASComAdobeGraniteAuthOauthAccesstok
 */
public class OASComAdobeGraniteAuthOauthAccesstok implements OAS.MappedProperties {
    /**
     * Get name
     * @return name
     */
    public OASConfigNodePropertyString name { get; set; }

    /**
     * Get authTokenProviderTitle
     * @return authTokenProviderTitle
     */
    public OASConfigNodePropertyString authTokenProviderTitle { get; set; }

    /**
     * Get authTokenProviderDefaultClaims
     * @return authTokenProviderDefaultClaims
     */
    public OASConfigNodePropertyArray authTokenProviderDefaultClaims { get; set; }

    /**
     * Get authTokenProviderEndpoint
     * @return authTokenProviderEndpoint
     */
    public OASConfigNodePropertyString authTokenProviderEndpoint { get; set; }

    /**
     * Get authAccessTokenRequest
     * @return authAccessTokenRequest
     */
    public OASConfigNodePropertyString authAccessTokenRequest { get; set; }

    /**
     * Get authTokenProviderKeypairAlias
     * @return authTokenProviderKeypairAlias
     */
    public OASConfigNodePropertyString authTokenProviderKeypairAlias { get; set; }

    /**
     * Get authTokenProviderConnTimeout
     * @return authTokenProviderConnTimeout
     */
    public OASConfigNodePropertyInteger authTokenProviderConnTimeout { get; set; }

    /**
     * Get authTokenProviderSoTimeout
     * @return authTokenProviderSoTimeout
     */
    public OASConfigNodePropertyInteger authTokenProviderSoTimeout { get; set; }

    /**
     * Get authTokenProviderClientId
     * @return authTokenProviderClientId
     */
    public OASConfigNodePropertyString authTokenProviderClientId { get; set; }

    /**
     * Get authTokenProviderScope
     * @return authTokenProviderScope
     */
    public OASConfigNodePropertyString authTokenProviderScope { get; set; }

    /**
     * Get authTokenProviderReuseAccessToken
     * @return authTokenProviderReuseAccessToken
     */
    public OASConfigNodePropertyBoolean authTokenProviderReuseAccessToken { get; set; }

    /**
     * Get authTokenProviderRelaxedSsl
     * @return authTokenProviderRelaxedSsl
     */
    public OASConfigNodePropertyBoolean authTokenProviderRelaxedSsl { get; set; }

    /**
     * Get tokenRequestCustomizerType
     * @return tokenRequestCustomizerType
     */
    public OASConfigNodePropertyString tokenRequestCustomizerType { get; set; }

    /**
     * Get authTokenValidatorType
     * @return authTokenValidatorType
     */
    public OASConfigNodePropertyString authTokenValidatorType { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'auth.token.provider.title' => 'authTokenProviderTitle',
        'auth.token.provider.default.claims' => 'authTokenProviderDefaultClaims',
        'auth.token.provider.endpoint' => 'authTokenProviderEndpoint',
        'auth.access.token.request' => 'authAccessTokenRequest',
        'auth.token.provider.keypair.alias' => 'authTokenProviderKeypairAlias',
        'auth.token.provider.conn.timeout' => 'authTokenProviderConnTimeout',
        'auth.token.provider.so.timeout' => 'authTokenProviderSoTimeout',
        'auth.token.provider.client.id' => 'authTokenProviderClientId',
        'auth.token.provider.scope' => 'authTokenProviderScope',
        'auth.token.provider.reuse.access.token' => 'authTokenProviderReuseAccessToken',
        'auth.token.provider.relaxed.ssl' => 'authTokenProviderRelaxedSsl',
        'token.request.customizer.type' => 'tokenRequestCustomizerType',
        'auth.token.validator.type' => 'authTokenValidatorType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASComAdobeGraniteAuthOauthAccesstok getExample() {
        OASComAdobeGraniteAuthOauthAccesstok comAdobeGraniteAuthOauthAccesstokenProviderProperties = new OASComAdobeGraniteAuthOauthAccesstok();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.name = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderTitle = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderDefaultClaims = OASConfigNodePropertyArray.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderEndpoint = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authAccessTokenRequest = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderKeypairAlias = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderConnTimeout = OASConfigNodePropertyInteger.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderSoTimeout = OASConfigNodePropertyInteger.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderClientId = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderScope = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderReuseAccessToken = OASConfigNodePropertyBoolean.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderRelaxedSsl = OASConfigNodePropertyBoolean.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.tokenRequestCustomizerType = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenValidatorType = OASConfigNodePropertyString.getExample();
        return comAdobeGraniteAuthOauthAccesstokenProviderProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASComAdobeGraniteAuthOauthAccesstok) {           
            OASComAdobeGraniteAuthOauthAccesstok comAdobeGraniteAuthOauthAccesstokenProviderProperties = (OASComAdobeGraniteAuthOauthAccesstok) obj;
            return this.name == comAdobeGraniteAuthOauthAccesstokenProviderProperties.name
                && this.authTokenProviderTitle == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderTitle
                && this.authTokenProviderDefaultClaims == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderDefaultClaims
                && this.authTokenProviderEndpoint == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderEndpoint
                && this.authAccessTokenRequest == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authAccessTokenRequest
                && this.authTokenProviderKeypairAlias == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderKeypairAlias
                && this.authTokenProviderConnTimeout == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderConnTimeout
                && this.authTokenProviderSoTimeout == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderSoTimeout
                && this.authTokenProviderClientId == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderClientId
                && this.authTokenProviderScope == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderScope
                && this.authTokenProviderReuseAccessToken == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderReuseAccessToken
                && this.authTokenProviderRelaxedSsl == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderRelaxedSsl
                && this.tokenRequestCustomizerType == comAdobeGraniteAuthOauthAccesstokenProviderProperties.tokenRequestCustomizerType
                && this.authTokenValidatorType == comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenValidatorType;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (authTokenProviderTitle == null ? 0 : System.hashCode(authTokenProviderTitle));
        hashCode = (17 * hashCode) + (authTokenProviderDefaultClaims == null ? 0 : System.hashCode(authTokenProviderDefaultClaims));
        hashCode = (17 * hashCode) + (authTokenProviderEndpoint == null ? 0 : System.hashCode(authTokenProviderEndpoint));
        hashCode = (17 * hashCode) + (authAccessTokenRequest == null ? 0 : System.hashCode(authAccessTokenRequest));
        hashCode = (17 * hashCode) + (authTokenProviderKeypairAlias == null ? 0 : System.hashCode(authTokenProviderKeypairAlias));
        hashCode = (17 * hashCode) + (authTokenProviderConnTimeout == null ? 0 : System.hashCode(authTokenProviderConnTimeout));
        hashCode = (17 * hashCode) + (authTokenProviderSoTimeout == null ? 0 : System.hashCode(authTokenProviderSoTimeout));
        hashCode = (17 * hashCode) + (authTokenProviderClientId == null ? 0 : System.hashCode(authTokenProviderClientId));
        hashCode = (17 * hashCode) + (authTokenProviderScope == null ? 0 : System.hashCode(authTokenProviderScope));
        hashCode = (17 * hashCode) + (authTokenProviderReuseAccessToken == null ? 0 : System.hashCode(authTokenProviderReuseAccessToken));
        hashCode = (17 * hashCode) + (authTokenProviderRelaxedSsl == null ? 0 : System.hashCode(authTokenProviderRelaxedSsl));
        hashCode = (17 * hashCode) + (tokenRequestCustomizerType == null ? 0 : System.hashCode(tokenRequestCustomizerType));
        hashCode = (17 * hashCode) + (authTokenValidatorType == null ? 0 : System.hashCode(authTokenValidatorType));
        return hashCode;
    }
}

