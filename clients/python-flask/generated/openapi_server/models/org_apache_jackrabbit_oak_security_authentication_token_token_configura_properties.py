# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_boolean import ConfigNodePropertyBoolean  # noqa: F401,E501
from openapi_server.models.config_node_property_integer import ConfigNodePropertyInteger  # noqa: F401,E501
from openapi_server.models.config_node_property_string import ConfigNodePropertyString  # noqa: F401,E501
from openapi_server import util


class OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_expiration: ConfigNodePropertyString=None, token_length: ConfigNodePropertyString=None, token_refresh: ConfigNodePropertyBoolean=None, token_cleanup_threshold: ConfigNodePropertyInteger=None, password_hash_algorithm: ConfigNodePropertyString=None, password_hash_iterations: ConfigNodePropertyInteger=None, password_salt_size: ConfigNodePropertyInteger=None):  # noqa: E501
        """OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties - a model defined in OpenAPI

        :param token_expiration: The token_expiration of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.  # noqa: E501
        :type token_expiration: ConfigNodePropertyString
        :param token_length: The token_length of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.  # noqa: E501
        :type token_length: ConfigNodePropertyString
        :param token_refresh: The token_refresh of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.  # noqa: E501
        :type token_refresh: ConfigNodePropertyBoolean
        :param token_cleanup_threshold: The token_cleanup_threshold of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.  # noqa: E501
        :type token_cleanup_threshold: ConfigNodePropertyInteger
        :param password_hash_algorithm: The password_hash_algorithm of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.  # noqa: E501
        :type password_hash_algorithm: ConfigNodePropertyString
        :param password_hash_iterations: The password_hash_iterations of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.  # noqa: E501
        :type password_hash_iterations: ConfigNodePropertyInteger
        :param password_salt_size: The password_salt_size of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.  # noqa: E501
        :type password_salt_size: ConfigNodePropertyInteger
        """
        self.openapi_types = {
            'token_expiration': ConfigNodePropertyString,
            'token_length': ConfigNodePropertyString,
            'token_refresh': ConfigNodePropertyBoolean,
            'token_cleanup_threshold': ConfigNodePropertyInteger,
            'password_hash_algorithm': ConfigNodePropertyString,
            'password_hash_iterations': ConfigNodePropertyInteger,
            'password_salt_size': ConfigNodePropertyInteger
        }

        self.attribute_map = {
            'token_expiration': 'tokenExpiration',
            'token_length': 'tokenLength',
            'token_refresh': 'tokenRefresh',
            'token_cleanup_threshold': 'tokenCleanupThreshold',
            'password_hash_algorithm': 'passwordHashAlgorithm',
            'password_hash_iterations': 'passwordHashIterations',
            'password_salt_size': 'passwordSaltSize'
        }

        self._token_expiration = token_expiration
        self._token_length = token_length
        self._token_refresh = token_refresh
        self._token_cleanup_threshold = token_cleanup_threshold
        self._password_hash_algorithm = password_hash_algorithm
        self._password_hash_iterations = password_hash_iterations
        self._password_salt_size = password_salt_size

    @classmethod
    def from_dict(cls, dikt) -> 'OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.  # noqa: E501
        :rtype: OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_expiration(self) -> ConfigNodePropertyString:
        """Gets the token_expiration of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :return: The token_expiration of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._token_expiration

    @token_expiration.setter
    def token_expiration(self, token_expiration: ConfigNodePropertyString):
        """Sets the token_expiration of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :param token_expiration: The token_expiration of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :type token_expiration: ConfigNodePropertyString
        """

        self._token_expiration = token_expiration

    @property
    def token_length(self) -> ConfigNodePropertyString:
        """Gets the token_length of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :return: The token_length of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._token_length

    @token_length.setter
    def token_length(self, token_length: ConfigNodePropertyString):
        """Sets the token_length of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :param token_length: The token_length of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :type token_length: ConfigNodePropertyString
        """

        self._token_length = token_length

    @property
    def token_refresh(self) -> ConfigNodePropertyBoolean:
        """Gets the token_refresh of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :return: The token_refresh of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._token_refresh

    @token_refresh.setter
    def token_refresh(self, token_refresh: ConfigNodePropertyBoolean):
        """Sets the token_refresh of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :param token_refresh: The token_refresh of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :type token_refresh: ConfigNodePropertyBoolean
        """

        self._token_refresh = token_refresh

    @property
    def token_cleanup_threshold(self) -> ConfigNodePropertyInteger:
        """Gets the token_cleanup_threshold of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :return: The token_cleanup_threshold of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._token_cleanup_threshold

    @token_cleanup_threshold.setter
    def token_cleanup_threshold(self, token_cleanup_threshold: ConfigNodePropertyInteger):
        """Sets the token_cleanup_threshold of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :param token_cleanup_threshold: The token_cleanup_threshold of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :type token_cleanup_threshold: ConfigNodePropertyInteger
        """

        self._token_cleanup_threshold = token_cleanup_threshold

    @property
    def password_hash_algorithm(self) -> ConfigNodePropertyString:
        """Gets the password_hash_algorithm of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :return: The password_hash_algorithm of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._password_hash_algorithm

    @password_hash_algorithm.setter
    def password_hash_algorithm(self, password_hash_algorithm: ConfigNodePropertyString):
        """Sets the password_hash_algorithm of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :param password_hash_algorithm: The password_hash_algorithm of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :type password_hash_algorithm: ConfigNodePropertyString
        """

        self._password_hash_algorithm = password_hash_algorithm

    @property
    def password_hash_iterations(self) -> ConfigNodePropertyInteger:
        """Gets the password_hash_iterations of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :return: The password_hash_iterations of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._password_hash_iterations

    @password_hash_iterations.setter
    def password_hash_iterations(self, password_hash_iterations: ConfigNodePropertyInteger):
        """Sets the password_hash_iterations of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :param password_hash_iterations: The password_hash_iterations of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :type password_hash_iterations: ConfigNodePropertyInteger
        """

        self._password_hash_iterations = password_hash_iterations

    @property
    def password_salt_size(self) -> ConfigNodePropertyInteger:
        """Gets the password_salt_size of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :return: The password_salt_size of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._password_salt_size

    @password_salt_size.setter
    def password_salt_size(self, password_salt_size: ConfigNodePropertyInteger):
        """Sets the password_salt_size of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.


        :param password_salt_size: The password_salt_size of this OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.
        :type password_salt_size: ConfigNodePropertyInteger
        """

        self._password_salt_size = password_salt_size
