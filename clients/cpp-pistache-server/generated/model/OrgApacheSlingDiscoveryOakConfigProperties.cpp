/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDiscoveryOakConfigProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDiscoveryOakConfigProperties::OrgApacheSlingDiscoveryOakConfigProperties()
{
    m_ConnectorPingTimeoutIsSet = false;
    m_ConnectorPingIntervalIsSet = false;
    m_DiscoveryLiteCheckIntervalIsSet = false;
    m_ClusterSyncServiceTimeoutIsSet = false;
    m_ClusterSyncServiceIntervalIsSet = false;
    m_EnableSyncTokenIsSet = false;
    m_MinEventDelayIsSet = false;
    m_SocketConnectTimeoutIsSet = false;
    m_SoTimeoutIsSet = false;
    m_TopologyConnectorUrlsIsSet = false;
    m_TopologyConnectorWhitelistIsSet = false;
    m_AutoStopLocalLoopEnabledIsSet = false;
    m_GzipConnectorRequestsEnabledIsSet = false;
    m_HmacEnabledIsSet = false;
    m_EnableEncryptionIsSet = false;
    m_SharedKeyIsSet = false;
    m_HmacSharedKeyTTLIsSet = false;
    m_BackoffStandbyFactorIsSet = false;
    m_BackoffStableFactorIsSet = false;
    
}

OrgApacheSlingDiscoveryOakConfigProperties::~OrgApacheSlingDiscoveryOakConfigProperties()
{
}

void OrgApacheSlingDiscoveryOakConfigProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDiscoveryOakConfigProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_ConnectorPingTimeoutIsSet)
    {
        val["connectorPingTimeout"] = ModelBase::toJson(m_ConnectorPingTimeout);
    }
    if(m_ConnectorPingIntervalIsSet)
    {
        val["connectorPingInterval"] = ModelBase::toJson(m_ConnectorPingInterval);
    }
    if(m_DiscoveryLiteCheckIntervalIsSet)
    {
        val["discoveryLiteCheckInterval"] = ModelBase::toJson(m_DiscoveryLiteCheckInterval);
    }
    if(m_ClusterSyncServiceTimeoutIsSet)
    {
        val["clusterSyncServiceTimeout"] = ModelBase::toJson(m_ClusterSyncServiceTimeout);
    }
    if(m_ClusterSyncServiceIntervalIsSet)
    {
        val["clusterSyncServiceInterval"] = ModelBase::toJson(m_ClusterSyncServiceInterval);
    }
    if(m_EnableSyncTokenIsSet)
    {
        val["enableSyncToken"] = ModelBase::toJson(m_EnableSyncToken);
    }
    if(m_MinEventDelayIsSet)
    {
        val["minEventDelay"] = ModelBase::toJson(m_MinEventDelay);
    }
    if(m_SocketConnectTimeoutIsSet)
    {
        val["socketConnectTimeout"] = ModelBase::toJson(m_SocketConnectTimeout);
    }
    if(m_SoTimeoutIsSet)
    {
        val["soTimeout"] = ModelBase::toJson(m_SoTimeout);
    }
    if(m_TopologyConnectorUrlsIsSet)
    {
        val["topologyConnectorUrls"] = ModelBase::toJson(m_TopologyConnectorUrls);
    }
    if(m_TopologyConnectorWhitelistIsSet)
    {
        val["topologyConnectorWhitelist"] = ModelBase::toJson(m_TopologyConnectorWhitelist);
    }
    if(m_AutoStopLocalLoopEnabledIsSet)
    {
        val["autoStopLocalLoopEnabled"] = ModelBase::toJson(m_AutoStopLocalLoopEnabled);
    }
    if(m_GzipConnectorRequestsEnabledIsSet)
    {
        val["gzipConnectorRequestsEnabled"] = ModelBase::toJson(m_GzipConnectorRequestsEnabled);
    }
    if(m_HmacEnabledIsSet)
    {
        val["hmacEnabled"] = ModelBase::toJson(m_HmacEnabled);
    }
    if(m_EnableEncryptionIsSet)
    {
        val["enableEncryption"] = ModelBase::toJson(m_EnableEncryption);
    }
    if(m_SharedKeyIsSet)
    {
        val["sharedKey"] = ModelBase::toJson(m_SharedKey);
    }
    if(m_HmacSharedKeyTTLIsSet)
    {
        val["hmacSharedKeyTTL"] = ModelBase::toJson(m_HmacSharedKeyTTL);
    }
    if(m_BackoffStandbyFactorIsSet)
    {
        val["backoffStandbyFactor"] = ModelBase::toJson(m_BackoffStandbyFactor);
    }
    if(m_BackoffStableFactorIsSet)
    {
        val["backoffStableFactor"] = ModelBase::toJson(m_BackoffStableFactor);
    }
    

    return val;
}

void OrgApacheSlingDiscoveryOakConfigProperties::fromJson(nlohmann::json& val)
{
    if(val.find("connectorPingTimeout") != val.end())
    {
        if(!val["connectorPingTimeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["connectorPingTimeout"]);
            setConnectorPingTimeout( newItem );
        }
        
    }
    if(val.find("connectorPingInterval") != val.end())
    {
        if(!val["connectorPingInterval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["connectorPingInterval"]);
            setConnectorPingInterval( newItem );
        }
        
    }
    if(val.find("discoveryLiteCheckInterval") != val.end())
    {
        if(!val["discoveryLiteCheckInterval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["discoveryLiteCheckInterval"]);
            setDiscoveryLiteCheckInterval( newItem );
        }
        
    }
    if(val.find("clusterSyncServiceTimeout") != val.end())
    {
        if(!val["clusterSyncServiceTimeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["clusterSyncServiceTimeout"]);
            setClusterSyncServiceTimeout( newItem );
        }
        
    }
    if(val.find("clusterSyncServiceInterval") != val.end())
    {
        if(!val["clusterSyncServiceInterval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["clusterSyncServiceInterval"]);
            setClusterSyncServiceInterval( newItem );
        }
        
    }
    if(val.find("enableSyncToken") != val.end())
    {
        if(!val["enableSyncToken"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enableSyncToken"]);
            setEnableSyncToken( newItem );
        }
        
    }
    if(val.find("minEventDelay") != val.end())
    {
        if(!val["minEventDelay"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["minEventDelay"]);
            setMinEventDelay( newItem );
        }
        
    }
    if(val.find("socketConnectTimeout") != val.end())
    {
        if(!val["socketConnectTimeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["socketConnectTimeout"]);
            setSocketConnectTimeout( newItem );
        }
        
    }
    if(val.find("soTimeout") != val.end())
    {
        if(!val["soTimeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["soTimeout"]);
            setSoTimeout( newItem );
        }
        
    }
    if(val.find("topologyConnectorUrls") != val.end())
    {
        if(!val["topologyConnectorUrls"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["topologyConnectorUrls"]);
            setTopologyConnectorUrls( newItem );
        }
        
    }
    if(val.find("topologyConnectorWhitelist") != val.end())
    {
        if(!val["topologyConnectorWhitelist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["topologyConnectorWhitelist"]);
            setTopologyConnectorWhitelist( newItem );
        }
        
    }
    if(val.find("autoStopLocalLoopEnabled") != val.end())
    {
        if(!val["autoStopLocalLoopEnabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["autoStopLocalLoopEnabled"]);
            setAutoStopLocalLoopEnabled( newItem );
        }
        
    }
    if(val.find("gzipConnectorRequestsEnabled") != val.end())
    {
        if(!val["gzipConnectorRequestsEnabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["gzipConnectorRequestsEnabled"]);
            setGzipConnectorRequestsEnabled( newItem );
        }
        
    }
    if(val.find("hmacEnabled") != val.end())
    {
        if(!val["hmacEnabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["hmacEnabled"]);
            setHmacEnabled( newItem );
        }
        
    }
    if(val.find("enableEncryption") != val.end())
    {
        if(!val["enableEncryption"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enableEncryption"]);
            setEnableEncryption( newItem );
        }
        
    }
    if(val.find("sharedKey") != val.end())
    {
        if(!val["sharedKey"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["sharedKey"]);
            setSharedKey( newItem );
        }
        
    }
    if(val.find("hmacSharedKeyTTL") != val.end())
    {
        if(!val["hmacSharedKeyTTL"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["hmacSharedKeyTTL"]);
            setHmacSharedKeyTTL( newItem );
        }
        
    }
    if(val.find("backoffStandbyFactor") != val.end())
    {
        if(!val["backoffStandbyFactor"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["backoffStandbyFactor"]);
            setBackoffStandbyFactor( newItem );
        }
        
    }
    if(val.find("backoffStableFactor") != val.end())
    {
        if(!val["backoffStableFactor"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["backoffStableFactor"]);
            setBackoffStableFactor( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger OrgApacheSlingDiscoveryOakConfigProperties::getConnectorPingTimeout() const
{
    return m_ConnectorPingTimeout;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setConnectorPingTimeout(ConfigNodePropertyInteger const& value)
{
    m_ConnectorPingTimeout = value;
    m_ConnectorPingTimeoutIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::connectorPingTimeoutIsSet() const
{
    return m_ConnectorPingTimeoutIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetConnectorPingTimeout()
{
    m_ConnectorPingTimeoutIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDiscoveryOakConfigProperties::getConnectorPingInterval() const
{
    return m_ConnectorPingInterval;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setConnectorPingInterval(ConfigNodePropertyInteger const& value)
{
    m_ConnectorPingInterval = value;
    m_ConnectorPingIntervalIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::connectorPingIntervalIsSet() const
{
    return m_ConnectorPingIntervalIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetConnectorPingInterval()
{
    m_ConnectorPingIntervalIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDiscoveryOakConfigProperties::getDiscoveryLiteCheckInterval() const
{
    return m_DiscoveryLiteCheckInterval;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setDiscoveryLiteCheckInterval(ConfigNodePropertyInteger const& value)
{
    m_DiscoveryLiteCheckInterval = value;
    m_DiscoveryLiteCheckIntervalIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::discoveryLiteCheckIntervalIsSet() const
{
    return m_DiscoveryLiteCheckIntervalIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetDiscoveryLiteCheckInterval()
{
    m_DiscoveryLiteCheckIntervalIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDiscoveryOakConfigProperties::getClusterSyncServiceTimeout() const
{
    return m_ClusterSyncServiceTimeout;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setClusterSyncServiceTimeout(ConfigNodePropertyInteger const& value)
{
    m_ClusterSyncServiceTimeout = value;
    m_ClusterSyncServiceTimeoutIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::clusterSyncServiceTimeoutIsSet() const
{
    return m_ClusterSyncServiceTimeoutIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetClusterSyncServiceTimeout()
{
    m_ClusterSyncServiceTimeoutIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDiscoveryOakConfigProperties::getClusterSyncServiceInterval() const
{
    return m_ClusterSyncServiceInterval;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setClusterSyncServiceInterval(ConfigNodePropertyInteger const& value)
{
    m_ClusterSyncServiceInterval = value;
    m_ClusterSyncServiceIntervalIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::clusterSyncServiceIntervalIsSet() const
{
    return m_ClusterSyncServiceIntervalIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetClusterSyncServiceInterval()
{
    m_ClusterSyncServiceIntervalIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDiscoveryOakConfigProperties::getEnableSyncToken() const
{
    return m_EnableSyncToken;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setEnableSyncToken(ConfigNodePropertyBoolean const& value)
{
    m_EnableSyncToken = value;
    m_EnableSyncTokenIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::enableSyncTokenIsSet() const
{
    return m_EnableSyncTokenIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetEnableSyncToken()
{
    m_EnableSyncTokenIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDiscoveryOakConfigProperties::getMinEventDelay() const
{
    return m_MinEventDelay;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setMinEventDelay(ConfigNodePropertyInteger const& value)
{
    m_MinEventDelay = value;
    m_MinEventDelayIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::minEventDelayIsSet() const
{
    return m_MinEventDelayIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetMinEventDelay()
{
    m_MinEventDelayIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDiscoveryOakConfigProperties::getSocketConnectTimeout() const
{
    return m_SocketConnectTimeout;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setSocketConnectTimeout(ConfigNodePropertyInteger const& value)
{
    m_SocketConnectTimeout = value;
    m_SocketConnectTimeoutIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::socketConnectTimeoutIsSet() const
{
    return m_SocketConnectTimeoutIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetSocketConnectTimeout()
{
    m_SocketConnectTimeoutIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDiscoveryOakConfigProperties::getSoTimeout() const
{
    return m_SoTimeout;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setSoTimeout(ConfigNodePropertyInteger const& value)
{
    m_SoTimeout = value;
    m_SoTimeoutIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::soTimeoutIsSet() const
{
    return m_SoTimeoutIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetSoTimeout()
{
    m_SoTimeoutIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDiscoveryOakConfigProperties::getTopologyConnectorUrls() const
{
    return m_TopologyConnectorUrls;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setTopologyConnectorUrls(ConfigNodePropertyArray const& value)
{
    m_TopologyConnectorUrls = value;
    m_TopologyConnectorUrlsIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::topologyConnectorUrlsIsSet() const
{
    return m_TopologyConnectorUrlsIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetTopologyConnectorUrls()
{
    m_TopologyConnectorUrlsIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDiscoveryOakConfigProperties::getTopologyConnectorWhitelist() const
{
    return m_TopologyConnectorWhitelist;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setTopologyConnectorWhitelist(ConfigNodePropertyArray const& value)
{
    m_TopologyConnectorWhitelist = value;
    m_TopologyConnectorWhitelistIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::topologyConnectorWhitelistIsSet() const
{
    return m_TopologyConnectorWhitelistIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetTopologyConnectorWhitelist()
{
    m_TopologyConnectorWhitelistIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDiscoveryOakConfigProperties::getAutoStopLocalLoopEnabled() const
{
    return m_AutoStopLocalLoopEnabled;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setAutoStopLocalLoopEnabled(ConfigNodePropertyBoolean const& value)
{
    m_AutoStopLocalLoopEnabled = value;
    m_AutoStopLocalLoopEnabledIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::autoStopLocalLoopEnabledIsSet() const
{
    return m_AutoStopLocalLoopEnabledIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetAutoStopLocalLoopEnabled()
{
    m_AutoStopLocalLoopEnabledIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDiscoveryOakConfigProperties::getGzipConnectorRequestsEnabled() const
{
    return m_GzipConnectorRequestsEnabled;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setGzipConnectorRequestsEnabled(ConfigNodePropertyBoolean const& value)
{
    m_GzipConnectorRequestsEnabled = value;
    m_GzipConnectorRequestsEnabledIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::gzipConnectorRequestsEnabledIsSet() const
{
    return m_GzipConnectorRequestsEnabledIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetGzipConnectorRequestsEnabled()
{
    m_GzipConnectorRequestsEnabledIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDiscoveryOakConfigProperties::getHmacEnabled() const
{
    return m_HmacEnabled;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setHmacEnabled(ConfigNodePropertyBoolean const& value)
{
    m_HmacEnabled = value;
    m_HmacEnabledIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::hmacEnabledIsSet() const
{
    return m_HmacEnabledIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetHmacEnabled()
{
    m_HmacEnabledIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDiscoveryOakConfigProperties::getEnableEncryption() const
{
    return m_EnableEncryption;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setEnableEncryption(ConfigNodePropertyBoolean const& value)
{
    m_EnableEncryption = value;
    m_EnableEncryptionIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::enableEncryptionIsSet() const
{
    return m_EnableEncryptionIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetEnableEncryption()
{
    m_EnableEncryptionIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDiscoveryOakConfigProperties::getSharedKey() const
{
    return m_SharedKey;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setSharedKey(ConfigNodePropertyString const& value)
{
    m_SharedKey = value;
    m_SharedKeyIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::sharedKeyIsSet() const
{
    return m_SharedKeyIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetSharedKey()
{
    m_SharedKeyIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDiscoveryOakConfigProperties::getHmacSharedKeyTTL() const
{
    return m_HmacSharedKeyTTL;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setHmacSharedKeyTTL(ConfigNodePropertyInteger const& value)
{
    m_HmacSharedKeyTTL = value;
    m_HmacSharedKeyTTLIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::hmacSharedKeyTTLIsSet() const
{
    return m_HmacSharedKeyTTLIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetHmacSharedKeyTTL()
{
    m_HmacSharedKeyTTLIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDiscoveryOakConfigProperties::getBackoffStandbyFactor() const
{
    return m_BackoffStandbyFactor;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setBackoffStandbyFactor(ConfigNodePropertyString const& value)
{
    m_BackoffStandbyFactor = value;
    m_BackoffStandbyFactorIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::backoffStandbyFactorIsSet() const
{
    return m_BackoffStandbyFactorIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetBackoffStandbyFactor()
{
    m_BackoffStandbyFactorIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDiscoveryOakConfigProperties::getBackoffStableFactor() const
{
    return m_BackoffStableFactor;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setBackoffStableFactor(ConfigNodePropertyString const& value)
{
    m_BackoffStableFactor = value;
    m_BackoffStableFactorIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::backoffStableFactorIsSet() const
{
    return m_BackoffStableFactorIsSet;
}
void OrgApacheSlingDiscoveryOakConfigProperties::unsetBackoffStableFactor()
{
    m_BackoffStableFactorIsSet = false;
}

}
}
}
}

