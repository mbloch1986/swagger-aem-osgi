/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties.h
 *
 * 
 */

#ifndef OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties_H_
#define OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties
{
public:
    OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties();
    virtual ~OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepositoryHome() const;
    void setRepositoryHome(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTarmkMode() const;
    void setTarmkMode(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTarmkSize() const;
    void setTarmkSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSegmentCacheSize() const;
    void setSegmentCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getStringCacheSize() const;
    void setStringCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTemplateCacheSize() const;
    void setTemplateCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getStringDeduplicationCacheSize() const;
    void setStringDeduplicationCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTemplateDeduplicationCacheSize() const;
    void setTemplateDeduplicationCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getNodeDeduplicationCacheSize() const;
    void setNodeDeduplicationCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPauseCompaction() const;
    void setPauseCompaction(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionRetryCount() const;
    void setCompactionRetryCount(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionForceTimeout() const;
    void setCompactionForceTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionSizeDeltaEstimation() const;
    void setCompactionSizeDeltaEstimation(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCompactionDisableEstimation() const;
    void setCompactionDisableEstimation(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionRetainedGenerations() const;
    void setCompactionRetainedGenerations(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionMemoryThreshold() const;
    void setCompactionMemoryThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionProgressLog() const;
    void setCompactionProgressLog(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getStandby() const;
    void setStandby(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCustomBlobStore() const;
    void setCustomBlobStore(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCustomSegmentStore() const;
    void setCustomSegmentStore(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSplitPersistence() const;
    void setSplitPersistence(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepositoryBackupDir() const;
    void setRepositoryBackupDir(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBlobGcMaxAgeInSecs() const;
    void setBlobGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBlobTrackSnapshotIntervalInSecs() const;
    void setBlobTrackSnapshotIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRole() const;
    void setRole(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getRegisterDescriptors() const;
    void setRegisterDescriptors(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDispatchChanges() const;
    void setDispatchChanges(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Repository_home;
    std::shared_ptr<ConfigNodePropertyString> m_Tarmk_mode;
    std::shared_ptr<ConfigNodePropertyInteger> m_Tarmk_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_SegmentCache_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_StringCache_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_TemplateCache_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_StringDeduplicationCache_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_TemplateDeduplicationCache_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_NodeDeduplicationCache_size;
    std::shared_ptr<ConfigNodePropertyBoolean> m_PauseCompaction;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_retryCount;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_force_timeout;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_sizeDeltaEstimation;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Compaction_disableEstimation;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_retainedGenerations;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_memoryThreshold;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_progressLog;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Standby;
    std::shared_ptr<ConfigNodePropertyBoolean> m_CustomBlobStore;
    std::shared_ptr<ConfigNodePropertyBoolean> m_CustomSegmentStore;
    std::shared_ptr<ConfigNodePropertyBoolean> m_SplitPersistence;
    std::shared_ptr<ConfigNodePropertyString> m_Repository_backup_dir;
    std::shared_ptr<ConfigNodePropertyInteger> m_BlobGcMaxAgeInSecs;
    std::shared_ptr<ConfigNodePropertyInteger> m_BlobTrackSnapshotIntervalInSecs;
    std::shared_ptr<ConfigNodePropertyString> m_Role;
    std::shared_ptr<ConfigNodePropertyBoolean> m_RegisterDescriptors;
    std::shared_ptr<ConfigNodePropertyBoolean> m_DispatchChanges;
};

}
}
}
}

#endif /* OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties_H_ */
