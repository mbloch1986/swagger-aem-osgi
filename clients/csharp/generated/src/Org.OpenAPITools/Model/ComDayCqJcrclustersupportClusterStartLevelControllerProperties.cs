/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqJcrclustersupportClusterStartLevelControllerProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqJcrclustersupportClusterStartLevelControllerProperties :  IEquatable<ComDayCqJcrclustersupportClusterStartLevelControllerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqJcrclustersupportClusterStartLevelControllerProperties" /> class.
        /// </summary>
        /// <param name="clusterLevelEnable">clusterLevelEnable.</param>
        /// <param name="clusterMasterLevel">clusterMasterLevel.</param>
        /// <param name="clusterSlaveLevel">clusterSlaveLevel.</param>
        public ComDayCqJcrclustersupportClusterStartLevelControllerProperties(ConfigNodePropertyBoolean clusterLevelEnable = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger clusterMasterLevel = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterSlaveLevel = default(ConfigNodePropertyInteger))
        {
            this.ClusterLevelEnable = clusterLevelEnable;
            this.ClusterMasterLevel = clusterMasterLevel;
            this.ClusterSlaveLevel = clusterSlaveLevel;
        }
        
        /// <summary>
        /// Gets or Sets ClusterLevelEnable
        /// </summary>
        [DataMember(Name="cluster.level.enable", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ClusterLevelEnable { get; set; }

        /// <summary>
        /// Gets or Sets ClusterMasterLevel
        /// </summary>
        [DataMember(Name="cluster.master.level", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterMasterLevel { get; set; }

        /// <summary>
        /// Gets or Sets ClusterSlaveLevel
        /// </summary>
        [DataMember(Name="cluster.slave.level", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterSlaveLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqJcrclustersupportClusterStartLevelControllerProperties {\n");
            sb.Append("  ClusterLevelEnable: ").Append(ClusterLevelEnable).Append("\n");
            sb.Append("  ClusterMasterLevel: ").Append(ClusterMasterLevel).Append("\n");
            sb.Append("  ClusterSlaveLevel: ").Append(ClusterSlaveLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqJcrclustersupportClusterStartLevelControllerProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqJcrclustersupportClusterStartLevelControllerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqJcrclustersupportClusterStartLevelControllerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqJcrclustersupportClusterStartLevelControllerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClusterLevelEnable == input.ClusterLevelEnable ||
                    (this.ClusterLevelEnable != null &&
                    this.ClusterLevelEnable.Equals(input.ClusterLevelEnable))
                ) && 
                (
                    this.ClusterMasterLevel == input.ClusterMasterLevel ||
                    (this.ClusterMasterLevel != null &&
                    this.ClusterMasterLevel.Equals(input.ClusterMasterLevel))
                ) && 
                (
                    this.ClusterSlaveLevel == input.ClusterSlaveLevel ||
                    (this.ClusterSlaveLevel != null &&
                    this.ClusterSlaveLevel.Equals(input.ClusterSlaveLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClusterLevelEnable != null)
                    hashCode = hashCode * 59 + this.ClusterLevelEnable.GetHashCode();
                if (this.ClusterMasterLevel != null)
                    hashCode = hashCode * 59 + this.ClusterMasterLevel.GetHashCode();
                if (this.ClusterSlaveLevel != null)
                    hashCode = hashCode * 59 + this.ClusterSlaveLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
