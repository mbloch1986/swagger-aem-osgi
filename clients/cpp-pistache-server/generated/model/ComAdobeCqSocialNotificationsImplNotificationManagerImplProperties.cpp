/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties::ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties()
{
    m_Max_unread_notification_countIsSet = false;
    
}

ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties::~ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties()
{
}

void ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Max_unread_notification_countIsSet)
    {
        val["max.unread.notification.count"] = ModelBase::toJson(m_Max_unread_notification_count);
    }
    

    return val;
}

void ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("max.unread.notification.count") != val.end())
    {
        if(!val["max.unread.notification.count"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["max.unread.notification.count"]);
            setMaxUnreadNotificationCount( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties::getMaxUnreadNotificationCount() const
{
    return m_Max_unread_notification_count;
}
void ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties::setMaxUnreadNotificationCount(ConfigNodePropertyInteger const& value)
{
    m_Max_unread_notification_count = value;
    m_Max_unread_notification_countIsSet = true;
}
bool ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties::maxUnreadNotificationCountIsSet() const
{
    return m_Max_unread_notification_countIsSet;
}
void ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties::unsetMax_unread_notification_count()
{
    m_Max_unread_notification_countIsSet = false;
}

}
}
}
}

