/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties() {
    init();
}

OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::~OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties() {
    this->cleanup();
}

void
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::init() {
    cq_dam_expiry_notification_scheduler_istimebased = new OAIConfigNodePropertyBoolean();
    m_cq_dam_expiry_notification_scheduler_istimebased_isSet = false;
    cq_dam_expiry_notification_scheduler_timebased_rule = new OAIConfigNodePropertyString();
    m_cq_dam_expiry_notification_scheduler_timebased_rule_isSet = false;
    cq_dam_expiry_notification_scheduler_period_rule = new OAIConfigNodePropertyInteger();
    m_cq_dam_expiry_notification_scheduler_period_rule_isSet = false;
    send_email = new OAIConfigNodePropertyBoolean();
    m_send_email_isSet = false;
    asset_expired_limit = new OAIConfigNodePropertyInteger();
    m_asset_expired_limit_isSet = false;
    prior_notification_seconds = new OAIConfigNodePropertyInteger();
    m_prior_notification_seconds_isSet = false;
    cq_dam_expiry_notification_url_protocol = new OAIConfigNodePropertyString();
    m_cq_dam_expiry_notification_url_protocol_isSet = false;
}

void
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::cleanup() {
    if(cq_dam_expiry_notification_scheduler_istimebased != nullptr) { 
        delete cq_dam_expiry_notification_scheduler_istimebased;
    }
    if(cq_dam_expiry_notification_scheduler_timebased_rule != nullptr) { 
        delete cq_dam_expiry_notification_scheduler_timebased_rule;
    }
    if(cq_dam_expiry_notification_scheduler_period_rule != nullptr) { 
        delete cq_dam_expiry_notification_scheduler_period_rule;
    }
    if(send_email != nullptr) { 
        delete send_email;
    }
    if(asset_expired_limit != nullptr) { 
        delete asset_expired_limit;
    }
    if(prior_notification_seconds != nullptr) { 
        delete prior_notification_seconds;
    }
    if(cq_dam_expiry_notification_url_protocol != nullptr) { 
        delete cq_dam_expiry_notification_url_protocol;
    }
}

OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties*
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&cq_dam_expiry_notification_scheduler_istimebased, pJson["cq.dam.expiry.notification.scheduler.istimebased"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&cq_dam_expiry_notification_scheduler_timebased_rule, pJson["cq.dam.expiry.notification.scheduler.timebased.rule"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&cq_dam_expiry_notification_scheduler_period_rule, pJson["cq.dam.expiry.notification.scheduler.period.rule"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&send_email, pJson["send_email"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&asset_expired_limit, pJson["asset_expired_limit"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&prior_notification_seconds, pJson["prior_notification_seconds"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cq_dam_expiry_notification_url_protocol, pJson["cq.dam.expiry.notification.url.protocol"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::asJsonObject() {
    QJsonObject obj;
    if((cq_dam_expiry_notification_scheduler_istimebased != nullptr) && (cq_dam_expiry_notification_scheduler_istimebased->isSet())){
        toJsonValue(QString("cq.dam.expiry.notification.scheduler.istimebased"), cq_dam_expiry_notification_scheduler_istimebased, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((cq_dam_expiry_notification_scheduler_timebased_rule != nullptr) && (cq_dam_expiry_notification_scheduler_timebased_rule->isSet())){
        toJsonValue(QString("cq.dam.expiry.notification.scheduler.timebased.rule"), cq_dam_expiry_notification_scheduler_timebased_rule, obj, QString("OAIConfigNodePropertyString"));
    }
    if((cq_dam_expiry_notification_scheduler_period_rule != nullptr) && (cq_dam_expiry_notification_scheduler_period_rule->isSet())){
        toJsonValue(QString("cq.dam.expiry.notification.scheduler.period.rule"), cq_dam_expiry_notification_scheduler_period_rule, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((send_email != nullptr) && (send_email->isSet())){
        toJsonValue(QString("send_email"), send_email, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((asset_expired_limit != nullptr) && (asset_expired_limit->isSet())){
        toJsonValue(QString("asset_expired_limit"), asset_expired_limit, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((prior_notification_seconds != nullptr) && (prior_notification_seconds->isSet())){
        toJsonValue(QString("prior_notification_seconds"), prior_notification_seconds, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cq_dam_expiry_notification_url_protocol != nullptr) && (cq_dam_expiry_notification_url_protocol->isSet())){
        toJsonValue(QString("cq.dam.expiry.notification.url.protocol"), cq_dam_expiry_notification_url_protocol, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::getCqDamExpiryNotificationSchedulerIstimebased() {
    return cq_dam_expiry_notification_scheduler_istimebased;
}
void
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::setCqDamExpiryNotificationSchedulerIstimebased(OAIConfigNodePropertyBoolean* cq_dam_expiry_notification_scheduler_istimebased) {
    this->cq_dam_expiry_notification_scheduler_istimebased = cq_dam_expiry_notification_scheduler_istimebased;
    this->m_cq_dam_expiry_notification_scheduler_istimebased_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::getCqDamExpiryNotificationSchedulerTimebasedRule() {
    return cq_dam_expiry_notification_scheduler_timebased_rule;
}
void
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::setCqDamExpiryNotificationSchedulerTimebasedRule(OAIConfigNodePropertyString* cq_dam_expiry_notification_scheduler_timebased_rule) {
    this->cq_dam_expiry_notification_scheduler_timebased_rule = cq_dam_expiry_notification_scheduler_timebased_rule;
    this->m_cq_dam_expiry_notification_scheduler_timebased_rule_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::getCqDamExpiryNotificationSchedulerPeriodRule() {
    return cq_dam_expiry_notification_scheduler_period_rule;
}
void
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::setCqDamExpiryNotificationSchedulerPeriodRule(OAIConfigNodePropertyInteger* cq_dam_expiry_notification_scheduler_period_rule) {
    this->cq_dam_expiry_notification_scheduler_period_rule = cq_dam_expiry_notification_scheduler_period_rule;
    this->m_cq_dam_expiry_notification_scheduler_period_rule_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::getSendEmail() {
    return send_email;
}
void
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::setSendEmail(OAIConfigNodePropertyBoolean* send_email) {
    this->send_email = send_email;
    this->m_send_email_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::getAssetExpiredLimit() {
    return asset_expired_limit;
}
void
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::setAssetExpiredLimit(OAIConfigNodePropertyInteger* asset_expired_limit) {
    this->asset_expired_limit = asset_expired_limit;
    this->m_asset_expired_limit_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::getPriorNotificationSeconds() {
    return prior_notification_seconds;
}
void
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::setPriorNotificationSeconds(OAIConfigNodePropertyInteger* prior_notification_seconds) {
    this->prior_notification_seconds = prior_notification_seconds;
    this->m_prior_notification_seconds_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::getCqDamExpiryNotificationUrlProtocol() {
    return cq_dam_expiry_notification_url_protocol;
}
void
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::setCqDamExpiryNotificationUrlProtocol(OAIConfigNodePropertyString* cq_dam_expiry_notification_url_protocol) {
    this->cq_dam_expiry_notification_url_protocol = cq_dam_expiry_notification_url_protocol;
    this->m_cq_dam_expiry_notification_url_protocol_isSet = true;
}


bool
OAIComDayCqDamCoreImplExpiryNotificationJobImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(cq_dam_expiry_notification_scheduler_istimebased != nullptr && cq_dam_expiry_notification_scheduler_istimebased->isSet()){ isObjectUpdated = true; break;}
        if(cq_dam_expiry_notification_scheduler_timebased_rule != nullptr && cq_dam_expiry_notification_scheduler_timebased_rule->isSet()){ isObjectUpdated = true; break;}
        if(cq_dam_expiry_notification_scheduler_period_rule != nullptr && cq_dam_expiry_notification_scheduler_period_rule->isSet()){ isObjectUpdated = true; break;}
        if(send_email != nullptr && send_email->isSet()){ isObjectUpdated = true; break;}
        if(asset_expired_limit != nullptr && asset_expired_limit->isSet()){ isObjectUpdated = true; break;}
        if(prior_notification_seconds != nullptr && prior_notification_seconds->isSet()){ isObjectUpdated = true; break;}
        if(cq_dam_expiry_notification_url_protocol != nullptr && cq_dam_expiry_notification_url_protocol->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

