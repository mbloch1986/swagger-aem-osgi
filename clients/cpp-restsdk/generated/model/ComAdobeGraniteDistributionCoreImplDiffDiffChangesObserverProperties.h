/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties
    : public ModelBase
{
public:
    ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties();
    virtual ~ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();
    void setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAgentName() const;
    bool agentNameIsSet() const;
    void unsetAgentName();
    void setAgentName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDiffPath() const;
    bool diffPathIsSet() const;
    void unsetDiffPath();
    void setDiffPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getObservedPath() const;
    bool observedPathIsSet() const;
    void unsetObservedPath();
    void setObservedPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getServiceName() const;
    bool serviceNameIsSet() const;
    void unsetServiceName();
    void setServiceName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPropertyNames() const;
    bool propertyNamesIsSet() const;
    void unsetPropertyNames();
    void setPropertyNames(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getDistributionDelay() const;
    bool distributionDelayIsSet() const;
    void unsetDistributionDelay();
    void setDistributionDelay(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getServiceUserTarget() const;
    bool serviceUserTargetIsSet() const;
    void unsetServiceUser_target();
    void setServiceUserTarget(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enabled;
    bool m_EnabledIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_AgentName;
    bool m_AgentNameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_DiffPath;
    bool m_DiffPathIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_ObservedPath;
    bool m_ObservedPathIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_ServiceName;
    bool m_ServiceNameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_PropertyNames;
    bool m_PropertyNamesIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_DistributionDelay;
    bool m_DistributionDelayIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_ServiceUser_target;
    bool m_ServiceUser_targetIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties_H_ */
