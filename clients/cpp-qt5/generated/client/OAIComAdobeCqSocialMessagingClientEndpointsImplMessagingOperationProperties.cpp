/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties() {
    init();
}

OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::~OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::init() {
    message_properties = new OAIConfigNodePropertyArray();
    m_message_properties_isSet = false;
    message_box_size_limit = new OAIConfigNodePropertyInteger();
    m_message_box_size_limit_isSet = false;
    message_count_limit = new OAIConfigNodePropertyInteger();
    m_message_count_limit_isSet = false;
    notify_failure = new OAIConfigNodePropertyBoolean();
    m_notify_failure_isSet = false;
    failure_message_from = new OAIConfigNodePropertyString();
    m_failure_message_from_isSet = false;
    failure_template_path = new OAIConfigNodePropertyString();
    m_failure_template_path_isSet = false;
    max_retries = new OAIConfigNodePropertyInteger();
    m_max_retries_isSet = false;
    min_wait_between_retries = new OAIConfigNodePropertyInteger();
    m_min_wait_between_retries_isSet = false;
    count_update_pool_size = new OAIConfigNodePropertyInteger();
    m_count_update_pool_size_isSet = false;
    inbox_path = new OAIConfigNodePropertyString();
    m_inbox_path_isSet = false;
    sentitems_path = new OAIConfigNodePropertyString();
    m_sentitems_path_isSet = false;
    support_attachments = new OAIConfigNodePropertyBoolean();
    m_support_attachments_isSet = false;
    support_group_messaging = new OAIConfigNodePropertyBoolean();
    m_support_group_messaging_isSet = false;
    max_total_recipients = new OAIConfigNodePropertyInteger();
    m_max_total_recipients_isSet = false;
    batch_size = new OAIConfigNodePropertyInteger();
    m_batch_size_isSet = false;
    max_total_attachment_size = new OAIConfigNodePropertyInteger();
    m_max_total_attachment_size_isSet = false;
    attachment_type_blacklist = new OAIConfigNodePropertyArray();
    m_attachment_type_blacklist_isSet = false;
    allowed_attachment_types = new OAIConfigNodePropertyArray();
    m_allowed_attachment_types_isSet = false;
    service_selector = new OAIConfigNodePropertyString();
    m_service_selector_isSet = false;
    field_whitelist = new OAIConfigNodePropertyArray();
    m_field_whitelist_isSet = false;
}

void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::cleanup() {
    if(message_properties != nullptr) { 
        delete message_properties;
    }
    if(message_box_size_limit != nullptr) { 
        delete message_box_size_limit;
    }
    if(message_count_limit != nullptr) { 
        delete message_count_limit;
    }
    if(notify_failure != nullptr) { 
        delete notify_failure;
    }
    if(failure_message_from != nullptr) { 
        delete failure_message_from;
    }
    if(failure_template_path != nullptr) { 
        delete failure_template_path;
    }
    if(max_retries != nullptr) { 
        delete max_retries;
    }
    if(min_wait_between_retries != nullptr) { 
        delete min_wait_between_retries;
    }
    if(count_update_pool_size != nullptr) { 
        delete count_update_pool_size;
    }
    if(inbox_path != nullptr) { 
        delete inbox_path;
    }
    if(sentitems_path != nullptr) { 
        delete sentitems_path;
    }
    if(support_attachments != nullptr) { 
        delete support_attachments;
    }
    if(support_group_messaging != nullptr) { 
        delete support_group_messaging;
    }
    if(max_total_recipients != nullptr) { 
        delete max_total_recipients;
    }
    if(batch_size != nullptr) { 
        delete batch_size;
    }
    if(max_total_attachment_size != nullptr) { 
        delete max_total_attachment_size;
    }
    if(attachment_type_blacklist != nullptr) { 
        delete attachment_type_blacklist;
    }
    if(allowed_attachment_types != nullptr) { 
        delete allowed_attachment_types;
    }
    if(service_selector != nullptr) { 
        delete service_selector;
    }
    if(field_whitelist != nullptr) { 
        delete field_whitelist;
    }
}

OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&message_properties, pJson["message.properties"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&message_box_size_limit, pJson["messageBoxSizeLimit"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&message_count_limit, pJson["messageCountLimit"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&notify_failure, pJson["notifyFailure"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&failure_message_from, pJson["failureMessageFrom"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&failure_template_path, pJson["failureTemplatePath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&max_retries, pJson["maxRetries"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&min_wait_between_retries, pJson["minWaitBetweenRetries"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&count_update_pool_size, pJson["countUpdatePoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&inbox_path, pJson["inbox.path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sentitems_path, pJson["sentitems.path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&support_attachments, pJson["supportAttachments"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&support_group_messaging, pJson["supportGroupMessaging"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&max_total_recipients, pJson["maxTotalRecipients"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&batch_size, pJson["batchSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_total_attachment_size, pJson["maxTotalAttachmentSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&attachment_type_blacklist, pJson["attachmentTypeBlacklist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&allowed_attachment_types, pJson["allowedAttachmentTypes"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&service_selector, pJson["serviceSelector"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&field_whitelist, pJson["fieldWhitelist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::asJsonObject() {
    QJsonObject obj;
    if((message_properties != nullptr) && (message_properties->isSet())){
        toJsonValue(QString("message.properties"), message_properties, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((message_box_size_limit != nullptr) && (message_box_size_limit->isSet())){
        toJsonValue(QString("messageBoxSizeLimit"), message_box_size_limit, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((message_count_limit != nullptr) && (message_count_limit->isSet())){
        toJsonValue(QString("messageCountLimit"), message_count_limit, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((notify_failure != nullptr) && (notify_failure->isSet())){
        toJsonValue(QString("notifyFailure"), notify_failure, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((failure_message_from != nullptr) && (failure_message_from->isSet())){
        toJsonValue(QString("failureMessageFrom"), failure_message_from, obj, QString("OAIConfigNodePropertyString"));
    }
    if((failure_template_path != nullptr) && (failure_template_path->isSet())){
        toJsonValue(QString("failureTemplatePath"), failure_template_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((max_retries != nullptr) && (max_retries->isSet())){
        toJsonValue(QString("maxRetries"), max_retries, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((min_wait_between_retries != nullptr) && (min_wait_between_retries->isSet())){
        toJsonValue(QString("minWaitBetweenRetries"), min_wait_between_retries, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((count_update_pool_size != nullptr) && (count_update_pool_size->isSet())){
        toJsonValue(QString("countUpdatePoolSize"), count_update_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((inbox_path != nullptr) && (inbox_path->isSet())){
        toJsonValue(QString("inbox.path"), inbox_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sentitems_path != nullptr) && (sentitems_path->isSet())){
        toJsonValue(QString("sentitems.path"), sentitems_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((support_attachments != nullptr) && (support_attachments->isSet())){
        toJsonValue(QString("supportAttachments"), support_attachments, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((support_group_messaging != nullptr) && (support_group_messaging->isSet())){
        toJsonValue(QString("supportGroupMessaging"), support_group_messaging, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((max_total_recipients != nullptr) && (max_total_recipients->isSet())){
        toJsonValue(QString("maxTotalRecipients"), max_total_recipients, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((batch_size != nullptr) && (batch_size->isSet())){
        toJsonValue(QString("batchSize"), batch_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_total_attachment_size != nullptr) && (max_total_attachment_size->isSet())){
        toJsonValue(QString("maxTotalAttachmentSize"), max_total_attachment_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((attachment_type_blacklist != nullptr) && (attachment_type_blacklist->isSet())){
        toJsonValue(QString("attachmentTypeBlacklist"), attachment_type_blacklist, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((allowed_attachment_types != nullptr) && (allowed_attachment_types->isSet())){
        toJsonValue(QString("allowedAttachmentTypes"), allowed_attachment_types, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((service_selector != nullptr) && (service_selector->isSet())){
        toJsonValue(QString("serviceSelector"), service_selector, obj, QString("OAIConfigNodePropertyString"));
    }
    if((field_whitelist != nullptr) && (field_whitelist->isSet())){
        toJsonValue(QString("fieldWhitelist"), field_whitelist, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageProperties() {
    return message_properties;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageProperties(OAIConfigNodePropertyArray* message_properties) {
    this->message_properties = message_properties;
    this->m_message_properties_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageBoxSizeLimit() {
    return message_box_size_limit;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageBoxSizeLimit(OAIConfigNodePropertyInteger* message_box_size_limit) {
    this->message_box_size_limit = message_box_size_limit;
    this->m_message_box_size_limit_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageCountLimit() {
    return message_count_limit;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageCountLimit(OAIConfigNodePropertyInteger* message_count_limit) {
    this->message_count_limit = message_count_limit;
    this->m_message_count_limit_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getNotifyFailure() {
    return notify_failure;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setNotifyFailure(OAIConfigNodePropertyBoolean* notify_failure) {
    this->notify_failure = notify_failure;
    this->m_notify_failure_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFailureMessageFrom() {
    return failure_message_from;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFailureMessageFrom(OAIConfigNodePropertyString* failure_message_from) {
    this->failure_message_from = failure_message_from;
    this->m_failure_message_from_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFailureTemplatePath() {
    return failure_template_path;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFailureTemplatePath(OAIConfigNodePropertyString* failure_template_path) {
    this->failure_template_path = failure_template_path;
    this->m_failure_template_path_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxRetries() {
    return max_retries;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxRetries(OAIConfigNodePropertyInteger* max_retries) {
    this->max_retries = max_retries;
    this->m_max_retries_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMinWaitBetweenRetries() {
    return min_wait_between_retries;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMinWaitBetweenRetries(OAIConfigNodePropertyInteger* min_wait_between_retries) {
    this->min_wait_between_retries = min_wait_between_retries;
    this->m_min_wait_between_retries_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getCountUpdatePoolSize() {
    return count_update_pool_size;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setCountUpdatePoolSize(OAIConfigNodePropertyInteger* count_update_pool_size) {
    this->count_update_pool_size = count_update_pool_size;
    this->m_count_update_pool_size_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getInboxPath() {
    return inbox_path;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setInboxPath(OAIConfigNodePropertyString* inbox_path) {
    this->inbox_path = inbox_path;
    this->m_inbox_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSentitemsPath() {
    return sentitems_path;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSentitemsPath(OAIConfigNodePropertyString* sentitems_path) {
    this->sentitems_path = sentitems_path;
    this->m_sentitems_path_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSupportAttachments() {
    return support_attachments;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSupportAttachments(OAIConfigNodePropertyBoolean* support_attachments) {
    this->support_attachments = support_attachments;
    this->m_support_attachments_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSupportGroupMessaging() {
    return support_group_messaging;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSupportGroupMessaging(OAIConfigNodePropertyBoolean* support_group_messaging) {
    this->support_group_messaging = support_group_messaging;
    this->m_support_group_messaging_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxTotalRecipients() {
    return max_total_recipients;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxTotalRecipients(OAIConfigNodePropertyInteger* max_total_recipients) {
    this->max_total_recipients = max_total_recipients;
    this->m_max_total_recipients_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getBatchSize() {
    return batch_size;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setBatchSize(OAIConfigNodePropertyInteger* batch_size) {
    this->batch_size = batch_size;
    this->m_batch_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxTotalAttachmentSize() {
    return max_total_attachment_size;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxTotalAttachmentSize(OAIConfigNodePropertyInteger* max_total_attachment_size) {
    this->max_total_attachment_size = max_total_attachment_size;
    this->m_max_total_attachment_size_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getAttachmentTypeBlacklist() {
    return attachment_type_blacklist;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setAttachmentTypeBlacklist(OAIConfigNodePropertyArray* attachment_type_blacklist) {
    this->attachment_type_blacklist = attachment_type_blacklist;
    this->m_attachment_type_blacklist_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getAllowedAttachmentTypes() {
    return allowed_attachment_types;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setAllowedAttachmentTypes(OAIConfigNodePropertyArray* allowed_attachment_types) {
    this->allowed_attachment_types = allowed_attachment_types;
    this->m_allowed_attachment_types_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getServiceSelector() {
    return service_selector;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setServiceSelector(OAIConfigNodePropertyString* service_selector) {
    this->service_selector = service_selector;
    this->m_service_selector_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFieldWhitelist() {
    return field_whitelist;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFieldWhitelist(OAIConfigNodePropertyArray* field_whitelist) {
    this->field_whitelist = field_whitelist;
    this->m_field_whitelist_isSet = true;
}


bool
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(message_properties != nullptr && message_properties->isSet()){ isObjectUpdated = true; break;}
        if(message_box_size_limit != nullptr && message_box_size_limit->isSet()){ isObjectUpdated = true; break;}
        if(message_count_limit != nullptr && message_count_limit->isSet()){ isObjectUpdated = true; break;}
        if(notify_failure != nullptr && notify_failure->isSet()){ isObjectUpdated = true; break;}
        if(failure_message_from != nullptr && failure_message_from->isSet()){ isObjectUpdated = true; break;}
        if(failure_template_path != nullptr && failure_template_path->isSet()){ isObjectUpdated = true; break;}
        if(max_retries != nullptr && max_retries->isSet()){ isObjectUpdated = true; break;}
        if(min_wait_between_retries != nullptr && min_wait_between_retries->isSet()){ isObjectUpdated = true; break;}
        if(count_update_pool_size != nullptr && count_update_pool_size->isSet()){ isObjectUpdated = true; break;}
        if(inbox_path != nullptr && inbox_path->isSet()){ isObjectUpdated = true; break;}
        if(sentitems_path != nullptr && sentitems_path->isSet()){ isObjectUpdated = true; break;}
        if(support_attachments != nullptr && support_attachments->isSet()){ isObjectUpdated = true; break;}
        if(support_group_messaging != nullptr && support_group_messaging->isSet()){ isObjectUpdated = true; break;}
        if(max_total_recipients != nullptr && max_total_recipients->isSet()){ isObjectUpdated = true; break;}
        if(batch_size != nullptr && batch_size->isSet()){ isObjectUpdated = true; break;}
        if(max_total_attachment_size != nullptr && max_total_attachment_size->isSet()){ isObjectUpdated = true; break;}
        if(attachment_type_blacklist != nullptr && attachment_type_blacklist->isSet()){ isObjectUpdated = true; break;}
        if(allowed_attachment_types != nullptr && allowed_attachment_types->isSet()){ isObjectUpdated = true; break;}
        if(service_selector != nullptr && service_selector->isSet()){ isObjectUpdated = true; break;}
        if(field_whitelist != nullptr && field_whitelist->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

