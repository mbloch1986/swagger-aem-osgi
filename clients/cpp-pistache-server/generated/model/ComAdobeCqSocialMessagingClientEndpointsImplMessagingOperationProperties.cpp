/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties()
{
    m_Message_propertiesIsSet = false;
    m_MessageBoxSizeLimitIsSet = false;
    m_MessageCountLimitIsSet = false;
    m_NotifyFailureIsSet = false;
    m_FailureMessageFromIsSet = false;
    m_FailureTemplatePathIsSet = false;
    m_MaxRetriesIsSet = false;
    m_MinWaitBetweenRetriesIsSet = false;
    m_CountUpdatePoolSizeIsSet = false;
    m_Inbox_pathIsSet = false;
    m_Sentitems_pathIsSet = false;
    m_SupportAttachmentsIsSet = false;
    m_SupportGroupMessagingIsSet = false;
    m_MaxTotalRecipientsIsSet = false;
    m_BatchSizeIsSet = false;
    m_MaxTotalAttachmentSizeIsSet = false;
    m_AttachmentTypeBlacklistIsSet = false;
    m_AllowedAttachmentTypesIsSet = false;
    m_ServiceSelectorIsSet = false;
    m_FieldWhitelistIsSet = false;
    
}

ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::~ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties()
{
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Message_propertiesIsSet)
    {
        val["message.properties"] = ModelBase::toJson(m_Message_properties);
    }
    if(m_MessageBoxSizeLimitIsSet)
    {
        val["messageBoxSizeLimit"] = ModelBase::toJson(m_MessageBoxSizeLimit);
    }
    if(m_MessageCountLimitIsSet)
    {
        val["messageCountLimit"] = ModelBase::toJson(m_MessageCountLimit);
    }
    if(m_NotifyFailureIsSet)
    {
        val["notifyFailure"] = ModelBase::toJson(m_NotifyFailure);
    }
    if(m_FailureMessageFromIsSet)
    {
        val["failureMessageFrom"] = ModelBase::toJson(m_FailureMessageFrom);
    }
    if(m_FailureTemplatePathIsSet)
    {
        val["failureTemplatePath"] = ModelBase::toJson(m_FailureTemplatePath);
    }
    if(m_MaxRetriesIsSet)
    {
        val["maxRetries"] = ModelBase::toJson(m_MaxRetries);
    }
    if(m_MinWaitBetweenRetriesIsSet)
    {
        val["minWaitBetweenRetries"] = ModelBase::toJson(m_MinWaitBetweenRetries);
    }
    if(m_CountUpdatePoolSizeIsSet)
    {
        val["countUpdatePoolSize"] = ModelBase::toJson(m_CountUpdatePoolSize);
    }
    if(m_Inbox_pathIsSet)
    {
        val["inbox.path"] = ModelBase::toJson(m_Inbox_path);
    }
    if(m_Sentitems_pathIsSet)
    {
        val["sentitems.path"] = ModelBase::toJson(m_Sentitems_path);
    }
    if(m_SupportAttachmentsIsSet)
    {
        val["supportAttachments"] = ModelBase::toJson(m_SupportAttachments);
    }
    if(m_SupportGroupMessagingIsSet)
    {
        val["supportGroupMessaging"] = ModelBase::toJson(m_SupportGroupMessaging);
    }
    if(m_MaxTotalRecipientsIsSet)
    {
        val["maxTotalRecipients"] = ModelBase::toJson(m_MaxTotalRecipients);
    }
    if(m_BatchSizeIsSet)
    {
        val["batchSize"] = ModelBase::toJson(m_BatchSize);
    }
    if(m_MaxTotalAttachmentSizeIsSet)
    {
        val["maxTotalAttachmentSize"] = ModelBase::toJson(m_MaxTotalAttachmentSize);
    }
    if(m_AttachmentTypeBlacklistIsSet)
    {
        val["attachmentTypeBlacklist"] = ModelBase::toJson(m_AttachmentTypeBlacklist);
    }
    if(m_AllowedAttachmentTypesIsSet)
    {
        val["allowedAttachmentTypes"] = ModelBase::toJson(m_AllowedAttachmentTypes);
    }
    if(m_ServiceSelectorIsSet)
    {
        val["serviceSelector"] = ModelBase::toJson(m_ServiceSelector);
    }
    if(m_FieldWhitelistIsSet)
    {
        val["fieldWhitelist"] = ModelBase::toJson(m_FieldWhitelist);
    }
    

    return val;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::fromJson(nlohmann::json& val)
{
    if(val.find("message.properties") != val.end())
    {
        if(!val["message.properties"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["message.properties"]);
            setMessageProperties( newItem );
        }
        
    }
    if(val.find("messageBoxSizeLimit") != val.end())
    {
        if(!val["messageBoxSizeLimit"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["messageBoxSizeLimit"]);
            setMessageBoxSizeLimit( newItem );
        }
        
    }
    if(val.find("messageCountLimit") != val.end())
    {
        if(!val["messageCountLimit"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["messageCountLimit"]);
            setMessageCountLimit( newItem );
        }
        
    }
    if(val.find("notifyFailure") != val.end())
    {
        if(!val["notifyFailure"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["notifyFailure"]);
            setNotifyFailure( newItem );
        }
        
    }
    if(val.find("failureMessageFrom") != val.end())
    {
        if(!val["failureMessageFrom"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["failureMessageFrom"]);
            setFailureMessageFrom( newItem );
        }
        
    }
    if(val.find("failureTemplatePath") != val.end())
    {
        if(!val["failureTemplatePath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["failureTemplatePath"]);
            setFailureTemplatePath( newItem );
        }
        
    }
    if(val.find("maxRetries") != val.end())
    {
        if(!val["maxRetries"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxRetries"]);
            setMaxRetries( newItem );
        }
        
    }
    if(val.find("minWaitBetweenRetries") != val.end())
    {
        if(!val["minWaitBetweenRetries"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["minWaitBetweenRetries"]);
            setMinWaitBetweenRetries( newItem );
        }
        
    }
    if(val.find("countUpdatePoolSize") != val.end())
    {
        if(!val["countUpdatePoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["countUpdatePoolSize"]);
            setCountUpdatePoolSize( newItem );
        }
        
    }
    if(val.find("inbox.path") != val.end())
    {
        if(!val["inbox.path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["inbox.path"]);
            setInboxPath( newItem );
        }
        
    }
    if(val.find("sentitems.path") != val.end())
    {
        if(!val["sentitems.path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["sentitems.path"]);
            setSentitemsPath( newItem );
        }
        
    }
    if(val.find("supportAttachments") != val.end())
    {
        if(!val["supportAttachments"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["supportAttachments"]);
            setSupportAttachments( newItem );
        }
        
    }
    if(val.find("supportGroupMessaging") != val.end())
    {
        if(!val["supportGroupMessaging"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["supportGroupMessaging"]);
            setSupportGroupMessaging( newItem );
        }
        
    }
    if(val.find("maxTotalRecipients") != val.end())
    {
        if(!val["maxTotalRecipients"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxTotalRecipients"]);
            setMaxTotalRecipients( newItem );
        }
        
    }
    if(val.find("batchSize") != val.end())
    {
        if(!val["batchSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["batchSize"]);
            setBatchSize( newItem );
        }
        
    }
    if(val.find("maxTotalAttachmentSize") != val.end())
    {
        if(!val["maxTotalAttachmentSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxTotalAttachmentSize"]);
            setMaxTotalAttachmentSize( newItem );
        }
        
    }
    if(val.find("attachmentTypeBlacklist") != val.end())
    {
        if(!val["attachmentTypeBlacklist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["attachmentTypeBlacklist"]);
            setAttachmentTypeBlacklist( newItem );
        }
        
    }
    if(val.find("allowedAttachmentTypes") != val.end())
    {
        if(!val["allowedAttachmentTypes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["allowedAttachmentTypes"]);
            setAllowedAttachmentTypes( newItem );
        }
        
    }
    if(val.find("serviceSelector") != val.end())
    {
        if(!val["serviceSelector"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["serviceSelector"]);
            setServiceSelector( newItem );
        }
        
    }
    if(val.find("fieldWhitelist") != val.end())
    {
        if(!val["fieldWhitelist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["fieldWhitelist"]);
            setFieldWhitelist( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageProperties() const
{
    return m_Message_properties;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageProperties(ConfigNodePropertyArray const& value)
{
    m_Message_properties = value;
    m_Message_propertiesIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::messagePropertiesIsSet() const
{
    return m_Message_propertiesIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMessage_properties()
{
    m_Message_propertiesIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageBoxSizeLimit() const
{
    return m_MessageBoxSizeLimit;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageBoxSizeLimit(ConfigNodePropertyInteger const& value)
{
    m_MessageBoxSizeLimit = value;
    m_MessageBoxSizeLimitIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::messageBoxSizeLimitIsSet() const
{
    return m_MessageBoxSizeLimitIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMessageBoxSizeLimit()
{
    m_MessageBoxSizeLimitIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageCountLimit() const
{
    return m_MessageCountLimit;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageCountLimit(ConfigNodePropertyInteger const& value)
{
    m_MessageCountLimit = value;
    m_MessageCountLimitIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::messageCountLimitIsSet() const
{
    return m_MessageCountLimitIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMessageCountLimit()
{
    m_MessageCountLimitIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getNotifyFailure() const
{
    return m_NotifyFailure;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setNotifyFailure(ConfigNodePropertyBoolean const& value)
{
    m_NotifyFailure = value;
    m_NotifyFailureIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::notifyFailureIsSet() const
{
    return m_NotifyFailureIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetNotifyFailure()
{
    m_NotifyFailureIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFailureMessageFrom() const
{
    return m_FailureMessageFrom;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFailureMessageFrom(ConfigNodePropertyString const& value)
{
    m_FailureMessageFrom = value;
    m_FailureMessageFromIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::failureMessageFromIsSet() const
{
    return m_FailureMessageFromIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetFailureMessageFrom()
{
    m_FailureMessageFromIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFailureTemplatePath() const
{
    return m_FailureTemplatePath;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFailureTemplatePath(ConfigNodePropertyString const& value)
{
    m_FailureTemplatePath = value;
    m_FailureTemplatePathIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::failureTemplatePathIsSet() const
{
    return m_FailureTemplatePathIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetFailureTemplatePath()
{
    m_FailureTemplatePathIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxRetries() const
{
    return m_MaxRetries;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxRetries(ConfigNodePropertyInteger const& value)
{
    m_MaxRetries = value;
    m_MaxRetriesIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::maxRetriesIsSet() const
{
    return m_MaxRetriesIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMaxRetries()
{
    m_MaxRetriesIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMinWaitBetweenRetries() const
{
    return m_MinWaitBetweenRetries;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMinWaitBetweenRetries(ConfigNodePropertyInteger const& value)
{
    m_MinWaitBetweenRetries = value;
    m_MinWaitBetweenRetriesIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::minWaitBetweenRetriesIsSet() const
{
    return m_MinWaitBetweenRetriesIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMinWaitBetweenRetries()
{
    m_MinWaitBetweenRetriesIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getCountUpdatePoolSize() const
{
    return m_CountUpdatePoolSize;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setCountUpdatePoolSize(ConfigNodePropertyInteger const& value)
{
    m_CountUpdatePoolSize = value;
    m_CountUpdatePoolSizeIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::countUpdatePoolSizeIsSet() const
{
    return m_CountUpdatePoolSizeIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetCountUpdatePoolSize()
{
    m_CountUpdatePoolSizeIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getInboxPath() const
{
    return m_Inbox_path;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setInboxPath(ConfigNodePropertyString const& value)
{
    m_Inbox_path = value;
    m_Inbox_pathIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::inboxPathIsSet() const
{
    return m_Inbox_pathIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetInbox_path()
{
    m_Inbox_pathIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSentitemsPath() const
{
    return m_Sentitems_path;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSentitemsPath(ConfigNodePropertyString const& value)
{
    m_Sentitems_path = value;
    m_Sentitems_pathIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::sentitemsPathIsSet() const
{
    return m_Sentitems_pathIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetSentitems_path()
{
    m_Sentitems_pathIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSupportAttachments() const
{
    return m_SupportAttachments;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSupportAttachments(ConfigNodePropertyBoolean const& value)
{
    m_SupportAttachments = value;
    m_SupportAttachmentsIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::supportAttachmentsIsSet() const
{
    return m_SupportAttachmentsIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetSupportAttachments()
{
    m_SupportAttachmentsIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSupportGroupMessaging() const
{
    return m_SupportGroupMessaging;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSupportGroupMessaging(ConfigNodePropertyBoolean const& value)
{
    m_SupportGroupMessaging = value;
    m_SupportGroupMessagingIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::supportGroupMessagingIsSet() const
{
    return m_SupportGroupMessagingIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetSupportGroupMessaging()
{
    m_SupportGroupMessagingIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxTotalRecipients() const
{
    return m_MaxTotalRecipients;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxTotalRecipients(ConfigNodePropertyInteger const& value)
{
    m_MaxTotalRecipients = value;
    m_MaxTotalRecipientsIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::maxTotalRecipientsIsSet() const
{
    return m_MaxTotalRecipientsIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMaxTotalRecipients()
{
    m_MaxTotalRecipientsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getBatchSize() const
{
    return m_BatchSize;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setBatchSize(ConfigNodePropertyInteger const& value)
{
    m_BatchSize = value;
    m_BatchSizeIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::batchSizeIsSet() const
{
    return m_BatchSizeIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetBatchSize()
{
    m_BatchSizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxTotalAttachmentSize() const
{
    return m_MaxTotalAttachmentSize;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxTotalAttachmentSize(ConfigNodePropertyInteger const& value)
{
    m_MaxTotalAttachmentSize = value;
    m_MaxTotalAttachmentSizeIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::maxTotalAttachmentSizeIsSet() const
{
    return m_MaxTotalAttachmentSizeIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMaxTotalAttachmentSize()
{
    m_MaxTotalAttachmentSizeIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getAttachmentTypeBlacklist() const
{
    return m_AttachmentTypeBlacklist;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setAttachmentTypeBlacklist(ConfigNodePropertyArray const& value)
{
    m_AttachmentTypeBlacklist = value;
    m_AttachmentTypeBlacklistIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::attachmentTypeBlacklistIsSet() const
{
    return m_AttachmentTypeBlacklistIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetAttachmentTypeBlacklist()
{
    m_AttachmentTypeBlacklistIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getAllowedAttachmentTypes() const
{
    return m_AllowedAttachmentTypes;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setAllowedAttachmentTypes(ConfigNodePropertyArray const& value)
{
    m_AllowedAttachmentTypes = value;
    m_AllowedAttachmentTypesIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::allowedAttachmentTypesIsSet() const
{
    return m_AllowedAttachmentTypesIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetAllowedAttachmentTypes()
{
    m_AllowedAttachmentTypesIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getServiceSelector() const
{
    return m_ServiceSelector;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setServiceSelector(ConfigNodePropertyString const& value)
{
    m_ServiceSelector = value;
    m_ServiceSelectorIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::serviceSelectorIsSet() const
{
    return m_ServiceSelectorIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetServiceSelector()
{
    m_ServiceSelectorIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFieldWhitelist() const
{
    return m_FieldWhitelist;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFieldWhitelist(ConfigNodePropertyArray const& value)
{
    m_FieldWhitelist = value;
    m_FieldWhitelistIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::fieldWhitelistIsSet() const
{
    return m_FieldWhitelistIsSet;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetFieldWhitelist()
{
    m_FieldWhitelistIsSet = false;
}

}
}
}
}

