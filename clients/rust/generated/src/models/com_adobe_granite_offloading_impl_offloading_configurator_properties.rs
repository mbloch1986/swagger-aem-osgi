/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties {
  #[serde(rename = "offloading.transporter")]
  offloading_transporter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "offloading.cleanup.payload")]
  offloading_cleanup_payload: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties {
  pub fn new() -> ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties {
    ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties {
      offloading_transporter: None,
      offloading_cleanup_payload: None
    }
  }

  pub fn set_offloading_transporter(&mut self, offloading_transporter: ::models::ConfigNodePropertyString) {
    self.offloading_transporter = Some(offloading_transporter);
  }

  pub fn with_offloading_transporter(mut self, offloading_transporter: ::models::ConfigNodePropertyString) -> ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties {
    self.offloading_transporter = Some(offloading_transporter);
    self
  }

  pub fn offloading_transporter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.offloading_transporter.as_ref()
  }

  pub fn reset_offloading_transporter(&mut self) {
    self.offloading_transporter = None;
  }

  pub fn set_offloading_cleanup_payload(&mut self, offloading_cleanup_payload: ::models::ConfigNodePropertyBoolean) {
    self.offloading_cleanup_payload = Some(offloading_cleanup_payload);
  }

  pub fn with_offloading_cleanup_payload(mut self, offloading_cleanup_payload: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties {
    self.offloading_cleanup_payload = Some(offloading_cleanup_payload);
    self
  }

  pub fn offloading_cleanup_payload(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.offloading_cleanup_payload.as_ref()
  }

  pub fn reset_offloading_cleanup_payload(&mut self) {
    self.offloading_cleanup_payload = None;
  }

}



