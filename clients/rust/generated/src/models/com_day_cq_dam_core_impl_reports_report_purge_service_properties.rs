/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
  #[serde(rename = "scheduler.expression")]
  scheduler_expression: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "maxSavedReports")]
  max_saved_reports: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "timeDuration")]
  time_duration: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "enableReportPurge")]
  enable_report_purge: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
  pub fn new() -> ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
    ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
      scheduler_expression: None,
      max_saved_reports: None,
      time_duration: None,
      enable_report_purge: None
    }
  }

  pub fn set_scheduler_expression(&mut self, scheduler_expression: ::models::ConfigNodePropertyString) {
    self.scheduler_expression = Some(scheduler_expression);
  }

  pub fn with_scheduler_expression(mut self, scheduler_expression: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
    self.scheduler_expression = Some(scheduler_expression);
    self
  }

  pub fn scheduler_expression(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.scheduler_expression.as_ref()
  }

  pub fn reset_scheduler_expression(&mut self) {
    self.scheduler_expression = None;
  }

  pub fn set_max_saved_reports(&mut self, max_saved_reports: ::models::ConfigNodePropertyInteger) {
    self.max_saved_reports = Some(max_saved_reports);
  }

  pub fn with_max_saved_reports(mut self, max_saved_reports: ::models::ConfigNodePropertyInteger) -> ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
    self.max_saved_reports = Some(max_saved_reports);
    self
  }

  pub fn max_saved_reports(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_saved_reports.as_ref()
  }

  pub fn reset_max_saved_reports(&mut self) {
    self.max_saved_reports = None;
  }

  pub fn set_time_duration(&mut self, time_duration: ::models::ConfigNodePropertyInteger) {
    self.time_duration = Some(time_duration);
  }

  pub fn with_time_duration(mut self, time_duration: ::models::ConfigNodePropertyInteger) -> ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
    self.time_duration = Some(time_duration);
    self
  }

  pub fn time_duration(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.time_duration.as_ref()
  }

  pub fn reset_time_duration(&mut self) {
    self.time_duration = None;
  }

  pub fn set_enable_report_purge(&mut self, enable_report_purge: ::models::ConfigNodePropertyBoolean) {
    self.enable_report_purge = Some(enable_report_purge);
  }

  pub fn with_enable_report_purge(mut self, enable_report_purge: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
    self.enable_report_purge = Some(enable_report_purge);
    self
  }

  pub fn enable_report_purge(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_report_purge.as_ref()
  }

  pub fn reset_enable_report_purge(&mut self) {
    self.enable_report_purge = None;
  }

}



