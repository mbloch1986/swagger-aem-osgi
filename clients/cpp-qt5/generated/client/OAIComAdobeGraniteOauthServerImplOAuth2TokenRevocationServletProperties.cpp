/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties() {
    init();
}

OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::~OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::init() {
    oauth_token_revocation_active = new OAIConfigNodePropertyBoolean();
    m_oauth_token_revocation_active_isSet = false;
}

void
OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::cleanup() {
    if(oauth_token_revocation_active != nullptr) { 
        delete oauth_token_revocation_active;
    }
}

OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties*
OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&oauth_token_revocation_active, pJson["oauth.token.revocation.active"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::asJsonObject() {
    QJsonObject obj;
    if((oauth_token_revocation_active != nullptr) && (oauth_token_revocation_active->isSet())){
        toJsonValue(QString("oauth.token.revocation.active"), oauth_token_revocation_active, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::getOauthTokenRevocationActive() {
    return oauth_token_revocation_active;
}
void
OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::setOauthTokenRevocationActive(OAIConfigNodePropertyBoolean* oauth_token_revocation_active) {
    this->oauth_token_revocation_active = oauth_token_revocation_active;
    this->m_oauth_token_revocation_active_isSet = true;
}


bool
OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(oauth_token_revocation_active != nullptr && oauth_token_revocation_active->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

