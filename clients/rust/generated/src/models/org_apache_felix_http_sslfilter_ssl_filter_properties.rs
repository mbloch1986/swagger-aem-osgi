/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheFelixHttpSslfilterSslFilterProperties {
  #[serde(rename = "ssl-forward.header")]
  ssl_forward_header: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "ssl-forward.value")]
  ssl_forward_value: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "ssl-forward-cert.header")]
  ssl_forward_cert_header: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "rewrite.absolute.urls")]
  rewrite_absolute_urls: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheFelixHttpSslfilterSslFilterProperties {
  pub fn new() -> OrgApacheFelixHttpSslfilterSslFilterProperties {
    OrgApacheFelixHttpSslfilterSslFilterProperties {
      ssl_forward_header: None,
      ssl_forward_value: None,
      ssl_forward_cert_header: None,
      rewrite_absolute_urls: None
    }
  }

  pub fn set_ssl_forward_header(&mut self, ssl_forward_header: ::models::ConfigNodePropertyString) {
    self.ssl_forward_header = Some(ssl_forward_header);
  }

  pub fn with_ssl_forward_header(mut self, ssl_forward_header: ::models::ConfigNodePropertyString) -> OrgApacheFelixHttpSslfilterSslFilterProperties {
    self.ssl_forward_header = Some(ssl_forward_header);
    self
  }

  pub fn ssl_forward_header(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.ssl_forward_header.as_ref()
  }

  pub fn reset_ssl_forward_header(&mut self) {
    self.ssl_forward_header = None;
  }

  pub fn set_ssl_forward_value(&mut self, ssl_forward_value: ::models::ConfigNodePropertyString) {
    self.ssl_forward_value = Some(ssl_forward_value);
  }

  pub fn with_ssl_forward_value(mut self, ssl_forward_value: ::models::ConfigNodePropertyString) -> OrgApacheFelixHttpSslfilterSslFilterProperties {
    self.ssl_forward_value = Some(ssl_forward_value);
    self
  }

  pub fn ssl_forward_value(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.ssl_forward_value.as_ref()
  }

  pub fn reset_ssl_forward_value(&mut self) {
    self.ssl_forward_value = None;
  }

  pub fn set_ssl_forward_cert_header(&mut self, ssl_forward_cert_header: ::models::ConfigNodePropertyString) {
    self.ssl_forward_cert_header = Some(ssl_forward_cert_header);
  }

  pub fn with_ssl_forward_cert_header(mut self, ssl_forward_cert_header: ::models::ConfigNodePropertyString) -> OrgApacheFelixHttpSslfilterSslFilterProperties {
    self.ssl_forward_cert_header = Some(ssl_forward_cert_header);
    self
  }

  pub fn ssl_forward_cert_header(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.ssl_forward_cert_header.as_ref()
  }

  pub fn reset_ssl_forward_cert_header(&mut self) {
    self.ssl_forward_cert_header = None;
  }

  pub fn set_rewrite_absolute_urls(&mut self, rewrite_absolute_urls: ::models::ConfigNodePropertyBoolean) {
    self.rewrite_absolute_urls = Some(rewrite_absolute_urls);
  }

  pub fn with_rewrite_absolute_urls(mut self, rewrite_absolute_urls: ::models::ConfigNodePropertyBoolean) -> OrgApacheFelixHttpSslfilterSslFilterProperties {
    self.rewrite_absolute_urls = Some(rewrite_absolute_urls);
    self
  }

  pub fn rewrite_absolute_urls(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.rewrite_absolute_urls.as_ref()
  }

  pub fn reset_rewrite_absolute_urls(&mut self) {
    self.rewrite_absolute_urls = None;
  }

}



