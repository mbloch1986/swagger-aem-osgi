<?php
/**
 * ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'jmx_objectname' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'property_measure_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'property_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'property_max_wait_ms' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'property_max_rate' => '\OpenAPI\Client\Model\ConfigNodePropertyFloat',
        'fulltext_measure_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'fulltext_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'fulltext_max_wait_ms' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'fulltext_max_rate' => '\OpenAPI\Client\Model\ConfigNodePropertyFloat'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'jmx_objectname' => null,
        'property_measure_enabled' => null,
        'property_name' => null,
        'property_max_wait_ms' => null,
        'property_max_rate' => null,
        'fulltext_measure_enabled' => null,
        'fulltext_name' => null,
        'fulltext_max_wait_ms' => null,
        'fulltext_max_rate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jmx_objectname' => 'jmx.objectname',
        'property_measure_enabled' => 'property.measure.enabled',
        'property_name' => 'property.name',
        'property_max_wait_ms' => 'property.max.wait.ms',
        'property_max_rate' => 'property.max.rate',
        'fulltext_measure_enabled' => 'fulltext.measure.enabled',
        'fulltext_name' => 'fulltext.name',
        'fulltext_max_wait_ms' => 'fulltext.max.wait.ms',
        'fulltext_max_rate' => 'fulltext.max.rate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jmx_objectname' => 'setJmxObjectname',
        'property_measure_enabled' => 'setPropertyMeasureEnabled',
        'property_name' => 'setPropertyName',
        'property_max_wait_ms' => 'setPropertyMaxWaitMs',
        'property_max_rate' => 'setPropertyMaxRate',
        'fulltext_measure_enabled' => 'setFulltextMeasureEnabled',
        'fulltext_name' => 'setFulltextName',
        'fulltext_max_wait_ms' => 'setFulltextMaxWaitMs',
        'fulltext_max_rate' => 'setFulltextMaxRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jmx_objectname' => 'getJmxObjectname',
        'property_measure_enabled' => 'getPropertyMeasureEnabled',
        'property_name' => 'getPropertyName',
        'property_max_wait_ms' => 'getPropertyMaxWaitMs',
        'property_max_rate' => 'getPropertyMaxRate',
        'fulltext_measure_enabled' => 'getFulltextMeasureEnabled',
        'fulltext_name' => 'getFulltextName',
        'fulltext_max_wait_ms' => 'getFulltextMaxWaitMs',
        'fulltext_max_rate' => 'getFulltextMaxRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jmx_objectname'] = isset($data['jmx_objectname']) ? $data['jmx_objectname'] : null;
        $this->container['property_measure_enabled'] = isset($data['property_measure_enabled']) ? $data['property_measure_enabled'] : null;
        $this->container['property_name'] = isset($data['property_name']) ? $data['property_name'] : null;
        $this->container['property_max_wait_ms'] = isset($data['property_max_wait_ms']) ? $data['property_max_wait_ms'] : null;
        $this->container['property_max_rate'] = isset($data['property_max_rate']) ? $data['property_max_rate'] : null;
        $this->container['fulltext_measure_enabled'] = isset($data['fulltext_measure_enabled']) ? $data['fulltext_measure_enabled'] : null;
        $this->container['fulltext_name'] = isset($data['fulltext_name']) ? $data['fulltext_name'] : null;
        $this->container['fulltext_max_wait_ms'] = isset($data['fulltext_max_wait_ms']) ? $data['fulltext_max_wait_ms'] : null;
        $this->container['fulltext_max_rate'] = isset($data['fulltext_max_rate']) ? $data['fulltext_max_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jmx_objectname
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJmxObjectname()
    {
        return $this->container['jmx_objectname'];
    }

    /**
     * Sets jmx_objectname
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $jmx_objectname jmx_objectname
     *
     * @return $this
     */
    public function setJmxObjectname($jmx_objectname)
    {
        $this->container['jmx_objectname'] = $jmx_objectname;

        return $this;
    }

    /**
     * Gets property_measure_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getPropertyMeasureEnabled()
    {
        return $this->container['property_measure_enabled'];
    }

    /**
     * Sets property_measure_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $property_measure_enabled property_measure_enabled
     *
     * @return $this
     */
    public function setPropertyMeasureEnabled($property_measure_enabled)
    {
        $this->container['property_measure_enabled'] = $property_measure_enabled;

        return $this;
    }

    /**
     * Gets property_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPropertyName()
    {
        return $this->container['property_name'];
    }

    /**
     * Sets property_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $property_name property_name
     *
     * @return $this
     */
    public function setPropertyName($property_name)
    {
        $this->container['property_name'] = $property_name;

        return $this;
    }

    /**
     * Gets property_max_wait_ms
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getPropertyMaxWaitMs()
    {
        return $this->container['property_max_wait_ms'];
    }

    /**
     * Sets property_max_wait_ms
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $property_max_wait_ms property_max_wait_ms
     *
     * @return $this
     */
    public function setPropertyMaxWaitMs($property_max_wait_ms)
    {
        $this->container['property_max_wait_ms'] = $property_max_wait_ms;

        return $this;
    }

    /**
     * Gets property_max_rate
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyFloat|null
     */
    public function getPropertyMaxRate()
    {
        return $this->container['property_max_rate'];
    }

    /**
     * Sets property_max_rate
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyFloat|null $property_max_rate property_max_rate
     *
     * @return $this
     */
    public function setPropertyMaxRate($property_max_rate)
    {
        $this->container['property_max_rate'] = $property_max_rate;

        return $this;
    }

    /**
     * Gets fulltext_measure_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getFulltextMeasureEnabled()
    {
        return $this->container['fulltext_measure_enabled'];
    }

    /**
     * Sets fulltext_measure_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $fulltext_measure_enabled fulltext_measure_enabled
     *
     * @return $this
     */
    public function setFulltextMeasureEnabled($fulltext_measure_enabled)
    {
        $this->container['fulltext_measure_enabled'] = $fulltext_measure_enabled;

        return $this;
    }

    /**
     * Gets fulltext_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getFulltextName()
    {
        return $this->container['fulltext_name'];
    }

    /**
     * Sets fulltext_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $fulltext_name fulltext_name
     *
     * @return $this
     */
    public function setFulltextName($fulltext_name)
    {
        $this->container['fulltext_name'] = $fulltext_name;

        return $this;
    }

    /**
     * Gets fulltext_max_wait_ms
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getFulltextMaxWaitMs()
    {
        return $this->container['fulltext_max_wait_ms'];
    }

    /**
     * Sets fulltext_max_wait_ms
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $fulltext_max_wait_ms fulltext_max_wait_ms
     *
     * @return $this
     */
    public function setFulltextMaxWaitMs($fulltext_max_wait_ms)
    {
        $this->container['fulltext_max_wait_ms'] = $fulltext_max_wait_ms;

        return $this;
    }

    /**
     * Gets fulltext_max_rate
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyFloat|null
     */
    public function getFulltextMaxRate()
    {
        return $this->container['fulltext_max_rate'];
    }

    /**
     * Sets fulltext_max_rate
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyFloat|null $fulltext_max_rate fulltext_max_rate
     *
     * @return $this
     */
    public function setFulltextMaxRate($fulltext_max_rate)
    {
        $this->container['fulltext_max_rate'] = $fulltext_max_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


