/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingEngineParametersProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingEngineParametersProperties :  IEquatable<OrgApacheSlingEngineParametersProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingEngineParametersProperties" /> class.
        /// </summary>
        /// <param name="slingDefaultParameterEncoding">slingDefaultParameterEncoding.</param>
        /// <param name="slingDefaultMaxParameters">slingDefaultMaxParameters.</param>
        /// <param name="fileLocation">fileLocation.</param>
        /// <param name="fileThreshold">fileThreshold.</param>
        /// <param name="fileMax">fileMax.</param>
        /// <param name="requestMax">requestMax.</param>
        /// <param name="slingDefaultParameterCheckForAdditionalContainerParameters">slingDefaultParameterCheckForAdditionalContainerParameters.</param>
        public OrgApacheSlingEngineParametersProperties(ConfigNodePropertyString slingDefaultParameterEncoding = default(ConfigNodePropertyString), ConfigNodePropertyInteger slingDefaultMaxParameters = default(ConfigNodePropertyInteger), ConfigNodePropertyString fileLocation = default(ConfigNodePropertyString), ConfigNodePropertyInteger fileThreshold = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger fileMax = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger requestMax = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean slingDefaultParameterCheckForAdditionalContainerParameters = default(ConfigNodePropertyBoolean))
        {
            this.SlingDefaultParameterEncoding = slingDefaultParameterEncoding;
            this.SlingDefaultMaxParameters = slingDefaultMaxParameters;
            this.FileLocation = fileLocation;
            this.FileThreshold = fileThreshold;
            this.FileMax = fileMax;
            this.RequestMax = requestMax;
            this.SlingDefaultParameterCheckForAdditionalContainerParameters = slingDefaultParameterCheckForAdditionalContainerParameters;
        }
        
        /// <summary>
        /// Gets or Sets SlingDefaultParameterEncoding
        /// </summary>
        [DataMember(Name="sling.default.parameter.encoding", EmitDefaultValue=false)]
        public ConfigNodePropertyString SlingDefaultParameterEncoding { get; set; }

        /// <summary>
        /// Gets or Sets SlingDefaultMaxParameters
        /// </summary>
        [DataMember(Name="sling.default.max.parameters", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SlingDefaultMaxParameters { get; set; }

        /// <summary>
        /// Gets or Sets FileLocation
        /// </summary>
        [DataMember(Name="file.location", EmitDefaultValue=false)]
        public ConfigNodePropertyString FileLocation { get; set; }

        /// <summary>
        /// Gets or Sets FileThreshold
        /// </summary>
        [DataMember(Name="file.threshold", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger FileThreshold { get; set; }

        /// <summary>
        /// Gets or Sets FileMax
        /// </summary>
        [DataMember(Name="file.max", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger FileMax { get; set; }

        /// <summary>
        /// Gets or Sets RequestMax
        /// </summary>
        [DataMember(Name="request.max", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RequestMax { get; set; }

        /// <summary>
        /// Gets or Sets SlingDefaultParameterCheckForAdditionalContainerParameters
        /// </summary>
        [DataMember(Name="sling.default.parameter.checkForAdditionalContainerParameters", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SlingDefaultParameterCheckForAdditionalContainerParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingEngineParametersProperties {\n");
            sb.Append("  SlingDefaultParameterEncoding: ").Append(SlingDefaultParameterEncoding).Append("\n");
            sb.Append("  SlingDefaultMaxParameters: ").Append(SlingDefaultMaxParameters).Append("\n");
            sb.Append("  FileLocation: ").Append(FileLocation).Append("\n");
            sb.Append("  FileThreshold: ").Append(FileThreshold).Append("\n");
            sb.Append("  FileMax: ").Append(FileMax).Append("\n");
            sb.Append("  RequestMax: ").Append(RequestMax).Append("\n");
            sb.Append("  SlingDefaultParameterCheckForAdditionalContainerParameters: ").Append(SlingDefaultParameterCheckForAdditionalContainerParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingEngineParametersProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingEngineParametersProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingEngineParametersProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingEngineParametersProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlingDefaultParameterEncoding == input.SlingDefaultParameterEncoding ||
                    (this.SlingDefaultParameterEncoding != null &&
                    this.SlingDefaultParameterEncoding.Equals(input.SlingDefaultParameterEncoding))
                ) && 
                (
                    this.SlingDefaultMaxParameters == input.SlingDefaultMaxParameters ||
                    (this.SlingDefaultMaxParameters != null &&
                    this.SlingDefaultMaxParameters.Equals(input.SlingDefaultMaxParameters))
                ) && 
                (
                    this.FileLocation == input.FileLocation ||
                    (this.FileLocation != null &&
                    this.FileLocation.Equals(input.FileLocation))
                ) && 
                (
                    this.FileThreshold == input.FileThreshold ||
                    (this.FileThreshold != null &&
                    this.FileThreshold.Equals(input.FileThreshold))
                ) && 
                (
                    this.FileMax == input.FileMax ||
                    (this.FileMax != null &&
                    this.FileMax.Equals(input.FileMax))
                ) && 
                (
                    this.RequestMax == input.RequestMax ||
                    (this.RequestMax != null &&
                    this.RequestMax.Equals(input.RequestMax))
                ) && 
                (
                    this.SlingDefaultParameterCheckForAdditionalContainerParameters == input.SlingDefaultParameterCheckForAdditionalContainerParameters ||
                    (this.SlingDefaultParameterCheckForAdditionalContainerParameters != null &&
                    this.SlingDefaultParameterCheckForAdditionalContainerParameters.Equals(input.SlingDefaultParameterCheckForAdditionalContainerParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlingDefaultParameterEncoding != null)
                    hashCode = hashCode * 59 + this.SlingDefaultParameterEncoding.GetHashCode();
                if (this.SlingDefaultMaxParameters != null)
                    hashCode = hashCode * 59 + this.SlingDefaultMaxParameters.GetHashCode();
                if (this.FileLocation != null)
                    hashCode = hashCode * 59 + this.FileLocation.GetHashCode();
                if (this.FileThreshold != null)
                    hashCode = hashCode * 59 + this.FileThreshold.GetHashCode();
                if (this.FileMax != null)
                    hashCode = hashCode * 59 + this.FileMax.GetHashCode();
                if (this.RequestMax != null)
                    hashCode = hashCode * 59 + this.RequestMax.GetHashCode();
                if (this.SlingDefaultParameterCheckForAdditionalContainerParameters != null)
                    hashCode = hashCode * 59 + this.SlingDefaultParameterCheckForAdditionalContainerParameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
