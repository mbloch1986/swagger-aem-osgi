/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplReplicationReceiverImplProperties {
  #[serde(rename = "receiver.tmpfile.threshold")]
  receiver_tmpfile_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "receiver.packages.use.install")]
  receiver_packages_use_install: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqReplicationImplReplicationReceiverImplProperties {
  pub fn new() -> ComDayCqReplicationImplReplicationReceiverImplProperties {
    ComDayCqReplicationImplReplicationReceiverImplProperties {
      receiver_tmpfile_threshold: None,
      receiver_packages_use_install: None
    }
  }

  pub fn set_receiver_tmpfile_threshold(&mut self, receiver_tmpfile_threshold: ::models::ConfigNodePropertyInteger) {
    self.receiver_tmpfile_threshold = Some(receiver_tmpfile_threshold);
  }

  pub fn with_receiver_tmpfile_threshold(mut self, receiver_tmpfile_threshold: ::models::ConfigNodePropertyInteger) -> ComDayCqReplicationImplReplicationReceiverImplProperties {
    self.receiver_tmpfile_threshold = Some(receiver_tmpfile_threshold);
    self
  }

  pub fn receiver_tmpfile_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.receiver_tmpfile_threshold.as_ref()
  }

  pub fn reset_receiver_tmpfile_threshold(&mut self) {
    self.receiver_tmpfile_threshold = None;
  }

  pub fn set_receiver_packages_use_install(&mut self, receiver_packages_use_install: ::models::ConfigNodePropertyBoolean) {
    self.receiver_packages_use_install = Some(receiver_packages_use_install);
  }

  pub fn with_receiver_packages_use_install(mut self, receiver_packages_use_install: ::models::ConfigNodePropertyBoolean) -> ComDayCqReplicationImplReplicationReceiverImplProperties {
    self.receiver_packages_use_install = Some(receiver_packages_use_install);
    self
  }

  pub fn receiver_packages_use_install(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.receiver_packages_use_install.as_ref()
  }

  pub fn reset_receiver_packages_use_install(&mut self) {
    self.receiver_packages_use_install = None;
  }

}



