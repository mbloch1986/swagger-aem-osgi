/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties.h
 *
 * 
 */

#ifndef OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties_H_
#define OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties
{
public:
    OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties();
    virtual ~OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHandlerName() const;
    void setHandlerName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserExpirationTime() const;
    void setUserExpirationTime(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getUserAutoMembership() const;
    void setUserAutoMembership(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getUserPropertyMapping() const;
    void setUserPropertyMapping(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserPathPrefix() const;
    void setUserPathPrefix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserMembershipExpTime() const;
    void setUserMembershipExpTime(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getUserMembershipNestingDepth() const;
    void setUserMembershipNestingDepth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUserDynamicMembership() const;
    void setUserDynamicMembership(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUserDisableMissing() const;
    void setUserDisableMissing(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupExpirationTime() const;
    void setGroupExpirationTime(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getGroupAutoMembership() const;
    void setGroupAutoMembership(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getGroupPropertyMapping() const;
    void setGroupPropertyMapping(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupPathPrefix() const;
    void setGroupPathPrefix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableRFC7613UsercaseMappedProfile() const;
    void setEnableRFC7613UsercaseMappedProfile(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Handler_name;
    std::shared_ptr<ConfigNodePropertyString> m_User_expirationTime;
    std::shared_ptr<ConfigNodePropertyArray> m_User_autoMembership;
    std::shared_ptr<ConfigNodePropertyArray> m_User_propertyMapping;
    std::shared_ptr<ConfigNodePropertyString> m_User_pathPrefix;
    std::shared_ptr<ConfigNodePropertyString> m_User_membershipExpTime;
    std::shared_ptr<ConfigNodePropertyInteger> m_User_membershipNestingDepth;
    std::shared_ptr<ConfigNodePropertyBoolean> m_User_dynamicMembership;
    std::shared_ptr<ConfigNodePropertyBoolean> m_User_disableMissing;
    std::shared_ptr<ConfigNodePropertyString> m_Group_expirationTime;
    std::shared_ptr<ConfigNodePropertyArray> m_Group_autoMembership;
    std::shared_ptr<ConfigNodePropertyArray> m_Group_propertyMapping;
    std::shared_ptr<ConfigNodePropertyString> m_Group_pathPrefix;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableRFC7613UsercaseMappedProfile;
};

}
}
}
}

#endif /* OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties_H_ */
