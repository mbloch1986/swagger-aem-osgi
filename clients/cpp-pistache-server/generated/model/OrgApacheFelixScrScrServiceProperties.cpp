/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheFelixScrScrServiceProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheFelixScrScrServiceProperties::OrgApacheFelixScrScrServiceProperties()
{
    m_Ds_loglevelIsSet = false;
    m_Ds_factory_enabledIsSet = false;
    m_Ds_delayed_keepInstancesIsSet = false;
    m_Ds_lock_timeout_millisecondsIsSet = false;
    m_Ds_stop_timeout_millisecondsIsSet = false;
    m_Ds_global_extenderIsSet = false;
    
}

OrgApacheFelixScrScrServiceProperties::~OrgApacheFelixScrScrServiceProperties()
{
}

void OrgApacheFelixScrScrServiceProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheFelixScrScrServiceProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Ds_loglevelIsSet)
    {
        val["ds.loglevel"] = ModelBase::toJson(m_Ds_loglevel);
    }
    if(m_Ds_factory_enabledIsSet)
    {
        val["ds.factory.enabled"] = ModelBase::toJson(m_Ds_factory_enabled);
    }
    if(m_Ds_delayed_keepInstancesIsSet)
    {
        val["ds.delayed.keepInstances"] = ModelBase::toJson(m_Ds_delayed_keepInstances);
    }
    if(m_Ds_lock_timeout_millisecondsIsSet)
    {
        val["ds.lock.timeout.milliseconds"] = ModelBase::toJson(m_Ds_lock_timeout_milliseconds);
    }
    if(m_Ds_stop_timeout_millisecondsIsSet)
    {
        val["ds.stop.timeout.milliseconds"] = ModelBase::toJson(m_Ds_stop_timeout_milliseconds);
    }
    if(m_Ds_global_extenderIsSet)
    {
        val["ds.global.extender"] = ModelBase::toJson(m_Ds_global_extender);
    }
    

    return val;
}

void OrgApacheFelixScrScrServiceProperties::fromJson(nlohmann::json& val)
{
    if(val.find("ds.loglevel") != val.end())
    {
        if(!val["ds.loglevel"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["ds.loglevel"]);
            setDsLoglevel( newItem );
        }
        
    }
    if(val.find("ds.factory.enabled") != val.end())
    {
        if(!val["ds.factory.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["ds.factory.enabled"]);
            setDsFactoryEnabled( newItem );
        }
        
    }
    if(val.find("ds.delayed.keepInstances") != val.end())
    {
        if(!val["ds.delayed.keepInstances"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["ds.delayed.keepInstances"]);
            setDsDelayedKeepInstances( newItem );
        }
        
    }
    if(val.find("ds.lock.timeout.milliseconds") != val.end())
    {
        if(!val["ds.lock.timeout.milliseconds"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["ds.lock.timeout.milliseconds"]);
            setDsLockTimeoutMilliseconds( newItem );
        }
        
    }
    if(val.find("ds.stop.timeout.milliseconds") != val.end())
    {
        if(!val["ds.stop.timeout.milliseconds"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["ds.stop.timeout.milliseconds"]);
            setDsStopTimeoutMilliseconds( newItem );
        }
        
    }
    if(val.find("ds.global.extender") != val.end())
    {
        if(!val["ds.global.extender"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["ds.global.extender"]);
            setDsGlobalExtender( newItem );
        }
        
    }
    
}


ConfigNodePropertyDropDown OrgApacheFelixScrScrServiceProperties::getDsLoglevel() const
{
    return m_Ds_loglevel;
}
void OrgApacheFelixScrScrServiceProperties::setDsLoglevel(ConfigNodePropertyDropDown const& value)
{
    m_Ds_loglevel = value;
    m_Ds_loglevelIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsLoglevelIsSet() const
{
    return m_Ds_loglevelIsSet;
}
void OrgApacheFelixScrScrServiceProperties::unsetDs_loglevel()
{
    m_Ds_loglevelIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixScrScrServiceProperties::getDsFactoryEnabled() const
{
    return m_Ds_factory_enabled;
}
void OrgApacheFelixScrScrServiceProperties::setDsFactoryEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Ds_factory_enabled = value;
    m_Ds_factory_enabledIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsFactoryEnabledIsSet() const
{
    return m_Ds_factory_enabledIsSet;
}
void OrgApacheFelixScrScrServiceProperties::unsetDs_factory_enabled()
{
    m_Ds_factory_enabledIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixScrScrServiceProperties::getDsDelayedKeepInstances() const
{
    return m_Ds_delayed_keepInstances;
}
void OrgApacheFelixScrScrServiceProperties::setDsDelayedKeepInstances(ConfigNodePropertyBoolean const& value)
{
    m_Ds_delayed_keepInstances = value;
    m_Ds_delayed_keepInstancesIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsDelayedKeepInstancesIsSet() const
{
    return m_Ds_delayed_keepInstancesIsSet;
}
void OrgApacheFelixScrScrServiceProperties::unsetDs_delayed_keepInstances()
{
    m_Ds_delayed_keepInstancesIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixScrScrServiceProperties::getDsLockTimeoutMilliseconds() const
{
    return m_Ds_lock_timeout_milliseconds;
}
void OrgApacheFelixScrScrServiceProperties::setDsLockTimeoutMilliseconds(ConfigNodePropertyInteger const& value)
{
    m_Ds_lock_timeout_milliseconds = value;
    m_Ds_lock_timeout_millisecondsIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsLockTimeoutMillisecondsIsSet() const
{
    return m_Ds_lock_timeout_millisecondsIsSet;
}
void OrgApacheFelixScrScrServiceProperties::unsetDs_lock_timeout_milliseconds()
{
    m_Ds_lock_timeout_millisecondsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixScrScrServiceProperties::getDsStopTimeoutMilliseconds() const
{
    return m_Ds_stop_timeout_milliseconds;
}
void OrgApacheFelixScrScrServiceProperties::setDsStopTimeoutMilliseconds(ConfigNodePropertyInteger const& value)
{
    m_Ds_stop_timeout_milliseconds = value;
    m_Ds_stop_timeout_millisecondsIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsStopTimeoutMillisecondsIsSet() const
{
    return m_Ds_stop_timeout_millisecondsIsSet;
}
void OrgApacheFelixScrScrServiceProperties::unsetDs_stop_timeout_milliseconds()
{
    m_Ds_stop_timeout_millisecondsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixScrScrServiceProperties::getDsGlobalExtender() const
{
    return m_Ds_global_extender;
}
void OrgApacheFelixScrScrServiceProperties::setDsGlobalExtender(ConfigNodePropertyBoolean const& value)
{
    m_Ds_global_extender = value;
    m_Ds_global_extenderIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsGlobalExtenderIsSet() const
{
    return m_Ds_global_extenderIsSet;
}
void OrgApacheFelixScrScrServiceProperties::unsetDs_global_extender()
{
    m_Ds_global_extenderIsSet = false;
}

}
}
}
}

