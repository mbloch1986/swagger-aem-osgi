/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingServletsResolverSlingServletResolverProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::OAIOrgApacheSlingServletsResolverSlingServletResolverProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::OAIOrgApacheSlingServletsResolverSlingServletResolverProperties() {
    init();
}

OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::~OAIOrgApacheSlingServletsResolverSlingServletResolverProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::init() {
    servletresolver_servlet_root = new OAIConfigNodePropertyString();
    m_servletresolver_servlet_root_isSet = false;
    servletresolver_cache_size = new OAIConfigNodePropertyInteger();
    m_servletresolver_cache_size_isSet = false;
    servletresolver_paths = new OAIConfigNodePropertyArray();
    m_servletresolver_paths_isSet = false;
    servletresolver_default_extensions = new OAIConfigNodePropertyArray();
    m_servletresolver_default_extensions_isSet = false;
}

void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::cleanup() {
    if(servletresolver_servlet_root != nullptr) { 
        delete servletresolver_servlet_root;
    }
    if(servletresolver_cache_size != nullptr) { 
        delete servletresolver_cache_size;
    }
    if(servletresolver_paths != nullptr) { 
        delete servletresolver_paths;
    }
    if(servletresolver_default_extensions != nullptr) { 
        delete servletresolver_default_extensions;
    }
}

OAIOrgApacheSlingServletsResolverSlingServletResolverProperties*
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&servletresolver_servlet_root, pJson["servletresolver.servletRoot"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&servletresolver_cache_size, pJson["servletresolver.cacheSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&servletresolver_paths, pJson["servletresolver.paths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&servletresolver_default_extensions, pJson["servletresolver.defaultExtensions"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::asJsonObject() {
    QJsonObject obj;
    if((servletresolver_servlet_root != nullptr) && (servletresolver_servlet_root->isSet())){
        toJsonValue(QString("servletresolver.servletRoot"), servletresolver_servlet_root, obj, QString("OAIConfigNodePropertyString"));
    }
    if((servletresolver_cache_size != nullptr) && (servletresolver_cache_size->isSet())){
        toJsonValue(QString("servletresolver.cacheSize"), servletresolver_cache_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((servletresolver_paths != nullptr) && (servletresolver_paths->isSet())){
        toJsonValue(QString("servletresolver.paths"), servletresolver_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((servletresolver_default_extensions != nullptr) && (servletresolver_default_extensions->isSet())){
        toJsonValue(QString("servletresolver.defaultExtensions"), servletresolver_default_extensions, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverServletRoot() {
    return servletresolver_servlet_root;
}
void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverServletRoot(OAIConfigNodePropertyString* servletresolver_servlet_root) {
    this->servletresolver_servlet_root = servletresolver_servlet_root;
    this->m_servletresolver_servlet_root_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverCacheSize() {
    return servletresolver_cache_size;
}
void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverCacheSize(OAIConfigNodePropertyInteger* servletresolver_cache_size) {
    this->servletresolver_cache_size = servletresolver_cache_size;
    this->m_servletresolver_cache_size_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverPaths() {
    return servletresolver_paths;
}
void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverPaths(OAIConfigNodePropertyArray* servletresolver_paths) {
    this->servletresolver_paths = servletresolver_paths;
    this->m_servletresolver_paths_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverDefaultExtensions() {
    return servletresolver_default_extensions;
}
void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverDefaultExtensions(OAIConfigNodePropertyArray* servletresolver_default_extensions) {
    this->servletresolver_default_extensions = servletresolver_default_extensions;
    this->m_servletresolver_default_extensions_isSet = true;
}


bool
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(servletresolver_servlet_root != nullptr && servletresolver_servlet_root->isSet()){ isObjectUpdated = true; break;}
        if(servletresolver_cache_size != nullptr && servletresolver_cache_size->isSet()){ isObjectUpdated = true; break;}
        if(servletresolver_paths != nullptr && servletresolver_paths->isSet()){ isObjectUpdated = true; break;}
        if(servletresolver_default_extensions != nullptr && servletresolver_default_extensions->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

