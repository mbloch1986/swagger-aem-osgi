/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComDayCqReportingImplConfigServiceImplProperties.h
 *
 * 
 */

#ifndef ComDayCqReportingImplConfigServiceImplProperties_H_
#define ComDayCqReportingImplConfigServiceImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqReportingImplConfigServiceImplProperties
    : public ModelBase
{
public:
    ComDayCqReportingImplConfigServiceImplProperties();
    virtual ~ComDayCqReportingImplConfigServiceImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComDayCqReportingImplConfigServiceImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRepconfTimezone() const;
    void setRepconfTimezone(ConfigNodePropertyString const& value);
    bool repconfTimezoneIsSet() const;
    void unsetRepconf_timezone();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRepconfLocale() const;
    void setRepconfLocale(ConfigNodePropertyString const& value);
    bool repconfLocaleIsSet() const;
    void unsetRepconf_locale();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRepconfSnapshots() const;
    void setRepconfSnapshots(ConfigNodePropertyString const& value);
    bool repconfSnapshotsIsSet() const;
    void unsetRepconf_snapshots();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRepconfRepdir() const;
    void setRepconfRepdir(ConfigNodePropertyString const& value);
    bool repconfRepdirIsSet() const;
    void unsetRepconf_repdir();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getRepconfHourofday() const;
    void setRepconfHourofday(ConfigNodePropertyInteger const& value);
    bool repconfHourofdayIsSet() const;
    void unsetRepconf_hourofday();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getRepconfMinofhour() const;
    void setRepconfMinofhour(ConfigNodePropertyInteger const& value);
    bool repconfMinofhourIsSet() const;
    void unsetRepconf_minofhour();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getRepconfMaxrows() const;
    void setRepconfMaxrows(ConfigNodePropertyInteger const& value);
    bool repconfMaxrowsIsSet() const;
    void unsetRepconf_maxrows();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getRepconfFakedata() const;
    void setRepconfFakedata(ConfigNodePropertyBoolean const& value);
    bool repconfFakedataIsSet() const;
    void unsetRepconf_fakedata();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRepconfSnapshotuser() const;
    void setRepconfSnapshotuser(ConfigNodePropertyString const& value);
    bool repconfSnapshotuserIsSet() const;
    void unsetRepconf_snapshotuser();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getRepconfEnforcesnapshotuser() const;
    void setRepconfEnforcesnapshotuser(ConfigNodePropertyBoolean const& value);
    bool repconfEnforcesnapshotuserIsSet() const;
    void unsetRepconf_enforcesnapshotuser();

protected:
    ConfigNodePropertyString m_Repconf_timezone;
    bool m_Repconf_timezoneIsSet;
    ConfigNodePropertyString m_Repconf_locale;
    bool m_Repconf_localeIsSet;
    ConfigNodePropertyString m_Repconf_snapshots;
    bool m_Repconf_snapshotsIsSet;
    ConfigNodePropertyString m_Repconf_repdir;
    bool m_Repconf_repdirIsSet;
    ConfigNodePropertyInteger m_Repconf_hourofday;
    bool m_Repconf_hourofdayIsSet;
    ConfigNodePropertyInteger m_Repconf_minofhour;
    bool m_Repconf_minofhourIsSet;
    ConfigNodePropertyInteger m_Repconf_maxrows;
    bool m_Repconf_maxrowsIsSet;
    ConfigNodePropertyBoolean m_Repconf_fakedata;
    bool m_Repconf_fakedataIsSet;
    ConfigNodePropertyString m_Repconf_snapshotuser;
    bool m_Repconf_snapshotuserIsSet;
    ConfigNodePropertyBoolean m_Repconf_enforcesnapshotuser;
    bool m_Repconf_enforcesnapshotuserIsSet;
};

}
}
}
}

#endif /* ComDayCqReportingImplConfigServiceImplProperties_H_ */
