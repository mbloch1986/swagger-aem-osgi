/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H_
#define OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyDropDown.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties: public OAIObject {
public:
    OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties();
    OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties(QString json);
    ~OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getName();
    void setName(OAIConfigNodePropertyString* name);

    OAIConfigNodePropertyInteger* getMinPoolSize();
    void setMinPoolSize(OAIConfigNodePropertyInteger* min_pool_size);

    OAIConfigNodePropertyInteger* getMaxPoolSize();
    void setMaxPoolSize(OAIConfigNodePropertyInteger* max_pool_size);

    OAIConfigNodePropertyInteger* getQueueSize();
    void setQueueSize(OAIConfigNodePropertyInteger* queue_size);

    OAIConfigNodePropertyInteger* getMaxThreadAge();
    void setMaxThreadAge(OAIConfigNodePropertyInteger* max_thread_age);

    OAIConfigNodePropertyInteger* getKeepAliveTime();
    void setKeepAliveTime(OAIConfigNodePropertyInteger* keep_alive_time);

    OAIConfigNodePropertyDropDown* getBlockPolicy();
    void setBlockPolicy(OAIConfigNodePropertyDropDown* block_policy);

    OAIConfigNodePropertyBoolean* getShutdownGraceful();
    void setShutdownGraceful(OAIConfigNodePropertyBoolean* shutdown_graceful);

    OAIConfigNodePropertyBoolean* getDaemon();
    void setDaemon(OAIConfigNodePropertyBoolean* daemon);

    OAIConfigNodePropertyInteger* getShutdownWaitTime();
    void setShutdownWaitTime(OAIConfigNodePropertyInteger* shutdown_wait_time);

    OAIConfigNodePropertyDropDown* getPriority();
    void setPriority(OAIConfigNodePropertyDropDown* priority);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* name;
    bool m_name_isSet;

    OAIConfigNodePropertyInteger* min_pool_size;
    bool m_min_pool_size_isSet;

    OAIConfigNodePropertyInteger* max_pool_size;
    bool m_max_pool_size_isSet;

    OAIConfigNodePropertyInteger* queue_size;
    bool m_queue_size_isSet;

    OAIConfigNodePropertyInteger* max_thread_age;
    bool m_max_thread_age_isSet;

    OAIConfigNodePropertyInteger* keep_alive_time;
    bool m_keep_alive_time_isSet;

    OAIConfigNodePropertyDropDown* block_policy;
    bool m_block_policy_isSet;

    OAIConfigNodePropertyBoolean* shutdown_graceful;
    bool m_shutdown_graceful_isSet;

    OAIConfigNodePropertyBoolean* daemon;
    bool m_daemon_isSet;

    OAIConfigNodePropertyInteger* shutdown_wait_time;
    bool m_shutdown_wait_time_isSet;

    OAIConfigNodePropertyDropDown* priority;
    bool m_priority_isSet;

};

}

#endif /* OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H_ */
