/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties :  IEquatable<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties" /> class.
        /// </summary>
        /// <param name="path">path.</param>
        /// <param name="tokenRequiredAttr">tokenRequiredAttr.</param>
        /// <param name="tokenAlternateUrl">tokenAlternateUrl.</param>
        /// <param name="tokenEncapsulated">tokenEncapsulated.</param>
        /// <param name="skipTokenRefresh">skipTokenRefresh.</param>
        public ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties(ConfigNodePropertyString path = default(ConfigNodePropertyString), ConfigNodePropertyDropDown tokenRequiredAttr = default(ConfigNodePropertyDropDown), ConfigNodePropertyString tokenAlternateUrl = default(ConfigNodePropertyString), ConfigNodePropertyBoolean tokenEncapsulated = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray skipTokenRefresh = default(ConfigNodePropertyArray))
        {
            this.Path = path;
            this.TokenRequiredAttr = tokenRequiredAttr;
            this.TokenAlternateUrl = tokenAlternateUrl;
            this.TokenEncapsulated = tokenEncapsulated;
            this.SkipTokenRefresh = skipTokenRefresh;
        }
        
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public ConfigNodePropertyString Path { get; set; }

        /// <summary>
        /// Gets or Sets TokenRequiredAttr
        /// </summary>
        [DataMember(Name="token.required.attr", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown TokenRequiredAttr { get; set; }

        /// <summary>
        /// Gets or Sets TokenAlternateUrl
        /// </summary>
        [DataMember(Name="token.alternate.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString TokenAlternateUrl { get; set; }

        /// <summary>
        /// Gets or Sets TokenEncapsulated
        /// </summary>
        [DataMember(Name="token.encapsulated", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean TokenEncapsulated { get; set; }

        /// <summary>
        /// Gets or Sets SkipTokenRefresh
        /// </summary>
        [DataMember(Name="skip.token.refresh", EmitDefaultValue=false)]
        public ConfigNodePropertyArray SkipTokenRefresh { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  TokenRequiredAttr: ").Append(TokenRequiredAttr).Append("\n");
            sb.Append("  TokenAlternateUrl: ").Append(TokenAlternateUrl).Append("\n");
            sb.Append("  TokenEncapsulated: ").Append(TokenEncapsulated).Append("\n");
            sb.Append("  SkipTokenRefresh: ").Append(SkipTokenRefresh).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties);
        }

        /// <summary>
        /// Returns true if ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.TokenRequiredAttr == input.TokenRequiredAttr ||
                    (this.TokenRequiredAttr != null &&
                    this.TokenRequiredAttr.Equals(input.TokenRequiredAttr))
                ) && 
                (
                    this.TokenAlternateUrl == input.TokenAlternateUrl ||
                    (this.TokenAlternateUrl != null &&
                    this.TokenAlternateUrl.Equals(input.TokenAlternateUrl))
                ) && 
                (
                    this.TokenEncapsulated == input.TokenEncapsulated ||
                    (this.TokenEncapsulated != null &&
                    this.TokenEncapsulated.Equals(input.TokenEncapsulated))
                ) && 
                (
                    this.SkipTokenRefresh == input.SkipTokenRefresh ||
                    (this.SkipTokenRefresh != null &&
                    this.SkipTokenRefresh.Equals(input.SkipTokenRefresh))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.TokenRequiredAttr != null)
                    hashCode = hashCode * 59 + this.TokenRequiredAttr.GetHashCode();
                if (this.TokenAlternateUrl != null)
                    hashCode = hashCode * 59 + this.TokenAlternateUrl.GetHashCode();
                if (this.TokenEncapsulated != null)
                    hashCode = hashCode * 59 + this.TokenEncapsulated.GetHashCode();
                if (this.SkipTokenRefresh != null)
                    hashCode = hashCode * 59 + this.SkipTokenRefresh.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
