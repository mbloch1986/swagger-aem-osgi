/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplReportsReportPurgeServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplReportsReportPurgeServiceProperties::ComDayCqDamCoreImplReportsReportPurgeServiceProperties()
{
    m_Scheduler_expressionIsSet = false;
    m_MaxSavedReportsIsSet = false;
    m_TimeDurationIsSet = false;
    m_EnableReportPurgeIsSet = false;
}

ComDayCqDamCoreImplReportsReportPurgeServiceProperties::~ComDayCqDamCoreImplReportsReportPurgeServiceProperties()
{
}

void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplReportsReportPurgeServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Scheduler_expressionIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.expression")] = ModelBase::toJson(m_Scheduler_expression);
    }
    if(m_MaxSavedReportsIsSet)
    {
        val[utility::conversions::to_string_t("maxSavedReports")] = ModelBase::toJson(m_MaxSavedReports);
    }
    if(m_TimeDurationIsSet)
    {
        val[utility::conversions::to_string_t("timeDuration")] = ModelBase::toJson(m_TimeDuration);
    }
    if(m_EnableReportPurgeIsSet)
    {
        val[utility::conversions::to_string_t("enableReportPurge")] = ModelBase::toJson(m_EnableReportPurge);
    }

    return val;
}

void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("scheduler.expression")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.expression")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.expression")]);
            setSchedulerExpression( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxSavedReports")))
    {
        if(!val[utility::conversions::to_string_t("maxSavedReports")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxSavedReports")]);
            setMaxSavedReports( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeDuration")))
    {
        if(!val[utility::conversions::to_string_t("timeDuration")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("timeDuration")]);
            setTimeDuration( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enableReportPurge")))
    {
        if(!val[utility::conversions::to_string_t("enableReportPurge")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableReportPurge")]);
            setEnableReportPurge( newItem );
        }
    }
}

void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Scheduler_expressionIsSet)
    {
        if (m_Scheduler_expression.get())
        {
            m_Scheduler_expression->toMultipart(multipart, utility::conversions::to_string_t("scheduler.expression."));
        }
    }
    if(m_MaxSavedReportsIsSet)
    {
        if (m_MaxSavedReports.get())
        {
            m_MaxSavedReports->toMultipart(multipart, utility::conversions::to_string_t("maxSavedReports."));
        }
    }
    if(m_TimeDurationIsSet)
    {
        if (m_TimeDuration.get())
        {
            m_TimeDuration->toMultipart(multipart, utility::conversions::to_string_t("timeDuration."));
        }
    }
    if(m_EnableReportPurgeIsSet)
    {
        if (m_EnableReportPurge.get())
        {
            m_EnableReportPurge->toMultipart(multipart, utility::conversions::to_string_t("enableReportPurge."));
        }
    }
}

void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.expression")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.expression")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.expression."));
            setSchedulerExpression( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxSavedReports")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxSavedReports")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxSavedReports."));
            setMaxSavedReports( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timeDuration")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("timeDuration")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("timeDuration."));
            setTimeDuration( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enableReportPurge")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableReportPurge")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableReportPurge."));
            setEnableReportPurge( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplReportsReportPurgeServiceProperties::getSchedulerExpression() const
{
    return m_Scheduler_expression;
}


void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::setSchedulerExpression(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Scheduler_expression = value;
    m_Scheduler_expressionIsSet = true;
}
bool ComDayCqDamCoreImplReportsReportPurgeServiceProperties::schedulerExpressionIsSet() const
{
    return m_Scheduler_expressionIsSet;
}

void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::unsetScheduler_expression()
{
    m_Scheduler_expressionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplReportsReportPurgeServiceProperties::getMaxSavedReports() const
{
    return m_MaxSavedReports;
}


void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::setMaxSavedReports(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxSavedReports = value;
    m_MaxSavedReportsIsSet = true;
}
bool ComDayCqDamCoreImplReportsReportPurgeServiceProperties::maxSavedReportsIsSet() const
{
    return m_MaxSavedReportsIsSet;
}

void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::unsetMaxSavedReports()
{
    m_MaxSavedReportsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplReportsReportPurgeServiceProperties::getTimeDuration() const
{
    return m_TimeDuration;
}


void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::setTimeDuration(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_TimeDuration = value;
    m_TimeDurationIsSet = true;
}
bool ComDayCqDamCoreImplReportsReportPurgeServiceProperties::timeDurationIsSet() const
{
    return m_TimeDurationIsSet;
}

void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::unsetTimeDuration()
{
    m_TimeDurationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplReportsReportPurgeServiceProperties::getEnableReportPurge() const
{
    return m_EnableReportPurge;
}


void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::setEnableReportPurge(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableReportPurge = value;
    m_EnableReportPurgeIsSet = true;
}
bool ComDayCqDamCoreImplReportsReportPurgeServiceProperties::enableReportPurgeIsSet() const
{
    return m_EnableReportPurgeIsSet;
}

void ComDayCqDamCoreImplReportsReportPurgeServiceProperties::unsetEnableReportPurge()
{
    m_EnableReportPurgeIsSet = false;
}

}
}
}
}

