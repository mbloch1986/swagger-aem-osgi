/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties()
{
    m_Handler_schemesIsSet = false;
    m_Sling_jcrinstall_folder_name_regexpIsSet = false;
    m_Sling_jcrinstall_folder_max_depthIsSet = false;
    m_Sling_jcrinstall_search_pathIsSet = false;
    m_Sling_jcrinstall_new_config_pathIsSet = false;
    m_Sling_jcrinstall_signal_pathIsSet = false;
    m_Sling_jcrinstall_enable_writebackIsSet = false;
}

OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::~OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties()
{
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Handler_schemesIsSet)
    {
        val[utility::conversions::to_string_t("handler.schemes")] = ModelBase::toJson(m_Handler_schemes);
    }
    if(m_Sling_jcrinstall_folder_name_regexpIsSet)
    {
        val[utility::conversions::to_string_t("sling.jcrinstall.folder.name.regexp")] = ModelBase::toJson(m_Sling_jcrinstall_folder_name_regexp);
    }
    if(m_Sling_jcrinstall_folder_max_depthIsSet)
    {
        val[utility::conversions::to_string_t("sling.jcrinstall.folder.max.depth")] = ModelBase::toJson(m_Sling_jcrinstall_folder_max_depth);
    }
    if(m_Sling_jcrinstall_search_pathIsSet)
    {
        val[utility::conversions::to_string_t("sling.jcrinstall.search.path")] = ModelBase::toJson(m_Sling_jcrinstall_search_path);
    }
    if(m_Sling_jcrinstall_new_config_pathIsSet)
    {
        val[utility::conversions::to_string_t("sling.jcrinstall.new.config.path")] = ModelBase::toJson(m_Sling_jcrinstall_new_config_path);
    }
    if(m_Sling_jcrinstall_signal_pathIsSet)
    {
        val[utility::conversions::to_string_t("sling.jcrinstall.signal.path")] = ModelBase::toJson(m_Sling_jcrinstall_signal_path);
    }
    if(m_Sling_jcrinstall_enable_writebackIsSet)
    {
        val[utility::conversions::to_string_t("sling.jcrinstall.enable.writeback")] = ModelBase::toJson(m_Sling_jcrinstall_enable_writeback);
    }

    return val;
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("handler.schemes")))
    {
        if(!val[utility::conversions::to_string_t("handler.schemes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("handler.schemes")]);
            setHandlerSchemes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.jcrinstall.folder.name.regexp")))
    {
        if(!val[utility::conversions::to_string_t("sling.jcrinstall.folder.name.regexp")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.jcrinstall.folder.name.regexp")]);
            setSlingJcrinstallFolderNameRegexp( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.jcrinstall.folder.max.depth")))
    {
        if(!val[utility::conversions::to_string_t("sling.jcrinstall.folder.max.depth")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.jcrinstall.folder.max.depth")]);
            setSlingJcrinstallFolderMaxDepth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.jcrinstall.search.path")))
    {
        if(!val[utility::conversions::to_string_t("sling.jcrinstall.search.path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.jcrinstall.search.path")]);
            setSlingJcrinstallSearchPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.jcrinstall.new.config.path")))
    {
        if(!val[utility::conversions::to_string_t("sling.jcrinstall.new.config.path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.jcrinstall.new.config.path")]);
            setSlingJcrinstallNewConfigPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.jcrinstall.signal.path")))
    {
        if(!val[utility::conversions::to_string_t("sling.jcrinstall.signal.path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.jcrinstall.signal.path")]);
            setSlingJcrinstallSignalPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.jcrinstall.enable.writeback")))
    {
        if(!val[utility::conversions::to_string_t("sling.jcrinstall.enable.writeback")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.jcrinstall.enable.writeback")]);
            setSlingJcrinstallEnableWriteback( newItem );
        }
    }
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Handler_schemesIsSet)
    {
        if (m_Handler_schemes.get())
        {
            m_Handler_schemes->toMultipart(multipart, utility::conversions::to_string_t("handler.schemes."));
        }
    }
    if(m_Sling_jcrinstall_folder_name_regexpIsSet)
    {
        if (m_Sling_jcrinstall_folder_name_regexp.get())
        {
            m_Sling_jcrinstall_folder_name_regexp->toMultipart(multipart, utility::conversions::to_string_t("sling.jcrinstall.folder.name.regexp."));
        }
    }
    if(m_Sling_jcrinstall_folder_max_depthIsSet)
    {
        if (m_Sling_jcrinstall_folder_max_depth.get())
        {
            m_Sling_jcrinstall_folder_max_depth->toMultipart(multipart, utility::conversions::to_string_t("sling.jcrinstall.folder.max.depth."));
        }
    }
    if(m_Sling_jcrinstall_search_pathIsSet)
    {
        if (m_Sling_jcrinstall_search_path.get())
        {
            m_Sling_jcrinstall_search_path->toMultipart(multipart, utility::conversions::to_string_t("sling.jcrinstall.search.path."));
        }
    }
    if(m_Sling_jcrinstall_new_config_pathIsSet)
    {
        if (m_Sling_jcrinstall_new_config_path.get())
        {
            m_Sling_jcrinstall_new_config_path->toMultipart(multipart, utility::conversions::to_string_t("sling.jcrinstall.new.config.path."));
        }
    }
    if(m_Sling_jcrinstall_signal_pathIsSet)
    {
        if (m_Sling_jcrinstall_signal_path.get())
        {
            m_Sling_jcrinstall_signal_path->toMultipart(multipart, utility::conversions::to_string_t("sling.jcrinstall.signal.path."));
        }
    }
    if(m_Sling_jcrinstall_enable_writebackIsSet)
    {
        if (m_Sling_jcrinstall_enable_writeback.get())
        {
            m_Sling_jcrinstall_enable_writeback->toMultipart(multipart, utility::conversions::to_string_t("sling.jcrinstall.enable.writeback."));
        }
    }
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("handler.schemes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("handler.schemes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("handler.schemes."));
            setHandlerSchemes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.folder.name.regexp")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.folder.name.regexp")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.jcrinstall.folder.name.regexp."));
            setSlingJcrinstallFolderNameRegexp( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.folder.max.depth")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.folder.max.depth")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.jcrinstall.folder.max.depth."));
            setSlingJcrinstallFolderMaxDepth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.search.path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.search.path")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.jcrinstall.search.path."));
            setSlingJcrinstallSearchPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.new.config.path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.new.config.path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.jcrinstall.new.config.path."));
            setSlingJcrinstallNewConfigPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.signal.path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.signal.path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.jcrinstall.signal.path."));
            setSlingJcrinstallSignalPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.enable.writeback")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.jcrinstall.enable.writeback")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.jcrinstall.enable.writeback."));
            setSlingJcrinstallEnableWriteback( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getHandlerSchemes() const
{
    return m_Handler_schemes;
}


void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setHandlerSchemes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Handler_schemes = value;
    m_Handler_schemesIsSet = true;
}
bool OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::handlerSchemesIsSet() const
{
    return m_Handler_schemesIsSet;
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::unsetHandler_schemes()
{
    m_Handler_schemesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallFolderNameRegexp() const
{
    return m_Sling_jcrinstall_folder_name_regexp;
}


void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallFolderNameRegexp(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sling_jcrinstall_folder_name_regexp = value;
    m_Sling_jcrinstall_folder_name_regexpIsSet = true;
}
bool OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::slingJcrinstallFolderNameRegexpIsSet() const
{
    return m_Sling_jcrinstall_folder_name_regexpIsSet;
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::unsetSling_jcrinstall_folder_name_regexp()
{
    m_Sling_jcrinstall_folder_name_regexpIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallFolderMaxDepth() const
{
    return m_Sling_jcrinstall_folder_max_depth;
}


void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallFolderMaxDepth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Sling_jcrinstall_folder_max_depth = value;
    m_Sling_jcrinstall_folder_max_depthIsSet = true;
}
bool OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::slingJcrinstallFolderMaxDepthIsSet() const
{
    return m_Sling_jcrinstall_folder_max_depthIsSet;
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::unsetSling_jcrinstall_folder_max_depth()
{
    m_Sling_jcrinstall_folder_max_depthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallSearchPath() const
{
    return m_Sling_jcrinstall_search_path;
}


void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallSearchPath(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Sling_jcrinstall_search_path = value;
    m_Sling_jcrinstall_search_pathIsSet = true;
}
bool OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::slingJcrinstallSearchPathIsSet() const
{
    return m_Sling_jcrinstall_search_pathIsSet;
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::unsetSling_jcrinstall_search_path()
{
    m_Sling_jcrinstall_search_pathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallNewConfigPath() const
{
    return m_Sling_jcrinstall_new_config_path;
}


void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallNewConfigPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sling_jcrinstall_new_config_path = value;
    m_Sling_jcrinstall_new_config_pathIsSet = true;
}
bool OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::slingJcrinstallNewConfigPathIsSet() const
{
    return m_Sling_jcrinstall_new_config_pathIsSet;
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::unsetSling_jcrinstall_new_config_path()
{
    m_Sling_jcrinstall_new_config_pathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallSignalPath() const
{
    return m_Sling_jcrinstall_signal_path;
}


void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallSignalPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sling_jcrinstall_signal_path = value;
    m_Sling_jcrinstall_signal_pathIsSet = true;
}
bool OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::slingJcrinstallSignalPathIsSet() const
{
    return m_Sling_jcrinstall_signal_pathIsSet;
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::unsetSling_jcrinstall_signal_path()
{
    m_Sling_jcrinstall_signal_pathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallEnableWriteback() const
{
    return m_Sling_jcrinstall_enable_writeback;
}


void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallEnableWriteback(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Sling_jcrinstall_enable_writeback = value;
    m_Sling_jcrinstall_enable_writebackIsSet = true;
}
bool OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::slingJcrinstallEnableWritebackIsSet() const
{
    return m_Sling_jcrinstall_enable_writebackIsSet;
}

void OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::unsetSling_jcrinstall_enable_writeback()
{
    m_Sling_jcrinstall_enable_writebackIsSet = false;
}

}
}
}
}

