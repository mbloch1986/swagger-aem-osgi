/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties()
{
    m_CugSupportedPathsIsSet = false;
    m_CugEnabledIsSet = false;
    m_ConfigurationRankingIsSet = false;
}

OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::~OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties()
{
}

void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CugSupportedPathsIsSet)
    {
        val[utility::conversions::to_string_t("cugSupportedPaths")] = ModelBase::toJson(m_CugSupportedPaths);
    }
    if(m_CugEnabledIsSet)
    {
        val[utility::conversions::to_string_t("cugEnabled")] = ModelBase::toJson(m_CugEnabled);
    }
    if(m_ConfigurationRankingIsSet)
    {
        val[utility::conversions::to_string_t("configurationRanking")] = ModelBase::toJson(m_ConfigurationRanking);
    }

    return val;
}

void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cugSupportedPaths")))
    {
        if(!val[utility::conversions::to_string_t("cugSupportedPaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cugSupportedPaths")]);
            setCugSupportedPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cugEnabled")))
    {
        if(!val[utility::conversions::to_string_t("cugEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cugEnabled")]);
            setCugEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationRanking")))
    {
        if(!val[utility::conversions::to_string_t("configurationRanking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("configurationRanking")]);
            setConfigurationRanking( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CugSupportedPathsIsSet)
    {
        if (m_CugSupportedPaths.get())
        {
            m_CugSupportedPaths->toMultipart(multipart, utility::conversions::to_string_t("cugSupportedPaths."));
        }
    }
    if(m_CugEnabledIsSet)
    {
        if (m_CugEnabled.get())
        {
            m_CugEnabled->toMultipart(multipart, utility::conversions::to_string_t("cugEnabled."));
        }
    }
    if(m_ConfigurationRankingIsSet)
    {
        if (m_ConfigurationRanking.get())
        {
            m_ConfigurationRanking->toMultipart(multipart, utility::conversions::to_string_t("configurationRanking."));
        }
    }
}

void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cugSupportedPaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cugSupportedPaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cugSupportedPaths."));
            setCugSupportedPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cugEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cugEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cugEnabled."));
            setCugEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationRanking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("configurationRanking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("configurationRanking."));
            setConfigurationRanking( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::getCugSupportedPaths() const
{
    return m_CugSupportedPaths;
}


void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::setCugSupportedPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_CugSupportedPaths = value;
    m_CugSupportedPathsIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::cugSupportedPathsIsSet() const
{
    return m_CugSupportedPathsIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::unsetCugSupportedPaths()
{
    m_CugSupportedPathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::getCugEnabled() const
{
    return m_CugEnabled;
}


void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::setCugEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_CugEnabled = value;
    m_CugEnabledIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::cugEnabledIsSet() const
{
    return m_CugEnabledIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::unsetCugEnabled()
{
    m_CugEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::getConfigurationRanking() const
{
    return m_ConfigurationRanking;
}


void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::setConfigurationRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ConfigurationRanking = value;
    m_ConfigurationRankingIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::configurationRankingIsSet() const
{
    return m_ConfigurationRankingIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties::unsetConfigurationRanking()
{
    m_ConfigurationRankingIsSet = false;
}

}
}
}
}

