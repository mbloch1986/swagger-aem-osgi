/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheFelixHttpSslfilterSslFilterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheFelixHttpSslfilterSslFilterProperties::OrgApacheFelixHttpSslfilterSslFilterProperties()
{
    m_Ssl_forward_headerIsSet = false;
    m_Ssl_forward_valueIsSet = false;
    m_Ssl_forward_cert_headerIsSet = false;
    m_Rewrite_absolute_urlsIsSet = false;
    
}

OrgApacheFelixHttpSslfilterSslFilterProperties::~OrgApacheFelixHttpSslfilterSslFilterProperties()
{
}

void OrgApacheFelixHttpSslfilterSslFilterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheFelixHttpSslfilterSslFilterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Ssl_forward_headerIsSet)
    {
        val["ssl-forward.header"] = ModelBase::toJson(m_Ssl_forward_header);
    }
    if(m_Ssl_forward_valueIsSet)
    {
        val["ssl-forward.value"] = ModelBase::toJson(m_Ssl_forward_value);
    }
    if(m_Ssl_forward_cert_headerIsSet)
    {
        val["ssl-forward-cert.header"] = ModelBase::toJson(m_Ssl_forward_cert_header);
    }
    if(m_Rewrite_absolute_urlsIsSet)
    {
        val["rewrite.absolute.urls"] = ModelBase::toJson(m_Rewrite_absolute_urls);
    }
    

    return val;
}

void OrgApacheFelixHttpSslfilterSslFilterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("ssl-forward.header") != val.end())
    {
        if(!val["ssl-forward.header"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["ssl-forward.header"]);
            setSslForwardHeader( newItem );
        }
        
    }
    if(val.find("ssl-forward.value") != val.end())
    {
        if(!val["ssl-forward.value"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["ssl-forward.value"]);
            setSslForwardValue( newItem );
        }
        
    }
    if(val.find("ssl-forward-cert.header") != val.end())
    {
        if(!val["ssl-forward-cert.header"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["ssl-forward-cert.header"]);
            setSslForwardCertHeader( newItem );
        }
        
    }
    if(val.find("rewrite.absolute.urls") != val.end())
    {
        if(!val["rewrite.absolute.urls"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["rewrite.absolute.urls"]);
            setRewriteAbsoluteUrls( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheFelixHttpSslfilterSslFilterProperties::getSslForwardHeader() const
{
    return m_Ssl_forward_header;
}
void OrgApacheFelixHttpSslfilterSslFilterProperties::setSslForwardHeader(ConfigNodePropertyString const& value)
{
    m_Ssl_forward_header = value;
    m_Ssl_forward_headerIsSet = true;
}
bool OrgApacheFelixHttpSslfilterSslFilterProperties::sslForwardHeaderIsSet() const
{
    return m_Ssl_forward_headerIsSet;
}
void OrgApacheFelixHttpSslfilterSslFilterProperties::unsetSsl_forward_header()
{
    m_Ssl_forward_headerIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpSslfilterSslFilterProperties::getSslForwardValue() const
{
    return m_Ssl_forward_value;
}
void OrgApacheFelixHttpSslfilterSslFilterProperties::setSslForwardValue(ConfigNodePropertyString const& value)
{
    m_Ssl_forward_value = value;
    m_Ssl_forward_valueIsSet = true;
}
bool OrgApacheFelixHttpSslfilterSslFilterProperties::sslForwardValueIsSet() const
{
    return m_Ssl_forward_valueIsSet;
}
void OrgApacheFelixHttpSslfilterSslFilterProperties::unsetSsl_forward_value()
{
    m_Ssl_forward_valueIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpSslfilterSslFilterProperties::getSslForwardCertHeader() const
{
    return m_Ssl_forward_cert_header;
}
void OrgApacheFelixHttpSslfilterSslFilterProperties::setSslForwardCertHeader(ConfigNodePropertyString const& value)
{
    m_Ssl_forward_cert_header = value;
    m_Ssl_forward_cert_headerIsSet = true;
}
bool OrgApacheFelixHttpSslfilterSslFilterProperties::sslForwardCertHeaderIsSet() const
{
    return m_Ssl_forward_cert_headerIsSet;
}
void OrgApacheFelixHttpSslfilterSslFilterProperties::unsetSsl_forward_cert_header()
{
    m_Ssl_forward_cert_headerIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpSslfilterSslFilterProperties::getRewriteAbsoluteUrls() const
{
    return m_Rewrite_absolute_urls;
}
void OrgApacheFelixHttpSslfilterSslFilterProperties::setRewriteAbsoluteUrls(ConfigNodePropertyBoolean const& value)
{
    m_Rewrite_absolute_urls = value;
    m_Rewrite_absolute_urlsIsSet = true;
}
bool OrgApacheFelixHttpSslfilterSslFilterProperties::rewriteAbsoluteUrlsIsSet() const
{
    return m_Rewrite_absolute_urlsIsSet;
}
void OrgApacheFelixHttpSslfilterSslFilterProperties::unsetRewrite_absolute_urls()
{
    m_Rewrite_absolute_urlsIsSet = false;
}

}
}
}
}

