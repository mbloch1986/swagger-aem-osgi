/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
  #[serde(rename = "period")]
  period: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "timeUnit")]
  time_unit: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "level")]
  level: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "loggerName")]
  logger_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "prefix")]
  prefix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "pattern")]
  pattern: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "registryName")]
  registry_name: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
  pub fn new() -> OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
    OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
      period: None,
      time_unit: None,
      level: None,
      logger_name: None,
      prefix: None,
      pattern: None,
      registry_name: None
    }
  }

  pub fn set_period(&mut self, period: ::models::ConfigNodePropertyInteger) {
    self.period = Some(period);
  }

  pub fn with_period(mut self, period: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
    self.period = Some(period);
    self
  }

  pub fn period(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.period.as_ref()
  }

  pub fn reset_period(&mut self) {
    self.period = None;
  }

  pub fn set_time_unit(&mut self, time_unit: ::models::ConfigNodePropertyDropDown) {
    self.time_unit = Some(time_unit);
  }

  pub fn with_time_unit(mut self, time_unit: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
    self.time_unit = Some(time_unit);
    self
  }

  pub fn time_unit(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.time_unit.as_ref()
  }

  pub fn reset_time_unit(&mut self) {
    self.time_unit = None;
  }

  pub fn set_level(&mut self, level: ::models::ConfigNodePropertyDropDown) {
    self.level = Some(level);
  }

  pub fn with_level(mut self, level: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
    self.level = Some(level);
    self
  }

  pub fn level(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.level.as_ref()
  }

  pub fn reset_level(&mut self) {
    self.level = None;
  }

  pub fn set_logger_name(&mut self, logger_name: ::models::ConfigNodePropertyString) {
    self.logger_name = Some(logger_name);
  }

  pub fn with_logger_name(mut self, logger_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
    self.logger_name = Some(logger_name);
    self
  }

  pub fn logger_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.logger_name.as_ref()
  }

  pub fn reset_logger_name(&mut self) {
    self.logger_name = None;
  }

  pub fn set_prefix(&mut self, prefix: ::models::ConfigNodePropertyString) {
    self.prefix = Some(prefix);
  }

  pub fn with_prefix(mut self, prefix: ::models::ConfigNodePropertyString) -> OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
    self.prefix = Some(prefix);
    self
  }

  pub fn prefix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.prefix.as_ref()
  }

  pub fn reset_prefix(&mut self) {
    self.prefix = None;
  }

  pub fn set_pattern(&mut self, pattern: ::models::ConfigNodePropertyString) {
    self.pattern = Some(pattern);
  }

  pub fn with_pattern(mut self, pattern: ::models::ConfigNodePropertyString) -> OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
    self.pattern = Some(pattern);
    self
  }

  pub fn pattern(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pattern.as_ref()
  }

  pub fn reset_pattern(&mut self) {
    self.pattern = None;
  }

  pub fn set_registry_name(&mut self, registry_name: ::models::ConfigNodePropertyString) {
    self.registry_name = Some(registry_name);
  }

  pub fn with_registry_name(mut self, registry_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
    self.registry_name = Some(registry_name);
    self
  }

  pub fn registry_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.registry_name.as_ref()
  }

  pub fn reset_registry_name(&mut self) {
    self.registry_name = None;
  }

}



