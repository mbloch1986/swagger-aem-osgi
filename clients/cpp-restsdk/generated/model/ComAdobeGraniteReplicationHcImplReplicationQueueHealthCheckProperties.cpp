/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties()
{
    m_Number_of_retries_allowedIsSet = false;
    m_Hc_tagsIsSet = false;
}

ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::~ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties()
{
}

void ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Number_of_retries_allowedIsSet)
    {
        val[utility::conversions::to_string_t("number.of.retries.allowed")] = ModelBase::toJson(m_Number_of_retries_allowed);
    }
    if(m_Hc_tagsIsSet)
    {
        val[utility::conversions::to_string_t("hc.tags")] = ModelBase::toJson(m_Hc_tags);
    }

    return val;
}

void ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("number.of.retries.allowed")))
    {
        if(!val[utility::conversions::to_string_t("number.of.retries.allowed")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("number.of.retries.allowed")]);
            setNumberOfRetriesAllowed( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hc.tags")))
    {
        if(!val[utility::conversions::to_string_t("hc.tags")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("hc.tags")]);
            setHcTags( newItem );
        }
    }
}

void ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Number_of_retries_allowedIsSet)
    {
        if (m_Number_of_retries_allowed.get())
        {
            m_Number_of_retries_allowed->toMultipart(multipart, utility::conversions::to_string_t("number.of.retries.allowed."));
        }
    }
    if(m_Hc_tagsIsSet)
    {
        if (m_Hc_tags.get())
        {
            m_Hc_tags->toMultipart(multipart, utility::conversions::to_string_t("hc.tags."));
        }
    }
}

void ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("number.of.retries.allowed")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("number.of.retries.allowed")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("number.of.retries.allowed."));
            setNumberOfRetriesAllowed( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hc.tags")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("hc.tags")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("hc.tags."));
            setHcTags( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::getNumberOfRetriesAllowed() const
{
    return m_Number_of_retries_allowed;
}


void ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::setNumberOfRetriesAllowed(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Number_of_retries_allowed = value;
    m_Number_of_retries_allowedIsSet = true;
}
bool ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::numberOfRetriesAllowedIsSet() const
{
    return m_Number_of_retries_allowedIsSet;
}

void ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::unsetNumber_of_retries_allowed()
{
    m_Number_of_retries_allowedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::getHcTags() const
{
    return m_Hc_tags;
}


void ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::setHcTags(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Hc_tags = value;
    m_Hc_tagsIsSet = true;
}
bool ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::hcTagsIsSet() const
{
    return m_Hc_tagsIsSet;
}

void ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties::unsetHc_tags()
{
    m_Hc_tagsIsSet = false;
}

}
}
}
}

