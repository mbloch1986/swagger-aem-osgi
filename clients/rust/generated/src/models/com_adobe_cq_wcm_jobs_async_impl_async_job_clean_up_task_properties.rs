/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
  #[serde(rename = "scheduler.expression")]
  scheduler_expression: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "job.purge.threshold")]
  job_purge_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "job.purge.max.jobs")]
  job_purge_max_jobs: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
  pub fn new() -> ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
    ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
      scheduler_expression: None,
      job_purge_threshold: None,
      job_purge_max_jobs: None
    }
  }

  pub fn set_scheduler_expression(&mut self, scheduler_expression: ::models::ConfigNodePropertyString) {
    self.scheduler_expression = Some(scheduler_expression);
  }

  pub fn with_scheduler_expression(mut self, scheduler_expression: ::models::ConfigNodePropertyString) -> ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
    self.scheduler_expression = Some(scheduler_expression);
    self
  }

  pub fn scheduler_expression(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.scheduler_expression.as_ref()
  }

  pub fn reset_scheduler_expression(&mut self) {
    self.scheduler_expression = None;
  }

  pub fn set_job_purge_threshold(&mut self, job_purge_threshold: ::models::ConfigNodePropertyInteger) {
    self.job_purge_threshold = Some(job_purge_threshold);
  }

  pub fn with_job_purge_threshold(mut self, job_purge_threshold: ::models::ConfigNodePropertyInteger) -> ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
    self.job_purge_threshold = Some(job_purge_threshold);
    self
  }

  pub fn job_purge_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.job_purge_threshold.as_ref()
  }

  pub fn reset_job_purge_threshold(&mut self) {
    self.job_purge_threshold = None;
  }

  pub fn set_job_purge_max_jobs(&mut self, job_purge_max_jobs: ::models::ConfigNodePropertyInteger) {
    self.job_purge_max_jobs = Some(job_purge_max_jobs);
  }

  pub fn with_job_purge_max_jobs(mut self, job_purge_max_jobs: ::models::ConfigNodePropertyInteger) -> ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
    self.job_purge_max_jobs = Some(job_purge_max_jobs);
    self
  }

  pub fn job_purge_max_jobs(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.job_purge_max_jobs.as_ref()
  }

  pub fn reset_job_purge_max_jobs(&mut self) {
    self.job_purge_max_jobs = None;
  }

}



