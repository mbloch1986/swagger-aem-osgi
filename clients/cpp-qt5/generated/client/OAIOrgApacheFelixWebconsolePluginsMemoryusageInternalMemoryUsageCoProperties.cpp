/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties() {
    init();
}

OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::~OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties() {
    this->cleanup();
}

void
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::init() {
    felix_memoryusage_dump_threshold = new OAIConfigNodePropertyInteger();
    m_felix_memoryusage_dump_threshold_isSet = false;
    felix_memoryusage_dump_interval = new OAIConfigNodePropertyInteger();
    m_felix_memoryusage_dump_interval_isSet = false;
    felix_memoryusage_dump_location = new OAIConfigNodePropertyString();
    m_felix_memoryusage_dump_location_isSet = false;
}

void
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::cleanup() {
    if(felix_memoryusage_dump_threshold != nullptr) { 
        delete felix_memoryusage_dump_threshold;
    }
    if(felix_memoryusage_dump_interval != nullptr) { 
        delete felix_memoryusage_dump_interval;
    }
    if(felix_memoryusage_dump_location != nullptr) { 
        delete felix_memoryusage_dump_location;
    }
}

OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties*
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&felix_memoryusage_dump_threshold, pJson["felix.memoryusage.dump.threshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&felix_memoryusage_dump_interval, pJson["felix.memoryusage.dump.interval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&felix_memoryusage_dump_location, pJson["felix.memoryusage.dump.location"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::asJsonObject() {
    QJsonObject obj;
    if((felix_memoryusage_dump_threshold != nullptr) && (felix_memoryusage_dump_threshold->isSet())){
        toJsonValue(QString("felix.memoryusage.dump.threshold"), felix_memoryusage_dump_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((felix_memoryusage_dump_interval != nullptr) && (felix_memoryusage_dump_interval->isSet())){
        toJsonValue(QString("felix.memoryusage.dump.interval"), felix_memoryusage_dump_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((felix_memoryusage_dump_location != nullptr) && (felix_memoryusage_dump_location->isSet())){
        toJsonValue(QString("felix.memoryusage.dump.location"), felix_memoryusage_dump_location, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::getFelixMemoryusageDumpThreshold() {
    return felix_memoryusage_dump_threshold;
}
void
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::setFelixMemoryusageDumpThreshold(OAIConfigNodePropertyInteger* felix_memoryusage_dump_threshold) {
    this->felix_memoryusage_dump_threshold = felix_memoryusage_dump_threshold;
    this->m_felix_memoryusage_dump_threshold_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::getFelixMemoryusageDumpInterval() {
    return felix_memoryusage_dump_interval;
}
void
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::setFelixMemoryusageDumpInterval(OAIConfigNodePropertyInteger* felix_memoryusage_dump_interval) {
    this->felix_memoryusage_dump_interval = felix_memoryusage_dump_interval;
    this->m_felix_memoryusage_dump_interval_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::getFelixMemoryusageDumpLocation() {
    return felix_memoryusage_dump_location;
}
void
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::setFelixMemoryusageDumpLocation(OAIConfigNodePropertyString* felix_memoryusage_dump_location) {
    this->felix_memoryusage_dump_location = felix_memoryusage_dump_location;
    this->m_felix_memoryusage_dump_location_isSet = true;
}


bool
OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(felix_memoryusage_dump_threshold != nullptr && felix_memoryusage_dump_threshold->isSet()){ isObjectUpdated = true; break;}
        if(felix_memoryusage_dump_interval != nullptr && felix_memoryusage_dump_interval->isSet()){ isObjectUpdated = true; break;}
        if(felix_memoryusage_dump_location != nullptr && felix_memoryusage_dump_location->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

