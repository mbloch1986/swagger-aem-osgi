/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties() {
    init();
}

OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::~OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    min_pool_size = new OAIConfigNodePropertyInteger();
    m_min_pool_size_isSet = false;
    max_pool_size = new OAIConfigNodePropertyInteger();
    m_max_pool_size_isSet = false;
    queue_size = new OAIConfigNodePropertyInteger();
    m_queue_size_isSet = false;
    max_thread_age = new OAIConfigNodePropertyInteger();
    m_max_thread_age_isSet = false;
    keep_alive_time = new OAIConfigNodePropertyInteger();
    m_keep_alive_time_isSet = false;
    block_policy = new OAIConfigNodePropertyDropDown();
    m_block_policy_isSet = false;
    shutdown_graceful = new OAIConfigNodePropertyBoolean();
    m_shutdown_graceful_isSet = false;
    daemon = new OAIConfigNodePropertyBoolean();
    m_daemon_isSet = false;
    shutdown_wait_time = new OAIConfigNodePropertyInteger();
    m_shutdown_wait_time_isSet = false;
    priority = new OAIConfigNodePropertyDropDown();
    m_priority_isSet = false;
}

void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(min_pool_size != nullptr) { 
        delete min_pool_size;
    }
    if(max_pool_size != nullptr) { 
        delete max_pool_size;
    }
    if(queue_size != nullptr) { 
        delete queue_size;
    }
    if(max_thread_age != nullptr) { 
        delete max_thread_age;
    }
    if(keep_alive_time != nullptr) { 
        delete keep_alive_time;
    }
    if(block_policy != nullptr) { 
        delete block_policy;
    }
    if(shutdown_graceful != nullptr) { 
        delete shutdown_graceful;
    }
    if(daemon != nullptr) { 
        delete daemon;
    }
    if(shutdown_wait_time != nullptr) { 
        delete shutdown_wait_time;
    }
    if(priority != nullptr) { 
        delete priority;
    }
}

OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&min_pool_size, pJson["minPoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_pool_size, pJson["maxPoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&queue_size, pJson["queueSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_thread_age, pJson["maxThreadAge"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&keep_alive_time, pJson["keepAliveTime"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&block_policy, pJson["blockPolicy"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&shutdown_graceful, pJson["shutdownGraceful"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&daemon, pJson["daemon"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&shutdown_wait_time, pJson["shutdownWaitTime"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&priority, pJson["priority"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
}

QString
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((min_pool_size != nullptr) && (min_pool_size->isSet())){
        toJsonValue(QString("minPoolSize"), min_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_pool_size != nullptr) && (max_pool_size->isSet())){
        toJsonValue(QString("maxPoolSize"), max_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((queue_size != nullptr) && (queue_size->isSet())){
        toJsonValue(QString("queueSize"), queue_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_thread_age != nullptr) && (max_thread_age->isSet())){
        toJsonValue(QString("maxThreadAge"), max_thread_age, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((keep_alive_time != nullptr) && (keep_alive_time->isSet())){
        toJsonValue(QString("keepAliveTime"), keep_alive_time, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((block_policy != nullptr) && (block_policy->isSet())){
        toJsonValue(QString("blockPolicy"), block_policy, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((shutdown_graceful != nullptr) && (shutdown_graceful->isSet())){
        toJsonValue(QString("shutdownGraceful"), shutdown_graceful, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((daemon != nullptr) && (daemon->isSet())){
        toJsonValue(QString("daemon"), daemon, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((shutdown_wait_time != nullptr) && (shutdown_wait_time->isSet())){
        toJsonValue(QString("shutdownWaitTime"), shutdown_wait_time, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((priority != nullptr) && (priority->isSet())){
        toJsonValue(QString("priority"), priority, obj, QString("OAIConfigNodePropertyDropDown"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getName() {
    return name;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMinPoolSize() {
    return min_pool_size;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMinPoolSize(OAIConfigNodePropertyInteger* min_pool_size) {
    this->min_pool_size = min_pool_size;
    this->m_min_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMaxPoolSize() {
    return max_pool_size;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMaxPoolSize(OAIConfigNodePropertyInteger* max_pool_size) {
    this->max_pool_size = max_pool_size;
    this->m_max_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getQueueSize() {
    return queue_size;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setQueueSize(OAIConfigNodePropertyInteger* queue_size) {
    this->queue_size = queue_size;
    this->m_queue_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMaxThreadAge() {
    return max_thread_age;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMaxThreadAge(OAIConfigNodePropertyInteger* max_thread_age) {
    this->max_thread_age = max_thread_age;
    this->m_max_thread_age_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getKeepAliveTime() {
    return keep_alive_time;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setKeepAliveTime(OAIConfigNodePropertyInteger* keep_alive_time) {
    this->keep_alive_time = keep_alive_time;
    this->m_keep_alive_time_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getBlockPolicy() {
    return block_policy;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setBlockPolicy(OAIConfigNodePropertyDropDown* block_policy) {
    this->block_policy = block_policy;
    this->m_block_policy_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getShutdownGraceful() {
    return shutdown_graceful;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setShutdownGraceful(OAIConfigNodePropertyBoolean* shutdown_graceful) {
    this->shutdown_graceful = shutdown_graceful;
    this->m_shutdown_graceful_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getDaemon() {
    return daemon;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setDaemon(OAIConfigNodePropertyBoolean* daemon) {
    this->daemon = daemon;
    this->m_daemon_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getShutdownWaitTime() {
    return shutdown_wait_time;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setShutdownWaitTime(OAIConfigNodePropertyInteger* shutdown_wait_time) {
    this->shutdown_wait_time = shutdown_wait_time;
    this->m_shutdown_wait_time_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getPriority() {
    return priority;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setPriority(OAIConfigNodePropertyDropDown* priority) {
    this->priority = priority;
    this->m_priority_isSet = true;
}


bool
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(min_pool_size != nullptr && min_pool_size->isSet()){ isObjectUpdated = true; break;}
        if(max_pool_size != nullptr && max_pool_size->isSet()){ isObjectUpdated = true; break;}
        if(queue_size != nullptr && queue_size->isSet()){ isObjectUpdated = true; break;}
        if(max_thread_age != nullptr && max_thread_age->isSet()){ isObjectUpdated = true; break;}
        if(keep_alive_time != nullptr && keep_alive_time->isSet()){ isObjectUpdated = true; break;}
        if(block_policy != nullptr && block_policy->isSet()){ isObjectUpdated = true; break;}
        if(shutdown_graceful != nullptr && shutdown_graceful->isSet()){ isObjectUpdated = true; break;}
        if(daemon != nullptr && daemon->isSet()){ isObjectUpdated = true; break;}
        if(shutdown_wait_time != nullptr && shutdown_wait_time->isSet()){ isObjectUpdated = true; break;}
        if(priority != nullptr && priority->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

