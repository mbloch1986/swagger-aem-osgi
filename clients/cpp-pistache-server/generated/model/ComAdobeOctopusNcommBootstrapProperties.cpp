/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeOctopusNcommBootstrapProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeOctopusNcommBootstrapProperties::ComAdobeOctopusNcommBootstrapProperties()
{
    m_MaxConnectionsIsSet = false;
    m_MaxRequestsIsSet = false;
    m_RequestTimeoutIsSet = false;
    m_RequestRetriesIsSet = false;
    m_LaunchTimeoutIsSet = false;
    
}

ComAdobeOctopusNcommBootstrapProperties::~ComAdobeOctopusNcommBootstrapProperties()
{
}

void ComAdobeOctopusNcommBootstrapProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeOctopusNcommBootstrapProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_MaxConnectionsIsSet)
    {
        val["maxConnections"] = ModelBase::toJson(m_MaxConnections);
    }
    if(m_MaxRequestsIsSet)
    {
        val["maxRequests"] = ModelBase::toJson(m_MaxRequests);
    }
    if(m_RequestTimeoutIsSet)
    {
        val["requestTimeout"] = ModelBase::toJson(m_RequestTimeout);
    }
    if(m_RequestRetriesIsSet)
    {
        val["requestRetries"] = ModelBase::toJson(m_RequestRetries);
    }
    if(m_LaunchTimeoutIsSet)
    {
        val["launchTimeout"] = ModelBase::toJson(m_LaunchTimeout);
    }
    

    return val;
}

void ComAdobeOctopusNcommBootstrapProperties::fromJson(nlohmann::json& val)
{
    if(val.find("maxConnections") != val.end())
    {
        if(!val["maxConnections"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxConnections"]);
            setMaxConnections( newItem );
        }
        
    }
    if(val.find("maxRequests") != val.end())
    {
        if(!val["maxRequests"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxRequests"]);
            setMaxRequests( newItem );
        }
        
    }
    if(val.find("requestTimeout") != val.end())
    {
        if(!val["requestTimeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["requestTimeout"]);
            setRequestTimeout( newItem );
        }
        
    }
    if(val.find("requestRetries") != val.end())
    {
        if(!val["requestRetries"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["requestRetries"]);
            setRequestRetries( newItem );
        }
        
    }
    if(val.find("launchTimeout") != val.end())
    {
        if(!val["launchTimeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["launchTimeout"]);
            setLaunchTimeout( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComAdobeOctopusNcommBootstrapProperties::getMaxConnections() const
{
    return m_MaxConnections;
}
void ComAdobeOctopusNcommBootstrapProperties::setMaxConnections(ConfigNodePropertyInteger const& value)
{
    m_MaxConnections = value;
    m_MaxConnectionsIsSet = true;
}
bool ComAdobeOctopusNcommBootstrapProperties::maxConnectionsIsSet() const
{
    return m_MaxConnectionsIsSet;
}
void ComAdobeOctopusNcommBootstrapProperties::unsetMaxConnections()
{
    m_MaxConnectionsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeOctopusNcommBootstrapProperties::getMaxRequests() const
{
    return m_MaxRequests;
}
void ComAdobeOctopusNcommBootstrapProperties::setMaxRequests(ConfigNodePropertyInteger const& value)
{
    m_MaxRequests = value;
    m_MaxRequestsIsSet = true;
}
bool ComAdobeOctopusNcommBootstrapProperties::maxRequestsIsSet() const
{
    return m_MaxRequestsIsSet;
}
void ComAdobeOctopusNcommBootstrapProperties::unsetMaxRequests()
{
    m_MaxRequestsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeOctopusNcommBootstrapProperties::getRequestTimeout() const
{
    return m_RequestTimeout;
}
void ComAdobeOctopusNcommBootstrapProperties::setRequestTimeout(ConfigNodePropertyInteger const& value)
{
    m_RequestTimeout = value;
    m_RequestTimeoutIsSet = true;
}
bool ComAdobeOctopusNcommBootstrapProperties::requestTimeoutIsSet() const
{
    return m_RequestTimeoutIsSet;
}
void ComAdobeOctopusNcommBootstrapProperties::unsetRequestTimeout()
{
    m_RequestTimeoutIsSet = false;
}
ConfigNodePropertyInteger ComAdobeOctopusNcommBootstrapProperties::getRequestRetries() const
{
    return m_RequestRetries;
}
void ComAdobeOctopusNcommBootstrapProperties::setRequestRetries(ConfigNodePropertyInteger const& value)
{
    m_RequestRetries = value;
    m_RequestRetriesIsSet = true;
}
bool ComAdobeOctopusNcommBootstrapProperties::requestRetriesIsSet() const
{
    return m_RequestRetriesIsSet;
}
void ComAdobeOctopusNcommBootstrapProperties::unsetRequestRetries()
{
    m_RequestRetriesIsSet = false;
}
ConfigNodePropertyInteger ComAdobeOctopusNcommBootstrapProperties::getLaunchTimeout() const
{
    return m_LaunchTimeout;
}
void ComAdobeOctopusNcommBootstrapProperties::setLaunchTimeout(ConfigNodePropertyInteger const& value)
{
    m_LaunchTimeout = value;
    m_LaunchTimeoutIsSet = true;
}
bool ComAdobeOctopusNcommBootstrapProperties::launchTimeoutIsSet() const
{
    return m_LaunchTimeoutIsSet;
}
void ComAdobeOctopusNcommBootstrapProperties::unsetLaunchTimeout()
{
    m_LaunchTimeoutIsSet = false;
}

}
}
}
}

