/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplUnzipUnzipConfigProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplUnzipUnzipConfigProperties::ComDayCqDamCoreImplUnzipUnzipConfigProperties()
{
    m_Cq_dam_config_unzip_maxuncompressedsizeIsSet = false;
    m_Cq_dam_config_unzip_encodingIsSet = false;
}

ComDayCqDamCoreImplUnzipUnzipConfigProperties::~ComDayCqDamCoreImplUnzipUnzipConfigProperties()
{
}

void ComDayCqDamCoreImplUnzipUnzipConfigProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplUnzipUnzipConfigProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_config_unzip_maxuncompressedsizeIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.unzip.maxuncompressedsize")] = ModelBase::toJson(m_Cq_dam_config_unzip_maxuncompressedsize);
    }
    if(m_Cq_dam_config_unzip_encodingIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.unzip.encoding")] = ModelBase::toJson(m_Cq_dam_config_unzip_encoding);
    }

    return val;
}

void ComDayCqDamCoreImplUnzipUnzipConfigProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.unzip.maxuncompressedsize")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.unzip.maxuncompressedsize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.unzip.maxuncompressedsize")]);
            setCqDamConfigUnzipMaxuncompressedsize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.unzip.encoding")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.unzip.encoding")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.unzip.encoding")]);
            setCqDamConfigUnzipEncoding( newItem );
        }
    }
}

void ComDayCqDamCoreImplUnzipUnzipConfigProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_config_unzip_maxuncompressedsizeIsSet)
    {
        if (m_Cq_dam_config_unzip_maxuncompressedsize.get())
        {
            m_Cq_dam_config_unzip_maxuncompressedsize->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.unzip.maxuncompressedsize."));
        }
    }
    if(m_Cq_dam_config_unzip_encodingIsSet)
    {
        if (m_Cq_dam_config_unzip_encoding.get())
        {
            m_Cq_dam_config_unzip_encoding->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.unzip.encoding."));
        }
    }
}

void ComDayCqDamCoreImplUnzipUnzipConfigProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.unzip.maxuncompressedsize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.unzip.maxuncompressedsize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.unzip.maxuncompressedsize."));
            setCqDamConfigUnzipMaxuncompressedsize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.unzip.encoding")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.unzip.encoding")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.unzip.encoding."));
            setCqDamConfigUnzipEncoding( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplUnzipUnzipConfigProperties::getCqDamConfigUnzipMaxuncompressedsize() const
{
    return m_Cq_dam_config_unzip_maxuncompressedsize;
}


void ComDayCqDamCoreImplUnzipUnzipConfigProperties::setCqDamConfigUnzipMaxuncompressedsize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_unzip_maxuncompressedsize = value;
    m_Cq_dam_config_unzip_maxuncompressedsizeIsSet = true;
}
bool ComDayCqDamCoreImplUnzipUnzipConfigProperties::cqDamConfigUnzipMaxuncompressedsizeIsSet() const
{
    return m_Cq_dam_config_unzip_maxuncompressedsizeIsSet;
}

void ComDayCqDamCoreImplUnzipUnzipConfigProperties::unsetCq_dam_config_unzip_maxuncompressedsize()
{
    m_Cq_dam_config_unzip_maxuncompressedsizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplUnzipUnzipConfigProperties::getCqDamConfigUnzipEncoding() const
{
    return m_Cq_dam_config_unzip_encoding;
}


void ComDayCqDamCoreImplUnzipUnzipConfigProperties::setCqDamConfigUnzipEncoding(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_config_unzip_encoding = value;
    m_Cq_dam_config_unzip_encodingIsSet = true;
}
bool ComDayCqDamCoreImplUnzipUnzipConfigProperties::cqDamConfigUnzipEncodingIsSet() const
{
    return m_Cq_dam_config_unzip_encodingIsSet;
}

void ComDayCqDamCoreImplUnzipUnzipConfigProperties::unsetCq_dam_config_unzip_encoding()
{
    m_Cq_dam_config_unzip_encodingIsSet = false;
}

}
}
}
}

