/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteCorsImplCORSPolicyImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::OAIComAdobeGraniteCorsImplCORSPolicyImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::OAIComAdobeGraniteCorsImplCORSPolicyImplProperties() {
    init();
}

OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::~OAIComAdobeGraniteCorsImplCORSPolicyImplProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::init() {
    alloworigin = new OAIConfigNodePropertyArray();
    m_alloworigin_isSet = false;
    alloworiginregexp = new OAIConfigNodePropertyArray();
    m_alloworiginregexp_isSet = false;
    allowedpaths = new OAIConfigNodePropertyArray();
    m_allowedpaths_isSet = false;
    exposedheaders = new OAIConfigNodePropertyArray();
    m_exposedheaders_isSet = false;
    maxage = new OAIConfigNodePropertyInteger();
    m_maxage_isSet = false;
    supportedheaders = new OAIConfigNodePropertyArray();
    m_supportedheaders_isSet = false;
    supportedmethods = new OAIConfigNodePropertyArray();
    m_supportedmethods_isSet = false;
    supportscredentials = new OAIConfigNodePropertyBoolean();
    m_supportscredentials_isSet = false;
}

void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::cleanup() {
    if(alloworigin != nullptr) { 
        delete alloworigin;
    }
    if(alloworiginregexp != nullptr) { 
        delete alloworiginregexp;
    }
    if(allowedpaths != nullptr) { 
        delete allowedpaths;
    }
    if(exposedheaders != nullptr) { 
        delete exposedheaders;
    }
    if(maxage != nullptr) { 
        delete maxage;
    }
    if(supportedheaders != nullptr) { 
        delete supportedheaders;
    }
    if(supportedmethods != nullptr) { 
        delete supportedmethods;
    }
    if(supportscredentials != nullptr) { 
        delete supportscredentials;
    }
}

OAIComAdobeGraniteCorsImplCORSPolicyImplProperties*
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&alloworigin, pJson["alloworigin"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&alloworiginregexp, pJson["alloworiginregexp"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&allowedpaths, pJson["allowedpaths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&exposedheaders, pJson["exposedheaders"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&maxage, pJson["maxage"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&supportedheaders, pJson["supportedheaders"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&supportedmethods, pJson["supportedmethods"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&supportscredentials, pJson["supportscredentials"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::asJsonObject() {
    QJsonObject obj;
    if((alloworigin != nullptr) && (alloworigin->isSet())){
        toJsonValue(QString("alloworigin"), alloworigin, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((alloworiginregexp != nullptr) && (alloworiginregexp->isSet())){
        toJsonValue(QString("alloworiginregexp"), alloworiginregexp, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((allowedpaths != nullptr) && (allowedpaths->isSet())){
        toJsonValue(QString("allowedpaths"), allowedpaths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((exposedheaders != nullptr) && (exposedheaders->isSet())){
        toJsonValue(QString("exposedheaders"), exposedheaders, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((maxage != nullptr) && (maxage->isSet())){
        toJsonValue(QString("maxage"), maxage, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((supportedheaders != nullptr) && (supportedheaders->isSet())){
        toJsonValue(QString("supportedheaders"), supportedheaders, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((supportedmethods != nullptr) && (supportedmethods->isSet())){
        toJsonValue(QString("supportedmethods"), supportedmethods, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((supportscredentials != nullptr) && (supportscredentials->isSet())){
        toJsonValue(QString("supportscredentials"), supportscredentials, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::getAlloworigin() {
    return alloworigin;
}
void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::setAlloworigin(OAIConfigNodePropertyArray* alloworigin) {
    this->alloworigin = alloworigin;
    this->m_alloworigin_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::getAlloworiginregexp() {
    return alloworiginregexp;
}
void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::setAlloworiginregexp(OAIConfigNodePropertyArray* alloworiginregexp) {
    this->alloworiginregexp = alloworiginregexp;
    this->m_alloworiginregexp_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::getAllowedpaths() {
    return allowedpaths;
}
void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::setAllowedpaths(OAIConfigNodePropertyArray* allowedpaths) {
    this->allowedpaths = allowedpaths;
    this->m_allowedpaths_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::getExposedheaders() {
    return exposedheaders;
}
void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::setExposedheaders(OAIConfigNodePropertyArray* exposedheaders) {
    this->exposedheaders = exposedheaders;
    this->m_exposedheaders_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::getMaxage() {
    return maxage;
}
void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::setMaxage(OAIConfigNodePropertyInteger* maxage) {
    this->maxage = maxage;
    this->m_maxage_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::getSupportedheaders() {
    return supportedheaders;
}
void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::setSupportedheaders(OAIConfigNodePropertyArray* supportedheaders) {
    this->supportedheaders = supportedheaders;
    this->m_supportedheaders_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::getSupportedmethods() {
    return supportedmethods;
}
void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::setSupportedmethods(OAIConfigNodePropertyArray* supportedmethods) {
    this->supportedmethods = supportedmethods;
    this->m_supportedmethods_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::getSupportscredentials() {
    return supportscredentials;
}
void
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::setSupportscredentials(OAIConfigNodePropertyBoolean* supportscredentials) {
    this->supportscredentials = supportscredentials;
    this->m_supportscredentials_isSet = true;
}


bool
OAIComAdobeGraniteCorsImplCORSPolicyImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(alloworigin != nullptr && alloworigin->isSet()){ isObjectUpdated = true; break;}
        if(alloworiginregexp != nullptr && alloworiginregexp->isSet()){ isObjectUpdated = true; break;}
        if(allowedpaths != nullptr && allowedpaths->isSet()){ isObjectUpdated = true; break;}
        if(exposedheaders != nullptr && exposedheaders->isSet()){ isObjectUpdated = true; break;}
        if(maxage != nullptr && maxage->isSet()){ isObjectUpdated = true; break;}
        if(supportedheaders != nullptr && supportedheaders->isSet()){ isObjectUpdated = true; break;}
        if(supportedmethods != nullptr && supportedmethods->isSet()){ isObjectUpdated = true; break;}
        if(supportscredentials != nullptr && supportscredentials->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

