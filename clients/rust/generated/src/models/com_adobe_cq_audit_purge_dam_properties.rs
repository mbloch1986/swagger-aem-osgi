/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqAuditPurgeDamProperties {
  #[serde(rename = "auditlog.rule.name")]
  auditlog_rule_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auditlog.rule.contentpath")]
  auditlog_rule_contentpath: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auditlog.rule.minimumage")]
  auditlog_rule_minimumage: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "auditlog.rule.types")]
  auditlog_rule_types: Option<::models::ConfigNodePropertyDropDown>
}

impl ComAdobeCqAuditPurgeDamProperties {
  pub fn new() -> ComAdobeCqAuditPurgeDamProperties {
    ComAdobeCqAuditPurgeDamProperties {
      auditlog_rule_name: None,
      auditlog_rule_contentpath: None,
      auditlog_rule_minimumage: None,
      auditlog_rule_types: None
    }
  }

  pub fn set_auditlog_rule_name(&mut self, auditlog_rule_name: ::models::ConfigNodePropertyString) {
    self.auditlog_rule_name = Some(auditlog_rule_name);
  }

  pub fn with_auditlog_rule_name(mut self, auditlog_rule_name: ::models::ConfigNodePropertyString) -> ComAdobeCqAuditPurgeDamProperties {
    self.auditlog_rule_name = Some(auditlog_rule_name);
    self
  }

  pub fn auditlog_rule_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auditlog_rule_name.as_ref()
  }

  pub fn reset_auditlog_rule_name(&mut self) {
    self.auditlog_rule_name = None;
  }

  pub fn set_auditlog_rule_contentpath(&mut self, auditlog_rule_contentpath: ::models::ConfigNodePropertyString) {
    self.auditlog_rule_contentpath = Some(auditlog_rule_contentpath);
  }

  pub fn with_auditlog_rule_contentpath(mut self, auditlog_rule_contentpath: ::models::ConfigNodePropertyString) -> ComAdobeCqAuditPurgeDamProperties {
    self.auditlog_rule_contentpath = Some(auditlog_rule_contentpath);
    self
  }

  pub fn auditlog_rule_contentpath(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auditlog_rule_contentpath.as_ref()
  }

  pub fn reset_auditlog_rule_contentpath(&mut self) {
    self.auditlog_rule_contentpath = None;
  }

  pub fn set_auditlog_rule_minimumage(&mut self, auditlog_rule_minimumage: ::models::ConfigNodePropertyInteger) {
    self.auditlog_rule_minimumage = Some(auditlog_rule_minimumage);
  }

  pub fn with_auditlog_rule_minimumage(mut self, auditlog_rule_minimumage: ::models::ConfigNodePropertyInteger) -> ComAdobeCqAuditPurgeDamProperties {
    self.auditlog_rule_minimumage = Some(auditlog_rule_minimumage);
    self
  }

  pub fn auditlog_rule_minimumage(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.auditlog_rule_minimumage.as_ref()
  }

  pub fn reset_auditlog_rule_minimumage(&mut self) {
    self.auditlog_rule_minimumage = None;
  }

  pub fn set_auditlog_rule_types(&mut self, auditlog_rule_types: ::models::ConfigNodePropertyDropDown) {
    self.auditlog_rule_types = Some(auditlog_rule_types);
  }

  pub fn with_auditlog_rule_types(mut self, auditlog_rule_types: ::models::ConfigNodePropertyDropDown) -> ComAdobeCqAuditPurgeDamProperties {
    self.auditlog_rule_types = Some(auditlog_rule_types);
    self
  }

  pub fn auditlog_rule_types(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.auditlog_rule_types.as_ref()
  }

  pub fn reset_auditlog_rule_types(&mut self) {
    self.auditlog_rule_types = None;
  }

}



