package org.openapitools.client.api

import argonaut._
import argonaut.EncodeJson._
import argonaut.DecodeJson._

import org.http4s.{EntityDecoder, EntityEncoder}
import org.http4s.argonaut._
import org.joda.time.DateTime
import ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties._

case class ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties (
  defaultTransportAgentToWorkerPrefix: Option[ConfigNodePropertyString],
defaultTransportAgentToMasterPrefix: Option[ConfigNodePropertyString],
defaultTransportInputPackage: Option[ConfigNodePropertyString],
defaultTransportOutputPackage: Option[ConfigNodePropertyString],
defaultTransportReplicationSynchronous: Option[ConfigNodePropertyBoolean],
defaultTransportContentpackage: Option[ConfigNodePropertyBoolean],
offloadingTransporterDefaultEnabled: Option[ConfigNodePropertyBoolean])

object ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
  import DateTimeCodecs._

  implicit val ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoPropertiesCodecJson: CodecJson[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties] = CodecJson.derive[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties]
  implicit val ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoPropertiesDecoder: EntityDecoder[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties] = jsonOf[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties]
  implicit val ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoPropertiesEncoder: EntityEncoder[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties] = jsonEncoderOf[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties]
}
