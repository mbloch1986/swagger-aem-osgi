note
 description:"[
		Adobe Experience Manager OSGI config (AEM) API
 		Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
  		OpenAPI spec version: 1.0.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ORG_APACHE_SLING_DISCOVERY_OAK_CONFIG_PROPERTIES 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    connector_ping_timeout: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    connector_ping_interval: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    discovery_lite_check_interval: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_sync_service_timeout: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_sync_service_interval: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    enable_sync_token: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    min_event_delay: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    socket_connect_timeout: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    so_timeout: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    topology_connector_urls: detachable CONFIG_NODE_PROPERTY_ARRAY 
      
    topology_connector_whitelist: detachable CONFIG_NODE_PROPERTY_ARRAY 
      
    auto_stop_local_loop_enabled: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    gzip_connector_requests_enabled: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    hmac_enabled: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    enable_encryption: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    shared_key: detachable CONFIG_NODE_PROPERTY_STRING 
      
    hmac_shared_key_tt_l: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    backoff_standby_factor: detachable CONFIG_NODE_PROPERTY_STRING 
      
    backoff_stable_factor: detachable CONFIG_NODE_PROPERTY_STRING 
      

feature -- Change Element  
 
    set_connector_ping_timeout (a_name: like connector_ping_timeout)
        -- Set 'connector_ping_timeout' with 'a_name'.
      do
        connector_ping_timeout := a_name
      ensure
        connector_ping_timeout_set: connector_ping_timeout = a_name		
      end

    set_connector_ping_interval (a_name: like connector_ping_interval)
        -- Set 'connector_ping_interval' with 'a_name'.
      do
        connector_ping_interval := a_name
      ensure
        connector_ping_interval_set: connector_ping_interval = a_name		
      end

    set_discovery_lite_check_interval (a_name: like discovery_lite_check_interval)
        -- Set 'discovery_lite_check_interval' with 'a_name'.
      do
        discovery_lite_check_interval := a_name
      ensure
        discovery_lite_check_interval_set: discovery_lite_check_interval = a_name		
      end

    set_cluster_sync_service_timeout (a_name: like cluster_sync_service_timeout)
        -- Set 'cluster_sync_service_timeout' with 'a_name'.
      do
        cluster_sync_service_timeout := a_name
      ensure
        cluster_sync_service_timeout_set: cluster_sync_service_timeout = a_name		
      end

    set_cluster_sync_service_interval (a_name: like cluster_sync_service_interval)
        -- Set 'cluster_sync_service_interval' with 'a_name'.
      do
        cluster_sync_service_interval := a_name
      ensure
        cluster_sync_service_interval_set: cluster_sync_service_interval = a_name		
      end

    set_enable_sync_token (a_name: like enable_sync_token)
        -- Set 'enable_sync_token' with 'a_name'.
      do
        enable_sync_token := a_name
      ensure
        enable_sync_token_set: enable_sync_token = a_name		
      end

    set_min_event_delay (a_name: like min_event_delay)
        -- Set 'min_event_delay' with 'a_name'.
      do
        min_event_delay := a_name
      ensure
        min_event_delay_set: min_event_delay = a_name		
      end

    set_socket_connect_timeout (a_name: like socket_connect_timeout)
        -- Set 'socket_connect_timeout' with 'a_name'.
      do
        socket_connect_timeout := a_name
      ensure
        socket_connect_timeout_set: socket_connect_timeout = a_name		
      end

    set_so_timeout (a_name: like so_timeout)
        -- Set 'so_timeout' with 'a_name'.
      do
        so_timeout := a_name
      ensure
        so_timeout_set: so_timeout = a_name		
      end

    set_topology_connector_urls (a_name: like topology_connector_urls)
        -- Set 'topology_connector_urls' with 'a_name'.
      do
        topology_connector_urls := a_name
      ensure
        topology_connector_urls_set: topology_connector_urls = a_name		
      end

    set_topology_connector_whitelist (a_name: like topology_connector_whitelist)
        -- Set 'topology_connector_whitelist' with 'a_name'.
      do
        topology_connector_whitelist := a_name
      ensure
        topology_connector_whitelist_set: topology_connector_whitelist = a_name		
      end

    set_auto_stop_local_loop_enabled (a_name: like auto_stop_local_loop_enabled)
        -- Set 'auto_stop_local_loop_enabled' with 'a_name'.
      do
        auto_stop_local_loop_enabled := a_name
      ensure
        auto_stop_local_loop_enabled_set: auto_stop_local_loop_enabled = a_name		
      end

    set_gzip_connector_requests_enabled (a_name: like gzip_connector_requests_enabled)
        -- Set 'gzip_connector_requests_enabled' with 'a_name'.
      do
        gzip_connector_requests_enabled := a_name
      ensure
        gzip_connector_requests_enabled_set: gzip_connector_requests_enabled = a_name		
      end

    set_hmac_enabled (a_name: like hmac_enabled)
        -- Set 'hmac_enabled' with 'a_name'.
      do
        hmac_enabled := a_name
      ensure
        hmac_enabled_set: hmac_enabled = a_name		
      end

    set_enable_encryption (a_name: like enable_encryption)
        -- Set 'enable_encryption' with 'a_name'.
      do
        enable_encryption := a_name
      ensure
        enable_encryption_set: enable_encryption = a_name		
      end

    set_shared_key (a_name: like shared_key)
        -- Set 'shared_key' with 'a_name'.
      do
        shared_key := a_name
      ensure
        shared_key_set: shared_key = a_name		
      end

    set_hmac_shared_key_tt_l (a_name: like hmac_shared_key_tt_l)
        -- Set 'hmac_shared_key_tt_l' with 'a_name'.
      do
        hmac_shared_key_tt_l := a_name
      ensure
        hmac_shared_key_tt_l_set: hmac_shared_key_tt_l = a_name		
      end

    set_backoff_standby_factor (a_name: like backoff_standby_factor)
        -- Set 'backoff_standby_factor' with 'a_name'.
      do
        backoff_standby_factor := a_name
      ensure
        backoff_standby_factor_set: backoff_standby_factor = a_name		
      end

    set_backoff_stable_factor (a_name: like backoff_stable_factor)
        -- Set 'backoff_stable_factor' with 'a_name'.
      do
        backoff_stable_factor := a_name
      ensure
        backoff_stable_factor_set: backoff_stable_factor = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ORG_APACHE_SLING_DISCOVERY_OAK_CONFIG_PROPERTIES%N")
        if attached connector_ping_timeout as l_connector_ping_timeout then
          Result.append ("%Nconnector_ping_timeout:")
          Result.append (l_connector_ping_timeout.out)
          Result.append ("%N")    
        end  
        if attached connector_ping_interval as l_connector_ping_interval then
          Result.append ("%Nconnector_ping_interval:")
          Result.append (l_connector_ping_interval.out)
          Result.append ("%N")    
        end  
        if attached discovery_lite_check_interval as l_discovery_lite_check_interval then
          Result.append ("%Ndiscovery_lite_check_interval:")
          Result.append (l_discovery_lite_check_interval.out)
          Result.append ("%N")    
        end  
        if attached cluster_sync_service_timeout as l_cluster_sync_service_timeout then
          Result.append ("%Ncluster_sync_service_timeout:")
          Result.append (l_cluster_sync_service_timeout.out)
          Result.append ("%N")    
        end  
        if attached cluster_sync_service_interval as l_cluster_sync_service_interval then
          Result.append ("%Ncluster_sync_service_interval:")
          Result.append (l_cluster_sync_service_interval.out)
          Result.append ("%N")    
        end  
        if attached enable_sync_token as l_enable_sync_token then
          Result.append ("%Nenable_sync_token:")
          Result.append (l_enable_sync_token.out)
          Result.append ("%N")    
        end  
        if attached min_event_delay as l_min_event_delay then
          Result.append ("%Nmin_event_delay:")
          Result.append (l_min_event_delay.out)
          Result.append ("%N")    
        end  
        if attached socket_connect_timeout as l_socket_connect_timeout then
          Result.append ("%Nsocket_connect_timeout:")
          Result.append (l_socket_connect_timeout.out)
          Result.append ("%N")    
        end  
        if attached so_timeout as l_so_timeout then
          Result.append ("%Nso_timeout:")
          Result.append (l_so_timeout.out)
          Result.append ("%N")    
        end  
        if attached topology_connector_urls as l_topology_connector_urls then
          Result.append ("%Ntopology_connector_urls:")
          Result.append (l_topology_connector_urls.out)
          Result.append ("%N")    
        end  
        if attached topology_connector_whitelist as l_topology_connector_whitelist then
          Result.append ("%Ntopology_connector_whitelist:")
          Result.append (l_topology_connector_whitelist.out)
          Result.append ("%N")    
        end  
        if attached auto_stop_local_loop_enabled as l_auto_stop_local_loop_enabled then
          Result.append ("%Nauto_stop_local_loop_enabled:")
          Result.append (l_auto_stop_local_loop_enabled.out)
          Result.append ("%N")    
        end  
        if attached gzip_connector_requests_enabled as l_gzip_connector_requests_enabled then
          Result.append ("%Ngzip_connector_requests_enabled:")
          Result.append (l_gzip_connector_requests_enabled.out)
          Result.append ("%N")    
        end  
        if attached hmac_enabled as l_hmac_enabled then
          Result.append ("%Nhmac_enabled:")
          Result.append (l_hmac_enabled.out)
          Result.append ("%N")    
        end  
        if attached enable_encryption as l_enable_encryption then
          Result.append ("%Nenable_encryption:")
          Result.append (l_enable_encryption.out)
          Result.append ("%N")    
        end  
        if attached shared_key as l_shared_key then
          Result.append ("%Nshared_key:")
          Result.append (l_shared_key.out)
          Result.append ("%N")    
        end  
        if attached hmac_shared_key_tt_l as l_hmac_shared_key_tt_l then
          Result.append ("%Nhmac_shared_key_tt_l:")
          Result.append (l_hmac_shared_key_tt_l.out)
          Result.append ("%N")    
        end  
        if attached backoff_standby_factor as l_backoff_standby_factor then
          Result.append ("%Nbackoff_standby_factor:")
          Result.append (l_backoff_standby_factor.out)
          Result.append ("%N")    
        end  
        if attached backoff_stable_factor as l_backoff_stable_factor then
          Result.append ("%Nbackoff_stable_factor:")
          Result.append (l_backoff_stable_factor.out)
          Result.append ("%N")    
        end  
      end
end


