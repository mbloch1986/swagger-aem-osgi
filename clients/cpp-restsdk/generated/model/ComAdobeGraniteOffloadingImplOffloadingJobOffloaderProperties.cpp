/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties()
{
    m_Offloading_offloader_enabledIsSet = false;
}

ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::~ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties()
{
}

void ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Offloading_offloader_enabledIsSet)
    {
        val[utility::conversions::to_string_t("offloading.offloader.enabled")] = ModelBase::toJson(m_Offloading_offloader_enabled);
    }

    return val;
}

void ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("offloading.offloader.enabled")))
    {
        if(!val[utility::conversions::to_string_t("offloading.offloader.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("offloading.offloader.enabled")]);
            setOffloadingOffloaderEnabled( newItem );
        }
    }
}

void ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Offloading_offloader_enabledIsSet)
    {
        if (m_Offloading_offloader_enabled.get())
        {
            m_Offloading_offloader_enabled->toMultipart(multipart, utility::conversions::to_string_t("offloading.offloader.enabled."));
        }
    }
}

void ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("offloading.offloader.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("offloading.offloader.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("offloading.offloader.enabled."));
            setOffloadingOffloaderEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::getOffloadingOffloaderEnabled() const
{
    return m_Offloading_offloader_enabled;
}


void ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::setOffloadingOffloaderEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Offloading_offloader_enabled = value;
    m_Offloading_offloader_enabledIsSet = true;
}
bool ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::offloadingOffloaderEnabledIsSet() const
{
    return m_Offloading_offloader_enabledIsSet;
}

void ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties::unsetOffloading_offloader_enabled()
{
    m_Offloading_offloader_enabledIsSet = false;
}

}
}
}
}

