/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmUndoUndoConfigProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmUndoUndoConfigProperties::ComDayCqWcmUndoUndoConfigProperties()
{
    m_Cq_wcm_undo_enabledIsSet = false;
    m_Cq_wcm_undo_pathIsSet = false;
    m_Cq_wcm_undo_validityIsSet = false;
    m_Cq_wcm_undo_stepsIsSet = false;
    m_Cq_wcm_undo_persistenceIsSet = false;
    m_Cq_wcm_undo_persistence_modeIsSet = false;
    m_Cq_wcm_undo_markermodeIsSet = false;
    m_Cq_wcm_undo_whitelistIsSet = false;
    m_Cq_wcm_undo_blacklistIsSet = false;
}

ComDayCqWcmUndoUndoConfigProperties::~ComDayCqWcmUndoUndoConfigProperties()
{
}

void ComDayCqWcmUndoUndoConfigProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmUndoUndoConfigProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_wcm_undo_enabledIsSet)
    {
        val[utility::conversions::to_string_t("cq.wcm.undo.enabled")] = ModelBase::toJson(m_Cq_wcm_undo_enabled);
    }
    if(m_Cq_wcm_undo_pathIsSet)
    {
        val[utility::conversions::to_string_t("cq.wcm.undo.path")] = ModelBase::toJson(m_Cq_wcm_undo_path);
    }
    if(m_Cq_wcm_undo_validityIsSet)
    {
        val[utility::conversions::to_string_t("cq.wcm.undo.validity")] = ModelBase::toJson(m_Cq_wcm_undo_validity);
    }
    if(m_Cq_wcm_undo_stepsIsSet)
    {
        val[utility::conversions::to_string_t("cq.wcm.undo.steps")] = ModelBase::toJson(m_Cq_wcm_undo_steps);
    }
    if(m_Cq_wcm_undo_persistenceIsSet)
    {
        val[utility::conversions::to_string_t("cq.wcm.undo.persistence")] = ModelBase::toJson(m_Cq_wcm_undo_persistence);
    }
    if(m_Cq_wcm_undo_persistence_modeIsSet)
    {
        val[utility::conversions::to_string_t("cq.wcm.undo.persistence.mode")] = ModelBase::toJson(m_Cq_wcm_undo_persistence_mode);
    }
    if(m_Cq_wcm_undo_markermodeIsSet)
    {
        val[utility::conversions::to_string_t("cq.wcm.undo.markermode")] = ModelBase::toJson(m_Cq_wcm_undo_markermode);
    }
    if(m_Cq_wcm_undo_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("cq.wcm.undo.whitelist")] = ModelBase::toJson(m_Cq_wcm_undo_whitelist);
    }
    if(m_Cq_wcm_undo_blacklistIsSet)
    {
        val[utility::conversions::to_string_t("cq.wcm.undo.blacklist")] = ModelBase::toJson(m_Cq_wcm_undo_blacklist);
    }

    return val;
}

void ComDayCqWcmUndoUndoConfigProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.wcm.undo.enabled")))
    {
        if(!val[utility::conversions::to_string_t("cq.wcm.undo.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.wcm.undo.enabled")]);
            setCqWcmUndoEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.wcm.undo.path")))
    {
        if(!val[utility::conversions::to_string_t("cq.wcm.undo.path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.wcm.undo.path")]);
            setCqWcmUndoPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.wcm.undo.validity")))
    {
        if(!val[utility::conversions::to_string_t("cq.wcm.undo.validity")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.wcm.undo.validity")]);
            setCqWcmUndoValidity( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.wcm.undo.steps")))
    {
        if(!val[utility::conversions::to_string_t("cq.wcm.undo.steps")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.wcm.undo.steps")]);
            setCqWcmUndoSteps( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.wcm.undo.persistence")))
    {
        if(!val[utility::conversions::to_string_t("cq.wcm.undo.persistence")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.wcm.undo.persistence")]);
            setCqWcmUndoPersistence( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.wcm.undo.persistence.mode")))
    {
        if(!val[utility::conversions::to_string_t("cq.wcm.undo.persistence.mode")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.wcm.undo.persistence.mode")]);
            setCqWcmUndoPersistenceMode( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.wcm.undo.markermode")))
    {
        if(!val[utility::conversions::to_string_t("cq.wcm.undo.markermode")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.wcm.undo.markermode")]);
            setCqWcmUndoMarkermode( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.wcm.undo.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("cq.wcm.undo.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.wcm.undo.whitelist")]);
            setCqWcmUndoWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.wcm.undo.blacklist")))
    {
        if(!val[utility::conversions::to_string_t("cq.wcm.undo.blacklist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.wcm.undo.blacklist")]);
            setCqWcmUndoBlacklist( newItem );
        }
    }
}

void ComDayCqWcmUndoUndoConfigProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_wcm_undo_enabledIsSet)
    {
        if (m_Cq_wcm_undo_enabled.get())
        {
            m_Cq_wcm_undo_enabled->toMultipart(multipart, utility::conversions::to_string_t("cq.wcm.undo.enabled."));
        }
    }
    if(m_Cq_wcm_undo_pathIsSet)
    {
        if (m_Cq_wcm_undo_path.get())
        {
            m_Cq_wcm_undo_path->toMultipart(multipart, utility::conversions::to_string_t("cq.wcm.undo.path."));
        }
    }
    if(m_Cq_wcm_undo_validityIsSet)
    {
        if (m_Cq_wcm_undo_validity.get())
        {
            m_Cq_wcm_undo_validity->toMultipart(multipart, utility::conversions::to_string_t("cq.wcm.undo.validity."));
        }
    }
    if(m_Cq_wcm_undo_stepsIsSet)
    {
        if (m_Cq_wcm_undo_steps.get())
        {
            m_Cq_wcm_undo_steps->toMultipart(multipart, utility::conversions::to_string_t("cq.wcm.undo.steps."));
        }
    }
    if(m_Cq_wcm_undo_persistenceIsSet)
    {
        if (m_Cq_wcm_undo_persistence.get())
        {
            m_Cq_wcm_undo_persistence->toMultipart(multipart, utility::conversions::to_string_t("cq.wcm.undo.persistence."));
        }
    }
    if(m_Cq_wcm_undo_persistence_modeIsSet)
    {
        if (m_Cq_wcm_undo_persistence_mode.get())
        {
            m_Cq_wcm_undo_persistence_mode->toMultipart(multipart, utility::conversions::to_string_t("cq.wcm.undo.persistence.mode."));
        }
    }
    if(m_Cq_wcm_undo_markermodeIsSet)
    {
        if (m_Cq_wcm_undo_markermode.get())
        {
            m_Cq_wcm_undo_markermode->toMultipart(multipart, utility::conversions::to_string_t("cq.wcm.undo.markermode."));
        }
    }
    if(m_Cq_wcm_undo_whitelistIsSet)
    {
        if (m_Cq_wcm_undo_whitelist.get())
        {
            m_Cq_wcm_undo_whitelist->toMultipart(multipart, utility::conversions::to_string_t("cq.wcm.undo.whitelist."));
        }
    }
    if(m_Cq_wcm_undo_blacklistIsSet)
    {
        if (m_Cq_wcm_undo_blacklist.get())
        {
            m_Cq_wcm_undo_blacklist->toMultipart(multipart, utility::conversions::to_string_t("cq.wcm.undo.blacklist."));
        }
    }
}

void ComDayCqWcmUndoUndoConfigProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.wcm.undo.enabled."));
            setCqWcmUndoEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.wcm.undo.path."));
            setCqWcmUndoPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.validity")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.validity")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.wcm.undo.validity."));
            setCqWcmUndoValidity( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.steps")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.steps")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.wcm.undo.steps."));
            setCqWcmUndoSteps( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.persistence")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.persistence")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.wcm.undo.persistence."));
            setCqWcmUndoPersistence( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.persistence.mode")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.persistence.mode")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.wcm.undo.persistence.mode."));
            setCqWcmUndoPersistenceMode( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.markermode")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.markermode")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.wcm.undo.markermode."));
            setCqWcmUndoMarkermode( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.wcm.undo.whitelist."));
            setCqWcmUndoWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.blacklist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.wcm.undo.blacklist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.wcm.undo.blacklist."));
            setCqWcmUndoBlacklist( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoEnabled() const
{
    return m_Cq_wcm_undo_enabled;
}


void ComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_wcm_undo_enabled = value;
    m_Cq_wcm_undo_enabledIsSet = true;
}
bool ComDayCqWcmUndoUndoConfigProperties::cqWcmUndoEnabledIsSet() const
{
    return m_Cq_wcm_undo_enabledIsSet;
}

void ComDayCqWcmUndoUndoConfigProperties::unsetCq_wcm_undo_enabled()
{
    m_Cq_wcm_undo_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoPath() const
{
    return m_Cq_wcm_undo_path;
}


void ComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_wcm_undo_path = value;
    m_Cq_wcm_undo_pathIsSet = true;
}
bool ComDayCqWcmUndoUndoConfigProperties::cqWcmUndoPathIsSet() const
{
    return m_Cq_wcm_undo_pathIsSet;
}

void ComDayCqWcmUndoUndoConfigProperties::unsetCq_wcm_undo_path()
{
    m_Cq_wcm_undo_pathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoValidity() const
{
    return m_Cq_wcm_undo_validity;
}


void ComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoValidity(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_wcm_undo_validity = value;
    m_Cq_wcm_undo_validityIsSet = true;
}
bool ComDayCqWcmUndoUndoConfigProperties::cqWcmUndoValidityIsSet() const
{
    return m_Cq_wcm_undo_validityIsSet;
}

void ComDayCqWcmUndoUndoConfigProperties::unsetCq_wcm_undo_validity()
{
    m_Cq_wcm_undo_validityIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoSteps() const
{
    return m_Cq_wcm_undo_steps;
}


void ComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoSteps(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_wcm_undo_steps = value;
    m_Cq_wcm_undo_stepsIsSet = true;
}
bool ComDayCqWcmUndoUndoConfigProperties::cqWcmUndoStepsIsSet() const
{
    return m_Cq_wcm_undo_stepsIsSet;
}

void ComDayCqWcmUndoUndoConfigProperties::unsetCq_wcm_undo_steps()
{
    m_Cq_wcm_undo_stepsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoPersistence() const
{
    return m_Cq_wcm_undo_persistence;
}


void ComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoPersistence(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_wcm_undo_persistence = value;
    m_Cq_wcm_undo_persistenceIsSet = true;
}
bool ComDayCqWcmUndoUndoConfigProperties::cqWcmUndoPersistenceIsSet() const
{
    return m_Cq_wcm_undo_persistenceIsSet;
}

void ComDayCqWcmUndoUndoConfigProperties::unsetCq_wcm_undo_persistence()
{
    m_Cq_wcm_undo_persistenceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoPersistenceMode() const
{
    return m_Cq_wcm_undo_persistence_mode;
}


void ComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoPersistenceMode(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_wcm_undo_persistence_mode = value;
    m_Cq_wcm_undo_persistence_modeIsSet = true;
}
bool ComDayCqWcmUndoUndoConfigProperties::cqWcmUndoPersistenceModeIsSet() const
{
    return m_Cq_wcm_undo_persistence_modeIsSet;
}

void ComDayCqWcmUndoUndoConfigProperties::unsetCq_wcm_undo_persistence_mode()
{
    m_Cq_wcm_undo_persistence_modeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoMarkermode() const
{
    return m_Cq_wcm_undo_markermode;
}


void ComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoMarkermode(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_wcm_undo_markermode = value;
    m_Cq_wcm_undo_markermodeIsSet = true;
}
bool ComDayCqWcmUndoUndoConfigProperties::cqWcmUndoMarkermodeIsSet() const
{
    return m_Cq_wcm_undo_markermodeIsSet;
}

void ComDayCqWcmUndoUndoConfigProperties::unsetCq_wcm_undo_markermode()
{
    m_Cq_wcm_undo_markermodeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoWhitelist() const
{
    return m_Cq_wcm_undo_whitelist;
}


void ComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_wcm_undo_whitelist = value;
    m_Cq_wcm_undo_whitelistIsSet = true;
}
bool ComDayCqWcmUndoUndoConfigProperties::cqWcmUndoWhitelistIsSet() const
{
    return m_Cq_wcm_undo_whitelistIsSet;
}

void ComDayCqWcmUndoUndoConfigProperties::unsetCq_wcm_undo_whitelist()
{
    m_Cq_wcm_undo_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoBlacklist() const
{
    return m_Cq_wcm_undo_blacklist;
}


void ComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoBlacklist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_wcm_undo_blacklist = value;
    m_Cq_wcm_undo_blacklistIsSet = true;
}
bool ComDayCqWcmUndoUndoConfigProperties::cqWcmUndoBlacklistIsSet() const
{
    return m_Cq_wcm_undo_blacklistIsSet;
}

void ComDayCqWcmUndoUndoConfigProperties::unsetCq_wcm_undo_blacklist()
{
    m_Cq_wcm_undo_blacklistIsSet = false;
}

}
}
}
}

