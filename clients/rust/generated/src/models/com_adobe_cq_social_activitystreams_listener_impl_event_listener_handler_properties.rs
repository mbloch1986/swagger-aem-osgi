/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties {
  #[serde(rename = "event.topics")]
  event_topics: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "event.filter")]
  event_filter: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties {
  pub fn new() -> ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties {
    ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties {
      event_topics: None,
      event_filter: None
    }
  }

  pub fn set_event_topics(&mut self, event_topics: ::models::ConfigNodePropertyString) {
    self.event_topics = Some(event_topics);
  }

  pub fn with_event_topics(mut self, event_topics: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties {
    self.event_topics = Some(event_topics);
    self
  }

  pub fn event_topics(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.event_topics.as_ref()
  }

  pub fn reset_event_topics(&mut self) {
    self.event_topics = None;
  }

  pub fn set_event_filter(&mut self, event_filter: ::models::ConfigNodePropertyString) {
    self.event_filter = Some(event_filter);
  }

  pub fn with_event_filter(mut self, event_filter: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties {
    self.event_filter = Some(event_filter);
    self
  }

  pub fn event_filter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.event_filter.as_ref()
  }

  pub fn reset_event_filter(&mut self) {
    self.event_filter = None;
  }

}



