/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheSlingEventJobsQueueConfigurationProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheSlingEventJobsQueueConfigurationProperties_H_
#define OAIOrgApacheSlingEventJobsQueueConfigurationProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyDropDown.h"
#include "OAIOAIConfigNodePropertyFloat.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheSlingEventJobsQueueConfigurationProperties: public OAIObject {
public:
    OAIOrgApacheSlingEventJobsQueueConfigurationProperties();
    OAIOrgApacheSlingEventJobsQueueConfigurationProperties(QString json);
    ~OAIOrgApacheSlingEventJobsQueueConfigurationProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIOrgApacheSlingEventJobsQueueConfigurationProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getQueueName();
    void setQueueName(OAIConfigNodePropertyString* queue_name);

    OAIConfigNodePropertyArray* getQueueTopics();
    void setQueueTopics(OAIConfigNodePropertyArray* queue_topics);

    OAIConfigNodePropertyDropDown* getQueueType();
    void setQueueType(OAIConfigNodePropertyDropDown* queue_type);

    OAIConfigNodePropertyDropDown* getQueuePriority();
    void setQueuePriority(OAIConfigNodePropertyDropDown* queue_priority);

    OAIConfigNodePropertyInteger* getQueueRetries();
    void setQueueRetries(OAIConfigNodePropertyInteger* queue_retries);

    OAIConfigNodePropertyInteger* getQueueRetrydelay();
    void setQueueRetrydelay(OAIConfigNodePropertyInteger* queue_retrydelay);

    OAIConfigNodePropertyFloat* getQueueMaxparallel();
    void setQueueMaxparallel(OAIConfigNodePropertyFloat* queue_maxparallel);

    OAIConfigNodePropertyBoolean* getQueueKeepJobs();
    void setQueueKeepJobs(OAIConfigNodePropertyBoolean* queue_keep_jobs);

    OAIConfigNodePropertyBoolean* getQueuePreferRunOnCreationInstance();
    void setQueuePreferRunOnCreationInstance(OAIConfigNodePropertyBoolean* queue_prefer_run_on_creation_instance);

    OAIConfigNodePropertyInteger* getQueueThreadPoolSize();
    void setQueueThreadPoolSize(OAIConfigNodePropertyInteger* queue_thread_pool_size);

    OAIConfigNodePropertyInteger* getServiceRanking();
    void setServiceRanking(OAIConfigNodePropertyInteger* service_ranking);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* queue_name;
    bool m_queue_name_isSet;

    OAIConfigNodePropertyArray* queue_topics;
    bool m_queue_topics_isSet;

    OAIConfigNodePropertyDropDown* queue_type;
    bool m_queue_type_isSet;

    OAIConfigNodePropertyDropDown* queue_priority;
    bool m_queue_priority_isSet;

    OAIConfigNodePropertyInteger* queue_retries;
    bool m_queue_retries_isSet;

    OAIConfigNodePropertyInteger* queue_retrydelay;
    bool m_queue_retrydelay_isSet;

    OAIConfigNodePropertyFloat* queue_maxparallel;
    bool m_queue_maxparallel_isSet;

    OAIConfigNodePropertyBoolean* queue_keep_jobs;
    bool m_queue_keep_jobs_isSet;

    OAIConfigNodePropertyBoolean* queue_prefer_run_on_creation_instance;
    bool m_queue_prefer_run_on_creation_instance_isSet;

    OAIConfigNodePropertyInteger* queue_thread_pool_size;
    bool m_queue_thread_pool_size_isSet;

    OAIConfigNodePropertyInteger* service_ranking;
    bool m_service_ranking_isSet;

};

}

#endif /* OAIOrgApacheSlingEventJobsQueueConfigurationProperties_H_ */
