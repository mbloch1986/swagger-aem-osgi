/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties()
{
    m_PermissionsJr2IsSet = false;
    m_ImportBehaviorIsSet = false;
    m_ReadPathsIsSet = false;
    m_AdministrativePrincipalsIsSet = false;
    m_ConfigurationRankingIsSet = false;
}

OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::~OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties()
{
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PermissionsJr2IsSet)
    {
        val[utility::conversions::to_string_t("permissionsJr2")] = ModelBase::toJson(m_PermissionsJr2);
    }
    if(m_ImportBehaviorIsSet)
    {
        val[utility::conversions::to_string_t("importBehavior")] = ModelBase::toJson(m_ImportBehavior);
    }
    if(m_ReadPathsIsSet)
    {
        val[utility::conversions::to_string_t("readPaths")] = ModelBase::toJson(m_ReadPaths);
    }
    if(m_AdministrativePrincipalsIsSet)
    {
        val[utility::conversions::to_string_t("administrativePrincipals")] = ModelBase::toJson(m_AdministrativePrincipals);
    }
    if(m_ConfigurationRankingIsSet)
    {
        val[utility::conversions::to_string_t("configurationRanking")] = ModelBase::toJson(m_ConfigurationRanking);
    }

    return val;
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("permissionsJr2")))
    {
        if(!val[utility::conversions::to_string_t("permissionsJr2")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("permissionsJr2")]);
            setPermissionsJr2( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importBehavior")))
    {
        if(!val[utility::conversions::to_string_t("importBehavior")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("importBehavior")]);
            setImportBehavior( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("readPaths")))
    {
        if(!val[utility::conversions::to_string_t("readPaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("readPaths")]);
            setReadPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("administrativePrincipals")))
    {
        if(!val[utility::conversions::to_string_t("administrativePrincipals")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("administrativePrincipals")]);
            setAdministrativePrincipals( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationRanking")))
    {
        if(!val[utility::conversions::to_string_t("configurationRanking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("configurationRanking")]);
            setConfigurationRanking( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PermissionsJr2IsSet)
    {
        if (m_PermissionsJr2.get())
        {
            m_PermissionsJr2->toMultipart(multipart, utility::conversions::to_string_t("permissionsJr2."));
        }
    }
    if(m_ImportBehaviorIsSet)
    {
        if (m_ImportBehavior.get())
        {
            m_ImportBehavior->toMultipart(multipart, utility::conversions::to_string_t("importBehavior."));
        }
    }
    if(m_ReadPathsIsSet)
    {
        if (m_ReadPaths.get())
        {
            m_ReadPaths->toMultipart(multipart, utility::conversions::to_string_t("readPaths."));
        }
    }
    if(m_AdministrativePrincipalsIsSet)
    {
        if (m_AdministrativePrincipals.get())
        {
            m_AdministrativePrincipals->toMultipart(multipart, utility::conversions::to_string_t("administrativePrincipals."));
        }
    }
    if(m_ConfigurationRankingIsSet)
    {
        if (m_ConfigurationRanking.get())
        {
            m_ConfigurationRanking->toMultipart(multipart, utility::conversions::to_string_t("configurationRanking."));
        }
    }
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("permissionsJr2")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("permissionsJr2")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("permissionsJr2."));
            setPermissionsJr2( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importBehavior")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("importBehavior")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("importBehavior."));
            setImportBehavior( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("readPaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("readPaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("readPaths."));
            setReadPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("administrativePrincipals")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("administrativePrincipals")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("administrativePrincipals."));
            setAdministrativePrincipals( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationRanking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("configurationRanking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("configurationRanking."));
            setConfigurationRanking( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getPermissionsJr2() const
{
    return m_PermissionsJr2;
}


void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setPermissionsJr2(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_PermissionsJr2 = value;
    m_PermissionsJr2IsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::permissionsJr2IsSet() const
{
    return m_PermissionsJr2IsSet;
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::unsetPermissionsJr2()
{
    m_PermissionsJr2IsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getImportBehavior() const
{
    return m_ImportBehavior;
}


void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setImportBehavior(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_ImportBehavior = value;
    m_ImportBehaviorIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::importBehaviorIsSet() const
{
    return m_ImportBehaviorIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::unsetImportBehavior()
{
    m_ImportBehaviorIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getReadPaths() const
{
    return m_ReadPaths;
}


void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setReadPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_ReadPaths = value;
    m_ReadPathsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::readPathsIsSet() const
{
    return m_ReadPathsIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::unsetReadPaths()
{
    m_ReadPathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getAdministrativePrincipals() const
{
    return m_AdministrativePrincipals;
}


void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setAdministrativePrincipals(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_AdministrativePrincipals = value;
    m_AdministrativePrincipalsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::administrativePrincipalsIsSet() const
{
    return m_AdministrativePrincipalsIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::unsetAdministrativePrincipals()
{
    m_AdministrativePrincipalsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getConfigurationRanking() const
{
    return m_ConfigurationRanking;
}


void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setConfigurationRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ConfigurationRanking = value;
    m_ConfigurationRankingIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::configurationRankingIsSet() const
{
    return m_ConfigurationRankingIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::unsetConfigurationRanking()
{
    m_ConfigurationRankingIsSet = false;
}

}
}
}
}

