/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCoreImplServletMetadataGetServletProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCoreImplServletMetadataGetServletProperties::ComDayCqDamCoreImplServletMetadataGetServletProperties()
{
    m_Sling_servlet_resourceTypesIsSet = false;
    m_Sling_servlet_methodsIsSet = false;
    m_Sling_servlet_extensionsIsSet = false;
    m_Sling_servlet_selectorsIsSet = false;
    
}

ComDayCqDamCoreImplServletMetadataGetServletProperties::~ComDayCqDamCoreImplServletMetadataGetServletProperties()
{
}

void ComDayCqDamCoreImplServletMetadataGetServletProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCoreImplServletMetadataGetServletProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Sling_servlet_resourceTypesIsSet)
    {
        val["sling.servlet.resourceTypes"] = ModelBase::toJson(m_Sling_servlet_resourceTypes);
    }
    if(m_Sling_servlet_methodsIsSet)
    {
        val["sling.servlet.methods"] = ModelBase::toJson(m_Sling_servlet_methods);
    }
    if(m_Sling_servlet_extensionsIsSet)
    {
        val["sling.servlet.extensions"] = ModelBase::toJson(m_Sling_servlet_extensions);
    }
    if(m_Sling_servlet_selectorsIsSet)
    {
        val["sling.servlet.selectors"] = ModelBase::toJson(m_Sling_servlet_selectors);
    }
    

    return val;
}

void ComDayCqDamCoreImplServletMetadataGetServletProperties::fromJson(nlohmann::json& val)
{
    if(val.find("sling.servlet.resourceTypes") != val.end())
    {
        if(!val["sling.servlet.resourceTypes"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["sling.servlet.resourceTypes"]);
            setSlingServletResourceTypes( newItem );
        }
        
    }
    if(val.find("sling.servlet.methods") != val.end())
    {
        if(!val["sling.servlet.methods"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["sling.servlet.methods"]);
            setSlingServletMethods( newItem );
        }
        
    }
    if(val.find("sling.servlet.extensions") != val.end())
    {
        if(!val["sling.servlet.extensions"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["sling.servlet.extensions"]);
            setSlingServletExtensions( newItem );
        }
        
    }
    if(val.find("sling.servlet.selectors") != val.end())
    {
        if(!val["sling.servlet.selectors"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["sling.servlet.selectors"]);
            setSlingServletSelectors( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqDamCoreImplServletMetadataGetServletProperties::getSlingServletResourceTypes() const
{
    return m_Sling_servlet_resourceTypes;
}
void ComDayCqDamCoreImplServletMetadataGetServletProperties::setSlingServletResourceTypes(ConfigNodePropertyString const& value)
{
    m_Sling_servlet_resourceTypes = value;
    m_Sling_servlet_resourceTypesIsSet = true;
}
bool ComDayCqDamCoreImplServletMetadataGetServletProperties::slingServletResourceTypesIsSet() const
{
    return m_Sling_servlet_resourceTypesIsSet;
}
void ComDayCqDamCoreImplServletMetadataGetServletProperties::unsetSling_servlet_resourceTypes()
{
    m_Sling_servlet_resourceTypesIsSet = false;
}
ConfigNodePropertyString ComDayCqDamCoreImplServletMetadataGetServletProperties::getSlingServletMethods() const
{
    return m_Sling_servlet_methods;
}
void ComDayCqDamCoreImplServletMetadataGetServletProperties::setSlingServletMethods(ConfigNodePropertyString const& value)
{
    m_Sling_servlet_methods = value;
    m_Sling_servlet_methodsIsSet = true;
}
bool ComDayCqDamCoreImplServletMetadataGetServletProperties::slingServletMethodsIsSet() const
{
    return m_Sling_servlet_methodsIsSet;
}
void ComDayCqDamCoreImplServletMetadataGetServletProperties::unsetSling_servlet_methods()
{
    m_Sling_servlet_methodsIsSet = false;
}
ConfigNodePropertyString ComDayCqDamCoreImplServletMetadataGetServletProperties::getSlingServletExtensions() const
{
    return m_Sling_servlet_extensions;
}
void ComDayCqDamCoreImplServletMetadataGetServletProperties::setSlingServletExtensions(ConfigNodePropertyString const& value)
{
    m_Sling_servlet_extensions = value;
    m_Sling_servlet_extensionsIsSet = true;
}
bool ComDayCqDamCoreImplServletMetadataGetServletProperties::slingServletExtensionsIsSet() const
{
    return m_Sling_servlet_extensionsIsSet;
}
void ComDayCqDamCoreImplServletMetadataGetServletProperties::unsetSling_servlet_extensions()
{
    m_Sling_servlet_extensionsIsSet = false;
}
ConfigNodePropertyString ComDayCqDamCoreImplServletMetadataGetServletProperties::getSlingServletSelectors() const
{
    return m_Sling_servlet_selectors;
}
void ComDayCqDamCoreImplServletMetadataGetServletProperties::setSlingServletSelectors(ConfigNodePropertyString const& value)
{
    m_Sling_servlet_selectors = value;
    m_Sling_servlet_selectorsIsSet = true;
}
bool ComDayCqDamCoreImplServletMetadataGetServletProperties::slingServletSelectorsIsSet() const
{
    return m_Sling_servlet_selectorsIsSet;
}
void ComDayCqDamCoreImplServletMetadataGetServletProperties::unsetSling_servlet_selectors()
{
    m_Sling_servlet_selectorsIsSet = false;
}

}
}
}
}

