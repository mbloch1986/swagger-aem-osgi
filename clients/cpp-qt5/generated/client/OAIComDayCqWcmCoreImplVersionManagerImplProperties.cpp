/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmCoreImplVersionManagerImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmCoreImplVersionManagerImplProperties::OAIComDayCqWcmCoreImplVersionManagerImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmCoreImplVersionManagerImplProperties::OAIComDayCqWcmCoreImplVersionManagerImplProperties() {
    init();
}

OAIComDayCqWcmCoreImplVersionManagerImplProperties::~OAIComDayCqWcmCoreImplVersionManagerImplProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmCoreImplVersionManagerImplProperties::init() {
    versionmanager_create_version_on_activation = new OAIConfigNodePropertyBoolean();
    m_versionmanager_create_version_on_activation_isSet = false;
    versionmanager_purging_enabled = new OAIConfigNodePropertyBoolean();
    m_versionmanager_purging_enabled_isSet = false;
    versionmanager_purge_paths = new OAIConfigNodePropertyArray();
    m_versionmanager_purge_paths_isSet = false;
    versionmanager_iv_paths = new OAIConfigNodePropertyArray();
    m_versionmanager_iv_paths_isSet = false;
    versionmanager_max_age_days = new OAIConfigNodePropertyInteger();
    m_versionmanager_max_age_days_isSet = false;
    versionmanager_max_number_versions = new OAIConfigNodePropertyInteger();
    m_versionmanager_max_number_versions_isSet = false;
    versionmanager_min_number_versions = new OAIConfigNodePropertyInteger();
    m_versionmanager_min_number_versions_isSet = false;
}

void
OAIComDayCqWcmCoreImplVersionManagerImplProperties::cleanup() {
    if(versionmanager_create_version_on_activation != nullptr) { 
        delete versionmanager_create_version_on_activation;
    }
    if(versionmanager_purging_enabled != nullptr) { 
        delete versionmanager_purging_enabled;
    }
    if(versionmanager_purge_paths != nullptr) { 
        delete versionmanager_purge_paths;
    }
    if(versionmanager_iv_paths != nullptr) { 
        delete versionmanager_iv_paths;
    }
    if(versionmanager_max_age_days != nullptr) { 
        delete versionmanager_max_age_days;
    }
    if(versionmanager_max_number_versions != nullptr) { 
        delete versionmanager_max_number_versions;
    }
    if(versionmanager_min_number_versions != nullptr) { 
        delete versionmanager_min_number_versions;
    }
}

OAIComDayCqWcmCoreImplVersionManagerImplProperties*
OAIComDayCqWcmCoreImplVersionManagerImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmCoreImplVersionManagerImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&versionmanager_create_version_on_activation, pJson["versionmanager.createVersionOnActivation"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&versionmanager_purging_enabled, pJson["versionmanager.purgingEnabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&versionmanager_purge_paths, pJson["versionmanager.purgePaths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&versionmanager_iv_paths, pJson["versionmanager.ivPaths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&versionmanager_max_age_days, pJson["versionmanager.maxAgeDays"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&versionmanager_max_number_versions, pJson["versionmanager.maxNumberVersions"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&versionmanager_min_number_versions, pJson["versionmanager.minNumberVersions"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComDayCqWcmCoreImplVersionManagerImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmCoreImplVersionManagerImplProperties::asJsonObject() {
    QJsonObject obj;
    if((versionmanager_create_version_on_activation != nullptr) && (versionmanager_create_version_on_activation->isSet())){
        toJsonValue(QString("versionmanager.createVersionOnActivation"), versionmanager_create_version_on_activation, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((versionmanager_purging_enabled != nullptr) && (versionmanager_purging_enabled->isSet())){
        toJsonValue(QString("versionmanager.purgingEnabled"), versionmanager_purging_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((versionmanager_purge_paths != nullptr) && (versionmanager_purge_paths->isSet())){
        toJsonValue(QString("versionmanager.purgePaths"), versionmanager_purge_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((versionmanager_iv_paths != nullptr) && (versionmanager_iv_paths->isSet())){
        toJsonValue(QString("versionmanager.ivPaths"), versionmanager_iv_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((versionmanager_max_age_days != nullptr) && (versionmanager_max_age_days->isSet())){
        toJsonValue(QString("versionmanager.maxAgeDays"), versionmanager_max_age_days, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((versionmanager_max_number_versions != nullptr) && (versionmanager_max_number_versions->isSet())){
        toJsonValue(QString("versionmanager.maxNumberVersions"), versionmanager_max_number_versions, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((versionmanager_min_number_versions != nullptr) && (versionmanager_min_number_versions->isSet())){
        toJsonValue(QString("versionmanager.minNumberVersions"), versionmanager_min_number_versions, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerCreateVersionOnActivation() {
    return versionmanager_create_version_on_activation;
}
void
OAIComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerCreateVersionOnActivation(OAIConfigNodePropertyBoolean* versionmanager_create_version_on_activation) {
    this->versionmanager_create_version_on_activation = versionmanager_create_version_on_activation;
    this->m_versionmanager_create_version_on_activation_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerPurgingEnabled() {
    return versionmanager_purging_enabled;
}
void
OAIComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerPurgingEnabled(OAIConfigNodePropertyBoolean* versionmanager_purging_enabled) {
    this->versionmanager_purging_enabled = versionmanager_purging_enabled;
    this->m_versionmanager_purging_enabled_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerPurgePaths() {
    return versionmanager_purge_paths;
}
void
OAIComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerPurgePaths(OAIConfigNodePropertyArray* versionmanager_purge_paths) {
    this->versionmanager_purge_paths = versionmanager_purge_paths;
    this->m_versionmanager_purge_paths_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerIvPaths() {
    return versionmanager_iv_paths;
}
void
OAIComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerIvPaths(OAIConfigNodePropertyArray* versionmanager_iv_paths) {
    this->versionmanager_iv_paths = versionmanager_iv_paths;
    this->m_versionmanager_iv_paths_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerMaxAgeDays() {
    return versionmanager_max_age_days;
}
void
OAIComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerMaxAgeDays(OAIConfigNodePropertyInteger* versionmanager_max_age_days) {
    this->versionmanager_max_age_days = versionmanager_max_age_days;
    this->m_versionmanager_max_age_days_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerMaxNumberVersions() {
    return versionmanager_max_number_versions;
}
void
OAIComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerMaxNumberVersions(OAIConfigNodePropertyInteger* versionmanager_max_number_versions) {
    this->versionmanager_max_number_versions = versionmanager_max_number_versions;
    this->m_versionmanager_max_number_versions_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerMinNumberVersions() {
    return versionmanager_min_number_versions;
}
void
OAIComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerMinNumberVersions(OAIConfigNodePropertyInteger* versionmanager_min_number_versions) {
    this->versionmanager_min_number_versions = versionmanager_min_number_versions;
    this->m_versionmanager_min_number_versions_isSet = true;
}


bool
OAIComDayCqWcmCoreImplVersionManagerImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(versionmanager_create_version_on_activation != nullptr && versionmanager_create_version_on_activation->isSet()){ isObjectUpdated = true; break;}
        if(versionmanager_purging_enabled != nullptr && versionmanager_purging_enabled->isSet()){ isObjectUpdated = true; break;}
        if(versionmanager_purge_paths != nullptr && versionmanager_purge_paths->isSet()){ isObjectUpdated = true; break;}
        if(versionmanager_iv_paths != nullptr && versionmanager_iv_paths->isSet()){ isObjectUpdated = true; break;}
        if(versionmanager_max_age_days != nullptr && versionmanager_max_age_days->isSet()){ isObjectUpdated = true; break;}
        if(versionmanager_max_number_versions != nullptr && versionmanager_max_number_versions->isSet()){ isObjectUpdated = true; break;}
        if(versionmanager_min_number_versions != nullptr && versionmanager_min_number_versions->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

