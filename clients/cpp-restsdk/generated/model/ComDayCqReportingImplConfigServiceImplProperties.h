/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqReportingImplConfigServiceImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqReportingImplConfigServiceImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqReportingImplConfigServiceImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqReportingImplConfigServiceImplProperties
    : public ModelBase
{
public:
    ComDayCqReportingImplConfigServiceImplProperties();
    virtual ~ComDayCqReportingImplConfigServiceImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqReportingImplConfigServiceImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepconfTimezone() const;
    bool repconfTimezoneIsSet() const;
    void unsetRepconf_timezone();
    void setRepconfTimezone(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepconfLocale() const;
    bool repconfLocaleIsSet() const;
    void unsetRepconf_locale();
    void setRepconfLocale(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepconfSnapshots() const;
    bool repconfSnapshotsIsSet() const;
    void unsetRepconf_snapshots();
    void setRepconfSnapshots(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepconfRepdir() const;
    bool repconfRepdirIsSet() const;
    void unsetRepconf_repdir();
    void setRepconfRepdir(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRepconfHourofday() const;
    bool repconfHourofdayIsSet() const;
    void unsetRepconf_hourofday();
    void setRepconfHourofday(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRepconfMinofhour() const;
    bool repconfMinofhourIsSet() const;
    void unsetRepconf_minofhour();
    void setRepconfMinofhour(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRepconfMaxrows() const;
    bool repconfMaxrowsIsSet() const;
    void unsetRepconf_maxrows();
    void setRepconfMaxrows(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getRepconfFakedata() const;
    bool repconfFakedataIsSet() const;
    void unsetRepconf_fakedata();
    void setRepconfFakedata(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepconfSnapshotuser() const;
    bool repconfSnapshotuserIsSet() const;
    void unsetRepconf_snapshotuser();
    void setRepconfSnapshotuser(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getRepconfEnforcesnapshotuser() const;
    bool repconfEnforcesnapshotuserIsSet() const;
    void unsetRepconf_enforcesnapshotuser();
    void setRepconfEnforcesnapshotuser(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Repconf_timezone;
    bool m_Repconf_timezoneIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Repconf_locale;
    bool m_Repconf_localeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Repconf_snapshots;
    bool m_Repconf_snapshotsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Repconf_repdir;
    bool m_Repconf_repdirIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Repconf_hourofday;
    bool m_Repconf_hourofdayIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Repconf_minofhour;
    bool m_Repconf_minofhourIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Repconf_maxrows;
    bool m_Repconf_maxrowsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Repconf_fakedata;
    bool m_Repconf_fakedataIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Repconf_snapshotuser;
    bool m_Repconf_snapshotuserIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Repconf_enforcesnapshotuser;
    bool m_Repconf_enforcesnapshotuserIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqReportingImplConfigServiceImplProperties_H_ */
