/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteThreaddumpThreadDumpCollectorProperties : IEquatable<ComAdobeGraniteThreaddumpThreadDumpCollectorProperties>
    { 
        /// <summary>
        /// Gets or Sets SchedulerPeriod
        /// </summary>
        [DataMember(Name="scheduler.period")]
        public ConfigNodePropertyInteger SchedulerPeriod { get; set; }

        /// <summary>
        /// Gets or Sets SchedulerRunOn
        /// </summary>
        [DataMember(Name="scheduler.runOn")]
        public ConfigNodePropertyDropDown SchedulerRunOn { get; set; }

        /// <summary>
        /// Gets or Sets GraniteThreaddumpEnabled
        /// </summary>
        [DataMember(Name="granite.threaddump.enabled")]
        public ConfigNodePropertyBoolean GraniteThreaddumpEnabled { get; set; }

        /// <summary>
        /// Gets or Sets GraniteThreaddumpDumpsPerFile
        /// </summary>
        [DataMember(Name="granite.threaddump.dumpsPerFile")]
        public ConfigNodePropertyInteger GraniteThreaddumpDumpsPerFile { get; set; }

        /// <summary>
        /// Gets or Sets GraniteThreaddumpEnableGzipCompression
        /// </summary>
        [DataMember(Name="granite.threaddump.enableGzipCompression")]
        public ConfigNodePropertyBoolean GraniteThreaddumpEnableGzipCompression { get; set; }

        /// <summary>
        /// Gets or Sets GraniteThreaddumpEnableDirectoriesCompression
        /// </summary>
        [DataMember(Name="granite.threaddump.enableDirectoriesCompression")]
        public ConfigNodePropertyBoolean GraniteThreaddumpEnableDirectoriesCompression { get; set; }

        /// <summary>
        /// Gets or Sets GraniteThreaddumpEnableJStack
        /// </summary>
        [DataMember(Name="granite.threaddump.enableJStack")]
        public ConfigNodePropertyBoolean GraniteThreaddumpEnableJStack { get; set; }

        /// <summary>
        /// Gets or Sets GraniteThreaddumpMaxBackupDays
        /// </summary>
        [DataMember(Name="granite.threaddump.maxBackupDays")]
        public ConfigNodePropertyInteger GraniteThreaddumpMaxBackupDays { get; set; }

        /// <summary>
        /// Gets or Sets GraniteThreaddumpBackupCleanTrigger
        /// </summary>
        [DataMember(Name="granite.threaddump.backupCleanTrigger")]
        public ConfigNodePropertyString GraniteThreaddumpBackupCleanTrigger { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {\n");
            sb.Append("  SchedulerPeriod: ").Append(SchedulerPeriod).Append("\n");
            sb.Append("  SchedulerRunOn: ").Append(SchedulerRunOn).Append("\n");
            sb.Append("  GraniteThreaddumpEnabled: ").Append(GraniteThreaddumpEnabled).Append("\n");
            sb.Append("  GraniteThreaddumpDumpsPerFile: ").Append(GraniteThreaddumpDumpsPerFile).Append("\n");
            sb.Append("  GraniteThreaddumpEnableGzipCompression: ").Append(GraniteThreaddumpEnableGzipCompression).Append("\n");
            sb.Append("  GraniteThreaddumpEnableDirectoriesCompression: ").Append(GraniteThreaddumpEnableDirectoriesCompression).Append("\n");
            sb.Append("  GraniteThreaddumpEnableJStack: ").Append(GraniteThreaddumpEnableJStack).Append("\n");
            sb.Append("  GraniteThreaddumpMaxBackupDays: ").Append(GraniteThreaddumpMaxBackupDays).Append("\n");
            sb.Append("  GraniteThreaddumpBackupCleanTrigger: ").Append(GraniteThreaddumpBackupCleanTrigger).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteThreaddumpThreadDumpCollectorProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteThreaddumpThreadDumpCollectorProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteThreaddumpThreadDumpCollectorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteThreaddumpThreadDumpCollectorProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SchedulerPeriod == other.SchedulerPeriod ||
                    SchedulerPeriod != null &&
                    SchedulerPeriod.Equals(other.SchedulerPeriod)
                ) && 
                (
                    SchedulerRunOn == other.SchedulerRunOn ||
                    SchedulerRunOn != null &&
                    SchedulerRunOn.Equals(other.SchedulerRunOn)
                ) && 
                (
                    GraniteThreaddumpEnabled == other.GraniteThreaddumpEnabled ||
                    GraniteThreaddumpEnabled != null &&
                    GraniteThreaddumpEnabled.Equals(other.GraniteThreaddumpEnabled)
                ) && 
                (
                    GraniteThreaddumpDumpsPerFile == other.GraniteThreaddumpDumpsPerFile ||
                    GraniteThreaddumpDumpsPerFile != null &&
                    GraniteThreaddumpDumpsPerFile.Equals(other.GraniteThreaddumpDumpsPerFile)
                ) && 
                (
                    GraniteThreaddumpEnableGzipCompression == other.GraniteThreaddumpEnableGzipCompression ||
                    GraniteThreaddumpEnableGzipCompression != null &&
                    GraniteThreaddumpEnableGzipCompression.Equals(other.GraniteThreaddumpEnableGzipCompression)
                ) && 
                (
                    GraniteThreaddumpEnableDirectoriesCompression == other.GraniteThreaddumpEnableDirectoriesCompression ||
                    GraniteThreaddumpEnableDirectoriesCompression != null &&
                    GraniteThreaddumpEnableDirectoriesCompression.Equals(other.GraniteThreaddumpEnableDirectoriesCompression)
                ) && 
                (
                    GraniteThreaddumpEnableJStack == other.GraniteThreaddumpEnableJStack ||
                    GraniteThreaddumpEnableJStack != null &&
                    GraniteThreaddumpEnableJStack.Equals(other.GraniteThreaddumpEnableJStack)
                ) && 
                (
                    GraniteThreaddumpMaxBackupDays == other.GraniteThreaddumpMaxBackupDays ||
                    GraniteThreaddumpMaxBackupDays != null &&
                    GraniteThreaddumpMaxBackupDays.Equals(other.GraniteThreaddumpMaxBackupDays)
                ) && 
                (
                    GraniteThreaddumpBackupCleanTrigger == other.GraniteThreaddumpBackupCleanTrigger ||
                    GraniteThreaddumpBackupCleanTrigger != null &&
                    GraniteThreaddumpBackupCleanTrigger.Equals(other.GraniteThreaddumpBackupCleanTrigger)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SchedulerPeriod != null)
                    hashCode = hashCode * 59 + SchedulerPeriod.GetHashCode();
                    if (SchedulerRunOn != null)
                    hashCode = hashCode * 59 + SchedulerRunOn.GetHashCode();
                    if (GraniteThreaddumpEnabled != null)
                    hashCode = hashCode * 59 + GraniteThreaddumpEnabled.GetHashCode();
                    if (GraniteThreaddumpDumpsPerFile != null)
                    hashCode = hashCode * 59 + GraniteThreaddumpDumpsPerFile.GetHashCode();
                    if (GraniteThreaddumpEnableGzipCompression != null)
                    hashCode = hashCode * 59 + GraniteThreaddumpEnableGzipCompression.GetHashCode();
                    if (GraniteThreaddumpEnableDirectoriesCompression != null)
                    hashCode = hashCode * 59 + GraniteThreaddumpEnableDirectoriesCompression.GetHashCode();
                    if (GraniteThreaddumpEnableJStack != null)
                    hashCode = hashCode * 59 + GraniteThreaddumpEnableJStack.GetHashCode();
                    if (GraniteThreaddumpMaxBackupDays != null)
                    hashCode = hashCode * 59 + GraniteThreaddumpMaxBackupDays.GetHashCode();
                    if (GraniteThreaddumpBackupCleanTrigger != null)
                    hashCode = hashCode * 59 + GraniteThreaddumpBackupCleanTrigger.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteThreaddumpThreadDumpCollectorProperties left, ComAdobeGraniteThreaddumpThreadDumpCollectorProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteThreaddumpThreadDumpCollectorProperties left, ComAdobeGraniteThreaddumpThreadDumpCollectorProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
