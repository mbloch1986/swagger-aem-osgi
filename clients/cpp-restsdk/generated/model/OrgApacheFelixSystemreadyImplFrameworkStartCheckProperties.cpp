/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties()
{
    m_TimeoutIsSet = false;
    m_Target_start_levelIsSet = false;
    m_Target_start_level_prop_nameIsSet = false;
    m_TypeIsSet = false;
}

OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::~OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties()
{
}

void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TimeoutIsSet)
    {
        val[utility::conversions::to_string_t("timeout")] = ModelBase::toJson(m_Timeout);
    }
    if(m_Target_start_levelIsSet)
    {
        val[utility::conversions::to_string_t("target.start.level")] = ModelBase::toJson(m_Target_start_level);
    }
    if(m_Target_start_level_prop_nameIsSet)
    {
        val[utility::conversions::to_string_t("target.start.level.prop.name")] = ModelBase::toJson(m_Target_start_level_prop_name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("timeout")))
    {
        if(!val[utility::conversions::to_string_t("timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("timeout")]);
            setTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("target.start.level")))
    {
        if(!val[utility::conversions::to_string_t("target.start.level")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("target.start.level")]);
            setTargetStartLevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("target.start.level.prop.name")))
    {
        if(!val[utility::conversions::to_string_t("target.start.level.prop.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("target.start.level.prop.name")]);
            setTargetStartLevelPropName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        if(!val[utility::conversions::to_string_t("type")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("type")]);
            setType( newItem );
        }
    }
}

void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TimeoutIsSet)
    {
        if (m_Timeout.get())
        {
            m_Timeout->toMultipart(multipart, utility::conversions::to_string_t("timeout."));
        }
    }
    if(m_Target_start_levelIsSet)
    {
        if (m_Target_start_level.get())
        {
            m_Target_start_level->toMultipart(multipart, utility::conversions::to_string_t("target.start.level."));
        }
    }
    if(m_Target_start_level_prop_nameIsSet)
    {
        if (m_Target_start_level_prop_name.get())
        {
            m_Target_start_level_prop_name->toMultipart(multipart, utility::conversions::to_string_t("target.start.level.prop.name."));
        }
    }
    if(m_TypeIsSet)
    {
        if (m_Type.get())
        {
            m_Type->toMultipart(multipart, utility::conversions::to_string_t("type."));
        }
    }
}

void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("timeout."));
            setTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("target.start.level")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("target.start.level")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("target.start.level."));
            setTargetStartLevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("target.start.level.prop.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("target.start.level.prop.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("target.start.level.prop.name."));
            setTargetStartLevelPropName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("type")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("type."));
            setType( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::getTimeout() const
{
    return m_Timeout;
}


void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::setTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Timeout = value;
    m_TimeoutIsSet = true;
}
bool OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::timeoutIsSet() const
{
    return m_TimeoutIsSet;
}

void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::unsetTimeout()
{
    m_TimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::getTargetStartLevel() const
{
    return m_Target_start_level;
}


void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::setTargetStartLevel(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Target_start_level = value;
    m_Target_start_levelIsSet = true;
}
bool OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::targetStartLevelIsSet() const
{
    return m_Target_start_levelIsSet;
}

void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::unsetTarget_start_level()
{
    m_Target_start_levelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::getTargetStartLevelPropName() const
{
    return m_Target_start_level_prop_name;
}


void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::setTargetStartLevelPropName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Target_start_level_prop_name = value;
    m_Target_start_level_prop_nameIsSet = true;
}
bool OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::targetStartLevelPropNameIsSet() const
{
    return m_Target_start_level_prop_nameIsSet;
}

void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::unsetTarget_start_level_prop_name()
{
    m_Target_start_level_prop_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::getType() const
{
    return m_Type;
}


void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::setType(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::typeIsSet() const
{
    return m_TypeIsSet;
}

void OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}

