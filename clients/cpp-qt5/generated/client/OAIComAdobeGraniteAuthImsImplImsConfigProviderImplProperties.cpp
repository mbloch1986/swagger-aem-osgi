/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties() {
    init();
}

OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::~OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::init() {
    oauth_configmanager_ims_configid = new OAIConfigNodePropertyString();
    m_oauth_configmanager_ims_configid_isSet = false;
    ims_owning_entity = new OAIConfigNodePropertyString();
    m_ims_owning_entity_isSet = false;
    aem_instance_id = new OAIConfigNodePropertyString();
    m_aem_instance_id_isSet = false;
    ims_service_code = new OAIConfigNodePropertyString();
    m_ims_service_code_isSet = false;
}

void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::cleanup() {
    if(oauth_configmanager_ims_configid != nullptr) { 
        delete oauth_configmanager_ims_configid;
    }
    if(ims_owning_entity != nullptr) { 
        delete ims_owning_entity;
    }
    if(aem_instance_id != nullptr) { 
        delete aem_instance_id;
    }
    if(ims_service_code != nullptr) { 
        delete ims_service_code;
    }
}

OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties*
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&oauth_configmanager_ims_configid, pJson["oauth.configmanager.ims.configid"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&ims_owning_entity, pJson["ims.owningEntity"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&aem_instance_id, pJson["aem.instanceId"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&ims_service_code, pJson["ims.serviceCode"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::asJsonObject() {
    QJsonObject obj;
    if((oauth_configmanager_ims_configid != nullptr) && (oauth_configmanager_ims_configid->isSet())){
        toJsonValue(QString("oauth.configmanager.ims.configid"), oauth_configmanager_ims_configid, obj, QString("OAIConfigNodePropertyString"));
    }
    if((ims_owning_entity != nullptr) && (ims_owning_entity->isSet())){
        toJsonValue(QString("ims.owningEntity"), ims_owning_entity, obj, QString("OAIConfigNodePropertyString"));
    }
    if((aem_instance_id != nullptr) && (aem_instance_id->isSet())){
        toJsonValue(QString("aem.instanceId"), aem_instance_id, obj, QString("OAIConfigNodePropertyString"));
    }
    if((ims_service_code != nullptr) && (ims_service_code->isSet())){
        toJsonValue(QString("ims.serviceCode"), ims_service_code, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getOauthConfigmanagerImsConfigid() {
    return oauth_configmanager_ims_configid;
}
void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setOauthConfigmanagerImsConfigid(OAIConfigNodePropertyString* oauth_configmanager_ims_configid) {
    this->oauth_configmanager_ims_configid = oauth_configmanager_ims_configid;
    this->m_oauth_configmanager_ims_configid_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getImsOwningEntity() {
    return ims_owning_entity;
}
void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setImsOwningEntity(OAIConfigNodePropertyString* ims_owning_entity) {
    this->ims_owning_entity = ims_owning_entity;
    this->m_ims_owning_entity_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getAemInstanceId() {
    return aem_instance_id;
}
void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setAemInstanceId(OAIConfigNodePropertyString* aem_instance_id) {
    this->aem_instance_id = aem_instance_id;
    this->m_aem_instance_id_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getImsServiceCode() {
    return ims_service_code;
}
void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setImsServiceCode(OAIConfigNodePropertyString* ims_service_code) {
    this->ims_service_code = ims_service_code;
    this->m_ims_service_code_isSet = true;
}


bool
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(oauth_configmanager_ims_configid != nullptr && oauth_configmanager_ims_configid->isSet()){ isObjectUpdated = true; break;}
        if(ims_owning_entity != nullptr && ims_owning_entity->isSet()){ isObjectUpdated = true; break;}
        if(aem_instance_id != nullptr && aem_instance_id->isSet()){ isObjectUpdated = true; break;}
        if(ims_service_code != nullptr && ims_service_code->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

