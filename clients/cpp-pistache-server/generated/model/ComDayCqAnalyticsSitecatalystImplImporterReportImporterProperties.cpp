/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties()
{
    m_Report_fetch_attemptsIsSet = false;
    m_Report_fetch_delayIsSet = false;
    
}

ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::~ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties()
{
}

void ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Report_fetch_attemptsIsSet)
    {
        val["report.fetch.attempts"] = ModelBase::toJson(m_Report_fetch_attempts);
    }
    if(m_Report_fetch_delayIsSet)
    {
        val["report.fetch.delay"] = ModelBase::toJson(m_Report_fetch_delay);
    }
    

    return val;
}

void ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("report.fetch.attempts") != val.end())
    {
        if(!val["report.fetch.attempts"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["report.fetch.attempts"]);
            setReportFetchAttempts( newItem );
        }
        
    }
    if(val.find("report.fetch.delay") != val.end())
    {
        if(!val["report.fetch.delay"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["report.fetch.delay"]);
            setReportFetchDelay( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::getReportFetchAttempts() const
{
    return m_Report_fetch_attempts;
}
void ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::setReportFetchAttempts(ConfigNodePropertyInteger const& value)
{
    m_Report_fetch_attempts = value;
    m_Report_fetch_attemptsIsSet = true;
}
bool ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::reportFetchAttemptsIsSet() const
{
    return m_Report_fetch_attemptsIsSet;
}
void ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::unsetReport_fetch_attempts()
{
    m_Report_fetch_attemptsIsSet = false;
}
ConfigNodePropertyInteger ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::getReportFetchDelay() const
{
    return m_Report_fetch_delay;
}
void ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::setReportFetchDelay(ConfigNodePropertyInteger const& value)
{
    m_Report_fetch_delay = value;
    m_Report_fetch_delayIsSet = true;
}
bool ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::reportFetchDelayIsSet() const
{
    return m_Report_fetch_delayIsSet;
}
void ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties::unsetReport_fetch_delay()
{
    m_Report_fetch_delayIsSet = false;
}

}
}
}
}

