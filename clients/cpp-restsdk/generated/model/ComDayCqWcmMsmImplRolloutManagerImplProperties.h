/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqWcmMsmImplRolloutManagerImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmMsmImplRolloutManagerImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmMsmImplRolloutManagerImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqWcmMsmImplRolloutManagerImplProperties
    : public ModelBase
{
public:
    ComDayCqWcmMsmImplRolloutManagerImplProperties();
    virtual ~ComDayCqWcmMsmImplRolloutManagerImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqWcmMsmImplRolloutManagerImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getEventFilter() const;
    bool eventFilterIsSet() const;
    void unsetEvent_filter();
    void setEventFilter(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getRolloutmgrExcludedpropsDefault() const;
    bool rolloutmgrExcludedpropsDefaultIsSet() const;
    void unsetRolloutmgr_excludedprops_default();
    void setRolloutmgrExcludedpropsDefault(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getRolloutmgrExcludedparagraphpropsDefault() const;
    bool rolloutmgrExcludedparagraphpropsDefaultIsSet() const;
    void unsetRolloutmgr_excludedparagraphprops_default();
    void setRolloutmgrExcludedparagraphpropsDefault(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getRolloutmgrExcludednodetypesDefault() const;
    bool rolloutmgrExcludednodetypesDefaultIsSet() const;
    void unsetRolloutmgr_excludednodetypes_default();
    void setRolloutmgrExcludednodetypesDefault(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRolloutmgrThreadpoolMaxsize() const;
    bool rolloutmgrThreadpoolMaxsizeIsSet() const;
    void unsetRolloutmgr_threadpool_maxsize();
    void setRolloutmgrThreadpoolMaxsize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRolloutmgrThreadpoolMaxshutdowntime() const;
    bool rolloutmgrThreadpoolMaxshutdowntimeIsSet() const;
    void unsetRolloutmgr_threadpool_maxshutdowntime();
    void setRolloutmgrThreadpoolMaxshutdowntime(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getRolloutmgrThreadpoolPriority() const;
    bool rolloutmgrThreadpoolPriorityIsSet() const;
    void unsetRolloutmgr_threadpool_priority();
    void setRolloutmgrThreadpoolPriority(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRolloutmgrCommitSize() const;
    bool rolloutmgrCommitSizeIsSet() const;
    void unsetRolloutmgr_commit_size();
    void setRolloutmgrCommitSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getRolloutmgrConflicthandlingEnabled() const;
    bool rolloutmgrConflicthandlingEnabledIsSet() const;
    void unsetRolloutmgr_conflicthandling_enabled();
    void setRolloutmgrConflicthandlingEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Event_filter;
    bool m_Event_filterIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Rolloutmgr_excludedprops_default;
    bool m_Rolloutmgr_excludedprops_defaultIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Rolloutmgr_excludedparagraphprops_default;
    bool m_Rolloutmgr_excludedparagraphprops_defaultIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Rolloutmgr_excludednodetypes_default;
    bool m_Rolloutmgr_excludednodetypes_defaultIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Rolloutmgr_threadpool_maxsize;
    bool m_Rolloutmgr_threadpool_maxsizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Rolloutmgr_threadpool_maxshutdowntime;
    bool m_Rolloutmgr_threadpool_maxshutdowntimeIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Rolloutmgr_threadpool_priority;
    bool m_Rolloutmgr_threadpool_priorityIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Rolloutmgr_commit_size;
    bool m_Rolloutmgr_commit_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Rolloutmgr_conflicthandling_enabled;
    bool m_Rolloutmgr_conflicthandling_enabledIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmMsmImplRolloutManagerImplProperties_H_ */
