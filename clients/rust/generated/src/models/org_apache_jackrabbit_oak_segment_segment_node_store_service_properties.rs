/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
  #[serde(rename = "repository.home")]
  repository_home: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "tarmk.mode")]
  tarmk_mode: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "tarmk.size")]
  tarmk_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "segmentCache.size")]
  segment_cache_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "stringCache.size")]
  string_cache_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "templateCache.size")]
  template_cache_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "stringDeduplicationCache.size")]
  string_deduplication_cache_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "templateDeduplicationCache.size")]
  template_deduplication_cache_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "nodeDeduplicationCache.size")]
  node_deduplication_cache_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "pauseCompaction")]
  pause_compaction: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "compaction.retryCount")]
  compaction_retry_count: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "compaction.force.timeout")]
  compaction_force_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "compaction.sizeDeltaEstimation")]
  compaction_size_delta_estimation: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "compaction.disableEstimation")]
  compaction_disable_estimation: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "compaction.retainedGenerations")]
  compaction_retained_generations: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "compaction.memoryThreshold")]
  compaction_memory_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "compaction.progressLog")]
  compaction_progress_log: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "standby")]
  standby: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "customBlobStore")]
  custom_blob_store: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "customSegmentStore")]
  custom_segment_store: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "splitPersistence")]
  split_persistence: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "repository.backup.dir")]
  repository_backup_dir: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "blobGcMaxAgeInSecs")]
  blob_gc_max_age_in_secs: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "blobTrackSnapshotIntervalInSecs")]
  blob_track_snapshot_interval_in_secs: Option<::models::ConfigNodePropertyInteger>
}

impl OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
  pub fn new() -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
      repository_home: None,
      tarmk_mode: None,
      tarmk_size: None,
      segment_cache_size: None,
      string_cache_size: None,
      template_cache_size: None,
      string_deduplication_cache_size: None,
      template_deduplication_cache_size: None,
      node_deduplication_cache_size: None,
      pause_compaction: None,
      compaction_retry_count: None,
      compaction_force_timeout: None,
      compaction_size_delta_estimation: None,
      compaction_disable_estimation: None,
      compaction_retained_generations: None,
      compaction_memory_threshold: None,
      compaction_progress_log: None,
      standby: None,
      custom_blob_store: None,
      custom_segment_store: None,
      split_persistence: None,
      repository_backup_dir: None,
      blob_gc_max_age_in_secs: None,
      blob_track_snapshot_interval_in_secs: None
    }
  }

  pub fn set_repository_home(&mut self, repository_home: ::models::ConfigNodePropertyString) {
    self.repository_home = Some(repository_home);
  }

  pub fn with_repository_home(mut self, repository_home: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.repository_home = Some(repository_home);
    self
  }

  pub fn repository_home(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.repository_home.as_ref()
  }

  pub fn reset_repository_home(&mut self) {
    self.repository_home = None;
  }

  pub fn set_tarmk_mode(&mut self, tarmk_mode: ::models::ConfigNodePropertyString) {
    self.tarmk_mode = Some(tarmk_mode);
  }

  pub fn with_tarmk_mode(mut self, tarmk_mode: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.tarmk_mode = Some(tarmk_mode);
    self
  }

  pub fn tarmk_mode(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.tarmk_mode.as_ref()
  }

  pub fn reset_tarmk_mode(&mut self) {
    self.tarmk_mode = None;
  }

  pub fn set_tarmk_size(&mut self, tarmk_size: ::models::ConfigNodePropertyInteger) {
    self.tarmk_size = Some(tarmk_size);
  }

  pub fn with_tarmk_size(mut self, tarmk_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.tarmk_size = Some(tarmk_size);
    self
  }

  pub fn tarmk_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.tarmk_size.as_ref()
  }

  pub fn reset_tarmk_size(&mut self) {
    self.tarmk_size = None;
  }

  pub fn set_segment_cache_size(&mut self, segment_cache_size: ::models::ConfigNodePropertyInteger) {
    self.segment_cache_size = Some(segment_cache_size);
  }

  pub fn with_segment_cache_size(mut self, segment_cache_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.segment_cache_size = Some(segment_cache_size);
    self
  }

  pub fn segment_cache_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.segment_cache_size.as_ref()
  }

  pub fn reset_segment_cache_size(&mut self) {
    self.segment_cache_size = None;
  }

  pub fn set_string_cache_size(&mut self, string_cache_size: ::models::ConfigNodePropertyInteger) {
    self.string_cache_size = Some(string_cache_size);
  }

  pub fn with_string_cache_size(mut self, string_cache_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.string_cache_size = Some(string_cache_size);
    self
  }

  pub fn string_cache_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.string_cache_size.as_ref()
  }

  pub fn reset_string_cache_size(&mut self) {
    self.string_cache_size = None;
  }

  pub fn set_template_cache_size(&mut self, template_cache_size: ::models::ConfigNodePropertyInteger) {
    self.template_cache_size = Some(template_cache_size);
  }

  pub fn with_template_cache_size(mut self, template_cache_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.template_cache_size = Some(template_cache_size);
    self
  }

  pub fn template_cache_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.template_cache_size.as_ref()
  }

  pub fn reset_template_cache_size(&mut self) {
    self.template_cache_size = None;
  }

  pub fn set_string_deduplication_cache_size(&mut self, string_deduplication_cache_size: ::models::ConfigNodePropertyInteger) {
    self.string_deduplication_cache_size = Some(string_deduplication_cache_size);
  }

  pub fn with_string_deduplication_cache_size(mut self, string_deduplication_cache_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.string_deduplication_cache_size = Some(string_deduplication_cache_size);
    self
  }

  pub fn string_deduplication_cache_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.string_deduplication_cache_size.as_ref()
  }

  pub fn reset_string_deduplication_cache_size(&mut self) {
    self.string_deduplication_cache_size = None;
  }

  pub fn set_template_deduplication_cache_size(&mut self, template_deduplication_cache_size: ::models::ConfigNodePropertyInteger) {
    self.template_deduplication_cache_size = Some(template_deduplication_cache_size);
  }

  pub fn with_template_deduplication_cache_size(mut self, template_deduplication_cache_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.template_deduplication_cache_size = Some(template_deduplication_cache_size);
    self
  }

  pub fn template_deduplication_cache_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.template_deduplication_cache_size.as_ref()
  }

  pub fn reset_template_deduplication_cache_size(&mut self) {
    self.template_deduplication_cache_size = None;
  }

  pub fn set_node_deduplication_cache_size(&mut self, node_deduplication_cache_size: ::models::ConfigNodePropertyInteger) {
    self.node_deduplication_cache_size = Some(node_deduplication_cache_size);
  }

  pub fn with_node_deduplication_cache_size(mut self, node_deduplication_cache_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.node_deduplication_cache_size = Some(node_deduplication_cache_size);
    self
  }

  pub fn node_deduplication_cache_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.node_deduplication_cache_size.as_ref()
  }

  pub fn reset_node_deduplication_cache_size(&mut self) {
    self.node_deduplication_cache_size = None;
  }

  pub fn set_pause_compaction(&mut self, pause_compaction: ::models::ConfigNodePropertyBoolean) {
    self.pause_compaction = Some(pause_compaction);
  }

  pub fn with_pause_compaction(mut self, pause_compaction: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.pause_compaction = Some(pause_compaction);
    self
  }

  pub fn pause_compaction(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.pause_compaction.as_ref()
  }

  pub fn reset_pause_compaction(&mut self) {
    self.pause_compaction = None;
  }

  pub fn set_compaction_retry_count(&mut self, compaction_retry_count: ::models::ConfigNodePropertyInteger) {
    self.compaction_retry_count = Some(compaction_retry_count);
  }

  pub fn with_compaction_retry_count(mut self, compaction_retry_count: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.compaction_retry_count = Some(compaction_retry_count);
    self
  }

  pub fn compaction_retry_count(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.compaction_retry_count.as_ref()
  }

  pub fn reset_compaction_retry_count(&mut self) {
    self.compaction_retry_count = None;
  }

  pub fn set_compaction_force_timeout(&mut self, compaction_force_timeout: ::models::ConfigNodePropertyInteger) {
    self.compaction_force_timeout = Some(compaction_force_timeout);
  }

  pub fn with_compaction_force_timeout(mut self, compaction_force_timeout: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.compaction_force_timeout = Some(compaction_force_timeout);
    self
  }

  pub fn compaction_force_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.compaction_force_timeout.as_ref()
  }

  pub fn reset_compaction_force_timeout(&mut self) {
    self.compaction_force_timeout = None;
  }

  pub fn set_compaction_size_delta_estimation(&mut self, compaction_size_delta_estimation: ::models::ConfigNodePropertyInteger) {
    self.compaction_size_delta_estimation = Some(compaction_size_delta_estimation);
  }

  pub fn with_compaction_size_delta_estimation(mut self, compaction_size_delta_estimation: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.compaction_size_delta_estimation = Some(compaction_size_delta_estimation);
    self
  }

  pub fn compaction_size_delta_estimation(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.compaction_size_delta_estimation.as_ref()
  }

  pub fn reset_compaction_size_delta_estimation(&mut self) {
    self.compaction_size_delta_estimation = None;
  }

  pub fn set_compaction_disable_estimation(&mut self, compaction_disable_estimation: ::models::ConfigNodePropertyBoolean) {
    self.compaction_disable_estimation = Some(compaction_disable_estimation);
  }

  pub fn with_compaction_disable_estimation(mut self, compaction_disable_estimation: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.compaction_disable_estimation = Some(compaction_disable_estimation);
    self
  }

  pub fn compaction_disable_estimation(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.compaction_disable_estimation.as_ref()
  }

  pub fn reset_compaction_disable_estimation(&mut self) {
    self.compaction_disable_estimation = None;
  }

  pub fn set_compaction_retained_generations(&mut self, compaction_retained_generations: ::models::ConfigNodePropertyInteger) {
    self.compaction_retained_generations = Some(compaction_retained_generations);
  }

  pub fn with_compaction_retained_generations(mut self, compaction_retained_generations: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.compaction_retained_generations = Some(compaction_retained_generations);
    self
  }

  pub fn compaction_retained_generations(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.compaction_retained_generations.as_ref()
  }

  pub fn reset_compaction_retained_generations(&mut self) {
    self.compaction_retained_generations = None;
  }

  pub fn set_compaction_memory_threshold(&mut self, compaction_memory_threshold: ::models::ConfigNodePropertyInteger) {
    self.compaction_memory_threshold = Some(compaction_memory_threshold);
  }

  pub fn with_compaction_memory_threshold(mut self, compaction_memory_threshold: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.compaction_memory_threshold = Some(compaction_memory_threshold);
    self
  }

  pub fn compaction_memory_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.compaction_memory_threshold.as_ref()
  }

  pub fn reset_compaction_memory_threshold(&mut self) {
    self.compaction_memory_threshold = None;
  }

  pub fn set_compaction_progress_log(&mut self, compaction_progress_log: ::models::ConfigNodePropertyInteger) {
    self.compaction_progress_log = Some(compaction_progress_log);
  }

  pub fn with_compaction_progress_log(mut self, compaction_progress_log: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.compaction_progress_log = Some(compaction_progress_log);
    self
  }

  pub fn compaction_progress_log(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.compaction_progress_log.as_ref()
  }

  pub fn reset_compaction_progress_log(&mut self) {
    self.compaction_progress_log = None;
  }

  pub fn set_standby(&mut self, standby: ::models::ConfigNodePropertyBoolean) {
    self.standby = Some(standby);
  }

  pub fn with_standby(mut self, standby: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.standby = Some(standby);
    self
  }

  pub fn standby(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.standby.as_ref()
  }

  pub fn reset_standby(&mut self) {
    self.standby = None;
  }

  pub fn set_custom_blob_store(&mut self, custom_blob_store: ::models::ConfigNodePropertyBoolean) {
    self.custom_blob_store = Some(custom_blob_store);
  }

  pub fn with_custom_blob_store(mut self, custom_blob_store: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.custom_blob_store = Some(custom_blob_store);
    self
  }

  pub fn custom_blob_store(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.custom_blob_store.as_ref()
  }

  pub fn reset_custom_blob_store(&mut self) {
    self.custom_blob_store = None;
  }

  pub fn set_custom_segment_store(&mut self, custom_segment_store: ::models::ConfigNodePropertyBoolean) {
    self.custom_segment_store = Some(custom_segment_store);
  }

  pub fn with_custom_segment_store(mut self, custom_segment_store: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.custom_segment_store = Some(custom_segment_store);
    self
  }

  pub fn custom_segment_store(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.custom_segment_store.as_ref()
  }

  pub fn reset_custom_segment_store(&mut self) {
    self.custom_segment_store = None;
  }

  pub fn set_split_persistence(&mut self, split_persistence: ::models::ConfigNodePropertyBoolean) {
    self.split_persistence = Some(split_persistence);
  }

  pub fn with_split_persistence(mut self, split_persistence: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.split_persistence = Some(split_persistence);
    self
  }

  pub fn split_persistence(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.split_persistence.as_ref()
  }

  pub fn reset_split_persistence(&mut self) {
    self.split_persistence = None;
  }

  pub fn set_repository_backup_dir(&mut self, repository_backup_dir: ::models::ConfigNodePropertyString) {
    self.repository_backup_dir = Some(repository_backup_dir);
  }

  pub fn with_repository_backup_dir(mut self, repository_backup_dir: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.repository_backup_dir = Some(repository_backup_dir);
    self
  }

  pub fn repository_backup_dir(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.repository_backup_dir.as_ref()
  }

  pub fn reset_repository_backup_dir(&mut self) {
    self.repository_backup_dir = None;
  }

  pub fn set_blob_gc_max_age_in_secs(&mut self, blob_gc_max_age_in_secs: ::models::ConfigNodePropertyInteger) {
    self.blob_gc_max_age_in_secs = Some(blob_gc_max_age_in_secs);
  }

  pub fn with_blob_gc_max_age_in_secs(mut self, blob_gc_max_age_in_secs: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.blob_gc_max_age_in_secs = Some(blob_gc_max_age_in_secs);
    self
  }

  pub fn blob_gc_max_age_in_secs(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.blob_gc_max_age_in_secs.as_ref()
  }

  pub fn reset_blob_gc_max_age_in_secs(&mut self) {
    self.blob_gc_max_age_in_secs = None;
  }

  pub fn set_blob_track_snapshot_interval_in_secs(&mut self, blob_track_snapshot_interval_in_secs: ::models::ConfigNodePropertyInteger) {
    self.blob_track_snapshot_interval_in_secs = Some(blob_track_snapshot_interval_in_secs);
  }

  pub fn with_blob_track_snapshot_interval_in_secs(mut self, blob_track_snapshot_interval_in_secs: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    self.blob_track_snapshot_interval_in_secs = Some(blob_track_snapshot_interval_in_secs);
    self
  }

  pub fn blob_track_snapshot_interval_in_secs(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.blob_track_snapshot_interval_in_secs.as_ref()
  }

  pub fn reset_blob_track_snapshot_interval_in_secs(&mut self) {
    self.blob_track_snapshot_interval_in_secs = None;
  }

}



