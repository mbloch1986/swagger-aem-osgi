/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties
    : public ModelBase
{
public:
    ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties();
    virtual ~ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getScene7FlashTemplatesRti() const;
    bool scene7FlashTemplatesRtiIsSet() const;
    void unsetScene7FlashTemplates_rti();
    void setScene7FlashTemplatesRti(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getScene7FlashTemplatesRsi() const;
    bool scene7FlashTemplatesRsiIsSet() const;
    void unsetScene7FlashTemplates_rsi();
    void setScene7FlashTemplatesRsi(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getScene7FlashTemplatesRb() const;
    bool scene7FlashTemplatesRbIsSet() const;
    void unsetScene7FlashTemplates_rb();
    void setScene7FlashTemplatesRb(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getScene7FlashTemplatesRurl() const;
    bool scene7FlashTemplatesRurlIsSet() const;
    void unsetScene7FlashTemplates_rurl();
    void setScene7FlashTemplatesRurl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getScene7FlashTemplateUrlFormatParameter() const;
    bool scene7FlashTemplateUrlFormatParameterIsSet() const;
    void unsetScene7FlashTemplate_urlFormatParameter();
    void setScene7FlashTemplateUrlFormatParameter(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Scene7FlashTemplates_rti;
    bool m_Scene7FlashTemplates_rtiIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Scene7FlashTemplates_rsi;
    bool m_Scene7FlashTemplates_rsiIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Scene7FlashTemplates_rb;
    bool m_Scene7FlashTemplates_rbIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Scene7FlashTemplates_rurl;
    bool m_Scene7FlashTemplates_rurlIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Scene7FlashTemplate_urlFormatParameter;
    bool m_Scene7FlashTemplate_urlFormatParameterIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties_H_ */
