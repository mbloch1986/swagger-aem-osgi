/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingDatasourceDataSourceFactoryProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingDatasourceDataSourceFactoryProperties_H_
#define OrgApacheSlingDatasourceDataSourceFactoryProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDatasourceDataSourceFactoryProperties
{
public:
    OrgApacheSlingDatasourceDataSourceFactoryProperties();
    virtual ~OrgApacheSlingDatasourceDataSourceFactoryProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheSlingDatasourceDataSourceFactoryProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDatasourceName() const;
    void setDatasourceName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDatasourceSvcPropName() const;
    void setDatasourceSvcPropName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDriverClassName() const;
    void setDriverClassName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUrl() const;
    void setUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUsername() const;
    void setUsername(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPassword() const;
    void setPassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDefaultAutoCommit() const;
    void setDefaultAutoCommit(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDefaultReadOnly() const;
    void setDefaultReadOnly(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDefaultTransactionIsolation() const;
    void setDefaultTransactionIsolation(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDefaultCatalog() const;
    void setDefaultCatalog(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxActive() const;
    void setMaxActive(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxIdle() const;
    void setMaxIdle(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMinIdle() const;
    void setMinIdle(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getInitialSize() const;
    void setInitialSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxWait() const;
    void setMaxWait(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxAge() const;
    void setMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getTestOnBorrow() const;
    void setTestOnBorrow(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getTestOnReturn() const;
    void setTestOnReturn(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getTestWhileIdle() const;
    void setTestWhileIdle(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getValidationQuery() const;
    void setValidationQuery(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getValidationQueryTimeout() const;
    void setValidationQueryTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTimeBetweenEvictionRunsMillis() const;
    void setTimeBetweenEvictionRunsMillis(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMinEvictableIdleTimeMillis() const;
    void setMinEvictableIdleTimeMillis(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getConnectionProperties() const;
    void setConnectionProperties(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getInitSQL() const;
    void setInitSQL(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJdbcInterceptors() const;
    void setJdbcInterceptors(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getValidationInterval() const;
    void setValidationInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getLogValidationErrors() const;
    void setLogValidationErrors(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getDatasourceSvcProperties() const;
    void setDatasourceSvcProperties(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Datasource_name;
    std::shared_ptr<ConfigNodePropertyString> m_Datasource_svc_prop_name;
    std::shared_ptr<ConfigNodePropertyString> m_DriverClassName;
    std::shared_ptr<ConfigNodePropertyString> m_Url;
    std::shared_ptr<ConfigNodePropertyString> m_Username;
    std::shared_ptr<ConfigNodePropertyString> m_Password;
    std::shared_ptr<ConfigNodePropertyDropDown> m_DefaultAutoCommit;
    std::shared_ptr<ConfigNodePropertyDropDown> m_DefaultReadOnly;
    std::shared_ptr<ConfigNodePropertyDropDown> m_DefaultTransactionIsolation;
    std::shared_ptr<ConfigNodePropertyString> m_DefaultCatalog;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxActive;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxIdle;
    std::shared_ptr<ConfigNodePropertyInteger> m_MinIdle;
    std::shared_ptr<ConfigNodePropertyInteger> m_InitialSize;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxWait;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxAge;
    std::shared_ptr<ConfigNodePropertyBoolean> m_TestOnBorrow;
    std::shared_ptr<ConfigNodePropertyBoolean> m_TestOnReturn;
    std::shared_ptr<ConfigNodePropertyBoolean> m_TestWhileIdle;
    std::shared_ptr<ConfigNodePropertyString> m_ValidationQuery;
    std::shared_ptr<ConfigNodePropertyInteger> m_ValidationQueryTimeout;
    std::shared_ptr<ConfigNodePropertyInteger> m_TimeBetweenEvictionRunsMillis;
    std::shared_ptr<ConfigNodePropertyInteger> m_MinEvictableIdleTimeMillis;
    std::shared_ptr<ConfigNodePropertyString> m_ConnectionProperties;
    std::shared_ptr<ConfigNodePropertyString> m_InitSQL;
    std::shared_ptr<ConfigNodePropertyString> m_JdbcInterceptors;
    std::shared_ptr<ConfigNodePropertyInteger> m_ValidationInterval;
    std::shared_ptr<ConfigNodePropertyBoolean> m_LogValidationErrors;
    std::shared_ptr<ConfigNodePropertyArray> m_Datasource_svc_properties;
};

}
}
}
}

#endif /* OrgApacheSlingDatasourceDataSourceFactoryProperties_H_ */
