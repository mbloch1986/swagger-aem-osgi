/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties() {
    this->init();
}

OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::~OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties() {
    
}

void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::init() {
    m_dav_root_isSet = false;
    m_dav_create_absolute_uri_isSet = false;
    m_dav_realm_isSet = false;
    m_collection_types_isSet = false;
    m_filter_prefixes_isSet = false;
    m_filter_types_isSet = false;
    m_filter_uris_isSet = false;
    m_type_collections_isSet = false;
    m_type_noncollections_isSet = false;
    m_type_content_isSet = false;
}

void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(dav_root, json[QString("dav.root")]);
    
    ::OpenAPI::fromJsonValue(dav_create_absolute_uri, json[QString("dav.create-absolute-uri")]);
    
    ::OpenAPI::fromJsonValue(dav_realm, json[QString("dav.realm")]);
    
    ::OpenAPI::fromJsonValue(collection_types, json[QString("collection.types")]);
    
    ::OpenAPI::fromJsonValue(filter_prefixes, json[QString("filter.prefixes")]);
    
    ::OpenAPI::fromJsonValue(filter_types, json[QString("filter.types")]);
    
    ::OpenAPI::fromJsonValue(filter_uris, json[QString("filter.uris")]);
    
    ::OpenAPI::fromJsonValue(type_collections, json[QString("type.collections")]);
    
    ::OpenAPI::fromJsonValue(type_noncollections, json[QString("type.noncollections")]);
    
    ::OpenAPI::fromJsonValue(type_content, json[QString("type.content")]);
    
}

QString
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::asJsonObject() const {
    QJsonObject obj;
	if(dav_root.isSet()){
        obj.insert(QString("dav.root"), ::OpenAPI::toJsonValue(dav_root));
    }
	if(dav_create_absolute_uri.isSet()){
        obj.insert(QString("dav.create-absolute-uri"), ::OpenAPI::toJsonValue(dav_create_absolute_uri));
    }
	if(dav_realm.isSet()){
        obj.insert(QString("dav.realm"), ::OpenAPI::toJsonValue(dav_realm));
    }
	if(collection_types.isSet()){
        obj.insert(QString("collection.types"), ::OpenAPI::toJsonValue(collection_types));
    }
	if(filter_prefixes.isSet()){
        obj.insert(QString("filter.prefixes"), ::OpenAPI::toJsonValue(filter_prefixes));
    }
	if(filter_types.isSet()){
        obj.insert(QString("filter.types"), ::OpenAPI::toJsonValue(filter_types));
    }
	if(filter_uris.isSet()){
        obj.insert(QString("filter.uris"), ::OpenAPI::toJsonValue(filter_uris));
    }
	if(type_collections.isSet()){
        obj.insert(QString("type.collections"), ::OpenAPI::toJsonValue(type_collections));
    }
	if(type_noncollections.isSet()){
        obj.insert(QString("type.noncollections"), ::OpenAPI::toJsonValue(type_noncollections));
    }
	if(type_content.isSet()){
        obj.insert(QString("type.content"), ::OpenAPI::toJsonValue(type_content));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavRoot() const {
    return dav_root;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavRoot(const OAIConfigNodePropertyString &dav_root) {
    this->dav_root = dav_root;
    this->m_dav_root_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavCreateAbsoluteUri() const {
    return dav_create_absolute_uri;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavCreateAbsoluteUri(const OAIConfigNodePropertyBoolean &dav_create_absolute_uri) {
    this->dav_create_absolute_uri = dav_create_absolute_uri;
    this->m_dav_create_absolute_uri_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavRealm() const {
    return dav_realm;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavRealm(const OAIConfigNodePropertyString &dav_realm) {
    this->dav_realm = dav_realm;
    this->m_dav_realm_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getCollectionTypes() const {
    return collection_types;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setCollectionTypes(const OAIConfigNodePropertyArray &collection_types) {
    this->collection_types = collection_types;
    this->m_collection_types_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterPrefixes() const {
    return filter_prefixes;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterPrefixes(const OAIConfigNodePropertyArray &filter_prefixes) {
    this->filter_prefixes = filter_prefixes;
    this->m_filter_prefixes_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterTypes() const {
    return filter_types;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterTypes(const OAIConfigNodePropertyString &filter_types) {
    this->filter_types = filter_types;
    this->m_filter_types_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterUris() const {
    return filter_uris;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterUris(const OAIConfigNodePropertyString &filter_uris) {
    this->filter_uris = filter_uris;
    this->m_filter_uris_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeCollections() const {
    return type_collections;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeCollections(const OAIConfigNodePropertyString &type_collections) {
    this->type_collections = type_collections;
    this->m_type_collections_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeNoncollections() const {
    return type_noncollections;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeNoncollections(const OAIConfigNodePropertyString &type_noncollections) {
    this->type_noncollections = type_noncollections;
    this->m_type_noncollections_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeContent() const {
    return type_content;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeContent(const OAIConfigNodePropertyString &type_content) {
    this->type_content = type_content;
    this->m_type_content_isSet = true;
}


bool
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(dav_root.isSet()){ isObjectUpdated = true; break;}
    
        if(dav_create_absolute_uri.isSet()){ isObjectUpdated = true; break;}
    
        if(dav_realm.isSet()){ isObjectUpdated = true; break;}
    
        if(collection_types.isSet()){ isObjectUpdated = true; break;}
    
        if(filter_prefixes.isSet()){ isObjectUpdated = true; break;}
    
        if(filter_types.isSet()){ isObjectUpdated = true; break;}
    
        if(filter_uris.isSet()){ isObjectUpdated = true; break;}
    
        if(type_collections.isSet()){ isObjectUpdated = true; break;}
    
        if(type_noncollections.isSet()){ isObjectUpdated = true; break;}
    
        if(type_content.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

