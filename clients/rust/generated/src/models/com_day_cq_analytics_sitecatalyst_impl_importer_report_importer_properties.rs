/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties {
  #[serde(rename = "report.fetch.attempts")]
  report_fetch_attempts: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "report.fetch.delay")]
  report_fetch_delay: Option<::models::ConfigNodePropertyInteger>
}

impl ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties {
  pub fn new() -> ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties {
    ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties {
      report_fetch_attempts: None,
      report_fetch_delay: None
    }
  }

  pub fn set_report_fetch_attempts(&mut self, report_fetch_attempts: ::models::ConfigNodePropertyInteger) {
    self.report_fetch_attempts = Some(report_fetch_attempts);
  }

  pub fn with_report_fetch_attempts(mut self, report_fetch_attempts: ::models::ConfigNodePropertyInteger) -> ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties {
    self.report_fetch_attempts = Some(report_fetch_attempts);
    self
  }

  pub fn report_fetch_attempts(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.report_fetch_attempts.as_ref()
  }

  pub fn reset_report_fetch_attempts(&mut self) {
    self.report_fetch_attempts = None;
  }

  pub fn set_report_fetch_delay(&mut self, report_fetch_delay: ::models::ConfigNodePropertyInteger) {
    self.report_fetch_delay = Some(report_fetch_delay);
  }

  pub fn with_report_fetch_delay(mut self, report_fetch_delay: ::models::ConfigNodePropertyInteger) -> ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties {
    self.report_fetch_delay = Some(report_fetch_delay);
    self
  }

  pub fn report_fetch_delay(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.report_fetch_delay.as_ref()
  }

  pub fn reset_report_fetch_delay(&mut self) {
    self.report_fetch_delay = None;
  }

}



