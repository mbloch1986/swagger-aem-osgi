<?php
/**
 * OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingEngineImplAuthSlingAuthenticatorProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'osgi_http_whiteboard_context_select' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'osgi_http_whiteboard_listener' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_sudo_cookie' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_sudo_parameter' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_annonymous' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'sling_auth_requirements' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'sling_auth_anonymous_user' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'sling_auth_anonymous_password' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_http' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'auth_http_realm' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_uri_suffix' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'osgi_http_whiteboard_context_select' => null,
        'osgi_http_whiteboard_listener' => null,
        'auth_sudo_cookie' => null,
        'auth_sudo_parameter' => null,
        'auth_annonymous' => null,
        'sling_auth_requirements' => null,
        'sling_auth_anonymous_user' => null,
        'sling_auth_anonymous_password' => null,
        'auth_http' => null,
        'auth_http_realm' => null,
        'auth_uri_suffix' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'osgi_http_whiteboard_context_select' => 'osgi.http.whiteboard.context.select',
        'osgi_http_whiteboard_listener' => 'osgi.http.whiteboard.listener',
        'auth_sudo_cookie' => 'auth.sudo.cookie',
        'auth_sudo_parameter' => 'auth.sudo.parameter',
        'auth_annonymous' => 'auth.annonymous',
        'sling_auth_requirements' => 'sling.auth.requirements',
        'sling_auth_anonymous_user' => 'sling.auth.anonymous.user',
        'sling_auth_anonymous_password' => 'sling.auth.anonymous.password',
        'auth_http' => 'auth.http',
        'auth_http_realm' => 'auth.http.realm',
        'auth_uri_suffix' => 'auth.uri.suffix'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'osgi_http_whiteboard_context_select' => 'setOsgiHttpWhiteboardContextSelect',
        'osgi_http_whiteboard_listener' => 'setOsgiHttpWhiteboardListener',
        'auth_sudo_cookie' => 'setAuthSudoCookie',
        'auth_sudo_parameter' => 'setAuthSudoParameter',
        'auth_annonymous' => 'setAuthAnnonymous',
        'sling_auth_requirements' => 'setSlingAuthRequirements',
        'sling_auth_anonymous_user' => 'setSlingAuthAnonymousUser',
        'sling_auth_anonymous_password' => 'setSlingAuthAnonymousPassword',
        'auth_http' => 'setAuthHttp',
        'auth_http_realm' => 'setAuthHttpRealm',
        'auth_uri_suffix' => 'setAuthUriSuffix'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'osgi_http_whiteboard_context_select' => 'getOsgiHttpWhiteboardContextSelect',
        'osgi_http_whiteboard_listener' => 'getOsgiHttpWhiteboardListener',
        'auth_sudo_cookie' => 'getAuthSudoCookie',
        'auth_sudo_parameter' => 'getAuthSudoParameter',
        'auth_annonymous' => 'getAuthAnnonymous',
        'sling_auth_requirements' => 'getSlingAuthRequirements',
        'sling_auth_anonymous_user' => 'getSlingAuthAnonymousUser',
        'sling_auth_anonymous_password' => 'getSlingAuthAnonymousPassword',
        'auth_http' => 'getAuthHttp',
        'auth_http_realm' => 'getAuthHttpRealm',
        'auth_uri_suffix' => 'getAuthUriSuffix'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['osgi_http_whiteboard_context_select'] = isset($data['osgi_http_whiteboard_context_select']) ? $data['osgi_http_whiteboard_context_select'] : null;
        $this->container['osgi_http_whiteboard_listener'] = isset($data['osgi_http_whiteboard_listener']) ? $data['osgi_http_whiteboard_listener'] : null;
        $this->container['auth_sudo_cookie'] = isset($data['auth_sudo_cookie']) ? $data['auth_sudo_cookie'] : null;
        $this->container['auth_sudo_parameter'] = isset($data['auth_sudo_parameter']) ? $data['auth_sudo_parameter'] : null;
        $this->container['auth_annonymous'] = isset($data['auth_annonymous']) ? $data['auth_annonymous'] : null;
        $this->container['sling_auth_requirements'] = isset($data['sling_auth_requirements']) ? $data['sling_auth_requirements'] : null;
        $this->container['sling_auth_anonymous_user'] = isset($data['sling_auth_anonymous_user']) ? $data['sling_auth_anonymous_user'] : null;
        $this->container['sling_auth_anonymous_password'] = isset($data['sling_auth_anonymous_password']) ? $data['sling_auth_anonymous_password'] : null;
        $this->container['auth_http'] = isset($data['auth_http']) ? $data['auth_http'] : null;
        $this->container['auth_http_realm'] = isset($data['auth_http_realm']) ? $data['auth_http_realm'] : null;
        $this->container['auth_uri_suffix'] = isset($data['auth_uri_suffix']) ? $data['auth_uri_suffix'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets osgi_http_whiteboard_context_select
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getOsgiHttpWhiteboardContextSelect()
    {
        return $this->container['osgi_http_whiteboard_context_select'];
    }

    /**
     * Sets osgi_http_whiteboard_context_select
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $osgi_http_whiteboard_context_select osgi_http_whiteboard_context_select
     *
     * @return $this
     */
    public function setOsgiHttpWhiteboardContextSelect($osgi_http_whiteboard_context_select)
    {
        $this->container['osgi_http_whiteboard_context_select'] = $osgi_http_whiteboard_context_select;

        return $this;
    }

    /**
     * Gets osgi_http_whiteboard_listener
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getOsgiHttpWhiteboardListener()
    {
        return $this->container['osgi_http_whiteboard_listener'];
    }

    /**
     * Sets osgi_http_whiteboard_listener
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $osgi_http_whiteboard_listener osgi_http_whiteboard_listener
     *
     * @return $this
     */
    public function setOsgiHttpWhiteboardListener($osgi_http_whiteboard_listener)
    {
        $this->container['osgi_http_whiteboard_listener'] = $osgi_http_whiteboard_listener;

        return $this;
    }

    /**
     * Gets auth_sudo_cookie
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthSudoCookie()
    {
        return $this->container['auth_sudo_cookie'];
    }

    /**
     * Sets auth_sudo_cookie
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_sudo_cookie auth_sudo_cookie
     *
     * @return $this
     */
    public function setAuthSudoCookie($auth_sudo_cookie)
    {
        $this->container['auth_sudo_cookie'] = $auth_sudo_cookie;

        return $this;
    }

    /**
     * Gets auth_sudo_parameter
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthSudoParameter()
    {
        return $this->container['auth_sudo_parameter'];
    }

    /**
     * Sets auth_sudo_parameter
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_sudo_parameter auth_sudo_parameter
     *
     * @return $this
     */
    public function setAuthSudoParameter($auth_sudo_parameter)
    {
        $this->container['auth_sudo_parameter'] = $auth_sudo_parameter;

        return $this;
    }

    /**
     * Gets auth_annonymous
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getAuthAnnonymous()
    {
        return $this->container['auth_annonymous'];
    }

    /**
     * Sets auth_annonymous
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $auth_annonymous auth_annonymous
     *
     * @return $this
     */
    public function setAuthAnnonymous($auth_annonymous)
    {
        $this->container['auth_annonymous'] = $auth_annonymous;

        return $this;
    }

    /**
     * Gets sling_auth_requirements
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getSlingAuthRequirements()
    {
        return $this->container['sling_auth_requirements'];
    }

    /**
     * Sets sling_auth_requirements
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $sling_auth_requirements sling_auth_requirements
     *
     * @return $this
     */
    public function setSlingAuthRequirements($sling_auth_requirements)
    {
        $this->container['sling_auth_requirements'] = $sling_auth_requirements;

        return $this;
    }

    /**
     * Gets sling_auth_anonymous_user
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSlingAuthAnonymousUser()
    {
        return $this->container['sling_auth_anonymous_user'];
    }

    /**
     * Sets sling_auth_anonymous_user
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $sling_auth_anonymous_user sling_auth_anonymous_user
     *
     * @return $this
     */
    public function setSlingAuthAnonymousUser($sling_auth_anonymous_user)
    {
        $this->container['sling_auth_anonymous_user'] = $sling_auth_anonymous_user;

        return $this;
    }

    /**
     * Gets sling_auth_anonymous_password
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSlingAuthAnonymousPassword()
    {
        return $this->container['sling_auth_anonymous_password'];
    }

    /**
     * Sets sling_auth_anonymous_password
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $sling_auth_anonymous_password sling_auth_anonymous_password
     *
     * @return $this
     */
    public function setSlingAuthAnonymousPassword($sling_auth_anonymous_password)
    {
        $this->container['sling_auth_anonymous_password'] = $sling_auth_anonymous_password;

        return $this;
    }

    /**
     * Gets auth_http
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getAuthHttp()
    {
        return $this->container['auth_http'];
    }

    /**
     * Sets auth_http
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $auth_http auth_http
     *
     * @return $this
     */
    public function setAuthHttp($auth_http)
    {
        $this->container['auth_http'] = $auth_http;

        return $this;
    }

    /**
     * Gets auth_http_realm
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthHttpRealm()
    {
        return $this->container['auth_http_realm'];
    }

    /**
     * Sets auth_http_realm
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_http_realm auth_http_realm
     *
     * @return $this
     */
    public function setAuthHttpRealm($auth_http_realm)
    {
        $this->container['auth_http_realm'] = $auth_http_realm;

        return $this;
    }

    /**
     * Gets auth_uri_suffix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAuthUriSuffix()
    {
        return $this->container['auth_uri_suffix'];
    }

    /**
     * Sets auth_uri_suffix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $auth_uri_suffix auth_uri_suffix
     *
     * @return $this
     */
    public function setAuthUriSuffix($auth_uri_suffix)
    {
        $this->container['auth_uri_suffix'] = $auth_uri_suffix;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


