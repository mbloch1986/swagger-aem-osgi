/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteMonitoringImplScriptConfigImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteMonitoringImplScriptConfigImplProperties::ComAdobeGraniteMonitoringImplScriptConfigImplProperties()
{
    m_Script_filenameIsSet = false;
    m_Script_displayIsSet = false;
    m_Script_pathIsSet = false;
    m_Script_platformIsSet = false;
    m_IntervalIsSet = false;
    m_JmxdomainIsSet = false;
    
}

ComAdobeGraniteMonitoringImplScriptConfigImplProperties::~ComAdobeGraniteMonitoringImplScriptConfigImplProperties()
{
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteMonitoringImplScriptConfigImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Script_filenameIsSet)
    {
        val["script.filename"] = ModelBase::toJson(m_Script_filename);
    }
    if(m_Script_displayIsSet)
    {
        val["script.display"] = ModelBase::toJson(m_Script_display);
    }
    if(m_Script_pathIsSet)
    {
        val["script.path"] = ModelBase::toJson(m_Script_path);
    }
    if(m_Script_platformIsSet)
    {
        val["script.platform"] = ModelBase::toJson(m_Script_platform);
    }
    if(m_IntervalIsSet)
    {
        val["interval"] = ModelBase::toJson(m_Interval);
    }
    if(m_JmxdomainIsSet)
    {
        val["jmxdomain"] = ModelBase::toJson(m_Jmxdomain);
    }
    

    return val;
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("script.filename") != val.end())
    {
        if(!val["script.filename"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["script.filename"]);
            setScriptFilename( newItem );
        }
        
    }
    if(val.find("script.display") != val.end())
    {
        if(!val["script.display"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["script.display"]);
            setScriptDisplay( newItem );
        }
        
    }
    if(val.find("script.path") != val.end())
    {
        if(!val["script.path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["script.path"]);
            setScriptPath( newItem );
        }
        
    }
    if(val.find("script.platform") != val.end())
    {
        if(!val["script.platform"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["script.platform"]);
            setScriptPlatform( newItem );
        }
        
    }
    if(val.find("interval") != val.end())
    {
        if(!val["interval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["interval"]);
            setInterval( newItem );
        }
        
    }
    if(val.find("jmxdomain") != val.end())
    {
        if(!val["jmxdomain"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["jmxdomain"]);
            setJmxdomain( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptFilename() const
{
    return m_Script_filename;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptFilename(ConfigNodePropertyString const& value)
{
    m_Script_filename = value;
    m_Script_filenameIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::scriptFilenameIsSet() const
{
    return m_Script_filenameIsSet;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetScript_filename()
{
    m_Script_filenameIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptDisplay() const
{
    return m_Script_display;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptDisplay(ConfigNodePropertyString const& value)
{
    m_Script_display = value;
    m_Script_displayIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::scriptDisplayIsSet() const
{
    return m_Script_displayIsSet;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetScript_display()
{
    m_Script_displayIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptPath() const
{
    return m_Script_path;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptPath(ConfigNodePropertyString const& value)
{
    m_Script_path = value;
    m_Script_pathIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::scriptPathIsSet() const
{
    return m_Script_pathIsSet;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetScript_path()
{
    m_Script_pathIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptPlatform() const
{
    return m_Script_platform;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptPlatform(ConfigNodePropertyArray const& value)
{
    m_Script_platform = value;
    m_Script_platformIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::scriptPlatformIsSet() const
{
    return m_Script_platformIsSet;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetScript_platform()
{
    m_Script_platformIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getInterval() const
{
    return m_Interval;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setInterval(ConfigNodePropertyInteger const& value)
{
    m_Interval = value;
    m_IntervalIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::intervalIsSet() const
{
    return m_IntervalIsSet;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetInterval()
{
    m_IntervalIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getJmxdomain() const
{
    return m_Jmxdomain;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setJmxdomain(ConfigNodePropertyString const& value)
{
    m_Jmxdomain = value;
    m_JmxdomainIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::jmxdomainIsSet() const
{
    return m_JmxdomainIsSet;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetJmxdomain()
{
    m_JmxdomainIsSet = false;
}

}
}
}
}

