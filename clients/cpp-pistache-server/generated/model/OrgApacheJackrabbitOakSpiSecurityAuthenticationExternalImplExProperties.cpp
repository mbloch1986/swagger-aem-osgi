/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties()
{
    m_Jaas_rankingIsSet = false;
    m_Jaas_controlFlagIsSet = false;
    m_Jaas_realmNameIsSet = false;
    m_Idp_nameIsSet = false;
    m_Sync_handlerNameIsSet = false;
    
}

OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::~OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties()
{
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Jaas_rankingIsSet)
    {
        val["jaas.ranking"] = ModelBase::toJson(m_Jaas_ranking);
    }
    if(m_Jaas_controlFlagIsSet)
    {
        val["jaas.controlFlag"] = ModelBase::toJson(m_Jaas_controlFlag);
    }
    if(m_Jaas_realmNameIsSet)
    {
        val["jaas.realmName"] = ModelBase::toJson(m_Jaas_realmName);
    }
    if(m_Idp_nameIsSet)
    {
        val["idp.name"] = ModelBase::toJson(m_Idp_name);
    }
    if(m_Sync_handlerNameIsSet)
    {
        val["sync.handlerName"] = ModelBase::toJson(m_Sync_handlerName);
    }
    

    return val;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::fromJson(nlohmann::json& val)
{
    if(val.find("jaas.ranking") != val.end())
    {
        if(!val["jaas.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["jaas.ranking"]);
            setJaasRanking( newItem );
        }
        
    }
    if(val.find("jaas.controlFlag") != val.end())
    {
        if(!val["jaas.controlFlag"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["jaas.controlFlag"]);
            setJaasControlFlag( newItem );
        }
        
    }
    if(val.find("jaas.realmName") != val.end())
    {
        if(!val["jaas.realmName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["jaas.realmName"]);
            setJaasRealmName( newItem );
        }
        
    }
    if(val.find("idp.name") != val.end())
    {
        if(!val["idp.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["idp.name"]);
            setIdpName( newItem );
        }
        
    }
    if(val.find("sync.handlerName") != val.end())
    {
        if(!val["sync.handlerName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["sync.handlerName"]);
            setSyncHandlerName( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::getJaasRanking() const
{
    return m_Jaas_ranking;
}
void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::setJaasRanking(ConfigNodePropertyInteger const& value)
{
    m_Jaas_ranking = value;
    m_Jaas_rankingIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::jaasRankingIsSet() const
{
    return m_Jaas_rankingIsSet;
}
void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::unsetJaas_ranking()
{
    m_Jaas_rankingIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::getJaasControlFlag() const
{
    return m_Jaas_controlFlag;
}
void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::setJaasControlFlag(ConfigNodePropertyString const& value)
{
    m_Jaas_controlFlag = value;
    m_Jaas_controlFlagIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::jaasControlFlagIsSet() const
{
    return m_Jaas_controlFlagIsSet;
}
void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::unsetJaas_controlFlag()
{
    m_Jaas_controlFlagIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::getJaasRealmName() const
{
    return m_Jaas_realmName;
}
void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::setJaasRealmName(ConfigNodePropertyString const& value)
{
    m_Jaas_realmName = value;
    m_Jaas_realmNameIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::jaasRealmNameIsSet() const
{
    return m_Jaas_realmNameIsSet;
}
void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::unsetJaas_realmName()
{
    m_Jaas_realmNameIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::getIdpName() const
{
    return m_Idp_name;
}
void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::setIdpName(ConfigNodePropertyString const& value)
{
    m_Idp_name = value;
    m_Idp_nameIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::idpNameIsSet() const
{
    return m_Idp_nameIsSet;
}
void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::unsetIdp_name()
{
    m_Idp_nameIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::getSyncHandlerName() const
{
    return m_Sync_handlerName;
}
void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::setSyncHandlerName(ConfigNodePropertyString const& value)
{
    m_Sync_handlerName = value;
    m_Sync_handlerNameIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::syncHandlerNameIsSet() const
{
    return m_Sync_handlerNameIsSet;
}
void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::unsetSync_handlerName()
{
    m_Sync_handlerNameIsSet = false;
}

}
}
}
}

