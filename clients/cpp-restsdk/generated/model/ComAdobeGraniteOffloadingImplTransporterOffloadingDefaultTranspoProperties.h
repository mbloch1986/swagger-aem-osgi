/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties
    : public ModelBase
{
public:
    ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties();
    virtual ~ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDefaultTransportAgentToWorkerPrefix() const;
    bool defaultTransportAgentToWorkerPrefixIsSet() const;
    void unsetDefault_transport_agent_to_worker_prefix();
    void setDefaultTransportAgentToWorkerPrefix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDefaultTransportAgentToMasterPrefix() const;
    bool defaultTransportAgentToMasterPrefixIsSet() const;
    void unsetDefault_transport_agent_to_master_prefix();
    void setDefaultTransportAgentToMasterPrefix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDefaultTransportInputPackage() const;
    bool defaultTransportInputPackageIsSet() const;
    void unsetDefault_transport_input_package();
    void setDefaultTransportInputPackage(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDefaultTransportOutputPackage() const;
    bool defaultTransportOutputPackageIsSet() const;
    void unsetDefault_transport_output_package();
    void setDefaultTransportOutputPackage(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDefaultTransportReplicationSynchronous() const;
    bool defaultTransportReplicationSynchronousIsSet() const;
    void unsetDefault_transport_replication_synchronous();
    void setDefaultTransportReplicationSynchronous(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDefaultTransportContentpackage() const;
    bool defaultTransportContentpackageIsSet() const;
    void unsetDefault_transport_contentpackage();
    void setDefaultTransportContentpackage(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOffloadingTransporterDefaultEnabled() const;
    bool offloadingTransporterDefaultEnabledIsSet() const;
    void unsetOffloading_transporter_default_enabled();
    void setOffloadingTransporterDefaultEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Default_transport_agent_to_worker_prefix;
    bool m_Default_transport_agent_to_worker_prefixIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Default_transport_agent_to_master_prefix;
    bool m_Default_transport_agent_to_master_prefixIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Default_transport_input_package;
    bool m_Default_transport_input_packageIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Default_transport_output_package;
    bool m_Default_transport_output_packageIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Default_transport_replication_synchronous;
    bool m_Default_transport_replication_synchronousIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Default_transport_contentpackage;
    bool m_Default_transport_contentpackageIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Offloading_transporter_default_enabled;
    bool m_Offloading_transporter_default_enabledIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties_H_ */
