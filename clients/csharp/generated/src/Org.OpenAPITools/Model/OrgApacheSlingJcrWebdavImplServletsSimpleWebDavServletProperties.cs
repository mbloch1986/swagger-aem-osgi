/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties :  IEquatable<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties" /> class.
        /// </summary>
        /// <param name="davRoot">davRoot.</param>
        /// <param name="davCreateAbsoluteUri">davCreateAbsoluteUri.</param>
        /// <param name="davRealm">davRealm.</param>
        /// <param name="collectionTypes">collectionTypes.</param>
        /// <param name="filterPrefixes">filterPrefixes.</param>
        /// <param name="filterTypes">filterTypes.</param>
        /// <param name="filterUris">filterUris.</param>
        /// <param name="typeCollections">typeCollections.</param>
        /// <param name="typeNoncollections">typeNoncollections.</param>
        /// <param name="typeContent">typeContent.</param>
        public OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties(ConfigNodePropertyString davRoot = default(ConfigNodePropertyString), ConfigNodePropertyBoolean davCreateAbsoluteUri = default(ConfigNodePropertyBoolean), ConfigNodePropertyString davRealm = default(ConfigNodePropertyString), ConfigNodePropertyArray collectionTypes = default(ConfigNodePropertyArray), ConfigNodePropertyArray filterPrefixes = default(ConfigNodePropertyArray), ConfigNodePropertyString filterTypes = default(ConfigNodePropertyString), ConfigNodePropertyString filterUris = default(ConfigNodePropertyString), ConfigNodePropertyString typeCollections = default(ConfigNodePropertyString), ConfigNodePropertyString typeNoncollections = default(ConfigNodePropertyString), ConfigNodePropertyString typeContent = default(ConfigNodePropertyString))
        {
            this.DavRoot = davRoot;
            this.DavCreateAbsoluteUri = davCreateAbsoluteUri;
            this.DavRealm = davRealm;
            this.CollectionTypes = collectionTypes;
            this.FilterPrefixes = filterPrefixes;
            this.FilterTypes = filterTypes;
            this.FilterUris = filterUris;
            this.TypeCollections = typeCollections;
            this.TypeNoncollections = typeNoncollections;
            this.TypeContent = typeContent;
        }
        
        /// <summary>
        /// Gets or Sets DavRoot
        /// </summary>
        [DataMember(Name="dav.root", EmitDefaultValue=false)]
        public ConfigNodePropertyString DavRoot { get; set; }

        /// <summary>
        /// Gets or Sets DavCreateAbsoluteUri
        /// </summary>
        [DataMember(Name="dav.create-absolute-uri", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DavCreateAbsoluteUri { get; set; }

        /// <summary>
        /// Gets or Sets DavRealm
        /// </summary>
        [DataMember(Name="dav.realm", EmitDefaultValue=false)]
        public ConfigNodePropertyString DavRealm { get; set; }

        /// <summary>
        /// Gets or Sets CollectionTypes
        /// </summary>
        [DataMember(Name="collection.types", EmitDefaultValue=false)]
        public ConfigNodePropertyArray CollectionTypes { get; set; }

        /// <summary>
        /// Gets or Sets FilterPrefixes
        /// </summary>
        [DataMember(Name="filter.prefixes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray FilterPrefixes { get; set; }

        /// <summary>
        /// Gets or Sets FilterTypes
        /// </summary>
        [DataMember(Name="filter.types", EmitDefaultValue=false)]
        public ConfigNodePropertyString FilterTypes { get; set; }

        /// <summary>
        /// Gets or Sets FilterUris
        /// </summary>
        [DataMember(Name="filter.uris", EmitDefaultValue=false)]
        public ConfigNodePropertyString FilterUris { get; set; }

        /// <summary>
        /// Gets or Sets TypeCollections
        /// </summary>
        [DataMember(Name="type.collections", EmitDefaultValue=false)]
        public ConfigNodePropertyString TypeCollections { get; set; }

        /// <summary>
        /// Gets or Sets TypeNoncollections
        /// </summary>
        [DataMember(Name="type.noncollections", EmitDefaultValue=false)]
        public ConfigNodePropertyString TypeNoncollections { get; set; }

        /// <summary>
        /// Gets or Sets TypeContent
        /// </summary>
        [DataMember(Name="type.content", EmitDefaultValue=false)]
        public ConfigNodePropertyString TypeContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {\n");
            sb.Append("  DavRoot: ").Append(DavRoot).Append("\n");
            sb.Append("  DavCreateAbsoluteUri: ").Append(DavCreateAbsoluteUri).Append("\n");
            sb.Append("  DavRealm: ").Append(DavRealm).Append("\n");
            sb.Append("  CollectionTypes: ").Append(CollectionTypes).Append("\n");
            sb.Append("  FilterPrefixes: ").Append(FilterPrefixes).Append("\n");
            sb.Append("  FilterTypes: ").Append(FilterTypes).Append("\n");
            sb.Append("  FilterUris: ").Append(FilterUris).Append("\n");
            sb.Append("  TypeCollections: ").Append(TypeCollections).Append("\n");
            sb.Append("  TypeNoncollections: ").Append(TypeNoncollections).Append("\n");
            sb.Append("  TypeContent: ").Append(TypeContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DavRoot == input.DavRoot ||
                    (this.DavRoot != null &&
                    this.DavRoot.Equals(input.DavRoot))
                ) && 
                (
                    this.DavCreateAbsoluteUri == input.DavCreateAbsoluteUri ||
                    (this.DavCreateAbsoluteUri != null &&
                    this.DavCreateAbsoluteUri.Equals(input.DavCreateAbsoluteUri))
                ) && 
                (
                    this.DavRealm == input.DavRealm ||
                    (this.DavRealm != null &&
                    this.DavRealm.Equals(input.DavRealm))
                ) && 
                (
                    this.CollectionTypes == input.CollectionTypes ||
                    (this.CollectionTypes != null &&
                    this.CollectionTypes.Equals(input.CollectionTypes))
                ) && 
                (
                    this.FilterPrefixes == input.FilterPrefixes ||
                    (this.FilterPrefixes != null &&
                    this.FilterPrefixes.Equals(input.FilterPrefixes))
                ) && 
                (
                    this.FilterTypes == input.FilterTypes ||
                    (this.FilterTypes != null &&
                    this.FilterTypes.Equals(input.FilterTypes))
                ) && 
                (
                    this.FilterUris == input.FilterUris ||
                    (this.FilterUris != null &&
                    this.FilterUris.Equals(input.FilterUris))
                ) && 
                (
                    this.TypeCollections == input.TypeCollections ||
                    (this.TypeCollections != null &&
                    this.TypeCollections.Equals(input.TypeCollections))
                ) && 
                (
                    this.TypeNoncollections == input.TypeNoncollections ||
                    (this.TypeNoncollections != null &&
                    this.TypeNoncollections.Equals(input.TypeNoncollections))
                ) && 
                (
                    this.TypeContent == input.TypeContent ||
                    (this.TypeContent != null &&
                    this.TypeContent.Equals(input.TypeContent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DavRoot != null)
                    hashCode = hashCode * 59 + this.DavRoot.GetHashCode();
                if (this.DavCreateAbsoluteUri != null)
                    hashCode = hashCode * 59 + this.DavCreateAbsoluteUri.GetHashCode();
                if (this.DavRealm != null)
                    hashCode = hashCode * 59 + this.DavRealm.GetHashCode();
                if (this.CollectionTypes != null)
                    hashCode = hashCode * 59 + this.CollectionTypes.GetHashCode();
                if (this.FilterPrefixes != null)
                    hashCode = hashCode * 59 + this.FilterPrefixes.GetHashCode();
                if (this.FilterTypes != null)
                    hashCode = hashCode * 59 + this.FilterTypes.GetHashCode();
                if (this.FilterUris != null)
                    hashCode = hashCode * 59 + this.FilterUris.GetHashCode();
                if (this.TypeCollections != null)
                    hashCode = hashCode * 59 + this.TypeCollections.GetHashCode();
                if (this.TypeNoncollections != null)
                    hashCode = hashCode * 59 + this.TypeNoncollections.GetHashCode();
                if (this.TypeContent != null)
                    hashCode = hashCode * 59 + this.TypeContent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
