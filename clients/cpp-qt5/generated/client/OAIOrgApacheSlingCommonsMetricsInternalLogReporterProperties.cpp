/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties() {
    init();
}

OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::~OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::init() {
    period = new OAIConfigNodePropertyInteger();
    m_period_isSet = false;
    time_unit = new OAIConfigNodePropertyDropDown();
    m_time_unit_isSet = false;
    level = new OAIConfigNodePropertyDropDown();
    m_level_isSet = false;
    logger_name = new OAIConfigNodePropertyString();
    m_logger_name_isSet = false;
    prefix = new OAIConfigNodePropertyString();
    m_prefix_isSet = false;
    pattern = new OAIConfigNodePropertyString();
    m_pattern_isSet = false;
    registry_name = new OAIConfigNodePropertyString();
    m_registry_name_isSet = false;
}

void
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::cleanup() {
    if(period != nullptr) { 
        delete period;
    }
    if(time_unit != nullptr) { 
        delete time_unit;
    }
    if(level != nullptr) { 
        delete level;
    }
    if(logger_name != nullptr) { 
        delete logger_name;
    }
    if(prefix != nullptr) { 
        delete prefix;
    }
    if(pattern != nullptr) { 
        delete pattern;
    }
    if(registry_name != nullptr) { 
        delete registry_name;
    }
}

OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties*
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&period, pJson["period"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&time_unit, pJson["timeUnit"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&level, pJson["level"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&logger_name, pJson["loggerName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&prefix, pJson["prefix"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&pattern, pJson["pattern"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&registry_name, pJson["registryName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::asJsonObject() {
    QJsonObject obj;
    if((period != nullptr) && (period->isSet())){
        toJsonValue(QString("period"), period, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((time_unit != nullptr) && (time_unit->isSet())){
        toJsonValue(QString("timeUnit"), time_unit, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((level != nullptr) && (level->isSet())){
        toJsonValue(QString("level"), level, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((logger_name != nullptr) && (logger_name->isSet())){
        toJsonValue(QString("loggerName"), logger_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((prefix != nullptr) && (prefix->isSet())){
        toJsonValue(QString("prefix"), prefix, obj, QString("OAIConfigNodePropertyString"));
    }
    if((pattern != nullptr) && (pattern->isSet())){
        toJsonValue(QString("pattern"), pattern, obj, QString("OAIConfigNodePropertyString"));
    }
    if((registry_name != nullptr) && (registry_name->isSet())){
        toJsonValue(QString("registryName"), registry_name, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::getPeriod() {
    return period;
}
void
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::setPeriod(OAIConfigNodePropertyInteger* period) {
    this->period = period;
    this->m_period_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::getTimeUnit() {
    return time_unit;
}
void
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::setTimeUnit(OAIConfigNodePropertyDropDown* time_unit) {
    this->time_unit = time_unit;
    this->m_time_unit_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::getLevel() {
    return level;
}
void
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::setLevel(OAIConfigNodePropertyDropDown* level) {
    this->level = level;
    this->m_level_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::getLoggerName() {
    return logger_name;
}
void
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::setLoggerName(OAIConfigNodePropertyString* logger_name) {
    this->logger_name = logger_name;
    this->m_logger_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::getPrefix() {
    return prefix;
}
void
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::setPrefix(OAIConfigNodePropertyString* prefix) {
    this->prefix = prefix;
    this->m_prefix_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::getPattern() {
    return pattern;
}
void
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::setPattern(OAIConfigNodePropertyString* pattern) {
    this->pattern = pattern;
    this->m_pattern_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::getRegistryName() {
    return registry_name;
}
void
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::setRegistryName(OAIConfigNodePropertyString* registry_name) {
    this->registry_name = registry_name;
    this->m_registry_name_isSet = true;
}


bool
OAIOrgApacheSlingCommonsMetricsInternalLogReporterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(period != nullptr && period->isSet()){ isObjectUpdated = true; break;}
        if(time_unit != nullptr && time_unit->isSet()){ isObjectUpdated = true; break;}
        if(level != nullptr && level->isSet()){ isObjectUpdated = true; break;}
        if(logger_name != nullptr && logger_name->isSet()){ isObjectUpdated = true; break;}
        if(prefix != nullptr && prefix->isSet()){ isObjectUpdated = true; break;}
        if(pattern != nullptr && pattern->isSet()){ isObjectUpdated = true; break;}
        if(registry_name != nullptr && registry_name->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

