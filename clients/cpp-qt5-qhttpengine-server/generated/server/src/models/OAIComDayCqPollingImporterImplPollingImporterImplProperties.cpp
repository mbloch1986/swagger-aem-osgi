/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqPollingImporterImplPollingImporterImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqPollingImporterImplPollingImporterImplProperties::OAIComDayCqPollingImporterImplPollingImporterImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqPollingImporterImplPollingImporterImplProperties::OAIComDayCqPollingImporterImplPollingImporterImplProperties() {
    this->init();
}

OAIComDayCqPollingImporterImplPollingImporterImplProperties::~OAIComDayCqPollingImporterImplPollingImporterImplProperties() {
    
}

void
OAIComDayCqPollingImporterImplPollingImporterImplProperties::init() {
    m_importer_min_interval_isSet = false;
    m_importer_user_isSet = false;
    m_exclude_paths_isSet = false;
    m_include_paths_isSet = false;
}

void
OAIComDayCqPollingImporterImplPollingImporterImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqPollingImporterImplPollingImporterImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(importer_min_interval, json[QString("importer.min.interval")]);
    
    ::OpenAPI::fromJsonValue(importer_user, json[QString("importer.user")]);
    
    ::OpenAPI::fromJsonValue(exclude_paths, json[QString("exclude.paths")]);
    
    ::OpenAPI::fromJsonValue(include_paths, json[QString("include.paths")]);
    
}

QString
OAIComDayCqPollingImporterImplPollingImporterImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqPollingImporterImplPollingImporterImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(importer_min_interval.isSet()){
        obj.insert(QString("importer.min.interval"), ::OpenAPI::toJsonValue(importer_min_interval));
    }
	if(importer_user.isSet()){
        obj.insert(QString("importer.user"), ::OpenAPI::toJsonValue(importer_user));
    }
	if(exclude_paths.isSet()){
        obj.insert(QString("exclude.paths"), ::OpenAPI::toJsonValue(exclude_paths));
    }
	if(include_paths.isSet()){
        obj.insert(QString("include.paths"), ::OpenAPI::toJsonValue(include_paths));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComDayCqPollingImporterImplPollingImporterImplProperties::getImporterMinInterval() const {
    return importer_min_interval;
}
void
OAIComDayCqPollingImporterImplPollingImporterImplProperties::setImporterMinInterval(const OAIConfigNodePropertyInteger &importer_min_interval) {
    this->importer_min_interval = importer_min_interval;
    this->m_importer_min_interval_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqPollingImporterImplPollingImporterImplProperties::getImporterUser() const {
    return importer_user;
}
void
OAIComDayCqPollingImporterImplPollingImporterImplProperties::setImporterUser(const OAIConfigNodePropertyString &importer_user) {
    this->importer_user = importer_user;
    this->m_importer_user_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqPollingImporterImplPollingImporterImplProperties::getExcludePaths() const {
    return exclude_paths;
}
void
OAIComDayCqPollingImporterImplPollingImporterImplProperties::setExcludePaths(const OAIConfigNodePropertyArray &exclude_paths) {
    this->exclude_paths = exclude_paths;
    this->m_exclude_paths_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqPollingImporterImplPollingImporterImplProperties::getIncludePaths() const {
    return include_paths;
}
void
OAIComDayCqPollingImporterImplPollingImporterImplProperties::setIncludePaths(const OAIConfigNodePropertyArray &include_paths) {
    this->include_paths = include_paths;
    this->m_include_paths_isSet = true;
}


bool
OAIComDayCqPollingImporterImplPollingImporterImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(importer_min_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(importer_user.isSet()){ isObjectUpdated = true; break;}
    
        if(exclude_paths.isSet()){ isObjectUpdated = true; break;}
    
        if(include_paths.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

