/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties()
{
    m_Parameter_whitelistIsSet = false;
    m_Parameter_whitelist_prefixesIsSet = false;
    m_Binary_parameter_whitelistIsSet = false;
    m_Modifier_whitelistIsSet = false;
    m_Operation_whitelistIsSet = false;
    m_Operation_whitelist_prefixesIsSet = false;
    m_Typehint_whitelistIsSet = false;
    m_Resourcetype_whitelistIsSet = false;
}

ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::~ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties()
{
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Parameter_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("parameter.whitelist")] = ModelBase::toJson(m_Parameter_whitelist);
    }
    if(m_Parameter_whitelist_prefixesIsSet)
    {
        val[utility::conversions::to_string_t("parameter.whitelist.prefixes")] = ModelBase::toJson(m_Parameter_whitelist_prefixes);
    }
    if(m_Binary_parameter_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("binary.parameter.whitelist")] = ModelBase::toJson(m_Binary_parameter_whitelist);
    }
    if(m_Modifier_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("modifier.whitelist")] = ModelBase::toJson(m_Modifier_whitelist);
    }
    if(m_Operation_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("operation.whitelist")] = ModelBase::toJson(m_Operation_whitelist);
    }
    if(m_Operation_whitelist_prefixesIsSet)
    {
        val[utility::conversions::to_string_t("operation.whitelist.prefixes")] = ModelBase::toJson(m_Operation_whitelist_prefixes);
    }
    if(m_Typehint_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("typehint.whitelist")] = ModelBase::toJson(m_Typehint_whitelist);
    }
    if(m_Resourcetype_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("resourcetype.whitelist")] = ModelBase::toJson(m_Resourcetype_whitelist);
    }

    return val;
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("parameter.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("parameter.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("parameter.whitelist")]);
            setParameterWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameter.whitelist.prefixes")))
    {
        if(!val[utility::conversions::to_string_t("parameter.whitelist.prefixes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("parameter.whitelist.prefixes")]);
            setParameterWhitelistPrefixes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("binary.parameter.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("binary.parameter.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("binary.parameter.whitelist")]);
            setBinaryParameterWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modifier.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("modifier.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("modifier.whitelist")]);
            setModifierWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("operation.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("operation.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("operation.whitelist")]);
            setOperationWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("operation.whitelist.prefixes")))
    {
        if(!val[utility::conversions::to_string_t("operation.whitelist.prefixes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("operation.whitelist.prefixes")]);
            setOperationWhitelistPrefixes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("typehint.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("typehint.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("typehint.whitelist")]);
            setTypehintWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resourcetype.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("resourcetype.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("resourcetype.whitelist")]);
            setResourcetypeWhitelist( newItem );
        }
    }
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Parameter_whitelistIsSet)
    {
        if (m_Parameter_whitelist.get())
        {
            m_Parameter_whitelist->toMultipart(multipart, utility::conversions::to_string_t("parameter.whitelist."));
        }
    }
    if(m_Parameter_whitelist_prefixesIsSet)
    {
        if (m_Parameter_whitelist_prefixes.get())
        {
            m_Parameter_whitelist_prefixes->toMultipart(multipart, utility::conversions::to_string_t("parameter.whitelist.prefixes."));
        }
    }
    if(m_Binary_parameter_whitelistIsSet)
    {
        if (m_Binary_parameter_whitelist.get())
        {
            m_Binary_parameter_whitelist->toMultipart(multipart, utility::conversions::to_string_t("binary.parameter.whitelist."));
        }
    }
    if(m_Modifier_whitelistIsSet)
    {
        if (m_Modifier_whitelist.get())
        {
            m_Modifier_whitelist->toMultipart(multipart, utility::conversions::to_string_t("modifier.whitelist."));
        }
    }
    if(m_Operation_whitelistIsSet)
    {
        if (m_Operation_whitelist.get())
        {
            m_Operation_whitelist->toMultipart(multipart, utility::conversions::to_string_t("operation.whitelist."));
        }
    }
    if(m_Operation_whitelist_prefixesIsSet)
    {
        if (m_Operation_whitelist_prefixes.get())
        {
            m_Operation_whitelist_prefixes->toMultipart(multipart, utility::conversions::to_string_t("operation.whitelist.prefixes."));
        }
    }
    if(m_Typehint_whitelistIsSet)
    {
        if (m_Typehint_whitelist.get())
        {
            m_Typehint_whitelist->toMultipart(multipart, utility::conversions::to_string_t("typehint.whitelist."));
        }
    }
    if(m_Resourcetype_whitelistIsSet)
    {
        if (m_Resourcetype_whitelist.get())
        {
            m_Resourcetype_whitelist->toMultipart(multipart, utility::conversions::to_string_t("resourcetype.whitelist."));
        }
    }
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("parameter.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("parameter.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("parameter.whitelist."));
            setParameterWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameter.whitelist.prefixes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("parameter.whitelist.prefixes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("parameter.whitelist.prefixes."));
            setParameterWhitelistPrefixes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("binary.parameter.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("binary.parameter.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("binary.parameter.whitelist."));
            setBinaryParameterWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifier.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("modifier.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("modifier.whitelist."));
            setModifierWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("operation.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("operation.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("operation.whitelist."));
            setOperationWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("operation.whitelist.prefixes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("operation.whitelist.prefixes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("operation.whitelist.prefixes."));
            setOperationWhitelistPrefixes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("typehint.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("typehint.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("typehint.whitelist."));
            setTypehintWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resourcetype.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resourcetype.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resourcetype.whitelist."));
            setResourcetypeWhitelist( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::getParameterWhitelist() const
{
    return m_Parameter_whitelist;
}


void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::setParameterWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Parameter_whitelist = value;
    m_Parameter_whitelistIsSet = true;
}
bool ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::parameterWhitelistIsSet() const
{
    return m_Parameter_whitelistIsSet;
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::unsetParameter_whitelist()
{
    m_Parameter_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::getParameterWhitelistPrefixes() const
{
    return m_Parameter_whitelist_prefixes;
}


void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::setParameterWhitelistPrefixes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Parameter_whitelist_prefixes = value;
    m_Parameter_whitelist_prefixesIsSet = true;
}
bool ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::parameterWhitelistPrefixesIsSet() const
{
    return m_Parameter_whitelist_prefixesIsSet;
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::unsetParameter_whitelist_prefixes()
{
    m_Parameter_whitelist_prefixesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::getBinaryParameterWhitelist() const
{
    return m_Binary_parameter_whitelist;
}


void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::setBinaryParameterWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Binary_parameter_whitelist = value;
    m_Binary_parameter_whitelistIsSet = true;
}
bool ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::binaryParameterWhitelistIsSet() const
{
    return m_Binary_parameter_whitelistIsSet;
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::unsetBinary_parameter_whitelist()
{
    m_Binary_parameter_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::getModifierWhitelist() const
{
    return m_Modifier_whitelist;
}


void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::setModifierWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Modifier_whitelist = value;
    m_Modifier_whitelistIsSet = true;
}
bool ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::modifierWhitelistIsSet() const
{
    return m_Modifier_whitelistIsSet;
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::unsetModifier_whitelist()
{
    m_Modifier_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::getOperationWhitelist() const
{
    return m_Operation_whitelist;
}


void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::setOperationWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Operation_whitelist = value;
    m_Operation_whitelistIsSet = true;
}
bool ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::operationWhitelistIsSet() const
{
    return m_Operation_whitelistIsSet;
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::unsetOperation_whitelist()
{
    m_Operation_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::getOperationWhitelistPrefixes() const
{
    return m_Operation_whitelist_prefixes;
}


void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::setOperationWhitelistPrefixes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Operation_whitelist_prefixes = value;
    m_Operation_whitelist_prefixesIsSet = true;
}
bool ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::operationWhitelistPrefixesIsSet() const
{
    return m_Operation_whitelist_prefixesIsSet;
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::unsetOperation_whitelist_prefixes()
{
    m_Operation_whitelist_prefixesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::getTypehintWhitelist() const
{
    return m_Typehint_whitelist;
}


void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::setTypehintWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Typehint_whitelist = value;
    m_Typehint_whitelistIsSet = true;
}
bool ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::typehintWhitelistIsSet() const
{
    return m_Typehint_whitelistIsSet;
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::unsetTypehint_whitelist()
{
    m_Typehint_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::getResourcetypeWhitelist() const
{
    return m_Resourcetype_whitelist;
}


void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::setResourcetypeWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resourcetype_whitelist = value;
    m_Resourcetype_whitelistIsSet = true;
}
bool ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::resourcetypeWhitelistIsSet() const
{
    return m_Resourcetype_whitelistIsSet;
}

void ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties::unsetResourcetype_whitelist()
{
    m_Resourcetype_whitelistIsSet = false;
}

}
}
}
}

