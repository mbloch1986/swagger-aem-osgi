/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties() {
    this->init();
}

OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::~OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties() {
    
}

void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::init() {
    m_tcp_port_isSet = false;
    m_allow_remote_access_isSet = false;
    m_max_render_rgn_pixels_isSet = false;
    m_max_message_size_isSet = false;
    m_random_access_url_timeout_isSet = false;
    m_worker_threads_isSet = false;
}

void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(tcp_port, json[QString("TcpPort")]);
    
    ::OpenAPI::fromJsonValue(allow_remote_access, json[QString("AllowRemoteAccess")]);
    
    ::OpenAPI::fromJsonValue(max_render_rgn_pixels, json[QString("MaxRenderRgnPixels")]);
    
    ::OpenAPI::fromJsonValue(max_message_size, json[QString("MaxMessageSize")]);
    
    ::OpenAPI::fromJsonValue(random_access_url_timeout, json[QString("RandomAccessUrlTimeout")]);
    
    ::OpenAPI::fromJsonValue(worker_threads, json[QString("WorkerThreads")]);
    
}

QString
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::asJsonObject() const {
    QJsonObject obj;
	if(tcp_port.isSet()){
        obj.insert(QString("TcpPort"), ::OpenAPI::toJsonValue(tcp_port));
    }
	if(allow_remote_access.isSet()){
        obj.insert(QString("AllowRemoteAccess"), ::OpenAPI::toJsonValue(allow_remote_access));
    }
	if(max_render_rgn_pixels.isSet()){
        obj.insert(QString("MaxRenderRgnPixels"), ::OpenAPI::toJsonValue(max_render_rgn_pixels));
    }
	if(max_message_size.isSet()){
        obj.insert(QString("MaxMessageSize"), ::OpenAPI::toJsonValue(max_message_size));
    }
	if(random_access_url_timeout.isSet()){
        obj.insert(QString("RandomAccessUrlTimeout"), ::OpenAPI::toJsonValue(random_access_url_timeout));
    }
	if(worker_threads.isSet()){
        obj.insert(QString("WorkerThreads"), ::OpenAPI::toJsonValue(worker_threads));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getTcpPort() const {
    return tcp_port;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setTcpPort(const OAIConfigNodePropertyString &tcp_port) {
    this->tcp_port = tcp_port;
    this->m_tcp_port_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getAllowRemoteAccess() const {
    return allow_remote_access;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setAllowRemoteAccess(const OAIConfigNodePropertyBoolean &allow_remote_access) {
    this->allow_remote_access = allow_remote_access;
    this->m_allow_remote_access_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getMaxRenderRgnPixels() const {
    return max_render_rgn_pixels;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setMaxRenderRgnPixels(const OAIConfigNodePropertyString &max_render_rgn_pixels) {
    this->max_render_rgn_pixels = max_render_rgn_pixels;
    this->m_max_render_rgn_pixels_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getMaxMessageSize() const {
    return max_message_size;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setMaxMessageSize(const OAIConfigNodePropertyString &max_message_size) {
    this->max_message_size = max_message_size;
    this->m_max_message_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getRandomAccessUrlTimeout() const {
    return random_access_url_timeout;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setRandomAccessUrlTimeout(const OAIConfigNodePropertyInteger &random_access_url_timeout) {
    this->random_access_url_timeout = random_access_url_timeout;
    this->m_random_access_url_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getWorkerThreads() const {
    return worker_threads;
}
void
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setWorkerThreads(const OAIConfigNodePropertyInteger &worker_threads) {
    this->worker_threads = worker_threads;
    this->m_worker_threads_isSet = true;
}


bool
OAIComAdobeCqDamS7imagingImplIsImageServerComponentProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(tcp_port.isSet()){ isObjectUpdated = true; break;}
    
        if(allow_remote_access.isSet()){ isObjectUpdated = true; break;}
    
        if(max_render_rgn_pixels.isSet()){ isObjectUpdated = true; break;}
    
        if(max_message_size.isSet()){ isObjectUpdated = true; break;}
    
        if(random_access_url_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(worker_threads.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

