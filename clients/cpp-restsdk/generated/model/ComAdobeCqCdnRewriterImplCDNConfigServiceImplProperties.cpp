/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties()
{
    m_Cdn_config_distribution_domainIsSet = false;
    m_Cdn_config_enable_rewritingIsSet = false;
    m_Cdn_config_path_prefixesIsSet = false;
    m_Cdn_config_cdnttlIsSet = false;
    m_Cdn_config_application_protocolIsSet = false;
}

ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::~ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties()
{
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cdn_config_distribution_domainIsSet)
    {
        val[utility::conversions::to_string_t("cdn.config.distribution.domain")] = ModelBase::toJson(m_Cdn_config_distribution_domain);
    }
    if(m_Cdn_config_enable_rewritingIsSet)
    {
        val[utility::conversions::to_string_t("cdn.config.enable.rewriting")] = ModelBase::toJson(m_Cdn_config_enable_rewriting);
    }
    if(m_Cdn_config_path_prefixesIsSet)
    {
        val[utility::conversions::to_string_t("cdn.config.path.prefixes")] = ModelBase::toJson(m_Cdn_config_path_prefixes);
    }
    if(m_Cdn_config_cdnttlIsSet)
    {
        val[utility::conversions::to_string_t("cdn.config.cdnttl")] = ModelBase::toJson(m_Cdn_config_cdnttl);
    }
    if(m_Cdn_config_application_protocolIsSet)
    {
        val[utility::conversions::to_string_t("cdn.config.application.protocol")] = ModelBase::toJson(m_Cdn_config_application_protocol);
    }

    return val;
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cdn.config.distribution.domain")))
    {
        if(!val[utility::conversions::to_string_t("cdn.config.distribution.domain")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cdn.config.distribution.domain")]);
            setCdnConfigDistributionDomain( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cdn.config.enable.rewriting")))
    {
        if(!val[utility::conversions::to_string_t("cdn.config.enable.rewriting")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cdn.config.enable.rewriting")]);
            setCdnConfigEnableRewriting( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cdn.config.path.prefixes")))
    {
        if(!val[utility::conversions::to_string_t("cdn.config.path.prefixes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cdn.config.path.prefixes")]);
            setCdnConfigPathPrefixes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cdn.config.cdnttl")))
    {
        if(!val[utility::conversions::to_string_t("cdn.config.cdnttl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cdn.config.cdnttl")]);
            setCdnConfigCdnttl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cdn.config.application.protocol")))
    {
        if(!val[utility::conversions::to_string_t("cdn.config.application.protocol")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cdn.config.application.protocol")]);
            setCdnConfigApplicationProtocol( newItem );
        }
    }
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cdn_config_distribution_domainIsSet)
    {
        if (m_Cdn_config_distribution_domain.get())
        {
            m_Cdn_config_distribution_domain->toMultipart(multipart, utility::conversions::to_string_t("cdn.config.distribution.domain."));
        }
    }
    if(m_Cdn_config_enable_rewritingIsSet)
    {
        if (m_Cdn_config_enable_rewriting.get())
        {
            m_Cdn_config_enable_rewriting->toMultipart(multipart, utility::conversions::to_string_t("cdn.config.enable.rewriting."));
        }
    }
    if(m_Cdn_config_path_prefixesIsSet)
    {
        if (m_Cdn_config_path_prefixes.get())
        {
            m_Cdn_config_path_prefixes->toMultipart(multipart, utility::conversions::to_string_t("cdn.config.path.prefixes."));
        }
    }
    if(m_Cdn_config_cdnttlIsSet)
    {
        if (m_Cdn_config_cdnttl.get())
        {
            m_Cdn_config_cdnttl->toMultipart(multipart, utility::conversions::to_string_t("cdn.config.cdnttl."));
        }
    }
    if(m_Cdn_config_application_protocolIsSet)
    {
        if (m_Cdn_config_application_protocol.get())
        {
            m_Cdn_config_application_protocol->toMultipart(multipart, utility::conversions::to_string_t("cdn.config.application.protocol."));
        }
    }
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cdn.config.distribution.domain")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cdn.config.distribution.domain")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cdn.config.distribution.domain."));
            setCdnConfigDistributionDomain( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cdn.config.enable.rewriting")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cdn.config.enable.rewriting")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cdn.config.enable.rewriting."));
            setCdnConfigEnableRewriting( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cdn.config.path.prefixes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cdn.config.path.prefixes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cdn.config.path.prefixes."));
            setCdnConfigPathPrefixes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cdn.config.cdnttl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cdn.config.cdnttl")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cdn.config.cdnttl."));
            setCdnConfigCdnttl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cdn.config.application.protocol")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cdn.config.application.protocol")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cdn.config.application.protocol."));
            setCdnConfigApplicationProtocol( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigDistributionDomain() const
{
    return m_Cdn_config_distribution_domain;
}


void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigDistributionDomain(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cdn_config_distribution_domain = value;
    m_Cdn_config_distribution_domainIsSet = true;
}
bool ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::cdnConfigDistributionDomainIsSet() const
{
    return m_Cdn_config_distribution_domainIsSet;
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::unsetCdn_config_distribution_domain()
{
    m_Cdn_config_distribution_domainIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigEnableRewriting() const
{
    return m_Cdn_config_enable_rewriting;
}


void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigEnableRewriting(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cdn_config_enable_rewriting = value;
    m_Cdn_config_enable_rewritingIsSet = true;
}
bool ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::cdnConfigEnableRewritingIsSet() const
{
    return m_Cdn_config_enable_rewritingIsSet;
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::unsetCdn_config_enable_rewriting()
{
    m_Cdn_config_enable_rewritingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigPathPrefixes() const
{
    return m_Cdn_config_path_prefixes;
}


void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigPathPrefixes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cdn_config_path_prefixes = value;
    m_Cdn_config_path_prefixesIsSet = true;
}
bool ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::cdnConfigPathPrefixesIsSet() const
{
    return m_Cdn_config_path_prefixesIsSet;
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::unsetCdn_config_path_prefixes()
{
    m_Cdn_config_path_prefixesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigCdnttl() const
{
    return m_Cdn_config_cdnttl;
}


void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigCdnttl(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cdn_config_cdnttl = value;
    m_Cdn_config_cdnttlIsSet = true;
}
bool ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::cdnConfigCdnttlIsSet() const
{
    return m_Cdn_config_cdnttlIsSet;
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::unsetCdn_config_cdnttl()
{
    m_Cdn_config_cdnttlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigApplicationProtocol() const
{
    return m_Cdn_config_application_protocol;
}


void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigApplicationProtocol(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cdn_config_application_protocol = value;
    m_Cdn_config_application_protocolIsSet = true;
}
bool ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::cdnConfigApplicationProtocolIsSet() const
{
    return m_Cdn_config_application_protocolIsSet;
}

void ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::unsetCdn_config_application_protocol()
{
    m_Cdn_config_application_protocolIsSet = false;
}

}
}
}
}

