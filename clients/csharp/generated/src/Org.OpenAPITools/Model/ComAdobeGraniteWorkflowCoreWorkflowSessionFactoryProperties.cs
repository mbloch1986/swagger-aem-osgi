/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties :  IEquatable<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties" /> class.
        /// </summary>
        /// <param name="graniteWorkflowinboxSortPropertyName">graniteWorkflowinboxSortPropertyName.</param>
        /// <param name="graniteWorkflowinboxSortOrder">graniteWorkflowinboxSortOrder.</param>
        /// <param name="cqWorkflowJobRetry">cqWorkflowJobRetry.</param>
        /// <param name="cqWorkflowSuperuser">cqWorkflowSuperuser.</param>
        /// <param name="graniteWorkflowInboxQuerySize">graniteWorkflowInboxQuerySize.</param>
        /// <param name="graniteWorkflowAdminUserGroupFilter">graniteWorkflowAdminUserGroupFilter.</param>
        /// <param name="graniteWorkflowEnforceWorkitemAssigneePermissions">graniteWorkflowEnforceWorkitemAssigneePermissions.</param>
        /// <param name="graniteWorkflowEnforceWorkflowInitiatorPermissions">graniteWorkflowEnforceWorkflowInitiatorPermissions.</param>
        /// <param name="graniteWorkflowInjectTenantIdInJobTopics">graniteWorkflowInjectTenantIdInJobTopics.</param>
        /// <param name="graniteWorkflowMaxPurgeSaveThreshold">graniteWorkflowMaxPurgeSaveThreshold.</param>
        /// <param name="graniteWorkflowMaxPurgeQueryCount">graniteWorkflowMaxPurgeQueryCount.</param>
        public ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties(ConfigNodePropertyDropDown graniteWorkflowinboxSortPropertyName = default(ConfigNodePropertyDropDown), ConfigNodePropertyString graniteWorkflowinboxSortOrder = default(ConfigNodePropertyString), ConfigNodePropertyInteger cqWorkflowJobRetry = default(ConfigNodePropertyInteger), ConfigNodePropertyArray cqWorkflowSuperuser = default(ConfigNodePropertyArray), ConfigNodePropertyInteger graniteWorkflowInboxQuerySize = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean graniteWorkflowAdminUserGroupFilter = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean graniteWorkflowEnforceWorkitemAssigneePermissions = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean graniteWorkflowEnforceWorkflowInitiatorPermissions = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean graniteWorkflowInjectTenantIdInJobTopics = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger graniteWorkflowMaxPurgeSaveThreshold = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger graniteWorkflowMaxPurgeQueryCount = default(ConfigNodePropertyInteger))
        {
            this.GraniteWorkflowinboxSortPropertyName = graniteWorkflowinboxSortPropertyName;
            this.GraniteWorkflowinboxSortOrder = graniteWorkflowinboxSortOrder;
            this.CqWorkflowJobRetry = cqWorkflowJobRetry;
            this.CqWorkflowSuperuser = cqWorkflowSuperuser;
            this.GraniteWorkflowInboxQuerySize = graniteWorkflowInboxQuerySize;
            this.GraniteWorkflowAdminUserGroupFilter = graniteWorkflowAdminUserGroupFilter;
            this.GraniteWorkflowEnforceWorkitemAssigneePermissions = graniteWorkflowEnforceWorkitemAssigneePermissions;
            this.GraniteWorkflowEnforceWorkflowInitiatorPermissions = graniteWorkflowEnforceWorkflowInitiatorPermissions;
            this.GraniteWorkflowInjectTenantIdInJobTopics = graniteWorkflowInjectTenantIdInJobTopics;
            this.GraniteWorkflowMaxPurgeSaveThreshold = graniteWorkflowMaxPurgeSaveThreshold;
            this.GraniteWorkflowMaxPurgeQueryCount = graniteWorkflowMaxPurgeQueryCount;
        }
        
        /// <summary>
        /// Gets or Sets GraniteWorkflowinboxSortPropertyName
        /// </summary>
        [DataMember(Name="granite.workflowinbox.sort.propertyName", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown GraniteWorkflowinboxSortPropertyName { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowinboxSortOrder
        /// </summary>
        [DataMember(Name="granite.workflowinbox.sort.order", EmitDefaultValue=false)]
        public ConfigNodePropertyString GraniteWorkflowinboxSortOrder { get; set; }

        /// <summary>
        /// Gets or Sets CqWorkflowJobRetry
        /// </summary>
        [DataMember(Name="cq.workflow.job.retry", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqWorkflowJobRetry { get; set; }

        /// <summary>
        /// Gets or Sets CqWorkflowSuperuser
        /// </summary>
        [DataMember(Name="cq.workflow.superuser", EmitDefaultValue=false)]
        public ConfigNodePropertyArray CqWorkflowSuperuser { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowInboxQuerySize
        /// </summary>
        [DataMember(Name="granite.workflow.inboxQuerySize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger GraniteWorkflowInboxQuerySize { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowAdminUserGroupFilter
        /// </summary>
        [DataMember(Name="granite.workflow.adminUserGroupFilter", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean GraniteWorkflowAdminUserGroupFilter { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowEnforceWorkitemAssigneePermissions
        /// </summary>
        [DataMember(Name="granite.workflow.enforceWorkitemAssigneePermissions", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean GraniteWorkflowEnforceWorkitemAssigneePermissions { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowEnforceWorkflowInitiatorPermissions
        /// </summary>
        [DataMember(Name="granite.workflow.enforceWorkflowInitiatorPermissions", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean GraniteWorkflowEnforceWorkflowInitiatorPermissions { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowInjectTenantIdInJobTopics
        /// </summary>
        [DataMember(Name="granite.workflow.injectTenantIdInJobTopics", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean GraniteWorkflowInjectTenantIdInJobTopics { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowMaxPurgeSaveThreshold
        /// </summary>
        [DataMember(Name="granite.workflow.maxPurgeSaveThreshold", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger GraniteWorkflowMaxPurgeSaveThreshold { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowMaxPurgeQueryCount
        /// </summary>
        [DataMember(Name="granite.workflow.maxPurgeQueryCount", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger GraniteWorkflowMaxPurgeQueryCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {\n");
            sb.Append("  GraniteWorkflowinboxSortPropertyName: ").Append(GraniteWorkflowinboxSortPropertyName).Append("\n");
            sb.Append("  GraniteWorkflowinboxSortOrder: ").Append(GraniteWorkflowinboxSortOrder).Append("\n");
            sb.Append("  CqWorkflowJobRetry: ").Append(CqWorkflowJobRetry).Append("\n");
            sb.Append("  CqWorkflowSuperuser: ").Append(CqWorkflowSuperuser).Append("\n");
            sb.Append("  GraniteWorkflowInboxQuerySize: ").Append(GraniteWorkflowInboxQuerySize).Append("\n");
            sb.Append("  GraniteWorkflowAdminUserGroupFilter: ").Append(GraniteWorkflowAdminUserGroupFilter).Append("\n");
            sb.Append("  GraniteWorkflowEnforceWorkitemAssigneePermissions: ").Append(GraniteWorkflowEnforceWorkitemAssigneePermissions).Append("\n");
            sb.Append("  GraniteWorkflowEnforceWorkflowInitiatorPermissions: ").Append(GraniteWorkflowEnforceWorkflowInitiatorPermissions).Append("\n");
            sb.Append("  GraniteWorkflowInjectTenantIdInJobTopics: ").Append(GraniteWorkflowInjectTenantIdInJobTopics).Append("\n");
            sb.Append("  GraniteWorkflowMaxPurgeSaveThreshold: ").Append(GraniteWorkflowMaxPurgeSaveThreshold).Append("\n");
            sb.Append("  GraniteWorkflowMaxPurgeQueryCount: ").Append(GraniteWorkflowMaxPurgeQueryCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GraniteWorkflowinboxSortPropertyName == input.GraniteWorkflowinboxSortPropertyName ||
                    (this.GraniteWorkflowinboxSortPropertyName != null &&
                    this.GraniteWorkflowinboxSortPropertyName.Equals(input.GraniteWorkflowinboxSortPropertyName))
                ) && 
                (
                    this.GraniteWorkflowinboxSortOrder == input.GraniteWorkflowinboxSortOrder ||
                    (this.GraniteWorkflowinboxSortOrder != null &&
                    this.GraniteWorkflowinboxSortOrder.Equals(input.GraniteWorkflowinboxSortOrder))
                ) && 
                (
                    this.CqWorkflowJobRetry == input.CqWorkflowJobRetry ||
                    (this.CqWorkflowJobRetry != null &&
                    this.CqWorkflowJobRetry.Equals(input.CqWorkflowJobRetry))
                ) && 
                (
                    this.CqWorkflowSuperuser == input.CqWorkflowSuperuser ||
                    (this.CqWorkflowSuperuser != null &&
                    this.CqWorkflowSuperuser.Equals(input.CqWorkflowSuperuser))
                ) && 
                (
                    this.GraniteWorkflowInboxQuerySize == input.GraniteWorkflowInboxQuerySize ||
                    (this.GraniteWorkflowInboxQuerySize != null &&
                    this.GraniteWorkflowInboxQuerySize.Equals(input.GraniteWorkflowInboxQuerySize))
                ) && 
                (
                    this.GraniteWorkflowAdminUserGroupFilter == input.GraniteWorkflowAdminUserGroupFilter ||
                    (this.GraniteWorkflowAdminUserGroupFilter != null &&
                    this.GraniteWorkflowAdminUserGroupFilter.Equals(input.GraniteWorkflowAdminUserGroupFilter))
                ) && 
                (
                    this.GraniteWorkflowEnforceWorkitemAssigneePermissions == input.GraniteWorkflowEnforceWorkitemAssigneePermissions ||
                    (this.GraniteWorkflowEnforceWorkitemAssigneePermissions != null &&
                    this.GraniteWorkflowEnforceWorkitemAssigneePermissions.Equals(input.GraniteWorkflowEnforceWorkitemAssigneePermissions))
                ) && 
                (
                    this.GraniteWorkflowEnforceWorkflowInitiatorPermissions == input.GraniteWorkflowEnforceWorkflowInitiatorPermissions ||
                    (this.GraniteWorkflowEnforceWorkflowInitiatorPermissions != null &&
                    this.GraniteWorkflowEnforceWorkflowInitiatorPermissions.Equals(input.GraniteWorkflowEnforceWorkflowInitiatorPermissions))
                ) && 
                (
                    this.GraniteWorkflowInjectTenantIdInJobTopics == input.GraniteWorkflowInjectTenantIdInJobTopics ||
                    (this.GraniteWorkflowInjectTenantIdInJobTopics != null &&
                    this.GraniteWorkflowInjectTenantIdInJobTopics.Equals(input.GraniteWorkflowInjectTenantIdInJobTopics))
                ) && 
                (
                    this.GraniteWorkflowMaxPurgeSaveThreshold == input.GraniteWorkflowMaxPurgeSaveThreshold ||
                    (this.GraniteWorkflowMaxPurgeSaveThreshold != null &&
                    this.GraniteWorkflowMaxPurgeSaveThreshold.Equals(input.GraniteWorkflowMaxPurgeSaveThreshold))
                ) && 
                (
                    this.GraniteWorkflowMaxPurgeQueryCount == input.GraniteWorkflowMaxPurgeQueryCount ||
                    (this.GraniteWorkflowMaxPurgeQueryCount != null &&
                    this.GraniteWorkflowMaxPurgeQueryCount.Equals(input.GraniteWorkflowMaxPurgeQueryCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GraniteWorkflowinboxSortPropertyName != null)
                    hashCode = hashCode * 59 + this.GraniteWorkflowinboxSortPropertyName.GetHashCode();
                if (this.GraniteWorkflowinboxSortOrder != null)
                    hashCode = hashCode * 59 + this.GraniteWorkflowinboxSortOrder.GetHashCode();
                if (this.CqWorkflowJobRetry != null)
                    hashCode = hashCode * 59 + this.CqWorkflowJobRetry.GetHashCode();
                if (this.CqWorkflowSuperuser != null)
                    hashCode = hashCode * 59 + this.CqWorkflowSuperuser.GetHashCode();
                if (this.GraniteWorkflowInboxQuerySize != null)
                    hashCode = hashCode * 59 + this.GraniteWorkflowInboxQuerySize.GetHashCode();
                if (this.GraniteWorkflowAdminUserGroupFilter != null)
                    hashCode = hashCode * 59 + this.GraniteWorkflowAdminUserGroupFilter.GetHashCode();
                if (this.GraniteWorkflowEnforceWorkitemAssigneePermissions != null)
                    hashCode = hashCode * 59 + this.GraniteWorkflowEnforceWorkitemAssigneePermissions.GetHashCode();
                if (this.GraniteWorkflowEnforceWorkflowInitiatorPermissions != null)
                    hashCode = hashCode * 59 + this.GraniteWorkflowEnforceWorkflowInitiatorPermissions.GetHashCode();
                if (this.GraniteWorkflowInjectTenantIdInJobTopics != null)
                    hashCode = hashCode * 59 + this.GraniteWorkflowInjectTenantIdInJobTopics.GetHashCode();
                if (this.GraniteWorkflowMaxPurgeSaveThreshold != null)
                    hashCode = hashCode * 59 + this.GraniteWorkflowMaxPurgeSaveThreshold.GetHashCode();
                if (this.GraniteWorkflowMaxPurgeQueryCount != null)
                    hashCode = hashCode * 59 + this.GraniteWorkflowMaxPurgeQueryCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
