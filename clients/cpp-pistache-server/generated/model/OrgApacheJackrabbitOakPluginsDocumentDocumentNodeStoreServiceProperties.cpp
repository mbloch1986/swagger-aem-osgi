/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties()
{
    m_MongouriIsSet = false;
    m_DbIsSet = false;
    m_SocketKeepAliveIsSet = false;
    m_CacheIsSet = false;
    m_NodeCachePercentageIsSet = false;
    m_PrevDocCachePercentageIsSet = false;
    m_ChildrenCachePercentageIsSet = false;
    m_DiffCachePercentageIsSet = false;
    m_CacheSegmentCountIsSet = false;
    m_CacheStackMoveDistanceIsSet = false;
    m_BlobCacheSizeIsSet = false;
    m_PersistentCacheIsSet = false;
    m_JournalCacheIsSet = false;
    m_CustomBlobStoreIsSet = false;
    m_JournalGCIntervalIsSet = false;
    m_JournalGCMaxAgeIsSet = false;
    m_PrefetchExternalChangesIsSet = false;
    m_RoleIsSet = false;
    m_VersionGcMaxAgeInSecsIsSet = false;
    m_VersionGCExpressionIsSet = false;
    m_VersionGCTimeLimitInSecsIsSet = false;
    m_BlobGcMaxAgeInSecsIsSet = false;
    m_BlobTrackSnapshotIntervalInSecsIsSet = false;
    m_Repository_homeIsSet = false;
    m_MaxReplicationLagInSecsIsSet = false;
    m_DocumentStoreTypeIsSet = false;
    m_BundlingDisabledIsSet = false;
    m_UpdateLimitIsSet = false;
    m_PersistentCacheIncludesIsSet = false;
    m_LeaseCheckModeIsSet = false;
    
}

OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::~OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties()
{
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_MongouriIsSet)
    {
        val["mongouri"] = ModelBase::toJson(m_Mongouri);
    }
    if(m_DbIsSet)
    {
        val["db"] = ModelBase::toJson(m_Db);
    }
    if(m_SocketKeepAliveIsSet)
    {
        val["socketKeepAlive"] = ModelBase::toJson(m_SocketKeepAlive);
    }
    if(m_CacheIsSet)
    {
        val["cache"] = ModelBase::toJson(m_Cache);
    }
    if(m_NodeCachePercentageIsSet)
    {
        val["nodeCachePercentage"] = ModelBase::toJson(m_NodeCachePercentage);
    }
    if(m_PrevDocCachePercentageIsSet)
    {
        val["prevDocCachePercentage"] = ModelBase::toJson(m_PrevDocCachePercentage);
    }
    if(m_ChildrenCachePercentageIsSet)
    {
        val["childrenCachePercentage"] = ModelBase::toJson(m_ChildrenCachePercentage);
    }
    if(m_DiffCachePercentageIsSet)
    {
        val["diffCachePercentage"] = ModelBase::toJson(m_DiffCachePercentage);
    }
    if(m_CacheSegmentCountIsSet)
    {
        val["cacheSegmentCount"] = ModelBase::toJson(m_CacheSegmentCount);
    }
    if(m_CacheStackMoveDistanceIsSet)
    {
        val["cacheStackMoveDistance"] = ModelBase::toJson(m_CacheStackMoveDistance);
    }
    if(m_BlobCacheSizeIsSet)
    {
        val["blobCacheSize"] = ModelBase::toJson(m_BlobCacheSize);
    }
    if(m_PersistentCacheIsSet)
    {
        val["persistentCache"] = ModelBase::toJson(m_PersistentCache);
    }
    if(m_JournalCacheIsSet)
    {
        val["journalCache"] = ModelBase::toJson(m_JournalCache);
    }
    if(m_CustomBlobStoreIsSet)
    {
        val["customBlobStore"] = ModelBase::toJson(m_CustomBlobStore);
    }
    if(m_JournalGCIntervalIsSet)
    {
        val["journalGCInterval"] = ModelBase::toJson(m_JournalGCInterval);
    }
    if(m_JournalGCMaxAgeIsSet)
    {
        val["journalGCMaxAge"] = ModelBase::toJson(m_JournalGCMaxAge);
    }
    if(m_PrefetchExternalChangesIsSet)
    {
        val["prefetchExternalChanges"] = ModelBase::toJson(m_PrefetchExternalChanges);
    }
    if(m_RoleIsSet)
    {
        val["role"] = ModelBase::toJson(m_Role);
    }
    if(m_VersionGcMaxAgeInSecsIsSet)
    {
        val["versionGcMaxAgeInSecs"] = ModelBase::toJson(m_VersionGcMaxAgeInSecs);
    }
    if(m_VersionGCExpressionIsSet)
    {
        val["versionGCExpression"] = ModelBase::toJson(m_VersionGCExpression);
    }
    if(m_VersionGCTimeLimitInSecsIsSet)
    {
        val["versionGCTimeLimitInSecs"] = ModelBase::toJson(m_VersionGCTimeLimitInSecs);
    }
    if(m_BlobGcMaxAgeInSecsIsSet)
    {
        val["blobGcMaxAgeInSecs"] = ModelBase::toJson(m_BlobGcMaxAgeInSecs);
    }
    if(m_BlobTrackSnapshotIntervalInSecsIsSet)
    {
        val["blobTrackSnapshotIntervalInSecs"] = ModelBase::toJson(m_BlobTrackSnapshotIntervalInSecs);
    }
    if(m_Repository_homeIsSet)
    {
        val["repository.home"] = ModelBase::toJson(m_Repository_home);
    }
    if(m_MaxReplicationLagInSecsIsSet)
    {
        val["maxReplicationLagInSecs"] = ModelBase::toJson(m_MaxReplicationLagInSecs);
    }
    if(m_DocumentStoreTypeIsSet)
    {
        val["documentStoreType"] = ModelBase::toJson(m_DocumentStoreType);
    }
    if(m_BundlingDisabledIsSet)
    {
        val["bundlingDisabled"] = ModelBase::toJson(m_BundlingDisabled);
    }
    if(m_UpdateLimitIsSet)
    {
        val["updateLimit"] = ModelBase::toJson(m_UpdateLimit);
    }
    if(m_PersistentCacheIncludesIsSet)
    {
        val["persistentCacheIncludes"] = ModelBase::toJson(m_PersistentCacheIncludes);
    }
    if(m_LeaseCheckModeIsSet)
    {
        val["leaseCheckMode"] = ModelBase::toJson(m_LeaseCheckMode);
    }
    

    return val;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::fromJson(nlohmann::json& val)
{
    if(val.find("mongouri") != val.end())
    {
        if(!val["mongouri"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["mongouri"]);
            setMongouri( newItem );
        }
        
    }
    if(val.find("db") != val.end())
    {
        if(!val["db"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["db"]);
            setDb( newItem );
        }
        
    }
    if(val.find("socketKeepAlive") != val.end())
    {
        if(!val["socketKeepAlive"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["socketKeepAlive"]);
            setSocketKeepAlive( newItem );
        }
        
    }
    if(val.find("cache") != val.end())
    {
        if(!val["cache"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cache"]);
            setCache( newItem );
        }
        
    }
    if(val.find("nodeCachePercentage") != val.end())
    {
        if(!val["nodeCachePercentage"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["nodeCachePercentage"]);
            setNodeCachePercentage( newItem );
        }
        
    }
    if(val.find("prevDocCachePercentage") != val.end())
    {
        if(!val["prevDocCachePercentage"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["prevDocCachePercentage"]);
            setPrevDocCachePercentage( newItem );
        }
        
    }
    if(val.find("childrenCachePercentage") != val.end())
    {
        if(!val["childrenCachePercentage"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["childrenCachePercentage"]);
            setChildrenCachePercentage( newItem );
        }
        
    }
    if(val.find("diffCachePercentage") != val.end())
    {
        if(!val["diffCachePercentage"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["diffCachePercentage"]);
            setDiffCachePercentage( newItem );
        }
        
    }
    if(val.find("cacheSegmentCount") != val.end())
    {
        if(!val["cacheSegmentCount"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cacheSegmentCount"]);
            setCacheSegmentCount( newItem );
        }
        
    }
    if(val.find("cacheStackMoveDistance") != val.end())
    {
        if(!val["cacheStackMoveDistance"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cacheStackMoveDistance"]);
            setCacheStackMoveDistance( newItem );
        }
        
    }
    if(val.find("blobCacheSize") != val.end())
    {
        if(!val["blobCacheSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["blobCacheSize"]);
            setBlobCacheSize( newItem );
        }
        
    }
    if(val.find("persistentCache") != val.end())
    {
        if(!val["persistentCache"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["persistentCache"]);
            setPersistentCache( newItem );
        }
        
    }
    if(val.find("journalCache") != val.end())
    {
        if(!val["journalCache"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["journalCache"]);
            setJournalCache( newItem );
        }
        
    }
    if(val.find("customBlobStore") != val.end())
    {
        if(!val["customBlobStore"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["customBlobStore"]);
            setCustomBlobStore( newItem );
        }
        
    }
    if(val.find("journalGCInterval") != val.end())
    {
        if(!val["journalGCInterval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["journalGCInterval"]);
            setJournalGCInterval( newItem );
        }
        
    }
    if(val.find("journalGCMaxAge") != val.end())
    {
        if(!val["journalGCMaxAge"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["journalGCMaxAge"]);
            setJournalGCMaxAge( newItem );
        }
        
    }
    if(val.find("prefetchExternalChanges") != val.end())
    {
        if(!val["prefetchExternalChanges"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["prefetchExternalChanges"]);
            setPrefetchExternalChanges( newItem );
        }
        
    }
    if(val.find("role") != val.end())
    {
        if(!val["role"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["role"]);
            setRole( newItem );
        }
        
    }
    if(val.find("versionGcMaxAgeInSecs") != val.end())
    {
        if(!val["versionGcMaxAgeInSecs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["versionGcMaxAgeInSecs"]);
            setVersionGcMaxAgeInSecs( newItem );
        }
        
    }
    if(val.find("versionGCExpression") != val.end())
    {
        if(!val["versionGCExpression"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["versionGCExpression"]);
            setVersionGCExpression( newItem );
        }
        
    }
    if(val.find("versionGCTimeLimitInSecs") != val.end())
    {
        if(!val["versionGCTimeLimitInSecs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["versionGCTimeLimitInSecs"]);
            setVersionGCTimeLimitInSecs( newItem );
        }
        
    }
    if(val.find("blobGcMaxAgeInSecs") != val.end())
    {
        if(!val["blobGcMaxAgeInSecs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["blobGcMaxAgeInSecs"]);
            setBlobGcMaxAgeInSecs( newItem );
        }
        
    }
    if(val.find("blobTrackSnapshotIntervalInSecs") != val.end())
    {
        if(!val["blobTrackSnapshotIntervalInSecs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["blobTrackSnapshotIntervalInSecs"]);
            setBlobTrackSnapshotIntervalInSecs( newItem );
        }
        
    }
    if(val.find("repository.home") != val.end())
    {
        if(!val["repository.home"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["repository.home"]);
            setRepositoryHome( newItem );
        }
        
    }
    if(val.find("maxReplicationLagInSecs") != val.end())
    {
        if(!val["maxReplicationLagInSecs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxReplicationLagInSecs"]);
            setMaxReplicationLagInSecs( newItem );
        }
        
    }
    if(val.find("documentStoreType") != val.end())
    {
        if(!val["documentStoreType"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["documentStoreType"]);
            setDocumentStoreType( newItem );
        }
        
    }
    if(val.find("bundlingDisabled") != val.end())
    {
        if(!val["bundlingDisabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["bundlingDisabled"]);
            setBundlingDisabled( newItem );
        }
        
    }
    if(val.find("updateLimit") != val.end())
    {
        if(!val["updateLimit"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["updateLimit"]);
            setUpdateLimit( newItem );
        }
        
    }
    if(val.find("persistentCacheIncludes") != val.end())
    {
        if(!val["persistentCacheIncludes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["persistentCacheIncludes"]);
            setPersistentCacheIncludes( newItem );
        }
        
    }
    if(val.find("leaseCheckMode") != val.end())
    {
        if(!val["leaseCheckMode"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["leaseCheckMode"]);
            setLeaseCheckMode( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getMongouri() const
{
    return m_Mongouri;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setMongouri(ConfigNodePropertyString const& value)
{
    m_Mongouri = value;
    m_MongouriIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::mongouriIsSet() const
{
    return m_MongouriIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetMongouri()
{
    m_MongouriIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDb() const
{
    return m_Db;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDb(ConfigNodePropertyString const& value)
{
    m_Db = value;
    m_DbIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::dbIsSet() const
{
    return m_DbIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetDb()
{
    m_DbIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getSocketKeepAlive() const
{
    return m_SocketKeepAlive;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setSocketKeepAlive(ConfigNodePropertyBoolean const& value)
{
    m_SocketKeepAlive = value;
    m_SocketKeepAliveIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::socketKeepAliveIsSet() const
{
    return m_SocketKeepAliveIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetSocketKeepAlive()
{
    m_SocketKeepAliveIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCache() const
{
    return m_Cache;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCache(ConfigNodePropertyInteger const& value)
{
    m_Cache = value;
    m_CacheIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::cacheIsSet() const
{
    return m_CacheIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetCache()
{
    m_CacheIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getNodeCachePercentage() const
{
    return m_NodeCachePercentage;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setNodeCachePercentage(ConfigNodePropertyInteger const& value)
{
    m_NodeCachePercentage = value;
    m_NodeCachePercentageIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::nodeCachePercentageIsSet() const
{
    return m_NodeCachePercentageIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetNodeCachePercentage()
{
    m_NodeCachePercentageIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPrevDocCachePercentage() const
{
    return m_PrevDocCachePercentage;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPrevDocCachePercentage(ConfigNodePropertyInteger const& value)
{
    m_PrevDocCachePercentage = value;
    m_PrevDocCachePercentageIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::prevDocCachePercentageIsSet() const
{
    return m_PrevDocCachePercentageIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetPrevDocCachePercentage()
{
    m_PrevDocCachePercentageIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getChildrenCachePercentage() const
{
    return m_ChildrenCachePercentage;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setChildrenCachePercentage(ConfigNodePropertyInteger const& value)
{
    m_ChildrenCachePercentage = value;
    m_ChildrenCachePercentageIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::childrenCachePercentageIsSet() const
{
    return m_ChildrenCachePercentageIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetChildrenCachePercentage()
{
    m_ChildrenCachePercentageIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDiffCachePercentage() const
{
    return m_DiffCachePercentage;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDiffCachePercentage(ConfigNodePropertyInteger const& value)
{
    m_DiffCachePercentage = value;
    m_DiffCachePercentageIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::diffCachePercentageIsSet() const
{
    return m_DiffCachePercentageIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetDiffCachePercentage()
{
    m_DiffCachePercentageIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCacheSegmentCount() const
{
    return m_CacheSegmentCount;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCacheSegmentCount(ConfigNodePropertyInteger const& value)
{
    m_CacheSegmentCount = value;
    m_CacheSegmentCountIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::cacheSegmentCountIsSet() const
{
    return m_CacheSegmentCountIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetCacheSegmentCount()
{
    m_CacheSegmentCountIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCacheStackMoveDistance() const
{
    return m_CacheStackMoveDistance;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCacheStackMoveDistance(ConfigNodePropertyInteger const& value)
{
    m_CacheStackMoveDistance = value;
    m_CacheStackMoveDistanceIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::cacheStackMoveDistanceIsSet() const
{
    return m_CacheStackMoveDistanceIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetCacheStackMoveDistance()
{
    m_CacheStackMoveDistanceIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobCacheSize() const
{
    return m_BlobCacheSize;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobCacheSize(ConfigNodePropertyInteger const& value)
{
    m_BlobCacheSize = value;
    m_BlobCacheSizeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::blobCacheSizeIsSet() const
{
    return m_BlobCacheSizeIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetBlobCacheSize()
{
    m_BlobCacheSizeIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPersistentCache() const
{
    return m_PersistentCache;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPersistentCache(ConfigNodePropertyString const& value)
{
    m_PersistentCache = value;
    m_PersistentCacheIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::persistentCacheIsSet() const
{
    return m_PersistentCacheIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetPersistentCache()
{
    m_PersistentCacheIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalCache() const
{
    return m_JournalCache;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalCache(ConfigNodePropertyString const& value)
{
    m_JournalCache = value;
    m_JournalCacheIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::journalCacheIsSet() const
{
    return m_JournalCacheIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetJournalCache()
{
    m_JournalCacheIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCustomBlobStore() const
{
    return m_CustomBlobStore;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCustomBlobStore(ConfigNodePropertyBoolean const& value)
{
    m_CustomBlobStore = value;
    m_CustomBlobStoreIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::customBlobStoreIsSet() const
{
    return m_CustomBlobStoreIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetCustomBlobStore()
{
    m_CustomBlobStoreIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalGCInterval() const
{
    return m_JournalGCInterval;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalGCInterval(ConfigNodePropertyInteger const& value)
{
    m_JournalGCInterval = value;
    m_JournalGCIntervalIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::journalGCIntervalIsSet() const
{
    return m_JournalGCIntervalIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetJournalGCInterval()
{
    m_JournalGCIntervalIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalGCMaxAge() const
{
    return m_JournalGCMaxAge;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalGCMaxAge(ConfigNodePropertyInteger const& value)
{
    m_JournalGCMaxAge = value;
    m_JournalGCMaxAgeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::journalGCMaxAgeIsSet() const
{
    return m_JournalGCMaxAgeIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetJournalGCMaxAge()
{
    m_JournalGCMaxAgeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPrefetchExternalChanges() const
{
    return m_PrefetchExternalChanges;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPrefetchExternalChanges(ConfigNodePropertyBoolean const& value)
{
    m_PrefetchExternalChanges = value;
    m_PrefetchExternalChangesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::prefetchExternalChangesIsSet() const
{
    return m_PrefetchExternalChangesIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetPrefetchExternalChanges()
{
    m_PrefetchExternalChangesIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getRole() const
{
    return m_Role;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setRole(ConfigNodePropertyString const& value)
{
    m_Role = value;
    m_RoleIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::roleIsSet() const
{
    return m_RoleIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetRole()
{
    m_RoleIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGcMaxAgeInSecs() const
{
    return m_VersionGcMaxAgeInSecs;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGcMaxAgeInSecs(ConfigNodePropertyInteger const& value)
{
    m_VersionGcMaxAgeInSecs = value;
    m_VersionGcMaxAgeInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::versionGcMaxAgeInSecsIsSet() const
{
    return m_VersionGcMaxAgeInSecsIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetVersionGcMaxAgeInSecs()
{
    m_VersionGcMaxAgeInSecsIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGCExpression() const
{
    return m_VersionGCExpression;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGCExpression(ConfigNodePropertyString const& value)
{
    m_VersionGCExpression = value;
    m_VersionGCExpressionIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::versionGCExpressionIsSet() const
{
    return m_VersionGCExpressionIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetVersionGCExpression()
{
    m_VersionGCExpressionIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGCTimeLimitInSecs() const
{
    return m_VersionGCTimeLimitInSecs;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGCTimeLimitInSecs(ConfigNodePropertyInteger const& value)
{
    m_VersionGCTimeLimitInSecs = value;
    m_VersionGCTimeLimitInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::versionGCTimeLimitInSecsIsSet() const
{
    return m_VersionGCTimeLimitInSecsIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetVersionGCTimeLimitInSecs()
{
    m_VersionGCTimeLimitInSecsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobGcMaxAgeInSecs() const
{
    return m_BlobGcMaxAgeInSecs;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobGcMaxAgeInSecs(ConfigNodePropertyInteger const& value)
{
    m_BlobGcMaxAgeInSecs = value;
    m_BlobGcMaxAgeInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::blobGcMaxAgeInSecsIsSet() const
{
    return m_BlobGcMaxAgeInSecsIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetBlobGcMaxAgeInSecs()
{
    m_BlobGcMaxAgeInSecsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobTrackSnapshotIntervalInSecs() const
{
    return m_BlobTrackSnapshotIntervalInSecs;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobTrackSnapshotIntervalInSecs(ConfigNodePropertyInteger const& value)
{
    m_BlobTrackSnapshotIntervalInSecs = value;
    m_BlobTrackSnapshotIntervalInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::blobTrackSnapshotIntervalInSecsIsSet() const
{
    return m_BlobTrackSnapshotIntervalInSecsIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetBlobTrackSnapshotIntervalInSecs()
{
    m_BlobTrackSnapshotIntervalInSecsIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getRepositoryHome() const
{
    return m_Repository_home;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setRepositoryHome(ConfigNodePropertyString const& value)
{
    m_Repository_home = value;
    m_Repository_homeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::repositoryHomeIsSet() const
{
    return m_Repository_homeIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetRepository_home()
{
    m_Repository_homeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getMaxReplicationLagInSecs() const
{
    return m_MaxReplicationLagInSecs;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setMaxReplicationLagInSecs(ConfigNodePropertyInteger const& value)
{
    m_MaxReplicationLagInSecs = value;
    m_MaxReplicationLagInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::maxReplicationLagInSecsIsSet() const
{
    return m_MaxReplicationLagInSecsIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetMaxReplicationLagInSecs()
{
    m_MaxReplicationLagInSecsIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDocumentStoreType() const
{
    return m_DocumentStoreType;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDocumentStoreType(ConfigNodePropertyDropDown const& value)
{
    m_DocumentStoreType = value;
    m_DocumentStoreTypeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::documentStoreTypeIsSet() const
{
    return m_DocumentStoreTypeIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetDocumentStoreType()
{
    m_DocumentStoreTypeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBundlingDisabled() const
{
    return m_BundlingDisabled;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBundlingDisabled(ConfigNodePropertyBoolean const& value)
{
    m_BundlingDisabled = value;
    m_BundlingDisabledIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::bundlingDisabledIsSet() const
{
    return m_BundlingDisabledIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetBundlingDisabled()
{
    m_BundlingDisabledIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getUpdateLimit() const
{
    return m_UpdateLimit;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setUpdateLimit(ConfigNodePropertyInteger const& value)
{
    m_UpdateLimit = value;
    m_UpdateLimitIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::updateLimitIsSet() const
{
    return m_UpdateLimitIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetUpdateLimit()
{
    m_UpdateLimitIsSet = false;
}
ConfigNodePropertyArray OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPersistentCacheIncludes() const
{
    return m_PersistentCacheIncludes;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPersistentCacheIncludes(ConfigNodePropertyArray const& value)
{
    m_PersistentCacheIncludes = value;
    m_PersistentCacheIncludesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::persistentCacheIncludesIsSet() const
{
    return m_PersistentCacheIncludesIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetPersistentCacheIncludes()
{
    m_PersistentCacheIncludesIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getLeaseCheckMode() const
{
    return m_LeaseCheckMode;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setLeaseCheckMode(ConfigNodePropertyDropDown const& value)
{
    m_LeaseCheckMode = value;
    m_LeaseCheckModeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::leaseCheckModeIsSet() const
{
    return m_LeaseCheckModeIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetLeaseCheckMode()
{
    m_LeaseCheckModeIsSet = false;
}

}
}
}
}

