/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEngineImplSlingMainServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEngineImplSlingMainServletProperties::OAIOrgApacheSlingEngineImplSlingMainServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingEngineImplSlingMainServletProperties::OAIOrgApacheSlingEngineImplSlingMainServletProperties() {
    init();
}

OAIOrgApacheSlingEngineImplSlingMainServletProperties::~OAIOrgApacheSlingEngineImplSlingMainServletProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingEngineImplSlingMainServletProperties::init() {
    sling_max_calls = new OAIConfigNodePropertyInteger();
    m_sling_max_calls_isSet = false;
    sling_max_inclusions = new OAIConfigNodePropertyInteger();
    m_sling_max_inclusions_isSet = false;
    sling_trace_allow = new OAIConfigNodePropertyBoolean();
    m_sling_trace_allow_isSet = false;
    sling_max_record_requests = new OAIConfigNodePropertyInteger();
    m_sling_max_record_requests_isSet = false;
    sling_store_pattern_requests = new OAIConfigNodePropertyArray();
    m_sling_store_pattern_requests_isSet = false;
    sling_serverinfo = new OAIConfigNodePropertyString();
    m_sling_serverinfo_isSet = false;
    sling_additional_response_headers = new OAIConfigNodePropertyArray();
    m_sling_additional_response_headers_isSet = false;
}

void
OAIOrgApacheSlingEngineImplSlingMainServletProperties::cleanup() {
    if(sling_max_calls != nullptr) { 
        delete sling_max_calls;
    }
    if(sling_max_inclusions != nullptr) { 
        delete sling_max_inclusions;
    }
    if(sling_trace_allow != nullptr) { 
        delete sling_trace_allow;
    }
    if(sling_max_record_requests != nullptr) { 
        delete sling_max_record_requests;
    }
    if(sling_store_pattern_requests != nullptr) { 
        delete sling_store_pattern_requests;
    }
    if(sling_serverinfo != nullptr) { 
        delete sling_serverinfo;
    }
    if(sling_additional_response_headers != nullptr) { 
        delete sling_additional_response_headers;
    }
}

OAIOrgApacheSlingEngineImplSlingMainServletProperties*
OAIOrgApacheSlingEngineImplSlingMainServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingEngineImplSlingMainServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&sling_max_calls, pJson["sling.max.calls"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&sling_max_inclusions, pJson["sling.max.inclusions"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&sling_trace_allow, pJson["sling.trace.allow"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&sling_max_record_requests, pJson["sling.max.record.requests"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&sling_store_pattern_requests, pJson["sling.store.pattern.requests"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&sling_serverinfo, pJson["sling.serverinfo"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sling_additional_response_headers, pJson["sling.additional.response.headers"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingEngineImplSlingMainServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEngineImplSlingMainServletProperties::asJsonObject() {
    QJsonObject obj;
    if((sling_max_calls != nullptr) && (sling_max_calls->isSet())){
        toJsonValue(QString("sling.max.calls"), sling_max_calls, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((sling_max_inclusions != nullptr) && (sling_max_inclusions->isSet())){
        toJsonValue(QString("sling.max.inclusions"), sling_max_inclusions, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((sling_trace_allow != nullptr) && (sling_trace_allow->isSet())){
        toJsonValue(QString("sling.trace.allow"), sling_trace_allow, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((sling_max_record_requests != nullptr) && (sling_max_record_requests->isSet())){
        toJsonValue(QString("sling.max.record.requests"), sling_max_record_requests, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((sling_store_pattern_requests != nullptr) && (sling_store_pattern_requests->isSet())){
        toJsonValue(QString("sling.store.pattern.requests"), sling_store_pattern_requests, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((sling_serverinfo != nullptr) && (sling_serverinfo->isSet())){
        toJsonValue(QString("sling.serverinfo"), sling_serverinfo, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sling_additional_response_headers != nullptr) && (sling_additional_response_headers->isSet())){
        toJsonValue(QString("sling.additional.response.headers"), sling_additional_response_headers, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEngineImplSlingMainServletProperties::getSlingMaxCalls() {
    return sling_max_calls;
}
void
OAIOrgApacheSlingEngineImplSlingMainServletProperties::setSlingMaxCalls(OAIConfigNodePropertyInteger* sling_max_calls) {
    this->sling_max_calls = sling_max_calls;
    this->m_sling_max_calls_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEngineImplSlingMainServletProperties::getSlingMaxInclusions() {
    return sling_max_inclusions;
}
void
OAIOrgApacheSlingEngineImplSlingMainServletProperties::setSlingMaxInclusions(OAIConfigNodePropertyInteger* sling_max_inclusions) {
    this->sling_max_inclusions = sling_max_inclusions;
    this->m_sling_max_inclusions_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingEngineImplSlingMainServletProperties::getSlingTraceAllow() {
    return sling_trace_allow;
}
void
OAIOrgApacheSlingEngineImplSlingMainServletProperties::setSlingTraceAllow(OAIConfigNodePropertyBoolean* sling_trace_allow) {
    this->sling_trace_allow = sling_trace_allow;
    this->m_sling_trace_allow_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEngineImplSlingMainServletProperties::getSlingMaxRecordRequests() {
    return sling_max_record_requests;
}
void
OAIOrgApacheSlingEngineImplSlingMainServletProperties::setSlingMaxRecordRequests(OAIConfigNodePropertyInteger* sling_max_record_requests) {
    this->sling_max_record_requests = sling_max_record_requests;
    this->m_sling_max_record_requests_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingEngineImplSlingMainServletProperties::getSlingStorePatternRequests() {
    return sling_store_pattern_requests;
}
void
OAIOrgApacheSlingEngineImplSlingMainServletProperties::setSlingStorePatternRequests(OAIConfigNodePropertyArray* sling_store_pattern_requests) {
    this->sling_store_pattern_requests = sling_store_pattern_requests;
    this->m_sling_store_pattern_requests_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingEngineImplSlingMainServletProperties::getSlingServerinfo() {
    return sling_serverinfo;
}
void
OAIOrgApacheSlingEngineImplSlingMainServletProperties::setSlingServerinfo(OAIConfigNodePropertyString* sling_serverinfo) {
    this->sling_serverinfo = sling_serverinfo;
    this->m_sling_serverinfo_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingEngineImplSlingMainServletProperties::getSlingAdditionalResponseHeaders() {
    return sling_additional_response_headers;
}
void
OAIOrgApacheSlingEngineImplSlingMainServletProperties::setSlingAdditionalResponseHeaders(OAIConfigNodePropertyArray* sling_additional_response_headers) {
    this->sling_additional_response_headers = sling_additional_response_headers;
    this->m_sling_additional_response_headers_isSet = true;
}


bool
OAIOrgApacheSlingEngineImplSlingMainServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(sling_max_calls != nullptr && sling_max_calls->isSet()){ isObjectUpdated = true; break;}
        if(sling_max_inclusions != nullptr && sling_max_inclusions->isSet()){ isObjectUpdated = true; break;}
        if(sling_trace_allow != nullptr && sling_trace_allow->isSet()){ isObjectUpdated = true; break;}
        if(sling_max_record_requests != nullptr && sling_max_record_requests->isSet()){ isObjectUpdated = true; break;}
        if(sling_store_pattern_requests != nullptr && sling_store_pattern_requests->isSet()){ isObjectUpdated = true; break;}
        if(sling_serverinfo != nullptr && sling_serverinfo->isSet()){ isObjectUpdated = true; break;}
        if(sling_additional_response_headers != nullptr && sling_additional_response_headers->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

