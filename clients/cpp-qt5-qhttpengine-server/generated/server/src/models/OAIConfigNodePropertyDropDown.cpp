/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIConfigNodePropertyDropDown.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIConfigNodePropertyDropDown::OAIConfigNodePropertyDropDown(QString json) {
    this->fromJson(json);
}

OAIConfigNodePropertyDropDown::OAIConfigNodePropertyDropDown() {
    this->init();
}

OAIConfigNodePropertyDropDown::~OAIConfigNodePropertyDropDown() {
    
}

void
OAIConfigNodePropertyDropDown::init() {
    m_name_isSet = false;
    m_optional_isSet = false;
    m_is_set_isSet = false;
    m_type_isSet = false;
    m_value_isSet = false;
    m_description_isSet = false;
}

void
OAIConfigNodePropertyDropDown::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIConfigNodePropertyDropDown::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    ::OpenAPI::fromJsonValue(optional, json[QString("optional")]);
    
    ::OpenAPI::fromJsonValue(is_set, json[QString("is_set")]);
    
    ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    
    ::OpenAPI::fromJsonValue(value, json[QString("value")]);
    
    ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    
}

QString
OAIConfigNodePropertyDropDown::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIConfigNodePropertyDropDown::asJsonObject() const {
    QJsonObject obj;
	if(m_name_isSet){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(m_optional_isSet){
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(optional));
    }
	if(m_is_set_isSet){
        obj.insert(QString("is_set"), ::OpenAPI::toJsonValue(is_set));
    }
	if(type.isSet()){
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
	if(value.isSet()){
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(value));
    }
	if(m_description_isSet){
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    return obj;
}

QString
OAIConfigNodePropertyDropDown::getName() const {
    return name;
}
void
OAIConfigNodePropertyDropDown::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool
OAIConfigNodePropertyDropDown::isOptional() const {
    return optional;
}
void
OAIConfigNodePropertyDropDown::setOptional(const bool &optional) {
    this->optional = optional;
    this->m_optional_isSet = true;
}

bool
OAIConfigNodePropertyDropDown::isIsSet() const {
    return is_set;
}
void
OAIConfigNodePropertyDropDown::setIsSet(const bool &is_set) {
    this->is_set = is_set;
    this->m_is_set_isSet = true;
}

OAIConfigNodePropertyDropDown_type
OAIConfigNodePropertyDropDown::getType() const {
    return type;
}
void
OAIConfigNodePropertyDropDown::setType(const OAIConfigNodePropertyDropDown_type &type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAIObject
OAIConfigNodePropertyDropDown::getValue() const {
    return value;
}
void
OAIConfigNodePropertyDropDown::setValue(const OAIObject &value) {
    this->value = value;
    this->m_value_isSet = true;
}

QString
OAIConfigNodePropertyDropDown::getDescription() const {
    return description;
}
void
OAIConfigNodePropertyDropDown::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}


bool
OAIConfigNodePropertyDropDown::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_optional_isSet){ isObjectUpdated = true; break;}
    
        if(m_is_set_isSet){ isObjectUpdated = true; break;}
    
        if(type.isSet()){ isObjectUpdated = true; break;}
    
        if(value.isSet()){ isObjectUpdated = true; break;}
    
        if(m_description_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

