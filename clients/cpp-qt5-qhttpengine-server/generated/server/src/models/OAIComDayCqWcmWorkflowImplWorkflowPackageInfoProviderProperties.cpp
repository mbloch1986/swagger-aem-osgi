/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties() {
    this->init();
}

OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::~OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties() {
    
}

void
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::init() {
    m_workflowpackageinfoprovider_filter_isSet = false;
    m_workflowpackageinfoprovider_filter_rootpath_isSet = false;
}

void
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(workflowpackageinfoprovider_filter, json[QString("workflowpackageinfoprovider.filter")]);
    
    ::OpenAPI::fromJsonValue(workflowpackageinfoprovider_filter_rootpath, json[QString("workflowpackageinfoprovider.filter.rootpath")]);
    
}

QString
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::asJsonObject() const {
    QJsonObject obj;
	if(workflowpackageinfoprovider_filter.isSet()){
        obj.insert(QString("workflowpackageinfoprovider.filter"), ::OpenAPI::toJsonValue(workflowpackageinfoprovider_filter));
    }
	if(workflowpackageinfoprovider_filter_rootpath.isSet()){
        obj.insert(QString("workflowpackageinfoprovider.filter.rootpath"), ::OpenAPI::toJsonValue(workflowpackageinfoprovider_filter_rootpath));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::getWorkflowpackageinfoproviderFilter() const {
    return workflowpackageinfoprovider_filter;
}
void
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::setWorkflowpackageinfoproviderFilter(const OAIConfigNodePropertyArray &workflowpackageinfoprovider_filter) {
    this->workflowpackageinfoprovider_filter = workflowpackageinfoprovider_filter;
    this->m_workflowpackageinfoprovider_filter_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::getWorkflowpackageinfoproviderFilterRootpath() const {
    return workflowpackageinfoprovider_filter_rootpath;
}
void
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::setWorkflowpackageinfoproviderFilterRootpath(const OAIConfigNodePropertyString &workflowpackageinfoprovider_filter_rootpath) {
    this->workflowpackageinfoprovider_filter_rootpath = workflowpackageinfoprovider_filter_rootpath;
    this->m_workflowpackageinfoprovider_filter_rootpath_isSet = true;
}


bool
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(workflowpackageinfoprovider_filter.isSet()){ isObjectUpdated = true; break;}
    
        if(workflowpackageinfoprovider_filter_rootpath.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

