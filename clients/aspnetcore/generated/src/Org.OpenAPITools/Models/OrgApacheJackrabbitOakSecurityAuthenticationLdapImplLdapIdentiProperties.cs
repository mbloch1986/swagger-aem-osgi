/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties : IEquatable<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties>
    { 
        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [DataMember(Name="provider.name")]
        public ConfigNodePropertyString ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets HostName
        /// </summary>
        [DataMember(Name="host.name")]
        public ConfigNodePropertyString HostName { get; set; }

        /// <summary>
        /// Gets or Sets HostPort
        /// </summary>
        [DataMember(Name="host.port")]
        public ConfigNodePropertyInteger HostPort { get; set; }

        /// <summary>
        /// Gets or Sets HostSsl
        /// </summary>
        [DataMember(Name="host.ssl")]
        public ConfigNodePropertyBoolean HostSsl { get; set; }

        /// <summary>
        /// Gets or Sets HostTls
        /// </summary>
        [DataMember(Name="host.tls")]
        public ConfigNodePropertyBoolean HostTls { get; set; }

        /// <summary>
        /// Gets or Sets HostNoCertCheck
        /// </summary>
        [DataMember(Name="host.noCertCheck")]
        public ConfigNodePropertyBoolean HostNoCertCheck { get; set; }

        /// <summary>
        /// Gets or Sets BindDn
        /// </summary>
        [DataMember(Name="bind.dn")]
        public ConfigNodePropertyString BindDn { get; set; }

        /// <summary>
        /// Gets or Sets BindPassword
        /// </summary>
        [DataMember(Name="bind.password")]
        public ConfigNodePropertyString BindPassword { get; set; }

        /// <summary>
        /// Gets or Sets SearchTimeout
        /// </summary>
        [DataMember(Name="searchTimeout")]
        public ConfigNodePropertyString SearchTimeout { get; set; }

        /// <summary>
        /// Gets or Sets AdminPoolMaxActive
        /// </summary>
        [DataMember(Name="adminPool.maxActive")]
        public ConfigNodePropertyInteger AdminPoolMaxActive { get; set; }

        /// <summary>
        /// Gets or Sets AdminPoolLookupOnValidate
        /// </summary>
        [DataMember(Name="adminPool.lookupOnValidate")]
        public ConfigNodePropertyBoolean AdminPoolLookupOnValidate { get; set; }

        /// <summary>
        /// Gets or Sets UserPoolMaxActive
        /// </summary>
        [DataMember(Name="userPool.maxActive")]
        public ConfigNodePropertyInteger UserPoolMaxActive { get; set; }

        /// <summary>
        /// Gets or Sets UserPoolLookupOnValidate
        /// </summary>
        [DataMember(Name="userPool.lookupOnValidate")]
        public ConfigNodePropertyBoolean UserPoolLookupOnValidate { get; set; }

        /// <summary>
        /// Gets or Sets UserBaseDN
        /// </summary>
        [DataMember(Name="user.baseDN")]
        public ConfigNodePropertyString UserBaseDN { get; set; }

        /// <summary>
        /// Gets or Sets UserObjectclass
        /// </summary>
        [DataMember(Name="user.objectclass")]
        public ConfigNodePropertyArray UserObjectclass { get; set; }

        /// <summary>
        /// Gets or Sets UserIdAttribute
        /// </summary>
        [DataMember(Name="user.idAttribute")]
        public ConfigNodePropertyString UserIdAttribute { get; set; }

        /// <summary>
        /// Gets or Sets UserExtraFilter
        /// </summary>
        [DataMember(Name="user.extraFilter")]
        public ConfigNodePropertyString UserExtraFilter { get; set; }

        /// <summary>
        /// Gets or Sets UserMakeDnPath
        /// </summary>
        [DataMember(Name="user.makeDnPath")]
        public ConfigNodePropertyBoolean UserMakeDnPath { get; set; }

        /// <summary>
        /// Gets or Sets GroupBaseDN
        /// </summary>
        [DataMember(Name="group.baseDN")]
        public ConfigNodePropertyString GroupBaseDN { get; set; }

        /// <summary>
        /// Gets or Sets GroupObjectclass
        /// </summary>
        [DataMember(Name="group.objectclass")]
        public ConfigNodePropertyArray GroupObjectclass { get; set; }

        /// <summary>
        /// Gets or Sets GroupNameAttribute
        /// </summary>
        [DataMember(Name="group.nameAttribute")]
        public ConfigNodePropertyString GroupNameAttribute { get; set; }

        /// <summary>
        /// Gets or Sets GroupExtraFilter
        /// </summary>
        [DataMember(Name="group.extraFilter")]
        public ConfigNodePropertyString GroupExtraFilter { get; set; }

        /// <summary>
        /// Gets or Sets GroupMakeDnPath
        /// </summary>
        [DataMember(Name="group.makeDnPath")]
        public ConfigNodePropertyBoolean GroupMakeDnPath { get; set; }

        /// <summary>
        /// Gets or Sets GroupMemberAttribute
        /// </summary>
        [DataMember(Name="group.memberAttribute")]
        public ConfigNodePropertyString GroupMemberAttribute { get; set; }

        /// <summary>
        /// Gets or Sets UseUidForExtId
        /// </summary>
        [DataMember(Name="useUidForExtId")]
        public ConfigNodePropertyBoolean UseUidForExtId { get; set; }

        /// <summary>
        /// Gets or Sets Customattributes
        /// </summary>
        [DataMember(Name="customattributes")]
        public ConfigNodePropertyArray Customattributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  HostPort: ").Append(HostPort).Append("\n");
            sb.Append("  HostSsl: ").Append(HostSsl).Append("\n");
            sb.Append("  HostTls: ").Append(HostTls).Append("\n");
            sb.Append("  HostNoCertCheck: ").Append(HostNoCertCheck).Append("\n");
            sb.Append("  BindDn: ").Append(BindDn).Append("\n");
            sb.Append("  BindPassword: ").Append(BindPassword).Append("\n");
            sb.Append("  SearchTimeout: ").Append(SearchTimeout).Append("\n");
            sb.Append("  AdminPoolMaxActive: ").Append(AdminPoolMaxActive).Append("\n");
            sb.Append("  AdminPoolLookupOnValidate: ").Append(AdminPoolLookupOnValidate).Append("\n");
            sb.Append("  UserPoolMaxActive: ").Append(UserPoolMaxActive).Append("\n");
            sb.Append("  UserPoolLookupOnValidate: ").Append(UserPoolLookupOnValidate).Append("\n");
            sb.Append("  UserBaseDN: ").Append(UserBaseDN).Append("\n");
            sb.Append("  UserObjectclass: ").Append(UserObjectclass).Append("\n");
            sb.Append("  UserIdAttribute: ").Append(UserIdAttribute).Append("\n");
            sb.Append("  UserExtraFilter: ").Append(UserExtraFilter).Append("\n");
            sb.Append("  UserMakeDnPath: ").Append(UserMakeDnPath).Append("\n");
            sb.Append("  GroupBaseDN: ").Append(GroupBaseDN).Append("\n");
            sb.Append("  GroupObjectclass: ").Append(GroupObjectclass).Append("\n");
            sb.Append("  GroupNameAttribute: ").Append(GroupNameAttribute).Append("\n");
            sb.Append("  GroupExtraFilter: ").Append(GroupExtraFilter).Append("\n");
            sb.Append("  GroupMakeDnPath: ").Append(GroupMakeDnPath).Append("\n");
            sb.Append("  GroupMemberAttribute: ").Append(GroupMemberAttribute).Append("\n");
            sb.Append("  UseUidForExtId: ").Append(UseUidForExtId).Append("\n");
            sb.Append("  Customattributes: ").Append(Customattributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProviderName == other.ProviderName ||
                    ProviderName != null &&
                    ProviderName.Equals(other.ProviderName)
                ) && 
                (
                    HostName == other.HostName ||
                    HostName != null &&
                    HostName.Equals(other.HostName)
                ) && 
                (
                    HostPort == other.HostPort ||
                    HostPort != null &&
                    HostPort.Equals(other.HostPort)
                ) && 
                (
                    HostSsl == other.HostSsl ||
                    HostSsl != null &&
                    HostSsl.Equals(other.HostSsl)
                ) && 
                (
                    HostTls == other.HostTls ||
                    HostTls != null &&
                    HostTls.Equals(other.HostTls)
                ) && 
                (
                    HostNoCertCheck == other.HostNoCertCheck ||
                    HostNoCertCheck != null &&
                    HostNoCertCheck.Equals(other.HostNoCertCheck)
                ) && 
                (
                    BindDn == other.BindDn ||
                    BindDn != null &&
                    BindDn.Equals(other.BindDn)
                ) && 
                (
                    BindPassword == other.BindPassword ||
                    BindPassword != null &&
                    BindPassword.Equals(other.BindPassword)
                ) && 
                (
                    SearchTimeout == other.SearchTimeout ||
                    SearchTimeout != null &&
                    SearchTimeout.Equals(other.SearchTimeout)
                ) && 
                (
                    AdminPoolMaxActive == other.AdminPoolMaxActive ||
                    AdminPoolMaxActive != null &&
                    AdminPoolMaxActive.Equals(other.AdminPoolMaxActive)
                ) && 
                (
                    AdminPoolLookupOnValidate == other.AdminPoolLookupOnValidate ||
                    AdminPoolLookupOnValidate != null &&
                    AdminPoolLookupOnValidate.Equals(other.AdminPoolLookupOnValidate)
                ) && 
                (
                    UserPoolMaxActive == other.UserPoolMaxActive ||
                    UserPoolMaxActive != null &&
                    UserPoolMaxActive.Equals(other.UserPoolMaxActive)
                ) && 
                (
                    UserPoolLookupOnValidate == other.UserPoolLookupOnValidate ||
                    UserPoolLookupOnValidate != null &&
                    UserPoolLookupOnValidate.Equals(other.UserPoolLookupOnValidate)
                ) && 
                (
                    UserBaseDN == other.UserBaseDN ||
                    UserBaseDN != null &&
                    UserBaseDN.Equals(other.UserBaseDN)
                ) && 
                (
                    UserObjectclass == other.UserObjectclass ||
                    UserObjectclass != null &&
                    UserObjectclass.Equals(other.UserObjectclass)
                ) && 
                (
                    UserIdAttribute == other.UserIdAttribute ||
                    UserIdAttribute != null &&
                    UserIdAttribute.Equals(other.UserIdAttribute)
                ) && 
                (
                    UserExtraFilter == other.UserExtraFilter ||
                    UserExtraFilter != null &&
                    UserExtraFilter.Equals(other.UserExtraFilter)
                ) && 
                (
                    UserMakeDnPath == other.UserMakeDnPath ||
                    UserMakeDnPath != null &&
                    UserMakeDnPath.Equals(other.UserMakeDnPath)
                ) && 
                (
                    GroupBaseDN == other.GroupBaseDN ||
                    GroupBaseDN != null &&
                    GroupBaseDN.Equals(other.GroupBaseDN)
                ) && 
                (
                    GroupObjectclass == other.GroupObjectclass ||
                    GroupObjectclass != null &&
                    GroupObjectclass.Equals(other.GroupObjectclass)
                ) && 
                (
                    GroupNameAttribute == other.GroupNameAttribute ||
                    GroupNameAttribute != null &&
                    GroupNameAttribute.Equals(other.GroupNameAttribute)
                ) && 
                (
                    GroupExtraFilter == other.GroupExtraFilter ||
                    GroupExtraFilter != null &&
                    GroupExtraFilter.Equals(other.GroupExtraFilter)
                ) && 
                (
                    GroupMakeDnPath == other.GroupMakeDnPath ||
                    GroupMakeDnPath != null &&
                    GroupMakeDnPath.Equals(other.GroupMakeDnPath)
                ) && 
                (
                    GroupMemberAttribute == other.GroupMemberAttribute ||
                    GroupMemberAttribute != null &&
                    GroupMemberAttribute.Equals(other.GroupMemberAttribute)
                ) && 
                (
                    UseUidForExtId == other.UseUidForExtId ||
                    UseUidForExtId != null &&
                    UseUidForExtId.Equals(other.UseUidForExtId)
                ) && 
                (
                    Customattributes == other.Customattributes ||
                    Customattributes != null &&
                    Customattributes.Equals(other.Customattributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProviderName != null)
                    hashCode = hashCode * 59 + ProviderName.GetHashCode();
                    if (HostName != null)
                    hashCode = hashCode * 59 + HostName.GetHashCode();
                    if (HostPort != null)
                    hashCode = hashCode * 59 + HostPort.GetHashCode();
                    if (HostSsl != null)
                    hashCode = hashCode * 59 + HostSsl.GetHashCode();
                    if (HostTls != null)
                    hashCode = hashCode * 59 + HostTls.GetHashCode();
                    if (HostNoCertCheck != null)
                    hashCode = hashCode * 59 + HostNoCertCheck.GetHashCode();
                    if (BindDn != null)
                    hashCode = hashCode * 59 + BindDn.GetHashCode();
                    if (BindPassword != null)
                    hashCode = hashCode * 59 + BindPassword.GetHashCode();
                    if (SearchTimeout != null)
                    hashCode = hashCode * 59 + SearchTimeout.GetHashCode();
                    if (AdminPoolMaxActive != null)
                    hashCode = hashCode * 59 + AdminPoolMaxActive.GetHashCode();
                    if (AdminPoolLookupOnValidate != null)
                    hashCode = hashCode * 59 + AdminPoolLookupOnValidate.GetHashCode();
                    if (UserPoolMaxActive != null)
                    hashCode = hashCode * 59 + UserPoolMaxActive.GetHashCode();
                    if (UserPoolLookupOnValidate != null)
                    hashCode = hashCode * 59 + UserPoolLookupOnValidate.GetHashCode();
                    if (UserBaseDN != null)
                    hashCode = hashCode * 59 + UserBaseDN.GetHashCode();
                    if (UserObjectclass != null)
                    hashCode = hashCode * 59 + UserObjectclass.GetHashCode();
                    if (UserIdAttribute != null)
                    hashCode = hashCode * 59 + UserIdAttribute.GetHashCode();
                    if (UserExtraFilter != null)
                    hashCode = hashCode * 59 + UserExtraFilter.GetHashCode();
                    if (UserMakeDnPath != null)
                    hashCode = hashCode * 59 + UserMakeDnPath.GetHashCode();
                    if (GroupBaseDN != null)
                    hashCode = hashCode * 59 + GroupBaseDN.GetHashCode();
                    if (GroupObjectclass != null)
                    hashCode = hashCode * 59 + GroupObjectclass.GetHashCode();
                    if (GroupNameAttribute != null)
                    hashCode = hashCode * 59 + GroupNameAttribute.GetHashCode();
                    if (GroupExtraFilter != null)
                    hashCode = hashCode * 59 + GroupExtraFilter.GetHashCode();
                    if (GroupMakeDnPath != null)
                    hashCode = hashCode * 59 + GroupMakeDnPath.GetHashCode();
                    if (GroupMemberAttribute != null)
                    hashCode = hashCode * 59 + GroupMemberAttribute.GetHashCode();
                    if (UseUidForExtId != null)
                    hashCode = hashCode * 59 + UseUidForExtId.GetHashCode();
                    if (Customattributes != null)
                    hashCode = hashCode * 59 + Customattributes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties left, OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties left, OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
