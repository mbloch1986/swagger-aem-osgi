/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplServletHealthCheckServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplServletHealthCheckServletProperties::ComDayCqDamCoreImplServletHealthCheckServletProperties()
{
    m_Cq_dam_sync_workflow_idIsSet = false;
    m_Cq_dam_sync_folder_typesIsSet = false;
}

ComDayCqDamCoreImplServletHealthCheckServletProperties::~ComDayCqDamCoreImplServletHealthCheckServletProperties()
{
}

void ComDayCqDamCoreImplServletHealthCheckServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplServletHealthCheckServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_sync_workflow_idIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.sync.workflow.id")] = ModelBase::toJson(m_Cq_dam_sync_workflow_id);
    }
    if(m_Cq_dam_sync_folder_typesIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.sync.folder.types")] = ModelBase::toJson(m_Cq_dam_sync_folder_types);
    }

    return val;
}

void ComDayCqDamCoreImplServletHealthCheckServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.sync.workflow.id")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.sync.workflow.id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.sync.workflow.id")]);
            setCqDamSyncWorkflowId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.sync.folder.types")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.sync.folder.types")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.sync.folder.types")]);
            setCqDamSyncFolderTypes( newItem );
        }
    }
}

void ComDayCqDamCoreImplServletHealthCheckServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_sync_workflow_idIsSet)
    {
        if (m_Cq_dam_sync_workflow_id.get())
        {
            m_Cq_dam_sync_workflow_id->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.sync.workflow.id."));
        }
    }
    if(m_Cq_dam_sync_folder_typesIsSet)
    {
        if (m_Cq_dam_sync_folder_types.get())
        {
            m_Cq_dam_sync_folder_types->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.sync.folder.types."));
        }
    }
}

void ComDayCqDamCoreImplServletHealthCheckServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.sync.workflow.id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.sync.workflow.id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.sync.workflow.id."));
            setCqDamSyncWorkflowId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.sync.folder.types")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.sync.folder.types")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.sync.folder.types."));
            setCqDamSyncFolderTypes( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplServletHealthCheckServletProperties::getCqDamSyncWorkflowId() const
{
    return m_Cq_dam_sync_workflow_id;
}


void ComDayCqDamCoreImplServletHealthCheckServletProperties::setCqDamSyncWorkflowId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_sync_workflow_id = value;
    m_Cq_dam_sync_workflow_idIsSet = true;
}
bool ComDayCqDamCoreImplServletHealthCheckServletProperties::cqDamSyncWorkflowIdIsSet() const
{
    return m_Cq_dam_sync_workflow_idIsSet;
}

void ComDayCqDamCoreImplServletHealthCheckServletProperties::unsetCq_dam_sync_workflow_id()
{
    m_Cq_dam_sync_workflow_idIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqDamCoreImplServletHealthCheckServletProperties::getCqDamSyncFolderTypes() const
{
    return m_Cq_dam_sync_folder_types;
}


void ComDayCqDamCoreImplServletHealthCheckServletProperties::setCqDamSyncFolderTypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_dam_sync_folder_types = value;
    m_Cq_dam_sync_folder_typesIsSet = true;
}
bool ComDayCqDamCoreImplServletHealthCheckServletProperties::cqDamSyncFolderTypesIsSet() const
{
    return m_Cq_dam_sync_folder_typesIsSet;
}

void ComDayCqDamCoreImplServletHealthCheckServletProperties::unsetCq_dam_sync_folder_types()
{
    m_Cq_dam_sync_folder_typesIsSet = false;
}

}
}
}
}

