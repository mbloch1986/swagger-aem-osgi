/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqDamCoreImplExpiryNotificationJobImplProperties.h
 *
 * 
 */

#ifndef ComDayCqDamCoreImplExpiryNotificationJobImplProperties_H_
#define ComDayCqDamCoreImplExpiryNotificationJobImplProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqDamCoreImplExpiryNotificationJobImplProperties
{
public:
    ComDayCqDamCoreImplExpiryNotificationJobImplProperties();
    virtual ~ComDayCqDamCoreImplExpiryNotificationJobImplProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComDayCqDamCoreImplExpiryNotificationJobImplProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCqDamExpiryNotificationSchedulerIstimebased() const;
    void setCqDamExpiryNotificationSchedulerIstimebased(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqDamExpiryNotificationSchedulerTimebasedRule() const;
    void setCqDamExpiryNotificationSchedulerTimebasedRule(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamExpiryNotificationSchedulerPeriodRule() const;
    void setCqDamExpiryNotificationSchedulerPeriodRule(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSendEmail() const;
    void setSendEmail(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAssetExpiredLimit() const;
    void setAssetExpiredLimit(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPriorNotificationSeconds() const;
    void setPriorNotificationSeconds(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqDamExpiryNotificationUrlProtocol() const;
    void setCqDamExpiryNotificationUrlProtocol(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Cq_dam_expiry_notification_scheduler_istimebased;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_dam_expiry_notification_scheduler_timebased_rule;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_expiry_notification_scheduler_period_rule;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Send_email;
    std::shared_ptr<ConfigNodePropertyInteger> m_Asset_expired_limit;
    std::shared_ptr<ConfigNodePropertyInteger> m_Prior_notification_seconds;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_dam_expiry_notification_url_protocol;
};

}
}
}
}

#endif /* ComDayCqDamCoreImplExpiryNotificationJobImplProperties_H_ */
