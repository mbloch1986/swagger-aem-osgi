/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties() {
    init();
}

OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::~OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::init() {
    osgi_http_whiteboard_listener = new OAIConfigNodePropertyString();
    m_osgi_http_whiteboard_listener_isSet = false;
    osgi_http_whiteboard_context_select = new OAIConfigNodePropertyString();
    m_osgi_http_whiteboard_context_select_isSet = false;
    max_recursion_depth = new OAIConfigNodePropertyInteger();
    m_max_recursion_depth_isSet = false;
    cleanup_job_period = new OAIConfigNodePropertyInteger();
    m_cleanup_job_period_isSet = false;
}

void
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::cleanup() {
    if(osgi_http_whiteboard_listener != nullptr) { 
        delete osgi_http_whiteboard_listener;
    }
    if(osgi_http_whiteboard_context_select != nullptr) { 
        delete osgi_http_whiteboard_context_select;
    }
    if(max_recursion_depth != nullptr) { 
        delete max_recursion_depth;
    }
    if(cleanup_job_period != nullptr) { 
        delete cleanup_job_period;
    }
}

OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties*
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&osgi_http_whiteboard_listener, pJson["osgi.http.whiteboard.listener"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&osgi_http_whiteboard_context_select, pJson["osgi.http.whiteboard.context.select"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&max_recursion_depth, pJson["max.recursion.depth"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cleanup_job_period, pJson["cleanup.job.period"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::asJsonObject() {
    QJsonObject obj;
    if((osgi_http_whiteboard_listener != nullptr) && (osgi_http_whiteboard_listener->isSet())){
        toJsonValue(QString("osgi.http.whiteboard.listener"), osgi_http_whiteboard_listener, obj, QString("OAIConfigNodePropertyString"));
    }
    if((osgi_http_whiteboard_context_select != nullptr) && (osgi_http_whiteboard_context_select->isSet())){
        toJsonValue(QString("osgi.http.whiteboard.context.select"), osgi_http_whiteboard_context_select, obj, QString("OAIConfigNodePropertyString"));
    }
    if((max_recursion_depth != nullptr) && (max_recursion_depth->isSet())){
        toJsonValue(QString("max.recursion.depth"), max_recursion_depth, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cleanup_job_period != nullptr) && (cleanup_job_period->isSet())){
        toJsonValue(QString("cleanup.job.period"), cleanup_job_period, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::getOsgiHttpWhiteboardListener() {
    return osgi_http_whiteboard_listener;
}
void
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::setOsgiHttpWhiteboardListener(OAIConfigNodePropertyString* osgi_http_whiteboard_listener) {
    this->osgi_http_whiteboard_listener = osgi_http_whiteboard_listener;
    this->m_osgi_http_whiteboard_listener_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::getOsgiHttpWhiteboardContextSelect() {
    return osgi_http_whiteboard_context_select;
}
void
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::setOsgiHttpWhiteboardContextSelect(OAIConfigNodePropertyString* osgi_http_whiteboard_context_select) {
    this->osgi_http_whiteboard_context_select = osgi_http_whiteboard_context_select;
    this->m_osgi_http_whiteboard_context_select_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::getMaxRecursionDepth() {
    return max_recursion_depth;
}
void
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::setMaxRecursionDepth(OAIConfigNodePropertyInteger* max_recursion_depth) {
    this->max_recursion_depth = max_recursion_depth;
    this->m_max_recursion_depth_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::getCleanupJobPeriod() {
    return cleanup_job_period;
}
void
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::setCleanupJobPeriod(OAIConfigNodePropertyInteger* cleanup_job_period) {
    this->cleanup_job_period = cleanup_job_period;
    this->m_cleanup_job_period_isSet = true;
}


bool
OAIOrgApacheSlingModelsImplModelAdapterFactoryProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(osgi_http_whiteboard_listener != nullptr && osgi_http_whiteboard_listener->isSet()){ isObjectUpdated = true; break;}
        if(osgi_http_whiteboard_context_select != nullptr && osgi_http_whiteboard_context_select->isSet()){ isObjectUpdated = true; break;}
        if(max_recursion_depth != nullptr && max_recursion_depth->isSet()){ isObjectUpdated = true; break;}
        if(cleanup_job_period != nullptr && cleanup_job_period->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

