/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqPollingImporterImplPollingImporterImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqPollingImporterImplPollingImporterImplProperties::ComDayCqPollingImporterImplPollingImporterImplProperties()
{
    m_Importer_min_intervalIsSet = false;
    m_Importer_userIsSet = false;
    m_Exclude_pathsIsSet = false;
    m_Include_pathsIsSet = false;
}

ComDayCqPollingImporterImplPollingImporterImplProperties::~ComDayCqPollingImporterImplPollingImporterImplProperties()
{
}

void ComDayCqPollingImporterImplPollingImporterImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqPollingImporterImplPollingImporterImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Importer_min_intervalIsSet)
    {
        val[utility::conversions::to_string_t("importer.min.interval")] = ModelBase::toJson(m_Importer_min_interval);
    }
    if(m_Importer_userIsSet)
    {
        val[utility::conversions::to_string_t("importer.user")] = ModelBase::toJson(m_Importer_user);
    }
    if(m_Exclude_pathsIsSet)
    {
        val[utility::conversions::to_string_t("exclude.paths")] = ModelBase::toJson(m_Exclude_paths);
    }
    if(m_Include_pathsIsSet)
    {
        val[utility::conversions::to_string_t("include.paths")] = ModelBase::toJson(m_Include_paths);
    }

    return val;
}

void ComDayCqPollingImporterImplPollingImporterImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("importer.min.interval")))
    {
        if(!val[utility::conversions::to_string_t("importer.min.interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("importer.min.interval")]);
            setImporterMinInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importer.user")))
    {
        if(!val[utility::conversions::to_string_t("importer.user")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("importer.user")]);
            setImporterUser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exclude.paths")))
    {
        if(!val[utility::conversions::to_string_t("exclude.paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("exclude.paths")]);
            setExcludePaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("include.paths")))
    {
        if(!val[utility::conversions::to_string_t("include.paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("include.paths")]);
            setIncludePaths( newItem );
        }
    }
}

void ComDayCqPollingImporterImplPollingImporterImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Importer_min_intervalIsSet)
    {
        if (m_Importer_min_interval.get())
        {
            m_Importer_min_interval->toMultipart(multipart, utility::conversions::to_string_t("importer.min.interval."));
        }
    }
    if(m_Importer_userIsSet)
    {
        if (m_Importer_user.get())
        {
            m_Importer_user->toMultipart(multipart, utility::conversions::to_string_t("importer.user."));
        }
    }
    if(m_Exclude_pathsIsSet)
    {
        if (m_Exclude_paths.get())
        {
            m_Exclude_paths->toMultipart(multipart, utility::conversions::to_string_t("exclude.paths."));
        }
    }
    if(m_Include_pathsIsSet)
    {
        if (m_Include_paths.get())
        {
            m_Include_paths->toMultipart(multipart, utility::conversions::to_string_t("include.paths."));
        }
    }
}

void ComDayCqPollingImporterImplPollingImporterImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("importer.min.interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("importer.min.interval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("importer.min.interval."));
            setImporterMinInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importer.user")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("importer.user")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("importer.user."));
            setImporterUser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exclude.paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("exclude.paths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("exclude.paths."));
            setExcludePaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("include.paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("include.paths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("include.paths."));
            setIncludePaths( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqPollingImporterImplPollingImporterImplProperties::getImporterMinInterval() const
{
    return m_Importer_min_interval;
}


void ComDayCqPollingImporterImplPollingImporterImplProperties::setImporterMinInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Importer_min_interval = value;
    m_Importer_min_intervalIsSet = true;
}
bool ComDayCqPollingImporterImplPollingImporterImplProperties::importerMinIntervalIsSet() const
{
    return m_Importer_min_intervalIsSet;
}

void ComDayCqPollingImporterImplPollingImporterImplProperties::unsetImporter_min_interval()
{
    m_Importer_min_intervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqPollingImporterImplPollingImporterImplProperties::getImporterUser() const
{
    return m_Importer_user;
}


void ComDayCqPollingImporterImplPollingImporterImplProperties::setImporterUser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Importer_user = value;
    m_Importer_userIsSet = true;
}
bool ComDayCqPollingImporterImplPollingImporterImplProperties::importerUserIsSet() const
{
    return m_Importer_userIsSet;
}

void ComDayCqPollingImporterImplPollingImporterImplProperties::unsetImporter_user()
{
    m_Importer_userIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqPollingImporterImplPollingImporterImplProperties::getExcludePaths() const
{
    return m_Exclude_paths;
}


void ComDayCqPollingImporterImplPollingImporterImplProperties::setExcludePaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Exclude_paths = value;
    m_Exclude_pathsIsSet = true;
}
bool ComDayCqPollingImporterImplPollingImporterImplProperties::excludePathsIsSet() const
{
    return m_Exclude_pathsIsSet;
}

void ComDayCqPollingImporterImplPollingImporterImplProperties::unsetExclude_paths()
{
    m_Exclude_pathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqPollingImporterImplPollingImporterImplProperties::getIncludePaths() const
{
    return m_Include_paths;
}


void ComDayCqPollingImporterImplPollingImporterImplProperties::setIncludePaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Include_paths = value;
    m_Include_pathsIsSet = true;
}
bool ComDayCqPollingImporterImplPollingImporterImplProperties::includePathsIsSet() const
{
    return m_Include_pathsIsSet;
}

void ComDayCqPollingImporterImplPollingImporterImplProperties::unsetInclude_paths()
{
    m_Include_pathsIsSet = false;
}

}
}
}
}

