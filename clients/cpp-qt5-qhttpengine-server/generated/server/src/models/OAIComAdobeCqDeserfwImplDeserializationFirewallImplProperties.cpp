/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties() {
    this->init();
}

OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::~OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties() {
    
}

void
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::init() {
    m_firewall_deserialization_whitelist_isSet = false;
    m_firewall_deserialization_blacklist_isSet = false;
    m_firewall_deserialization_diagnostics_isSet = false;
}

void
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(firewall_deserialization_whitelist, json[QString("firewall.deserialization.whitelist")]);
    
    ::OpenAPI::fromJsonValue(firewall_deserialization_blacklist, json[QString("firewall.deserialization.blacklist")]);
    
    ::OpenAPI::fromJsonValue(firewall_deserialization_diagnostics, json[QString("firewall.deserialization.diagnostics")]);
    
}

QString
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(firewall_deserialization_whitelist.isSet()){
        obj.insert(QString("firewall.deserialization.whitelist"), ::OpenAPI::toJsonValue(firewall_deserialization_whitelist));
    }
	if(firewall_deserialization_blacklist.isSet()){
        obj.insert(QString("firewall.deserialization.blacklist"), ::OpenAPI::toJsonValue(firewall_deserialization_blacklist));
    }
	if(firewall_deserialization_diagnostics.isSet()){
        obj.insert(QString("firewall.deserialization.diagnostics"), ::OpenAPI::toJsonValue(firewall_deserialization_diagnostics));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::getFirewallDeserializationWhitelist() const {
    return firewall_deserialization_whitelist;
}
void
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::setFirewallDeserializationWhitelist(const OAIConfigNodePropertyArray &firewall_deserialization_whitelist) {
    this->firewall_deserialization_whitelist = firewall_deserialization_whitelist;
    this->m_firewall_deserialization_whitelist_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::getFirewallDeserializationBlacklist() const {
    return firewall_deserialization_blacklist;
}
void
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::setFirewallDeserializationBlacklist(const OAIConfigNodePropertyArray &firewall_deserialization_blacklist) {
    this->firewall_deserialization_blacklist = firewall_deserialization_blacklist;
    this->m_firewall_deserialization_blacklist_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::getFirewallDeserializationDiagnostics() const {
    return firewall_deserialization_diagnostics;
}
void
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::setFirewallDeserializationDiagnostics(const OAIConfigNodePropertyString &firewall_deserialization_diagnostics) {
    this->firewall_deserialization_diagnostics = firewall_deserialization_diagnostics;
    this->m_firewall_deserialization_diagnostics_isSet = true;
}


bool
OAIComAdobeCqDeserfwImplDeserializationFirewallImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(firewall_deserialization_whitelist.isSet()){ isObjectUpdated = true; break;}
    
        if(firewall_deserialization_blacklist.isSet()){ isObjectUpdated = true; break;}
    
        if(firewall_deserialization_diagnostics.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

