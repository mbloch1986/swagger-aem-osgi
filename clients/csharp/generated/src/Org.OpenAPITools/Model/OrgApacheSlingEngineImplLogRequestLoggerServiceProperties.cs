/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingEngineImplLogRequestLoggerServiceProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingEngineImplLogRequestLoggerServiceProperties :  IEquatable<OrgApacheSlingEngineImplLogRequestLoggerServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingEngineImplLogRequestLoggerServiceProperties" /> class.
        /// </summary>
        /// <param name="requestLogServiceFormat">requestLogServiceFormat.</param>
        /// <param name="requestLogServiceOutput">requestLogServiceOutput.</param>
        /// <param name="requestLogServiceOutputtype">requestLogServiceOutputtype.</param>
        /// <param name="requestLogServiceOnentry">requestLogServiceOnentry.</param>
        public OrgApacheSlingEngineImplLogRequestLoggerServiceProperties(ConfigNodePropertyString requestLogServiceFormat = default(ConfigNodePropertyString), ConfigNodePropertyString requestLogServiceOutput = default(ConfigNodePropertyString), ConfigNodePropertyDropDown requestLogServiceOutputtype = default(ConfigNodePropertyDropDown), ConfigNodePropertyBoolean requestLogServiceOnentry = default(ConfigNodePropertyBoolean))
        {
            this.RequestLogServiceFormat = requestLogServiceFormat;
            this.RequestLogServiceOutput = requestLogServiceOutput;
            this.RequestLogServiceOutputtype = requestLogServiceOutputtype;
            this.RequestLogServiceOnentry = requestLogServiceOnentry;
        }
        
        /// <summary>
        /// Gets or Sets RequestLogServiceFormat
        /// </summary>
        [DataMember(Name="request.log.service.format", EmitDefaultValue=false)]
        public ConfigNodePropertyString RequestLogServiceFormat { get; set; }

        /// <summary>
        /// Gets or Sets RequestLogServiceOutput
        /// </summary>
        [DataMember(Name="request.log.service.output", EmitDefaultValue=false)]
        public ConfigNodePropertyString RequestLogServiceOutput { get; set; }

        /// <summary>
        /// Gets or Sets RequestLogServiceOutputtype
        /// </summary>
        [DataMember(Name="request.log.service.outputtype", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown RequestLogServiceOutputtype { get; set; }

        /// <summary>
        /// Gets or Sets RequestLogServiceOnentry
        /// </summary>
        [DataMember(Name="request.log.service.onentry", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean RequestLogServiceOnentry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {\n");
            sb.Append("  RequestLogServiceFormat: ").Append(RequestLogServiceFormat).Append("\n");
            sb.Append("  RequestLogServiceOutput: ").Append(RequestLogServiceOutput).Append("\n");
            sb.Append("  RequestLogServiceOutputtype: ").Append(RequestLogServiceOutputtype).Append("\n");
            sb.Append("  RequestLogServiceOnentry: ").Append(RequestLogServiceOnentry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingEngineImplLogRequestLoggerServiceProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingEngineImplLogRequestLoggerServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingEngineImplLogRequestLoggerServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingEngineImplLogRequestLoggerServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestLogServiceFormat == input.RequestLogServiceFormat ||
                    (this.RequestLogServiceFormat != null &&
                    this.RequestLogServiceFormat.Equals(input.RequestLogServiceFormat))
                ) && 
                (
                    this.RequestLogServiceOutput == input.RequestLogServiceOutput ||
                    (this.RequestLogServiceOutput != null &&
                    this.RequestLogServiceOutput.Equals(input.RequestLogServiceOutput))
                ) && 
                (
                    this.RequestLogServiceOutputtype == input.RequestLogServiceOutputtype ||
                    (this.RequestLogServiceOutputtype != null &&
                    this.RequestLogServiceOutputtype.Equals(input.RequestLogServiceOutputtype))
                ) && 
                (
                    this.RequestLogServiceOnentry == input.RequestLogServiceOnentry ||
                    (this.RequestLogServiceOnentry != null &&
                    this.RequestLogServiceOnentry.Equals(input.RequestLogServiceOnentry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestLogServiceFormat != null)
                    hashCode = hashCode * 59 + this.RequestLogServiceFormat.GetHashCode();
                if (this.RequestLogServiceOutput != null)
                    hashCode = hashCode * 59 + this.RequestLogServiceOutput.GetHashCode();
                if (this.RequestLogServiceOutputtype != null)
                    hashCode = hashCode * 59 + this.RequestLogServiceOutputtype.GetHashCode();
                if (this.RequestLogServiceOnentry != null)
                    hashCode = hashCode * 59 + this.RequestLogServiceOnentry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
