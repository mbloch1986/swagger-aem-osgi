/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIConfigNodePropertyDropDown_type.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIConfigNodePropertyDropDown_type::OAIConfigNodePropertyDropDown_type(QString json) {
    init();
    this->fromJson(json);
}

OAIConfigNodePropertyDropDown_type::OAIConfigNodePropertyDropDown_type() {
    init();
}

OAIConfigNodePropertyDropDown_type::~OAIConfigNodePropertyDropDown_type() {
    this->cleanup();
}

void
OAIConfigNodePropertyDropDown_type::init() {
    labels = NULL;
    m_labels_isSet = false;
    values = NULL;
    m_values_isSet = false;
}

void
OAIConfigNodePropertyDropDown_type::cleanup() {
    if(labels != nullptr) { 
        delete labels;
    }
    if(values != nullptr) { 
        delete values;
    }
}

OAIConfigNodePropertyDropDown_type*
OAIConfigNodePropertyDropDown_type::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIConfigNodePropertyDropDown_type::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&labels, pJson["labels"], "OAIObject", "OAIObject");
    
    ::OpenAPI::setValue(&values, pJson["values"], "OAIObject", "OAIObject");
    
}

QString
OAIConfigNodePropertyDropDown_type::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIConfigNodePropertyDropDown_type::asJsonObject() {
    QJsonObject obj;
    if((labels != nullptr) && (labels->isSet())){
        toJsonValue(QString("labels"), labels, obj, QString("OAIObject"));
    }
    if((values != nullptr) && (values->isSet())){
        toJsonValue(QString("values"), values, obj, QString("OAIObject"));
    }

    return obj;
}

OAIObject*
OAIConfigNodePropertyDropDown_type::getLabels() {
    return labels;
}
void
OAIConfigNodePropertyDropDown_type::setLabels(OAIObject* labels) {
    this->labels = labels;
    this->m_labels_isSet = true;
}

OAIObject*
OAIConfigNodePropertyDropDown_type::getValues() {
    return values;
}
void
OAIConfigNodePropertyDropDown_type::setValues(OAIObject* values) {
    this->values = values;
    this->m_values_isSet = true;
}


bool
OAIConfigNodePropertyDropDown_type::isSet(){
    bool isObjectUpdated = false;
    do{
        if(labels != nullptr && labels->isSet()){ isObjectUpdated = true; break;}
        if(values != nullptr && values->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

