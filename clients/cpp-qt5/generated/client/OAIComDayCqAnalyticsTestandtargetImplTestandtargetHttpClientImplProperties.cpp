/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties() {
    init();
}

OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::~OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties() {
    this->cleanup();
}

void
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::init() {
    cq_analytics_testandtarget_api_url = new OAIConfigNodePropertyString();
    m_cq_analytics_testandtarget_api_url_isSet = false;
    cq_analytics_testandtarget_timeout = new OAIConfigNodePropertyInteger();
    m_cq_analytics_testandtarget_timeout_isSet = false;
    cq_analytics_testandtarget_sockettimeout = new OAIConfigNodePropertyInteger();
    m_cq_analytics_testandtarget_sockettimeout_isSet = false;
    cq_analytics_testandtarget_recommendations_url_replace = new OAIConfigNodePropertyString();
    m_cq_analytics_testandtarget_recommendations_url_replace_isSet = false;
    cq_analytics_testandtarget_recommendations_url_replacewith = new OAIConfigNodePropertyString();
    m_cq_analytics_testandtarget_recommendations_url_replacewith_isSet = false;
}

void
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cleanup() {
    if(cq_analytics_testandtarget_api_url != nullptr) { 
        delete cq_analytics_testandtarget_api_url;
    }
    if(cq_analytics_testandtarget_timeout != nullptr) { 
        delete cq_analytics_testandtarget_timeout;
    }
    if(cq_analytics_testandtarget_sockettimeout != nullptr) { 
        delete cq_analytics_testandtarget_sockettimeout;
    }
    if(cq_analytics_testandtarget_recommendations_url_replace != nullptr) { 
        delete cq_analytics_testandtarget_recommendations_url_replace;
    }
    if(cq_analytics_testandtarget_recommendations_url_replacewith != nullptr) { 
        delete cq_analytics_testandtarget_recommendations_url_replacewith;
    }
}

OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties*
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&cq_analytics_testandtarget_api_url, pJson["cq.analytics.testandtarget.api.url"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&cq_analytics_testandtarget_timeout, pJson["cq.analytics.testandtarget.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cq_analytics_testandtarget_sockettimeout, pJson["cq.analytics.testandtarget.sockettimeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cq_analytics_testandtarget_recommendations_url_replace, pJson["cq.analytics.testandtarget.recommendations.url.replace"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&cq_analytics_testandtarget_recommendations_url_replacewith, pJson["cq.analytics.testandtarget.recommendations.url.replacewith"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::asJsonObject() {
    QJsonObject obj;
    if((cq_analytics_testandtarget_api_url != nullptr) && (cq_analytics_testandtarget_api_url->isSet())){
        toJsonValue(QString("cq.analytics.testandtarget.api.url"), cq_analytics_testandtarget_api_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((cq_analytics_testandtarget_timeout != nullptr) && (cq_analytics_testandtarget_timeout->isSet())){
        toJsonValue(QString("cq.analytics.testandtarget.timeout"), cq_analytics_testandtarget_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cq_analytics_testandtarget_sockettimeout != nullptr) && (cq_analytics_testandtarget_sockettimeout->isSet())){
        toJsonValue(QString("cq.analytics.testandtarget.sockettimeout"), cq_analytics_testandtarget_sockettimeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cq_analytics_testandtarget_recommendations_url_replace != nullptr) && (cq_analytics_testandtarget_recommendations_url_replace->isSet())){
        toJsonValue(QString("cq.analytics.testandtarget.recommendations.url.replace"), cq_analytics_testandtarget_recommendations_url_replace, obj, QString("OAIConfigNodePropertyString"));
    }
    if((cq_analytics_testandtarget_recommendations_url_replacewith != nullptr) && (cq_analytics_testandtarget_recommendations_url_replacewith->isSet())){
        toJsonValue(QString("cq.analytics.testandtarget.recommendations.url.replacewith"), cq_analytics_testandtarget_recommendations_url_replacewith, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetApiUrl() {
    return cq_analytics_testandtarget_api_url;
}
void
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetApiUrl(OAIConfigNodePropertyString* cq_analytics_testandtarget_api_url) {
    this->cq_analytics_testandtarget_api_url = cq_analytics_testandtarget_api_url;
    this->m_cq_analytics_testandtarget_api_url_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetTimeout() {
    return cq_analytics_testandtarget_timeout;
}
void
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetTimeout(OAIConfigNodePropertyInteger* cq_analytics_testandtarget_timeout) {
    this->cq_analytics_testandtarget_timeout = cq_analytics_testandtarget_timeout;
    this->m_cq_analytics_testandtarget_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetSockettimeout() {
    return cq_analytics_testandtarget_sockettimeout;
}
void
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetSockettimeout(OAIConfigNodePropertyInteger* cq_analytics_testandtarget_sockettimeout) {
    this->cq_analytics_testandtarget_sockettimeout = cq_analytics_testandtarget_sockettimeout;
    this->m_cq_analytics_testandtarget_sockettimeout_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetRecommendationsUrlReplace() {
    return cq_analytics_testandtarget_recommendations_url_replace;
}
void
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetRecommendationsUrlReplace(OAIConfigNodePropertyString* cq_analytics_testandtarget_recommendations_url_replace) {
    this->cq_analytics_testandtarget_recommendations_url_replace = cq_analytics_testandtarget_recommendations_url_replace;
    this->m_cq_analytics_testandtarget_recommendations_url_replace_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetRecommendationsUrlReplacewith() {
    return cq_analytics_testandtarget_recommendations_url_replacewith;
}
void
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetRecommendationsUrlReplacewith(OAIConfigNodePropertyString* cq_analytics_testandtarget_recommendations_url_replacewith) {
    this->cq_analytics_testandtarget_recommendations_url_replacewith = cq_analytics_testandtarget_recommendations_url_replacewith;
    this->m_cq_analytics_testandtarget_recommendations_url_replacewith_isSet = true;
}


bool
OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(cq_analytics_testandtarget_api_url != nullptr && cq_analytics_testandtarget_api_url->isSet()){ isObjectUpdated = true; break;}
        if(cq_analytics_testandtarget_timeout != nullptr && cq_analytics_testandtarget_timeout->isSet()){ isObjectUpdated = true; break;}
        if(cq_analytics_testandtarget_sockettimeout != nullptr && cq_analytics_testandtarget_sockettimeout->isSet()){ isObjectUpdated = true; break;}
        if(cq_analytics_testandtarget_recommendations_url_replace != nullptr && cq_analytics_testandtarget_recommendations_url_replace->isSet()){ isObjectUpdated = true; break;}
        if(cq_analytics_testandtarget_recommendations_url_replacewith != nullptr && cq_analytics_testandtarget_recommendations_url_replacewith->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

