/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties()
{
    m_Provider_nameIsSet = false;
    m_Host_nameIsSet = false;
    m_Host_portIsSet = false;
    m_Host_sslIsSet = false;
    m_Host_tlsIsSet = false;
    m_Host_noCertCheckIsSet = false;
    m_Bind_dnIsSet = false;
    m_Bind_passwordIsSet = false;
    m_SearchTimeoutIsSet = false;
    m_AdminPool_maxActiveIsSet = false;
    m_AdminPool_lookupOnValidateIsSet = false;
    m_UserPool_maxActiveIsSet = false;
    m_UserPool_lookupOnValidateIsSet = false;
    m_User_baseDNIsSet = false;
    m_User_objectclassIsSet = false;
    m_User_idAttributeIsSet = false;
    m_User_extraFilterIsSet = false;
    m_User_makeDnPathIsSet = false;
    m_Group_baseDNIsSet = false;
    m_Group_objectclassIsSet = false;
    m_Group_nameAttributeIsSet = false;
    m_Group_extraFilterIsSet = false;
    m_Group_makeDnPathIsSet = false;
    m_Group_memberAttributeIsSet = false;
    m_UseUidForExtIdIsSet = false;
    m_CustomattributesIsSet = false;
}

OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::~OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties()
{
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Provider_nameIsSet)
    {
        val[utility::conversions::to_string_t("provider.name")] = ModelBase::toJson(m_Provider_name);
    }
    if(m_Host_nameIsSet)
    {
        val[utility::conversions::to_string_t("host.name")] = ModelBase::toJson(m_Host_name);
    }
    if(m_Host_portIsSet)
    {
        val[utility::conversions::to_string_t("host.port")] = ModelBase::toJson(m_Host_port);
    }
    if(m_Host_sslIsSet)
    {
        val[utility::conversions::to_string_t("host.ssl")] = ModelBase::toJson(m_Host_ssl);
    }
    if(m_Host_tlsIsSet)
    {
        val[utility::conversions::to_string_t("host.tls")] = ModelBase::toJson(m_Host_tls);
    }
    if(m_Host_noCertCheckIsSet)
    {
        val[utility::conversions::to_string_t("host.noCertCheck")] = ModelBase::toJson(m_Host_noCertCheck);
    }
    if(m_Bind_dnIsSet)
    {
        val[utility::conversions::to_string_t("bind.dn")] = ModelBase::toJson(m_Bind_dn);
    }
    if(m_Bind_passwordIsSet)
    {
        val[utility::conversions::to_string_t("bind.password")] = ModelBase::toJson(m_Bind_password);
    }
    if(m_SearchTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("searchTimeout")] = ModelBase::toJson(m_SearchTimeout);
    }
    if(m_AdminPool_maxActiveIsSet)
    {
        val[utility::conversions::to_string_t("adminPool.maxActive")] = ModelBase::toJson(m_AdminPool_maxActive);
    }
    if(m_AdminPool_lookupOnValidateIsSet)
    {
        val[utility::conversions::to_string_t("adminPool.lookupOnValidate")] = ModelBase::toJson(m_AdminPool_lookupOnValidate);
    }
    if(m_UserPool_maxActiveIsSet)
    {
        val[utility::conversions::to_string_t("userPool.maxActive")] = ModelBase::toJson(m_UserPool_maxActive);
    }
    if(m_UserPool_lookupOnValidateIsSet)
    {
        val[utility::conversions::to_string_t("userPool.lookupOnValidate")] = ModelBase::toJson(m_UserPool_lookupOnValidate);
    }
    if(m_User_baseDNIsSet)
    {
        val[utility::conversions::to_string_t("user.baseDN")] = ModelBase::toJson(m_User_baseDN);
    }
    if(m_User_objectclassIsSet)
    {
        val[utility::conversions::to_string_t("user.objectclass")] = ModelBase::toJson(m_User_objectclass);
    }
    if(m_User_idAttributeIsSet)
    {
        val[utility::conversions::to_string_t("user.idAttribute")] = ModelBase::toJson(m_User_idAttribute);
    }
    if(m_User_extraFilterIsSet)
    {
        val[utility::conversions::to_string_t("user.extraFilter")] = ModelBase::toJson(m_User_extraFilter);
    }
    if(m_User_makeDnPathIsSet)
    {
        val[utility::conversions::to_string_t("user.makeDnPath")] = ModelBase::toJson(m_User_makeDnPath);
    }
    if(m_Group_baseDNIsSet)
    {
        val[utility::conversions::to_string_t("group.baseDN")] = ModelBase::toJson(m_Group_baseDN);
    }
    if(m_Group_objectclassIsSet)
    {
        val[utility::conversions::to_string_t("group.objectclass")] = ModelBase::toJson(m_Group_objectclass);
    }
    if(m_Group_nameAttributeIsSet)
    {
        val[utility::conversions::to_string_t("group.nameAttribute")] = ModelBase::toJson(m_Group_nameAttribute);
    }
    if(m_Group_extraFilterIsSet)
    {
        val[utility::conversions::to_string_t("group.extraFilter")] = ModelBase::toJson(m_Group_extraFilter);
    }
    if(m_Group_makeDnPathIsSet)
    {
        val[utility::conversions::to_string_t("group.makeDnPath")] = ModelBase::toJson(m_Group_makeDnPath);
    }
    if(m_Group_memberAttributeIsSet)
    {
        val[utility::conversions::to_string_t("group.memberAttribute")] = ModelBase::toJson(m_Group_memberAttribute);
    }
    if(m_UseUidForExtIdIsSet)
    {
        val[utility::conversions::to_string_t("useUidForExtId")] = ModelBase::toJson(m_UseUidForExtId);
    }
    if(m_CustomattributesIsSet)
    {
        val[utility::conversions::to_string_t("customattributes")] = ModelBase::toJson(m_Customattributes);
    }

    return val;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("provider.name")))
    {
        if(!val[utility::conversions::to_string_t("provider.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("provider.name")]);
            setProviderName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("host.name")))
    {
        if(!val[utility::conversions::to_string_t("host.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("host.name")]);
            setHostName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("host.port")))
    {
        if(!val[utility::conversions::to_string_t("host.port")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("host.port")]);
            setHostPort( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("host.ssl")))
    {
        if(!val[utility::conversions::to_string_t("host.ssl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("host.ssl")]);
            setHostSsl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("host.tls")))
    {
        if(!val[utility::conversions::to_string_t("host.tls")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("host.tls")]);
            setHostTls( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("host.noCertCheck")))
    {
        if(!val[utility::conversions::to_string_t("host.noCertCheck")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("host.noCertCheck")]);
            setHostNoCertCheck( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bind.dn")))
    {
        if(!val[utility::conversions::to_string_t("bind.dn")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("bind.dn")]);
            setBindDn( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bind.password")))
    {
        if(!val[utility::conversions::to_string_t("bind.password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("bind.password")]);
            setBindPassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("searchTimeout")))
    {
        if(!val[utility::conversions::to_string_t("searchTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("searchTimeout")]);
            setSearchTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("adminPool.maxActive")))
    {
        if(!val[utility::conversions::to_string_t("adminPool.maxActive")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("adminPool.maxActive")]);
            setAdminPoolMaxActive( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("adminPool.lookupOnValidate")))
    {
        if(!val[utility::conversions::to_string_t("adminPool.lookupOnValidate")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("adminPool.lookupOnValidate")]);
            setAdminPoolLookupOnValidate( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userPool.maxActive")))
    {
        if(!val[utility::conversions::to_string_t("userPool.maxActive")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("userPool.maxActive")]);
            setUserPoolMaxActive( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userPool.lookupOnValidate")))
    {
        if(!val[utility::conversions::to_string_t("userPool.lookupOnValidate")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("userPool.lookupOnValidate")]);
            setUserPoolLookupOnValidate( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.baseDN")))
    {
        if(!val[utility::conversions::to_string_t("user.baseDN")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("user.baseDN")]);
            setUserBaseDN( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.objectclass")))
    {
        if(!val[utility::conversions::to_string_t("user.objectclass")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("user.objectclass")]);
            setUserObjectclass( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.idAttribute")))
    {
        if(!val[utility::conversions::to_string_t("user.idAttribute")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("user.idAttribute")]);
            setUserIdAttribute( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.extraFilter")))
    {
        if(!val[utility::conversions::to_string_t("user.extraFilter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("user.extraFilter")]);
            setUserExtraFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.makeDnPath")))
    {
        if(!val[utility::conversions::to_string_t("user.makeDnPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("user.makeDnPath")]);
            setUserMakeDnPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.baseDN")))
    {
        if(!val[utility::conversions::to_string_t("group.baseDN")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("group.baseDN")]);
            setGroupBaseDN( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.objectclass")))
    {
        if(!val[utility::conversions::to_string_t("group.objectclass")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("group.objectclass")]);
            setGroupObjectclass( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.nameAttribute")))
    {
        if(!val[utility::conversions::to_string_t("group.nameAttribute")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("group.nameAttribute")]);
            setGroupNameAttribute( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.extraFilter")))
    {
        if(!val[utility::conversions::to_string_t("group.extraFilter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("group.extraFilter")]);
            setGroupExtraFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.makeDnPath")))
    {
        if(!val[utility::conversions::to_string_t("group.makeDnPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("group.makeDnPath")]);
            setGroupMakeDnPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.memberAttribute")))
    {
        if(!val[utility::conversions::to_string_t("group.memberAttribute")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("group.memberAttribute")]);
            setGroupMemberAttribute( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("useUidForExtId")))
    {
        if(!val[utility::conversions::to_string_t("useUidForExtId")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("useUidForExtId")]);
            setUseUidForExtId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customattributes")))
    {
        if(!val[utility::conversions::to_string_t("customattributes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("customattributes")]);
            setCustomattributes( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Provider_nameIsSet)
    {
        if (m_Provider_name.get())
        {
            m_Provider_name->toMultipart(multipart, utility::conversions::to_string_t("provider.name."));
        }
    }
    if(m_Host_nameIsSet)
    {
        if (m_Host_name.get())
        {
            m_Host_name->toMultipart(multipart, utility::conversions::to_string_t("host.name."));
        }
    }
    if(m_Host_portIsSet)
    {
        if (m_Host_port.get())
        {
            m_Host_port->toMultipart(multipart, utility::conversions::to_string_t("host.port."));
        }
    }
    if(m_Host_sslIsSet)
    {
        if (m_Host_ssl.get())
        {
            m_Host_ssl->toMultipart(multipart, utility::conversions::to_string_t("host.ssl."));
        }
    }
    if(m_Host_tlsIsSet)
    {
        if (m_Host_tls.get())
        {
            m_Host_tls->toMultipart(multipart, utility::conversions::to_string_t("host.tls."));
        }
    }
    if(m_Host_noCertCheckIsSet)
    {
        if (m_Host_noCertCheck.get())
        {
            m_Host_noCertCheck->toMultipart(multipart, utility::conversions::to_string_t("host.noCertCheck."));
        }
    }
    if(m_Bind_dnIsSet)
    {
        if (m_Bind_dn.get())
        {
            m_Bind_dn->toMultipart(multipart, utility::conversions::to_string_t("bind.dn."));
        }
    }
    if(m_Bind_passwordIsSet)
    {
        if (m_Bind_password.get())
        {
            m_Bind_password->toMultipart(multipart, utility::conversions::to_string_t("bind.password."));
        }
    }
    if(m_SearchTimeoutIsSet)
    {
        if (m_SearchTimeout.get())
        {
            m_SearchTimeout->toMultipart(multipart, utility::conversions::to_string_t("searchTimeout."));
        }
    }
    if(m_AdminPool_maxActiveIsSet)
    {
        if (m_AdminPool_maxActive.get())
        {
            m_AdminPool_maxActive->toMultipart(multipart, utility::conversions::to_string_t("adminPool.maxActive."));
        }
    }
    if(m_AdminPool_lookupOnValidateIsSet)
    {
        if (m_AdminPool_lookupOnValidate.get())
        {
            m_AdminPool_lookupOnValidate->toMultipart(multipart, utility::conversions::to_string_t("adminPool.lookupOnValidate."));
        }
    }
    if(m_UserPool_maxActiveIsSet)
    {
        if (m_UserPool_maxActive.get())
        {
            m_UserPool_maxActive->toMultipart(multipart, utility::conversions::to_string_t("userPool.maxActive."));
        }
    }
    if(m_UserPool_lookupOnValidateIsSet)
    {
        if (m_UserPool_lookupOnValidate.get())
        {
            m_UserPool_lookupOnValidate->toMultipart(multipart, utility::conversions::to_string_t("userPool.lookupOnValidate."));
        }
    }
    if(m_User_baseDNIsSet)
    {
        if (m_User_baseDN.get())
        {
            m_User_baseDN->toMultipart(multipart, utility::conversions::to_string_t("user.baseDN."));
        }
    }
    if(m_User_objectclassIsSet)
    {
        if (m_User_objectclass.get())
        {
            m_User_objectclass->toMultipart(multipart, utility::conversions::to_string_t("user.objectclass."));
        }
    }
    if(m_User_idAttributeIsSet)
    {
        if (m_User_idAttribute.get())
        {
            m_User_idAttribute->toMultipart(multipart, utility::conversions::to_string_t("user.idAttribute."));
        }
    }
    if(m_User_extraFilterIsSet)
    {
        if (m_User_extraFilter.get())
        {
            m_User_extraFilter->toMultipart(multipart, utility::conversions::to_string_t("user.extraFilter."));
        }
    }
    if(m_User_makeDnPathIsSet)
    {
        if (m_User_makeDnPath.get())
        {
            m_User_makeDnPath->toMultipart(multipart, utility::conversions::to_string_t("user.makeDnPath."));
        }
    }
    if(m_Group_baseDNIsSet)
    {
        if (m_Group_baseDN.get())
        {
            m_Group_baseDN->toMultipart(multipart, utility::conversions::to_string_t("group.baseDN."));
        }
    }
    if(m_Group_objectclassIsSet)
    {
        if (m_Group_objectclass.get())
        {
            m_Group_objectclass->toMultipart(multipart, utility::conversions::to_string_t("group.objectclass."));
        }
    }
    if(m_Group_nameAttributeIsSet)
    {
        if (m_Group_nameAttribute.get())
        {
            m_Group_nameAttribute->toMultipart(multipart, utility::conversions::to_string_t("group.nameAttribute."));
        }
    }
    if(m_Group_extraFilterIsSet)
    {
        if (m_Group_extraFilter.get())
        {
            m_Group_extraFilter->toMultipart(multipart, utility::conversions::to_string_t("group.extraFilter."));
        }
    }
    if(m_Group_makeDnPathIsSet)
    {
        if (m_Group_makeDnPath.get())
        {
            m_Group_makeDnPath->toMultipart(multipart, utility::conversions::to_string_t("group.makeDnPath."));
        }
    }
    if(m_Group_memberAttributeIsSet)
    {
        if (m_Group_memberAttribute.get())
        {
            m_Group_memberAttribute->toMultipart(multipart, utility::conversions::to_string_t("group.memberAttribute."));
        }
    }
    if(m_UseUidForExtIdIsSet)
    {
        if (m_UseUidForExtId.get())
        {
            m_UseUidForExtId->toMultipart(multipart, utility::conversions::to_string_t("useUidForExtId."));
        }
    }
    if(m_CustomattributesIsSet)
    {
        if (m_Customattributes.get())
        {
            m_Customattributes->toMultipart(multipart, utility::conversions::to_string_t("customattributes."));
        }
    }
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("provider.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("provider.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("provider.name."));
            setProviderName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("host.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("host.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("host.name."));
            setHostName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("host.port")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("host.port")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("host.port."));
            setHostPort( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("host.ssl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("host.ssl")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("host.ssl."));
            setHostSsl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("host.tls")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("host.tls")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("host.tls."));
            setHostTls( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("host.noCertCheck")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("host.noCertCheck")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("host.noCertCheck."));
            setHostNoCertCheck( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bind.dn")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("bind.dn")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("bind.dn."));
            setBindDn( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bind.password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("bind.password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("bind.password."));
            setBindPassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("searchTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("searchTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("searchTimeout."));
            setSearchTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("adminPool.maxActive")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("adminPool.maxActive")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("adminPool.maxActive."));
            setAdminPoolMaxActive( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("adminPool.lookupOnValidate")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("adminPool.lookupOnValidate")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("adminPool.lookupOnValidate."));
            setAdminPoolLookupOnValidate( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userPool.maxActive")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("userPool.maxActive")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("userPool.maxActive."));
            setUserPoolMaxActive( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userPool.lookupOnValidate")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("userPool.lookupOnValidate")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("userPool.lookupOnValidate."));
            setUserPoolLookupOnValidate( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.baseDN")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.baseDN")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.baseDN."));
            setUserBaseDN( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.objectclass")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.objectclass")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.objectclass."));
            setUserObjectclass( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.idAttribute")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.idAttribute")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.idAttribute."));
            setUserIdAttribute( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.extraFilter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.extraFilter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.extraFilter."));
            setUserExtraFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.makeDnPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.makeDnPath")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.makeDnPath."));
            setUserMakeDnPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.baseDN")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.baseDN")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.baseDN."));
            setGroupBaseDN( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.objectclass")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.objectclass")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.objectclass."));
            setGroupObjectclass( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.nameAttribute")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.nameAttribute")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.nameAttribute."));
            setGroupNameAttribute( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.extraFilter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.extraFilter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.extraFilter."));
            setGroupExtraFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.makeDnPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.makeDnPath")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.makeDnPath."));
            setGroupMakeDnPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.memberAttribute")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.memberAttribute")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.memberAttribute."));
            setGroupMemberAttribute( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("useUidForExtId")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("useUidForExtId")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("useUidForExtId."));
            setUseUidForExtId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customattributes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("customattributes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("customattributes."));
            setCustomattributes( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getProviderName() const
{
    return m_Provider_name;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setProviderName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Provider_name = value;
    m_Provider_nameIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::providerNameIsSet() const
{
    return m_Provider_nameIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetProvider_name()
{
    m_Provider_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getHostName() const
{
    return m_Host_name;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setHostName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Host_name = value;
    m_Host_nameIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::hostNameIsSet() const
{
    return m_Host_nameIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetHost_name()
{
    m_Host_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getHostPort() const
{
    return m_Host_port;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setHostPort(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Host_port = value;
    m_Host_portIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::hostPortIsSet() const
{
    return m_Host_portIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetHost_port()
{
    m_Host_portIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getHostSsl() const
{
    return m_Host_ssl;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setHostSsl(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Host_ssl = value;
    m_Host_sslIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::hostSslIsSet() const
{
    return m_Host_sslIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetHost_ssl()
{
    m_Host_sslIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getHostTls() const
{
    return m_Host_tls;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setHostTls(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Host_tls = value;
    m_Host_tlsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::hostTlsIsSet() const
{
    return m_Host_tlsIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetHost_tls()
{
    m_Host_tlsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getHostNoCertCheck() const
{
    return m_Host_noCertCheck;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setHostNoCertCheck(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Host_noCertCheck = value;
    m_Host_noCertCheckIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::hostNoCertCheckIsSet() const
{
    return m_Host_noCertCheckIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetHost_noCertCheck()
{
    m_Host_noCertCheckIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getBindDn() const
{
    return m_Bind_dn;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setBindDn(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Bind_dn = value;
    m_Bind_dnIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::bindDnIsSet() const
{
    return m_Bind_dnIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetBind_dn()
{
    m_Bind_dnIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getBindPassword() const
{
    return m_Bind_password;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setBindPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Bind_password = value;
    m_Bind_passwordIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::bindPasswordIsSet() const
{
    return m_Bind_passwordIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetBind_password()
{
    m_Bind_passwordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getSearchTimeout() const
{
    return m_SearchTimeout;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setSearchTimeout(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_SearchTimeout = value;
    m_SearchTimeoutIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::searchTimeoutIsSet() const
{
    return m_SearchTimeoutIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetSearchTimeout()
{
    m_SearchTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getAdminPoolMaxActive() const
{
    return m_AdminPool_maxActive;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setAdminPoolMaxActive(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_AdminPool_maxActive = value;
    m_AdminPool_maxActiveIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::adminPoolMaxActiveIsSet() const
{
    return m_AdminPool_maxActiveIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetAdminPool_maxActive()
{
    m_AdminPool_maxActiveIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getAdminPoolLookupOnValidate() const
{
    return m_AdminPool_lookupOnValidate;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setAdminPoolLookupOnValidate(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_AdminPool_lookupOnValidate = value;
    m_AdminPool_lookupOnValidateIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::adminPoolLookupOnValidateIsSet() const
{
    return m_AdminPool_lookupOnValidateIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetAdminPool_lookupOnValidate()
{
    m_AdminPool_lookupOnValidateIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getUserPoolMaxActive() const
{
    return m_UserPool_maxActive;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setUserPoolMaxActive(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_UserPool_maxActive = value;
    m_UserPool_maxActiveIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::userPoolMaxActiveIsSet() const
{
    return m_UserPool_maxActiveIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetUserPool_maxActive()
{
    m_UserPool_maxActiveIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getUserPoolLookupOnValidate() const
{
    return m_UserPool_lookupOnValidate;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setUserPoolLookupOnValidate(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_UserPool_lookupOnValidate = value;
    m_UserPool_lookupOnValidateIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::userPoolLookupOnValidateIsSet() const
{
    return m_UserPool_lookupOnValidateIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetUserPool_lookupOnValidate()
{
    m_UserPool_lookupOnValidateIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getUserBaseDN() const
{
    return m_User_baseDN;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setUserBaseDN(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_User_baseDN = value;
    m_User_baseDNIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::userBaseDNIsSet() const
{
    return m_User_baseDNIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetUser_baseDN()
{
    m_User_baseDNIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getUserObjectclass() const
{
    return m_User_objectclass;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setUserObjectclass(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_User_objectclass = value;
    m_User_objectclassIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::userObjectclassIsSet() const
{
    return m_User_objectclassIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetUser_objectclass()
{
    m_User_objectclassIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getUserIdAttribute() const
{
    return m_User_idAttribute;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setUserIdAttribute(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_User_idAttribute = value;
    m_User_idAttributeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::userIdAttributeIsSet() const
{
    return m_User_idAttributeIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetUser_idAttribute()
{
    m_User_idAttributeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getUserExtraFilter() const
{
    return m_User_extraFilter;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setUserExtraFilter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_User_extraFilter = value;
    m_User_extraFilterIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::userExtraFilterIsSet() const
{
    return m_User_extraFilterIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetUser_extraFilter()
{
    m_User_extraFilterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getUserMakeDnPath() const
{
    return m_User_makeDnPath;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setUserMakeDnPath(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_User_makeDnPath = value;
    m_User_makeDnPathIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::userMakeDnPathIsSet() const
{
    return m_User_makeDnPathIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetUser_makeDnPath()
{
    m_User_makeDnPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getGroupBaseDN() const
{
    return m_Group_baseDN;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setGroupBaseDN(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Group_baseDN = value;
    m_Group_baseDNIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::groupBaseDNIsSet() const
{
    return m_Group_baseDNIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetGroup_baseDN()
{
    m_Group_baseDNIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getGroupObjectclass() const
{
    return m_Group_objectclass;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setGroupObjectclass(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Group_objectclass = value;
    m_Group_objectclassIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::groupObjectclassIsSet() const
{
    return m_Group_objectclassIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetGroup_objectclass()
{
    m_Group_objectclassIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getGroupNameAttribute() const
{
    return m_Group_nameAttribute;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setGroupNameAttribute(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Group_nameAttribute = value;
    m_Group_nameAttributeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::groupNameAttributeIsSet() const
{
    return m_Group_nameAttributeIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetGroup_nameAttribute()
{
    m_Group_nameAttributeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getGroupExtraFilter() const
{
    return m_Group_extraFilter;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setGroupExtraFilter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Group_extraFilter = value;
    m_Group_extraFilterIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::groupExtraFilterIsSet() const
{
    return m_Group_extraFilterIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetGroup_extraFilter()
{
    m_Group_extraFilterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getGroupMakeDnPath() const
{
    return m_Group_makeDnPath;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setGroupMakeDnPath(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Group_makeDnPath = value;
    m_Group_makeDnPathIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::groupMakeDnPathIsSet() const
{
    return m_Group_makeDnPathIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetGroup_makeDnPath()
{
    m_Group_makeDnPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getGroupMemberAttribute() const
{
    return m_Group_memberAttribute;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setGroupMemberAttribute(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Group_memberAttribute = value;
    m_Group_memberAttributeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::groupMemberAttributeIsSet() const
{
    return m_Group_memberAttributeIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetGroup_memberAttribute()
{
    m_Group_memberAttributeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getUseUidForExtId() const
{
    return m_UseUidForExtId;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setUseUidForExtId(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_UseUidForExtId = value;
    m_UseUidForExtIdIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::useUidForExtIdIsSet() const
{
    return m_UseUidForExtIdIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetUseUidForExtId()
{
    m_UseUidForExtIdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::getCustomattributes() const
{
    return m_Customattributes;
}


void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::setCustomattributes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Customattributes = value;
    m_CustomattributesIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::customattributesIsSet() const
{
    return m_CustomattributesIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties::unsetCustomattributes()
{
    m_CustomattributesIsSet = false;
}

}
}
}
}

