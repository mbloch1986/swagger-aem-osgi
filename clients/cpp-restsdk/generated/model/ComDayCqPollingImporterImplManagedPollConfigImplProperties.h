/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqPollingImporterImplManagedPollConfigImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqPollingImporterImplManagedPollConfigImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqPollingImporterImplManagedPollConfigImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqPollingImporterImplManagedPollConfigImplProperties
    : public ModelBase
{
public:
    ComDayCqPollingImporterImplManagedPollConfigImplProperties();
    virtual ~ComDayCqPollingImporterImplManagedPollConfigImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqPollingImporterImplManagedPollConfigImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();
    void setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getReference() const;
    bool referenceIsSet() const;
    void unsetReference();
    void setReference(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getInterval() const;
    bool intervalIsSet() const;
    void unsetInterval();
    void setInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getExpression() const;
    bool expressionIsSet() const;
    void unsetExpression();
    void setExpression(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSource() const;
    bool sourceIsSet() const;
    void unsetSource();
    void setSource(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTarget() const;
    bool targetIsSet() const;
    void unsetTarget();
    void setTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLogin() const;
    bool loginIsSet() const;
    void unsetLogin();
    void setLogin(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPassword() const;
    bool passwordIsSet() const;
    void unsetPassword();
    void setPassword(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Id;
    bool m_IdIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enabled;
    bool m_EnabledIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Reference;
    bool m_ReferenceIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Interval;
    bool m_IntervalIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Expression;
    bool m_ExpressionIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Source;
    bool m_SourceIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Target;
    bool m_TargetIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Login;
    bool m_LoginIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Password;
    bool m_PasswordIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqPollingImporterImplManagedPollConfigImplProperties_H_ */
