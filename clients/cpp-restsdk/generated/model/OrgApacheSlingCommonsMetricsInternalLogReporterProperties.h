/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingCommonsMetricsInternalLogReporterProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingCommonsMetricsInternalLogReporterProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingCommonsMetricsInternalLogReporterProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingCommonsMetricsInternalLogReporterProperties
    : public ModelBase
{
public:
    OrgApacheSlingCommonsMetricsInternalLogReporterProperties();
    virtual ~OrgApacheSlingCommonsMetricsInternalLogReporterProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingCommonsMetricsInternalLogReporterProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPeriod() const;
    bool periodIsSet() const;
    void unsetPeriod();
    void setPeriod(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getTimeUnit() const;
    bool timeUnitIsSet() const;
    void unsetTimeUnit();
    void setTimeUnit(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getLevel() const;
    bool levelIsSet() const;
    void unsetLevel();
    void setLevel(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLoggerName() const;
    bool loggerNameIsSet() const;
    void unsetLoggerName();
    void setLoggerName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPrefix() const;
    bool prefixIsSet() const;
    void unsetPrefix();
    void setPrefix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPattern() const;
    bool patternIsSet() const;
    void unsetPattern();
    void setPattern(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRegistryName() const;
    bool registryNameIsSet() const;
    void unsetRegistryName();
    void setRegistryName(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Period;
    bool m_PeriodIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_TimeUnit;
    bool m_TimeUnitIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Level;
    bool m_LevelIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_LoggerName;
    bool m_LoggerNameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Prefix;
    bool m_PrefixIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Pattern;
    bool m_PatternIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_RegistryName;
    bool m_RegistryNameIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingCommonsMetricsInternalLogReporterProperties_H_ */
