/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties() {
    this->init();
}

OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::~OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties() {
    
}

void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::init() {
    m_org_apache_sling_installer_configuration_persist_isSet = false;
    m_mode_isSet = false;
    m_port_isSet = false;
    m_primary_host_isSet = false;
    m_interval_isSet = false;
    m_primary_allowed_client_ip_ranges_isSet = false;
    m_secure_isSet = false;
    m_standby_readtimeout_isSet = false;
    m_standby_autoclean_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(org_apache_sling_installer_configuration_persist, json[QString("org.apache.sling.installer.configuration.persist")]);
    
    ::OpenAPI::fromJsonValue(mode, json[QString("mode")]);
    
    ::OpenAPI::fromJsonValue(port, json[QString("port")]);
    
    ::OpenAPI::fromJsonValue(primary_host, json[QString("primary.host")]);
    
    ::OpenAPI::fromJsonValue(interval, json[QString("interval")]);
    
    ::OpenAPI::fromJsonValue(primary_allowed_client_ip_ranges, json[QString("primary.allowed-client-ip-ranges")]);
    
    ::OpenAPI::fromJsonValue(secure, json[QString("secure")]);
    
    ::OpenAPI::fromJsonValue(standby_readtimeout, json[QString("standby.readtimeout")]);
    
    ::OpenAPI::fromJsonValue(standby_autoclean, json[QString("standby.autoclean")]);
    
}

QString
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::asJsonObject() const {
    QJsonObject obj;
	if(org_apache_sling_installer_configuration_persist.isSet()){
        obj.insert(QString("org.apache.sling.installer.configuration.persist"), ::OpenAPI::toJsonValue(org_apache_sling_installer_configuration_persist));
    }
	if(mode.isSet()){
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(mode));
    }
	if(port.isSet()){
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(port));
    }
	if(primary_host.isSet()){
        obj.insert(QString("primary.host"), ::OpenAPI::toJsonValue(primary_host));
    }
	if(interval.isSet()){
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(interval));
    }
	if(primary_allowed_client_ip_ranges.isSet()){
        obj.insert(QString("primary.allowed-client-ip-ranges"), ::OpenAPI::toJsonValue(primary_allowed_client_ip_ranges));
    }
	if(secure.isSet()){
        obj.insert(QString("secure"), ::OpenAPI::toJsonValue(secure));
    }
	if(standby_readtimeout.isSet()){
        obj.insert(QString("standby.readtimeout"), ::OpenAPI::toJsonValue(standby_readtimeout));
    }
	if(standby_autoclean.isSet()){
        obj.insert(QString("standby.autoclean"), ::OpenAPI::toJsonValue(standby_autoclean));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getOrgApacheSlingInstallerConfigurationPersist() const {
    return org_apache_sling_installer_configuration_persist;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setOrgApacheSlingInstallerConfigurationPersist(const OAIConfigNodePropertyBoolean &org_apache_sling_installer_configuration_persist) {
    this->org_apache_sling_installer_configuration_persist = org_apache_sling_installer_configuration_persist;
    this->m_org_apache_sling_installer_configuration_persist_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getMode() const {
    return mode;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setMode(const OAIConfigNodePropertyDropDown &mode) {
    this->mode = mode;
    this->m_mode_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPort() const {
    return port;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPort(const OAIConfigNodePropertyInteger &port) {
    this->port = port;
    this->m_port_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPrimaryHost() const {
    return primary_host;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPrimaryHost(const OAIConfigNodePropertyString &primary_host) {
    this->primary_host = primary_host;
    this->m_primary_host_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getInterval() const {
    return interval;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setInterval(const OAIConfigNodePropertyInteger &interval) {
    this->interval = interval;
    this->m_interval_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPrimaryAllowedClientIpRanges() const {
    return primary_allowed_client_ip_ranges;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPrimaryAllowedClientIpRanges(const OAIConfigNodePropertyArray &primary_allowed_client_ip_ranges) {
    this->primary_allowed_client_ip_ranges = primary_allowed_client_ip_ranges;
    this->m_primary_allowed_client_ip_ranges_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getSecure() const {
    return secure;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setSecure(const OAIConfigNodePropertyBoolean &secure) {
    this->secure = secure;
    this->m_secure_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getStandbyReadtimeout() const {
    return standby_readtimeout;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setStandbyReadtimeout(const OAIConfigNodePropertyInteger &standby_readtimeout) {
    this->standby_readtimeout = standby_readtimeout;
    this->m_standby_readtimeout_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getStandbyAutoclean() const {
    return standby_autoclean;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setStandbyAutoclean(const OAIConfigNodePropertyBoolean &standby_autoclean) {
    this->standby_autoclean = standby_autoclean;
    this->m_standby_autoclean_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(org_apache_sling_installer_configuration_persist.isSet()){ isObjectUpdated = true; break;}
    
        if(mode.isSet()){ isObjectUpdated = true; break;}
    
        if(port.isSet()){ isObjectUpdated = true; break;}
    
        if(primary_host.isSet()){ isObjectUpdated = true; break;}
    
        if(interval.isSet()){ isObjectUpdated = true; break;}
    
        if(primary_allowed_client_ip_ranges.isSet()){ isObjectUpdated = true; break;}
    
        if(secure.isSet()){ isObjectUpdated = true; break;}
    
        if(standby_readtimeout.isSet()){ isObjectUpdated = true; break;}
    
        if(standby_autoclean.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

