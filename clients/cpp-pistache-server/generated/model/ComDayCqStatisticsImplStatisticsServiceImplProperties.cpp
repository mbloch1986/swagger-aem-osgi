/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqStatisticsImplStatisticsServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqStatisticsImplStatisticsServiceImplProperties::ComDayCqStatisticsImplStatisticsServiceImplProperties()
{
    m_Scheduler_periodIsSet = false;
    m_Scheduler_concurrentIsSet = false;
    m_PathIsSet = false;
    m_WorkspaceIsSet = false;
    m_KeywordsPathIsSet = false;
    m_AsyncEntriesIsSet = false;
    
}

ComDayCqStatisticsImplStatisticsServiceImplProperties::~ComDayCqStatisticsImplStatisticsServiceImplProperties()
{
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqStatisticsImplStatisticsServiceImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Scheduler_periodIsSet)
    {
        val["scheduler.period"] = ModelBase::toJson(m_Scheduler_period);
    }
    if(m_Scheduler_concurrentIsSet)
    {
        val["scheduler.concurrent"] = ModelBase::toJson(m_Scheduler_concurrent);
    }
    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_WorkspaceIsSet)
    {
        val["workspace"] = ModelBase::toJson(m_Workspace);
    }
    if(m_KeywordsPathIsSet)
    {
        val["keywordsPath"] = ModelBase::toJson(m_KeywordsPath);
    }
    if(m_AsyncEntriesIsSet)
    {
        val["asyncEntries"] = ModelBase::toJson(m_AsyncEntries);
    }
    

    return val;
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("scheduler.period") != val.end())
    {
        if(!val["scheduler.period"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["scheduler.period"]);
            setSchedulerPeriod( newItem );
        }
        
    }
    if(val.find("scheduler.concurrent") != val.end())
    {
        if(!val["scheduler.concurrent"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["scheduler.concurrent"]);
            setSchedulerConcurrent( newItem );
        }
        
    }
    if(val.find("path") != val.end())
    {
        if(!val["path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path"]);
            setPath( newItem );
        }
        
    }
    if(val.find("workspace") != val.end())
    {
        if(!val["workspace"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["workspace"]);
            setWorkspace( newItem );
        }
        
    }
    if(val.find("keywordsPath") != val.end())
    {
        if(!val["keywordsPath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["keywordsPath"]);
            setKeywordsPath( newItem );
        }
        
    }
    if(val.find("asyncEntries") != val.end())
    {
        if(!val["asyncEntries"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["asyncEntries"]);
            setAsyncEntries( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComDayCqStatisticsImplStatisticsServiceImplProperties::getSchedulerPeriod() const
{
    return m_Scheduler_period;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::setSchedulerPeriod(ConfigNodePropertyInteger const& value)
{
    m_Scheduler_period = value;
    m_Scheduler_periodIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::schedulerPeriodIsSet() const
{
    return m_Scheduler_periodIsSet;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetScheduler_period()
{
    m_Scheduler_periodIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqStatisticsImplStatisticsServiceImplProperties::getSchedulerConcurrent() const
{
    return m_Scheduler_concurrent;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::setSchedulerConcurrent(ConfigNodePropertyBoolean const& value)
{
    m_Scheduler_concurrent = value;
    m_Scheduler_concurrentIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::schedulerConcurrentIsSet() const
{
    return m_Scheduler_concurrentIsSet;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetScheduler_concurrent()
{
    m_Scheduler_concurrentIsSet = false;
}
ConfigNodePropertyString ComDayCqStatisticsImplStatisticsServiceImplProperties::getPath() const
{
    return m_Path;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::setPath(ConfigNodePropertyString const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::pathIsSet() const
{
    return m_PathIsSet;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetPath()
{
    m_PathIsSet = false;
}
ConfigNodePropertyString ComDayCqStatisticsImplStatisticsServiceImplProperties::getWorkspace() const
{
    return m_Workspace;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::setWorkspace(ConfigNodePropertyString const& value)
{
    m_Workspace = value;
    m_WorkspaceIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::workspaceIsSet() const
{
    return m_WorkspaceIsSet;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetWorkspace()
{
    m_WorkspaceIsSet = false;
}
ConfigNodePropertyString ComDayCqStatisticsImplStatisticsServiceImplProperties::getKeywordsPath() const
{
    return m_KeywordsPath;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::setKeywordsPath(ConfigNodePropertyString const& value)
{
    m_KeywordsPath = value;
    m_KeywordsPathIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::keywordsPathIsSet() const
{
    return m_KeywordsPathIsSet;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetKeywordsPath()
{
    m_KeywordsPathIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqStatisticsImplStatisticsServiceImplProperties::getAsyncEntries() const
{
    return m_AsyncEntries;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::setAsyncEntries(ConfigNodePropertyBoolean const& value)
{
    m_AsyncEntries = value;
    m_AsyncEntriesIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::asyncEntriesIsSet() const
{
    return m_AsyncEntriesIsSet;
}
void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetAsyncEntries()
{
    m_AsyncEntriesIsSet = false;
}

}
}
}
}

