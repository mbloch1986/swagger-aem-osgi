/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H
#define OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H

#include <QJsonObject>


#include "OAIConfigNodePropertyBoolean.h"
#include "OAIConfigNodePropertyDropDown.h"
#include "OAIConfigNodePropertyInteger.h"
#include "OAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties: public OAIObject {
public:
    OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties();
    OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties(QString json);
    ~OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigNodePropertyString getName() const;
    void setName(const OAIConfigNodePropertyString &name);

    OAIConfigNodePropertyInteger getMinPoolSize() const;
    void setMinPoolSize(const OAIConfigNodePropertyInteger &min_pool_size);

    OAIConfigNodePropertyInteger getMaxPoolSize() const;
    void setMaxPoolSize(const OAIConfigNodePropertyInteger &max_pool_size);

    OAIConfigNodePropertyInteger getQueueSize() const;
    void setQueueSize(const OAIConfigNodePropertyInteger &queue_size);

    OAIConfigNodePropertyInteger getMaxThreadAge() const;
    void setMaxThreadAge(const OAIConfigNodePropertyInteger &max_thread_age);

    OAIConfigNodePropertyInteger getKeepAliveTime() const;
    void setKeepAliveTime(const OAIConfigNodePropertyInteger &keep_alive_time);

    OAIConfigNodePropertyDropDown getBlockPolicy() const;
    void setBlockPolicy(const OAIConfigNodePropertyDropDown &block_policy);

    OAIConfigNodePropertyBoolean getShutdownGraceful() const;
    void setShutdownGraceful(const OAIConfigNodePropertyBoolean &shutdown_graceful);

    OAIConfigNodePropertyBoolean getDaemon() const;
    void setDaemon(const OAIConfigNodePropertyBoolean &daemon);

    OAIConfigNodePropertyInteger getShutdownWaitTime() const;
    void setShutdownWaitTime(const OAIConfigNodePropertyInteger &shutdown_wait_time);

    OAIConfigNodePropertyDropDown getPriority() const;
    void setPriority(const OAIConfigNodePropertyDropDown &priority);

    virtual bool isSet() const override;

private:
    OAIConfigNodePropertyString name;
    bool m_name_isSet;

    OAIConfigNodePropertyInteger min_pool_size;
    bool m_min_pool_size_isSet;

    OAIConfigNodePropertyInteger max_pool_size;
    bool m_max_pool_size_isSet;

    OAIConfigNodePropertyInteger queue_size;
    bool m_queue_size_isSet;

    OAIConfigNodePropertyInteger max_thread_age;
    bool m_max_thread_age_isSet;

    OAIConfigNodePropertyInteger keep_alive_time;
    bool m_keep_alive_time_isSet;

    OAIConfigNodePropertyDropDown block_policy;
    bool m_block_policy_isSet;

    OAIConfigNodePropertyBoolean shutdown_graceful;
    bool m_shutdown_graceful_isSet;

    OAIConfigNodePropertyBoolean daemon;
    bool m_daemon_isSet;

    OAIConfigNodePropertyInteger shutdown_wait_time;
    bool m_shutdown_wait_time_isSet;

    OAIConfigNodePropertyDropDown priority;
    bool m_priority_isSet;

};

}

#endif // OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H
