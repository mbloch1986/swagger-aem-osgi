/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
  #[serde(rename = "enable.token.cleanup.task")]
  enable_token_cleanup_task: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "scheduler.expression")]
  scheduler_expression: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "batch.size")]
  batch_size: Option<::models::ConfigNodePropertyInteger>
}

impl ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
  pub fn new() -> ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
    ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
      enable_token_cleanup_task: None,
      scheduler_expression: None,
      batch_size: None
    }
  }

  pub fn set_enable_token_cleanup_task(&mut self, enable_token_cleanup_task: ::models::ConfigNodePropertyBoolean) {
    self.enable_token_cleanup_task = Some(enable_token_cleanup_task);
  }

  pub fn with_enable_token_cleanup_task(mut self, enable_token_cleanup_task: ::models::ConfigNodePropertyBoolean) -> ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
    self.enable_token_cleanup_task = Some(enable_token_cleanup_task);
    self
  }

  pub fn enable_token_cleanup_task(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_token_cleanup_task.as_ref()
  }

  pub fn reset_enable_token_cleanup_task(&mut self) {
    self.enable_token_cleanup_task = None;
  }

  pub fn set_scheduler_expression(&mut self, scheduler_expression: ::models::ConfigNodePropertyString) {
    self.scheduler_expression = Some(scheduler_expression);
  }

  pub fn with_scheduler_expression(mut self, scheduler_expression: ::models::ConfigNodePropertyString) -> ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
    self.scheduler_expression = Some(scheduler_expression);
    self
  }

  pub fn scheduler_expression(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.scheduler_expression.as_ref()
  }

  pub fn reset_scheduler_expression(&mut self) {
    self.scheduler_expression = None;
  }

  pub fn set_batch_size(&mut self, batch_size: ::models::ConfigNodePropertyInteger) {
    self.batch_size = Some(batch_size);
  }

  pub fn with_batch_size(mut self, batch_size: ::models::ConfigNodePropertyInteger) -> ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
    self.batch_size = Some(batch_size);
    self
  }

  pub fn batch_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.batch_size.as_ref()
  }

  pub fn reset_batch_size(&mut self) {
    self.batch_size = None;
  }

}



