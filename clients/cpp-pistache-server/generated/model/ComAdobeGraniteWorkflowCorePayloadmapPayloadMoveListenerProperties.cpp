/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties()
{
    m_Payload_move_white_listIsSet = false;
    m_Payload_move_handle_from_workflow_processIsSet = false;
    
}

ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::~ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties()
{
}

void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Payload_move_white_listIsSet)
    {
        val["payload.move.white.list"] = ModelBase::toJson(m_Payload_move_white_list);
    }
    if(m_Payload_move_handle_from_workflow_processIsSet)
    {
        val["payload.move.handle.from.workflow.process"] = ModelBase::toJson(m_Payload_move_handle_from_workflow_process);
    }
    

    return val;
}

void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("payload.move.white.list") != val.end())
    {
        if(!val["payload.move.white.list"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["payload.move.white.list"]);
            setPayloadMoveWhiteList( newItem );
        }
        
    }
    if(val.find("payload.move.handle.from.workflow.process") != val.end())
    {
        if(!val["payload.move.handle.from.workflow.process"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["payload.move.handle.from.workflow.process"]);
            setPayloadMoveHandleFromWorkflowProcess( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::getPayloadMoveWhiteList() const
{
    return m_Payload_move_white_list;
}
void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::setPayloadMoveWhiteList(ConfigNodePropertyArray const& value)
{
    m_Payload_move_white_list = value;
    m_Payload_move_white_listIsSet = true;
}
bool ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::payloadMoveWhiteListIsSet() const
{
    return m_Payload_move_white_listIsSet;
}
void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::unsetPayload_move_white_list()
{
    m_Payload_move_white_listIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::getPayloadMoveHandleFromWorkflowProcess() const
{
    return m_Payload_move_handle_from_workflow_process;
}
void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::setPayloadMoveHandleFromWorkflowProcess(ConfigNodePropertyBoolean const& value)
{
    m_Payload_move_handle_from_workflow_process = value;
    m_Payload_move_handle_from_workflow_processIsSet = true;
}
bool ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::payloadMoveHandleFromWorkflowProcessIsSet() const
{
    return m_Payload_move_handle_from_workflow_processIsSet;
}
void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::unsetPayload_move_handle_from_workflow_process()
{
    m_Payload_move_handle_from_workflow_processIsSet = false;
}

}
}
}
}

