/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties()
{
    m_AliasIsSet = false;
    m_Dav_create_absolute_uriIsSet = false;
    m_Dav_protectedhandlersIsSet = false;
}

OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::~OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties()
{
}

void OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AliasIsSet)
    {
        val[utility::conversions::to_string_t("alias")] = ModelBase::toJson(m_Alias);
    }
    if(m_Dav_create_absolute_uriIsSet)
    {
        val[utility::conversions::to_string_t("dav.create-absolute-uri")] = ModelBase::toJson(m_Dav_create_absolute_uri);
    }
    if(m_Dav_protectedhandlersIsSet)
    {
        val[utility::conversions::to_string_t("dav.protectedhandlers")] = ModelBase::toJson(m_Dav_protectedhandlers);
    }

    return val;
}

void OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("alias")))
    {
        if(!val[utility::conversions::to_string_t("alias")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("alias")]);
            setAlias( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dav.create-absolute-uri")))
    {
        if(!val[utility::conversions::to_string_t("dav.create-absolute-uri")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("dav.create-absolute-uri")]);
            setDavCreateAbsoluteUri( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dav.protectedhandlers")))
    {
        if(!val[utility::conversions::to_string_t("dav.protectedhandlers")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("dav.protectedhandlers")]);
            setDavProtectedhandlers( newItem );
        }
    }
}

void OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AliasIsSet)
    {
        if (m_Alias.get())
        {
            m_Alias->toMultipart(multipart, utility::conversions::to_string_t("alias."));
        }
    }
    if(m_Dav_create_absolute_uriIsSet)
    {
        if (m_Dav_create_absolute_uri.get())
        {
            m_Dav_create_absolute_uri->toMultipart(multipart, utility::conversions::to_string_t("dav.create-absolute-uri."));
        }
    }
    if(m_Dav_protectedhandlersIsSet)
    {
        if (m_Dav_protectedhandlers.get())
        {
            m_Dav_protectedhandlers->toMultipart(multipart, utility::conversions::to_string_t("dav.protectedhandlers."));
        }
    }
}

void OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("alias")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("alias")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("alias."));
            setAlias( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dav.create-absolute-uri")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dav.create-absolute-uri")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dav.create-absolute-uri."));
            setDavCreateAbsoluteUri( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dav.protectedhandlers")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dav.protectedhandlers")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dav.protectedhandlers."));
            setDavProtectedhandlers( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::getAlias() const
{
    return m_Alias;
}


void OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::setAlias(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Alias = value;
    m_AliasIsSet = true;
}
bool OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::aliasIsSet() const
{
    return m_AliasIsSet;
}

void OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::unsetAlias()
{
    m_AliasIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::getDavCreateAbsoluteUri() const
{
    return m_Dav_create_absolute_uri;
}


void OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::setDavCreateAbsoluteUri(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Dav_create_absolute_uri = value;
    m_Dav_create_absolute_uriIsSet = true;
}
bool OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::davCreateAbsoluteUriIsSet() const
{
    return m_Dav_create_absolute_uriIsSet;
}

void OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::unsetDav_create_absolute_uri()
{
    m_Dav_create_absolute_uriIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::getDavProtectedhandlers() const
{
    return m_Dav_protectedhandlers;
}


void OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::setDavProtectedhandlers(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Dav_protectedhandlers = value;
    m_Dav_protectedhandlersIsSet = true;
}
bool OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::davProtectedhandlersIsSet() const
{
    return m_Dav_protectedhandlersIsSet;
}

void OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::unsetDav_protectedhandlers()
{
    m_Dav_protectedhandlersIsSet = false;
}

}
}
}
}

