/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCoreImplUnzipUnzipConfigProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCoreImplUnzipUnzipConfigProperties::ComDayCqDamCoreImplUnzipUnzipConfigProperties()
{
    m_Cq_dam_config_unzip_maxuncompressedsizeIsSet = false;
    m_Cq_dam_config_unzip_encodingIsSet = false;
    
}

ComDayCqDamCoreImplUnzipUnzipConfigProperties::~ComDayCqDamCoreImplUnzipUnzipConfigProperties()
{
}

void ComDayCqDamCoreImplUnzipUnzipConfigProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCoreImplUnzipUnzipConfigProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cq_dam_config_unzip_maxuncompressedsizeIsSet)
    {
        val["cq.dam.config.unzip.maxuncompressedsize"] = ModelBase::toJson(m_Cq_dam_config_unzip_maxuncompressedsize);
    }
    if(m_Cq_dam_config_unzip_encodingIsSet)
    {
        val["cq.dam.config.unzip.encoding"] = ModelBase::toJson(m_Cq_dam_config_unzip_encoding);
    }
    

    return val;
}

void ComDayCqDamCoreImplUnzipUnzipConfigProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cq.dam.config.unzip.maxuncompressedsize") != val.end())
    {
        if(!val["cq.dam.config.unzip.maxuncompressedsize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cq.dam.config.unzip.maxuncompressedsize"]);
            setCqDamConfigUnzipMaxuncompressedsize( newItem );
        }
        
    }
    if(val.find("cq.dam.config.unzip.encoding") != val.end())
    {
        if(!val["cq.dam.config.unzip.encoding"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cq.dam.config.unzip.encoding"]);
            setCqDamConfigUnzipEncoding( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComDayCqDamCoreImplUnzipUnzipConfigProperties::getCqDamConfigUnzipMaxuncompressedsize() const
{
    return m_Cq_dam_config_unzip_maxuncompressedsize;
}
void ComDayCqDamCoreImplUnzipUnzipConfigProperties::setCqDamConfigUnzipMaxuncompressedsize(ConfigNodePropertyInteger const& value)
{
    m_Cq_dam_config_unzip_maxuncompressedsize = value;
    m_Cq_dam_config_unzip_maxuncompressedsizeIsSet = true;
}
bool ComDayCqDamCoreImplUnzipUnzipConfigProperties::cqDamConfigUnzipMaxuncompressedsizeIsSet() const
{
    return m_Cq_dam_config_unzip_maxuncompressedsizeIsSet;
}
void ComDayCqDamCoreImplUnzipUnzipConfigProperties::unsetCq_dam_config_unzip_maxuncompressedsize()
{
    m_Cq_dam_config_unzip_maxuncompressedsizeIsSet = false;
}
ConfigNodePropertyString ComDayCqDamCoreImplUnzipUnzipConfigProperties::getCqDamConfigUnzipEncoding() const
{
    return m_Cq_dam_config_unzip_encoding;
}
void ComDayCqDamCoreImplUnzipUnzipConfigProperties::setCqDamConfigUnzipEncoding(ConfigNodePropertyString const& value)
{
    m_Cq_dam_config_unzip_encoding = value;
    m_Cq_dam_config_unzip_encodingIsSet = true;
}
bool ComDayCqDamCoreImplUnzipUnzipConfigProperties::cqDamConfigUnzipEncodingIsSet() const
{
    return m_Cq_dam_config_unzip_encodingIsSet;
}
void ComDayCqDamCoreImplUnzipUnzipConfigProperties::unsetCq_dam_config_unzip_encoding()
{
    m_Cq_dam_config_unzip_encodingIsSet = false;
}

}
}
}
}

