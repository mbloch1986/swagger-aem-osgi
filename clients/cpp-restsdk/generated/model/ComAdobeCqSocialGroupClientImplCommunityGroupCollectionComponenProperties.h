/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties
    : public ModelBase
{
public:
    ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties();
    virtual ~ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGroupListingPaginationEnable() const;
    bool groupListingPaginationEnableIsSet() const;
    void unsetGroup_listing_pagination_enable();
    void setGroupListingPaginationEnable(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGroupListingLazyloadingEnable() const;
    bool groupListingLazyloadingEnableIsSet() const;
    void unsetGroup_listing_lazyloading_enable();
    void setGroupListingLazyloadingEnable(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPageSize() const;
    bool pageSizeIsSet() const;
    void unsetPage_size();
    void setPageSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();
    void setPriority(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Group_listing_pagination_enable;
    bool m_Group_listing_pagination_enableIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Group_listing_lazyloading_enable;
    bool m_Group_listing_lazyloading_enableIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Page_size;
    bool m_Page_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Priority;
    bool m_PriorityIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties_H_ */
