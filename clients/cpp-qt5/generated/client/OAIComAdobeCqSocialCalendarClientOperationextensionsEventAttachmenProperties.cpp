/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties() {
    init();
}

OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::~OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::init() {
    attachment_type_blacklist = new OAIConfigNodePropertyString();
    m_attachment_type_blacklist_isSet = false;
    extension_order = new OAIConfigNodePropertyInteger();
    m_extension_order_isSet = false;
}

void
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::cleanup() {
    if(attachment_type_blacklist != nullptr) { 
        delete attachment_type_blacklist;
    }
    if(extension_order != nullptr) { 
        delete extension_order;
    }
}

OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties*
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&attachment_type_blacklist, pJson["attachmentTypeBlacklist"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&extension_order, pJson["extension.order"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::asJsonObject() {
    QJsonObject obj;
    if((attachment_type_blacklist != nullptr) && (attachment_type_blacklist->isSet())){
        toJsonValue(QString("attachmentTypeBlacklist"), attachment_type_blacklist, obj, QString("OAIConfigNodePropertyString"));
    }
    if((extension_order != nullptr) && (extension_order->isSet())){
        toJsonValue(QString("extension.order"), extension_order, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::getAttachmentTypeBlacklist() {
    return attachment_type_blacklist;
}
void
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::setAttachmentTypeBlacklist(OAIConfigNodePropertyString* attachment_type_blacklist) {
    this->attachment_type_blacklist = attachment_type_blacklist;
    this->m_attachment_type_blacklist_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::getExtensionOrder() {
    return extension_order;
}
void
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::setExtensionOrder(OAIConfigNodePropertyInteger* extension_order) {
    this->extension_order = extension_order;
    this->m_extension_order_isSet = true;
}


bool
OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(attachment_type_blacklist != nullptr && attachment_type_blacklist->isSet()){ isObjectUpdated = true; break;}
        if(extension_order != nullptr && extension_order->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

