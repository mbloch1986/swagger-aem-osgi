/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties()
{
    m_Solr_zk_timeoutIsSet = false;
    m_Solr_commitIsSet = false;
    m_Cache_onIsSet = false;
    m_Concurrency_levelIsSet = false;
    m_Cache_start_sizeIsSet = false;
    m_Cache_ttlIsSet = false;
    m_Cache_sizeIsSet = false;
    
}

ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::~ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties()
{
}

void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Solr_zk_timeoutIsSet)
    {
        val["solr.zk.timeout"] = ModelBase::toJson(m_Solr_zk_timeout);
    }
    if(m_Solr_commitIsSet)
    {
        val["solr.commit"] = ModelBase::toJson(m_Solr_commit);
    }
    if(m_Cache_onIsSet)
    {
        val["cache.on"] = ModelBase::toJson(m_Cache_on);
    }
    if(m_Concurrency_levelIsSet)
    {
        val["concurrency.level"] = ModelBase::toJson(m_Concurrency_level);
    }
    if(m_Cache_start_sizeIsSet)
    {
        val["cache.start.size"] = ModelBase::toJson(m_Cache_start_size);
    }
    if(m_Cache_ttlIsSet)
    {
        val["cache.ttl"] = ModelBase::toJson(m_Cache_ttl);
    }
    if(m_Cache_sizeIsSet)
    {
        val["cache.size"] = ModelBase::toJson(m_Cache_size);
    }
    

    return val;
}

void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::fromJson(nlohmann::json& val)
{
    if(val.find("solr.zk.timeout") != val.end())
    {
        if(!val["solr.zk.timeout"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["solr.zk.timeout"]);
            setSolrZkTimeout( newItem );
        }
        
    }
    if(val.find("solr.commit") != val.end())
    {
        if(!val["solr.commit"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["solr.commit"]);
            setSolrCommit( newItem );
        }
        
    }
    if(val.find("cache.on") != val.end())
    {
        if(!val["cache.on"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cache.on"]);
            setCacheOn( newItem );
        }
        
    }
    if(val.find("concurrency.level") != val.end())
    {
        if(!val["concurrency.level"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["concurrency.level"]);
            setConcurrencyLevel( newItem );
        }
        
    }
    if(val.find("cache.start.size") != val.end())
    {
        if(!val["cache.start.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cache.start.size"]);
            setCacheStartSize( newItem );
        }
        
    }
    if(val.find("cache.ttl") != val.end())
    {
        if(!val["cache.ttl"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cache.ttl"]);
            setCacheTtl( newItem );
        }
        
    }
    if(val.find("cache.size") != val.end())
    {
        if(!val["cache.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cache.size"]);
            setCacheSize( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::getSolrZkTimeout() const
{
    return m_Solr_zk_timeout;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::setSolrZkTimeout(ConfigNodePropertyString const& value)
{
    m_Solr_zk_timeout = value;
    m_Solr_zk_timeoutIsSet = true;
}
bool ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::solrZkTimeoutIsSet() const
{
    return m_Solr_zk_timeoutIsSet;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::unsetSolr_zk_timeout()
{
    m_Solr_zk_timeoutIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::getSolrCommit() const
{
    return m_Solr_commit;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::setSolrCommit(ConfigNodePropertyString const& value)
{
    m_Solr_commit = value;
    m_Solr_commitIsSet = true;
}
bool ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::solrCommitIsSet() const
{
    return m_Solr_commitIsSet;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::unsetSolr_commit()
{
    m_Solr_commitIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::getCacheOn() const
{
    return m_Cache_on;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::setCacheOn(ConfigNodePropertyBoolean const& value)
{
    m_Cache_on = value;
    m_Cache_onIsSet = true;
}
bool ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::cacheOnIsSet() const
{
    return m_Cache_onIsSet;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::unsetCache_on()
{
    m_Cache_onIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::getConcurrencyLevel() const
{
    return m_Concurrency_level;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::setConcurrencyLevel(ConfigNodePropertyInteger const& value)
{
    m_Concurrency_level = value;
    m_Concurrency_levelIsSet = true;
}
bool ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::concurrencyLevelIsSet() const
{
    return m_Concurrency_levelIsSet;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::unsetConcurrency_level()
{
    m_Concurrency_levelIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::getCacheStartSize() const
{
    return m_Cache_start_size;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::setCacheStartSize(ConfigNodePropertyInteger const& value)
{
    m_Cache_start_size = value;
    m_Cache_start_sizeIsSet = true;
}
bool ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::cacheStartSizeIsSet() const
{
    return m_Cache_start_sizeIsSet;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::unsetCache_start_size()
{
    m_Cache_start_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::getCacheTtl() const
{
    return m_Cache_ttl;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::setCacheTtl(ConfigNodePropertyInteger const& value)
{
    m_Cache_ttl = value;
    m_Cache_ttlIsSet = true;
}
bool ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::cacheTtlIsSet() const
{
    return m_Cache_ttlIsSet;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::unsetCache_ttl()
{
    m_Cache_ttlIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::getCacheSize() const
{
    return m_Cache_size;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::setCacheSize(ConfigNodePropertyInteger const& value)
{
    m_Cache_size = value;
    m_Cache_sizeIsSet = true;
}
bool ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::cacheSizeIsSet() const
{
    return m_Cache_sizeIsSet;
}
void ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties::unsetCache_size()
{
    m_Cache_sizeIsSet = false;
}

}
}
}
}

