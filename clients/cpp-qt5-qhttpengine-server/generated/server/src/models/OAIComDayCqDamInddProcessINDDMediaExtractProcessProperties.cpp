/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties() {
    this->init();
}

OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::~OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties() {
    
}

void
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::init() {
    m_process_label_isSet = false;
    m_cq_dam_indd_pages_regex_isSet = false;
    m_ids_job_decoupled_isSet = false;
    m_ids_job_workflow_model_isSet = false;
}

void
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(process_label, json[QString("process.label")]);
    
    ::OpenAPI::fromJsonValue(cq_dam_indd_pages_regex, json[QString("cq.dam.indd.pages.regex")]);
    
    ::OpenAPI::fromJsonValue(ids_job_decoupled, json[QString("ids.job.decoupled")]);
    
    ::OpenAPI::fromJsonValue(ids_job_workflow_model, json[QString("ids.job.workflow.model")]);
    
}

QString
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::asJsonObject() const {
    QJsonObject obj;
	if(process_label.isSet()){
        obj.insert(QString("process.label"), ::OpenAPI::toJsonValue(process_label));
    }
	if(cq_dam_indd_pages_regex.isSet()){
        obj.insert(QString("cq.dam.indd.pages.regex"), ::OpenAPI::toJsonValue(cq_dam_indd_pages_regex));
    }
	if(ids_job_decoupled.isSet()){
        obj.insert(QString("ids.job.decoupled"), ::OpenAPI::toJsonValue(ids_job_decoupled));
    }
	if(ids_job_workflow_model.isSet()){
        obj.insert(QString("ids.job.workflow.model"), ::OpenAPI::toJsonValue(ids_job_workflow_model));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::getProcessLabel() const {
    return process_label;
}
void
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::setProcessLabel(const OAIConfigNodePropertyString &process_label) {
    this->process_label = process_label;
    this->m_process_label_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::getCqDamInddPagesRegex() const {
    return cq_dam_indd_pages_regex;
}
void
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::setCqDamInddPagesRegex(const OAIConfigNodePropertyString &cq_dam_indd_pages_regex) {
    this->cq_dam_indd_pages_regex = cq_dam_indd_pages_regex;
    this->m_cq_dam_indd_pages_regex_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::getIdsJobDecoupled() const {
    return ids_job_decoupled;
}
void
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::setIdsJobDecoupled(const OAIConfigNodePropertyBoolean &ids_job_decoupled) {
    this->ids_job_decoupled = ids_job_decoupled;
    this->m_ids_job_decoupled_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::getIdsJobWorkflowModel() const {
    return ids_job_workflow_model;
}
void
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::setIdsJobWorkflowModel(const OAIConfigNodePropertyString &ids_job_workflow_model) {
    this->ids_job_workflow_model = ids_job_workflow_model;
    this->m_ids_job_workflow_model_isSet = true;
}


bool
OAIComDayCqDamInddProcessINDDMediaExtractProcessProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(process_label.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_dam_indd_pages_regex.isSet()){ isObjectUpdated = true; break;}
    
        if(ids_job_decoupled.isSet()){ isObjectUpdated = true; break;}
    
        if(ids_job_workflow_model.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

