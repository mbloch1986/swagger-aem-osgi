/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheSlingEngineImplAuthSling
 */
public class OASOrgApacheSlingEngineImplAuthSling implements OAS.MappedProperties {
    /**
     * Get osgiHttpWhiteboardContextSelect
     * @return osgiHttpWhiteboardContextSelect
     */
    public OASConfigNodePropertyString osgiHttpWhiteboardContextSelect { get; set; }

    /**
     * Get osgiHttpWhiteboardListener
     * @return osgiHttpWhiteboardListener
     */
    public OASConfigNodePropertyString osgiHttpWhiteboardListener { get; set; }

    /**
     * Get authSudoCookie
     * @return authSudoCookie
     */
    public OASConfigNodePropertyString authSudoCookie { get; set; }

    /**
     * Get authSudoParameter
     * @return authSudoParameter
     */
    public OASConfigNodePropertyString authSudoParameter { get; set; }

    /**
     * Get authAnnonymous
     * @return authAnnonymous
     */
    public OASConfigNodePropertyBoolean authAnnonymous { get; set; }

    /**
     * Get slingAuthRequirements
     * @return slingAuthRequirements
     */
    public OASConfigNodePropertyArray slingAuthRequirements { get; set; }

    /**
     * Get slingAuthAnonymousUser
     * @return slingAuthAnonymousUser
     */
    public OASConfigNodePropertyString slingAuthAnonymousUser { get; set; }

    /**
     * Get slingAuthAnonymousPassword
     * @return slingAuthAnonymousPassword
     */
    public OASConfigNodePropertyString slingAuthAnonymousPassword { get; set; }

    /**
     * Get authHttp
     * @return authHttp
     */
    public OASConfigNodePropertyDropDown authHttp { get; set; }

    /**
     * Get authHttpRealm
     * @return authHttpRealm
     */
    public OASConfigNodePropertyString authHttpRealm { get; set; }

    /**
     * Get authUriSuffix
     * @return authUriSuffix
     */
    public OASConfigNodePropertyArray authUriSuffix { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'osgi.http.whiteboard.context.select' => 'osgiHttpWhiteboardContextSelect',
        'osgi.http.whiteboard.listener' => 'osgiHttpWhiteboardListener',
        'auth.sudo.cookie' => 'authSudoCookie',
        'auth.sudo.parameter' => 'authSudoParameter',
        'auth.annonymous' => 'authAnnonymous',
        'sling.auth.requirements' => 'slingAuthRequirements',
        'sling.auth.anonymous.user' => 'slingAuthAnonymousUser',
        'sling.auth.anonymous.password' => 'slingAuthAnonymousPassword',
        'auth.http' => 'authHttp',
        'auth.http.realm' => 'authHttpRealm',
        'auth.uri.suffix' => 'authUriSuffix'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASOrgApacheSlingEngineImplAuthSling getExample() {
        OASOrgApacheSlingEngineImplAuthSling orgApacheSlingEngineImplAuthSlingAuthenticatorProperties = new OASOrgApacheSlingEngineImplAuthSling();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.osgiHttpWhiteboardContextSelect = OASConfigNodePropertyString.getExample();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.osgiHttpWhiteboardListener = OASConfigNodePropertyString.getExample();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authSudoCookie = OASConfigNodePropertyString.getExample();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authSudoParameter = OASConfigNodePropertyString.getExample();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authAnnonymous = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.slingAuthRequirements = OASConfigNodePropertyArray.getExample();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.slingAuthAnonymousUser = OASConfigNodePropertyString.getExample();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.slingAuthAnonymousPassword = OASConfigNodePropertyString.getExample();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authHttp = OASConfigNodePropertyDropDown.getExample();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authHttpRealm = OASConfigNodePropertyString.getExample();
          orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authUriSuffix = OASConfigNodePropertyArray.getExample();
        return orgApacheSlingEngineImplAuthSlingAuthenticatorProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheSlingEngineImplAuthSling) {           
            OASOrgApacheSlingEngineImplAuthSling orgApacheSlingEngineImplAuthSlingAuthenticatorProperties = (OASOrgApacheSlingEngineImplAuthSling) obj;
            return this.osgiHttpWhiteboardContextSelect == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.osgiHttpWhiteboardContextSelect
                && this.osgiHttpWhiteboardListener == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.osgiHttpWhiteboardListener
                && this.authSudoCookie == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authSudoCookie
                && this.authSudoParameter == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authSudoParameter
                && this.authAnnonymous == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authAnnonymous
                && this.slingAuthRequirements == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.slingAuthRequirements
                && this.slingAuthAnonymousUser == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.slingAuthAnonymousUser
                && this.slingAuthAnonymousPassword == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.slingAuthAnonymousPassword
                && this.authHttp == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authHttp
                && this.authHttpRealm == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authHttpRealm
                && this.authUriSuffix == orgApacheSlingEngineImplAuthSlingAuthenticatorProperties.authUriSuffix;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (osgiHttpWhiteboardContextSelect == null ? 0 : System.hashCode(osgiHttpWhiteboardContextSelect));
        hashCode = (17 * hashCode) + (osgiHttpWhiteboardListener == null ? 0 : System.hashCode(osgiHttpWhiteboardListener));
        hashCode = (17 * hashCode) + (authSudoCookie == null ? 0 : System.hashCode(authSudoCookie));
        hashCode = (17 * hashCode) + (authSudoParameter == null ? 0 : System.hashCode(authSudoParameter));
        hashCode = (17 * hashCode) + (authAnnonymous == null ? 0 : System.hashCode(authAnnonymous));
        hashCode = (17 * hashCode) + (slingAuthRequirements == null ? 0 : System.hashCode(slingAuthRequirements));
        hashCode = (17 * hashCode) + (slingAuthAnonymousUser == null ? 0 : System.hashCode(slingAuthAnonymousUser));
        hashCode = (17 * hashCode) + (slingAuthAnonymousPassword == null ? 0 : System.hashCode(slingAuthAnonymousPassword));
        hashCode = (17 * hashCode) + (authHttp == null ? 0 : System.hashCode(authHttp));
        hashCode = (17 * hashCode) + (authHttpRealm == null ? 0 : System.hashCode(authHttpRealm));
        hashCode = (17 * hashCode) + (authUriSuffix == null ? 0 : System.hashCode(authUriSuffix));
        return hashCode;
    }
}

