/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties()
{
    m_EnabledActionsIsSet = false;
    m_UserPrivilegeNamesIsSet = false;
    m_GroupPrivilegeNamesIsSet = false;
    m_ConstraintIsSet = false;
}

OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::~OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties()
{
}

void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EnabledActionsIsSet)
    {
        val[utility::conversions::to_string_t("enabledActions")] = ModelBase::toJson(m_EnabledActions);
    }
    if(m_UserPrivilegeNamesIsSet)
    {
        val[utility::conversions::to_string_t("userPrivilegeNames")] = ModelBase::toJson(m_UserPrivilegeNames);
    }
    if(m_GroupPrivilegeNamesIsSet)
    {
        val[utility::conversions::to_string_t("groupPrivilegeNames")] = ModelBase::toJson(m_GroupPrivilegeNames);
    }
    if(m_ConstraintIsSet)
    {
        val[utility::conversions::to_string_t("constraint")] = ModelBase::toJson(m_Constraint);
    }

    return val;
}

void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("enabledActions")))
    {
        if(!val[utility::conversions::to_string_t("enabledActions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("enabledActions")]);
            setEnabledActions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userPrivilegeNames")))
    {
        if(!val[utility::conversions::to_string_t("userPrivilegeNames")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("userPrivilegeNames")]);
            setUserPrivilegeNames( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupPrivilegeNames")))
    {
        if(!val[utility::conversions::to_string_t("groupPrivilegeNames")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("groupPrivilegeNames")]);
            setGroupPrivilegeNames( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("constraint")))
    {
        if(!val[utility::conversions::to_string_t("constraint")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("constraint")]);
            setConstraint( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EnabledActionsIsSet)
    {
        if (m_EnabledActions.get())
        {
            m_EnabledActions->toMultipart(multipart, utility::conversions::to_string_t("enabledActions."));
        }
    }
    if(m_UserPrivilegeNamesIsSet)
    {
        if (m_UserPrivilegeNames.get())
        {
            m_UserPrivilegeNames->toMultipart(multipart, utility::conversions::to_string_t("userPrivilegeNames."));
        }
    }
    if(m_GroupPrivilegeNamesIsSet)
    {
        if (m_GroupPrivilegeNames.get())
        {
            m_GroupPrivilegeNames->toMultipart(multipart, utility::conversions::to_string_t("groupPrivilegeNames."));
        }
    }
    if(m_ConstraintIsSet)
    {
        if (m_Constraint.get())
        {
            m_Constraint->toMultipart(multipart, utility::conversions::to_string_t("constraint."));
        }
    }
}

void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("enabledActions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabledActions")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabledActions."));
            setEnabledActions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userPrivilegeNames")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("userPrivilegeNames")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("userPrivilegeNames."));
            setUserPrivilegeNames( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupPrivilegeNames")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("groupPrivilegeNames")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("groupPrivilegeNames."));
            setGroupPrivilegeNames( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("constraint")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("constraint")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("constraint."));
            setConstraint( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::getEnabledActions() const
{
    return m_EnabledActions;
}


void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::setEnabledActions(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_EnabledActions = value;
    m_EnabledActionsIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::enabledActionsIsSet() const
{
    return m_EnabledActionsIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::unsetEnabledActions()
{
    m_EnabledActionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::getUserPrivilegeNames() const
{
    return m_UserPrivilegeNames;
}


void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::setUserPrivilegeNames(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_UserPrivilegeNames = value;
    m_UserPrivilegeNamesIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::userPrivilegeNamesIsSet() const
{
    return m_UserPrivilegeNamesIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::unsetUserPrivilegeNames()
{
    m_UserPrivilegeNamesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::getGroupPrivilegeNames() const
{
    return m_GroupPrivilegeNames;
}


void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::setGroupPrivilegeNames(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_GroupPrivilegeNames = value;
    m_GroupPrivilegeNamesIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::groupPrivilegeNamesIsSet() const
{
    return m_GroupPrivilegeNamesIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::unsetGroupPrivilegeNames()
{
    m_GroupPrivilegeNamesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::getConstraint() const
{
    return m_Constraint;
}


void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::setConstraint(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Constraint = value;
    m_ConstraintIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::constraintIsSet() const
{
    return m_ConstraintIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties::unsetConstraint()
{
    m_ConstraintIsSet = false;
}

}
}
}
}

