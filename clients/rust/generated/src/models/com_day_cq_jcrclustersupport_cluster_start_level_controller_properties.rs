/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
  #[serde(rename = "cluster.level.enable")]
  cluster_level_enable: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "cluster.master.level")]
  cluster_master_level: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.slave.level")]
  cluster_slave_level: Option<::models::ConfigNodePropertyInteger>
}

impl ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
  pub fn new() -> ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
    ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
      cluster_level_enable: None,
      cluster_master_level: None,
      cluster_slave_level: None
    }
  }

  pub fn set_cluster_level_enable(&mut self, cluster_level_enable: ::models::ConfigNodePropertyBoolean) {
    self.cluster_level_enable = Some(cluster_level_enable);
  }

  pub fn with_cluster_level_enable(mut self, cluster_level_enable: ::models::ConfigNodePropertyBoolean) -> ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
    self.cluster_level_enable = Some(cluster_level_enable);
    self
  }

  pub fn cluster_level_enable(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cluster_level_enable.as_ref()
  }

  pub fn reset_cluster_level_enable(&mut self) {
    self.cluster_level_enable = None;
  }

  pub fn set_cluster_master_level(&mut self, cluster_master_level: ::models::ConfigNodePropertyInteger) {
    self.cluster_master_level = Some(cluster_master_level);
  }

  pub fn with_cluster_master_level(mut self, cluster_master_level: ::models::ConfigNodePropertyInteger) -> ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
    self.cluster_master_level = Some(cluster_master_level);
    self
  }

  pub fn cluster_master_level(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_master_level.as_ref()
  }

  pub fn reset_cluster_master_level(&mut self) {
    self.cluster_master_level = None;
  }

  pub fn set_cluster_slave_level(&mut self, cluster_slave_level: ::models::ConfigNodePropertyInteger) {
    self.cluster_slave_level = Some(cluster_slave_level);
  }

  pub fn with_cluster_slave_level(mut self, cluster_slave_level: ::models::ConfigNodePropertyInteger) -> ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
    self.cluster_slave_level = Some(cluster_slave_level);
    self
  }

  pub fn cluster_slave_level(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_slave_level.as_ref()
  }

  pub fn reset_cluster_slave_level(&mut self) {
    self.cluster_slave_level = None;
  }

}



