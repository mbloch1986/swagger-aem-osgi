/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties
    /// </summary>
    [DataContract]
    public partial class AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties :  IEquatable<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties" /> class.
        /// </summary>
        /// <param name="showPlaceholder">showPlaceholder.</param>
        /// <param name="maximumCacheEntries">maximumCacheEntries.</param>
        /// <param name="afScriptingCompatversion">afScriptingCompatversion.</param>
        /// <param name="makeFileNameUnique">makeFileNameUnique.</param>
        /// <param name="generatingCompliantData">generatingCompliantData.</param>
        public AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties(ConfigNodePropertyBoolean showPlaceholder = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger maximumCacheEntries = default(ConfigNodePropertyInteger), ConfigNodePropertyDropDown afScriptingCompatversion = default(ConfigNodePropertyDropDown), ConfigNodePropertyBoolean makeFileNameUnique = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean generatingCompliantData = default(ConfigNodePropertyBoolean))
        {
            this.ShowPlaceholder = showPlaceholder;
            this.MaximumCacheEntries = maximumCacheEntries;
            this.AfScriptingCompatversion = afScriptingCompatversion;
            this.MakeFileNameUnique = makeFileNameUnique;
            this.GeneratingCompliantData = generatingCompliantData;
        }
        
        /// <summary>
        /// Gets or Sets ShowPlaceholder
        /// </summary>
        [DataMember(Name="showPlaceholder", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ShowPlaceholder { get; set; }

        /// <summary>
        /// Gets or Sets MaximumCacheEntries
        /// </summary>
        [DataMember(Name="maximumCacheEntries", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaximumCacheEntries { get; set; }

        /// <summary>
        /// Gets or Sets AfScriptingCompatversion
        /// </summary>
        [DataMember(Name="af.scripting.compatversion", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown AfScriptingCompatversion { get; set; }

        /// <summary>
        /// Gets or Sets MakeFileNameUnique
        /// </summary>
        [DataMember(Name="makeFileNameUnique", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean MakeFileNameUnique { get; set; }

        /// <summary>
        /// Gets or Sets GeneratingCompliantData
        /// </summary>
        [DataMember(Name="generatingCompliantData", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean GeneratingCompliantData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {\n");
            sb.Append("  ShowPlaceholder: ").Append(ShowPlaceholder).Append("\n");
            sb.Append("  MaximumCacheEntries: ").Append(MaximumCacheEntries).Append("\n");
            sb.Append("  AfScriptingCompatversion: ").Append(AfScriptingCompatversion).Append("\n");
            sb.Append("  MakeFileNameUnique: ").Append(MakeFileNameUnique).Append("\n");
            sb.Append("  GeneratingCompliantData: ").Append(GeneratingCompliantData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties);
        }

        /// <summary>
        /// Returns true if AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShowPlaceholder == input.ShowPlaceholder ||
                    (this.ShowPlaceholder != null &&
                    this.ShowPlaceholder.Equals(input.ShowPlaceholder))
                ) && 
                (
                    this.MaximumCacheEntries == input.MaximumCacheEntries ||
                    (this.MaximumCacheEntries != null &&
                    this.MaximumCacheEntries.Equals(input.MaximumCacheEntries))
                ) && 
                (
                    this.AfScriptingCompatversion == input.AfScriptingCompatversion ||
                    (this.AfScriptingCompatversion != null &&
                    this.AfScriptingCompatversion.Equals(input.AfScriptingCompatversion))
                ) && 
                (
                    this.MakeFileNameUnique == input.MakeFileNameUnique ||
                    (this.MakeFileNameUnique != null &&
                    this.MakeFileNameUnique.Equals(input.MakeFileNameUnique))
                ) && 
                (
                    this.GeneratingCompliantData == input.GeneratingCompliantData ||
                    (this.GeneratingCompliantData != null &&
                    this.GeneratingCompliantData.Equals(input.GeneratingCompliantData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShowPlaceholder != null)
                    hashCode = hashCode * 59 + this.ShowPlaceholder.GetHashCode();
                if (this.MaximumCacheEntries != null)
                    hashCode = hashCode * 59 + this.MaximumCacheEntries.GetHashCode();
                if (this.AfScriptingCompatversion != null)
                    hashCode = hashCode * 59 + this.AfScriptingCompatversion.GetHashCode();
                if (this.MakeFileNameUnique != null)
                    hashCode = hashCode * 59 + this.MakeFileNameUnique.GetHashCode();
                if (this.GeneratingCompliantData != null)
                    hashCode = hashCode * 59 + this.GeneratingCompliantData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
