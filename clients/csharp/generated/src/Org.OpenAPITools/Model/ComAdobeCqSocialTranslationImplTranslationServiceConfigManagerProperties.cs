/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties :  IEquatable<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties" /> class.
        /// </summary>
        /// <param name="translateLanguage">translateLanguage.</param>
        /// <param name="translateDisplay">translateDisplay.</param>
        /// <param name="translateAttribution">translateAttribution.</param>
        /// <param name="translateCaching">translateCaching.</param>
        /// <param name="translateSmartRendering">translateSmartRendering.</param>
        /// <param name="translateCachingDuration">translateCachingDuration.</param>
        /// <param name="translateSessionSaveInterval">translateSessionSaveInterval.</param>
        /// <param name="translateSessionSaveBatchLimit">translateSessionSaveBatchLimit.</param>
        public ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties(ConfigNodePropertyDropDown translateLanguage = default(ConfigNodePropertyDropDown), ConfigNodePropertyDropDown translateDisplay = default(ConfigNodePropertyDropDown), ConfigNodePropertyBoolean translateAttribution = default(ConfigNodePropertyBoolean), ConfigNodePropertyDropDown translateCaching = default(ConfigNodePropertyDropDown), ConfigNodePropertyDropDown translateSmartRendering = default(ConfigNodePropertyDropDown), ConfigNodePropertyString translateCachingDuration = default(ConfigNodePropertyString), ConfigNodePropertyString translateSessionSaveInterval = default(ConfigNodePropertyString), ConfigNodePropertyString translateSessionSaveBatchLimit = default(ConfigNodePropertyString))
        {
            this.TranslateLanguage = translateLanguage;
            this.TranslateDisplay = translateDisplay;
            this.TranslateAttribution = translateAttribution;
            this.TranslateCaching = translateCaching;
            this.TranslateSmartRendering = translateSmartRendering;
            this.TranslateCachingDuration = translateCachingDuration;
            this.TranslateSessionSaveInterval = translateSessionSaveInterval;
            this.TranslateSessionSaveBatchLimit = translateSessionSaveBatchLimit;
        }
        
        /// <summary>
        /// Gets or Sets TranslateLanguage
        /// </summary>
        [DataMember(Name="translate.language", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown TranslateLanguage { get; set; }

        /// <summary>
        /// Gets or Sets TranslateDisplay
        /// </summary>
        [DataMember(Name="translate.display", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown TranslateDisplay { get; set; }

        /// <summary>
        /// Gets or Sets TranslateAttribution
        /// </summary>
        [DataMember(Name="translate.attribution", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean TranslateAttribution { get; set; }

        /// <summary>
        /// Gets or Sets TranslateCaching
        /// </summary>
        [DataMember(Name="translate.caching", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown TranslateCaching { get; set; }

        /// <summary>
        /// Gets or Sets TranslateSmartRendering
        /// </summary>
        [DataMember(Name="translate.smart.rendering", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown TranslateSmartRendering { get; set; }

        /// <summary>
        /// Gets or Sets TranslateCachingDuration
        /// </summary>
        [DataMember(Name="translate.caching.duration", EmitDefaultValue=false)]
        public ConfigNodePropertyString TranslateCachingDuration { get; set; }

        /// <summary>
        /// Gets or Sets TranslateSessionSaveInterval
        /// </summary>
        [DataMember(Name="translate.session.save.interval", EmitDefaultValue=false)]
        public ConfigNodePropertyString TranslateSessionSaveInterval { get; set; }

        /// <summary>
        /// Gets or Sets TranslateSessionSaveBatchLimit
        /// </summary>
        [DataMember(Name="translate.session.save.batchLimit", EmitDefaultValue=false)]
        public ConfigNodePropertyString TranslateSessionSaveBatchLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {\n");
            sb.Append("  TranslateLanguage: ").Append(TranslateLanguage).Append("\n");
            sb.Append("  TranslateDisplay: ").Append(TranslateDisplay).Append("\n");
            sb.Append("  TranslateAttribution: ").Append(TranslateAttribution).Append("\n");
            sb.Append("  TranslateCaching: ").Append(TranslateCaching).Append("\n");
            sb.Append("  TranslateSmartRendering: ").Append(TranslateSmartRendering).Append("\n");
            sb.Append("  TranslateCachingDuration: ").Append(TranslateCachingDuration).Append("\n");
            sb.Append("  TranslateSessionSaveInterval: ").Append(TranslateSessionSaveInterval).Append("\n");
            sb.Append("  TranslateSessionSaveBatchLimit: ").Append(TranslateSessionSaveBatchLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TranslateLanguage == input.TranslateLanguage ||
                    (this.TranslateLanguage != null &&
                    this.TranslateLanguage.Equals(input.TranslateLanguage))
                ) && 
                (
                    this.TranslateDisplay == input.TranslateDisplay ||
                    (this.TranslateDisplay != null &&
                    this.TranslateDisplay.Equals(input.TranslateDisplay))
                ) && 
                (
                    this.TranslateAttribution == input.TranslateAttribution ||
                    (this.TranslateAttribution != null &&
                    this.TranslateAttribution.Equals(input.TranslateAttribution))
                ) && 
                (
                    this.TranslateCaching == input.TranslateCaching ||
                    (this.TranslateCaching != null &&
                    this.TranslateCaching.Equals(input.TranslateCaching))
                ) && 
                (
                    this.TranslateSmartRendering == input.TranslateSmartRendering ||
                    (this.TranslateSmartRendering != null &&
                    this.TranslateSmartRendering.Equals(input.TranslateSmartRendering))
                ) && 
                (
                    this.TranslateCachingDuration == input.TranslateCachingDuration ||
                    (this.TranslateCachingDuration != null &&
                    this.TranslateCachingDuration.Equals(input.TranslateCachingDuration))
                ) && 
                (
                    this.TranslateSessionSaveInterval == input.TranslateSessionSaveInterval ||
                    (this.TranslateSessionSaveInterval != null &&
                    this.TranslateSessionSaveInterval.Equals(input.TranslateSessionSaveInterval))
                ) && 
                (
                    this.TranslateSessionSaveBatchLimit == input.TranslateSessionSaveBatchLimit ||
                    (this.TranslateSessionSaveBatchLimit != null &&
                    this.TranslateSessionSaveBatchLimit.Equals(input.TranslateSessionSaveBatchLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TranslateLanguage != null)
                    hashCode = hashCode * 59 + this.TranslateLanguage.GetHashCode();
                if (this.TranslateDisplay != null)
                    hashCode = hashCode * 59 + this.TranslateDisplay.GetHashCode();
                if (this.TranslateAttribution != null)
                    hashCode = hashCode * 59 + this.TranslateAttribution.GetHashCode();
                if (this.TranslateCaching != null)
                    hashCode = hashCode * 59 + this.TranslateCaching.GetHashCode();
                if (this.TranslateSmartRendering != null)
                    hashCode = hashCode * 59 + this.TranslateSmartRendering.GetHashCode();
                if (this.TranslateCachingDuration != null)
                    hashCode = hashCode * 59 + this.TranslateCachingDuration.GetHashCode();
                if (this.TranslateSessionSaveInterval != null)
                    hashCode = hashCode * 59 + this.TranslateSessionSaveInterval.GetHashCode();
                if (this.TranslateSessionSaveBatchLimit != null)
                    hashCode = hashCode * 59 + this.TranslateSessionSaveBatchLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
