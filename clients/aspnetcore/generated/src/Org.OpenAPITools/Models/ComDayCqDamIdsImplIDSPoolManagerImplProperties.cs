/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamIdsImplIDSPoolManagerImplProperties : IEquatable<ComDayCqDamIdsImplIDSPoolManagerImplProperties>
    { 
        /// <summary>
        /// Gets or Sets MaxErrorsToBlacklist
        /// </summary>
        [DataMember(Name="max.errors.to.blacklist")]
        public ConfigNodePropertyInteger MaxErrorsToBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets RetryIntervalToWhitelist
        /// </summary>
        [DataMember(Name="retry.interval.to.whitelist")]
        public ConfigNodePropertyInteger RetryIntervalToWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets ConnectTimeout
        /// </summary>
        [DataMember(Name="connect.timeout")]
        public ConfigNodePropertyInteger ConnectTimeout { get; set; }

        /// <summary>
        /// Gets or Sets SocketTimeout
        /// </summary>
        [DataMember(Name="socket.timeout")]
        public ConfigNodePropertyInteger SocketTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ProcessLabel
        /// </summary>
        [DataMember(Name="process.label")]
        public ConfigNodePropertyString ProcessLabel { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionUseMax
        /// </summary>
        [DataMember(Name="connection.use.max")]
        public ConfigNodePropertyInteger ConnectionUseMax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamIdsImplIDSPoolManagerImplProperties {\n");
            sb.Append("  MaxErrorsToBlacklist: ").Append(MaxErrorsToBlacklist).Append("\n");
            sb.Append("  RetryIntervalToWhitelist: ").Append(RetryIntervalToWhitelist).Append("\n");
            sb.Append("  ConnectTimeout: ").Append(ConnectTimeout).Append("\n");
            sb.Append("  SocketTimeout: ").Append(SocketTimeout).Append("\n");
            sb.Append("  ProcessLabel: ").Append(ProcessLabel).Append("\n");
            sb.Append("  ConnectionUseMax: ").Append(ConnectionUseMax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqDamIdsImplIDSPoolManagerImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqDamIdsImplIDSPoolManagerImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqDamIdsImplIDSPoolManagerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamIdsImplIDSPoolManagerImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MaxErrorsToBlacklist == other.MaxErrorsToBlacklist ||
                    MaxErrorsToBlacklist != null &&
                    MaxErrorsToBlacklist.Equals(other.MaxErrorsToBlacklist)
                ) && 
                (
                    RetryIntervalToWhitelist == other.RetryIntervalToWhitelist ||
                    RetryIntervalToWhitelist != null &&
                    RetryIntervalToWhitelist.Equals(other.RetryIntervalToWhitelist)
                ) && 
                (
                    ConnectTimeout == other.ConnectTimeout ||
                    ConnectTimeout != null &&
                    ConnectTimeout.Equals(other.ConnectTimeout)
                ) && 
                (
                    SocketTimeout == other.SocketTimeout ||
                    SocketTimeout != null &&
                    SocketTimeout.Equals(other.SocketTimeout)
                ) && 
                (
                    ProcessLabel == other.ProcessLabel ||
                    ProcessLabel != null &&
                    ProcessLabel.Equals(other.ProcessLabel)
                ) && 
                (
                    ConnectionUseMax == other.ConnectionUseMax ||
                    ConnectionUseMax != null &&
                    ConnectionUseMax.Equals(other.ConnectionUseMax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MaxErrorsToBlacklist != null)
                    hashCode = hashCode * 59 + MaxErrorsToBlacklist.GetHashCode();
                    if (RetryIntervalToWhitelist != null)
                    hashCode = hashCode * 59 + RetryIntervalToWhitelist.GetHashCode();
                    if (ConnectTimeout != null)
                    hashCode = hashCode * 59 + ConnectTimeout.GetHashCode();
                    if (SocketTimeout != null)
                    hashCode = hashCode * 59 + SocketTimeout.GetHashCode();
                    if (ProcessLabel != null)
                    hashCode = hashCode * 59 + ProcessLabel.GetHashCode();
                    if (ConnectionUseMax != null)
                    hashCode = hashCode * 59 + ConnectionUseMax.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqDamIdsImplIDSPoolManagerImplProperties left, ComDayCqDamIdsImplIDSPoolManagerImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqDamIdsImplIDSPoolManagerImplProperties left, ComDayCqDamIdsImplIDSPoolManagerImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
