/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties()
{
    m_Feature_nameIsSet = false;
    m_Feature_descriptionIsSet = false;
    m_Http_header_nameIsSet = false;
    m_Http_header_valuepatternIsSet = false;
    
}

ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::~ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties()
{
}

void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Feature_nameIsSet)
    {
        val["feature.name"] = ModelBase::toJson(m_Feature_name);
    }
    if(m_Feature_descriptionIsSet)
    {
        val["feature.description"] = ModelBase::toJson(m_Feature_description);
    }
    if(m_Http_header_nameIsSet)
    {
        val["http.header.name"] = ModelBase::toJson(m_Http_header_name);
    }
    if(m_Http_header_valuepatternIsSet)
    {
        val["http.header.valuepattern"] = ModelBase::toJson(m_Http_header_valuepattern);
    }
    

    return val;
}

void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::fromJson(nlohmann::json& val)
{
    if(val.find("feature.name") != val.end())
    {
        if(!val["feature.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["feature.name"]);
            setFeatureName( newItem );
        }
        
    }
    if(val.find("feature.description") != val.end())
    {
        if(!val["feature.description"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["feature.description"]);
            setFeatureDescription( newItem );
        }
        
    }
    if(val.find("http.header.name") != val.end())
    {
        if(!val["http.header.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["http.header.name"]);
            setHttpHeaderName( newItem );
        }
        
    }
    if(val.find("http.header.valuepattern") != val.end())
    {
        if(!val["http.header.valuepattern"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["http.header.valuepattern"]);
            setHttpHeaderValuepattern( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getFeatureName() const
{
    return m_Feature_name;
}
void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setFeatureName(ConfigNodePropertyString const& value)
{
    m_Feature_name = value;
    m_Feature_nameIsSet = true;
}
bool ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::featureNameIsSet() const
{
    return m_Feature_nameIsSet;
}
void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::unsetFeature_name()
{
    m_Feature_nameIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getFeatureDescription() const
{
    return m_Feature_description;
}
void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setFeatureDescription(ConfigNodePropertyString const& value)
{
    m_Feature_description = value;
    m_Feature_descriptionIsSet = true;
}
bool ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::featureDescriptionIsSet() const
{
    return m_Feature_descriptionIsSet;
}
void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::unsetFeature_description()
{
    m_Feature_descriptionIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getHttpHeaderName() const
{
    return m_Http_header_name;
}
void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setHttpHeaderName(ConfigNodePropertyString const& value)
{
    m_Http_header_name = value;
    m_Http_header_nameIsSet = true;
}
bool ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::httpHeaderNameIsSet() const
{
    return m_Http_header_nameIsSet;
}
void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::unsetHttp_header_name()
{
    m_Http_header_nameIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getHttpHeaderValuepattern() const
{
    return m_Http_header_valuepattern;
}
void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setHttpHeaderValuepattern(ConfigNodePropertyString const& value)
{
    m_Http_header_valuepattern = value;
    m_Http_header_valuepatternIsSet = true;
}
bool ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::httpHeaderValuepatternIsSet() const
{
    return m_Http_header_valuepatternIsSet;
}
void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::unsetHttp_header_valuepattern()
{
    m_Http_header_valuepatternIsSet = false;
}

}
}
}
}

