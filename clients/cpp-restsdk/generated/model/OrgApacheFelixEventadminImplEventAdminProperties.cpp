/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheFelixEventadminImplEventAdminProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheFelixEventadminImplEventAdminProperties::OrgApacheFelixEventadminImplEventAdminProperties()
{
    m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet = false;
    m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet = false;
    m_Org_apache_felix_eventadmin_TimeoutIsSet = false;
    m_Org_apache_felix_eventadmin_RequireTopicIsSet = false;
    m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet = false;
    m_Org_apache_felix_eventadmin_IgnoreTopicIsSet = false;
}

OrgApacheFelixEventadminImplEventAdminProperties::~OrgApacheFelixEventadminImplEventAdminProperties()
{
}

void OrgApacheFelixEventadminImplEventAdminProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheFelixEventadminImplEventAdminProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.eventadmin.ThreadPoolSize")] = ModelBase::toJson(m_Org_apache_felix_eventadmin_ThreadPoolSize);
    }
    if(m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.eventadmin.AsyncToSyncThreadRatio")] = ModelBase::toJson(m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio);
    }
    if(m_Org_apache_felix_eventadmin_TimeoutIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.eventadmin.Timeout")] = ModelBase::toJson(m_Org_apache_felix_eventadmin_Timeout);
    }
    if(m_Org_apache_felix_eventadmin_RequireTopicIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.eventadmin.RequireTopic")] = ModelBase::toJson(m_Org_apache_felix_eventadmin_RequireTopic);
    }
    if(m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTimeout")] = ModelBase::toJson(m_Org_apache_felix_eventadmin_IgnoreTimeout);
    }
    if(m_Org_apache_felix_eventadmin_IgnoreTopicIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTopic")] = ModelBase::toJson(m_Org_apache_felix_eventadmin_IgnoreTopic);
    }

    return val;
}

void OrgApacheFelixEventadminImplEventAdminProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.eventadmin.ThreadPoolSize")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.eventadmin.ThreadPoolSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.eventadmin.ThreadPoolSize")]);
            setOrgApacheFelixEventadminThreadPoolSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.eventadmin.AsyncToSyncThreadRatio")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.eventadmin.AsyncToSyncThreadRatio")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyFloat> newItem(new ConfigNodePropertyFloat());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.eventadmin.AsyncToSyncThreadRatio")]);
            setOrgApacheFelixEventadminAsyncToSyncThreadRatio( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.eventadmin.Timeout")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.eventadmin.Timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.eventadmin.Timeout")]);
            setOrgApacheFelixEventadminTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.eventadmin.RequireTopic")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.eventadmin.RequireTopic")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.eventadmin.RequireTopic")]);
            setOrgApacheFelixEventadminRequireTopic( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTimeout")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTimeout")]);
            setOrgApacheFelixEventadminIgnoreTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTopic")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTopic")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTopic")]);
            setOrgApacheFelixEventadminIgnoreTopic( newItem );
        }
    }
}

void OrgApacheFelixEventadminImplEventAdminProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet)
    {
        if (m_Org_apache_felix_eventadmin_ThreadPoolSize.get())
        {
            m_Org_apache_felix_eventadmin_ThreadPoolSize->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.ThreadPoolSize."));
        }
    }
    if(m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet)
    {
        if (m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio.get())
        {
            m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.AsyncToSyncThreadRatio."));
        }
    }
    if(m_Org_apache_felix_eventadmin_TimeoutIsSet)
    {
        if (m_Org_apache_felix_eventadmin_Timeout.get())
        {
            m_Org_apache_felix_eventadmin_Timeout->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.Timeout."));
        }
    }
    if(m_Org_apache_felix_eventadmin_RequireTopicIsSet)
    {
        if (m_Org_apache_felix_eventadmin_RequireTopic.get())
        {
            m_Org_apache_felix_eventadmin_RequireTopic->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.RequireTopic."));
        }
    }
    if(m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet)
    {
        if (m_Org_apache_felix_eventadmin_IgnoreTimeout.get())
        {
            m_Org_apache_felix_eventadmin_IgnoreTimeout->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTimeout."));
        }
    }
    if(m_Org_apache_felix_eventadmin_IgnoreTopicIsSet)
    {
        if (m_Org_apache_felix_eventadmin_IgnoreTopic.get())
        {
            m_Org_apache_felix_eventadmin_IgnoreTopic->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTopic."));
        }
    }
}

void OrgApacheFelixEventadminImplEventAdminProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.ThreadPoolSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.ThreadPoolSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.ThreadPoolSize."));
            setOrgApacheFelixEventadminThreadPoolSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.AsyncToSyncThreadRatio")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.AsyncToSyncThreadRatio")))
        {
            std::shared_ptr<ConfigNodePropertyFloat> newItem(new ConfigNodePropertyFloat());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.AsyncToSyncThreadRatio."));
            setOrgApacheFelixEventadminAsyncToSyncThreadRatio( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.Timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.Timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.Timeout."));
            setOrgApacheFelixEventadminTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.RequireTopic")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.RequireTopic")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.RequireTopic."));
            setOrgApacheFelixEventadminRequireTopic( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTimeout."));
            setOrgApacheFelixEventadminIgnoreTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTopic")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTopic")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.eventadmin.IgnoreTopic."));
            setOrgApacheFelixEventadminIgnoreTopic( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminThreadPoolSize() const
{
    return m_Org_apache_felix_eventadmin_ThreadPoolSize;
}


void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminThreadPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_eventadmin_ThreadPoolSize = value;
    m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminThreadPoolSizeIsSet() const
{
    return m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet;
}

void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_ThreadPoolSize()
{
    m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyFloat> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminAsyncToSyncThreadRatio() const
{
    return m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio;
}


void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminAsyncToSyncThreadRatio(std::shared_ptr<ConfigNodePropertyFloat> value)
{
    m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio = value;
    m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminAsyncToSyncThreadRatioIsSet() const
{
    return m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet;
}

void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_AsyncToSyncThreadRatio()
{
    m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminTimeout() const
{
    return m_Org_apache_felix_eventadmin_Timeout;
}


void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_eventadmin_Timeout = value;
    m_Org_apache_felix_eventadmin_TimeoutIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminTimeoutIsSet() const
{
    return m_Org_apache_felix_eventadmin_TimeoutIsSet;
}

void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_Timeout()
{
    m_Org_apache_felix_eventadmin_TimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminRequireTopic() const
{
    return m_Org_apache_felix_eventadmin_RequireTopic;
}


void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminRequireTopic(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_eventadmin_RequireTopic = value;
    m_Org_apache_felix_eventadmin_RequireTopicIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminRequireTopicIsSet() const
{
    return m_Org_apache_felix_eventadmin_RequireTopicIsSet;
}

void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_RequireTopic()
{
    m_Org_apache_felix_eventadmin_RequireTopicIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminIgnoreTimeout() const
{
    return m_Org_apache_felix_eventadmin_IgnoreTimeout;
}


void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminIgnoreTimeout(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_eventadmin_IgnoreTimeout = value;
    m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminIgnoreTimeoutIsSet() const
{
    return m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet;
}

void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_IgnoreTimeout()
{
    m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminIgnoreTopic() const
{
    return m_Org_apache_felix_eventadmin_IgnoreTopic;
}


void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminIgnoreTopic(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_eventadmin_IgnoreTopic = value;
    m_Org_apache_felix_eventadmin_IgnoreTopicIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminIgnoreTopicIsSet() const
{
    return m_Org_apache_felix_eventadmin_IgnoreTopicIsSet;
}

void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_IgnoreTopic()
{
    m_Org_apache_felix_eventadmin_IgnoreTopicIsSet = false;
}

}
}
}
}

