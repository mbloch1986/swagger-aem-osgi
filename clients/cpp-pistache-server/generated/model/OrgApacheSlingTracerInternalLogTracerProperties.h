/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheSlingTracerInternalLogTracerProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingTracerInternalLogTracerProperties_H_
#define OrgApacheSlingTracerInternalLogTracerProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingTracerInternalLogTracerProperties
    : public ModelBase
{
public:
    OrgApacheSlingTracerInternalLogTracerProperties();
    virtual ~OrgApacheSlingTracerInternalLogTracerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingTracerInternalLogTracerProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getTracerSets() const;
    void setTracerSets(ConfigNodePropertyArray const& value);
    bool tracerSetsIsSet() const;
    void unsetTracerSets();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getEnabled() const;
    void setEnabled(ConfigNodePropertyBoolean const& value);
    bool enabledIsSet() const;
    void unsetEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getServletEnabled() const;
    void setServletEnabled(ConfigNodePropertyBoolean const& value);
    bool servletEnabledIsSet() const;
    void unsetServletEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getRecordingCacheSizeInMB() const;
    void setRecordingCacheSizeInMB(ConfigNodePropertyInteger const& value);
    bool recordingCacheSizeInMBIsSet() const;
    void unsetRecordingCacheSizeInMB();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getRecordingCacheDurationInSecs() const;
    void setRecordingCacheDurationInSecs(ConfigNodePropertyInteger const& value);
    bool recordingCacheDurationInSecsIsSet() const;
    void unsetRecordingCacheDurationInSecs();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getRecordingCompressionEnabled() const;
    void setRecordingCompressionEnabled(ConfigNodePropertyBoolean const& value);
    bool recordingCompressionEnabledIsSet() const;
    void unsetRecordingCompressionEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getGzipResponse() const;
    void setGzipResponse(ConfigNodePropertyBoolean const& value);
    bool gzipResponseIsSet() const;
    void unsetGzipResponse();

protected:
    ConfigNodePropertyArray m_TracerSets;
    bool m_TracerSetsIsSet;
    ConfigNodePropertyBoolean m_Enabled;
    bool m_EnabledIsSet;
    ConfigNodePropertyBoolean m_ServletEnabled;
    bool m_ServletEnabledIsSet;
    ConfigNodePropertyInteger m_RecordingCacheSizeInMB;
    bool m_RecordingCacheSizeInMBIsSet;
    ConfigNodePropertyInteger m_RecordingCacheDurationInSecs;
    bool m_RecordingCacheDurationInSecsIsSet;
    ConfigNodePropertyBoolean m_RecordingCompressionEnabled;
    bool m_RecordingCompressionEnabledIsSet;
    ConfigNodePropertyBoolean m_GzipResponse;
    bool m_GzipResponseIsSet;
};

}
}
}
}

#endif /* OrgApacheSlingTracerInternalLogTracerProperties_H_ */
