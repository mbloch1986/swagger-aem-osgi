/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties :  IEquatable<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties" /> class.
        /// </summary>
        /// <param name="xmpFilterApplyWhitelist">xmpFilterApplyWhitelist.</param>
        /// <param name="xmpFilterWhitelist">xmpFilterWhitelist.</param>
        /// <param name="xmpFilterApplyBlacklist">xmpFilterApplyBlacklist.</param>
        /// <param name="xmpFilterBlacklist">xmpFilterBlacklist.</param>
        public ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties(ConfigNodePropertyBoolean xmpFilterApplyWhitelist = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray xmpFilterWhitelist = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean xmpFilterApplyBlacklist = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray xmpFilterBlacklist = default(ConfigNodePropertyArray))
        {
            this.XmpFilterApplyWhitelist = xmpFilterApplyWhitelist;
            this.XmpFilterWhitelist = xmpFilterWhitelist;
            this.XmpFilterApplyBlacklist = xmpFilterApplyBlacklist;
            this.XmpFilterBlacklist = xmpFilterBlacklist;
        }
        
        /// <summary>
        /// Gets or Sets XmpFilterApplyWhitelist
        /// </summary>
        [DataMember(Name="xmp.filter.apply_whitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean XmpFilterApplyWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets XmpFilterWhitelist
        /// </summary>
        [DataMember(Name="xmp.filter.whitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray XmpFilterWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets XmpFilterApplyBlacklist
        /// </summary>
        [DataMember(Name="xmp.filter.apply_blacklist", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean XmpFilterApplyBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets XmpFilterBlacklist
        /// </summary>
        [DataMember(Name="xmp.filter.blacklist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray XmpFilterBlacklist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {\n");
            sb.Append("  XmpFilterApplyWhitelist: ").Append(XmpFilterApplyWhitelist).Append("\n");
            sb.Append("  XmpFilterWhitelist: ").Append(XmpFilterWhitelist).Append("\n");
            sb.Append("  XmpFilterApplyBlacklist: ").Append(XmpFilterApplyBlacklist).Append("\n");
            sb.Append("  XmpFilterBlacklist: ").Append(XmpFilterBlacklist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.XmpFilterApplyWhitelist == input.XmpFilterApplyWhitelist ||
                    (this.XmpFilterApplyWhitelist != null &&
                    this.XmpFilterApplyWhitelist.Equals(input.XmpFilterApplyWhitelist))
                ) && 
                (
                    this.XmpFilterWhitelist == input.XmpFilterWhitelist ||
                    (this.XmpFilterWhitelist != null &&
                    this.XmpFilterWhitelist.Equals(input.XmpFilterWhitelist))
                ) && 
                (
                    this.XmpFilterApplyBlacklist == input.XmpFilterApplyBlacklist ||
                    (this.XmpFilterApplyBlacklist != null &&
                    this.XmpFilterApplyBlacklist.Equals(input.XmpFilterApplyBlacklist))
                ) && 
                (
                    this.XmpFilterBlacklist == input.XmpFilterBlacklist ||
                    (this.XmpFilterBlacklist != null &&
                    this.XmpFilterBlacklist.Equals(input.XmpFilterBlacklist))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.XmpFilterApplyWhitelist != null)
                    hashCode = hashCode * 59 + this.XmpFilterApplyWhitelist.GetHashCode();
                if (this.XmpFilterWhitelist != null)
                    hashCode = hashCode * 59 + this.XmpFilterWhitelist.GetHashCode();
                if (this.XmpFilterApplyBlacklist != null)
                    hashCode = hashCode * 59 + this.XmpFilterApplyBlacklist.GetHashCode();
                if (this.XmpFilterBlacklist != null)
                    hashCode = hashCode * 59 + this.XmpFilterBlacklist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
