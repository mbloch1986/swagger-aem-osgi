/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteCorsImplCORSPolicyImplProperties : IEquatable<ComAdobeGraniteCorsImplCORSPolicyImplProperties>
    { 
        /// <summary>
        /// Gets or Sets Alloworigin
        /// </summary>
        [DataMember(Name="alloworigin")]
        public ConfigNodePropertyArray Alloworigin { get; set; }

        /// <summary>
        /// Gets or Sets Alloworiginregexp
        /// </summary>
        [DataMember(Name="alloworiginregexp")]
        public ConfigNodePropertyArray Alloworiginregexp { get; set; }

        /// <summary>
        /// Gets or Sets Allowedpaths
        /// </summary>
        [DataMember(Name="allowedpaths")]
        public ConfigNodePropertyArray Allowedpaths { get; set; }

        /// <summary>
        /// Gets or Sets Exposedheaders
        /// </summary>
        [DataMember(Name="exposedheaders")]
        public ConfigNodePropertyArray Exposedheaders { get; set; }

        /// <summary>
        /// Gets or Sets Maxage
        /// </summary>
        [DataMember(Name="maxage")]
        public ConfigNodePropertyInteger Maxage { get; set; }

        /// <summary>
        /// Gets or Sets Supportedheaders
        /// </summary>
        [DataMember(Name="supportedheaders")]
        public ConfigNodePropertyArray Supportedheaders { get; set; }

        /// <summary>
        /// Gets or Sets Supportedmethods
        /// </summary>
        [DataMember(Name="supportedmethods")]
        public ConfigNodePropertyArray Supportedmethods { get; set; }

        /// <summary>
        /// Gets or Sets Supportscredentials
        /// </summary>
        [DataMember(Name="supportscredentials")]
        public ConfigNodePropertyBoolean Supportscredentials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteCorsImplCORSPolicyImplProperties {\n");
            sb.Append("  Alloworigin: ").Append(Alloworigin).Append("\n");
            sb.Append("  Alloworiginregexp: ").Append(Alloworiginregexp).Append("\n");
            sb.Append("  Allowedpaths: ").Append(Allowedpaths).Append("\n");
            sb.Append("  Exposedheaders: ").Append(Exposedheaders).Append("\n");
            sb.Append("  Maxage: ").Append(Maxage).Append("\n");
            sb.Append("  Supportedheaders: ").Append(Supportedheaders).Append("\n");
            sb.Append("  Supportedmethods: ").Append(Supportedmethods).Append("\n");
            sb.Append("  Supportscredentials: ").Append(Supportscredentials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteCorsImplCORSPolicyImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteCorsImplCORSPolicyImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteCorsImplCORSPolicyImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteCorsImplCORSPolicyImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Alloworigin == other.Alloworigin ||
                    Alloworigin != null &&
                    Alloworigin.Equals(other.Alloworigin)
                ) && 
                (
                    Alloworiginregexp == other.Alloworiginregexp ||
                    Alloworiginregexp != null &&
                    Alloworiginregexp.Equals(other.Alloworiginregexp)
                ) && 
                (
                    Allowedpaths == other.Allowedpaths ||
                    Allowedpaths != null &&
                    Allowedpaths.Equals(other.Allowedpaths)
                ) && 
                (
                    Exposedheaders == other.Exposedheaders ||
                    Exposedheaders != null &&
                    Exposedheaders.Equals(other.Exposedheaders)
                ) && 
                (
                    Maxage == other.Maxage ||
                    Maxage != null &&
                    Maxage.Equals(other.Maxage)
                ) && 
                (
                    Supportedheaders == other.Supportedheaders ||
                    Supportedheaders != null &&
                    Supportedheaders.Equals(other.Supportedheaders)
                ) && 
                (
                    Supportedmethods == other.Supportedmethods ||
                    Supportedmethods != null &&
                    Supportedmethods.Equals(other.Supportedmethods)
                ) && 
                (
                    Supportscredentials == other.Supportscredentials ||
                    Supportscredentials != null &&
                    Supportscredentials.Equals(other.Supportscredentials)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Alloworigin != null)
                    hashCode = hashCode * 59 + Alloworigin.GetHashCode();
                    if (Alloworiginregexp != null)
                    hashCode = hashCode * 59 + Alloworiginregexp.GetHashCode();
                    if (Allowedpaths != null)
                    hashCode = hashCode * 59 + Allowedpaths.GetHashCode();
                    if (Exposedheaders != null)
                    hashCode = hashCode * 59 + Exposedheaders.GetHashCode();
                    if (Maxage != null)
                    hashCode = hashCode * 59 + Maxage.GetHashCode();
                    if (Supportedheaders != null)
                    hashCode = hashCode * 59 + Supportedheaders.GetHashCode();
                    if (Supportedmethods != null)
                    hashCode = hashCode * 59 + Supportedmethods.GetHashCode();
                    if (Supportscredentials != null)
                    hashCode = hashCode * 59 + Supportscredentials.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteCorsImplCORSPolicyImplProperties left, ComAdobeGraniteCorsImplCORSPolicyImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteCorsImplCORSPolicyImplProperties left, ComAdobeGraniteCorsImplCORSPolicyImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
