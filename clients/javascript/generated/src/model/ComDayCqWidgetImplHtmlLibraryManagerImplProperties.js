/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConfigNodePropertyArray', 'model/ConfigNodePropertyBoolean', 'model/ConfigNodePropertyInteger', 'model/ConfigNodePropertyString'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ConfigNodePropertyArray'), require('./ConfigNodePropertyBoolean'), require('./ConfigNodePropertyInteger'), require('./ConfigNodePropertyString'));
  } else {
    // Browser globals (root is window)
    if (!root.NodeSwaggerAemOsgi) {
      root.NodeSwaggerAemOsgi = {};
    }
    root.NodeSwaggerAemOsgi.ComDayCqWidgetImplHtmlLibraryManagerImplProperties = factory(root.NodeSwaggerAemOsgi.ApiClient, root.NodeSwaggerAemOsgi.ConfigNodePropertyArray, root.NodeSwaggerAemOsgi.ConfigNodePropertyBoolean, root.NodeSwaggerAemOsgi.ConfigNodePropertyInteger, root.NodeSwaggerAemOsgi.ConfigNodePropertyString);
  }
}(this, function(ApiClient, ConfigNodePropertyArray, ConfigNodePropertyBoolean, ConfigNodePropertyInteger, ConfigNodePropertyString) {
  'use strict';




  /**
   * The ComDayCqWidgetImplHtmlLibraryManagerImplProperties model module.
   * @module model/ComDayCqWidgetImplHtmlLibraryManagerImplProperties
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>ComDayCqWidgetImplHtmlLibraryManagerImplProperties</code>.
   * @alias module:model/ComDayCqWidgetImplHtmlLibraryManagerImplProperties
   * @class
   */
  var exports = function() {
    var _this = this;















  };

  /**
   * Constructs a <code>ComDayCqWidgetImplHtmlLibraryManagerImplProperties</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ComDayCqWidgetImplHtmlLibraryManagerImplProperties} obj Optional instance to populate.
   * @return {module:model/ComDayCqWidgetImplHtmlLibraryManagerImplProperties} The populated <code>ComDayCqWidgetImplHtmlLibraryManagerImplProperties</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('htmllibmanager.clientmanager')) {
        obj['htmllibmanager.clientmanager'] = ConfigNodePropertyString.constructFromObject(data['htmllibmanager.clientmanager']);
      }
      if (data.hasOwnProperty('htmllibmanager.debug')) {
        obj['htmllibmanager.debug'] = ConfigNodePropertyBoolean.constructFromObject(data['htmllibmanager.debug']);
      }
      if (data.hasOwnProperty('htmllibmanager.debug.console')) {
        obj['htmllibmanager.debug.console'] = ConfigNodePropertyBoolean.constructFromObject(data['htmllibmanager.debug.console']);
      }
      if (data.hasOwnProperty('htmllibmanager.debug.init.js')) {
        obj['htmllibmanager.debug.init.js'] = ConfigNodePropertyString.constructFromObject(data['htmllibmanager.debug.init.js']);
      }
      if (data.hasOwnProperty('htmllibmanager.defaultthemename')) {
        obj['htmllibmanager.defaultthemename'] = ConfigNodePropertyString.constructFromObject(data['htmllibmanager.defaultthemename']);
      }
      if (data.hasOwnProperty('htmllibmanager.defaultuserthemename')) {
        obj['htmllibmanager.defaultuserthemename'] = ConfigNodePropertyString.constructFromObject(data['htmllibmanager.defaultuserthemename']);
      }
      if (data.hasOwnProperty('htmllibmanager.firebuglite.path')) {
        obj['htmllibmanager.firebuglite.path'] = ConfigNodePropertyString.constructFromObject(data['htmllibmanager.firebuglite.path']);
      }
      if (data.hasOwnProperty('htmllibmanager.forceCQUrlInfo')) {
        obj['htmllibmanager.forceCQUrlInfo'] = ConfigNodePropertyBoolean.constructFromObject(data['htmllibmanager.forceCQUrlInfo']);
      }
      if (data.hasOwnProperty('htmllibmanager.gzip')) {
        obj['htmllibmanager.gzip'] = ConfigNodePropertyBoolean.constructFromObject(data['htmllibmanager.gzip']);
      }
      if (data.hasOwnProperty('htmllibmanager.maxage')) {
        obj['htmllibmanager.maxage'] = ConfigNodePropertyInteger.constructFromObject(data['htmllibmanager.maxage']);
      }
      if (data.hasOwnProperty('htmllibmanager.maxDataUriSize')) {
        obj['htmllibmanager.maxDataUriSize'] = ConfigNodePropertyInteger.constructFromObject(data['htmllibmanager.maxDataUriSize']);
      }
      if (data.hasOwnProperty('htmllibmanager.minify')) {
        obj['htmllibmanager.minify'] = ConfigNodePropertyBoolean.constructFromObject(data['htmllibmanager.minify']);
      }
      if (data.hasOwnProperty('htmllibmanager.path.list')) {
        obj['htmllibmanager.path.list'] = ConfigNodePropertyArray.constructFromObject(data['htmllibmanager.path.list']);
      }
      if (data.hasOwnProperty('htmllibmanager.timing')) {
        obj['htmllibmanager.timing'] = ConfigNodePropertyBoolean.constructFromObject(data['htmllibmanager.timing']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/ConfigNodePropertyString} htmllibmanager.clientmanager
   */
  exports.prototype['htmllibmanager.clientmanager'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} htmllibmanager.debug
   */
  exports.prototype['htmllibmanager.debug'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} htmllibmanager.debug.console
   */
  exports.prototype['htmllibmanager.debug.console'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} htmllibmanager.debug.init.js
   */
  exports.prototype['htmllibmanager.debug.init.js'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} htmllibmanager.defaultthemename
   */
  exports.prototype['htmllibmanager.defaultthemename'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} htmllibmanager.defaultuserthemename
   */
  exports.prototype['htmllibmanager.defaultuserthemename'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} htmllibmanager.firebuglite.path
   */
  exports.prototype['htmllibmanager.firebuglite.path'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} htmllibmanager.forceCQUrlInfo
   */
  exports.prototype['htmllibmanager.forceCQUrlInfo'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} htmllibmanager.gzip
   */
  exports.prototype['htmllibmanager.gzip'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyInteger} htmllibmanager.maxage
   */
  exports.prototype['htmllibmanager.maxage'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyInteger} htmllibmanager.maxDataUriSize
   */
  exports.prototype['htmllibmanager.maxDataUriSize'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} htmllibmanager.minify
   */
  exports.prototype['htmllibmanager.minify'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyArray} htmllibmanager.path.list
   */
  exports.prototype['htmllibmanager.path.list'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} htmllibmanager.timing
   */
  exports.prototype['htmllibmanager.timing'] = undefined;



  return exports;
}));


