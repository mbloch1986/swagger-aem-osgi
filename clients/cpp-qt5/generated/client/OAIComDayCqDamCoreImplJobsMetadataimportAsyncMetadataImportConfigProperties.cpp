/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties() {
    init();
}

OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::~OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties() {
    this->cleanup();
}

void
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::init() {
    operation = new OAIConfigNodePropertyString();
    m_operation_isSet = false;
    operation_icon = new OAIConfigNodePropertyString();
    m_operation_icon_isSet = false;
    topic_name = new OAIConfigNodePropertyString();
    m_topic_name_isSet = false;
    email_enabled = new OAIConfigNodePropertyBoolean();
    m_email_enabled_isSet = false;
}

void
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::cleanup() {
    if(operation != nullptr) { 
        delete operation;
    }
    if(operation_icon != nullptr) { 
        delete operation_icon;
    }
    if(topic_name != nullptr) { 
        delete topic_name;
    }
    if(email_enabled != nullptr) { 
        delete email_enabled;
    }
}

OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties*
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&operation, pJson["operation"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&operation_icon, pJson["operationIcon"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&topic_name, pJson["topicName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&email_enabled, pJson["emailEnabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::asJsonObject() {
    QJsonObject obj;
    if((operation != nullptr) && (operation->isSet())){
        toJsonValue(QString("operation"), operation, obj, QString("OAIConfigNodePropertyString"));
    }
    if((operation_icon != nullptr) && (operation_icon->isSet())){
        toJsonValue(QString("operationIcon"), operation_icon, obj, QString("OAIConfigNodePropertyString"));
    }
    if((topic_name != nullptr) && (topic_name->isSet())){
        toJsonValue(QString("topicName"), topic_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((email_enabled != nullptr) && (email_enabled->isSet())){
        toJsonValue(QString("emailEnabled"), email_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::getOperation() {
    return operation;
}
void
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::setOperation(OAIConfigNodePropertyString* operation) {
    this->operation = operation;
    this->m_operation_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::getOperationIcon() {
    return operation_icon;
}
void
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::setOperationIcon(OAIConfigNodePropertyString* operation_icon) {
    this->operation_icon = operation_icon;
    this->m_operation_icon_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::getTopicName() {
    return topic_name;
}
void
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::setTopicName(OAIConfigNodePropertyString* topic_name) {
    this->topic_name = topic_name;
    this->m_topic_name_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::getEmailEnabled() {
    return email_enabled;
}
void
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::setEmailEnabled(OAIConfigNodePropertyBoolean* email_enabled) {
    this->email_enabled = email_enabled;
    this->m_email_enabled_isSet = true;
}


bool
OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(operation != nullptr && operation->isSet()){ isObjectUpdated = true; break;}
        if(operation_icon != nullptr && operation_icon->isSet()){ isObjectUpdated = true; break;}
        if(topic_name != nullptr && topic_name->isSet()){ isObjectUpdated = true; break;}
        if(email_enabled != nullptr && email_enabled->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

