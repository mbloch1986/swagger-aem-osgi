/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqWcmFoundationFormsImplMailServletProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmFoundationFormsImplMailServletProperties :  IEquatable<ComDayCqWcmFoundationFormsImplMailServletProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqWcmFoundationFormsImplMailServletProperties" /> class.
        /// </summary>
        /// <param name="slingServletResourceTypes">slingServletResourceTypes.</param>
        /// <param name="slingServletSelectors">slingServletSelectors.</param>
        /// <param name="resourceWhitelist">resourceWhitelist.</param>
        /// <param name="resourceBlacklist">resourceBlacklist.</param>
        public ComDayCqWcmFoundationFormsImplMailServletProperties(ConfigNodePropertyString slingServletResourceTypes = default(ConfigNodePropertyString), ConfigNodePropertyString slingServletSelectors = default(ConfigNodePropertyString), ConfigNodePropertyArray resourceWhitelist = default(ConfigNodePropertyArray), ConfigNodePropertyString resourceBlacklist = default(ConfigNodePropertyString))
        {
            this.SlingServletResourceTypes = slingServletResourceTypes;
            this.SlingServletSelectors = slingServletSelectors;
            this.ResourceWhitelist = resourceWhitelist;
            this.ResourceBlacklist = resourceBlacklist;
        }
        
        /// <summary>
        /// Gets or Sets SlingServletResourceTypes
        /// </summary>
        [DataMember(Name="sling.servlet.resourceTypes", EmitDefaultValue=false)]
        public ConfigNodePropertyString SlingServletResourceTypes { get; set; }

        /// <summary>
        /// Gets or Sets SlingServletSelectors
        /// </summary>
        [DataMember(Name="sling.servlet.selectors", EmitDefaultValue=false)]
        public ConfigNodePropertyString SlingServletSelectors { get; set; }

        /// <summary>
        /// Gets or Sets ResourceWhitelist
        /// </summary>
        [DataMember(Name="resource.whitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ResourceWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets ResourceBlacklist
        /// </summary>
        [DataMember(Name="resource.blacklist", EmitDefaultValue=false)]
        public ConfigNodePropertyString ResourceBlacklist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmFoundationFormsImplMailServletProperties {\n");
            sb.Append("  SlingServletResourceTypes: ").Append(SlingServletResourceTypes).Append("\n");
            sb.Append("  SlingServletSelectors: ").Append(SlingServletSelectors).Append("\n");
            sb.Append("  ResourceWhitelist: ").Append(ResourceWhitelist).Append("\n");
            sb.Append("  ResourceBlacklist: ").Append(ResourceBlacklist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqWcmFoundationFormsImplMailServletProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmFoundationFormsImplMailServletProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqWcmFoundationFormsImplMailServletProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmFoundationFormsImplMailServletProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlingServletResourceTypes == input.SlingServletResourceTypes ||
                    (this.SlingServletResourceTypes != null &&
                    this.SlingServletResourceTypes.Equals(input.SlingServletResourceTypes))
                ) && 
                (
                    this.SlingServletSelectors == input.SlingServletSelectors ||
                    (this.SlingServletSelectors != null &&
                    this.SlingServletSelectors.Equals(input.SlingServletSelectors))
                ) && 
                (
                    this.ResourceWhitelist == input.ResourceWhitelist ||
                    (this.ResourceWhitelist != null &&
                    this.ResourceWhitelist.Equals(input.ResourceWhitelist))
                ) && 
                (
                    this.ResourceBlacklist == input.ResourceBlacklist ||
                    (this.ResourceBlacklist != null &&
                    this.ResourceBlacklist.Equals(input.ResourceBlacklist))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlingServletResourceTypes != null)
                    hashCode = hashCode * 59 + this.SlingServletResourceTypes.GetHashCode();
                if (this.SlingServletSelectors != null)
                    hashCode = hashCode * 59 + this.SlingServletSelectors.GetHashCode();
                if (this.ResourceWhitelist != null)
                    hashCode = hashCode * 59 + this.ResourceWhitelist.GetHashCode();
                if (this.ResourceBlacklist != null)
                    hashCode = hashCode * 59 + this.ResourceBlacklist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
