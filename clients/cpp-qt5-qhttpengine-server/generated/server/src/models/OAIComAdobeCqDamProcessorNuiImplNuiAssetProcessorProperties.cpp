/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties() {
    this->init();
}

OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::~OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties() {
    
}

void
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::init() {
    m_nui_enabled_isSet = false;
    m_nui_service_url_isSet = false;
    m_nui_api_key_isSet = false;
}

void
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(nui_enabled, json[QString("nuiEnabled")]);
    
    ::OpenAPI::fromJsonValue(nui_service_url, json[QString("nuiServiceUrl")]);
    
    ::OpenAPI::fromJsonValue(nui_api_key, json[QString("nuiApiKey")]);
    
}

QString
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::asJsonObject() const {
    QJsonObject obj;
	if(nui_enabled.isSet()){
        obj.insert(QString("nuiEnabled"), ::OpenAPI::toJsonValue(nui_enabled));
    }
	if(nui_service_url.isSet()){
        obj.insert(QString("nuiServiceUrl"), ::OpenAPI::toJsonValue(nui_service_url));
    }
	if(nui_api_key.isSet()){
        obj.insert(QString("nuiApiKey"), ::OpenAPI::toJsonValue(nui_api_key));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::getNuiEnabled() const {
    return nui_enabled;
}
void
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::setNuiEnabled(const OAIConfigNodePropertyBoolean &nui_enabled) {
    this->nui_enabled = nui_enabled;
    this->m_nui_enabled_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::getNuiServiceUrl() const {
    return nui_service_url;
}
void
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::setNuiServiceUrl(const OAIConfigNodePropertyString &nui_service_url) {
    this->nui_service_url = nui_service_url;
    this->m_nui_service_url_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::getNuiApiKey() const {
    return nui_api_key;
}
void
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::setNuiApiKey(const OAIConfigNodePropertyString &nui_api_key) {
    this->nui_api_key = nui_api_key;
    this->m_nui_api_key_isSet = true;
}


bool
OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(nui_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(nui_service_url.isSet()){ isObjectUpdated = true; break;}
    
        if(nui_api_key.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

