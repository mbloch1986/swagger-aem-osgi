/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties()
{
    m_Oauth_configmanager_ims_configidIsSet = false;
    m_Ims_owningEntityIsSet = false;
    m_Aem_instanceIdIsSet = false;
    m_Ims_serviceCodeIsSet = false;
}

ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::~ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties()
{
}

void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Oauth_configmanager_ims_configidIsSet)
    {
        val[utility::conversions::to_string_t("oauth.configmanager.ims.configid")] = ModelBase::toJson(m_Oauth_configmanager_ims_configid);
    }
    if(m_Ims_owningEntityIsSet)
    {
        val[utility::conversions::to_string_t("ims.owningEntity")] = ModelBase::toJson(m_Ims_owningEntity);
    }
    if(m_Aem_instanceIdIsSet)
    {
        val[utility::conversions::to_string_t("aem.instanceId")] = ModelBase::toJson(m_Aem_instanceId);
    }
    if(m_Ims_serviceCodeIsSet)
    {
        val[utility::conversions::to_string_t("ims.serviceCode")] = ModelBase::toJson(m_Ims_serviceCode);
    }

    return val;
}

void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("oauth.configmanager.ims.configid")))
    {
        if(!val[utility::conversions::to_string_t("oauth.configmanager.ims.configid")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.configmanager.ims.configid")]);
            setOauthConfigmanagerImsConfigid( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ims.owningEntity")))
    {
        if(!val[utility::conversions::to_string_t("ims.owningEntity")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("ims.owningEntity")]);
            setImsOwningEntity( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("aem.instanceId")))
    {
        if(!val[utility::conversions::to_string_t("aem.instanceId")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("aem.instanceId")]);
            setAemInstanceId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ims.serviceCode")))
    {
        if(!val[utility::conversions::to_string_t("ims.serviceCode")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("ims.serviceCode")]);
            setImsServiceCode( newItem );
        }
    }
}

void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Oauth_configmanager_ims_configidIsSet)
    {
        if (m_Oauth_configmanager_ims_configid.get())
        {
            m_Oauth_configmanager_ims_configid->toMultipart(multipart, utility::conversions::to_string_t("oauth.configmanager.ims.configid."));
        }
    }
    if(m_Ims_owningEntityIsSet)
    {
        if (m_Ims_owningEntity.get())
        {
            m_Ims_owningEntity->toMultipart(multipart, utility::conversions::to_string_t("ims.owningEntity."));
        }
    }
    if(m_Aem_instanceIdIsSet)
    {
        if (m_Aem_instanceId.get())
        {
            m_Aem_instanceId->toMultipart(multipart, utility::conversions::to_string_t("aem.instanceId."));
        }
    }
    if(m_Ims_serviceCodeIsSet)
    {
        if (m_Ims_serviceCode.get())
        {
            m_Ims_serviceCode->toMultipart(multipart, utility::conversions::to_string_t("ims.serviceCode."));
        }
    }
}

void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("oauth.configmanager.ims.configid")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.configmanager.ims.configid")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.configmanager.ims.configid."));
            setOauthConfigmanagerImsConfigid( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ims.owningEntity")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ims.owningEntity")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ims.owningEntity."));
            setImsOwningEntity( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("aem.instanceId")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("aem.instanceId")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("aem.instanceId."));
            setAemInstanceId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ims.serviceCode")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ims.serviceCode")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ims.serviceCode."));
            setImsServiceCode( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getOauthConfigmanagerImsConfigid() const
{
    return m_Oauth_configmanager_ims_configid;
}


void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setOauthConfigmanagerImsConfigid(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_configmanager_ims_configid = value;
    m_Oauth_configmanager_ims_configidIsSet = true;
}
bool ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::oauthConfigmanagerImsConfigidIsSet() const
{
    return m_Oauth_configmanager_ims_configidIsSet;
}

void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::unsetOauth_configmanager_ims_configid()
{
    m_Oauth_configmanager_ims_configidIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getImsOwningEntity() const
{
    return m_Ims_owningEntity;
}


void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setImsOwningEntity(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Ims_owningEntity = value;
    m_Ims_owningEntityIsSet = true;
}
bool ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::imsOwningEntityIsSet() const
{
    return m_Ims_owningEntityIsSet;
}

void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::unsetIms_owningEntity()
{
    m_Ims_owningEntityIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getAemInstanceId() const
{
    return m_Aem_instanceId;
}


void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setAemInstanceId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Aem_instanceId = value;
    m_Aem_instanceIdIsSet = true;
}
bool ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::aemInstanceIdIsSet() const
{
    return m_Aem_instanceIdIsSet;
}

void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::unsetAem_instanceId()
{
    m_Aem_instanceIdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getImsServiceCode() const
{
    return m_Ims_serviceCode;
}


void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setImsServiceCode(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Ims_serviceCode = value;
    m_Ims_serviceCodeIsSet = true;
}
bool ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::imsServiceCodeIsSet() const
{
    return m_Ims_serviceCodeIsSet;
}

void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::unsetIms_serviceCode()
{
    m_Ims_serviceCodeIsSet = false;
}

}
}
}
}

