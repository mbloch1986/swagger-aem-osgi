/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmMsmImplRolloutManagerImplProperties : IEquatable<ComDayCqWcmMsmImplRolloutManagerImplProperties>
    { 
        /// <summary>
        /// Gets or Sets EventFilter
        /// </summary>
        [DataMember(Name="event.filter")]
        public ConfigNodePropertyString EventFilter { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrExcludedpropsDefault
        /// </summary>
        [DataMember(Name="rolloutmgr.excludedprops.default")]
        public ConfigNodePropertyArray RolloutmgrExcludedpropsDefault { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrExcludedparagraphpropsDefault
        /// </summary>
        [DataMember(Name="rolloutmgr.excludedparagraphprops.default")]
        public ConfigNodePropertyArray RolloutmgrExcludedparagraphpropsDefault { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrExcludednodetypesDefault
        /// </summary>
        [DataMember(Name="rolloutmgr.excludednodetypes.default")]
        public ConfigNodePropertyArray RolloutmgrExcludednodetypesDefault { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrThreadpoolMaxsize
        /// </summary>
        [DataMember(Name="rolloutmgr.threadpool.maxsize")]
        public ConfigNodePropertyInteger RolloutmgrThreadpoolMaxsize { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrThreadpoolMaxshutdowntime
        /// </summary>
        [DataMember(Name="rolloutmgr.threadpool.maxshutdowntime")]
        public ConfigNodePropertyInteger RolloutmgrThreadpoolMaxshutdowntime { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrThreadpoolPriority
        /// </summary>
        [DataMember(Name="rolloutmgr.threadpool.priority")]
        public ConfigNodePropertyDropDown RolloutmgrThreadpoolPriority { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrCommitSize
        /// </summary>
        [DataMember(Name="rolloutmgr.commit.size")]
        public ConfigNodePropertyInteger RolloutmgrCommitSize { get; set; }

        /// <summary>
        /// Gets or Sets RolloutmgrConflicthandlingEnabled
        /// </summary>
        [DataMember(Name="rolloutmgr.conflicthandling.enabled")]
        public ConfigNodePropertyBoolean RolloutmgrConflicthandlingEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmMsmImplRolloutManagerImplProperties {\n");
            sb.Append("  EventFilter: ").Append(EventFilter).Append("\n");
            sb.Append("  RolloutmgrExcludedpropsDefault: ").Append(RolloutmgrExcludedpropsDefault).Append("\n");
            sb.Append("  RolloutmgrExcludedparagraphpropsDefault: ").Append(RolloutmgrExcludedparagraphpropsDefault).Append("\n");
            sb.Append("  RolloutmgrExcludednodetypesDefault: ").Append(RolloutmgrExcludednodetypesDefault).Append("\n");
            sb.Append("  RolloutmgrThreadpoolMaxsize: ").Append(RolloutmgrThreadpoolMaxsize).Append("\n");
            sb.Append("  RolloutmgrThreadpoolMaxshutdowntime: ").Append(RolloutmgrThreadpoolMaxshutdowntime).Append("\n");
            sb.Append("  RolloutmgrThreadpoolPriority: ").Append(RolloutmgrThreadpoolPriority).Append("\n");
            sb.Append("  RolloutmgrCommitSize: ").Append(RolloutmgrCommitSize).Append("\n");
            sb.Append("  RolloutmgrConflicthandlingEnabled: ").Append(RolloutmgrConflicthandlingEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqWcmMsmImplRolloutManagerImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmMsmImplRolloutManagerImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqWcmMsmImplRolloutManagerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmMsmImplRolloutManagerImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EventFilter == other.EventFilter ||
                    EventFilter != null &&
                    EventFilter.Equals(other.EventFilter)
                ) && 
                (
                    RolloutmgrExcludedpropsDefault == other.RolloutmgrExcludedpropsDefault ||
                    RolloutmgrExcludedpropsDefault != null &&
                    RolloutmgrExcludedpropsDefault.Equals(other.RolloutmgrExcludedpropsDefault)
                ) && 
                (
                    RolloutmgrExcludedparagraphpropsDefault == other.RolloutmgrExcludedparagraphpropsDefault ||
                    RolloutmgrExcludedparagraphpropsDefault != null &&
                    RolloutmgrExcludedparagraphpropsDefault.Equals(other.RolloutmgrExcludedparagraphpropsDefault)
                ) && 
                (
                    RolloutmgrExcludednodetypesDefault == other.RolloutmgrExcludednodetypesDefault ||
                    RolloutmgrExcludednodetypesDefault != null &&
                    RolloutmgrExcludednodetypesDefault.Equals(other.RolloutmgrExcludednodetypesDefault)
                ) && 
                (
                    RolloutmgrThreadpoolMaxsize == other.RolloutmgrThreadpoolMaxsize ||
                    RolloutmgrThreadpoolMaxsize != null &&
                    RolloutmgrThreadpoolMaxsize.Equals(other.RolloutmgrThreadpoolMaxsize)
                ) && 
                (
                    RolloutmgrThreadpoolMaxshutdowntime == other.RolloutmgrThreadpoolMaxshutdowntime ||
                    RolloutmgrThreadpoolMaxshutdowntime != null &&
                    RolloutmgrThreadpoolMaxshutdowntime.Equals(other.RolloutmgrThreadpoolMaxshutdowntime)
                ) && 
                (
                    RolloutmgrThreadpoolPriority == other.RolloutmgrThreadpoolPriority ||
                    RolloutmgrThreadpoolPriority != null &&
                    RolloutmgrThreadpoolPriority.Equals(other.RolloutmgrThreadpoolPriority)
                ) && 
                (
                    RolloutmgrCommitSize == other.RolloutmgrCommitSize ||
                    RolloutmgrCommitSize != null &&
                    RolloutmgrCommitSize.Equals(other.RolloutmgrCommitSize)
                ) && 
                (
                    RolloutmgrConflicthandlingEnabled == other.RolloutmgrConflicthandlingEnabled ||
                    RolloutmgrConflicthandlingEnabled != null &&
                    RolloutmgrConflicthandlingEnabled.Equals(other.RolloutmgrConflicthandlingEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EventFilter != null)
                    hashCode = hashCode * 59 + EventFilter.GetHashCode();
                    if (RolloutmgrExcludedpropsDefault != null)
                    hashCode = hashCode * 59 + RolloutmgrExcludedpropsDefault.GetHashCode();
                    if (RolloutmgrExcludedparagraphpropsDefault != null)
                    hashCode = hashCode * 59 + RolloutmgrExcludedparagraphpropsDefault.GetHashCode();
                    if (RolloutmgrExcludednodetypesDefault != null)
                    hashCode = hashCode * 59 + RolloutmgrExcludednodetypesDefault.GetHashCode();
                    if (RolloutmgrThreadpoolMaxsize != null)
                    hashCode = hashCode * 59 + RolloutmgrThreadpoolMaxsize.GetHashCode();
                    if (RolloutmgrThreadpoolMaxshutdowntime != null)
                    hashCode = hashCode * 59 + RolloutmgrThreadpoolMaxshutdowntime.GetHashCode();
                    if (RolloutmgrThreadpoolPriority != null)
                    hashCode = hashCode * 59 + RolloutmgrThreadpoolPriority.GetHashCode();
                    if (RolloutmgrCommitSize != null)
                    hashCode = hashCode * 59 + RolloutmgrCommitSize.GetHashCode();
                    if (RolloutmgrConflicthandlingEnabled != null)
                    hashCode = hashCode * 59 + RolloutmgrConflicthandlingEnabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqWcmMsmImplRolloutManagerImplProperties left, ComDayCqWcmMsmImplRolloutManagerImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqWcmMsmImplRolloutManagerImplProperties left, ComDayCqWcmMsmImplRolloutManagerImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
