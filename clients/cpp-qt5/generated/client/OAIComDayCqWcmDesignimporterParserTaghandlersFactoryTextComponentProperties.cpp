/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties() {
    init();
}

OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::~OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::init() {
    service_ranking = new OAIConfigNodePropertyInteger();
    m_service_ranking_isSet = false;
    tagpattern = new OAIConfigNodePropertyString();
    m_tagpattern_isSet = false;
    component_resource_type = new OAIConfigNodePropertyString();
    m_component_resource_type_isSet = false;
}

void
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::cleanup() {
    if(service_ranking != nullptr) { 
        delete service_ranking;
    }
    if(tagpattern != nullptr) { 
        delete tagpattern;
    }
    if(component_resource_type != nullptr) { 
        delete component_resource_type;
    }
}

OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties*
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&service_ranking, pJson["service.ranking"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&tagpattern, pJson["tagpattern"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&component_resource_type, pJson["component.resourceType"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::asJsonObject() {
    QJsonObject obj;
    if((service_ranking != nullptr) && (service_ranking->isSet())){
        toJsonValue(QString("service.ranking"), service_ranking, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((tagpattern != nullptr) && (tagpattern->isSet())){
        toJsonValue(QString("tagpattern"), tagpattern, obj, QString("OAIConfigNodePropertyString"));
    }
    if((component_resource_type != nullptr) && (component_resource_type->isSet())){
        toJsonValue(QString("component.resourceType"), component_resource_type, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::getServiceRanking() {
    return service_ranking;
}
void
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::setServiceRanking(OAIConfigNodePropertyInteger* service_ranking) {
    this->service_ranking = service_ranking;
    this->m_service_ranking_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::getTagpattern() {
    return tagpattern;
}
void
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::setTagpattern(OAIConfigNodePropertyString* tagpattern) {
    this->tagpattern = tagpattern;
    this->m_tagpattern_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::getComponentResourceType() {
    return component_resource_type;
}
void
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::setComponentResourceType(OAIConfigNodePropertyString* component_resource_type) {
    this->component_resource_type = component_resource_type;
    this->m_component_resource_type_isSet = true;
}


bool
OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(service_ranking != nullptr && service_ranking->isSet()){ isObjectUpdated = true; break;}
        if(tagpattern != nullptr && tagpattern->isSet()){ isObjectUpdated = true; break;}
        if(component_resource_type != nullptr && component_resource_type->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

