/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties()
{
    m_CompatgroupsIsSet = false;
    m_EnabledIsSet = false;
}

ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::~ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties()
{
}

void ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CompatgroupsIsSet)
    {
        val[utility::conversions::to_string_t("compatgroups")] = ModelBase::toJson(m_Compatgroups);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }

    return val;
}

void ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("compatgroups")))
    {
        if(!val[utility::conversions::to_string_t("compatgroups")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("compatgroups")]);
            setCompatgroups( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        if(!val[utility::conversions::to_string_t("enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled")]);
            setEnabled( newItem );
        }
    }
}

void ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CompatgroupsIsSet)
    {
        if (m_Compatgroups.get())
        {
            m_Compatgroups->toMultipart(multipart, utility::conversions::to_string_t("compatgroups."));
        }
    }
    if(m_EnabledIsSet)
    {
        if (m_Enabled.get())
        {
            m_Enabled->toMultipart(multipart, utility::conversions::to_string_t("enabled."));
        }
    }
}

void ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("compatgroups")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("compatgroups")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("compatgroups."));
            setCompatgroups( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled."));
            setEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::getCompatgroups() const
{
    return m_Compatgroups;
}


void ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::setCompatgroups(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Compatgroups = value;
    m_CompatgroupsIsSet = true;
}
bool ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::compatgroupsIsSet() const
{
    return m_CompatgroupsIsSet;
}

void ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::unsetCompatgroups()
{
    m_CompatgroupsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::getEnabled() const
{
    return m_Enabled;
}


void ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}

}
}
}
}

