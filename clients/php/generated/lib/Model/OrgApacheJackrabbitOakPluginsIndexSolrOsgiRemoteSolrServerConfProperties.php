<?php
/**
 * OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'solr_http_url' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'solr_zk_host' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'solr_collection' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'solr_socket_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'solr_connection_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'solr_shards_no' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'solr_replication_factor' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'solr_conf_dir' => '\OpenAPI\Client\Model\ConfigNodePropertyString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'solr_http_url' => null,
        'solr_zk_host' => null,
        'solr_collection' => null,
        'solr_socket_timeout' => null,
        'solr_connection_timeout' => null,
        'solr_shards_no' => null,
        'solr_replication_factor' => null,
        'solr_conf_dir' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'solr_http_url' => 'solr.http.url',
        'solr_zk_host' => 'solr.zk.host',
        'solr_collection' => 'solr.collection',
        'solr_socket_timeout' => 'solr.socket.timeout',
        'solr_connection_timeout' => 'solr.connection.timeout',
        'solr_shards_no' => 'solr.shards.no',
        'solr_replication_factor' => 'solr.replication.factor',
        'solr_conf_dir' => 'solr.conf.dir'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'solr_http_url' => 'setSolrHttpUrl',
        'solr_zk_host' => 'setSolrZkHost',
        'solr_collection' => 'setSolrCollection',
        'solr_socket_timeout' => 'setSolrSocketTimeout',
        'solr_connection_timeout' => 'setSolrConnectionTimeout',
        'solr_shards_no' => 'setSolrShardsNo',
        'solr_replication_factor' => 'setSolrReplicationFactor',
        'solr_conf_dir' => 'setSolrConfDir'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'solr_http_url' => 'getSolrHttpUrl',
        'solr_zk_host' => 'getSolrZkHost',
        'solr_collection' => 'getSolrCollection',
        'solr_socket_timeout' => 'getSolrSocketTimeout',
        'solr_connection_timeout' => 'getSolrConnectionTimeout',
        'solr_shards_no' => 'getSolrShardsNo',
        'solr_replication_factor' => 'getSolrReplicationFactor',
        'solr_conf_dir' => 'getSolrConfDir'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['solr_http_url'] = isset($data['solr_http_url']) ? $data['solr_http_url'] : null;
        $this->container['solr_zk_host'] = isset($data['solr_zk_host']) ? $data['solr_zk_host'] : null;
        $this->container['solr_collection'] = isset($data['solr_collection']) ? $data['solr_collection'] : null;
        $this->container['solr_socket_timeout'] = isset($data['solr_socket_timeout']) ? $data['solr_socket_timeout'] : null;
        $this->container['solr_connection_timeout'] = isset($data['solr_connection_timeout']) ? $data['solr_connection_timeout'] : null;
        $this->container['solr_shards_no'] = isset($data['solr_shards_no']) ? $data['solr_shards_no'] : null;
        $this->container['solr_replication_factor'] = isset($data['solr_replication_factor']) ? $data['solr_replication_factor'] : null;
        $this->container['solr_conf_dir'] = isset($data['solr_conf_dir']) ? $data['solr_conf_dir'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets solr_http_url
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSolrHttpUrl()
    {
        return $this->container['solr_http_url'];
    }

    /**
     * Sets solr_http_url
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $solr_http_url solr_http_url
     *
     * @return $this
     */
    public function setSolrHttpUrl($solr_http_url)
    {
        $this->container['solr_http_url'] = $solr_http_url;

        return $this;
    }

    /**
     * Gets solr_zk_host
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSolrZkHost()
    {
        return $this->container['solr_zk_host'];
    }

    /**
     * Sets solr_zk_host
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $solr_zk_host solr_zk_host
     *
     * @return $this
     */
    public function setSolrZkHost($solr_zk_host)
    {
        $this->container['solr_zk_host'] = $solr_zk_host;

        return $this;
    }

    /**
     * Gets solr_collection
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSolrCollection()
    {
        return $this->container['solr_collection'];
    }

    /**
     * Sets solr_collection
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $solr_collection solr_collection
     *
     * @return $this
     */
    public function setSolrCollection($solr_collection)
    {
        $this->container['solr_collection'] = $solr_collection;

        return $this;
    }

    /**
     * Gets solr_socket_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getSolrSocketTimeout()
    {
        return $this->container['solr_socket_timeout'];
    }

    /**
     * Sets solr_socket_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $solr_socket_timeout solr_socket_timeout
     *
     * @return $this
     */
    public function setSolrSocketTimeout($solr_socket_timeout)
    {
        $this->container['solr_socket_timeout'] = $solr_socket_timeout;

        return $this;
    }

    /**
     * Gets solr_connection_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getSolrConnectionTimeout()
    {
        return $this->container['solr_connection_timeout'];
    }

    /**
     * Sets solr_connection_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $solr_connection_timeout solr_connection_timeout
     *
     * @return $this
     */
    public function setSolrConnectionTimeout($solr_connection_timeout)
    {
        $this->container['solr_connection_timeout'] = $solr_connection_timeout;

        return $this;
    }

    /**
     * Gets solr_shards_no
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getSolrShardsNo()
    {
        return $this->container['solr_shards_no'];
    }

    /**
     * Sets solr_shards_no
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $solr_shards_no solr_shards_no
     *
     * @return $this
     */
    public function setSolrShardsNo($solr_shards_no)
    {
        $this->container['solr_shards_no'] = $solr_shards_no;

        return $this;
    }

    /**
     * Gets solr_replication_factor
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getSolrReplicationFactor()
    {
        return $this->container['solr_replication_factor'];
    }

    /**
     * Sets solr_replication_factor
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $solr_replication_factor solr_replication_factor
     *
     * @return $this
     */
    public function setSolrReplicationFactor($solr_replication_factor)
    {
        $this->container['solr_replication_factor'] = $solr_replication_factor;

        return $this;
    }

    /**
     * Gets solr_conf_dir
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSolrConfDir()
    {
        return $this->container['solr_conf_dir'];
    }

    /**
     * Sets solr_conf_dir
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $solr_conf_dir solr_conf_dir
     *
     * @return $this
     */
    public function setSolrConfDir($solr_conf_dir)
    {
        $this->container['solr_conf_dir'] = $solr_conf_dir;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


