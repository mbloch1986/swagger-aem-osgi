/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplServletBinaryProviderServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplServletBinaryProviderServletProperties::ComDayCqDamCoreImplServletBinaryProviderServletProperties()
{
    m_Sling_servlet_resourceTypesIsSet = false;
    m_Sling_servlet_methodsIsSet = false;
    m_Cq_dam_drm_enableIsSet = false;
}

ComDayCqDamCoreImplServletBinaryProviderServletProperties::~ComDayCqDamCoreImplServletBinaryProviderServletProperties()
{
}

void ComDayCqDamCoreImplServletBinaryProviderServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplServletBinaryProviderServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Sling_servlet_resourceTypesIsSet)
    {
        val[utility::conversions::to_string_t("sling.servlet.resourceTypes")] = ModelBase::toJson(m_Sling_servlet_resourceTypes);
    }
    if(m_Sling_servlet_methodsIsSet)
    {
        val[utility::conversions::to_string_t("sling.servlet.methods")] = ModelBase::toJson(m_Sling_servlet_methods);
    }
    if(m_Cq_dam_drm_enableIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.drm.enable")] = ModelBase::toJson(m_Cq_dam_drm_enable);
    }

    return val;
}

void ComDayCqDamCoreImplServletBinaryProviderServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("sling.servlet.resourceTypes")))
    {
        if(!val[utility::conversions::to_string_t("sling.servlet.resourceTypes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.servlet.resourceTypes")]);
            setSlingServletResourceTypes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.servlet.methods")))
    {
        if(!val[utility::conversions::to_string_t("sling.servlet.methods")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.servlet.methods")]);
            setSlingServletMethods( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.drm.enable")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.drm.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.drm.enable")]);
            setCqDamDrmEnable( newItem );
        }
    }
}

void ComDayCqDamCoreImplServletBinaryProviderServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Sling_servlet_resourceTypesIsSet)
    {
        if (m_Sling_servlet_resourceTypes.get())
        {
            m_Sling_servlet_resourceTypes->toMultipart(multipart, utility::conversions::to_string_t("sling.servlet.resourceTypes."));
        }
    }
    if(m_Sling_servlet_methodsIsSet)
    {
        if (m_Sling_servlet_methods.get())
        {
            m_Sling_servlet_methods->toMultipart(multipart, utility::conversions::to_string_t("sling.servlet.methods."));
        }
    }
    if(m_Cq_dam_drm_enableIsSet)
    {
        if (m_Cq_dam_drm_enable.get())
        {
            m_Cq_dam_drm_enable->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.drm.enable."));
        }
    }
}

void ComDayCqDamCoreImplServletBinaryProviderServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sling.servlet.resourceTypes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.servlet.resourceTypes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.servlet.resourceTypes."));
            setSlingServletResourceTypes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.servlet.methods")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.servlet.methods")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.servlet.methods."));
            setSlingServletMethods( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.drm.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.drm.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.drm.enable."));
            setCqDamDrmEnable( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqDamCoreImplServletBinaryProviderServletProperties::getSlingServletResourceTypes() const
{
    return m_Sling_servlet_resourceTypes;
}


void ComDayCqDamCoreImplServletBinaryProviderServletProperties::setSlingServletResourceTypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Sling_servlet_resourceTypes = value;
    m_Sling_servlet_resourceTypesIsSet = true;
}
bool ComDayCqDamCoreImplServletBinaryProviderServletProperties::slingServletResourceTypesIsSet() const
{
    return m_Sling_servlet_resourceTypesIsSet;
}

void ComDayCqDamCoreImplServletBinaryProviderServletProperties::unsetSling_servlet_resourceTypes()
{
    m_Sling_servlet_resourceTypesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqDamCoreImplServletBinaryProviderServletProperties::getSlingServletMethods() const
{
    return m_Sling_servlet_methods;
}


void ComDayCqDamCoreImplServletBinaryProviderServletProperties::setSlingServletMethods(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Sling_servlet_methods = value;
    m_Sling_servlet_methodsIsSet = true;
}
bool ComDayCqDamCoreImplServletBinaryProviderServletProperties::slingServletMethodsIsSet() const
{
    return m_Sling_servlet_methodsIsSet;
}

void ComDayCqDamCoreImplServletBinaryProviderServletProperties::unsetSling_servlet_methods()
{
    m_Sling_servlet_methodsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplServletBinaryProviderServletProperties::getCqDamDrmEnable() const
{
    return m_Cq_dam_drm_enable;
}


void ComDayCqDamCoreImplServletBinaryProviderServletProperties::setCqDamDrmEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_dam_drm_enable = value;
    m_Cq_dam_drm_enableIsSet = true;
}
bool ComDayCqDamCoreImplServletBinaryProviderServletProperties::cqDamDrmEnableIsSet() const
{
    return m_Cq_dam_drm_enableIsSet;
}

void ComDayCqDamCoreImplServletBinaryProviderServletProperties::unsetCq_dam_drm_enable()
{
    m_Cq_dam_drm_enableIsSet = false;
}

}
}
}
}

