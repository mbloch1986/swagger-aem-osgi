/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComAdobeCqProjectsPurgeSchedulerProperties.h
 *
 * 
 */

#ifndef OAIComAdobeCqProjectsPurgeSchedulerProperties_H
#define OAIComAdobeCqProjectsPurgeSchedulerProperties_H

#include <QJsonObject>


#include "OAIConfigNodePropertyArray.h"
#include "OAIConfigNodePropertyBoolean.h"
#include "OAIConfigNodePropertyInteger.h"
#include "OAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComAdobeCqProjectsPurgeSchedulerProperties: public OAIObject {
public:
    OAIComAdobeCqProjectsPurgeSchedulerProperties();
    OAIComAdobeCqProjectsPurgeSchedulerProperties(QString json);
    ~OAIComAdobeCqProjectsPurgeSchedulerProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigNodePropertyString getScheduledpurgeName() const;
    void setScheduledpurgeName(const OAIConfigNodePropertyString &scheduledpurge_name);

    OAIConfigNodePropertyBoolean getScheduledpurgePurgeActive() const;
    void setScheduledpurgePurgeActive(const OAIConfigNodePropertyBoolean &scheduledpurge_purge_active);

    OAIConfigNodePropertyArray getScheduledpurgeTemplates() const;
    void setScheduledpurgeTemplates(const OAIConfigNodePropertyArray &scheduledpurge_templates);

    OAIConfigNodePropertyBoolean getScheduledpurgePurgeGroups() const;
    void setScheduledpurgePurgeGroups(const OAIConfigNodePropertyBoolean &scheduledpurge_purge_groups);

    OAIConfigNodePropertyBoolean getScheduledpurgePurgeAssets() const;
    void setScheduledpurgePurgeAssets(const OAIConfigNodePropertyBoolean &scheduledpurge_purge_assets);

    OAIConfigNodePropertyBoolean getScheduledpurgeTerminateRunningWorkflows() const;
    void setScheduledpurgeTerminateRunningWorkflows(const OAIConfigNodePropertyBoolean &scheduledpurge_terminate_running_workflows);

    OAIConfigNodePropertyInteger getScheduledpurgeDaysold() const;
    void setScheduledpurgeDaysold(const OAIConfigNodePropertyInteger &scheduledpurge_daysold);

    OAIConfigNodePropertyInteger getScheduledpurgeSaveThreshold() const;
    void setScheduledpurgeSaveThreshold(const OAIConfigNodePropertyInteger &scheduledpurge_save_threshold);

    virtual bool isSet() const override;

private:
    OAIConfigNodePropertyString scheduledpurge_name;
    bool m_scheduledpurge_name_isSet;

    OAIConfigNodePropertyBoolean scheduledpurge_purge_active;
    bool m_scheduledpurge_purge_active_isSet;

    OAIConfigNodePropertyArray scheduledpurge_templates;
    bool m_scheduledpurge_templates_isSet;

    OAIConfigNodePropertyBoolean scheduledpurge_purge_groups;
    bool m_scheduledpurge_purge_groups_isSet;

    OAIConfigNodePropertyBoolean scheduledpurge_purge_assets;
    bool m_scheduledpurge_purge_assets_isSet;

    OAIConfigNodePropertyBoolean scheduledpurge_terminate_running_workflows;
    bool m_scheduledpurge_terminate_running_workflows_isSet;

    OAIConfigNodePropertyInteger scheduledpurge_daysold;
    bool m_scheduledpurge_daysold_isSet;

    OAIConfigNodePropertyInteger scheduledpurge_save_threshold;
    bool m_scheduledpurge_save_threshold_isSet;

};

}

#endif // OAIComAdobeCqProjectsPurgeSchedulerProperties_H
