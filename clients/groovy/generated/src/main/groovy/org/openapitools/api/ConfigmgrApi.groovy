package org.openapitools.api;

import groovyx.net.http.*
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*
import org.openapitools.api.ApiUtils

import org.openapitools.model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
import org.openapitools.model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
import org.openapitools.model.AnalyticsComponentQueryCacheServiceInfo
import org.openapitools.model.ApacheSlingHealthCheckResultHTMLSerializerInfo
import java.math.BigDecimal
import org.openapitools.model.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
import org.openapitools.model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo
import org.openapitools.model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
import org.openapitools.model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
import org.openapitools.model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
import org.openapitools.model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
import org.openapitools.model.ComAdobeCqAccountApiAccountManagementServiceInfo
import org.openapitools.model.ComAdobeCqAccountImplAccountManagementServletInfo
import org.openapitools.model.ComAdobeCqAddressImplLocationLocationListServletInfo
import org.openapitools.model.ComAdobeCqAuditPurgeDamInfo
import org.openapitools.model.ComAdobeCqAuditPurgePagesInfo
import org.openapitools.model.ComAdobeCqAuditPurgeReplicationInfo
import org.openapitools.model.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
import org.openapitools.model.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
import org.openapitools.model.ComAdobeCqCdnRewriterImplCDNRewriterInfo
import org.openapitools.model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
import org.openapitools.model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
import org.openapitools.model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
import org.openapitools.model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
import org.openapitools.model.ComAdobeCqCommerceImplAssetVideoHandlerInfo
import org.openapitools.model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
import org.openapitools.model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
import org.openapitools.model.ComAdobeCqCommercePimImplPageEventListenerInfo
import org.openapitools.model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
import org.openapitools.model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
import org.openapitools.model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
import org.openapitools.model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
import org.openapitools.model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
import org.openapitools.model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
import org.openapitools.model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
import org.openapitools.model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
import org.openapitools.model.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
import org.openapitools.model.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
import org.openapitools.model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
import org.openapitools.model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
import org.openapitools.model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
import org.openapitools.model.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
import org.openapitools.model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
import org.openapitools.model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
import org.openapitools.model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
import org.openapitools.model.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
import org.openapitools.model.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
import org.openapitools.model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
import org.openapitools.model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
import org.openapitools.model.ComAdobeCqHcContentPackagesHealthCheckInfo
import org.openapitools.model.ComAdobeCqHistoryImplHistoryRequestFilterInfo
import org.openapitools.model.ComAdobeCqHistoryImplHistoryServiceImplInfo
import org.openapitools.model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
import org.openapitools.model.ComAdobeCqProjectsImplServletProjectImageServletInfo
import org.openapitools.model.ComAdobeCqProjectsPurgeSchedulerInfo
import org.openapitools.model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
import org.openapitools.model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
import org.openapitools.model.ComAdobeCqScreensDeviceImplDeviceServiceInfo
import org.openapitools.model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
import org.openapitools.model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
import org.openapitools.model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
import org.openapitools.model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
import org.openapitools.model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo
import org.openapitools.model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
import org.openapitools.model.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
import org.openapitools.model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
import org.openapitools.model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
import org.openapitools.model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
import org.openapitools.model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
import org.openapitools.model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
import org.openapitools.model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
import org.openapitools.model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
import org.openapitools.model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
import org.openapitools.model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
import org.openapitools.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
import org.openapitools.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
import org.openapitools.model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
import org.openapitools.model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
import org.openapitools.model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
import org.openapitools.model.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
import org.openapitools.model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
import org.openapitools.model.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
import org.openapitools.model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
import org.openapitools.model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
import org.openapitools.model.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
import org.openapitools.model.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
import org.openapitools.model.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
import org.openapitools.model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
import org.openapitools.model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
import org.openapitools.model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
import org.openapitools.model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
import org.openapitools.model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
import org.openapitools.model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
import org.openapitools.model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
import org.openapitools.model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
import org.openapitools.model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
import org.openapitools.model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
import org.openapitools.model.ComAdobeCqSocialGroupImplGroupServiceImplInfo
import org.openapitools.model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
import org.openapitools.model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
import org.openapitools.model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
import org.openapitools.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
import org.openapitools.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
import org.openapitools.model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
import org.openapitools.model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
import org.openapitools.model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
import org.openapitools.model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo
import org.openapitools.model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
import org.openapitools.model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
import org.openapitools.model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
import org.openapitools.model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
import org.openapitools.model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
import org.openapitools.model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
import org.openapitools.model.ComAdobeCqSocialScoringImplScoringEventListenerInfo
import org.openapitools.model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
import org.openapitools.model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
import org.openapitools.model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
import org.openapitools.model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
import org.openapitools.model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
import org.openapitools.model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo
import org.openapitools.model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
import org.openapitools.model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
import org.openapitools.model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
import org.openapitools.model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
import org.openapitools.model.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
import org.openapitools.model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
import org.openapitools.model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
import org.openapitools.model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
import org.openapitools.model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
import org.openapitools.model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
import org.openapitools.model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
import org.openapitools.model.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
import org.openapitools.model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
import org.openapitools.model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
import org.openapitools.model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
import org.openapitools.model.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
import org.openapitools.model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
import org.openapitools.model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
import org.openapitools.model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
import org.openapitools.model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
import org.openapitools.model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
import org.openapitools.model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
import org.openapitools.model.ComAdobeFormsCommonServletTempCleanUpTaskInfo
import org.openapitools.model.ComAdobeGraniteAcpPlatformPlatformServletInfo
import org.openapitools.model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
import org.openapitools.model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
import org.openapitools.model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
import org.openapitools.model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
import org.openapitools.model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
import org.openapitools.model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSProviderImplInfo
import org.openapitools.model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
import org.openapitools.model.ComAdobeGraniteAuthImsInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
import org.openapitools.model.ComAdobeGraniteAuthOauthProviderInfo
import org.openapitools.model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
import org.openapitools.model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
import org.openapitools.model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
import org.openapitools.model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
import org.openapitools.model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
import org.openapitools.model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo
import org.openapitools.model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
import org.openapitools.model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
import org.openapitools.model.ComAdobeGraniteContexthubImplContextHubImplInfo
import org.openapitools.model.ComAdobeGraniteCorsImplCORSPolicyImplInfo
import org.openapitools.model.ComAdobeGraniteCsrfImplCSRFFilterInfo
import org.openapitools.model.ComAdobeGraniteCsrfImplCSRFServletInfo
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
import org.openapitools.model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
import org.openapitools.model.ComAdobeGraniteFragsImplRandomFeatureInfo
import org.openapitools.model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
import org.openapitools.model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
import org.openapitools.model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
import org.openapitools.model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
import org.openapitools.model.ComAdobeGraniteInfocollectorInfoCollectorInfo
import org.openapitools.model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
import org.openapitools.model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
import org.openapitools.model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo
import org.openapitools.model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
import org.openapitools.model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo
import org.openapitools.model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
import org.openapitools.model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
import org.openapitools.model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
import org.openapitools.model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
import org.openapitools.model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
import org.openapitools.model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo
import org.openapitools.model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
import org.openapitools.model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
import org.openapitools.model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo
import org.openapitools.model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
import org.openapitools.model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
import org.openapitools.model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
import org.openapitools.model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
import org.openapitools.model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
import org.openapitools.model.ComAdobeGraniteRestImplServletDefaultGETServletInfo
import org.openapitools.model.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
import org.openapitools.model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
import org.openapitools.model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
import org.openapitools.model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
import org.openapitools.model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
import org.openapitools.model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
import org.openapitools.model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
import org.openapitools.model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
import org.openapitools.model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
import org.openapitools.model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
import org.openapitools.model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
import org.openapitools.model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
import org.openapitools.model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
import org.openapitools.model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
import org.openapitools.model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
import org.openapitools.model.ComAdobeGraniteWorkflowPurgeSchedulerInfo
import org.openapitools.model.ComAdobeOctopusNcommBootstrapInfo
import org.openapitools.model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
import org.openapitools.model.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
import org.openapitools.model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
import org.openapitools.model.ComDayCommonsHttpclientInfo
import org.openapitools.model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
import org.openapitools.model.ComDayCqAuthImplCugCugSupportImplInfo
import org.openapitools.model.ComDayCqAuthImplLoginSelectorHandlerInfo
import org.openapitools.model.ComDayCqCommonsImplExternalizerImplInfo
import org.openapitools.model.ComDayCqCommonsServletsRootMappingServletInfo
import org.openapitools.model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
import org.openapitools.model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
import org.openapitools.model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
import org.openapitools.model.ComDayCqContentsyncImplContentSyncManagerImplInfo
import org.openapitools.model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo
import org.openapitools.model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
import org.openapitools.model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo
import org.openapitools.model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
import org.openapitools.model.ComDayCqDamCoreImplAssetMoveListenerInfo
import org.openapitools.model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
import org.openapitools.model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
import org.openapitools.model.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
import org.openapitools.model.ComDayCqDamCoreImplDamChangeEventListenerInfo
import org.openapitools.model.ComDayCqDamCoreImplDamEventPurgeServiceInfo
import org.openapitools.model.ComDayCqDamCoreImplDamEventRecorderImplInfo
import org.openapitools.model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo
import org.openapitools.model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo
import org.openapitools.model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
import org.openapitools.model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
import org.openapitools.model.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
import org.openapitools.model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
import org.openapitools.model.ComDayCqDamCoreImplHandlerJpegHandlerInfo
import org.openapitools.model.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
import org.openapitools.model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
import org.openapitools.model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
import org.openapitools.model.ComDayCqDamCoreImplLightboxLightboxServletInfo
import org.openapitools.model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
import org.openapitools.model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
import org.openapitools.model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
import org.openapitools.model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
import org.openapitools.model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
import org.openapitools.model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo
import org.openapitools.model.ComDayCqDamCoreImplRenditionMakerImplInfo
import org.openapitools.model.ComDayCqDamCoreImplReportsReportExportServiceInfo
import org.openapitools.model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo
import org.openapitools.model.ComDayCqDamCoreImplServletAssetDownloadServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletAssetStatusServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletBatchMetadataServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletBinaryProviderServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletCollectionServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletCollectionsServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletCompanionServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletCreateAssetServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
import org.openapitools.model.ComDayCqDamCoreImplServletGuidLookupFilterInfo
import org.openapitools.model.ComDayCqDamCoreImplServletHealthCheckServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletMetadataGetServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
import org.openapitools.model.ComDayCqDamCoreImplServletResourceCollectionServletInfo
import org.openapitools.model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
import org.openapitools.model.ComDayCqDamCoreImplUnzipUnzipConfigInfo
import org.openapitools.model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
import org.openapitools.model.ComDayCqDamCoreProcessExtractMetadataProcessInfo
import org.openapitools.model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo
import org.openapitools.model.ComDayCqDamHandlerFfmpegLocatorImplInfo
import org.openapitools.model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
import org.openapitools.model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo
import org.openapitools.model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
import org.openapitools.model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo
import org.openapitools.model.ComDayCqDamIdsImplIDSJobProcessorInfo
import org.openapitools.model.ComDayCqDamIdsImplIDSPoolManagerImplInfo
import org.openapitools.model.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
import org.openapitools.model.ComDayCqDamInddImplServletSnippetCreationServletInfo
import org.openapitools.model.ComDayCqDamInddProcessINDDMediaExtractProcessInfo
import org.openapitools.model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
import org.openapitools.model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
import org.openapitools.model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
import org.openapitools.model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
import org.openapitools.model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
import org.openapitools.model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
import org.openapitools.model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
import org.openapitools.model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
import org.openapitools.model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
import org.openapitools.model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
import org.openapitools.model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
import org.openapitools.model.ComDayCqDamScene7ImplScene7APIClientImplInfo
import org.openapitools.model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
import org.openapitools.model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
import org.openapitools.model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
import org.openapitools.model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
import org.openapitools.model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo
import org.openapitools.model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
import org.openapitools.model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
import org.openapitools.model.ComDayCqDamVideoImplServletVideoTestServletInfo
import org.openapitools.model.ComDayCqExtwidgetServletsImageSpriteServletInfo
import org.openapitools.model.ComDayCqImageInternalFontFontHelperInfo
import org.openapitools.model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo
import org.openapitools.model.ComDayCqMailerDefaultMailServiceInfo
import org.openapitools.model.ComDayCqMailerImplCqMailingServiceInfo
import org.openapitools.model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
import org.openapitools.model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
import org.openapitools.model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo
import org.openapitools.model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
import org.openapitools.model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
import org.openapitools.model.ComDayCqMcmImplMCMConfigurationInfo
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
import org.openapitools.model.ComDayCqNotificationImplNotificationServiceImplInfo
import org.openapitools.model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
import org.openapitools.model.ComDayCqPollingImporterImplManagedPollConfigImplInfo
import org.openapitools.model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo
import org.openapitools.model.ComDayCqPollingImporterImplPollingImporterImplInfo
import org.openapitools.model.ComDayCqReplicationAuditReplicationEventListenerInfo
import org.openapitools.model.ComDayCqReplicationContentStaticContentBuilderInfo
import org.openapitools.model.ComDayCqReplicationImplAgentManagerImplInfo
import org.openapitools.model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
import org.openapitools.model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
import org.openapitools.model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
import org.openapitools.model.ComDayCqReplicationImplReplicationReceiverImplInfo
import org.openapitools.model.ComDayCqReplicationImplReplicatorImplInfo
import org.openapitools.model.ComDayCqReplicationImplReverseReplicatorInfo
import org.openapitools.model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
import org.openapitools.model.ComDayCqReplicationImplTransportHttpInfo
import org.openapitools.model.ComDayCqReportingImplCacheCacheImplInfo
import org.openapitools.model.ComDayCqReportingImplConfigServiceImplInfo
import org.openapitools.model.ComDayCqReportingImplRLogAnalyzerInfo
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
import org.openapitools.model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
import org.openapitools.model.ComDayCqSearchImplBuilderQueryBuilderImplInfo
import org.openapitools.model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
import org.openapitools.model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
import org.openapitools.model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
import org.openapitools.model.ComDayCqSecurityACLSetupInfo
import org.openapitools.model.ComDayCqStatisticsImplStatisticsServiceImplInfo
import org.openapitools.model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
import org.openapitools.model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
import org.openapitools.model.ComDayCqTaggingImplTagGarbageCollectorInfo
import org.openapitools.model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
import org.openapitools.model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
import org.openapitools.model.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
import org.openapitools.model.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
import org.openapitools.model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
import org.openapitools.model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
import org.openapitools.model.ComDayCqWcmCoreImplEventPagePostProcessorInfo
import org.openapitools.model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
import org.openapitools.model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
import org.openapitools.model.ComDayCqWcmCoreImplLanguageManagerImplInfo
import org.openapitools.model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
import org.openapitools.model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
import org.openapitools.model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
import org.openapitools.model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
import org.openapitools.model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo
import org.openapitools.model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
import org.openapitools.model.ComDayCqWcmCoreImplServletsThumbnailServletInfo
import org.openapitools.model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
import org.openapitools.model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
import org.openapitools.model.ComDayCqWcmCoreImplVersionManagerImplInfo
import org.openapitools.model.ComDayCqWcmCoreImplVersionPurgeTaskInfo
import org.openapitools.model.ComDayCqWcmCoreImplWCMDebugFilterInfo
import org.openapitools.model.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
import org.openapitools.model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
import org.openapitools.model.ComDayCqWcmCoreMvtMVTStatisticsImplInfo
import org.openapitools.model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
import org.openapitools.model.ComDayCqWcmCoreWCMRequestFilterInfo
import org.openapitools.model.ComDayCqWcmDesignimporterDesignPackageImporterInfo
import org.openapitools.model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
import org.openapitools.model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
import org.openapitools.model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
import org.openapitools.model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
import org.openapitools.model.ComDayCqWcmFoundationFormsImplMailServletInfo
import org.openapitools.model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
import org.openapitools.model.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
import org.openapitools.model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
import org.openapitools.model.ComDayCqWcmFoundationImplPageRedirectServletInfo
import org.openapitools.model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
import org.openapitools.model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
import org.openapitools.model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
import org.openapitools.model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
import org.openapitools.model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
import org.openapitools.model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
import org.openapitools.model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
import org.openapitools.model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
import org.openapitools.model.ComDayCqWcmMsmImplRolloutManagerImplInfo
import org.openapitools.model.ComDayCqWcmMsmImplServletsAuditLogServletInfo
import org.openapitools.model.ComDayCqWcmNotificationEmailImplEmailChannelInfo
import org.openapitools.model.ComDayCqWcmNotificationImplNotificationManagerImplInfo
import org.openapitools.model.ComDayCqWcmScriptingImplBVPManagerInfo
import org.openapitools.model.ComDayCqWcmUndoUndoConfigInfo
import org.openapitools.model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
import org.openapitools.model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
import org.openapitools.model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
import org.openapitools.model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo
import org.openapitools.model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo
import org.openapitools.model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
import org.openapitools.model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
import org.openapitools.model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
import org.openapitools.model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
import org.openapitools.model.GuideLocalizationServiceInfo
import org.openapitools.model.MessagingUserComponentFactoryInfo
import org.openapitools.model.OrgApacheAriesJmxFrameworkStateConfigInfo
import org.openapitools.model.OrgApacheFelixEventadminImplEventAdminInfo
import org.openapitools.model.OrgApacheFelixHttpInfo
import org.openapitools.model.OrgApacheFelixHttpSslfilterSslFilterInfo
import org.openapitools.model.OrgApacheFelixJaasConfigurationFactoryInfo
import org.openapitools.model.OrgApacheFelixJaasConfigurationSpiInfo
import org.openapitools.model.OrgApacheFelixScrScrServiceInfo
import org.openapitools.model.OrgApacheFelixSystemreadyImplComponentsCheckInfo
import org.openapitools.model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
import org.openapitools.model.OrgApacheFelixSystemreadyImplServicesCheckInfo
import org.openapitools.model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
import org.openapitools.model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
import org.openapitools.model.OrgApacheFelixSystemreadySystemReadyMonitorInfo
import org.openapitools.model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
import org.openapitools.model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
import org.openapitools.model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
import org.openapitools.model.OrgApacheHttpProxyconfiguratorInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
import org.openapitools.model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
import org.openapitools.model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
import org.openapitools.model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
import org.openapitools.model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
import org.openapitools.model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
import org.openapitools.model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
import org.openapitools.model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
import org.openapitools.model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
import org.openapitools.model.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
import org.openapitools.model.OrgApacheSlingAuthCoreImplLogoutServletInfo
import org.openapitools.model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
import org.openapitools.model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
import org.openapitools.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
import org.openapitools.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
import org.openapitools.model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
import org.openapitools.model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
import org.openapitools.model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
import org.openapitools.model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
import org.openapitools.model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
import org.openapitools.model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerInfo
import org.openapitools.model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo
import org.openapitools.model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
import org.openapitools.model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
import org.openapitools.model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
import org.openapitools.model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
import org.openapitools.model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
import org.openapitools.model.OrgApacheSlingDatasourceDataSourceFactoryInfo
import org.openapitools.model.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
import org.openapitools.model.OrgApacheSlingDiscoveryOakConfigInfo
import org.openapitools.model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
import org.openapitools.model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
import org.openapitools.model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
import org.openapitools.model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
import org.openapitools.model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
import org.openapitools.model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
import org.openapitools.model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
import org.openapitools.model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
import org.openapitools.model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
import org.openapitools.model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
import org.openapitools.model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
import org.openapitools.model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
import org.openapitools.model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
import org.openapitools.model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
import org.openapitools.model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
import org.openapitools.model.OrgApacheSlingEngineImplLogRequestLoggerInfo
import org.openapitools.model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
import org.openapitools.model.OrgApacheSlingEngineImplSlingMainServletInfo
import org.openapitools.model.OrgApacheSlingEngineParametersInfo
import org.openapitools.model.OrgApacheSlingEventImplEventingThreadPoolInfo
import org.openapitools.model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo
import org.openapitools.model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
import org.openapitools.model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo
import org.openapitools.model.OrgApacheSlingEventJobsQueueConfigurationInfo
import org.openapitools.model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
import org.openapitools.model.OrgApacheSlingFeatureflagsFeatureInfo
import org.openapitools.model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
import org.openapitools.model.OrgApacheSlingHapiImplHApiUtilImplInfo
import org.openapitools.model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
import org.openapitools.model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
import org.openapitools.model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
import org.openapitools.model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
import org.openapitools.model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
import org.openapitools.model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
import org.openapitools.model.OrgApacheSlingI18nImplI18NFilterInfo
import org.openapitools.model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
import org.openapitools.model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
import org.openapitools.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
import org.openapitools.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
import org.openapitools.model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
import org.openapitools.model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
import org.openapitools.model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
import org.openapitools.model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
import org.openapitools.model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
import org.openapitools.model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
import org.openapitools.model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
import org.openapitools.model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
import org.openapitools.model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
import org.openapitools.model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
import org.openapitools.model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
import org.openapitools.model.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
import org.openapitools.model.OrgApacheSlingModelsImplModelAdapterFactoryInfo
import org.openapitools.model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
import org.openapitools.model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
import org.openapitools.model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
import org.openapitools.model.OrgApacheSlingResourcemergerPickerOverridingInfo
import org.openapitools.model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
import org.openapitools.model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
import org.openapitools.model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
import org.openapitools.model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
import org.openapitools.model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
import org.openapitools.model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
import org.openapitools.model.OrgApacheSlingSecurityImplContentDispositionFilterInfo
import org.openapitools.model.OrgApacheSlingSecurityImplReferrerFilterInfo
import org.openapitools.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
import org.openapitools.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
import org.openapitools.model.OrgApacheSlingServletsGetDefaultGetServletInfo
import org.openapitools.model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
import org.openapitools.model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
import org.openapitools.model.OrgApacheSlingServletsPostImplSlingPostServletInfo
import org.openapitools.model.OrgApacheSlingServletsResolverSlingServletResolverInfo
import org.openapitools.model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
import org.openapitools.model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo
import org.openapitools.model.OrgApacheSlingTenantInternalTenantProviderImplInfo
import org.openapitools.model.OrgApacheSlingTracerInternalLogTracerInfo
import org.openapitools.model.OrgApacheSlingXssImplXSSFilterImplInfo

import java.util.*;

@Mixin(ApiUtils)
class ConfigmgrApi {
    String basePath = "http://localhost"
    String versionPath = "/api/v1"

    def adaptiveFormAndInteractiveCommunicationWebChannelConfiguration ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean showPlaceholder, Integer maximumCacheEntries, String afScriptingCompatversion, Boolean makeFileNameUnique, Boolean generatingCompliantData, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(showPlaceholder)))
            queryParams.put("showPlaceholder", String.valueOf(showPlaceholder))

        if (!"null".equals(String.valueOf(maximumCacheEntries)))
            queryParams.put("maximumCacheEntries", String.valueOf(maximumCacheEntries))

        if (!"null".equals(String.valueOf(afScriptingCompatversion)))
            queryParams.put("af.scripting.compatversion", String.valueOf(afScriptingCompatversion))

        if (!"null".equals(String.valueOf(makeFileNameUnique)))
            queryParams.put("makeFileNameUnique", String.valueOf(makeFileNameUnique))

        if (!"null".equals(String.valueOf(generatingCompliantData)))
            queryParams.put("generatingCompliantData", String.valueOf(generatingCompliantData))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.class )

    }

    def adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fontList, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fontList)))
            queryParams.put("fontList", String.valueOf(fontList))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.class )

    }

    def analyticsComponentQueryCacheService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqAnalyticsComponentQueryCacheSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/Analytics Component Query Cache Service"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAnalyticsComponentQueryCacheSize)))
            queryParams.put("cq.analytics.component.query.cache.size", String.valueOf(cqAnalyticsComponentQueryCacheSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    AnalyticsComponentQueryCacheServiceInfo.class )

    }

    def apacheSlingHealthCheckResultHTMLSerializer ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String styleString, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/Apache Sling Health Check Result HTML Serializer"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(styleString)))
            queryParams.put("styleString", String.valueOf(styleString))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ApacheSlingHealthCheckResultHTMLSerializerInfo.class )

    }

    def comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean formsManagerConfigIncludeOOTBTemplates, Boolean formsManagerConfigIncludeDeprecatedTemplates, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(formsManagerConfigIncludeOOTBTemplates)))
            queryParams.put("formsManagerConfig.includeOOTBTemplates", String.valueOf(formsManagerConfigIncludeOOTBTemplates))

        if (!"null".equals(String.valueOf(formsManagerConfigIncludeDeprecatedTemplates)))
            queryParams.put("formsManagerConfig.includeDeprecatedTemplates", String.valueOf(formsManagerConfigIncludeDeprecatedTemplates))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.class )

    }

    def comAdobeAemTransactionCoreImplTransactionRecorder ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean isTransactionRecordingEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(isTransactionRecordingEnabled)))
            queryParams.put("isTransactionRecordingEnabled", String.valueOf(isTransactionRecordingEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeAemTransactionCoreImplTransactionRecorderInfo.class )

    }

    def comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String hcName, List<String> hcTags, String hcMbeanName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcName)))
            queryParams.put("hc.name", String.valueOf(hcName))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(hcMbeanName)))
            queryParams.put("hc.mbean.name", String.valueOf(hcMbeanName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.class )

    }

    def comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String hcName, List<String> hcTags, String hcMbeanName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcName)))
            queryParams.put("hc.name", String.valueOf(hcName))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(hcMbeanName)))
            queryParams.put("hc.mbean.name", String.valueOf(hcMbeanName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.class )

    }

    def comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> preUpgradeMaintenanceTasks, List<String> preUpgradeHcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(preUpgradeMaintenanceTasks)))
            queryParams.put("pre-upgrade.maintenance.tasks", String.valueOf(preUpgradeMaintenanceTasks))

        if (!"null".equals(String.valueOf(preUpgradeHcTags)))
            queryParams.put("pre-upgrade.hc.tags", String.valueOf(preUpgradeHcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.class )

    }

    def comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String rootPath, Boolean fixInconsistencies, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(rootPath)))
            queryParams.put("root.path", String.valueOf(rootPath))

        if (!"null".equals(String.valueOf(fixInconsistencies)))
            queryParams.put("fix.inconsistencies", String.valueOf(fixInconsistencies))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.class )

    }

    def comAdobeCqAccountApiAccountManagementService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqAccountmanagerTokenValidityPeriod, String cqAccountmanagerConfigRequestnewaccountMail, String cqAccountmanagerConfigRequestnewpwdMail, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAccountmanagerTokenValidityPeriod)))
            queryParams.put("cq.accountmanager.token.validity.period", String.valueOf(cqAccountmanagerTokenValidityPeriod))

        if (!"null".equals(String.valueOf(cqAccountmanagerConfigRequestnewaccountMail)))
            queryParams.put("cq.accountmanager.config.requestnewaccount.mail", String.valueOf(cqAccountmanagerConfigRequestnewaccountMail))

        if (!"null".equals(String.valueOf(cqAccountmanagerConfigRequestnewpwdMail)))
            queryParams.put("cq.accountmanager.config.requestnewpwd.mail", String.valueOf(cqAccountmanagerConfigRequestnewpwdMail))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqAccountApiAccountManagementServiceInfo.class )

    }

    def comAdobeCqAccountImplAccountManagementServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String cqAccountmanagerConfigInformnewaccountMail, String cqAccountmanagerConfigInformnewpwdMail, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAccountmanagerConfigInformnewaccountMail)))
            queryParams.put("cq.accountmanager.config.informnewaccount.mail", String.valueOf(cqAccountmanagerConfigInformnewaccountMail))

        if (!"null".equals(String.valueOf(cqAccountmanagerConfigInformnewpwdMail)))
            queryParams.put("cq.accountmanager.config.informnewpwd.mail", String.valueOf(cqAccountmanagerConfigInformnewpwdMail))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqAccountImplAccountManagementServletInfo.class )

    }

    def comAdobeCqAddressImplLocationLocationListServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqAddressLocationDefaultMaxResults, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAddressLocationDefaultMaxResults)))
            queryParams.put("cq.address.location.default.maxResults", String.valueOf(cqAddressLocationDefaultMaxResults))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqAddressImplLocationLocationListServletInfo.class )

    }

    def comAdobeCqAuditPurgeDam ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String auditlogRuleName, String auditlogRuleContentpath, Integer auditlogRuleMinimumage, String auditlogRuleTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.audit.purge.Dam"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(auditlogRuleName)))
            queryParams.put("auditlog.rule.name", String.valueOf(auditlogRuleName))

        if (!"null".equals(String.valueOf(auditlogRuleContentpath)))
            queryParams.put("auditlog.rule.contentpath", String.valueOf(auditlogRuleContentpath))

        if (!"null".equals(String.valueOf(auditlogRuleMinimumage)))
            queryParams.put("auditlog.rule.minimumage", String.valueOf(auditlogRuleMinimumage))

        if (!"null".equals(String.valueOf(auditlogRuleTypes)))
            queryParams.put("auditlog.rule.types", String.valueOf(auditlogRuleTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqAuditPurgeDamInfo.class )

    }

    def comAdobeCqAuditPurgePages ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String auditlogRuleName, String auditlogRuleContentpath, Integer auditlogRuleMinimumage, String auditlogRuleTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.audit.purge.Pages"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(auditlogRuleName)))
            queryParams.put("auditlog.rule.name", String.valueOf(auditlogRuleName))

        if (!"null".equals(String.valueOf(auditlogRuleContentpath)))
            queryParams.put("auditlog.rule.contentpath", String.valueOf(auditlogRuleContentpath))

        if (!"null".equals(String.valueOf(auditlogRuleMinimumage)))
            queryParams.put("auditlog.rule.minimumage", String.valueOf(auditlogRuleMinimumage))

        if (!"null".equals(String.valueOf(auditlogRuleTypes)))
            queryParams.put("auditlog.rule.types", String.valueOf(auditlogRuleTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqAuditPurgePagesInfo.class )

    }

    def comAdobeCqAuditPurgeReplication ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String auditlogRuleName, String auditlogRuleContentpath, Integer auditlogRuleMinimumage, String auditlogRuleTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.audit.purge.Replication"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(auditlogRuleName)))
            queryParams.put("auditlog.rule.name", String.valueOf(auditlogRuleName))

        if (!"null".equals(String.valueOf(auditlogRuleContentpath)))
            queryParams.put("auditlog.rule.contentpath", String.valueOf(auditlogRuleContentpath))

        if (!"null".equals(String.valueOf(auditlogRuleMinimumage)))
            queryParams.put("auditlog.rule.minimumage", String.valueOf(auditlogRuleMinimumage))

        if (!"null".equals(String.valueOf(auditlogRuleTypes)))
            queryParams.put("auditlog.rule.types", String.valueOf(auditlogRuleTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqAuditPurgeReplicationInfo.class )

    }

    def comAdobeCqCdnRewriterImplAWSCloudFrontRewriter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String keypairId, String keypairAlias, List<String> cdnrewriterAttributes, String cdnRewriterDistributionDomain, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(keypairId)))
            queryParams.put("keypair.id", String.valueOf(keypairId))

        if (!"null".equals(String.valueOf(keypairAlias)))
            queryParams.put("keypair.alias", String.valueOf(keypairAlias))

        if (!"null".equals(String.valueOf(cdnrewriterAttributes)))
            queryParams.put("cdnrewriter.attributes", String.valueOf(cdnrewriterAttributes))

        if (!"null".equals(String.valueOf(cdnRewriterDistributionDomain)))
            queryParams.put("cdn.rewriter.distribution.domain", String.valueOf(cdnRewriterDistributionDomain))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.class )

    }

    def comAdobeCqCdnRewriterImplCDNConfigServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String cdnConfigDistributionDomain, Boolean cdnConfigEnableRewriting, List<String> cdnConfigPathPrefixes, Integer cdnConfigCdnttl, String cdnConfigApplicationProtocol, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cdnConfigDistributionDomain)))
            queryParams.put("cdn.config.distribution.domain", String.valueOf(cdnConfigDistributionDomain))

        if (!"null".equals(String.valueOf(cdnConfigEnableRewriting)))
            queryParams.put("cdn.config.enable.rewriting", String.valueOf(cdnConfigEnableRewriting))

        if (!"null".equals(String.valueOf(cdnConfigPathPrefixes)))
            queryParams.put("cdn.config.path.prefixes", String.valueOf(cdnConfigPathPrefixes))

        if (!"null".equals(String.valueOf(cdnConfigCdnttl)))
            queryParams.put("cdn.config.cdnttl", String.valueOf(cdnConfigCdnttl))

        if (!"null".equals(String.valueOf(cdnConfigApplicationProtocol)))
            queryParams.put("cdn.config.application.protocol", String.valueOf(cdnConfigApplicationProtocol))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.class )

    }

    def comAdobeCqCdnRewriterImplCDNRewriter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, List<String> cdnrewriterAttributes, String cdnRewriterDistributionDomain, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(cdnrewriterAttributes)))
            queryParams.put("cdnrewriter.attributes", String.valueOf(cdnrewriterAttributes))

        if (!"null".equals(String.valueOf(cdnRewriterDistributionDomain)))
            queryParams.put("cdn.rewriter.distribution.domain", String.valueOf(cdnRewriterDistributionDomain))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCdnRewriterImplCDNRewriterInfo.class )

    }

    def comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> flushAgents, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(flushAgents)))
            queryParams.put("flush.agents", String.valueOf(flushAgents))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.class )

    }

    def comAdobeCqCommerceImplAssetDynamicImageHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqCommerceAssetHandlerActive, String cqCommerceAssetHandlerName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqCommerceAssetHandlerActive)))
            queryParams.put("cq.commerce.asset.handler.active", String.valueOf(cqCommerceAssetHandlerActive))

        if (!"null".equals(String.valueOf(cqCommerceAssetHandlerName)))
            queryParams.put("cq.commerce.asset.handler.name", String.valueOf(cqCommerceAssetHandlerName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.class )

    }

    def comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String cqCommerceAssetHandlerFallback, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqCommerceAssetHandlerFallback)))
            queryParams.put("cq.commerce.asset.handler.fallback", String.valueOf(cqCommerceAssetHandlerFallback))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.class )

    }

    def comAdobeCqCommerceImplAssetStaticImageHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqCommerceAssetHandlerActive, String cqCommerceAssetHandlerName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqCommerceAssetHandlerActive)))
            queryParams.put("cq.commerce.asset.handler.active", String.valueOf(cqCommerceAssetHandlerActive))

        if (!"null".equals(String.valueOf(cqCommerceAssetHandlerName)))
            queryParams.put("cq.commerce.asset.handler.name", String.valueOf(cqCommerceAssetHandlerName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.class )

    }

    def comAdobeCqCommerceImplAssetVideoHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqCommerceAssetHandlerActive, String cqCommerceAssetHandlerName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqCommerceAssetHandlerActive)))
            queryParams.put("cq.commerce.asset.handler.active", String.valueOf(cqCommerceAssetHandlerActive))

        if (!"null".equals(String.valueOf(cqCommerceAssetHandlerName)))
            queryParams.put("cq.commerce.asset.handler.name", String.valueOf(cqCommerceAssetHandlerName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCommerceImplAssetVideoHandlerInfo.class )

    }

    def comAdobeCqCommerceImplPromotionPromotionManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String cqCommercePromotionRoot, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqCommercePromotionRoot)))
            queryParams.put("cq.commerce.promotion.root", String.valueOf(cqCommercePromotionRoot))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.class )

    }

    def comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqCommerceCataloggeneratorBucketsize, String cqCommerceCataloggeneratorBucketname, List<String> cqCommerceCataloggeneratorExcludedtemplateproperties, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqCommerceCataloggeneratorBucketsize)))
            queryParams.put("cq.commerce.cataloggenerator.bucketsize", String.valueOf(cqCommerceCataloggeneratorBucketsize))

        if (!"null".equals(String.valueOf(cqCommerceCataloggeneratorBucketname)))
            queryParams.put("cq.commerce.cataloggenerator.bucketname", String.valueOf(cqCommerceCataloggeneratorBucketname))

        if (!"null".equals(String.valueOf(cqCommerceCataloggeneratorExcludedtemplateproperties)))
            queryParams.put("cq.commerce.cataloggenerator.excludedtemplateproperties", String.valueOf(cqCommerceCataloggeneratorExcludedtemplateproperties))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.class )

    }

    def comAdobeCqCommercePimImplPageEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqCommercePageeventlistenerEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqCommercePageeventlistenerEnabled)))
            queryParams.put("cq.commerce.pageeventlistener.enabled", String.valueOf(cqCommercePageeventlistenerEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCommercePimImplPageEventListenerInfo.class )

    }

    def comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String feedGeneratorAlgorithm, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(feedGeneratorAlgorithm)))
            queryParams.put("Feed generator algorithm", String.valueOf(feedGeneratorAlgorithm))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.class )

    }

    def comAdobeCqContentinsightImplReportingServicesSettingsProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String reportingservicesUrl, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(reportingservicesUrl)))
            queryParams.put("reportingservices.url", String.valueOf(reportingservicesUrl))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.class )

    }

    def comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String brightedgeUrl, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(brightedgeUrl)))
            queryParams.put("brightedge.url", String.valueOf(brightedgeUrl))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.class )

    }

    def comAdobeCqContentinsightImplServletsReportingServicesProxyServle ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> reportingservicesProxyWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(reportingservicesProxyWhitelist)))
            queryParams.put("reportingservices.proxy.whitelist", String.valueOf(reportingservicesProxyWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.class )

    }

    def comAdobeCqDamCfmImplComponentComponentConfigImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String damCfmComponentResourceType, String damCfmComponentFileReferenceProp, String damCfmComponentElementsProp, String damCfmComponentVariationProp, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(damCfmComponentResourceType)))
            queryParams.put("dam.cfm.component.resourceType", String.valueOf(damCfmComponentResourceType))

        if (!"null".equals(String.valueOf(damCfmComponentFileReferenceProp)))
            queryParams.put("dam.cfm.component.fileReferenceProp", String.valueOf(damCfmComponentFileReferenceProp))

        if (!"null".equals(String.valueOf(damCfmComponentElementsProp)))
            queryParams.put("dam.cfm.component.elementsProp", String.valueOf(damCfmComponentElementsProp))

        if (!"null".equals(String.valueOf(damCfmComponentVariationProp)))
            queryParams.put("dam.cfm.component.variationProp", String.valueOf(damCfmComponentVariationProp))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.class )

    }

    def comAdobeCqDamCfmImplConfFeatureConfigImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> damCfmResourceTypes, List<String> damCfmReferenceProperties, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(damCfmResourceTypes)))
            queryParams.put("dam.cfm.resourceTypes", String.valueOf(damCfmResourceTypes))

        if (!"null".equals(String.valueOf(damCfmReferenceProperties)))
            queryParams.put("dam.cfm.referenceProperties", String.valueOf(damCfmReferenceProperties))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.class )

    }

    def comAdobeCqDamCfmImplContentRewriterAssetProcessor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String pipelineType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(pipelineType)))
            queryParams.put("pipeline.type", String.valueOf(pipelineType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.class )

    }

    def comAdobeCqDamCfmImplContentRewriterParRangeFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String pipelineType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(pipelineType)))
            queryParams.put("pipeline.type", String.valueOf(pipelineType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.class )

    }

    def comAdobeCqDamCfmImplContentRewriterPayloadFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String pipelineType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(pipelineType)))
            queryParams.put("pipeline.type", String.valueOf(pipelineType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.class )

    }

    def comAdobeCqDamDmProcessImagePTiffManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxMemory, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxMemory)))
            queryParams.put("maxMemory", String.valueOf(maxMemory))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.class )

    }

    def comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean dmreplicateonmodifyEnabled, Boolean dmreplicateonmodifyForcesyncdeletes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(dmreplicateonmodifyEnabled)))
            queryParams.put("dmreplicateonmodify.enabled", String.valueOf(dmreplicateonmodifyEnabled))

        if (!"null".equals(String.valueOf(dmreplicateonmodifyForcesyncdeletes)))
            queryParams.put("dmreplicateonmodify.forcesyncdeletes", String.valueOf(dmreplicateonmodifyForcesyncdeletes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.class )

    }

    def comAdobeCqDamMacSyncHelperImplMACSyncClientImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer comAdobeDamMacSyncClientSoTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeDamMacSyncClientSoTimeout)))
            queryParams.put("com.adobe.dam.mac.sync.client.so.timeout", String.valueOf(comAdobeDamMacSyncClientSoTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.class )

    }

    def comAdobeCqDamMacSyncImplDAMSyncServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, Boolean comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, Integer comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, String comAdobeCqDamMacSyncDamsyncservicePlatform, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths)))
            queryParams.put("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths", String.valueOf(comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths))

        if (!"null".equals(String.valueOf(comAdobeCqDamMacSyncDamsyncserviceSyncRenditions)))
            queryParams.put("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions", String.valueOf(comAdobeCqDamMacSyncDamsyncserviceSyncRenditions))

        if (!"null".equals(String.valueOf(comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs)))
            queryParams.put("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms", String.valueOf(comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs))

        if (!"null".equals(String.valueOf(comAdobeCqDamMacSyncDamsyncservicePlatform)))
            queryParams.put("com.adobe.cq.dam.mac.sync.damsyncservice.platform", String.valueOf(comAdobeCqDamMacSyncDamsyncservicePlatform))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.class )

    }

    def comAdobeCqDamProcessorNuiImplNuiAssetProcessor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean nuiEnabled, String nuiServiceUrl, String nuiApiKey, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(nuiEnabled)))
            queryParams.put("nuiEnabled", String.valueOf(nuiEnabled))

        if (!"null".equals(String.valueOf(nuiServiceUrl)))
            queryParams.put("nuiServiceUrl", String.valueOf(nuiServiceUrl))

        if (!"null".equals(String.valueOf(nuiApiKey)))
            queryParams.put("nuiApiKey", String.valueOf(nuiApiKey))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.class )

    }

    def comAdobeCqDamS7imagingImplIsImageServerComponent ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String tcpPort, Boolean allowRemoteAccess, String maxRenderRgnPixels, String maxMessageSize, Integer randomAccessUrlTimeout, Integer workerThreads, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(tcpPort)))
            queryParams.put("TcpPort", String.valueOf(tcpPort))

        if (!"null".equals(String.valueOf(allowRemoteAccess)))
            queryParams.put("AllowRemoteAccess", String.valueOf(allowRemoteAccess))

        if (!"null".equals(String.valueOf(maxRenderRgnPixels)))
            queryParams.put("MaxRenderRgnPixels", String.valueOf(maxRenderRgnPixels))

        if (!"null".equals(String.valueOf(maxMessageSize)))
            queryParams.put("MaxMessageSize", String.valueOf(maxMessageSize))

        if (!"null".equals(String.valueOf(randomAccessUrlTimeout)))
            queryParams.put("RandomAccessUrlTimeout", String.valueOf(randomAccessUrlTimeout))

        if (!"null".equals(String.valueOf(workerThreads)))
            queryParams.put("WorkerThreads", String.valueOf(workerThreads))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.class )

    }

    def comAdobeCqDamS7imagingImplPsPlatformServerServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cacheEnable, List<String> cacheRootPaths, Integer cacheMaxSize, Integer cacheMaxEntries, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cacheEnable)))
            queryParams.put("cache.enable", String.valueOf(cacheEnable))

        if (!"null".equals(String.valueOf(cacheRootPaths)))
            queryParams.put("cache.rootPaths", String.valueOf(cacheRootPaths))

        if (!"null".equals(String.valueOf(cacheMaxSize)))
            queryParams.put("cache.maxSize", String.valueOf(cacheMaxSize))

        if (!"null".equals(String.valueOf(cacheMaxEntries)))
            queryParams.put("cache.maxEntries", String.valueOf(cacheMaxEntries))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.class )

    }

    def comAdobeCqDamWebdavImplIoAssetIOHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String pathPrefix, Boolean createVersion, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(pathPrefix)))
            queryParams.put("pathPrefix", String.valueOf(pathPrefix))

        if (!"null".equals(String.valueOf(createVersion)))
            queryParams.put("createVersion", String.valueOf(createVersion))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.class )

    }

    def comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamWebdavVersionLinkingEnable, Integer cqDamWebdavVersionLinkingSchedulerPeriod, Integer cqDamWebdavVersionLinkingStagingTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamWebdavVersionLinkingEnable)))
            queryParams.put("cq.dam.webdav.version.linking.enable", String.valueOf(cqDamWebdavVersionLinkingEnable))

        if (!"null".equals(String.valueOf(cqDamWebdavVersionLinkingSchedulerPeriod)))
            queryParams.put("cq.dam.webdav.version.linking.scheduler.period", String.valueOf(cqDamWebdavVersionLinkingSchedulerPeriod))

        if (!"null".equals(String.valueOf(cqDamWebdavVersionLinkingStagingTimeout)))
            queryParams.put("cq.dam.webdav.version.linking.staging.timeout", String.valueOf(cqDamWebdavVersionLinkingStagingTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.class )

    }

    def comAdobeCqDamWebdavImplIoSpecialFilesHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters)))
            queryParams.put("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters", String.valueOf(comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.class )

    }

    def comAdobeCqDeserfwImplDeserializationFirewallImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> firewallDeserializationWhitelist, List<String> firewallDeserializationBlacklist, String firewallDeserializationDiagnostics, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(firewallDeserializationWhitelist)))
            queryParams.put("firewall.deserialization.whitelist", String.valueOf(firewallDeserializationWhitelist))

        if (!"null".equals(String.valueOf(firewallDeserializationBlacklist)))
            queryParams.put("firewall.deserialization.blacklist", String.valueOf(firewallDeserializationBlacklist))

        if (!"null".equals(String.valueOf(firewallDeserializationDiagnostics)))
            queryParams.put("firewall.deserialization.diagnostics", String.valueOf(firewallDeserializationDiagnostics))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.class )

    }

    def comAdobeCqDtmImplServiceDTMWebServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer connectionTimeout, Integer socketTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(connectionTimeout)))
            queryParams.put("connection.timeout", String.valueOf(connectionTimeout))

        if (!"null".equals(String.valueOf(socketTimeout)))
            queryParams.put("socket.timeout", String.valueOf(socketTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.class )

    }

    def comAdobeCqDtmImplServletsDTMDeployHookServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> dtmStagingIpWhitelist, List<String> dtmProductionIpWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(dtmStagingIpWhitelist)))
            queryParams.put("dtm.staging.ip.whitelist", String.valueOf(dtmStagingIpWhitelist))

        if (!"null".equals(String.valueOf(dtmProductionIpWhitelist)))
            queryParams.put("dtm.production.ip.whitelist", String.valueOf(dtmProductionIpWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.class )

    }

    def comAdobeCqDtmReactorImplServiceWebServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String endpointUri, Integer connectionTimeout, Integer socketTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(endpointUri)))
            queryParams.put("endpointUri", String.valueOf(endpointUri))

        if (!"null".equals(String.valueOf(connectionTimeout)))
            queryParams.put("connectionTimeout", String.valueOf(connectionTimeout))

        if (!"null".equals(String.valueOf(socketTimeout)))
            queryParams.put("socketTimeout", String.valueOf(socketTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.class )

    }

    def comAdobeCqExperiencelogImplExperienceLogConfigServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, List<String> disabledForGroups, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(disabledForGroups)))
            queryParams.put("disabledForGroups", String.valueOf(disabledForGroups))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.class )

    }

    def comAdobeCqHcContentPackagesHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String hcName, List<String> hcTags, String hcMbeanName, List<String> packageNames, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcName)))
            queryParams.put("hc.name", String.valueOf(hcName))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(hcMbeanName)))
            queryParams.put("hc.mbean.name", String.valueOf(hcMbeanName))

        if (!"null".equals(String.valueOf(packageNames)))
            queryParams.put("package.names", String.valueOf(packageNames))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqHcContentPackagesHealthCheckInfo.class )

    }

    def comAdobeCqHistoryImplHistoryRequestFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> historyRequestFilterExcludedSelectors, List<String> historyRequestFilterExcludedExtensions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(historyRequestFilterExcludedSelectors)))
            queryParams.put("history.requestFilter.excludedSelectors", String.valueOf(historyRequestFilterExcludedSelectors))

        if (!"null".equals(String.valueOf(historyRequestFilterExcludedExtensions)))
            queryParams.put("history.requestFilter.excludedExtensions", String.valueOf(historyRequestFilterExcludedExtensions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqHistoryImplHistoryRequestFilterInfo.class )

    }

    def comAdobeCqHistoryImplHistoryServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> historyServiceResourceTypes, List<String> historyServicePathFilter, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(historyServiceResourceTypes)))
            queryParams.put("history.service.resourceTypes", String.valueOf(historyServiceResourceTypes))

        if (!"null".equals(String.valueOf(historyServicePathFilter)))
            queryParams.put("history.service.pathFilter", String.valueOf(historyServicePathFilter))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqHistoryImplHistoryServiceImplInfo.class )

    }

    def comAdobeCqInboxImplTypeproviderItemTypeProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> inboxImplTypeproviderRegistrypaths, List<String> inboxImplTypeproviderLegacypaths, String inboxImplTypeproviderDefaulturlFailureitem, String inboxImplTypeproviderDefaulturlWorkitem, String inboxImplTypeproviderDefaulturlTask, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(inboxImplTypeproviderRegistrypaths)))
            queryParams.put("inbox.impl.typeprovider.registrypaths", String.valueOf(inboxImplTypeproviderRegistrypaths))

        if (!"null".equals(String.valueOf(inboxImplTypeproviderLegacypaths)))
            queryParams.put("inbox.impl.typeprovider.legacypaths", String.valueOf(inboxImplTypeproviderLegacypaths))

        if (!"null".equals(String.valueOf(inboxImplTypeproviderDefaulturlFailureitem)))
            queryParams.put("inbox.impl.typeprovider.defaulturl.failureitem", String.valueOf(inboxImplTypeproviderDefaulturlFailureitem))

        if (!"null".equals(String.valueOf(inboxImplTypeproviderDefaulturlWorkitem)))
            queryParams.put("inbox.impl.typeprovider.defaulturl.workitem", String.valueOf(inboxImplTypeproviderDefaulturlWorkitem))

        if (!"null".equals(String.valueOf(inboxImplTypeproviderDefaulturlTask)))
            queryParams.put("inbox.impl.typeprovider.defaulturl.task", String.valueOf(inboxImplTypeproviderDefaulturlTask))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.class )

    }

    def comAdobeCqProjectsImplServletProjectImageServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String imageQuality, String imageSupportedResolutions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(imageQuality)))
            queryParams.put("image.quality", String.valueOf(imageQuality))

        if (!"null".equals(String.valueOf(imageSupportedResolutions)))
            queryParams.put("image.supported.resolutions", String.valueOf(imageSupportedResolutions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqProjectsImplServletProjectImageServletInfo.class )

    }

    def comAdobeCqProjectsPurgeScheduler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String scheduledpurgeName, Boolean scheduledpurgePurgeActive, List<String> scheduledpurgeTemplates, Boolean scheduledpurgePurgeGroups, Boolean scheduledpurgePurgeAssets, Boolean scheduledpurgeTerminateRunningWorkflows, Integer scheduledpurgeDaysold, Integer scheduledpurgeSaveThreshold, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(scheduledpurgeName)))
            queryParams.put("scheduledpurge.name", String.valueOf(scheduledpurgeName))

        if (!"null".equals(String.valueOf(scheduledpurgePurgeActive)))
            queryParams.put("scheduledpurge.purgeActive", String.valueOf(scheduledpurgePurgeActive))

        if (!"null".equals(String.valueOf(scheduledpurgeTemplates)))
            queryParams.put("scheduledpurge.templates", String.valueOf(scheduledpurgeTemplates))

        if (!"null".equals(String.valueOf(scheduledpurgePurgeGroups)))
            queryParams.put("scheduledpurge.purgeGroups", String.valueOf(scheduledpurgePurgeGroups))

        if (!"null".equals(String.valueOf(scheduledpurgePurgeAssets)))
            queryParams.put("scheduledpurge.purgeAssets", String.valueOf(scheduledpurgePurgeAssets))

        if (!"null".equals(String.valueOf(scheduledpurgeTerminateRunningWorkflows)))
            queryParams.put("scheduledpurge.terminateRunningWorkflows", String.valueOf(scheduledpurgeTerminateRunningWorkflows))

        if (!"null".equals(String.valueOf(scheduledpurgeDaysold)))
            queryParams.put("scheduledpurge.daysold", String.valueOf(scheduledpurgeDaysold))

        if (!"null".equals(String.valueOf(scheduledpurgeSaveThreshold)))
            queryParams.put("scheduledpurge.saveThreshold", String.valueOf(scheduledpurgeSaveThreshold))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqProjectsPurgeSchedulerInfo.class )

    }

    def comAdobeCqScheduledExporterImplScheduledExporterImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> includePaths, String exporterUser, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(includePaths)))
            queryParams.put("include.paths", String.valueOf(includePaths))

        if (!"null".equals(String.valueOf(exporterUser)))
            queryParams.put("exporter.user", String.valueOf(exporterUser))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.class )

    }

    def comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String comAdobeCqScreensAnalyticsImplUrl, String comAdobeCqScreensAnalyticsImplApikey, String comAdobeCqScreensAnalyticsImplProject, String comAdobeCqScreensAnalyticsImplEnvironment, Integer comAdobeCqScreensAnalyticsImplSendFrequency, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeCqScreensAnalyticsImplUrl)))
            queryParams.put("com.adobe.cq.screens.analytics.impl.url", String.valueOf(comAdobeCqScreensAnalyticsImplUrl))

        if (!"null".equals(String.valueOf(comAdobeCqScreensAnalyticsImplApikey)))
            queryParams.put("com.adobe.cq.screens.analytics.impl.apikey", String.valueOf(comAdobeCqScreensAnalyticsImplApikey))

        if (!"null".equals(String.valueOf(comAdobeCqScreensAnalyticsImplProject)))
            queryParams.put("com.adobe.cq.screens.analytics.impl.project", String.valueOf(comAdobeCqScreensAnalyticsImplProject))

        if (!"null".equals(String.valueOf(comAdobeCqScreensAnalyticsImplEnvironment)))
            queryParams.put("com.adobe.cq.screens.analytics.impl.environment", String.valueOf(comAdobeCqScreensAnalyticsImplEnvironment))

        if (!"null".equals(String.valueOf(comAdobeCqScreensAnalyticsImplSendFrequency)))
            queryParams.put("com.adobe.cq.screens.analytics.impl.sendFrequency", String.valueOf(comAdobeCqScreensAnalyticsImplSendFrequency))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.class )

    }

    def comAdobeCqScreensDeviceImplDeviceService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer comAdobeAemScreensPlayerPingfrequency, String comAdobeAemScreensDevicePaswordSpecialchars, Integer comAdobeAemScreensDevicePaswordMinlowercasechars, Integer comAdobeAemScreensDevicePaswordMinuppercasechars, Integer comAdobeAemScreensDevicePaswordMinnumberchars, Integer comAdobeAemScreensDevicePaswordMinspecialchars, Integer comAdobeAemScreensDevicePaswordMinlength, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeAemScreensPlayerPingfrequency)))
            queryParams.put("com.adobe.aem.screens.player.pingfrequency", String.valueOf(comAdobeAemScreensPlayerPingfrequency))

        if (!"null".equals(String.valueOf(comAdobeAemScreensDevicePaswordSpecialchars)))
            queryParams.put("com.adobe.aem.screens.device.pasword.specialchars", String.valueOf(comAdobeAemScreensDevicePaswordSpecialchars))

        if (!"null".equals(String.valueOf(comAdobeAemScreensDevicePaswordMinlowercasechars)))
            queryParams.put("com.adobe.aem.screens.device.pasword.minlowercasechars", String.valueOf(comAdobeAemScreensDevicePaswordMinlowercasechars))

        if (!"null".equals(String.valueOf(comAdobeAemScreensDevicePaswordMinuppercasechars)))
            queryParams.put("com.adobe.aem.screens.device.pasword.minuppercasechars", String.valueOf(comAdobeAemScreensDevicePaswordMinuppercasechars))

        if (!"null".equals(String.valueOf(comAdobeAemScreensDevicePaswordMinnumberchars)))
            queryParams.put("com.adobe.aem.screens.device.pasword.minnumberchars", String.valueOf(comAdobeAemScreensDevicePaswordMinnumberchars))

        if (!"null".equals(String.valueOf(comAdobeAemScreensDevicePaswordMinspecialchars)))
            queryParams.put("com.adobe.aem.screens.device.pasword.minspecialchars", String.valueOf(comAdobeAemScreensDevicePaswordMinspecialchars))

        if (!"null".equals(String.valueOf(comAdobeAemScreensDevicePaswordMinlength)))
            queryParams.put("com.adobe.aem.screens.device.pasword.minlength", String.valueOf(comAdobeAemScreensDevicePaswordMinlength))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensDeviceImplDeviceServiceInfo.class )

    }

    def comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer deviceRegistrationTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(deviceRegistrationTimeout)))
            queryParams.put("deviceRegistrationTimeout", String.valueOf(deviceRegistrationTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.class )

    }

    def comAdobeCqScreensImplHandlerChannelsUpdateHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqPagesupdatehandlerImageresourcetypes, List<String> cqPagesupdatehandlerProductresourcetypes, List<String> cqPagesupdatehandlerVideoresourcetypes, List<String> cqPagesupdatehandlerDynamicsequenceresourcetypes, List<String> cqPagesupdatehandlerPreviewmodepaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqPagesupdatehandlerImageresourcetypes)))
            queryParams.put("cq.pagesupdatehandler.imageresourcetypes", String.valueOf(cqPagesupdatehandlerImageresourcetypes))

        if (!"null".equals(String.valueOf(cqPagesupdatehandlerProductresourcetypes)))
            queryParams.put("cq.pagesupdatehandler.productresourcetypes", String.valueOf(cqPagesupdatehandlerProductresourcetypes))

        if (!"null".equals(String.valueOf(cqPagesupdatehandlerVideoresourcetypes)))
            queryParams.put("cq.pagesupdatehandler.videoresourcetypes", String.valueOf(cqPagesupdatehandlerVideoresourcetypes))

        if (!"null".equals(String.valueOf(cqPagesupdatehandlerDynamicsequenceresourcetypes)))
            queryParams.put("cq.pagesupdatehandler.dynamicsequenceresourcetypes", String.valueOf(cqPagesupdatehandlerDynamicsequenceresourcetypes))

        if (!"null".equals(String.valueOf(cqPagesupdatehandlerPreviewmodepaths)))
            queryParams.put("cq.pagesupdatehandler.previewmodepaths", String.valueOf(cqPagesupdatehandlerPreviewmodepaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.class )

    }

    def comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.class )

    }

    def comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer comAdobeAemScreensImplRemoteRequestTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeAemScreensImplRemoteRequestTimeout)))
            queryParams.put("com.adobe.aem.screens.impl.remote.request_timeout", String.valueOf(comAdobeAemScreensImplRemoteRequestTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.class )

    }

    def comAdobeCqScreensImplScreensChannelPostProcessor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> screensChannelsPropertiesToRemove, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(screensChannelsPropertiesToRemove)))
            queryParams.put("screens.channels.properties.to.remove", String.valueOf(screensChannelsPropertiesToRemove))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensImplScreensChannelPostProcessorInfo.class )

    }

    def comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, Boolean comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath)))
            queryParams.put("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath", String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath))

        if (!"null".equals(String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency)))
            queryParams.put("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency", String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency))

        if (!"null".equals(String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout)))
            queryParams.put("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout", String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout))

        if (!"null".equals(String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients)))
            queryParams.put("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients", String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients))

        if (!"null".equals(String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver)))
            queryParams.put("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver", String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver))

        if (!"null".equals(String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport)))
            queryParams.put("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport", String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport))

        if (!"null".equals(String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls)))
            queryParams.put("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls", String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls))

        if (!"null".equals(String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername)))
            queryParams.put("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username", String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername))

        if (!"null".equals(String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword)))
            queryParams.put("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password", String.valueOf(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.class )

    }

    def comAdobeCqScreensMqActivemqImplArtemisJMSProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, Integer globalSize, Integer maxDiskUsage, Boolean persistenceEnabled, Integer threadPoolMaxSize, Integer scheduledThreadPoolMaxSize, Integer gracefulShutdownTimeout, List<String> queues, List<String> topics, Integer addressesMaxDeliveryAttempts, Integer addressesExpiryDelay, String addressesAddressFullMessagePolicy, Integer addressesMaxSizeBytes, Integer addressesPageSizeBytes, Integer addressesPageCacheMaxSize, String clusterUser, String clusterPassword, Integer clusterCallTimeout, Integer clusterCallFailoverTimeout, Integer clusterClientFailureCheckPeriod, Integer clusterNotificationAttempts, Integer clusterNotificationInterval, Integer idCacheSize, Integer clusterConfirmationWindowSize, Integer clusterConnectionTtl, Boolean clusterDuplicateDetection, Integer clusterInitialConnectAttempts, Integer clusterMaxRetryInterval, Integer clusterMinLargeMessageSize, Integer clusterProducerWindowSize, Integer clusterReconnectAttempts, Integer clusterRetryInterval, BigDecimal clusterRetryIntervalMultiplier, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(globalSize)))
            queryParams.put("global.size", String.valueOf(globalSize))

        if (!"null".equals(String.valueOf(maxDiskUsage)))
            queryParams.put("max.disk.usage", String.valueOf(maxDiskUsage))

        if (!"null".equals(String.valueOf(persistenceEnabled)))
            queryParams.put("persistence.enabled", String.valueOf(persistenceEnabled))

        if (!"null".equals(String.valueOf(threadPoolMaxSize)))
            queryParams.put("thread.pool.max.size", String.valueOf(threadPoolMaxSize))

        if (!"null".equals(String.valueOf(scheduledThreadPoolMaxSize)))
            queryParams.put("scheduled.thread.pool.max.size", String.valueOf(scheduledThreadPoolMaxSize))

        if (!"null".equals(String.valueOf(gracefulShutdownTimeout)))
            queryParams.put("graceful.shutdown.timeout", String.valueOf(gracefulShutdownTimeout))

        if (!"null".equals(String.valueOf(queues)))
            queryParams.put("queues", String.valueOf(queues))

        if (!"null".equals(String.valueOf(topics)))
            queryParams.put("topics", String.valueOf(topics))

        if (!"null".equals(String.valueOf(addressesMaxDeliveryAttempts)))
            queryParams.put("addresses.max.delivery.attempts", String.valueOf(addressesMaxDeliveryAttempts))

        if (!"null".equals(String.valueOf(addressesExpiryDelay)))
            queryParams.put("addresses.expiry.delay", String.valueOf(addressesExpiryDelay))

        if (!"null".equals(String.valueOf(addressesAddressFullMessagePolicy)))
            queryParams.put("addresses.address.full.message.policy", String.valueOf(addressesAddressFullMessagePolicy))

        if (!"null".equals(String.valueOf(addressesMaxSizeBytes)))
            queryParams.put("addresses.max.size.bytes", String.valueOf(addressesMaxSizeBytes))

        if (!"null".equals(String.valueOf(addressesPageSizeBytes)))
            queryParams.put("addresses.page.size.bytes", String.valueOf(addressesPageSizeBytes))

        if (!"null".equals(String.valueOf(addressesPageCacheMaxSize)))
            queryParams.put("addresses.page.cache.max.size", String.valueOf(addressesPageCacheMaxSize))

        if (!"null".equals(String.valueOf(clusterUser)))
            queryParams.put("cluster.user", String.valueOf(clusterUser))

        if (!"null".equals(String.valueOf(clusterPassword)))
            queryParams.put("cluster.password", String.valueOf(clusterPassword))

        if (!"null".equals(String.valueOf(clusterCallTimeout)))
            queryParams.put("cluster.call.timeout", String.valueOf(clusterCallTimeout))

        if (!"null".equals(String.valueOf(clusterCallFailoverTimeout)))
            queryParams.put("cluster.call.failover.timeout", String.valueOf(clusterCallFailoverTimeout))

        if (!"null".equals(String.valueOf(clusterClientFailureCheckPeriod)))
            queryParams.put("cluster.client.failure.check.period", String.valueOf(clusterClientFailureCheckPeriod))

        if (!"null".equals(String.valueOf(clusterNotificationAttempts)))
            queryParams.put("cluster.notification.attempts", String.valueOf(clusterNotificationAttempts))

        if (!"null".equals(String.valueOf(clusterNotificationInterval)))
            queryParams.put("cluster.notification.interval", String.valueOf(clusterNotificationInterval))

        if (!"null".equals(String.valueOf(idCacheSize)))
            queryParams.put("id.cache.size", String.valueOf(idCacheSize))

        if (!"null".equals(String.valueOf(clusterConfirmationWindowSize)))
            queryParams.put("cluster.confirmation.window.size", String.valueOf(clusterConfirmationWindowSize))

        if (!"null".equals(String.valueOf(clusterConnectionTtl)))
            queryParams.put("cluster.connection.ttl", String.valueOf(clusterConnectionTtl))

        if (!"null".equals(String.valueOf(clusterDuplicateDetection)))
            queryParams.put("cluster.duplicate.detection", String.valueOf(clusterDuplicateDetection))

        if (!"null".equals(String.valueOf(clusterInitialConnectAttempts)))
            queryParams.put("cluster.initial.connect.attempts", String.valueOf(clusterInitialConnectAttempts))

        if (!"null".equals(String.valueOf(clusterMaxRetryInterval)))
            queryParams.put("cluster.max.retry.interval", String.valueOf(clusterMaxRetryInterval))

        if (!"null".equals(String.valueOf(clusterMinLargeMessageSize)))
            queryParams.put("cluster.min.large.message.size", String.valueOf(clusterMinLargeMessageSize))

        if (!"null".equals(String.valueOf(clusterProducerWindowSize)))
            queryParams.put("cluster.producer.window.size", String.valueOf(clusterProducerWindowSize))

        if (!"null".equals(String.valueOf(clusterReconnectAttempts)))
            queryParams.put("cluster.reconnect.attempts", String.valueOf(clusterReconnectAttempts))

        if (!"null".equals(String.valueOf(clusterRetryInterval)))
            queryParams.put("cluster.retry.interval", String.valueOf(clusterRetryInterval))

        if (!"null".equals(String.valueOf(clusterRetryIntervalMultiplier)))
            queryParams.put("cluster.retry.interval.multiplier", String.valueOf(clusterRetryIntervalMultiplier))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.class )

    }

    def comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, String comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath)))
            queryParams.put("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath", String.valueOf(comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath))

        if (!"null".equals(String.valueOf(comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency)))
            queryParams.put("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency", String.valueOf(comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.class )

    }

    def comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean disableSmartSync, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(disableSmartSync)))
            queryParams.put("disableSmartSync", String.valueOf(disableSmartSync))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.class )

    }

    def comAdobeCqScreensSegmentationImplSegmentationFeatureFlag ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enableDataTriggeredContent, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enableDataTriggeredContent)))
            queryParams.put("enableDataTriggeredContent", String.valueOf(enableDataTriggeredContent))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.class )

    }

    def comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.class )

    }

    def comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.class )

    }

    def comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, String dispatcherAddress, List<String> dispatcherFilterAllowed, List<String> dispatcherFilterBlocked, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(dispatcherAddress)))
            queryParams.put("dispatcher.address", String.valueOf(dispatcherAddress))

        if (!"null".equals(String.valueOf(dispatcherFilterAllowed)))
            queryParams.put("dispatcher.filter.allowed", String.valueOf(dispatcherFilterAllowed))

        if (!"null".equals(String.valueOf(dispatcherFilterBlocked)))
            queryParams.put("dispatcher.filter.blocked", String.valueOf(dispatcherFilterBlocked))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.class )

    }

    def comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.class )

    }

    def comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, String webserverAddress, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(webserverAddress)))
            queryParams.put("webserver.address", String.valueOf(webserverAddress))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.class )

    }

    def comAdobeCqSocialAccountverificationImplAccountManagementConfigIm ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enable, Integer ttl1, Integer ttl2, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enable)))
            queryParams.put("enable", String.valueOf(enable))

        if (!"null".equals(String.valueOf(ttl1)))
            queryParams.put("ttl1", String.valueOf(ttl1))

        if (!"null".equals(String.valueOf(ttl2)))
            queryParams.put("ttl2", String.valueOf(ttl2))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.class )

    }

    def comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.class )

    }

    def comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.class )

    }

    def comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventTopics, String eventFilter, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventTopics)))
            queryParams.put("event.topics", String.valueOf(eventTopics))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.class )

    }

    def comAdobeCqSocialActivitystreamsListenerImplModerationEventExten ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean accepted, Integer ranked, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(accepted)))
            queryParams.put("accepted", String.valueOf(accepted))

        if (!"null".equals(String.valueOf(ranked)))
            queryParams.put("ranked", String.valueOf(ranked))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.class )

    }

    def comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer ranking, Boolean enable, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(ranking)))
            queryParams.put("ranking", String.valueOf(ranking))

        if (!"null".equals(String.valueOf(enable)))
            queryParams.put("enable", String.valueOf(enable))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.class )

    }

    def comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String streamPath, String streamName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(streamPath)))
            queryParams.put("streamPath", String.valueOf(streamPath))

        if (!"null".equals(String.valueOf(streamName)))
            queryParams.put("streamName", String.valueOf(streamName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.class )

    }

    def comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxRetry, List<String> fieldWhitelist, List<String> attachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxRetry)))
            queryParams.put("MaxRetry", String.valueOf(maxRetry))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.class )

    }

    def comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String attachmentTypeBlacklist, Integer extensionOrder, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        if (!"null".equals(String.valueOf(extensionOrder)))
            queryParams.put("extension.order", String.valueOf(extensionOrder))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.class )

    }

    def comAdobeCqSocialCalendarServletsTimeZoneServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer timezonesExpirytime, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(timezonesExpirytime)))
            queryParams.put("timezones.expirytime", String.valueOf(timezonesExpirytime))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.class )

    }

    def comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer ranking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(ranking)))
            queryParams.put("ranking", String.valueOf(ranking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.class )

    }

    def comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, List<String> attachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.class )

    }

    def comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, List<String> attachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.class )

    }

    def comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer numUserLimit, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(numUserLimit)))
            queryParams.put("numUserLimit", String.valueOf(numUserLimit))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.class )

    }

    def comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enableScheduledPostsSearch, Integer numberOfMinutes, Integer maxSearchLimit, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enableScheduledPostsSearch)))
            queryParams.put("enableScheduledPostsSearch", String.valueOf(enableScheduledPostsSearch))

        if (!"null".equals(String.valueOf(numberOfMinutes)))
            queryParams.put("numberOfMinutes", String.valueOf(numberOfMinutes))

        if (!"null".equals(String.valueOf(maxSearchLimit)))
            queryParams.put("maxSearchLimit", String.valueOf(maxSearchLimit))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.class )

    }

    def comAdobeCqSocialCommonsCorsCORSAuthenticationFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean corsEnabling, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(corsEnabling)))
            queryParams.put("cors.enabling", String.valueOf(corsEnabling))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priorityOrder, List<String> replyEmailPatterns, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priorityOrder)))
            queryParams.put("priorityOrder", String.valueOf(priorityOrder))

        if (!"null".equals(String.valueOf(replyEmailPatterns)))
            queryParams.put("replyEmailPatterns", String.valueOf(replyEmailPatterns))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String contextPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(contextPath)))
            queryParams.put("context.path", String.valueOf(contextPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventTopics, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventTopics)))
            queryParams.put("event.topics", String.valueOf(eventTopics))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priorityOrder, List<String> replyEmailPatterns, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priorityOrder)))
            queryParams.put("priorityOrder", String.valueOf(priorityOrder))

        if (!"null".equals(String.valueOf(replyEmailPatterns)))
            queryParams.put("replyEmailPatterns", String.valueOf(replyEmailPatterns))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String patternTime, String patternNewline, String patternDayOfMonth, String patternMonth, String patternYear, String patternDate, String patternDateTime, String patternEmail, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(patternTime)))
            queryParams.put("pattern.time", String.valueOf(patternTime))

        if (!"null".equals(String.valueOf(patternNewline)))
            queryParams.put("pattern.newline", String.valueOf(patternNewline))

        if (!"null".equals(String.valueOf(patternDayOfMonth)))
            queryParams.put("pattern.dayOfMonth", String.valueOf(patternDayOfMonth))

        if (!"null".equals(String.valueOf(patternMonth)))
            queryParams.put("pattern.month", String.valueOf(patternMonth))

        if (!"null".equals(String.valueOf(patternYear)))
            queryParams.put("pattern.year", String.valueOf(patternYear))

        if (!"null".equals(String.valueOf(patternDate)))
            queryParams.put("pattern.date", String.valueOf(patternDate))

        if (!"null".equals(String.valueOf(patternDateTime)))
            queryParams.put("pattern.dateTime", String.valueOf(patternDateTime))

        if (!"null".equals(String.valueOf(patternEmail)))
            queryParams.put("pattern.email", String.valueOf(patternEmail))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String emailName, Boolean emailCreatePostFromReply, String emailAddCommentIdTo, Integer emailSubjectMaximumLength, String emailReplyToAddress, String emailReplyToDelimiter, String emailTrackerIdPrefixInSubject, String emailTrackerIdPrefixInBody, Boolean emailAsHTML, String emailDefaultUserName, String emailTemplatesRootPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(emailName)))
            queryParams.put("email.name", String.valueOf(emailName))

        if (!"null".equals(String.valueOf(emailCreatePostFromReply)))
            queryParams.put("email.createPostFromReply", String.valueOf(emailCreatePostFromReply))

        if (!"null".equals(String.valueOf(emailAddCommentIdTo)))
            queryParams.put("email.addCommentIdTo", String.valueOf(emailAddCommentIdTo))

        if (!"null".equals(String.valueOf(emailSubjectMaximumLength)))
            queryParams.put("email.subjectMaximumLength", String.valueOf(emailSubjectMaximumLength))

        if (!"null".equals(String.valueOf(emailReplyToAddress)))
            queryParams.put("email.replyToAddress", String.valueOf(emailReplyToAddress))

        if (!"null".equals(String.valueOf(emailReplyToDelimiter)))
            queryParams.put("email.replyToDelimiter", String.valueOf(emailReplyToDelimiter))

        if (!"null".equals(String.valueOf(emailTrackerIdPrefixInSubject)))
            queryParams.put("email.trackerIdPrefixInSubject", String.valueOf(emailTrackerIdPrefixInSubject))

        if (!"null".equals(String.valueOf(emailTrackerIdPrefixInBody)))
            queryParams.put("email.trackerIdPrefixInBody", String.valueOf(emailTrackerIdPrefixInBody))

        if (!"null".equals(String.valueOf(emailAsHTML)))
            queryParams.put("email.asHTML", String.valueOf(emailAsHTML))

        if (!"null".equals(String.valueOf(emailDefaultUserName)))
            queryParams.put("email.defaultUserName", String.valueOf(emailDefaultUserName))

        if (!"null".equals(String.valueOf(emailTemplatesRootPath)))
            queryParams.put("email.templates.rootPath", String.valueOf(emailTemplatesRootPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String connectProtocol, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(connectProtocol)))
            queryParams.put("connectProtocol", String.valueOf(connectProtocol))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priorityOrder, List<String> replyEmailPatterns, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priorityOrder)))
            queryParams.put("priorityOrder", String.valueOf(priorityOrder))

        if (!"null".equals(String.valueOf(replyEmailPatterns)))
            queryParams.put("replyEmailPatterns", String.valueOf(replyEmailPatterns))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priorityOrder, List<String> replyEmailPatterns, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priorityOrder)))
            queryParams.put("priorityOrder", String.valueOf(priorityOrder))

        if (!"null".equals(String.valueOf(replyEmailPatterns)))
            queryParams.put("replyEmailPatterns", String.valueOf(replyEmailPatterns))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priorityOrder, List<String> replyEmailPatterns, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priorityOrder)))
            queryParams.put("priorityOrder", String.valueOf(priorityOrder))

        if (!"null".equals(String.valueOf(replyEmailPatterns)))
            queryParams.put("replyEmailPatterns", String.valueOf(replyEmailPatterns))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priorityOrder, List<String> replyEmailPatterns, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priorityOrder)))
            queryParams.put("priorityOrder", String.valueOf(priorityOrder))

        if (!"null".equals(String.valueOf(replyEmailPatterns)))
            queryParams.put("replyEmailPatterns", String.valueOf(replyEmailPatterns))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> replyEmailPatterns, Integer priorityOrder, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(replyEmailPatterns)))
            queryParams.put("replyEmailPatterns", String.valueOf(replyEmailPatterns))

        if (!"null".equals(String.valueOf(priorityOrder)))
            queryParams.put("priorityOrder", String.valueOf(priorityOrder))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.class )

    }

    def comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priorityOrder, List<String> replyEmailPatterns, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priorityOrder)))
            queryParams.put("priorityOrder", String.valueOf(priorityOrder))

        if (!"null".equals(String.valueOf(replyEmailPatterns)))
            queryParams.put("replyEmailPatterns", String.valueOf(replyEmailPatterns))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.class )

    }

    def comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer numberOfDays, Integer ageOfFile, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(numberOfDays)))
            queryParams.put("numberOfDays", String.valueOf(numberOfDays))

        if (!"null".equals(String.valueOf(ageOfFile)))
            queryParams.put("ageOfFile", String.valueOf(ageOfFile))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.class )

    }

    def comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventTopics, String eventFilter, List<String> verbs, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventTopics)))
            queryParams.put("event.topics", String.valueOf(eventTopics))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        if (!"null".equals(String.valueOf(verbs)))
            queryParams.put("verbs", String.valueOf(verbs))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.class )

    }

    def comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enable, Integer ugCLimit, Integer ugcLimitDuration, List<String> domains, List<String> toList, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enable)))
            queryParams.put("enable", String.valueOf(enable))

        if (!"null".equals(String.valueOf(ugCLimit)))
            queryParams.put("UGCLimit", String.valueOf(ugCLimit))

        if (!"null".equals(String.valueOf(ugcLimitDuration)))
            queryParams.put("ugcLimitDuration", String.valueOf(ugcLimitDuration))

        if (!"null".equals(String.valueOf(domains)))
            queryParams.put("domains", String.valueOf(domains))

        if (!"null".equals(String.valueOf(toList)))
            queryParams.put("toList", String.valueOf(toList))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.class )

    }

    def comAdobeCqSocialConnectOauthImplFacebookProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthProviderId, String oauthCloudConfigRoot, String providerConfigRoot, Boolean providerConfigCreateTagsEnabled, String providerConfigUserFolder, Boolean providerConfigFacebookFetchFields, List<String> providerConfigFacebookFields, Boolean providerConfigRefreshUserdataEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthProviderId)))
            queryParams.put("oauth.provider.id", String.valueOf(oauthProviderId))

        if (!"null".equals(String.valueOf(oauthCloudConfigRoot)))
            queryParams.put("oauth.cloud.config.root", String.valueOf(oauthCloudConfigRoot))

        if (!"null".equals(String.valueOf(providerConfigRoot)))
            queryParams.put("provider.config.root", String.valueOf(providerConfigRoot))

        if (!"null".equals(String.valueOf(providerConfigCreateTagsEnabled)))
            queryParams.put("provider.config.create.tags.enabled", String.valueOf(providerConfigCreateTagsEnabled))

        if (!"null".equals(String.valueOf(providerConfigUserFolder)))
            queryParams.put("provider.config.user.folder", String.valueOf(providerConfigUserFolder))

        if (!"null".equals(String.valueOf(providerConfigFacebookFetchFields)))
            queryParams.put("provider.config.facebook.fetch.fields", String.valueOf(providerConfigFacebookFetchFields))

        if (!"null".equals(String.valueOf(providerConfigFacebookFields)))
            queryParams.put("provider.config.facebook.fields", String.valueOf(providerConfigFacebookFields))

        if (!"null".equals(String.valueOf(providerConfigRefreshUserdataEnabled)))
            queryParams.put("provider.config.refresh.userdata.enabled", String.valueOf(providerConfigRefreshUserdataEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.class )

    }

    def comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> path, Integer serviceRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.class )

    }

    def comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> facebook, List<String> twitter, String providerConfigUserFolder, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(facebook)))
            queryParams.put("facebook", String.valueOf(facebook))

        if (!"null".equals(String.valueOf(twitter)))
            queryParams.put("twitter", String.valueOf(twitter))

        if (!"null".equals(String.valueOf(providerConfigUserFolder)))
            queryParams.put("provider.config.user.folder", String.valueOf(providerConfigUserFolder))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.class )

    }

    def comAdobeCqSocialConnectOauthImplTwitterProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthProviderId, String oauthCloudConfigRoot, String providerConfigRoot, String providerConfigUserFolder, Boolean providerConfigTwitterEnableParams, List<String> providerConfigTwitterParams, Boolean providerConfigRefreshUserdataEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthProviderId)))
            queryParams.put("oauth.provider.id", String.valueOf(oauthProviderId))

        if (!"null".equals(String.valueOf(oauthCloudConfigRoot)))
            queryParams.put("oauth.cloud.config.root", String.valueOf(oauthCloudConfigRoot))

        if (!"null".equals(String.valueOf(providerConfigRoot)))
            queryParams.put("provider.config.root", String.valueOf(providerConfigRoot))

        if (!"null".equals(String.valueOf(providerConfigUserFolder)))
            queryParams.put("provider.config.user.folder", String.valueOf(providerConfigUserFolder))

        if (!"null".equals(String.valueOf(providerConfigTwitterEnableParams)))
            queryParams.put("provider.config.twitter.enable.params", String.valueOf(providerConfigTwitterEnableParams))

        if (!"null".equals(String.valueOf(providerConfigTwitterParams)))
            queryParams.put("provider.config.twitter.params", String.valueOf(providerConfigTwitterParams))

        if (!"null".equals(String.valueOf(providerConfigRefreshUserdataEnabled)))
            queryParams.put("provider.config.refresh.userdata.enabled", String.valueOf(providerConfigRefreshUserdataEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.class )

    }

    def comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqSocialContentFragmentsServicesEnabled, Integer cqSocialContentFragmentsServicesWaitTimeSeconds, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqSocialContentFragmentsServicesEnabled)))
            queryParams.put("cq.social.content.fragments.services.enabled", String.valueOf(cqSocialContentFragmentsServicesEnabled))

        if (!"null".equals(String.valueOf(cqSocialContentFragmentsServicesWaitTimeSeconds)))
            queryParams.put("cq.social.content.fragments.services.waitTimeSeconds", String.valueOf(cqSocialContentFragmentsServicesWaitTimeSeconds))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.class )

    }

    def comAdobeCqSocialDatastoreAsImplASResourceProviderFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String versionId, Boolean cacheOn, Integer concurrencyLevel, Integer cacheStartSize, Integer cacheTtl, Integer cacheSize, Integer timeLimit, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(versionId)))
            queryParams.put("version.id", String.valueOf(versionId))

        if (!"null".equals(String.valueOf(cacheOn)))
            queryParams.put("cache.on", String.valueOf(cacheOn))

        if (!"null".equals(String.valueOf(concurrencyLevel)))
            queryParams.put("concurrency.level", String.valueOf(concurrencyLevel))

        if (!"null".equals(String.valueOf(cacheStartSize)))
            queryParams.put("cache.start.size", String.valueOf(cacheStartSize))

        if (!"null".equals(String.valueOf(cacheTtl)))
            queryParams.put("cache.ttl", String.valueOf(cacheTtl))

        if (!"null".equals(String.valueOf(cacheSize)))
            queryParams.put("cache.size", String.valueOf(cacheSize))

        if (!"null".equals(String.valueOf(timeLimit)))
            queryParams.put("time.limit", String.valueOf(timeLimit))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.class )

    }

    def comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String solrZkTimeout, String solrCommit, Boolean cacheOn, Integer concurrencyLevel, Integer cacheStartSize, Integer cacheTtl, Integer cacheSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(solrZkTimeout)))
            queryParams.put("solr.zk.timeout", String.valueOf(solrZkTimeout))

        if (!"null".equals(String.valueOf(solrCommit)))
            queryParams.put("solr.commit", String.valueOf(solrCommit))

        if (!"null".equals(String.valueOf(cacheOn)))
            queryParams.put("cache.on", String.valueOf(cacheOn))

        if (!"null".equals(String.valueOf(concurrencyLevel)))
            queryParams.put("concurrency.level", String.valueOf(concurrencyLevel))

        if (!"null".equals(String.valueOf(cacheStartSize)))
            queryParams.put("cache.start.size", String.valueOf(cacheStartSize))

        if (!"null".equals(String.valueOf(cacheTtl)))
            queryParams.put("cache.ttl", String.valueOf(cacheTtl))

        if (!"null".equals(String.valueOf(cacheSize)))
            queryParams.put("cache.size", String.valueOf(cacheSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.class )

    }

    def comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String solrZkTimeout, String solrCommit, Boolean cacheOn, Integer concurrencyLevel, Integer cacheStartSize, Integer cacheTtl, Integer cacheSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(solrZkTimeout)))
            queryParams.put("solr.zk.timeout", String.valueOf(solrZkTimeout))

        if (!"null".equals(String.valueOf(solrCommit)))
            queryParams.put("solr.commit", String.valueOf(solrCommit))

        if (!"null".equals(String.valueOf(cacheOn)))
            queryParams.put("cache.on", String.valueOf(cacheOn))

        if (!"null".equals(String.valueOf(concurrencyLevel)))
            queryParams.put("concurrency.level", String.valueOf(concurrencyLevel))

        if (!"null".equals(String.valueOf(cacheStartSize)))
            queryParams.put("cache.start.size", String.valueOf(cacheStartSize))

        if (!"null".equals(String.valueOf(cacheTtl)))
            queryParams.put("cache.ttl", String.valueOf(cacheTtl))

        if (!"null".equals(String.valueOf(cacheSize)))
            queryParams.put("cache.size", String.valueOf(cacheSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.class )

    }

    def comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean isMemberCheck, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(isMemberCheck)))
            queryParams.put("isMemberCheck", String.valueOf(isMemberCheck))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.class )

    }

    def comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean isMemberCheck, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(isMemberCheck)))
            queryParams.put("isMemberCheck", String.valueOf(isMemberCheck))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.class )

    }

    def comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.class )

    }

    def comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.class )

    }

    def comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.class )

    }

    def comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingServletSelectors, String slingServletExtensions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletSelectors)))
            queryParams.put("sling.servlet.selectors", String.valueOf(slingServletSelectors))

        if (!"null".equals(String.valueOf(slingServletExtensions)))
            queryParams.put("sling.servlet.extensions", String.valueOf(slingServletExtensions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.class )

    }

    def comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, List<String> attachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.class )

    }

    def comAdobeCqSocialForumClientEndpointsImplForumOperationsService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, List<String> attachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.class )

    }

    def comAdobeCqSocialForumDispatcherImplFlushOperations ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer extensionOrder, Boolean flushForumontopic, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(extensionOrder)))
            queryParams.put("extension.order", String.valueOf(extensionOrder))

        if (!"null".equals(String.valueOf(flushForumontopic)))
            queryParams.put("flush.forumontopic", String.valueOf(flushForumontopic))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.class )

    }

    def comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean groupListingPaginationEnable, Boolean groupListingLazyloadingEnable, Integer pageSize, Integer priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(groupListingPaginationEnable)))
            queryParams.put("group.listing.pagination.enable", String.valueOf(groupListingPaginationEnable))

        if (!"null".equals(String.valueOf(groupListingLazyloadingEnable)))
            queryParams.put("group.listing.lazyloading.enable", String.valueOf(groupListingLazyloadingEnable))

        if (!"null".equals(String.valueOf(pageSize)))
            queryParams.put("page.size", String.valueOf(pageSize))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.class )

    }

    def comAdobeCqSocialGroupImplGroupServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxWaitTime, Integer minWaitBetweenRetries, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxWaitTime)))
            queryParams.put("maxWaitTime", String.valueOf(maxWaitTime))

        if (!"null".equals(String.valueOf(minWaitBetweenRetries)))
            queryParams.put("minWaitBetweenRetries", String.valueOf(minWaitBetweenRetries))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialGroupImplGroupServiceImplInfo.class )

    }

    def comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean parameterGuavaCacheEnabled, String parameterGuavaCacheParams, Boolean parameterGuavaCacheReload, Integer serviceRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(parameterGuavaCacheEnabled)))
            queryParams.put("parameter.guava.cache.enabled", String.valueOf(parameterGuavaCacheEnabled))

        if (!"null".equals(String.valueOf(parameterGuavaCacheParams)))
            queryParams.put("parameter.guava.cache.params", String.valueOf(parameterGuavaCacheParams))

        if (!"null".equals(String.valueOf(parameterGuavaCacheReload)))
            queryParams.put("parameter.guava.cache.reload", String.valueOf(parameterGuavaCacheReload))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.class )

    }

    def comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, List<String> attachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.class )

    }

    def comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, List<String> attachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.class )

    }

    def comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.class )

    }

    def comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.class )

    }

    def comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer everyoneLimit, Integer priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(everyoneLimit)))
            queryParams.put("everyoneLimit", String.valueOf(everyoneLimit))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.class )

    }

    def comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> messageProperties, Integer messageBoxSizeLimit, Integer messageCountLimit, Boolean notifyFailure, String failureMessageFrom, String failureTemplatePath, Integer maxRetries, Integer minWaitBetweenRetries, Integer countUpdatePoolSize, String inboxPath, String sentitemsPath, Boolean supportAttachments, Boolean supportGroupMessaging, Integer maxTotalRecipients, Integer batchSize, Integer maxTotalAttachmentSize, List<String> attachmentTypeBlacklist, List<String> allowedAttachmentTypes, String serviceSelector, List<String> fieldWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(messageProperties)))
            queryParams.put("message.properties", String.valueOf(messageProperties))

        if (!"null".equals(String.valueOf(messageBoxSizeLimit)))
            queryParams.put("messageBoxSizeLimit", String.valueOf(messageBoxSizeLimit))

        if (!"null".equals(String.valueOf(messageCountLimit)))
            queryParams.put("messageCountLimit", String.valueOf(messageCountLimit))

        if (!"null".equals(String.valueOf(notifyFailure)))
            queryParams.put("notifyFailure", String.valueOf(notifyFailure))

        if (!"null".equals(String.valueOf(failureMessageFrom)))
            queryParams.put("failureMessageFrom", String.valueOf(failureMessageFrom))

        if (!"null".equals(String.valueOf(failureTemplatePath)))
            queryParams.put("failureTemplatePath", String.valueOf(failureTemplatePath))

        if (!"null".equals(String.valueOf(maxRetries)))
            queryParams.put("maxRetries", String.valueOf(maxRetries))

        if (!"null".equals(String.valueOf(minWaitBetweenRetries)))
            queryParams.put("minWaitBetweenRetries", String.valueOf(minWaitBetweenRetries))

        if (!"null".equals(String.valueOf(countUpdatePoolSize)))
            queryParams.put("countUpdatePoolSize", String.valueOf(countUpdatePoolSize))

        if (!"null".equals(String.valueOf(inboxPath)))
            queryParams.put("inbox.path", String.valueOf(inboxPath))

        if (!"null".equals(String.valueOf(sentitemsPath)))
            queryParams.put("sentitems.path", String.valueOf(sentitemsPath))

        if (!"null".equals(String.valueOf(supportAttachments)))
            queryParams.put("supportAttachments", String.valueOf(supportAttachments))

        if (!"null".equals(String.valueOf(supportGroupMessaging)))
            queryParams.put("supportGroupMessaging", String.valueOf(supportGroupMessaging))

        if (!"null".equals(String.valueOf(maxTotalRecipients)))
            queryParams.put("maxTotalRecipients", String.valueOf(maxTotalRecipients))

        if (!"null".equals(String.valueOf(batchSize)))
            queryParams.put("batchSize", String.valueOf(batchSize))

        if (!"null".equals(String.valueOf(maxTotalAttachmentSize)))
            queryParams.put("maxTotalAttachmentSize", String.valueOf(maxTotalAttachmentSize))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        if (!"null".equals(String.valueOf(allowedAttachmentTypes)))
            queryParams.put("allowedAttachmentTypes", String.valueOf(allowedAttachmentTypes))

        if (!"null".equals(String.valueOf(serviceSelector)))
            queryParams.put("serviceSelector", String.valueOf(serviceSelector))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.class )

    }

    def comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> resourceTypeFilters, Integer priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(resourceTypeFilters)))
            queryParams.put("resourceType.filters", String.valueOf(resourceTypeFilters))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.class )

    }

    def comAdobeCqSocialModerationDashboardApiModerationDashboardSocial ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.class )

    }

    def comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.class )

    }

    def comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> resourceTypeFilters, Integer priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(resourceTypeFilters)))
            queryParams.put("resourceType.filters", String.valueOf(resourceTypeFilters))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.class )

    }

    def comAdobeCqSocialNotificationsImplMentionsRouter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventTopics, String eventFilter, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventTopics)))
            queryParams.put("event.topics", String.valueOf(eventTopics))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialNotificationsImplMentionsRouterInfo.class )

    }

    def comAdobeCqSocialNotificationsImplNotificationManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxUnreadNotificationCount, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxUnreadNotificationCount)))
            queryParams.put("max.unread.notification.count", String.valueOf(maxUnreadNotificationCount))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.class )

    }

    def comAdobeCqSocialNotificationsImplNotificationsRouter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventTopics, String eventFilter, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventTopics)))
            queryParams.put("event.topics", String.valueOf(eventTopics))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.class )

    }

    def comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, List<String> attachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.class )

    }

    def comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqSocialReportingAnalyticsPollingImporterInterval, Integer cqSocialReportingAnalyticsPollingImporterPageSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqSocialReportingAnalyticsPollingImporterInterval)))
            queryParams.put("cq.social.reporting.analytics.polling.importer.interval", String.valueOf(cqSocialReportingAnalyticsPollingImporterInterval))

        if (!"null".equals(String.valueOf(cqSocialReportingAnalyticsPollingImporterPageSize)))
            queryParams.put("cq.social.reporting.analytics.polling.importer.pageSize", String.valueOf(cqSocialReportingAnalyticsPollingImporterPageSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.class )

    }

    def comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer reportFetchDelay, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(reportFetchDelay)))
            queryParams.put("report.fetch.delay", String.valueOf(reportFetchDelay))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.class )

    }

    def comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqSocialConsoleAnalyticsSitesMapping, Integer priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqSocialConsoleAnalyticsSitesMapping)))
            queryParams.put("cq.social.console.analytics.sites.mapping", String.valueOf(cqSocialConsoleAnalyticsSitesMapping))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.class )

    }

    def comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, List<String> attachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        if (!"null".equals(String.valueOf(attachmentTypeBlacklist)))
            queryParams.put("attachmentTypeBlacklist", String.valueOf(attachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.class )

    }

    def comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingServletSelectors, String slingServletExtensions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletSelectors)))
            queryParams.put("sling.servlet.selectors", String.valueOf(slingServletSelectors))

        if (!"null".equals(String.valueOf(slingServletExtensions)))
            queryParams.put("sling.servlet.extensions", String.valueOf(slingServletExtensions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.class )

    }

    def comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> slingServletSelectors, String slingServletExtensions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletSelectors)))
            queryParams.put("sling.servlet.selectors", String.valueOf(slingServletSelectors))

        if (!"null".equals(String.valueOf(slingServletExtensions)))
            queryParams.put("sling.servlet.extensions", String.valueOf(slingServletExtensions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.class )

    }

    def comAdobeCqSocialScoringImplScoringEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventTopics, String eventFilter, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventTopics)))
            queryParams.put("event.topics", String.valueOf(eventTopics))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialScoringImplScoringEventListenerInfo.class )

    }

    def comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enableFallback, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enableFallback)))
            queryParams.put("enableFallback", String.valueOf(enableFallback))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.class )

    }

    def comAdobeCqSocialSiteEndpointsImplSiteOperationService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fieldWhitelist, List<String> sitePathFilters, String sitePackageGroup, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fieldWhitelist)))
            queryParams.put("fieldWhitelist", String.valueOf(fieldWhitelist))

        if (!"null".equals(String.valueOf(sitePathFilters)))
            queryParams.put("sitePathFilters", String.valueOf(sitePathFilters))

        if (!"null".equals(String.valueOf(sitePackageGroup)))
            queryParams.put("sitePackageGroup", String.valueOf(sitePackageGroup))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.class )

    }

    def comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqSocialConsoleAnalyticsComponents, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqSocialConsoleAnalyticsComponents)))
            queryParams.put("cq.social.console.analytics.components", String.valueOf(cqSocialConsoleAnalyticsComponents))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.class )

    }

    def comAdobeCqSocialSiteImplSiteConfiguratorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> componentsUsingTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(componentsUsingTags)))
            queryParams.put("componentsUsingTags", String.valueOf(componentsUsingTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.class )

    }

    def comAdobeCqSocialSrpImplSocialSolrConnector ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String srpType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(srpType)))
            queryParams.put("srp.type", String.valueOf(srpType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.class )

    }

    def comAdobeCqSocialSyncImplDiffChangesObserver ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, String agentName, String diffPath, String propertyNames, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(agentName)))
            queryParams.put("agentName", String.valueOf(agentName))

        if (!"null".equals(String.valueOf(diffPath)))
            queryParams.put("diffPath", String.valueOf(diffPath))

        if (!"null".equals(String.valueOf(propertyNames)))
            queryParams.put("propertyNames", String.valueOf(propertyNames))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialSyncImplDiffChangesObserverInfo.class )

    }

    def comAdobeCqSocialSyncImplGroupSyncListenerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> nodetypes, List<String> ignorableprops, String ignorablenodes, Boolean enabled, String distfolders, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(nodetypes)))
            queryParams.put("nodetypes", String.valueOf(nodetypes))

        if (!"null".equals(String.valueOf(ignorableprops)))
            queryParams.put("ignorableprops", String.valueOf(ignorableprops))

        if (!"null".equals(String.valueOf(ignorablenodes)))
            queryParams.put("ignorablenodes", String.valueOf(ignorablenodes))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(distfolders)))
            queryParams.put("distfolders", String.valueOf(distfolders))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.class )

    }

    def comAdobeCqSocialSyncImplPublisherSyncServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> activeRunModes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(activeRunModes)))
            queryParams.put("activeRunModes", String.valueOf(activeRunModes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.class )

    }

    def comAdobeCqSocialSyncImplUserSyncListenerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> nodetypes, List<String> ignorableprops, List<String> ignorablenodes, Boolean enabled, List<String> distfolders, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(nodetypes)))
            queryParams.put("nodetypes", String.valueOf(nodetypes))

        if (!"null".equals(String.valueOf(ignorableprops)))
            queryParams.put("ignorableprops", String.valueOf(ignorableprops))

        if (!"null".equals(String.valueOf(ignorablenodes)))
            queryParams.put("ignorablenodes", String.valueOf(ignorablenodes))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(distfolders)))
            queryParams.put("distfolders", String.valueOf(distfolders))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.class )

    }

    def comAdobeCqSocialTranslationImplTranslationServiceConfigManager ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String translateLanguage, String translateDisplay, Boolean translateAttribution, String translateCaching, String translateSmartRendering, String translateCachingDuration, String translateSessionSaveInterval, String translateSessionSaveBatchLimit, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(translateLanguage)))
            queryParams.put("translate.language", String.valueOf(translateLanguage))

        if (!"null".equals(String.valueOf(translateDisplay)))
            queryParams.put("translate.display", String.valueOf(translateDisplay))

        if (!"null".equals(String.valueOf(translateAttribution)))
            queryParams.put("translate.attribution", String.valueOf(translateAttribution))

        if (!"null".equals(String.valueOf(translateCaching)))
            queryParams.put("translate.caching", String.valueOf(translateCaching))

        if (!"null".equals(String.valueOf(translateSmartRendering)))
            queryParams.put("translate.smart.rendering", String.valueOf(translateSmartRendering))

        if (!"null".equals(String.valueOf(translateCachingDuration)))
            queryParams.put("translate.caching.duration", String.valueOf(translateCachingDuration))

        if (!"null".equals(String.valueOf(translateSessionSaveInterval)))
            queryParams.put("translate.session.save.interval", String.valueOf(translateSessionSaveInterval))

        if (!"null".equals(String.valueOf(translateSessionSaveBatchLimit)))
            queryParams.put("translate.session.save.batchLimit", String.valueOf(translateSessionSaveBatchLimit))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.class )

    }

    def comAdobeCqSocialTranslationImplUGCLanguageDetector ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventTopics, String eventFilter, List<String> translateListenerType, List<String> translatePropertyList, Integer poolSize, Integer maxPoolSize, Integer queueSize, Integer keepAliveTime, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventTopics)))
            queryParams.put("event.topics", String.valueOf(eventTopics))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        if (!"null".equals(String.valueOf(translateListenerType)))
            queryParams.put("translate.listener.type", String.valueOf(translateListenerType))

        if (!"null".equals(String.valueOf(translatePropertyList)))
            queryParams.put("translate.property.list", String.valueOf(translatePropertyList))

        if (!"null".equals(String.valueOf(poolSize)))
            queryParams.put("poolSize", String.valueOf(poolSize))

        if (!"null".equals(String.valueOf(maxPoolSize)))
            queryParams.put("maxPoolSize", String.valueOf(maxPoolSize))

        if (!"null".equals(String.valueOf(queueSize)))
            queryParams.put("queueSize", String.valueOf(queueSize))

        if (!"null".equals(String.valueOf(keepAliveTime)))
            queryParams.put("keepAliveTime", String.valueOf(keepAliveTime))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.class )

    }

    def comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer threadPoolSize, Integer delayTime, Integer workerSleepTime, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(threadPoolSize)))
            queryParams.put("threadPoolSize", String.valueOf(threadPoolSize))

        if (!"null".equals(String.valueOf(delayTime)))
            queryParams.put("delayTime", String.valueOf(delayTime))

        if (!"null".equals(String.valueOf(workerSleepTime)))
            queryParams.put("workerSleepTime", String.valueOf(workerSleepTime))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.class )

    }

    def comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer poolSize, Integer maxPoolSize, Integer queueSize, Integer keepAliveTime, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(poolSize)))
            queryParams.put("poolSize", String.valueOf(poolSize))

        if (!"null".equals(String.valueOf(maxPoolSize)))
            queryParams.put("maxPoolSize", String.valueOf(maxPoolSize))

        if (!"null".equals(String.valueOf(queueSize)))
            queryParams.put("queueSize", String.valueOf(queueSize))

        if (!"null".equals(String.valueOf(keepAliveTime)))
            queryParams.put("keepAliveTime", String.valueOf(keepAliveTime))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.class )

    }

    def comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean isPrimaryPublisher, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(isPrimaryPublisher)))
            queryParams.put("isPrimaryPublisher", String.valueOf(isPrimaryPublisher))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.class )

    }

    def comAdobeCqSocialUgcbaseImplSocialUtilsImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean legacyCloudUGCPathMapping, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(legacyCloudUGCPathMapping)))
            queryParams.put("legacyCloudUGCPathMapping", String.valueOf(legacyCloudUGCPathMapping))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.class )

    }

    def comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> automoderationSequence, Boolean automoderationOnfailurestop, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(automoderationSequence)))
            queryParams.put("automoderation.sequence", String.valueOf(automoderationSequence))

        if (!"null".equals(String.valueOf(automoderationOnfailurestop)))
            queryParams.put("automoderation.onfailurestop", String.valueOf(automoderationOnfailurestop))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.class )

    }

    def comAdobeCqSocialUgcbaseModerationImplSentimentProcess ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> watchwordsPositive, List<String> watchwordsNegative, String watchwordsPath, String sentimentPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(watchwordsPositive)))
            queryParams.put("watchwords.positive", String.valueOf(watchwordsPositive))

        if (!"null".equals(String.valueOf(watchwordsNegative)))
            queryParams.put("watchwords.negative", String.valueOf(watchwordsNegative))

        if (!"null".equals(String.valueOf(watchwordsPath)))
            queryParams.put("watchwords.path", String.valueOf(watchwordsPath))

        if (!"null".equals(String.valueOf(sentimentPath)))
            queryParams.put("sentiment.path", String.valueOf(sentimentPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.class )

    }

    def comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> defaultAttachmentTypeBlacklist, List<String> baselineAttachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(defaultAttachmentTypeBlacklist)))
            queryParams.put("default.attachment.type.blacklist", String.valueOf(defaultAttachmentTypeBlacklist))

        if (!"null".equals(String.valueOf(baselineAttachmentTypeBlacklist)))
            queryParams.put("baseline.attachment.type.blacklist", String.valueOf(baselineAttachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.class )

    }

    def comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> parameterWhitelist, List<String> parameterWhitelistPrefixes, List<String> binaryParameterWhitelist, List<String> modifierWhitelist, List<String> operationWhitelist, List<String> operationWhitelistPrefixes, List<String> typehintWhitelist, List<String> resourcetypeWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(parameterWhitelist)))
            queryParams.put("parameter.whitelist", String.valueOf(parameterWhitelist))

        if (!"null".equals(String.valueOf(parameterWhitelistPrefixes)))
            queryParams.put("parameter.whitelist.prefixes", String.valueOf(parameterWhitelistPrefixes))

        if (!"null".equals(String.valueOf(binaryParameterWhitelist)))
            queryParams.put("binary.parameter.whitelist", String.valueOf(binaryParameterWhitelist))

        if (!"null".equals(String.valueOf(modifierWhitelist)))
            queryParams.put("modifier.whitelist", String.valueOf(modifierWhitelist))

        if (!"null".equals(String.valueOf(operationWhitelist)))
            queryParams.put("operation.whitelist", String.valueOf(operationWhitelist))

        if (!"null".equals(String.valueOf(operationWhitelistPrefixes)))
            queryParams.put("operation.whitelist.prefixes", String.valueOf(operationWhitelistPrefixes))

        if (!"null".equals(String.valueOf(typehintWhitelist)))
            queryParams.put("typehint.whitelist", String.valueOf(typehintWhitelist))

        if (!"null".equals(String.valueOf(resourcetypeWhitelist)))
            queryParams.put("resourcetype.whitelist", String.valueOf(resourcetypeWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.class )

    }

    def comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingServletExtensions, String slingServletPaths, String slingServletMethods, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletExtensions)))
            queryParams.put("sling.servlet.extensions", String.valueOf(slingServletExtensions))

        if (!"null".equals(String.valueOf(slingServletPaths)))
            queryParams.put("sling.servlet.paths", String.valueOf(slingServletPaths))

        if (!"null".equals(String.valueOf(slingServletMethods)))
            queryParams.put("sling.servlet.methods", String.valueOf(slingServletMethods))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.class )

    }

    def comAdobeCqSocialUserImplTransportHttpToPublisher ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enable, List<String> agentConfiguration, String contextPath, List<String> disabledCipherSuites, List<String> enabledCipherSuites, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enable)))
            queryParams.put("enable", String.valueOf(enable))

        if (!"null".equals(String.valueOf(agentConfiguration)))
            queryParams.put("agent.configuration", String.valueOf(agentConfiguration))

        if (!"null".equals(String.valueOf(contextPath)))
            queryParams.put("context.path", String.valueOf(contextPath))

        if (!"null".equals(String.valueOf(disabledCipherSuites)))
            queryParams.put("disabled.cipher.suites", String.valueOf(disabledCipherSuites))

        if (!"null".equals(String.valueOf(enabledCipherSuites)))
            queryParams.put("enabled.cipher.suites", String.valueOf(enabledCipherSuites))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.class )

    }

    def comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> resourceTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(resourceTypes)))
            queryParams.put("resource.types", String.valueOf(resourceTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.class )

    }

    def comAdobeCqUpgradesCleanupImplUpgradeContentCleanup ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> deletePathRegexps, String deleteSql2Query, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(deletePathRegexps)))
            queryParams.put("delete.path.regexps", String.valueOf(deletePathRegexps))

        if (!"null".equals(String.valueOf(deleteSql2Query)))
            queryParams.put("delete.sql2.query", String.valueOf(deleteSql2Query))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.class )

    }

    def comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> deleteNameRegexps, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(deleteNameRegexps)))
            queryParams.put("delete.name.regexps", String.valueOf(deleteNameRegexps))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.class )

    }

    def comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer threshold, String jobTopicName, Boolean emailEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(threshold)))
            queryParams.put("threshold", String.valueOf(threshold))

        if (!"null".equals(String.valueOf(jobTopicName)))
            queryParams.put("jobTopicName", String.valueOf(jobTopicName))

        if (!"null".equals(String.valueOf(emailEnabled)))
            queryParams.put("emailEnabled", String.valueOf(emailEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.class )

    }

    def comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, Integer jobPurgeThreshold, Integer jobPurgeMaxJobs, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        if (!"null".equals(String.valueOf(jobPurgeThreshold)))
            queryParams.put("job.purge.threshold", String.valueOf(jobPurgeThreshold))

        if (!"null".equals(String.valueOf(jobPurgeMaxJobs)))
            queryParams.put("job.purge.max.jobs", String.valueOf(jobPurgeMaxJobs))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.class )

    }

    def comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer threshold, String jobTopicName, Boolean emailEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(threshold)))
            queryParams.put("threshold", String.valueOf(threshold))

        if (!"null".equals(String.valueOf(jobTopicName)))
            queryParams.put("jobTopicName", String.valueOf(jobTopicName))

        if (!"null".equals(String.valueOf(emailEnabled)))
            queryParams.put("emailEnabled", String.valueOf(emailEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.class )

    }

    def comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer threshold, String jobTopicName, Boolean emailEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(threshold)))
            queryParams.put("threshold", String.valueOf(threshold))

        if (!"null".equals(String.valueOf(jobTopicName)))
            queryParams.put("jobTopicName", String.valueOf(jobTopicName))

        if (!"null".equals(String.valueOf(emailEnabled)))
            queryParams.put("emailEnabled", String.valueOf(emailEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.class )

    }

    def comAdobeCqWcmLaunchesImplLaunchesEventHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventFilter, Integer launchesEventhandlerThreadpoolMaxsize, String launchesEventhandlerThreadpoolPriority, Boolean launchesEventhandlerUpdatelastmodification, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        if (!"null".equals(String.valueOf(launchesEventhandlerThreadpoolMaxsize)))
            queryParams.put("launches.eventhandler.threadpool.maxsize", String.valueOf(launchesEventhandlerThreadpoolMaxsize))

        if (!"null".equals(String.valueOf(launchesEventhandlerThreadpoolPriority)))
            queryParams.put("launches.eventhandler.threadpool.priority", String.valueOf(launchesEventhandlerThreadpoolPriority))

        if (!"null".equals(String.valueOf(launchesEventhandlerUpdatelastmodification)))
            queryParams.put("launches.eventhandler.updatelastmodification", String.valueOf(launchesEventhandlerUpdatelastmodification))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.class )

    }

    def comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqWcmQrcodeServletWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqWcmQrcodeServletWhitelist)))
            queryParams.put("cq.wcm.qrcode.servlet.whitelist", String.valueOf(cqWcmQrcodeServletWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.class )

    }

    def comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer size, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(size)))
            queryParams.put("size", String.valueOf(size))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.class )

    }

    def comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String syncTranslationStateSchedulingFormat, String schedulingRepeatTranslationSchedulingFormat, String syncTranslationStateLockTimeoutInMinutes, String exportFormat, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(syncTranslationStateSchedulingFormat)))
            queryParams.put("syncTranslationState.schedulingFormat", String.valueOf(syncTranslationStateSchedulingFormat))

        if (!"null".equals(String.valueOf(schedulingRepeatTranslationSchedulingFormat)))
            queryParams.put("schedulingRepeatTranslation.schedulingFormat", String.valueOf(schedulingRepeatTranslationSchedulingFormat))

        if (!"null".equals(String.valueOf(syncTranslationStateLockTimeoutInMinutes)))
            queryParams.put("syncTranslationState.lockTimeoutInMinutes", String.valueOf(syncTranslationStateLockTimeoutInMinutes))

        if (!"null".equals(String.valueOf(exportFormat)))
            queryParams.put("export.format", String.valueOf(exportFormat))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.class )

    }

    def comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> portalOutboxes, String draftDataService, String draftMetadataService, String submitDataService, String submitMetadataService, String pendingSignDataService, String pendingSignMetadataService, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(portalOutboxes)))
            queryParams.put("portal.outboxes", String.valueOf(portalOutboxes))

        if (!"null".equals(String.valueOf(draftDataService)))
            queryParams.put("draft.data.service", String.valueOf(draftDataService))

        if (!"null".equals(String.valueOf(draftMetadataService)))
            queryParams.put("draft.metadata.service", String.valueOf(draftMetadataService))

        if (!"null".equals(String.valueOf(submitDataService)))
            queryParams.put("submit.data.service", String.valueOf(submitDataService))

        if (!"null".equals(String.valueOf(submitMetadataService)))
            queryParams.put("submit.metadata.service", String.valueOf(submitMetadataService))

        if (!"null".equals(String.valueOf(pendingSignDataService)))
            queryParams.put("pendingSign.data.service", String.valueOf(pendingSignDataService))

        if (!"null".equals(String.valueOf(pendingSignMetadataService)))
            queryParams.put("pendingSign.metadata.service", String.valueOf(pendingSignMetadataService))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.class )

    }

    def comAdobeFdFpConfigFormsPortalSchedulerService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String formportalInterval, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(formportalInterval)))
            queryParams.put("formportal.interval", String.valueOf(formportalInterval))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.class )

    }

    def comAdobeFormsCommonServiceImplDefaultDataProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> alloweddataFileLocations, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(alloweddataFileLocations)))
            queryParams.put("alloweddataFileLocations", String.valueOf(alloweddataFileLocations))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.class )

    }

    def comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String tempStorageConfig, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(tempStorageConfig)))
            queryParams.put("tempStorageConfig", String.valueOf(tempStorageConfig))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.class )

    }

    def comAdobeFormsCommonServletTempCleanUpTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, String durationForTemporaryStorage, String durationForAnonymousStorage, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        if (!"null".equals(String.valueOf(durationForTemporaryStorage)))
            queryParams.put("Duration for Temporary Storage", String.valueOf(durationForTemporaryStorage))

        if (!"null".equals(String.valueOf(durationForAnonymousStorage)))
            queryParams.put("Duration for Anonymous Storage", String.valueOf(durationForAnonymousStorage))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeFormsCommonServletTempCleanUpTaskInfo.class )

    }

    def comAdobeGraniteAcpPlatformPlatformServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer queryLimit, List<String> fileTypeExtensionMap, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(queryLimit)))
            queryParams.put("query.limit", String.valueOf(queryLimit))

        if (!"null".equals(String.valueOf(fileTypeExtensionMap)))
            queryParams.put("file.type.extension.map", String.valueOf(fileTypeExtensionMap))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAcpPlatformPlatformServletInfo.class )

    }

    def comAdobeGraniteActivitystreamsImplActivityManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> aggregateRelationships, Boolean aggregateDescendVirtual, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(aggregateRelationships)))
            queryParams.put("aggregate.relationships", String.valueOf(aggregateRelationships))

        if (!"null".equals(String.valueOf(aggregateDescendVirtual)))
            queryParams.put("aggregate.descend.virtual", String.valueOf(aggregateDescendVirtual))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.class )

    }

    def comAdobeGraniteAnalyzerBaseSystemStatusServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean disabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(disabled)))
            queryParams.put("disabled", String.valueOf(disabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.class )

    }

    def comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean disabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(disabled)))
            queryParams.put("disabled", String.valueOf(disabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.class )

    }

    def comAdobeGraniteApicontrollerFilterResolverHookFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String comAdobeCqCdnCdnRewriter, String comAdobeCqCloudConfigComponents, String comAdobeCqCloudConfigCore, String comAdobeCqCloudConfigUi, String comAdobeCqComAdobeCqEditor, String comAdobeCqComAdobeCqProjectsCore, String comAdobeCqComAdobeCqProjectsWcmCore, String comAdobeCqComAdobeCqUiCommons, String comAdobeCqComAdobeCqWcmStyle, String comAdobeCqCqActivitymapIntegration, String comAdobeCqCqContexthubCommons, String comAdobeCqCqDtm, String comAdobeCqCqHealthcheck, String comAdobeCqCqMultisiteTargeting, String comAdobeCqCqPreUpgradeCleanup, String comAdobeCqCqProductInfoProvider, String comAdobeCqCqRestSites, String comAdobeCqCqSecurityHc, String comAdobeCqDamCqDamSvgHandler, String comAdobeCqDamCqScene7Imaging, String comAdobeCqDtmReactorCore, String comAdobeCqDtmReactorUi, String comAdobeCqExpJspelResolver, String comAdobeCqInboxCqInbox, String comAdobeCqJsonSchemaParser, String comAdobeCqMediaCqMediaPublishingDpsFpCore, String comAdobeCqMobileCqMobileCaas, String comAdobeCqMobileCqMobileIndexBuilder, String comAdobeCqMobileCqMobilePhonegapBuild, String comAdobeCqMyspell, String comAdobeCqSampleWeRetailCore, String comAdobeCqScreensComAdobeCqScreensDcc, String comAdobeCqScreensComAdobeCqScreensMqCore, String comAdobeCqSocialCqSocialAsProvider, String comAdobeCqSocialCqSocialBadgingBasicImpl, String comAdobeCqSocialCqSocialBadgingImpl, String comAdobeCqSocialCqSocialCalendarImpl, String comAdobeCqSocialCqSocialContentFragmentsImpl, String comAdobeCqSocialCqSocialEnablementImpl, String comAdobeCqSocialCqSocialGraphImpl, String comAdobeCqSocialCqSocialIdeationImpl, String comAdobeCqSocialCqSocialJcrProvider, String comAdobeCqSocialCqSocialMembersImpl, String comAdobeCqSocialCqSocialMsProvider, String comAdobeCqSocialCqSocialNotificationsChannelsWeb, String comAdobeCqSocialCqSocialNotificationsImpl, String comAdobeCqSocialCqSocialRdbProvider, String comAdobeCqSocialCqSocialScfImpl, String comAdobeCqSocialCqSocialScoringBasicImpl, String comAdobeCqSocialCqSocialScoringImpl, String comAdobeCqSocialCqSocialServiceusersImpl, String comAdobeCqSocialCqSocialSrpImpl, String comAdobeCqSocialCqSocialUgcbaseImpl, String comAdobeDamCqDamCfmImpl, String comAdobeFormsFoundationFormsFoundationBase, String comAdobeGraniteApicontroller, String comAdobeGraniteAssetCore, String comAdobeGraniteAuthSso, String comAdobeGraniteBundlesHcImpl, String comAdobeGraniteCompatRouter, String comAdobeGraniteConf, String comAdobeGraniteConfUiCore, String comAdobeGraniteCors, String comAdobeGraniteCrxExplorer, String comAdobeGraniteCrxdeLite, String comAdobeGraniteCryptoConfig, String comAdobeGraniteCryptoExtension, String comAdobeGraniteCryptoFile, String comAdobeGraniteCryptoJcr, String comAdobeGraniteCsrf, String comAdobeGraniteDistributionCore, String comAdobeGraniteDropwizardMetrics, String comAdobeGraniteFragsImpl, String comAdobeGraniteGibson, String comAdobeGraniteInfocollector, String comAdobeGraniteInstallerFactoryPackages, String comAdobeGraniteJettySsl, String comAdobeGraniteJobsAsync, String comAdobeGraniteMaintenanceOak, String comAdobeGraniteMonitoringCore, String comAdobeGraniteQueries, String comAdobeGraniteReplicationHcImpl, String comAdobeGraniteRepositoryChecker, String comAdobeGraniteRepositoryHcImpl, String comAdobeGraniteRestAssets, String comAdobeGraniteSecurityUi, String comAdobeGraniteStartup, String comAdobeGraniteTagsoup, String comAdobeGraniteTaskmanagementCore, String comAdobeGraniteTaskmanagementWorkflow, String comAdobeGraniteUiClientlibsCompilerLess, String comAdobeGraniteUiClientlibsProcessorGcc, String comAdobeGraniteWebconsolePlugins, String comAdobeGraniteWorkflowConsole, String comAdobeXmpWorkerFilesNativeFragmentLinux, String comAdobeXmpWorkerFilesNativeFragmentMacosx, String comAdobeXmpWorkerFilesNativeFragmentWin, String comDayCommonsOsgiWrapperSimpleJndi, String comDayCqCqAuthhandler, String comDayCqCqCompatConfigupdate, String comDayCqCqLicensebranding, String comDayCqCqNotifcationImpl, String comDayCqCqReplicationAudit, String comDayCqCqSearchExt, String comDayCqDamCqDamAnnotationPrint, String comDayCqDamCqDamAssetUsage, String comDayCqDamCqDamS7dam, String comDayCqDamCqDamSimilaritysearch, String comDayCqDamDamWebdavSupport, String comDayCqPreUpgradeTasks, String comDayCqReplicationExtensions, String comDayCqWcmCqMsmCore, String comDayCqWcmCqWcmTranslation, String dayCommonsJrawio, String orgApacheAriesJmxWhiteboard, String orgApacheFelixHttpSslfilter, String orgApacheFelixOrgApacheFelixThreaddump, String orgApacheFelixWebconsolePluginsDs, String orgApacheFelixWebconsolePluginsEvent, String orgApacheFelixWebconsolePluginsMemoryusage, String orgApacheFelixWebconsolePluginsPackageadmin, String orgApacheJackrabbitOakAuthLdap, String orgApacheJackrabbitOakSegmentTar, String orgApacheJackrabbitOakSolrOsgi, String orgApacheSlingBundleresourceImpl, String orgApacheSlingCommonsFsclassloader, String orgApacheSlingCommonsLogWebconsole, String orgApacheSlingDatasource, String orgApacheSlingDiscoveryBase, String orgApacheSlingDiscoveryOak, String orgApacheSlingDiscoverySupport, String orgApacheSlingDistributionApi, String orgApacheSlingDistributionCore, String orgApacheSlingExtensionsWebconsolesecurityprovider, String orgApacheSlingHcWebconsole, String orgApacheSlingInstallerConsole, String orgApacheSlingInstallerProviderFile, String orgApacheSlingInstallerProviderJcr, String orgApacheSlingJcrDavex, String orgApacheSlingJcrResourcesecurity, String orgApacheSlingJmxProvider, String orgApacheSlingLaunchpadInstaller, String orgApacheSlingModelsImpl, String orgApacheSlingRepoinitParser, String orgApacheSlingResourceInventory, String orgApacheSlingResourceresolver, String orgApacheSlingScriptingJavascript, String orgApacheSlingScriptingJst, String orgApacheSlingScriptingSightlyJsProvider, String orgApacheSlingScriptingSightlyModelsProvider, String orgApacheSlingSecurity, String orgApacheSlingServletsCompat, String orgApacheSlingServletsGet, String orgApacheSlingStartupfilterDisabler, String orgApacheSlingTracer, String weRetailClientAppCore, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeCqCdnCdnRewriter)))
            queryParams.put("com.adobe.cq.cdn.cdn-rewriter", String.valueOf(comAdobeCqCdnCdnRewriter))

        if (!"null".equals(String.valueOf(comAdobeCqCloudConfigComponents)))
            queryParams.put("com.adobe.cq.cloud-config.components", String.valueOf(comAdobeCqCloudConfigComponents))

        if (!"null".equals(String.valueOf(comAdobeCqCloudConfigCore)))
            queryParams.put("com.adobe.cq.cloud-config.core", String.valueOf(comAdobeCqCloudConfigCore))

        if (!"null".equals(String.valueOf(comAdobeCqCloudConfigUi)))
            queryParams.put("com.adobe.cq.cloud-config.ui", String.valueOf(comAdobeCqCloudConfigUi))

        if (!"null".equals(String.valueOf(comAdobeCqComAdobeCqEditor)))
            queryParams.put("com.adobe.cq.com.adobe.cq.editor", String.valueOf(comAdobeCqComAdobeCqEditor))

        if (!"null".equals(String.valueOf(comAdobeCqComAdobeCqProjectsCore)))
            queryParams.put("com.adobe.cq.com.adobe.cq.projects.core", String.valueOf(comAdobeCqComAdobeCqProjectsCore))

        if (!"null".equals(String.valueOf(comAdobeCqComAdobeCqProjectsWcmCore)))
            queryParams.put("com.adobe.cq.com.adobe.cq.projects.wcm.core", String.valueOf(comAdobeCqComAdobeCqProjectsWcmCore))

        if (!"null".equals(String.valueOf(comAdobeCqComAdobeCqUiCommons)))
            queryParams.put("com.adobe.cq.com.adobe.cq.ui.commons", String.valueOf(comAdobeCqComAdobeCqUiCommons))

        if (!"null".equals(String.valueOf(comAdobeCqComAdobeCqWcmStyle)))
            queryParams.put("com.adobe.cq.com.adobe.cq.wcm.style", String.valueOf(comAdobeCqComAdobeCqWcmStyle))

        if (!"null".equals(String.valueOf(comAdobeCqCqActivitymapIntegration)))
            queryParams.put("com.adobe.cq.cq-activitymap-integration", String.valueOf(comAdobeCqCqActivitymapIntegration))

        if (!"null".equals(String.valueOf(comAdobeCqCqContexthubCommons)))
            queryParams.put("com.adobe.cq.cq-contexthub-commons", String.valueOf(comAdobeCqCqContexthubCommons))

        if (!"null".equals(String.valueOf(comAdobeCqCqDtm)))
            queryParams.put("com.adobe.cq.cq-dtm", String.valueOf(comAdobeCqCqDtm))

        if (!"null".equals(String.valueOf(comAdobeCqCqHealthcheck)))
            queryParams.put("com.adobe.cq.cq-healthcheck", String.valueOf(comAdobeCqCqHealthcheck))

        if (!"null".equals(String.valueOf(comAdobeCqCqMultisiteTargeting)))
            queryParams.put("com.adobe.cq.cq-multisite-targeting", String.valueOf(comAdobeCqCqMultisiteTargeting))

        if (!"null".equals(String.valueOf(comAdobeCqCqPreUpgradeCleanup)))
            queryParams.put("com.adobe.cq.cq-pre-upgrade-cleanup", String.valueOf(comAdobeCqCqPreUpgradeCleanup))

        if (!"null".equals(String.valueOf(comAdobeCqCqProductInfoProvider)))
            queryParams.put("com.adobe.cq.cq-product-info-provider", String.valueOf(comAdobeCqCqProductInfoProvider))

        if (!"null".equals(String.valueOf(comAdobeCqCqRestSites)))
            queryParams.put("com.adobe.cq.cq-rest-sites", String.valueOf(comAdobeCqCqRestSites))

        if (!"null".equals(String.valueOf(comAdobeCqCqSecurityHc)))
            queryParams.put("com.adobe.cq.cq-security-hc", String.valueOf(comAdobeCqCqSecurityHc))

        if (!"null".equals(String.valueOf(comAdobeCqDamCqDamSvgHandler)))
            queryParams.put("com.adobe.cq.dam.cq-dam-svg-handler", String.valueOf(comAdobeCqDamCqDamSvgHandler))

        if (!"null".equals(String.valueOf(comAdobeCqDamCqScene7Imaging)))
            queryParams.put("com.adobe.cq.dam.cq-scene7-imaging", String.valueOf(comAdobeCqDamCqScene7Imaging))

        if (!"null".equals(String.valueOf(comAdobeCqDtmReactorCore)))
            queryParams.put("com.adobe.cq.dtm-reactor.core", String.valueOf(comAdobeCqDtmReactorCore))

        if (!"null".equals(String.valueOf(comAdobeCqDtmReactorUi)))
            queryParams.put("com.adobe.cq.dtm-reactor.ui", String.valueOf(comAdobeCqDtmReactorUi))

        if (!"null".equals(String.valueOf(comAdobeCqExpJspelResolver)))
            queryParams.put("com.adobe.cq.exp-jspel-resolver", String.valueOf(comAdobeCqExpJspelResolver))

        if (!"null".equals(String.valueOf(comAdobeCqInboxCqInbox)))
            queryParams.put("com.adobe.cq.inbox.cq-inbox", String.valueOf(comAdobeCqInboxCqInbox))

        if (!"null".equals(String.valueOf(comAdobeCqJsonSchemaParser)))
            queryParams.put("com.adobe.cq.json-schema-parser", String.valueOf(comAdobeCqJsonSchemaParser))

        if (!"null".equals(String.valueOf(comAdobeCqMediaCqMediaPublishingDpsFpCore)))
            queryParams.put("com.adobe.cq.media.cq-media-publishing-dps-fp-core", String.valueOf(comAdobeCqMediaCqMediaPublishingDpsFpCore))

        if (!"null".equals(String.valueOf(comAdobeCqMobileCqMobileCaas)))
            queryParams.put("com.adobe.cq.mobile.cq-mobile-caas", String.valueOf(comAdobeCqMobileCqMobileCaas))

        if (!"null".equals(String.valueOf(comAdobeCqMobileCqMobileIndexBuilder)))
            queryParams.put("com.adobe.cq.mobile.cq-mobile-index-builder", String.valueOf(comAdobeCqMobileCqMobileIndexBuilder))

        if (!"null".equals(String.valueOf(comAdobeCqMobileCqMobilePhonegapBuild)))
            queryParams.put("com.adobe.cq.mobile.cq-mobile-phonegap-build", String.valueOf(comAdobeCqMobileCqMobilePhonegapBuild))

        if (!"null".equals(String.valueOf(comAdobeCqMyspell)))
            queryParams.put("com.adobe.cq.myspell", String.valueOf(comAdobeCqMyspell))

        if (!"null".equals(String.valueOf(comAdobeCqSampleWeRetailCore)))
            queryParams.put("com.adobe.cq.sample.we.retail.core", String.valueOf(comAdobeCqSampleWeRetailCore))

        if (!"null".equals(String.valueOf(comAdobeCqScreensComAdobeCqScreensDcc)))
            queryParams.put("com.adobe.cq.screens.com.adobe.cq.screens.dcc", String.valueOf(comAdobeCqScreensComAdobeCqScreensDcc))

        if (!"null".equals(String.valueOf(comAdobeCqScreensComAdobeCqScreensMqCore)))
            queryParams.put("com.adobe.cq.screens.com.adobe.cq.screens.mq.core", String.valueOf(comAdobeCqScreensComAdobeCqScreensMqCore))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialAsProvider)))
            queryParams.put("com.adobe.cq.social.cq-social-as-provider", String.valueOf(comAdobeCqSocialCqSocialAsProvider))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialBadgingBasicImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-badging-basic-impl", String.valueOf(comAdobeCqSocialCqSocialBadgingBasicImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialBadgingImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-badging-impl", String.valueOf(comAdobeCqSocialCqSocialBadgingImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialCalendarImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-calendar-impl", String.valueOf(comAdobeCqSocialCqSocialCalendarImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialContentFragmentsImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-content-fragments-impl", String.valueOf(comAdobeCqSocialCqSocialContentFragmentsImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialEnablementImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-enablement-impl", String.valueOf(comAdobeCqSocialCqSocialEnablementImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialGraphImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-graph-impl", String.valueOf(comAdobeCqSocialCqSocialGraphImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialIdeationImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-ideation-impl", String.valueOf(comAdobeCqSocialCqSocialIdeationImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialJcrProvider)))
            queryParams.put("com.adobe.cq.social.cq-social-jcr-provider", String.valueOf(comAdobeCqSocialCqSocialJcrProvider))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialMembersImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-members-impl", String.valueOf(comAdobeCqSocialCqSocialMembersImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialMsProvider)))
            queryParams.put("com.adobe.cq.social.cq-social-ms-provider", String.valueOf(comAdobeCqSocialCqSocialMsProvider))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialNotificationsChannelsWeb)))
            queryParams.put("com.adobe.cq.social.cq-social-notifications-channels-web", String.valueOf(comAdobeCqSocialCqSocialNotificationsChannelsWeb))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialNotificationsImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-notifications-impl", String.valueOf(comAdobeCqSocialCqSocialNotificationsImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialRdbProvider)))
            queryParams.put("com.adobe.cq.social.cq-social-rdb-provider", String.valueOf(comAdobeCqSocialCqSocialRdbProvider))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialScfImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-scf-impl", String.valueOf(comAdobeCqSocialCqSocialScfImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialScoringBasicImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-scoring-basic-impl", String.valueOf(comAdobeCqSocialCqSocialScoringBasicImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialScoringImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-scoring-impl", String.valueOf(comAdobeCqSocialCqSocialScoringImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialServiceusersImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-serviceusers-impl", String.valueOf(comAdobeCqSocialCqSocialServiceusersImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialSrpImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-srp-impl", String.valueOf(comAdobeCqSocialCqSocialSrpImpl))

        if (!"null".equals(String.valueOf(comAdobeCqSocialCqSocialUgcbaseImpl)))
            queryParams.put("com.adobe.cq.social.cq-social-ugcbase-impl", String.valueOf(comAdobeCqSocialCqSocialUgcbaseImpl))

        if (!"null".equals(String.valueOf(comAdobeDamCqDamCfmImpl)))
            queryParams.put("com.adobe.dam.cq-dam-cfm-impl", String.valueOf(comAdobeDamCqDamCfmImpl))

        if (!"null".equals(String.valueOf(comAdobeFormsFoundationFormsFoundationBase)))
            queryParams.put("com.adobe.forms.foundation-forms-foundation-base", String.valueOf(comAdobeFormsFoundationFormsFoundationBase))

        if (!"null".equals(String.valueOf(comAdobeGraniteApicontroller)))
            queryParams.put("com.adobe.granite.apicontroller", String.valueOf(comAdobeGraniteApicontroller))

        if (!"null".equals(String.valueOf(comAdobeGraniteAssetCore)))
            queryParams.put("com.adobe.granite.asset.core", String.valueOf(comAdobeGraniteAssetCore))

        if (!"null".equals(String.valueOf(comAdobeGraniteAuthSso)))
            queryParams.put("com.adobe.granite.auth.sso", String.valueOf(comAdobeGraniteAuthSso))

        if (!"null".equals(String.valueOf(comAdobeGraniteBundlesHcImpl)))
            queryParams.put("com.adobe.granite.bundles.hc.impl", String.valueOf(comAdobeGraniteBundlesHcImpl))

        if (!"null".equals(String.valueOf(comAdobeGraniteCompatRouter)))
            queryParams.put("com.adobe.granite.compat-router", String.valueOf(comAdobeGraniteCompatRouter))

        if (!"null".equals(String.valueOf(comAdobeGraniteConf)))
            queryParams.put("com.adobe.granite.conf", String.valueOf(comAdobeGraniteConf))

        if (!"null".equals(String.valueOf(comAdobeGraniteConfUiCore)))
            queryParams.put("com.adobe.granite.conf.ui.core", String.valueOf(comAdobeGraniteConfUiCore))

        if (!"null".equals(String.valueOf(comAdobeGraniteCors)))
            queryParams.put("com.adobe.granite.cors", String.valueOf(comAdobeGraniteCors))

        if (!"null".equals(String.valueOf(comAdobeGraniteCrxExplorer)))
            queryParams.put("com.adobe.granite.crx-explorer", String.valueOf(comAdobeGraniteCrxExplorer))

        if (!"null".equals(String.valueOf(comAdobeGraniteCrxdeLite)))
            queryParams.put("com.adobe.granite.crxde-lite", String.valueOf(comAdobeGraniteCrxdeLite))

        if (!"null".equals(String.valueOf(comAdobeGraniteCryptoConfig)))
            queryParams.put("com.adobe.granite.crypto.config", String.valueOf(comAdobeGraniteCryptoConfig))

        if (!"null".equals(String.valueOf(comAdobeGraniteCryptoExtension)))
            queryParams.put("com.adobe.granite.crypto.extension", String.valueOf(comAdobeGraniteCryptoExtension))

        if (!"null".equals(String.valueOf(comAdobeGraniteCryptoFile)))
            queryParams.put("com.adobe.granite.crypto.file", String.valueOf(comAdobeGraniteCryptoFile))

        if (!"null".equals(String.valueOf(comAdobeGraniteCryptoJcr)))
            queryParams.put("com.adobe.granite.crypto.jcr", String.valueOf(comAdobeGraniteCryptoJcr))

        if (!"null".equals(String.valueOf(comAdobeGraniteCsrf)))
            queryParams.put("com.adobe.granite.csrf", String.valueOf(comAdobeGraniteCsrf))

        if (!"null".equals(String.valueOf(comAdobeGraniteDistributionCore)))
            queryParams.put("com.adobe.granite.distribution.core", String.valueOf(comAdobeGraniteDistributionCore))

        if (!"null".equals(String.valueOf(comAdobeGraniteDropwizardMetrics)))
            queryParams.put("com.adobe.granite.dropwizard.metrics", String.valueOf(comAdobeGraniteDropwizardMetrics))

        if (!"null".equals(String.valueOf(comAdobeGraniteFragsImpl)))
            queryParams.put("com.adobe.granite.frags.impl", String.valueOf(comAdobeGraniteFragsImpl))

        if (!"null".equals(String.valueOf(comAdobeGraniteGibson)))
            queryParams.put("com.adobe.granite.gibson", String.valueOf(comAdobeGraniteGibson))

        if (!"null".equals(String.valueOf(comAdobeGraniteInfocollector)))
            queryParams.put("com.adobe.granite.infocollector", String.valueOf(comAdobeGraniteInfocollector))

        if (!"null".equals(String.valueOf(comAdobeGraniteInstallerFactoryPackages)))
            queryParams.put("com.adobe.granite.installer.factory.packages", String.valueOf(comAdobeGraniteInstallerFactoryPackages))

        if (!"null".equals(String.valueOf(comAdobeGraniteJettySsl)))
            queryParams.put("com.adobe.granite.jetty.ssl", String.valueOf(comAdobeGraniteJettySsl))

        if (!"null".equals(String.valueOf(comAdobeGraniteJobsAsync)))
            queryParams.put("com.adobe.granite.jobs.async", String.valueOf(comAdobeGraniteJobsAsync))

        if (!"null".equals(String.valueOf(comAdobeGraniteMaintenanceOak)))
            queryParams.put("com.adobe.granite.maintenance.oak", String.valueOf(comAdobeGraniteMaintenanceOak))

        if (!"null".equals(String.valueOf(comAdobeGraniteMonitoringCore)))
            queryParams.put("com.adobe.granite.monitoring.core", String.valueOf(comAdobeGraniteMonitoringCore))

        if (!"null".equals(String.valueOf(comAdobeGraniteQueries)))
            queryParams.put("com.adobe.granite.queries", String.valueOf(comAdobeGraniteQueries))

        if (!"null".equals(String.valueOf(comAdobeGraniteReplicationHcImpl)))
            queryParams.put("com.adobe.granite.replication.hc.impl", String.valueOf(comAdobeGraniteReplicationHcImpl))

        if (!"null".equals(String.valueOf(comAdobeGraniteRepositoryChecker)))
            queryParams.put("com.adobe.granite.repository.checker", String.valueOf(comAdobeGraniteRepositoryChecker))

        if (!"null".equals(String.valueOf(comAdobeGraniteRepositoryHcImpl)))
            queryParams.put("com.adobe.granite.repository.hc.impl", String.valueOf(comAdobeGraniteRepositoryHcImpl))

        if (!"null".equals(String.valueOf(comAdobeGraniteRestAssets)))
            queryParams.put("com.adobe.granite.rest.assets", String.valueOf(comAdobeGraniteRestAssets))

        if (!"null".equals(String.valueOf(comAdobeGraniteSecurityUi)))
            queryParams.put("com.adobe.granite.security.ui", String.valueOf(comAdobeGraniteSecurityUi))

        if (!"null".equals(String.valueOf(comAdobeGraniteStartup)))
            queryParams.put("com.adobe.granite.startup", String.valueOf(comAdobeGraniteStartup))

        if (!"null".equals(String.valueOf(comAdobeGraniteTagsoup)))
            queryParams.put("com.adobe.granite.tagsoup", String.valueOf(comAdobeGraniteTagsoup))

        if (!"null".equals(String.valueOf(comAdobeGraniteTaskmanagementCore)))
            queryParams.put("com.adobe.granite.taskmanagement.core", String.valueOf(comAdobeGraniteTaskmanagementCore))

        if (!"null".equals(String.valueOf(comAdobeGraniteTaskmanagementWorkflow)))
            queryParams.put("com.adobe.granite.taskmanagement.workflow", String.valueOf(comAdobeGraniteTaskmanagementWorkflow))

        if (!"null".equals(String.valueOf(comAdobeGraniteUiClientlibsCompilerLess)))
            queryParams.put("com.adobe.granite.ui.clientlibs.compiler.less", String.valueOf(comAdobeGraniteUiClientlibsCompilerLess))

        if (!"null".equals(String.valueOf(comAdobeGraniteUiClientlibsProcessorGcc)))
            queryParams.put("com.adobe.granite.ui.clientlibs.processor.gcc", String.valueOf(comAdobeGraniteUiClientlibsProcessorGcc))

        if (!"null".equals(String.valueOf(comAdobeGraniteWebconsolePlugins)))
            queryParams.put("com.adobe.granite.webconsole.plugins", String.valueOf(comAdobeGraniteWebconsolePlugins))

        if (!"null".equals(String.valueOf(comAdobeGraniteWorkflowConsole)))
            queryParams.put("com.adobe.granite.workflow.console", String.valueOf(comAdobeGraniteWorkflowConsole))

        if (!"null".equals(String.valueOf(comAdobeXmpWorkerFilesNativeFragmentLinux)))
            queryParams.put("com.adobe.xmp.worker.files.native.fragment.linux", String.valueOf(comAdobeXmpWorkerFilesNativeFragmentLinux))

        if (!"null".equals(String.valueOf(comAdobeXmpWorkerFilesNativeFragmentMacosx)))
            queryParams.put("com.adobe.xmp.worker.files.native.fragment.macosx", String.valueOf(comAdobeXmpWorkerFilesNativeFragmentMacosx))

        if (!"null".equals(String.valueOf(comAdobeXmpWorkerFilesNativeFragmentWin)))
            queryParams.put("com.adobe.xmp.worker.files.native.fragment.win", String.valueOf(comAdobeXmpWorkerFilesNativeFragmentWin))

        if (!"null".equals(String.valueOf(comDayCommonsOsgiWrapperSimpleJndi)))
            queryParams.put("com.day.commons.osgi.wrapper.simple-jndi", String.valueOf(comDayCommonsOsgiWrapperSimpleJndi))

        if (!"null".equals(String.valueOf(comDayCqCqAuthhandler)))
            queryParams.put("com.day.cq.cq-authhandler", String.valueOf(comDayCqCqAuthhandler))

        if (!"null".equals(String.valueOf(comDayCqCqCompatConfigupdate)))
            queryParams.put("com.day.cq.cq-compat-configupdate", String.valueOf(comDayCqCqCompatConfigupdate))

        if (!"null".equals(String.valueOf(comDayCqCqLicensebranding)))
            queryParams.put("com.day.cq.cq-licensebranding", String.valueOf(comDayCqCqLicensebranding))

        if (!"null".equals(String.valueOf(comDayCqCqNotifcationImpl)))
            queryParams.put("com.day.cq.cq-notifcation-impl", String.valueOf(comDayCqCqNotifcationImpl))

        if (!"null".equals(String.valueOf(comDayCqCqReplicationAudit)))
            queryParams.put("com.day.cq.cq-replication-audit", String.valueOf(comDayCqCqReplicationAudit))

        if (!"null".equals(String.valueOf(comDayCqCqSearchExt)))
            queryParams.put("com.day.cq.cq-search-ext", String.valueOf(comDayCqCqSearchExt))

        if (!"null".equals(String.valueOf(comDayCqDamCqDamAnnotationPrint)))
            queryParams.put("com.day.cq.dam.cq-dam-annotation-print", String.valueOf(comDayCqDamCqDamAnnotationPrint))

        if (!"null".equals(String.valueOf(comDayCqDamCqDamAssetUsage)))
            queryParams.put("com.day.cq.dam.cq-dam-asset-usage", String.valueOf(comDayCqDamCqDamAssetUsage))

        if (!"null".equals(String.valueOf(comDayCqDamCqDamS7dam)))
            queryParams.put("com.day.cq.dam.cq-dam-s7dam", String.valueOf(comDayCqDamCqDamS7dam))

        if (!"null".equals(String.valueOf(comDayCqDamCqDamSimilaritysearch)))
            queryParams.put("com.day.cq.dam.cq-dam-similaritysearch", String.valueOf(comDayCqDamCqDamSimilaritysearch))

        if (!"null".equals(String.valueOf(comDayCqDamDamWebdavSupport)))
            queryParams.put("com.day.cq.dam.dam-webdav-support", String.valueOf(comDayCqDamDamWebdavSupport))

        if (!"null".equals(String.valueOf(comDayCqPreUpgradeTasks)))
            queryParams.put("com.day.cq.pre-upgrade-tasks", String.valueOf(comDayCqPreUpgradeTasks))

        if (!"null".equals(String.valueOf(comDayCqReplicationExtensions)))
            queryParams.put("com.day.cq.replication.extensions", String.valueOf(comDayCqReplicationExtensions))

        if (!"null".equals(String.valueOf(comDayCqWcmCqMsmCore)))
            queryParams.put("com.day.cq.wcm.cq-msm-core", String.valueOf(comDayCqWcmCqMsmCore))

        if (!"null".equals(String.valueOf(comDayCqWcmCqWcmTranslation)))
            queryParams.put("com.day.cq.wcm.cq-wcm-translation", String.valueOf(comDayCqWcmCqWcmTranslation))

        if (!"null".equals(String.valueOf(dayCommonsJrawio)))
            queryParams.put("day-commons-jrawio", String.valueOf(dayCommonsJrawio))

        if (!"null".equals(String.valueOf(orgApacheAriesJmxWhiteboard)))
            queryParams.put("org.apache.aries.jmx.whiteboard", String.valueOf(orgApacheAriesJmxWhiteboard))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpSslfilter)))
            queryParams.put("org.apache.felix.http.sslfilter", String.valueOf(orgApacheFelixHttpSslfilter))

        if (!"null".equals(String.valueOf(orgApacheFelixOrgApacheFelixThreaddump)))
            queryParams.put("org.apache.felix.org.apache.felix.threaddump", String.valueOf(orgApacheFelixOrgApacheFelixThreaddump))

        if (!"null".equals(String.valueOf(orgApacheFelixWebconsolePluginsDs)))
            queryParams.put("org.apache.felix.webconsole.plugins.ds", String.valueOf(orgApacheFelixWebconsolePluginsDs))

        if (!"null".equals(String.valueOf(orgApacheFelixWebconsolePluginsEvent)))
            queryParams.put("org.apache.felix.webconsole.plugins.event", String.valueOf(orgApacheFelixWebconsolePluginsEvent))

        if (!"null".equals(String.valueOf(orgApacheFelixWebconsolePluginsMemoryusage)))
            queryParams.put("org.apache.felix.webconsole.plugins.memoryusage", String.valueOf(orgApacheFelixWebconsolePluginsMemoryusage))

        if (!"null".equals(String.valueOf(orgApacheFelixWebconsolePluginsPackageadmin)))
            queryParams.put("org.apache.felix.webconsole.plugins.packageadmin", String.valueOf(orgApacheFelixWebconsolePluginsPackageadmin))

        if (!"null".equals(String.valueOf(orgApacheJackrabbitOakAuthLdap)))
            queryParams.put("org.apache.jackrabbit.oak-auth-ldap", String.valueOf(orgApacheJackrabbitOakAuthLdap))

        if (!"null".equals(String.valueOf(orgApacheJackrabbitOakSegmentTar)))
            queryParams.put("org.apache.jackrabbit.oak-segment-tar", String.valueOf(orgApacheJackrabbitOakSegmentTar))

        if (!"null".equals(String.valueOf(orgApacheJackrabbitOakSolrOsgi)))
            queryParams.put("org.apache.jackrabbit.oak-solr-osgi", String.valueOf(orgApacheJackrabbitOakSolrOsgi))

        if (!"null".equals(String.valueOf(orgApacheSlingBundleresourceImpl)))
            queryParams.put("org.apache.sling.bundleresource.impl", String.valueOf(orgApacheSlingBundleresourceImpl))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsFsclassloader)))
            queryParams.put("org.apache.sling.commons.fsclassloader", String.valueOf(orgApacheSlingCommonsFsclassloader))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogWebconsole)))
            queryParams.put("org.apache.sling.commons.log.webconsole", String.valueOf(orgApacheSlingCommonsLogWebconsole))

        if (!"null".equals(String.valueOf(orgApacheSlingDatasource)))
            queryParams.put("org.apache.sling.datasource", String.valueOf(orgApacheSlingDatasource))

        if (!"null".equals(String.valueOf(orgApacheSlingDiscoveryBase)))
            queryParams.put("org.apache.sling.discovery.base", String.valueOf(orgApacheSlingDiscoveryBase))

        if (!"null".equals(String.valueOf(orgApacheSlingDiscoveryOak)))
            queryParams.put("org.apache.sling.discovery.oak", String.valueOf(orgApacheSlingDiscoveryOak))

        if (!"null".equals(String.valueOf(orgApacheSlingDiscoverySupport)))
            queryParams.put("org.apache.sling.discovery.support", String.valueOf(orgApacheSlingDiscoverySupport))

        if (!"null".equals(String.valueOf(orgApacheSlingDistributionApi)))
            queryParams.put("org.apache.sling.distribution.api", String.valueOf(orgApacheSlingDistributionApi))

        if (!"null".equals(String.valueOf(orgApacheSlingDistributionCore)))
            queryParams.put("org.apache.sling.distribution.core", String.valueOf(orgApacheSlingDistributionCore))

        if (!"null".equals(String.valueOf(orgApacheSlingExtensionsWebconsolesecurityprovider)))
            queryParams.put("org.apache.sling.extensions.webconsolesecurityprovider", String.valueOf(orgApacheSlingExtensionsWebconsolesecurityprovider))

        if (!"null".equals(String.valueOf(orgApacheSlingHcWebconsole)))
            queryParams.put("org.apache.sling.hc.webconsole", String.valueOf(orgApacheSlingHcWebconsole))

        if (!"null".equals(String.valueOf(orgApacheSlingInstallerConsole)))
            queryParams.put("org.apache.sling.installer.console", String.valueOf(orgApacheSlingInstallerConsole))

        if (!"null".equals(String.valueOf(orgApacheSlingInstallerProviderFile)))
            queryParams.put("org.apache.sling.installer.provider.file", String.valueOf(orgApacheSlingInstallerProviderFile))

        if (!"null".equals(String.valueOf(orgApacheSlingInstallerProviderJcr)))
            queryParams.put("org.apache.sling.installer.provider.jcr", String.valueOf(orgApacheSlingInstallerProviderJcr))

        if (!"null".equals(String.valueOf(orgApacheSlingJcrDavex)))
            queryParams.put("org.apache.sling.jcr.davex", String.valueOf(orgApacheSlingJcrDavex))

        if (!"null".equals(String.valueOf(orgApacheSlingJcrResourcesecurity)))
            queryParams.put("org.apache.sling.jcr.resourcesecurity", String.valueOf(orgApacheSlingJcrResourcesecurity))

        if (!"null".equals(String.valueOf(orgApacheSlingJmxProvider)))
            queryParams.put("org.apache.sling.jmx.provider", String.valueOf(orgApacheSlingJmxProvider))

        if (!"null".equals(String.valueOf(orgApacheSlingLaunchpadInstaller)))
            queryParams.put("org.apache.sling.launchpad.installer", String.valueOf(orgApacheSlingLaunchpadInstaller))

        if (!"null".equals(String.valueOf(orgApacheSlingModelsImpl)))
            queryParams.put("org.apache.sling.models.impl", String.valueOf(orgApacheSlingModelsImpl))

        if (!"null".equals(String.valueOf(orgApacheSlingRepoinitParser)))
            queryParams.put("org.apache.sling.repoinit.parser", String.valueOf(orgApacheSlingRepoinitParser))

        if (!"null".equals(String.valueOf(orgApacheSlingResourceInventory)))
            queryParams.put("org.apache.sling.resource.inventory", String.valueOf(orgApacheSlingResourceInventory))

        if (!"null".equals(String.valueOf(orgApacheSlingResourceresolver)))
            queryParams.put("org.apache.sling.resourceresolver", String.valueOf(orgApacheSlingResourceresolver))

        if (!"null".equals(String.valueOf(orgApacheSlingScriptingJavascript)))
            queryParams.put("org.apache.sling.scripting.javascript", String.valueOf(orgApacheSlingScriptingJavascript))

        if (!"null".equals(String.valueOf(orgApacheSlingScriptingJst)))
            queryParams.put("org.apache.sling.scripting.jst", String.valueOf(orgApacheSlingScriptingJst))

        if (!"null".equals(String.valueOf(orgApacheSlingScriptingSightlyJsProvider)))
            queryParams.put("org.apache.sling.scripting.sightly.js.provider", String.valueOf(orgApacheSlingScriptingSightlyJsProvider))

        if (!"null".equals(String.valueOf(orgApacheSlingScriptingSightlyModelsProvider)))
            queryParams.put("org.apache.sling.scripting.sightly.models.provider", String.valueOf(orgApacheSlingScriptingSightlyModelsProvider))

        if (!"null".equals(String.valueOf(orgApacheSlingSecurity)))
            queryParams.put("org.apache.sling.security", String.valueOf(orgApacheSlingSecurity))

        if (!"null".equals(String.valueOf(orgApacheSlingServletsCompat)))
            queryParams.put("org.apache.sling.servlets.compat", String.valueOf(orgApacheSlingServletsCompat))

        if (!"null".equals(String.valueOf(orgApacheSlingServletsGet)))
            queryParams.put("org.apache.sling.servlets.get", String.valueOf(orgApacheSlingServletsGet))

        if (!"null".equals(String.valueOf(orgApacheSlingStartupfilterDisabler)))
            queryParams.put("org.apache.sling.startupfilter.disabler", String.valueOf(orgApacheSlingStartupfilterDisabler))

        if (!"null".equals(String.valueOf(orgApacheSlingTracer)))
            queryParams.put("org.apache.sling.tracer", String.valueOf(orgApacheSlingTracer))

        if (!"null".equals(String.valueOf(weRetailClientAppCore)))
            queryParams.put("we.retail.client.app.core", String.valueOf(weRetailClientAppCore))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.class )

    }

    def comAdobeGraniteAuthCertImplClientCertAuthHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String path, Integer serviceRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.class )

    }

    def comAdobeGraniteAuthIms ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String configid, String scope, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.ims"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(configid)))
            queryParams.put("configid", String.valueOf(configid))

        if (!"null".equals(String.valueOf(scope)))
            queryParams.put("scope", String.valueOf(scope))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthImsInfo.class )

    }

    def comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthProviderId, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthProviderId)))
            queryParams.put("oauth.provider.id", String.valueOf(oauthProviderId))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.class )

    }

    def comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String authImsClientSecret, String customizerType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(authImsClientSecret)))
            queryParams.put("auth.ims.client.secret", String.valueOf(authImsClientSecret))

        if (!"null".equals(String.valueOf(customizerType)))
            queryParams.put("customizer.type", String.valueOf(customizerType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.class )

    }

    def comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthProviderId, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthProviderId)))
            queryParams.put("oauth.provider.id", String.valueOf(oauthProviderId))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.class )

    }

    def comAdobeGraniteAuthImsImplIMSProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthProviderId, String oauthProviderImsAuthorizationUrl, String oauthProviderImsTokenUrl, String oauthProviderImsProfileUrl, List<String> oauthProviderImsExtendedDetailsUrls, String oauthProviderImsValidateTokenUrl, String oauthProviderImsSessionProperty, String oauthProviderImsServiceTokenClientId, String oauthProviderImsServiceTokenClientSecret, String oauthProviderImsServiceToken, String imsOrgRef, List<String> imsGroupMapping, Boolean oauthProviderImsOnlyLicenseGroup, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthProviderId)))
            queryParams.put("oauth.provider.id", String.valueOf(oauthProviderId))

        if (!"null".equals(String.valueOf(oauthProviderImsAuthorizationUrl)))
            queryParams.put("oauth.provider.ims.authorization.url", String.valueOf(oauthProviderImsAuthorizationUrl))

        if (!"null".equals(String.valueOf(oauthProviderImsTokenUrl)))
            queryParams.put("oauth.provider.ims.token.url", String.valueOf(oauthProviderImsTokenUrl))

        if (!"null".equals(String.valueOf(oauthProviderImsProfileUrl)))
            queryParams.put("oauth.provider.ims.profile.url", String.valueOf(oauthProviderImsProfileUrl))

        if (!"null".equals(String.valueOf(oauthProviderImsExtendedDetailsUrls)))
            queryParams.put("oauth.provider.ims.extended.details.urls", String.valueOf(oauthProviderImsExtendedDetailsUrls))

        if (!"null".equals(String.valueOf(oauthProviderImsValidateTokenUrl)))
            queryParams.put("oauth.provider.ims.validate.token.url", String.valueOf(oauthProviderImsValidateTokenUrl))

        if (!"null".equals(String.valueOf(oauthProviderImsSessionProperty)))
            queryParams.put("oauth.provider.ims.session.property", String.valueOf(oauthProviderImsSessionProperty))

        if (!"null".equals(String.valueOf(oauthProviderImsServiceTokenClientId)))
            queryParams.put("oauth.provider.ims.service.token.client.id", String.valueOf(oauthProviderImsServiceTokenClientId))

        if (!"null".equals(String.valueOf(oauthProviderImsServiceTokenClientSecret)))
            queryParams.put("oauth.provider.ims.service.token.client.secret", String.valueOf(oauthProviderImsServiceTokenClientSecret))

        if (!"null".equals(String.valueOf(oauthProviderImsServiceToken)))
            queryParams.put("oauth.provider.ims.service.token", String.valueOf(oauthProviderImsServiceToken))

        if (!"null".equals(String.valueOf(imsOrgRef)))
            queryParams.put("ims.org.ref", String.valueOf(imsOrgRef))

        if (!"null".equals(String.valueOf(imsGroupMapping)))
            queryParams.put("ims.group.mapping", String.valueOf(imsGroupMapping))

        if (!"null".equals(String.valueOf(oauthProviderImsOnlyLicenseGroup)))
            queryParams.put("oauth.provider.ims.only.license.group", String.valueOf(oauthProviderImsOnlyLicenseGroup))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthImsImplIMSProviderImplInfo.class )

    }

    def comAdobeGraniteAuthImsImplImsConfigProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthConfigmanagerImsConfigid, String imsOwningEntity, String aemInstanceId, String imsServiceCode, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthConfigmanagerImsConfigid)))
            queryParams.put("oauth.configmanager.ims.configid", String.valueOf(oauthConfigmanagerImsConfigid))

        if (!"null".equals(String.valueOf(imsOwningEntity)))
            queryParams.put("ims.owningEntity", String.valueOf(imsOwningEntity))

        if (!"null".equals(String.valueOf(aemInstanceId)))
            queryParams.put("aem.instanceId", String.valueOf(aemInstanceId))

        if (!"null".equals(String.valueOf(imsServiceCode)))
            queryParams.put("ims.serviceCode", String.valueOf(imsServiceCode))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.class )

    }

    def comAdobeGraniteAuthOauthAccesstokenProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String authTokenProviderTitle, List<String> authTokenProviderDefaultClaims, String authTokenProviderEndpoint, String authAccessTokenRequest, String authTokenProviderKeypairAlias, Integer authTokenProviderConnTimeout, Integer authTokenProviderSoTimeout, String authTokenProviderClientId, String authTokenProviderScope, Boolean authTokenProviderReuseAccessToken, Boolean authTokenProviderRelaxedSsl, String tokenRequestCustomizerType, String authTokenValidatorType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(authTokenProviderTitle)))
            queryParams.put("auth.token.provider.title", String.valueOf(authTokenProviderTitle))

        if (!"null".equals(String.valueOf(authTokenProviderDefaultClaims)))
            queryParams.put("auth.token.provider.default.claims", String.valueOf(authTokenProviderDefaultClaims))

        if (!"null".equals(String.valueOf(authTokenProviderEndpoint)))
            queryParams.put("auth.token.provider.endpoint", String.valueOf(authTokenProviderEndpoint))

        if (!"null".equals(String.valueOf(authAccessTokenRequest)))
            queryParams.put("auth.access.token.request", String.valueOf(authAccessTokenRequest))

        if (!"null".equals(String.valueOf(authTokenProviderKeypairAlias)))
            queryParams.put("auth.token.provider.keypair.alias", String.valueOf(authTokenProviderKeypairAlias))

        if (!"null".equals(String.valueOf(authTokenProviderConnTimeout)))
            queryParams.put("auth.token.provider.conn.timeout", String.valueOf(authTokenProviderConnTimeout))

        if (!"null".equals(String.valueOf(authTokenProviderSoTimeout)))
            queryParams.put("auth.token.provider.so.timeout", String.valueOf(authTokenProviderSoTimeout))

        if (!"null".equals(String.valueOf(authTokenProviderClientId)))
            queryParams.put("auth.token.provider.client.id", String.valueOf(authTokenProviderClientId))

        if (!"null".equals(String.valueOf(authTokenProviderScope)))
            queryParams.put("auth.token.provider.scope", String.valueOf(authTokenProviderScope))

        if (!"null".equals(String.valueOf(authTokenProviderReuseAccessToken)))
            queryParams.put("auth.token.provider.reuse.access.token", String.valueOf(authTokenProviderReuseAccessToken))

        if (!"null".equals(String.valueOf(authTokenProviderRelaxedSsl)))
            queryParams.put("auth.token.provider.relaxed.ssl", String.valueOf(authTokenProviderRelaxedSsl))

        if (!"null".equals(String.valueOf(tokenRequestCustomizerType)))
            queryParams.put("token.request.customizer.type", String.valueOf(tokenRequestCustomizerType))

        if (!"null".equals(String.valueOf(authTokenValidatorType)))
            queryParams.put("auth.token.validator.type", String.valueOf(authTokenValidatorType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthAccesstokenProviderInfo.class )

    }

    def comAdobeGraniteAuthOauthImplBearerAuthenticationHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String path, List<String> oauthClientIdsAllowed, Boolean authBearerSyncIms, String authTokenRequestParameter, String oauthBearerConfigid, Boolean oauthJwtSupport, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(oauthClientIdsAllowed)))
            queryParams.put("oauth.clientIds.allowed", String.valueOf(oauthClientIdsAllowed))

        if (!"null".equals(String.valueOf(authBearerSyncIms)))
            queryParams.put("auth.bearer.sync.ims", String.valueOf(authBearerSyncIms))

        if (!"null".equals(String.valueOf(authTokenRequestParameter)))
            queryParams.put("auth.tokenRequestParameter", String.valueOf(authTokenRequestParameter))

        if (!"null".equals(String.valueOf(oauthBearerConfigid)))
            queryParams.put("oauth.bearer.configid", String.valueOf(oauthBearerConfigid))

        if (!"null".equals(String.valueOf(oauthJwtSupport)))
            queryParams.put("oauth.jwt.support", String.valueOf(oauthJwtSupport))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.class )

    }

    def comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String authTokenValidatorType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(authTokenValidatorType)))
            queryParams.put("auth.token.validator.type", String.valueOf(authTokenValidatorType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.class )

    }

    def comAdobeGraniteAuthOauthImplFacebookProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthProviderId, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthProviderId)))
            queryParams.put("oauth.provider.id", String.valueOf(oauthProviderId))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.class )

    }

    def comAdobeGraniteAuthOauthImplGithubProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthProviderId, String oauthProviderGithubAuthorizationUrl, String oauthProviderGithubTokenUrl, String oauthProviderGithubProfileUrl, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthProviderId)))
            queryParams.put("oauth.provider.id", String.valueOf(oauthProviderId))

        if (!"null".equals(String.valueOf(oauthProviderGithubAuthorizationUrl)))
            queryParams.put("oauth.provider.github.authorization.url", String.valueOf(oauthProviderGithubAuthorizationUrl))

        if (!"null".equals(String.valueOf(oauthProviderGithubTokenUrl)))
            queryParams.put("oauth.provider.github.token.url", String.valueOf(oauthProviderGithubTokenUrl))

        if (!"null".equals(String.valueOf(oauthProviderGithubProfileUrl)))
            queryParams.put("oauth.provider.github.profile.url", String.valueOf(oauthProviderGithubProfileUrl))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.class )

    }

    def comAdobeGraniteAuthOauthImplGraniteProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthProviderId, String oauthProviderGraniteAuthorizationUrl, String oauthProviderGraniteTokenUrl, String oauthProviderGraniteProfileUrl, String oauthProviderGraniteExtendedDetailsUrls, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthProviderId)))
            queryParams.put("oauth.provider.id", String.valueOf(oauthProviderId))

        if (!"null".equals(String.valueOf(oauthProviderGraniteAuthorizationUrl)))
            queryParams.put("oauth.provider.granite.authorization.url", String.valueOf(oauthProviderGraniteAuthorizationUrl))

        if (!"null".equals(String.valueOf(oauthProviderGraniteTokenUrl)))
            queryParams.put("oauth.provider.granite.token.url", String.valueOf(oauthProviderGraniteTokenUrl))

        if (!"null".equals(String.valueOf(oauthProviderGraniteProfileUrl)))
            queryParams.put("oauth.provider.granite.profile.url", String.valueOf(oauthProviderGraniteProfileUrl))

        if (!"null".equals(String.valueOf(oauthProviderGraniteExtendedDetailsUrls)))
            queryParams.put("oauth.provider.granite.extended.details.urls", String.valueOf(oauthProviderGraniteExtendedDetailsUrls))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthImplGraniteProviderInfo.class )

    }

    def comAdobeGraniteAuthOauthImplHelperProviderConfigManager ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthCookieLoginTimeout, String oauthCookieMaxAge, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthCookieLoginTimeout)))
            queryParams.put("oauth.cookie.login.timeout", String.valueOf(oauthCookieLoginTimeout))

        if (!"null".equals(String.valueOf(oauthCookieMaxAge)))
            queryParams.put("oauth.cookie.max.age", String.valueOf(oauthCookieMaxAge))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.class )

    }

    def comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthCookieLoginTimeout, String oauthCookieMaxAge, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthCookieLoginTimeout)))
            queryParams.put("oauth.cookie.login.timeout", String.valueOf(oauthCookieLoginTimeout))

        if (!"null".equals(String.valueOf(oauthCookieMaxAge)))
            queryParams.put("oauth.cookie.max.age", String.valueOf(oauthCookieMaxAge))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.class )

    }

    def comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String path, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.class )

    }

    def comAdobeGraniteAuthOauthImplTwitterProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthProviderId, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthProviderId)))
            queryParams.put("oauth.provider.id", String.valueOf(oauthProviderId))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.class )

    }

    def comAdobeGraniteAuthOauthProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthConfigId, String oauthClientId, String oauthClientSecret, List<String> oauthScope, String oauthConfigProviderId, Boolean oauthCreateUsers, String oauthUseridProperty, Boolean forceStrictUsernameMatching, Boolean oauthEncodeUserids, Boolean oauthHashUserids, String oauthCallBackUrl, Boolean oauthAccessTokenPersist, Boolean oauthAccessTokenPersistCookie, Boolean oauthCsrfStateProtection, Boolean oauthRedirectRequestParams, Boolean oauthConfigSiblingsAllow, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.oauth.provider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthConfigId)))
            queryParams.put("oauth.config.id", String.valueOf(oauthConfigId))

        if (!"null".equals(String.valueOf(oauthClientId)))
            queryParams.put("oauth.client.id", String.valueOf(oauthClientId))

        if (!"null".equals(String.valueOf(oauthClientSecret)))
            queryParams.put("oauth.client.secret", String.valueOf(oauthClientSecret))

        if (!"null".equals(String.valueOf(oauthScope)))
            queryParams.put("oauth.scope", String.valueOf(oauthScope))

        if (!"null".equals(String.valueOf(oauthConfigProviderId)))
            queryParams.put("oauth.config.provider.id", String.valueOf(oauthConfigProviderId))

        if (!"null".equals(String.valueOf(oauthCreateUsers)))
            queryParams.put("oauth.create.users", String.valueOf(oauthCreateUsers))

        if (!"null".equals(String.valueOf(oauthUseridProperty)))
            queryParams.put("oauth.userid.property", String.valueOf(oauthUseridProperty))

        if (!"null".equals(String.valueOf(forceStrictUsernameMatching)))
            queryParams.put("force.strict.username.matching", String.valueOf(forceStrictUsernameMatching))

        if (!"null".equals(String.valueOf(oauthEncodeUserids)))
            queryParams.put("oauth.encode.userids", String.valueOf(oauthEncodeUserids))

        if (!"null".equals(String.valueOf(oauthHashUserids)))
            queryParams.put("oauth.hash.userids", String.valueOf(oauthHashUserids))

        if (!"null".equals(String.valueOf(oauthCallBackUrl)))
            queryParams.put("oauth.callBackUrl", String.valueOf(oauthCallBackUrl))

        if (!"null".equals(String.valueOf(oauthAccessTokenPersist)))
            queryParams.put("oauth.access.token.persist", String.valueOf(oauthAccessTokenPersist))

        if (!"null".equals(String.valueOf(oauthAccessTokenPersistCookie)))
            queryParams.put("oauth.access.token.persist.cookie", String.valueOf(oauthAccessTokenPersistCookie))

        if (!"null".equals(String.valueOf(oauthCsrfStateProtection)))
            queryParams.put("oauth.csrf.state.protection", String.valueOf(oauthCsrfStateProtection))

        if (!"null".equals(String.valueOf(oauthRedirectRequestParams)))
            queryParams.put("oauth.redirect.request.params", String.valueOf(oauthRedirectRequestParams))

        if (!"null".equals(String.valueOf(oauthConfigSiblingsAllow)))
            queryParams.put("oauth.config.siblings.allow", String.valueOf(oauthConfigSiblingsAllow))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthOauthProviderInfo.class )

    }

    def comAdobeGraniteAuthRequirementImplDefaultRequirementHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> supportedPaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(supportedPaths)))
            queryParams.put("supportedPaths", String.valueOf(supportedPaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.class )

    }

    def comAdobeGraniteAuthSamlSamlAuthenticationHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, String userIntermediatePath, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String identitySyncType, String idpIdentifier, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(idpUrl)))
            queryParams.put("idpUrl", String.valueOf(idpUrl))

        if (!"null".equals(String.valueOf(idpCertAlias)))
            queryParams.put("idpCertAlias", String.valueOf(idpCertAlias))

        if (!"null".equals(String.valueOf(idpHttpRedirect)))
            queryParams.put("idpHttpRedirect", String.valueOf(idpHttpRedirect))

        if (!"null".equals(String.valueOf(serviceProviderEntityId)))
            queryParams.put("serviceProviderEntityId", String.valueOf(serviceProviderEntityId))

        if (!"null".equals(String.valueOf(assertionConsumerServiceURL)))
            queryParams.put("assertionConsumerServiceURL", String.valueOf(assertionConsumerServiceURL))

        if (!"null".equals(String.valueOf(spPrivateKeyAlias)))
            queryParams.put("spPrivateKeyAlias", String.valueOf(spPrivateKeyAlias))

        if (!"null".equals(String.valueOf(keyStorePassword)))
            queryParams.put("keyStorePassword", String.valueOf(keyStorePassword))

        if (!"null".equals(String.valueOf(defaultRedirectUrl)))
            queryParams.put("defaultRedirectUrl", String.valueOf(defaultRedirectUrl))

        if (!"null".equals(String.valueOf(userIDAttribute)))
            queryParams.put("userIDAttribute", String.valueOf(userIDAttribute))

        if (!"null".equals(String.valueOf(useEncryption)))
            queryParams.put("useEncryption", String.valueOf(useEncryption))

        if (!"null".equals(String.valueOf(createUser)))
            queryParams.put("createUser", String.valueOf(createUser))

        if (!"null".equals(String.valueOf(userIntermediatePath)))
            queryParams.put("userIntermediatePath", String.valueOf(userIntermediatePath))

        if (!"null".equals(String.valueOf(addGroupMemberships)))
            queryParams.put("addGroupMemberships", String.valueOf(addGroupMemberships))

        if (!"null".equals(String.valueOf(groupMembershipAttribute)))
            queryParams.put("groupMembershipAttribute", String.valueOf(groupMembershipAttribute))

        if (!"null".equals(String.valueOf(defaultGroups)))
            queryParams.put("defaultGroups", String.valueOf(defaultGroups))

        if (!"null".equals(String.valueOf(nameIdFormat)))
            queryParams.put("nameIdFormat", String.valueOf(nameIdFormat))

        if (!"null".equals(String.valueOf(synchronizeAttributes)))
            queryParams.put("synchronizeAttributes", String.valueOf(synchronizeAttributes))

        if (!"null".equals(String.valueOf(handleLogout)))
            queryParams.put("handleLogout", String.valueOf(handleLogout))

        if (!"null".equals(String.valueOf(logoutUrl)))
            queryParams.put("logoutUrl", String.valueOf(logoutUrl))

        if (!"null".equals(String.valueOf(clockTolerance)))
            queryParams.put("clockTolerance", String.valueOf(clockTolerance))

        if (!"null".equals(String.valueOf(digestMethod)))
            queryParams.put("digestMethod", String.valueOf(digestMethod))

        if (!"null".equals(String.valueOf(signatureMethod)))
            queryParams.put("signatureMethod", String.valueOf(signatureMethod))

        if (!"null".equals(String.valueOf(identitySyncType)))
            queryParams.put("identitySyncType", String.valueOf(identitySyncType))

        if (!"null".equals(String.valueOf(idpIdentifier)))
            queryParams.put("idpIdentifier", String.valueOf(idpIdentifier))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.class )

    }

    def comAdobeGraniteAuthSsoImplSsoAuthenticationHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String path, Integer serviceRanking, String jaasControlFlag, String jaasRealmName, Integer jaasRanking, List<String> headers, List<String> cookies, List<String> parameters, List<String> usermap, String format, String trustedCredentialsAttribute, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(jaasControlFlag)))
            queryParams.put("jaas.controlFlag", String.valueOf(jaasControlFlag))

        if (!"null".equals(String.valueOf(jaasRealmName)))
            queryParams.put("jaas.realmName", String.valueOf(jaasRealmName))

        if (!"null".equals(String.valueOf(jaasRanking)))
            queryParams.put("jaas.ranking", String.valueOf(jaasRanking))

        if (!"null".equals(String.valueOf(headers)))
            queryParams.put("headers", String.valueOf(headers))

        if (!"null".equals(String.valueOf(cookies)))
            queryParams.put("cookies", String.valueOf(cookies))

        if (!"null".equals(String.valueOf(parameters)))
            queryParams.put("parameters", String.valueOf(parameters))

        if (!"null".equals(String.valueOf(usermap)))
            queryParams.put("usermap", String.valueOf(usermap))

        if (!"null".equals(String.valueOf(format)))
            queryParams.put("format", String.valueOf(format))

        if (!"null".equals(String.valueOf(trustedCredentialsAttribute)))
            queryParams.put("trustedCredentialsAttribute", String.valueOf(trustedCredentialsAttribute))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.class )

    }

    def comAdobeGraniteBundlesHcImplCodeCacheHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Integer minimumCodeCacheSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(minimumCodeCacheSize)))
            queryParams.put("minimum.code.cache.size", String.valueOf(minimumCodeCacheSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.class )

    }

    def comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.class )

    }

    def comAdobeGraniteBundlesHcImplDavExBundleHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.class )

    }

    def comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, List<String> ignoredBundles, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(ignoredBundles)))
            queryParams.put("ignored.bundles", String.valueOf(ignoredBundles))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.class )

    }

    def comAdobeGraniteBundlesHcImplJobsHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Integer maxQueuedJobs, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(maxQueuedJobs)))
            queryParams.put("max.queued.jobs", String.valueOf(maxQueuedJobs))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.class )

    }

    def comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.class )

    }

    def comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.class )

    }

    def comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.class )

    }

    def comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.class )

    }

    def comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.class )

    }

    def comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> replicateCommentResourceTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(replicateCommentResourceTypes)))
            queryParams.put("replicate.comment.resourceTypes", String.valueOf(replicateCommentResourceTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.class )

    }

    def comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> compatgroups, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(compatgroups)))
            queryParams.put("compatgroups", String.valueOf(compatgroups))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.class )

    }

    def comAdobeGraniteCompatrouterImplRoutingConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String id, String compatPath, String newPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(id)))
            queryParams.put("id", String.valueOf(id))

        if (!"null".equals(String.valueOf(compatPath)))
            queryParams.put("compatPath", String.valueOf(compatPath))

        if (!"null".equals(String.valueOf(newPath)))
            queryParams.put("newPath", String.valueOf(newPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteCompatrouterImplRoutingConfigInfo.class )

    }

    def comAdobeGraniteCompatrouterImplSwitchMappingConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String group, List<String> ids, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(group)))
            queryParams.put("group", String.valueOf(group))

        if (!"null".equals(String.valueOf(ids)))
            queryParams.put("ids", String.valueOf(ids))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.class )

    }

    def comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, List<String> fallbackPaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(fallbackPaths)))
            queryParams.put("fallbackPaths", String.valueOf(fallbackPaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.class )

    }

    def comAdobeGraniteContexthubImplContextHubImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean comAdobeGraniteContexthubSilentMode, Boolean comAdobeGraniteContexthubShowUi, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeGraniteContexthubSilentMode)))
            queryParams.put("com.adobe.granite.contexthub.silent_mode", String.valueOf(comAdobeGraniteContexthubSilentMode))

        if (!"null".equals(String.valueOf(comAdobeGraniteContexthubShowUi)))
            queryParams.put("com.adobe.granite.contexthub.show_ui", String.valueOf(comAdobeGraniteContexthubShowUi))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteContexthubImplContextHubImplInfo.class )

    }

    def comAdobeGraniteCorsImplCORSPolicyImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> alloworigin, List<String> alloworiginregexp, List<String> allowedpaths, List<String> exposedheaders, Integer maxage, List<String> supportedheaders, List<String> supportedmethods, Boolean supportscredentials, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(alloworigin)))
            queryParams.put("alloworigin", String.valueOf(alloworigin))

        if (!"null".equals(String.valueOf(alloworiginregexp)))
            queryParams.put("alloworiginregexp", String.valueOf(alloworiginregexp))

        if (!"null".equals(String.valueOf(allowedpaths)))
            queryParams.put("allowedpaths", String.valueOf(allowedpaths))

        if (!"null".equals(String.valueOf(exposedheaders)))
            queryParams.put("exposedheaders", String.valueOf(exposedheaders))

        if (!"null".equals(String.valueOf(maxage)))
            queryParams.put("maxage", String.valueOf(maxage))

        if (!"null".equals(String.valueOf(supportedheaders)))
            queryParams.put("supportedheaders", String.valueOf(supportedheaders))

        if (!"null".equals(String.valueOf(supportedmethods)))
            queryParams.put("supportedmethods", String.valueOf(supportedmethods))

        if (!"null".equals(String.valueOf(supportscredentials)))
            queryParams.put("supportscredentials", String.valueOf(supportscredentials))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteCorsImplCORSPolicyImplInfo.class )

    }

    def comAdobeGraniteCsrfImplCSRFFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> filterMethods, Boolean filterEnableSafeUserAgents, List<String> filterSafeUserAgents, List<String> filterExcludedPaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(filterMethods)))
            queryParams.put("filter.methods", String.valueOf(filterMethods))

        if (!"null".equals(String.valueOf(filterEnableSafeUserAgents)))
            queryParams.put("filter.enable.safe.user.agents", String.valueOf(filterEnableSafeUserAgents))

        if (!"null".equals(String.valueOf(filterSafeUserAgents)))
            queryParams.put("filter.safe.user.agents", String.valueOf(filterSafeUserAgents))

        if (!"null".equals(String.valueOf(filterExcludedPaths)))
            queryParams.put("filter.excluded.paths", String.valueOf(filterExcludedPaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteCsrfImplCSRFFilterInfo.class )

    }

    def comAdobeGraniteCsrfImplCSRFServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer csrfTokenExpiresIn, String slingAuthRequirements, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(csrfTokenExpiresIn)))
            queryParams.put("csrf.token.expires.in", String.valueOf(csrfTokenExpiresIn))

        if (!"null".equals(String.valueOf(slingAuthRequirements)))
            queryParams.put("sling.auth.requirements", String.valueOf(slingAuthRequirements))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteCsrfImplCSRFServletInfo.class )

    }

    def comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String username, String encryptedPassword, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(username)))
            queryParams.put("username", String.valueOf(username))

        if (!"null".equals(String.valueOf(encryptedPassword)))
            queryParams.put("encryptedPassword", String.valueOf(encryptedPassword))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.class )

    }

    def comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, String agentName, String diffPath, String observedPath, String serviceName, String propertyNames, Integer distributionDelay, String serviceUserTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(agentName)))
            queryParams.put("agentName", String.valueOf(agentName))

        if (!"null".equals(String.valueOf(diffPath)))
            queryParams.put("diffPath", String.valueOf(diffPath))

        if (!"null".equals(String.valueOf(observedPath)))
            queryParams.put("observedPath", String.valueOf(observedPath))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(propertyNames)))
            queryParams.put("propertyNames", String.valueOf(propertyNames))

        if (!"null".equals(String.valueOf(distributionDelay)))
            queryParams.put("distributionDelay", String.valueOf(distributionDelay))

        if (!"null".equals(String.valueOf(serviceUserTarget)))
            queryParams.put("serviceUser.target", String.valueOf(serviceUserTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.class )

    }

    def comAdobeGraniteDistributionCoreImplDiffDiffEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String diffPath, String serviceName, String serviceUserTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(diffPath)))
            queryParams.put("diffPath", String.valueOf(diffPath))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(serviceUserTarget)))
            queryParams.put("serviceUser.target", String.valueOf(serviceUserTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.class )

    }

    def comAdobeGraniteDistributionCoreImplDistributionToReplicationEven ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> importerName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(importerName)))
            queryParams.put("importer.name", String.valueOf(importerName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.class )

    }

    def comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String providerName, Boolean forwardRequests, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(providerName)))
            queryParams.put("providerName", String.valueOf(providerName))

        if (!"null".equals(String.valueOf(forwardRequests)))
            queryParams.put("forward.requests", String.valueOf(forwardRequests))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.class )

    }

    def comAdobeGraniteDistributionCoreImplReplicationDistributionTrans ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean forwardRequests, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(forwardRequests)))
            queryParams.put("forward.requests", String.valueOf(forwardRequests))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.class )

    }

    def comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String serviceName, String userId, String accessTokenProviderTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(userId)))
            queryParams.put("userId", String.valueOf(userId))

        if (!"null".equals(String.valueOf(accessTokenProviderTarget)))
            queryParams.put("accessTokenProvider.target", String.valueOf(accessTokenProviderTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.class )

    }

    def comAdobeGraniteFragsImplCheckHttpHeaderFlag ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String featureName, String featureDescription, String httpHeaderName, String httpHeaderValuepattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(featureName)))
            queryParams.put("feature.name", String.valueOf(featureName))

        if (!"null".equals(String.valueOf(featureDescription)))
            queryParams.put("feature.description", String.valueOf(featureDescription))

        if (!"null".equals(String.valueOf(httpHeaderName)))
            queryParams.put("http.header.name", String.valueOf(httpHeaderName))

        if (!"null".equals(String.valueOf(httpHeaderValuepattern)))
            queryParams.put("http.header.valuepattern", String.valueOf(httpHeaderValuepattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.class )

    }

    def comAdobeGraniteFragsImplRandomFeature ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String featureName, String featureDescription, String activePercentage, String cookieName, Integer cookieMaxAge, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(featureName)))
            queryParams.put("feature.name", String.valueOf(featureName))

        if (!"null".equals(String.valueOf(featureDescription)))
            queryParams.put("feature.description", String.valueOf(featureDescription))

        if (!"null".equals(String.valueOf(activePercentage)))
            queryParams.put("active.percentage", String.valueOf(activePercentage))

        if (!"null".equals(String.valueOf(cookieName)))
            queryParams.put("cookie.name", String.valueOf(cookieName))

        if (!"null".equals(String.valueOf(cookieMaxAge)))
            queryParams.put("cookie.maxAge", String.valueOf(cookieMaxAge))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteFragsImplRandomFeatureInfo.class )

    }

    def comAdobeGraniteHttpcacheFileFileCacheStore ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String comAdobeGraniteHttpcacheFileDocumentRoot, String comAdobeGraniteHttpcacheFileIncludeHost, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeGraniteHttpcacheFileDocumentRoot)))
            queryParams.put("com.adobe.granite.httpcache.file.documentRoot", String.valueOf(comAdobeGraniteHttpcacheFileDocumentRoot))

        if (!"null".equals(String.valueOf(comAdobeGraniteHttpcacheFileIncludeHost)))
            queryParams.put("com.adobe.granite.httpcache.file.includeHost", String.valueOf(comAdobeGraniteHttpcacheFileIncludeHost))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.class )

    }

    def comAdobeGraniteHttpcacheImplOuterCacheFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> comAdobeGraniteHttpcacheUrlPaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeGraniteHttpcacheUrlPaths)))
            queryParams.put("com.adobe.granite.httpcache.url.paths", String.valueOf(comAdobeGraniteHttpcacheUrlPaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.class )

    }

    def comAdobeGraniteI18nImplBundlePseudoTranslations ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> pseudoPatterns, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(pseudoPatterns)))
            queryParams.put("pseudo.patterns", String.valueOf(pseudoPatterns))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.class )

    }

    def comAdobeGraniteI18nImplPreferencesLocaleResolverService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String securityPreferencesName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(securityPreferencesName)))
            queryParams.put("security.preferences.name", String.valueOf(securityPreferencesName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.class )

    }

    def comAdobeGraniteInfocollectorInfoCollector ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean graniteInfocollectorIncludeThreadDumps, Boolean graniteInfocollectorIncludeHeapDump, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(graniteInfocollectorIncludeThreadDumps)))
            queryParams.put("granite.infocollector.includeThreadDumps", String.valueOf(graniteInfocollectorIncludeThreadDumps))

        if (!"null".equals(String.valueOf(graniteInfocollectorIncludeHeapDump)))
            queryParams.put("granite.infocollector.includeHeapDump", String.valueOf(graniteInfocollectorIncludeHeapDump))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteInfocollectorInfoCollectorInfo.class )

    }

    def comAdobeGraniteJettySslInternalGraniteSslConnectorFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer comAdobeGraniteJettySslPort, String comAdobeGraniteJettySslKeystoreUser, String comAdobeGraniteJettySslKeystorePassword, List<String> comAdobeGraniteJettySslCiphersuitesExcluded, List<String> comAdobeGraniteJettySslCiphersuitesIncluded, String comAdobeGraniteJettySslClientCertificate, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comAdobeGraniteJettySslPort)))
            queryParams.put("com.adobe.granite.jetty.ssl.port", String.valueOf(comAdobeGraniteJettySslPort))

        if (!"null".equals(String.valueOf(comAdobeGraniteJettySslKeystoreUser)))
            queryParams.put("com.adobe.granite.jetty.ssl.keystore.user", String.valueOf(comAdobeGraniteJettySslKeystoreUser))

        if (!"null".equals(String.valueOf(comAdobeGraniteJettySslKeystorePassword)))
            queryParams.put("com.adobe.granite.jetty.ssl.keystore.password", String.valueOf(comAdobeGraniteJettySslKeystorePassword))

        if (!"null".equals(String.valueOf(comAdobeGraniteJettySslCiphersuitesExcluded)))
            queryParams.put("com.adobe.granite.jetty.ssl.ciphersuites.excluded", String.valueOf(comAdobeGraniteJettySslCiphersuitesExcluded))

        if (!"null".equals(String.valueOf(comAdobeGraniteJettySslCiphersuitesIncluded)))
            queryParams.put("com.adobe.granite.jetty.ssl.ciphersuites.included", String.valueOf(comAdobeGraniteJettySslCiphersuitesIncluded))

        if (!"null".equals(String.valueOf(comAdobeGraniteJettySslClientCertificate)))
            queryParams.put("com.adobe.granite.jetty.ssl.client.certificate", String.valueOf(comAdobeGraniteJettySslClientCertificate))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.class )

    }

    def comAdobeGraniteLicenseImplLicenseCheckFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer checkInternval, List<String> excludeIds, Boolean encryptPing, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(checkInternval)))
            queryParams.put("checkInternval", String.valueOf(checkInternval))

        if (!"null".equals(String.valueOf(excludeIds)))
            queryParams.put("excludeIds", String.valueOf(excludeIds))

        if (!"null".equals(String.valueOf(encryptPing)))
            queryParams.put("encryptPing", String.valueOf(encryptPing))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.class )

    }

    def comAdobeGraniteLoggingImplLogAnalyserImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer messagesQueueSize, List<String> loggerConfig, Integer messagesSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(messagesQueueSize)))
            queryParams.put("messages.queue.size", String.valueOf(messagesQueueSize))

        if (!"null".equals(String.valueOf(loggerConfig)))
            queryParams.put("logger.config", String.valueOf(loggerConfig))

        if (!"null".equals(String.valueOf(messagesSize)))
            queryParams.put("messages.size", String.valueOf(messagesSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteLoggingImplLogAnalyserImplInfo.class )

    }

    def comAdobeGraniteLoggingImplLogErrorHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.class )

    }

    def comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean graniteMaintenanceMandatory, String jobTopics, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(graniteMaintenanceMandatory)))
            queryParams.put("granite.maintenance.mandatory", String.valueOf(graniteMaintenanceMandatory))

        if (!"null".equals(String.valueOf(jobTopics)))
            queryParams.put("job.topics", String.valueOf(jobTopics))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.class )

    }

    def comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String jobTopics, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jobTopics)))
            queryParams.put("job.topics", String.valueOf(jobTopics))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.class )

    }

    def comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fullGcDays, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fullGcDays)))
            queryParams.put("full.gc.days", String.valueOf(fullGcDays))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.class )

    }

    def comAdobeGraniteMonitoringImplScriptConfigImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String scriptFilename, String scriptDisplay, String scriptPath, List<String> scriptPlatform, Integer interval, String jmxdomain, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(scriptFilename)))
            queryParams.put("script.filename", String.valueOf(scriptFilename))

        if (!"null".equals(String.valueOf(scriptDisplay)))
            queryParams.put("script.display", String.valueOf(scriptDisplay))

        if (!"null".equals(String.valueOf(scriptPath)))
            queryParams.put("script.path", String.valueOf(scriptPath))

        if (!"null".equals(String.valueOf(scriptPlatform)))
            queryParams.put("script.platform", String.valueOf(scriptPlatform))

        if (!"null".equals(String.valueOf(interval)))
            queryParams.put("interval", String.valueOf(interval))

        if (!"null".equals(String.valueOf(jmxdomain)))
            queryParams.put("jmxdomain", String.valueOf(jmxdomain))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteMonitoringImplScriptConfigImplInfo.class )

    }

    def comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String path, String jaasControlFlag, String jaasRealmName, Integer jaasRanking, Boolean oauthOfflineValidation, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(jaasControlFlag)))
            queryParams.put("jaas.controlFlag", String.valueOf(jaasControlFlag))

        if (!"null".equals(String.valueOf(jaasRealmName)))
            queryParams.put("jaas.realmName", String.valueOf(jaasRealmName))

        if (!"null".equals(String.valueOf(jaasRanking)))
            queryParams.put("jaas.ranking", String.valueOf(jaasRanking))

        if (!"null".equals(String.valueOf(oauthOfflineValidation)))
            queryParams.put("oauth.offline.validation", String.valueOf(oauthOfflineValidation))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.class )

    }

    def comAdobeGraniteOauthServerImplAccessTokenCleanupTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.class )

    }

    def comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean oauthClientRevocationActive, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthClientRevocationActive)))
            queryParams.put("oauth.client.revocation.active", String.valueOf(oauthClientRevocationActive))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.class )

    }

    def comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingServletPaths, Boolean oauthRevocationActive, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletPaths)))
            queryParams.put("sling.servlet.paths", String.valueOf(slingServletPaths))

        if (!"null".equals(String.valueOf(oauthRevocationActive)))
            queryParams.put("oauth.revocation.active", String.valueOf(oauthRevocationActive))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.class )

    }

    def comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String oauthIssuer, String oauthAccessTokenExpiresIn, String osgiHttpWhiteboardServletPattern, String osgiHttpWhiteboardContextSelect, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthIssuer)))
            queryParams.put("oauth.issuer", String.valueOf(oauthIssuer))

        if (!"null".equals(String.valueOf(oauthAccessTokenExpiresIn)))
            queryParams.put("oauth.access.token.expires.in", String.valueOf(oauthAccessTokenExpiresIn))

        if (!"null".equals(String.valueOf(osgiHttpWhiteboardServletPattern)))
            queryParams.put("osgi.http.whiteboard.servlet.pattern", String.valueOf(osgiHttpWhiteboardServletPattern))

        if (!"null".equals(String.valueOf(osgiHttpWhiteboardContextSelect)))
            queryParams.put("osgi.http.whiteboard.context.select", String.valueOf(osgiHttpWhiteboardContextSelect))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.class )

    }

    def comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean oauthTokenRevocationActive, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(oauthTokenRevocationActive)))
            queryParams.put("oauth.token.revocation.active", String.valueOf(oauthTokenRevocationActive))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.class )

    }

    def comAdobeGraniteOffloadingImplOffloadingConfigurator ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String offloadingTransporter, Boolean offloadingCleanupPayload, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(offloadingTransporter)))
            queryParams.put("offloading.transporter", String.valueOf(offloadingTransporter))

        if (!"null".equals(String.valueOf(offloadingCleanupPayload)))
            queryParams.put("offloading.cleanup.payload", String.valueOf(offloadingCleanupPayload))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.class )

    }

    def comAdobeGraniteOffloadingImplOffloadingJobCloner ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean offloadingJobclonerEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(offloadingJobclonerEnabled)))
            queryParams.put("offloading.jobcloner.enabled", String.valueOf(offloadingJobclonerEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.class )

    }

    def comAdobeGraniteOffloadingImplOffloadingJobOffloader ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean offloadingOffloaderEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(offloadingOffloaderEnabled)))
            queryParams.put("offloading.offloader.enabled", String.valueOf(offloadingOffloaderEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.class )

    }

    def comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean offloadingAgentmanagerEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(offloadingAgentmanagerEnabled)))
            queryParams.put("offloading.agentmanager.enabled", String.valueOf(offloadingAgentmanagerEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.class )

    }

    def comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String defaultTransportAgentToWorkerPrefix, String defaultTransportAgentToMasterPrefix, String defaultTransportInputPackage, String defaultTransportOutputPackage, Boolean defaultTransportReplicationSynchronous, Boolean defaultTransportContentpackage, Boolean offloadingTransporterDefaultEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(defaultTransportAgentToWorkerPrefix)))
            queryParams.put("default.transport.agent-to-worker.prefix", String.valueOf(defaultTransportAgentToWorkerPrefix))

        if (!"null".equals(String.valueOf(defaultTransportAgentToMasterPrefix)))
            queryParams.put("default.transport.agent-to-master.prefix", String.valueOf(defaultTransportAgentToMasterPrefix))

        if (!"null".equals(String.valueOf(defaultTransportInputPackage)))
            queryParams.put("default.transport.input.package", String.valueOf(defaultTransportInputPackage))

        if (!"null".equals(String.valueOf(defaultTransportOutputPackage)))
            queryParams.put("default.transport.output.package", String.valueOf(defaultTransportOutputPackage))

        if (!"null".equals(String.valueOf(defaultTransportReplicationSynchronous)))
            queryParams.put("default.transport.replication.synchronous", String.valueOf(defaultTransportReplicationSynchronous))

        if (!"null".equals(String.valueOf(defaultTransportContentpackage)))
            queryParams.put("default.transport.contentpackage", String.valueOf(defaultTransportContentpackage))

        if (!"null".equals(String.valueOf(offloadingTransporterDefaultEnabled)))
            queryParams.put("offloading.transporter.default.enabled", String.valueOf(offloadingTransporterDefaultEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.class )

    }

    def comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer omnisearchSuggestionRequiretextMin, Boolean omnisearchSuggestionSpellcheckRequire, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(omnisearchSuggestionRequiretextMin)))
            queryParams.put("omnisearch.suggestion.requiretext.min", String.valueOf(omnisearchSuggestionRequiretextMin))

        if (!"null".equals(String.valueOf(omnisearchSuggestionSpellcheckRequire)))
            queryParams.put("omnisearch.suggestion.spellcheck.require", String.valueOf(omnisearchSuggestionSpellcheckRequire))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.class )

    }

    def comAdobeGraniteOptoutImplOptOutServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> optoutCookies, List<String> optoutHeaders, List<String> optoutWhitelistCookies, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(optoutCookies)))
            queryParams.put("optout.cookies", String.valueOf(optoutCookies))

        if (!"null".equals(String.valueOf(optoutHeaders)))
            queryParams.put("optout.headers", String.valueOf(optoutHeaders))

        if (!"null".equals(String.valueOf(optoutWhitelistCookies)))
            queryParams.put("optout.whitelist.cookies", String.valueOf(optoutWhitelistCookies))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteOptoutImplOptOutServiceImplInfo.class )

    }

    def comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer indexingCriticalThreshold, Integer indexingWarnThreshold, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(indexingCriticalThreshold)))
            queryParams.put("indexing.critical.threshold", String.valueOf(indexingCriticalThreshold))

        if (!"null".equals(String.valueOf(indexingWarnThreshold)))
            queryParams.put("indexing.warn.threshold", String.valueOf(indexingWarnThreshold))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.class )

    }

    def comAdobeGraniteQueriesImplHcLargeIndexHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer largeIndexCriticalThreshold, Integer largeIndexWarnThreshold, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(largeIndexCriticalThreshold)))
            queryParams.put("large.index.critical.threshold", String.valueOf(largeIndexCriticalThreshold))

        if (!"null".equals(String.valueOf(largeIndexWarnThreshold)))
            queryParams.put("large.index.warn.threshold", String.valueOf(largeIndexWarnThreshold))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.class )

    }

    def comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.class )

    }

    def comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer getPeriod, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(getPeriod)))
            queryParams.put("getPeriod", String.valueOf(getPeriod))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.class )

    }

    def comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.class )

    }

    def comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer numberOfRetriesAllowed, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(numberOfRetriesAllowed)))
            queryParams.put("number.of.retries.allowed", String.valueOf(numberOfRetriesAllowed))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.class )

    }

    def comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.class )

    }

    def comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.class )

    }

    def comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, List<String> excludeSearchPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(excludeSearchPath)))
            queryParams.put("exclude.search.path", String.valueOf(excludeSearchPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.class )

    }

    def comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.class )

    }

    def comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.class )

    }

    def comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, List<String> accountLogins, List<String> consoleLogins, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(accountLogins)))
            queryParams.put("account.logins", String.valueOf(accountLogins))

        if (!"null".equals(String.valueOf(consoleLogins)))
            queryParams.put("console.logins", String.valueOf(consoleLogins))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.class )

    }

    def comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Integer diskSpaceWarnThreshold, Integer diskSpaceErrorThreshold, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(diskSpaceWarnThreshold)))
            queryParams.put("disk.space.warn.threshold", String.valueOf(diskSpaceWarnThreshold))

        if (!"null".equals(String.valueOf(diskSpaceErrorThreshold)))
            queryParams.put("disk.space.error.threshold", String.valueOf(diskSpaceErrorThreshold))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.class )

    }

    def comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.class )

    }

    def comAdobeGraniteRepositoryImplCommitStatsConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, Integer intervalSeconds, Integer commitsPerIntervalThreshold, Integer maxLocationLength, Integer maxDetailsShown, Integer minDetailsPercentage, List<String> threadMatchers, Integer maxGreedyDepth, String greedyStackMatchers, List<String> stackFilters, List<String> stackMatchers, List<String> stackCategorizers, List<String> stackShorteners, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(intervalSeconds)))
            queryParams.put("intervalSeconds", String.valueOf(intervalSeconds))

        if (!"null".equals(String.valueOf(commitsPerIntervalThreshold)))
            queryParams.put("commitsPerIntervalThreshold", String.valueOf(commitsPerIntervalThreshold))

        if (!"null".equals(String.valueOf(maxLocationLength)))
            queryParams.put("maxLocationLength", String.valueOf(maxLocationLength))

        if (!"null".equals(String.valueOf(maxDetailsShown)))
            queryParams.put("maxDetailsShown", String.valueOf(maxDetailsShown))

        if (!"null".equals(String.valueOf(minDetailsPercentage)))
            queryParams.put("minDetailsPercentage", String.valueOf(minDetailsPercentage))

        if (!"null".equals(String.valueOf(threadMatchers)))
            queryParams.put("threadMatchers", String.valueOf(threadMatchers))

        if (!"null".equals(String.valueOf(maxGreedyDepth)))
            queryParams.put("maxGreedyDepth", String.valueOf(maxGreedyDepth))

        if (!"null".equals(String.valueOf(greedyStackMatchers)))
            queryParams.put("greedyStackMatchers", String.valueOf(greedyStackMatchers))

        if (!"null".equals(String.valueOf(stackFilters)))
            queryParams.put("stackFilters", String.valueOf(stackFilters))

        if (!"null".equals(String.valueOf(stackMatchers)))
            queryParams.put("stackMatchers", String.valueOf(stackMatchers))

        if (!"null".equals(String.valueOf(stackCategorizers)))
            queryParams.put("stackCategorizers", String.valueOf(stackCategorizers))

        if (!"null".equals(String.valueOf(stackShorteners)))
            queryParams.put("stackShorteners", String.valueOf(stackShorteners))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.class )

    }

    def comAdobeGraniteRepositoryServiceUserConfiguration ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, Boolean serviceusersSimpleSubjectPopulation, List<String> serviceusersList, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(serviceusersSimpleSubjectPopulation)))
            queryParams.put("serviceusers.simpleSubjectPopulation", String.valueOf(serviceusersSimpleSubjectPopulation))

        if (!"null".equals(String.valueOf(serviceusersList)))
            queryParams.put("serviceusers.list", String.valueOf(serviceusersList))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRepositoryServiceUserConfigurationInfo.class )

    }

    def comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.class )

    }

    def comAdobeGraniteResourcestatusImplCompositeStatusType ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, List<String> types, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(types)))
            queryParams.put("types", String.valueOf(types))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.class )

    }

    def comAdobeGraniteResourcestatusImplStatusResourceProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String providerRoot, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(providerRoot)))
            queryParams.put("provider.root", String.valueOf(providerRoot))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.class )

    }

    def comAdobeGraniteRestAssetsImplAssetContentDispositionFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean mimeAllowEmpty, List<String> mimeAllowed, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mimeAllowEmpty)))
            queryParams.put("mime.allowEmpty", String.valueOf(mimeAllowEmpty))

        if (!"null".equals(String.valueOf(mimeAllowed)))
            queryParams.put("mime.allowed", String.valueOf(mimeAllowed))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.class )

    }

    def comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String providerRoots, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(providerRoots)))
            queryParams.put("provider.roots", String.valueOf(providerRoots))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.class )

    }

    def comAdobeGraniteRestImplServletDefaultGETServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer defaultLimit, Boolean useAbsoluteUri, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(defaultLimit)))
            queryParams.put("default.limit", String.valueOf(defaultLimit))

        if (!"null".equals(String.valueOf(useAbsoluteUri)))
            queryParams.put("use.absolute.uri", String.valueOf(useAbsoluteUri))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteRestImplServletDefaultGETServletInfo.class )

    }

    def comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> hcTags, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.class )

    }

    def comAdobeGraniteSecurityUserUserPropertiesService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String adapterCondition, List<String> graniteUserpropertiesNodetypes, List<String> graniteUserpropertiesResourcetypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(adapterCondition)))
            queryParams.put("adapter.condition", String.valueOf(adapterCondition))

        if (!"null".equals(String.valueOf(graniteUserpropertiesNodetypes)))
            queryParams.put("granite.userproperties.nodetypes", String.valueOf(graniteUserpropertiesNodetypes))

        if (!"null".equals(String.valueOf(graniteUserpropertiesResourcetypes)))
            queryParams.put("granite.userproperties.resourcetypes", String.valueOf(graniteUserpropertiesResourcetypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.class )

    }

    def comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String group2memberRelationshipOutgoing, List<String> group2memberExcludedOutgoing, String group2memberRelationshipIncoming, List<String> group2memberExcludedIncoming, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(group2memberRelationshipOutgoing)))
            queryParams.put("group2member.relationship.outgoing", String.valueOf(group2memberRelationshipOutgoing))

        if (!"null".equals(String.valueOf(group2memberExcludedOutgoing)))
            queryParams.put("group2member.excluded.outgoing", String.valueOf(group2memberExcludedOutgoing))

        if (!"null".equals(String.valueOf(group2memberRelationshipIncoming)))
            queryParams.put("group2member.relationship.incoming", String.valueOf(group2memberRelationshipIncoming))

        if (!"null".equals(String.valueOf(group2memberExcludedIncoming)))
            queryParams.put("group2member.excluded.incoming", String.valueOf(group2memberExcludedIncoming))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.class )

    }

    def comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, String jmxObjectname, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        if (!"null".equals(String.valueOf(jmxObjectname)))
            queryParams.put("jmx.objectname", String.valueOf(jmxObjectname))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.class )

    }

    def comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String adapterCondition, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(adapterCondition)))
            queryParams.put("adapter.condition", String.valueOf(adapterCondition))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.class )

    }

    def comAdobeGraniteTaskmanagementImplJcrTaskArchiveService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean archivingEnabled, String schedulerExpression, Integer archiveSinceDaysCompleted, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(archivingEnabled)))
            queryParams.put("archiving.enabled", String.valueOf(archivingEnabled))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        if (!"null".equals(String.valueOf(archiveSinceDaysCompleted)))
            queryParams.put("archive.since.days.completed", String.valueOf(archiveSinceDaysCompleted))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.class )

    }

    def comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean purgeCompleted, Integer completedAge, Boolean purgeActive, Integer activeAge, Integer saveThreshold, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(purgeCompleted)))
            queryParams.put("purgeCompleted", String.valueOf(purgeCompleted))

        if (!"null".equals(String.valueOf(completedAge)))
            queryParams.put("completedAge", String.valueOf(completedAge))

        if (!"null".equals(String.valueOf(purgeActive)))
            queryParams.put("purgeActive", String.valueOf(purgeActive))

        if (!"null".equals(String.valueOf(activeAge)))
            queryParams.put("activeAge", String.valueOf(activeAge))

        if (!"null".equals(String.valueOf(saveThreshold)))
            queryParams.put("saveThreshold", String.valueOf(saveThreshold))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.class )

    }

    def comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String adapterCondition, List<String> taskmanagerAdmingroups, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(adapterCondition)))
            queryParams.put("adapter.condition", String.valueOf(adapterCondition))

        if (!"null".equals(String.valueOf(taskmanagerAdmingroups)))
            queryParams.put("taskmanager.admingroups", String.valueOf(taskmanagerAdmingroups))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.class )

    }

    def comAdobeGraniteThreaddumpThreadDumpCollector ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer schedulerPeriod, String schedulerRunOn, Boolean graniteThreaddumpEnabled, Integer graniteThreaddumpDumpsPerFile, Boolean graniteThreaddumpEnableGzipCompression, Boolean graniteThreaddumpEnableDirectoriesCompression, Boolean graniteThreaddumpEnableJStack, Integer graniteThreaddumpMaxBackupDays, String graniteThreaddumpBackupCleanTrigger, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerPeriod)))
            queryParams.put("scheduler.period", String.valueOf(schedulerPeriod))

        if (!"null".equals(String.valueOf(schedulerRunOn)))
            queryParams.put("scheduler.runOn", String.valueOf(schedulerRunOn))

        if (!"null".equals(String.valueOf(graniteThreaddumpEnabled)))
            queryParams.put("granite.threaddump.enabled", String.valueOf(graniteThreaddumpEnabled))

        if (!"null".equals(String.valueOf(graniteThreaddumpDumpsPerFile)))
            queryParams.put("granite.threaddump.dumpsPerFile", String.valueOf(graniteThreaddumpDumpsPerFile))

        if (!"null".equals(String.valueOf(graniteThreaddumpEnableGzipCompression)))
            queryParams.put("granite.threaddump.enableGzipCompression", String.valueOf(graniteThreaddumpEnableGzipCompression))

        if (!"null".equals(String.valueOf(graniteThreaddumpEnableDirectoriesCompression)))
            queryParams.put("granite.threaddump.enableDirectoriesCompression", String.valueOf(graniteThreaddumpEnableDirectoriesCompression))

        if (!"null".equals(String.valueOf(graniteThreaddumpEnableJStack)))
            queryParams.put("granite.threaddump.enableJStack", String.valueOf(graniteThreaddumpEnableJStack))

        if (!"null".equals(String.valueOf(graniteThreaddumpMaxBackupDays)))
            queryParams.put("granite.threaddump.maxBackupDays", String.valueOf(graniteThreaddumpMaxBackupDays))

        if (!"null".equals(String.valueOf(graniteThreaddumpBackupCleanTrigger)))
            queryParams.put("granite.threaddump.backupCleanTrigger", String.valueOf(graniteThreaddumpBackupCleanTrigger))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.class )

    }

    def comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String translationFactory, String defaultConnectorLabel, String defaultConnectorAttribution, String defaultConnectorWorkspaceId, String defaultConnectorSubscriptionKey, String languageMapLocation, String categoryMapLocation, Integer retryAttempts, Integer timeoutCount, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(translationFactory)))
            queryParams.put("translationFactory", String.valueOf(translationFactory))

        if (!"null".equals(String.valueOf(defaultConnectorLabel)))
            queryParams.put("defaultConnectorLabel", String.valueOf(defaultConnectorLabel))

        if (!"null".equals(String.valueOf(defaultConnectorAttribution)))
            queryParams.put("defaultConnectorAttribution", String.valueOf(defaultConnectorAttribution))

        if (!"null".equals(String.valueOf(defaultConnectorWorkspaceId)))
            queryParams.put("defaultConnectorWorkspaceId", String.valueOf(defaultConnectorWorkspaceId))

        if (!"null".equals(String.valueOf(defaultConnectorSubscriptionKey)))
            queryParams.put("defaultConnectorSubscriptionKey", String.valueOf(defaultConnectorSubscriptionKey))

        if (!"null".equals(String.valueOf(languageMapLocation)))
            queryParams.put("languageMapLocation", String.valueOf(languageMapLocation))

        if (!"null".equals(String.valueOf(categoryMapLocation)))
            queryParams.put("categoryMapLocation", String.valueOf(categoryMapLocation))

        if (!"null".equals(String.valueOf(retryAttempts)))
            queryParams.put("retryAttempts", String.valueOf(retryAttempts))

        if (!"null".equals(String.valueOf(timeoutCount)))
            queryParams.put("timeoutCount", String.valueOf(timeoutCount))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.class )

    }

    def comAdobeGraniteTranslationCoreImplTranslationManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String defaultConnectorName, String defaultCategory, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(defaultConnectorName)))
            queryParams.put("defaultConnectorName", String.valueOf(defaultConnectorName))

        if (!"null".equals(String.valueOf(defaultCategory)))
            queryParams.put("defaultCategory", String.valueOf(defaultCategory))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.class )

    }

    def comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean htmllibmanagerTiming, String htmllibmanagerDebugInitJs, Boolean htmllibmanagerMinify, Boolean htmllibmanagerDebug, Boolean htmllibmanagerGzip, Integer htmllibmanagerMaxDataUriSize, Integer htmllibmanagerMaxage, Boolean htmllibmanagerForceCQUrlInfo, String htmllibmanagerDefaultthemename, String htmllibmanagerDefaultuserthemename, String htmllibmanagerClientmanager, List<String> htmllibmanagerPathList, List<String> htmllibmanagerExcludedPathList, List<String> htmllibmanagerProcessorJs, List<String> htmllibmanagerProcessorCss, List<String> htmllibmanagerLongcachePatterns, String htmllibmanagerLongcacheFormat, Boolean htmllibmanagerUseFileSystemOutputCache, String htmllibmanagerFileSystemOutputCacheLocation, List<String> htmllibmanagerDisableReplacement, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(htmllibmanagerTiming)))
            queryParams.put("htmllibmanager.timing", String.valueOf(htmllibmanagerTiming))

        if (!"null".equals(String.valueOf(htmllibmanagerDebugInitJs)))
            queryParams.put("htmllibmanager.debug.init.js", String.valueOf(htmllibmanagerDebugInitJs))

        if (!"null".equals(String.valueOf(htmllibmanagerMinify)))
            queryParams.put("htmllibmanager.minify", String.valueOf(htmllibmanagerMinify))

        if (!"null".equals(String.valueOf(htmllibmanagerDebug)))
            queryParams.put("htmllibmanager.debug", String.valueOf(htmllibmanagerDebug))

        if (!"null".equals(String.valueOf(htmllibmanagerGzip)))
            queryParams.put("htmllibmanager.gzip", String.valueOf(htmllibmanagerGzip))

        if (!"null".equals(String.valueOf(htmllibmanagerMaxDataUriSize)))
            queryParams.put("htmllibmanager.maxDataUriSize", String.valueOf(htmllibmanagerMaxDataUriSize))

        if (!"null".equals(String.valueOf(htmllibmanagerMaxage)))
            queryParams.put("htmllibmanager.maxage", String.valueOf(htmllibmanagerMaxage))

        if (!"null".equals(String.valueOf(htmllibmanagerForceCQUrlInfo)))
            queryParams.put("htmllibmanager.forceCQUrlInfo", String.valueOf(htmllibmanagerForceCQUrlInfo))

        if (!"null".equals(String.valueOf(htmllibmanagerDefaultthemename)))
            queryParams.put("htmllibmanager.defaultthemename", String.valueOf(htmllibmanagerDefaultthemename))

        if (!"null".equals(String.valueOf(htmllibmanagerDefaultuserthemename)))
            queryParams.put("htmllibmanager.defaultuserthemename", String.valueOf(htmllibmanagerDefaultuserthemename))

        if (!"null".equals(String.valueOf(htmllibmanagerClientmanager)))
            queryParams.put("htmllibmanager.clientmanager", String.valueOf(htmllibmanagerClientmanager))

        if (!"null".equals(String.valueOf(htmllibmanagerPathList)))
            queryParams.put("htmllibmanager.path.list", String.valueOf(htmllibmanagerPathList))

        if (!"null".equals(String.valueOf(htmllibmanagerExcludedPathList)))
            queryParams.put("htmllibmanager.excluded.path.list", String.valueOf(htmllibmanagerExcludedPathList))

        if (!"null".equals(String.valueOf(htmllibmanagerProcessorJs)))
            queryParams.put("htmllibmanager.processor.js", String.valueOf(htmllibmanagerProcessorJs))

        if (!"null".equals(String.valueOf(htmllibmanagerProcessorCss)))
            queryParams.put("htmllibmanager.processor.css", String.valueOf(htmllibmanagerProcessorCss))

        if (!"null".equals(String.valueOf(htmllibmanagerLongcachePatterns)))
            queryParams.put("htmllibmanager.longcache.patterns", String.valueOf(htmllibmanagerLongcachePatterns))

        if (!"null".equals(String.valueOf(htmllibmanagerLongcacheFormat)))
            queryParams.put("htmllibmanager.longcache.format", String.valueOf(htmllibmanagerLongcacheFormat))

        if (!"null".equals(String.valueOf(htmllibmanagerUseFileSystemOutputCache)))
            queryParams.put("htmllibmanager.useFileSystemOutputCache", String.valueOf(htmllibmanagerUseFileSystemOutputCache))

        if (!"null".equals(String.valueOf(htmllibmanagerFileSystemOutputCacheLocation)))
            queryParams.put("htmllibmanager.fileSystemOutputCacheLocation", String.valueOf(htmllibmanagerFileSystemOutputCacheLocation))

        if (!"null".equals(String.valueOf(htmllibmanagerDisableReplacement)))
            queryParams.put("htmllibmanager.disable.replacement", String.valueOf(htmllibmanagerDisableReplacement))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.class )

    }

    def comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.class )

    }

    def comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean graniteWorkflowWorkflowPublishEventServiceEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(graniteWorkflowWorkflowPublishEventServiceEnabled)))
            queryParams.put("granite.workflow.WorkflowPublishEventService.enabled", String.valueOf(graniteWorkflowWorkflowPublishEventServiceEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.class )

    }

    def comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer bucketSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(bucketSize)))
            queryParams.put("bucketSize", String.valueOf(bucketSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.class )

    }

    def comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer defaultTimeout, Integer maxTimeout, Integer defaultPeriod, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(defaultTimeout)))
            queryParams.put("default.timeout", String.valueOf(defaultTimeout))

        if (!"null".equals(String.valueOf(maxTimeout)))
            queryParams.put("max.timeout", String.valueOf(maxTimeout))

        if (!"null".equals(String.valueOf(defaultPeriod)))
            queryParams.put("default.period", String.valueOf(defaultPeriod))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.class )

    }

    def comAdobeGraniteWorkflowCoreJobJobHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> jobTopics, Boolean allowSelfProcessTermination, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jobTopics)))
            queryParams.put("job.topics", String.valueOf(jobTopics))

        if (!"null".equals(String.valueOf(allowSelfProcessTermination)))
            queryParams.put("allow.self.process.termination", String.valueOf(allowSelfProcessTermination))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.class )

    }

    def comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String jobTopics, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jobTopics)))
            queryParams.put("job.topics", String.valueOf(jobTopics))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.class )

    }

    def comAdobeGraniteWorkflowCorePayloadMapCache ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> getSystemWorkflowModels, String getPackageRootPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(getSystemWorkflowModels)))
            queryParams.put("getSystemWorkflowModels", String.valueOf(getSystemWorkflowModels))

        if (!"null".equals(String.valueOf(getPackageRootPath)))
            queryParams.put("getPackageRootPath", String.valueOf(getPackageRootPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.class )

    }

    def comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> payloadMoveWhiteList, Boolean payloadMoveHandleFromWorkflowProcess, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(payloadMoveWhiteList)))
            queryParams.put("payload.move.white.list", String.valueOf(payloadMoveWhiteList))

        if (!"null".equals(String.valueOf(payloadMoveHandleFromWorkflowProcess)))
            queryParams.put("payload.move.handle.from.workflow.process", String.valueOf(payloadMoveHandleFromWorkflowProcess))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.class )

    }

    def comAdobeGraniteWorkflowCoreWorkflowConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqWorkflowConfigWorkflowPackagesRootPath, Boolean cqWorkflowConfigWorkflowProcessLegacyMode, Boolean cqWorkflowConfigAllowLocking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqWorkflowConfigWorkflowPackagesRootPath)))
            queryParams.put("cq.workflow.config.workflow.packages.root.path", String.valueOf(cqWorkflowConfigWorkflowPackagesRootPath))

        if (!"null".equals(String.valueOf(cqWorkflowConfigWorkflowProcessLegacyMode)))
            queryParams.put("cq.workflow.config.workflow.process.legacy.mode", String.valueOf(cqWorkflowConfigWorkflowProcessLegacyMode))

        if (!"null".equals(String.valueOf(cqWorkflowConfigAllowLocking)))
            queryParams.put("cq.workflow.config.allow.locking", String.valueOf(cqWorkflowConfigAllowLocking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.class )

    }

    def comAdobeGraniteWorkflowCoreWorkflowSessionFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String graniteWorkflowinboxSortPropertyName, String graniteWorkflowinboxSortOrder, Integer cqWorkflowJobRetry, List<String> cqWorkflowSuperuser, Integer graniteWorkflowInboxQuerySize, Boolean graniteWorkflowAdminUserGroupFilter, Boolean graniteWorkflowEnforceWorkitemAssigneePermissions, Boolean graniteWorkflowEnforceWorkflowInitiatorPermissions, Boolean graniteWorkflowInjectTenantIdInJobTopics, Integer graniteWorkflowMaxPurgeSaveThreshold, Integer graniteWorkflowMaxPurgeQueryCount, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(graniteWorkflowinboxSortPropertyName)))
            queryParams.put("granite.workflowinbox.sort.propertyName", String.valueOf(graniteWorkflowinboxSortPropertyName))

        if (!"null".equals(String.valueOf(graniteWorkflowinboxSortOrder)))
            queryParams.put("granite.workflowinbox.sort.order", String.valueOf(graniteWorkflowinboxSortOrder))

        if (!"null".equals(String.valueOf(cqWorkflowJobRetry)))
            queryParams.put("cq.workflow.job.retry", String.valueOf(cqWorkflowJobRetry))

        if (!"null".equals(String.valueOf(cqWorkflowSuperuser)))
            queryParams.put("cq.workflow.superuser", String.valueOf(cqWorkflowSuperuser))

        if (!"null".equals(String.valueOf(graniteWorkflowInboxQuerySize)))
            queryParams.put("granite.workflow.inboxQuerySize", String.valueOf(graniteWorkflowInboxQuerySize))

        if (!"null".equals(String.valueOf(graniteWorkflowAdminUserGroupFilter)))
            queryParams.put("granite.workflow.adminUserGroupFilter", String.valueOf(graniteWorkflowAdminUserGroupFilter))

        if (!"null".equals(String.valueOf(graniteWorkflowEnforceWorkitemAssigneePermissions)))
            queryParams.put("granite.workflow.enforceWorkitemAssigneePermissions", String.valueOf(graniteWorkflowEnforceWorkitemAssigneePermissions))

        if (!"null".equals(String.valueOf(graniteWorkflowEnforceWorkflowInitiatorPermissions)))
            queryParams.put("granite.workflow.enforceWorkflowInitiatorPermissions", String.valueOf(graniteWorkflowEnforceWorkflowInitiatorPermissions))

        if (!"null".equals(String.valueOf(graniteWorkflowInjectTenantIdInJobTopics)))
            queryParams.put("granite.workflow.injectTenantIdInJobTopics", String.valueOf(graniteWorkflowInjectTenantIdInJobTopics))

        if (!"null".equals(String.valueOf(graniteWorkflowMaxPurgeSaveThreshold)))
            queryParams.put("granite.workflow.maxPurgeSaveThreshold", String.valueOf(graniteWorkflowMaxPurgeSaveThreshold))

        if (!"null".equals(String.valueOf(graniteWorkflowMaxPurgeQueryCount)))
            queryParams.put("granite.workflow.maxPurgeQueryCount", String.valueOf(graniteWorkflowMaxPurgeQueryCount))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.class )

    }

    def comAdobeGraniteWorkflowPurgeScheduler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String scheduledpurgeName, String scheduledpurgeWorkflowStatus, List<String> scheduledpurgeModelIds, Integer scheduledpurgeDaysold, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(scheduledpurgeName)))
            queryParams.put("scheduledpurge.name", String.valueOf(scheduledpurgeName))

        if (!"null".equals(String.valueOf(scheduledpurgeWorkflowStatus)))
            queryParams.put("scheduledpurge.workflowStatus", String.valueOf(scheduledpurgeWorkflowStatus))

        if (!"null".equals(String.valueOf(scheduledpurgeModelIds)))
            queryParams.put("scheduledpurge.modelIds", String.valueOf(scheduledpurgeModelIds))

        if (!"null".equals(String.valueOf(scheduledpurgeDaysold)))
            queryParams.put("scheduledpurge.daysold", String.valueOf(scheduledpurgeDaysold))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeGraniteWorkflowPurgeSchedulerInfo.class )

    }

    def comAdobeOctopusNcommBootstrap ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxConnections, Integer maxRequests, Integer requestTimeout, Integer requestRetries, Integer launchTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxConnections)))
            queryParams.put("maxConnections", String.valueOf(maxConnections))

        if (!"null".equals(String.valueOf(maxRequests)))
            queryParams.put("maxRequests", String.valueOf(maxRequests))

        if (!"null".equals(String.valueOf(requestTimeout)))
            queryParams.put("requestTimeout", String.valueOf(requestTimeout))

        if (!"null".equals(String.valueOf(requestRetries)))
            queryParams.put("requestRetries", String.valueOf(requestRetries))

        if (!"null".equals(String.valueOf(launchTimeout)))
            queryParams.put("launchTimeout", String.valueOf(launchTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeOctopusNcommBootstrapInfo.class )

    }

    def comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String communitiesIntegrationLivefyreSlingEventFilter, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(communitiesIntegrationLivefyreSlingEventFilter)))
            queryParams.put("communities.integration.livefyre.sling.event.filter", String.valueOf(communitiesIntegrationLivefyreSlingEventFilter))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.class )

    }

    def comAdobeXmpWorkerFilesNcommXMPFilesNComm ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String maxConnections, String maxRequests, String requestTimeout, String logDir, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxConnections)))
            queryParams.put("maxConnections", String.valueOf(maxConnections))

        if (!"null".equals(String.valueOf(maxRequests)))
            queryParams.put("maxRequests", String.valueOf(maxRequests))

        if (!"null".equals(String.valueOf(requestTimeout)))
            queryParams.put("requestTimeout", String.valueOf(requestTimeout))

        if (!"null".equals(String.valueOf(logDir)))
            queryParams.put("logDir", String.valueOf(logDir))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.class )

    }

    def comDayCommonsDatasourceJdbcpoolJdbcPoolService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String jdbcDriverClass, String jdbcConnectionUri, String jdbcUsername, String jdbcPassword, String jdbcValidationQuery, Boolean defaultReadonly, Boolean defaultAutocommit, Integer poolSize, Integer poolMaxWaitMsec, String datasourceName, List<String> datasourceSvcProperties, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jdbcDriverClass)))
            queryParams.put("jdbc.driver.class", String.valueOf(jdbcDriverClass))

        if (!"null".equals(String.valueOf(jdbcConnectionUri)))
            queryParams.put("jdbc.connection.uri", String.valueOf(jdbcConnectionUri))

        if (!"null".equals(String.valueOf(jdbcUsername)))
            queryParams.put("jdbc.username", String.valueOf(jdbcUsername))

        if (!"null".equals(String.valueOf(jdbcPassword)))
            queryParams.put("jdbc.password", String.valueOf(jdbcPassword))

        if (!"null".equals(String.valueOf(jdbcValidationQuery)))
            queryParams.put("jdbc.validation.query", String.valueOf(jdbcValidationQuery))

        if (!"null".equals(String.valueOf(defaultReadonly)))
            queryParams.put("default.readonly", String.valueOf(defaultReadonly))

        if (!"null".equals(String.valueOf(defaultAutocommit)))
            queryParams.put("default.autocommit", String.valueOf(defaultAutocommit))

        if (!"null".equals(String.valueOf(poolSize)))
            queryParams.put("pool.size", String.valueOf(poolSize))

        if (!"null".equals(String.valueOf(poolMaxWaitMsec)))
            queryParams.put("pool.max.wait.msec", String.valueOf(poolMaxWaitMsec))

        if (!"null".equals(String.valueOf(datasourceName)))
            queryParams.put("datasource.name", String.valueOf(datasourceName))

        if (!"null".equals(String.valueOf(datasourceSvcProperties)))
            queryParams.put("datasource.svc.properties", String.valueOf(datasourceSvcProperties))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.class )

    }

    def comDayCommonsHttpclient ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean proxyEnabled, String proxyHost, String proxyUser, String proxyPassword, String proxyNtlmHost, String proxyNtlmDomain, List<String> proxyExceptions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.commons.httpclient"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(proxyEnabled)))
            queryParams.put("proxy.enabled", String.valueOf(proxyEnabled))

        if (!"null".equals(String.valueOf(proxyHost)))
            queryParams.put("proxy.host", String.valueOf(proxyHost))

        if (!"null".equals(String.valueOf(proxyUser)))
            queryParams.put("proxy.user", String.valueOf(proxyUser))

        if (!"null".equals(String.valueOf(proxyPassword)))
            queryParams.put("proxy.password", String.valueOf(proxyPassword))

        if (!"null".equals(String.valueOf(proxyNtlmHost)))
            queryParams.put("proxy.ntlm.host", String.valueOf(proxyNtlmHost))

        if (!"null".equals(String.valueOf(proxyNtlmDomain)))
            queryParams.put("proxy.ntlm.domain", String.valueOf(proxyNtlmDomain))

        if (!"null".equals(String.valueOf(proxyExceptions)))
            queryParams.put("proxy.exceptions", String.valueOf(proxyExceptions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCommonsHttpclientInfo.class )

    }

    def comDayCqAnalyticsImplStorePropertiesChangeListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqStoreListenerAdditionalStorePaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqStoreListenerAdditionalStorePaths)))
            queryParams.put("cq.store.listener.additionalStorePaths", String.valueOf(cqStoreListenerAdditionalStorePaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.class )

    }

    def comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> allowedPaths, Integer cqAnalyticsSaintExporterPagesize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(allowedPaths)))
            queryParams.put("allowed.paths", String.valueOf(allowedPaths))

        if (!"null".equals(String.valueOf(cqAnalyticsSaintExporterPagesize)))
            queryParams.put("cq.analytics.saint.exporter.pagesize", String.valueOf(cqAnalyticsSaintExporterPagesize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.class )

    }

    def comDayCqAnalyticsSitecatalystImplImporterReportImporter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer reportFetchAttempts, Integer reportFetchDelay, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(reportFetchAttempts)))
            queryParams.put("report.fetch.attempts", String.valueOf(reportFetchAttempts))

        if (!"null".equals(String.valueOf(reportFetchDelay)))
            queryParams.put("report.fetch.delay", String.valueOf(reportFetchDelay))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.class )

    }

    def comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqAnalyticsAdapterfactoryContextstores, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAnalyticsAdapterfactoryContextstores)))
            queryParams.put("cq.analytics.adapterfactory.contextstores", String.valueOf(cqAnalyticsAdapterfactoryContextstores))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.class )

    }

    def comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqAnalyticsSitecatalystServiceDatacenterUrl, List<String> devhostnamepatterns, Integer connectionTimeout, Integer socketTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAnalyticsSitecatalystServiceDatacenterUrl)))
            queryParams.put("cq.analytics.sitecatalyst.service.datacenter.url", String.valueOf(cqAnalyticsSitecatalystServiceDatacenterUrl))

        if (!"null".equals(String.valueOf(devhostnamepatterns)))
            queryParams.put("devhostnamepatterns", String.valueOf(devhostnamepatterns))

        if (!"null".equals(String.valueOf(connectionTimeout)))
            queryParams.put("connection.timeout", String.valueOf(connectionTimeout))

        if (!"null".equals(String.valueOf(socketTimeout)))
            queryParams.put("socket.timeout", String.valueOf(socketTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.class )

    }

    def comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqAnalyticsTestandtargetAccountoptionsupdaterEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAnalyticsTestandtargetAccountoptionsupdaterEnabled)))
            queryParams.put("cq.analytics.testandtarget.accountoptionsupdater.enabled", String.valueOf(cqAnalyticsTestandtargetAccountoptionsupdaterEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.class )

    }

    def comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled)))
            queryParams.put("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled", String.valueOf(cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.class )

    }

    def comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled)))
            queryParams.put("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled", String.valueOf(cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.class )

    }

    def comDayCqAnalyticsTestandtargetImplSegmentImporter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqAnalyticsTestandtargetSegmentimporterEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAnalyticsTestandtargetSegmentimporterEnabled)))
            queryParams.put("cq.analytics.testandtarget.segmentimporter.enabled", String.valueOf(cqAnalyticsTestandtargetSegmentimporterEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.class )

    }

    def comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String endpointUri, Integer connectionTimeout, Integer socketTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(endpointUri)))
            queryParams.put("endpointUri", String.valueOf(endpointUri))

        if (!"null".equals(String.valueOf(connectionTimeout)))
            queryParams.put("connectionTimeout", String.valueOf(connectionTimeout))

        if (!"null".equals(String.valueOf(socketTimeout)))
            queryParams.put("socketTimeout", String.valueOf(socketTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.class )

    }

    def comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String testandtargetEndpointUrl, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(testandtargetEndpointUrl)))
            queryParams.put("testandtarget.endpoint.url", String.valueOf(testandtargetEndpointUrl))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.class )

    }

    def comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String cqAnalyticsTestandtargetApiUrl, Integer cqAnalyticsTestandtargetTimeout, Integer cqAnalyticsTestandtargetSockettimeout, String cqAnalyticsTestandtargetRecommendationsUrlReplace, String cqAnalyticsTestandtargetRecommendationsUrlReplacewith, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAnalyticsTestandtargetApiUrl)))
            queryParams.put("cq.analytics.testandtarget.api.url", String.valueOf(cqAnalyticsTestandtargetApiUrl))

        if (!"null".equals(String.valueOf(cqAnalyticsTestandtargetTimeout)))
            queryParams.put("cq.analytics.testandtarget.timeout", String.valueOf(cqAnalyticsTestandtargetTimeout))

        if (!"null".equals(String.valueOf(cqAnalyticsTestandtargetSockettimeout)))
            queryParams.put("cq.analytics.testandtarget.sockettimeout", String.valueOf(cqAnalyticsTestandtargetSockettimeout))

        if (!"null".equals(String.valueOf(cqAnalyticsTestandtargetRecommendationsUrlReplace)))
            queryParams.put("cq.analytics.testandtarget.recommendations.url.replace", String.valueOf(cqAnalyticsTestandtargetRecommendationsUrlReplace))

        if (!"null".equals(String.valueOf(cqAnalyticsTestandtargetRecommendationsUrlReplacewith)))
            queryParams.put("cq.analytics.testandtarget.recommendations.url.replacewith", String.valueOf(cqAnalyticsTestandtargetRecommendationsUrlReplacewith))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.class )

    }

    def comDayCqAuthImplCugCugSupportImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cugExemptedPrincipals, Boolean cugEnabled, String cugPrincipalsRegex, String cugPrincipalsReplacement, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cugExemptedPrincipals)))
            queryParams.put("cug.exempted.principals", String.valueOf(cugExemptedPrincipals))

        if (!"null".equals(String.valueOf(cugEnabled)))
            queryParams.put("cug.enabled", String.valueOf(cugEnabled))

        if (!"null".equals(String.valueOf(cugPrincipalsRegex)))
            queryParams.put("cug.principals.regex", String.valueOf(cugPrincipalsRegex))

        if (!"null".equals(String.valueOf(cugPrincipalsReplacement)))
            queryParams.put("cug.principals.replacement", String.valueOf(cugPrincipalsReplacement))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAuthImplCugCugSupportImplInfo.class )

    }

    def comDayCqAuthImplLoginSelectorHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String path, Integer serviceRanking, List<String> authLoginselectorMappings, List<String> authLoginselectorChangepwMappings, String authLoginselectorDefaultloginpage, String authLoginselectorDefaultchangepwpage, List<String> authLoginselectorHandle, Boolean authLoginselectorHandleAllExtensions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(authLoginselectorMappings)))
            queryParams.put("auth.loginselector.mappings", String.valueOf(authLoginselectorMappings))

        if (!"null".equals(String.valueOf(authLoginselectorChangepwMappings)))
            queryParams.put("auth.loginselector.changepw.mappings", String.valueOf(authLoginselectorChangepwMappings))

        if (!"null".equals(String.valueOf(authLoginselectorDefaultloginpage)))
            queryParams.put("auth.loginselector.defaultloginpage", String.valueOf(authLoginselectorDefaultloginpage))

        if (!"null".equals(String.valueOf(authLoginselectorDefaultchangepwpage)))
            queryParams.put("auth.loginselector.defaultchangepwpage", String.valueOf(authLoginselectorDefaultchangepwpage))

        if (!"null".equals(String.valueOf(authLoginselectorHandle)))
            queryParams.put("auth.loginselector.handle", String.valueOf(authLoginselectorHandle))

        if (!"null".equals(String.valueOf(authLoginselectorHandleAllExtensions)))
            queryParams.put("auth.loginselector.handle.all.extensions", String.valueOf(authLoginselectorHandleAllExtensions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqAuthImplLoginSelectorHandlerInfo.class )

    }

    def comDayCqCommonsImplExternalizerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> externalizerDomains, String externalizerHost, String externalizerContextpath, Boolean externalizerEncodedpath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(externalizerDomains)))
            queryParams.put("externalizer.domains", String.valueOf(externalizerDomains))

        if (!"null".equals(String.valueOf(externalizerHost)))
            queryParams.put("externalizer.host", String.valueOf(externalizerHost))

        if (!"null".equals(String.valueOf(externalizerContextpath)))
            queryParams.put("externalizer.contextpath", String.valueOf(externalizerContextpath))

        if (!"null".equals(String.valueOf(externalizerEncodedpath)))
            queryParams.put("externalizer.encodedpath", String.valueOf(externalizerEncodedpath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqCommonsImplExternalizerImplInfo.class )

    }

    def comDayCqCommonsServletsRootMappingServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String rootmappingTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(rootmappingTarget)))
            queryParams.put("rootmapping.target", String.valueOf(rootmappingTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqCommonsServletsRootMappingServletInfo.class )

    }

    def comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> codeupgradetasks, List<String> codeupgradetaskfilters, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(codeupgradetasks)))
            queryParams.put("codeupgradetasks", String.valueOf(codeupgradetasks))

        if (!"null".equals(String.valueOf(codeupgradetaskfilters)))
            queryParams.put("codeupgradetaskfilters", String.valueOf(codeupgradetaskfilters))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.class )

    }

    def comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> upgradeTaskIgnoreList, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(upgradeTaskIgnoreList)))
            queryParams.put("upgradeTaskIgnoreList", String.valueOf(upgradeTaskIgnoreList))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.class )

    }

    def comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String effectiveBundleListPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(effectiveBundleListPath)))
            queryParams.put("effectiveBundleListPath", String.valueOf(effectiveBundleListPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.class )

    }

    def comDayCqContentsyncImplContentSyncManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String contentsyncFallbackAuthorizable, String contentsyncFallbackUpdateuser, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(contentsyncFallbackAuthorizable)))
            queryParams.put("contentsync.fallback.authorizable", String.valueOf(contentsyncFallbackAuthorizable))

        if (!"null".equals(String.valueOf(contentsyncFallbackUpdateuser)))
            queryParams.put("contentsync.fallback.updateuser", String.valueOf(contentsyncFallbackUpdateuser))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqContentsyncImplContentSyncManagerImplInfo.class )

    }

    def comDayCqDamCommonsHandlerStandardImageHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer largeFileThreshold, Integer largeCommentThreshold, Boolean cqDamEnableExtMetaExtraction, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(largeFileThreshold)))
            queryParams.put("large_file_threshold", String.valueOf(largeFileThreshold))

        if (!"null".equals(String.valueOf(largeCommentThreshold)))
            queryParams.put("large_comment_threshold", String.valueOf(largeCommentThreshold))

        if (!"null".equals(String.valueOf(cqDamEnableExtMetaExtraction)))
            queryParams.put("cq.dam.enable.ext.meta.extraction", String.valueOf(cqDamEnableExtMetaExtraction))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCommonsHandlerStandardImageHandlerInfo.class )

    }

    def comDayCqDamCommonsMetadataXmpFilterBlackWhite ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean xmpFilterApplyWhitelist, List<String> xmpFilterWhitelist, Boolean xmpFilterApplyBlacklist, List<String> xmpFilterBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(xmpFilterApplyWhitelist)))
            queryParams.put("xmp.filter.apply_whitelist", String.valueOf(xmpFilterApplyWhitelist))

        if (!"null".equals(String.valueOf(xmpFilterWhitelist)))
            queryParams.put("xmp.filter.whitelist", String.valueOf(xmpFilterWhitelist))

        if (!"null".equals(String.valueOf(xmpFilterApplyBlacklist)))
            queryParams.put("xmp.filter.apply_blacklist", String.valueOf(xmpFilterApplyBlacklist))

        if (!"null".equals(String.valueOf(xmpFilterBlacklist)))
            queryParams.put("xmp.filter.blacklist", String.valueOf(xmpFilterBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.class )

    }

    def comDayCqDamCommonsUtilImplAssetCacheImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer largeFileMin, Boolean cacheApply, List<String> mimeTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(largeFileMin)))
            queryParams.put("large.file.min", String.valueOf(largeFileMin))

        if (!"null".equals(String.valueOf(cacheApply)))
            queryParams.put("cache.apply", String.valueOf(cacheApply))

        if (!"null".equals(String.valueOf(mimeTypes)))
            queryParams.put("mime.types", String.valueOf(mimeTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCommonsUtilImplAssetCacheImplInfo.class )

    }

    def comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqDamConfigAnnotationPdfDocumentWidth, Integer cqDamConfigAnnotationPdfDocumentHeight, Integer cqDamConfigAnnotationPdfDocumentPaddingHorizontal, Integer cqDamConfigAnnotationPdfDocumentPaddingVertical, Integer cqDamConfigAnnotationPdfFontSize, String cqDamConfigAnnotationPdfFontColor, String cqDamConfigAnnotationPdfFontFamily, String cqDamConfigAnnotationPdfFontLight, Integer cqDamConfigAnnotationPdfMarginTextImage, Integer cqDamConfigAnnotationPdfMinImageHeight, Integer cqDamConfigAnnotationPdfReviewStatusWidth, String cqDamConfigAnnotationPdfReviewStatusColorApproved, String cqDamConfigAnnotationPdfReviewStatusColorRejected, String cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, Integer cqDamConfigAnnotationPdfAnnotationMarkerWidth, Integer cqDamConfigAnnotationPdfAssetMinheight, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfDocumentWidth)))
            queryParams.put("cq.dam.config.annotation.pdf.document.width", String.valueOf(cqDamConfigAnnotationPdfDocumentWidth))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfDocumentHeight)))
            queryParams.put("cq.dam.config.annotation.pdf.document.height", String.valueOf(cqDamConfigAnnotationPdfDocumentHeight))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfDocumentPaddingHorizontal)))
            queryParams.put("cq.dam.config.annotation.pdf.document.padding.horizontal", String.valueOf(cqDamConfigAnnotationPdfDocumentPaddingHorizontal))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfDocumentPaddingVertical)))
            queryParams.put("cq.dam.config.annotation.pdf.document.padding.vertical", String.valueOf(cqDamConfigAnnotationPdfDocumentPaddingVertical))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfFontSize)))
            queryParams.put("cq.dam.config.annotation.pdf.font.size", String.valueOf(cqDamConfigAnnotationPdfFontSize))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfFontColor)))
            queryParams.put("cq.dam.config.annotation.pdf.font.color", String.valueOf(cqDamConfigAnnotationPdfFontColor))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfFontFamily)))
            queryParams.put("cq.dam.config.annotation.pdf.font.family", String.valueOf(cqDamConfigAnnotationPdfFontFamily))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfFontLight)))
            queryParams.put("cq.dam.config.annotation.pdf.font.light", String.valueOf(cqDamConfigAnnotationPdfFontLight))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfMarginTextImage)))
            queryParams.put("cq.dam.config.annotation.pdf.marginTextImage", String.valueOf(cqDamConfigAnnotationPdfMarginTextImage))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfMinImageHeight)))
            queryParams.put("cq.dam.config.annotation.pdf.minImageHeight", String.valueOf(cqDamConfigAnnotationPdfMinImageHeight))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfReviewStatusWidth)))
            queryParams.put("cq.dam.config.annotation.pdf.reviewStatus.width", String.valueOf(cqDamConfigAnnotationPdfReviewStatusWidth))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfReviewStatusColorApproved)))
            queryParams.put("cq.dam.config.annotation.pdf.reviewStatus.color.approved", String.valueOf(cqDamConfigAnnotationPdfReviewStatusColorApproved))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfReviewStatusColorRejected)))
            queryParams.put("cq.dam.config.annotation.pdf.reviewStatus.color.rejected", String.valueOf(cqDamConfigAnnotationPdfReviewStatusColorRejected))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfReviewStatusColorChangesRequested)))
            queryParams.put("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested", String.valueOf(cqDamConfigAnnotationPdfReviewStatusColorChangesRequested))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfAnnotationMarkerWidth)))
            queryParams.put("cq.dam.config.annotation.pdf.annotationMarker.width", String.valueOf(cqDamConfigAnnotationPdfAnnotationMarkerWidth))

        if (!"null".equals(String.valueOf(cqDamConfigAnnotationPdfAssetMinheight)))
            queryParams.put("cq.dam.config.annotation.pdf.asset.minheight", String.valueOf(cqDamConfigAnnotationPdfAssetMinheight))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.class )

    }

    def comDayCqDamCoreImplAssetMoveListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplAssetMoveListenerInfo.class )

    }

    def comDayCqDamCoreImplAssethomeAssetHomePageConfiguration ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean isEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(isEnabled)))
            queryParams.put("isEnabled", String.valueOf(isEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.class )

    }

    def comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqDamAdhocAssetSharePrezipMaxcontentsize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamAdhocAssetSharePrezipMaxcontentsize)))
            queryParams.put("cq.dam.adhoc.asset.share.prezip.maxcontentsize", String.valueOf(cqDamAdhocAssetSharePrezipMaxcontentsize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.class )

    }

    def comDayCqDamCoreImplCacheCQBufferedImageCache ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqDamImageCacheMaxMemory, Integer cqDamImageCacheMaxAge, String cqDamImageCacheMaxDimension, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamImageCacheMaxMemory)))
            queryParams.put("cq.dam.image.cache.max.memory", String.valueOf(cqDamImageCacheMaxMemory))

        if (!"null".equals(String.valueOf(cqDamImageCacheMaxAge)))
            queryParams.put("cq.dam.image.cache.max.age", String.valueOf(cqDamImageCacheMaxAge))

        if (!"null".equals(String.valueOf(cqDamImageCacheMaxDimension)))
            queryParams.put("cq.dam.image.cache.max.dimension", String.valueOf(cqDamImageCacheMaxDimension))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.class )

    }

    def comDayCqDamCoreImplDamChangeEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> changeeventlistenerObservedPaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(changeeventlistenerObservedPaths)))
            queryParams.put("changeeventlistener.observed.paths", String.valueOf(changeeventlistenerObservedPaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplDamChangeEventListenerInfo.class )

    }

    def comDayCqDamCoreImplDamEventPurgeService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, Integer maxSavedActivities, Integer saveInterval, Boolean enableActivityPurge, String eventTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        if (!"null".equals(String.valueOf(maxSavedActivities)))
            queryParams.put("maxSavedActivities", String.valueOf(maxSavedActivities))

        if (!"null".equals(String.valueOf(saveInterval)))
            queryParams.put("saveInterval", String.valueOf(saveInterval))

        if (!"null".equals(String.valueOf(enableActivityPurge)))
            queryParams.put("enableActivityPurge", String.valueOf(enableActivityPurge))

        if (!"null".equals(String.valueOf(eventTypes)))
            queryParams.put("eventTypes", String.valueOf(eventTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplDamEventPurgeServiceInfo.class )

    }

    def comDayCqDamCoreImplDamEventRecorderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventFilter, Integer eventQueueLength, Boolean eventrecorderEnabled, List<String> eventrecorderBlacklist, String eventrecorderEventtypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        if (!"null".equals(String.valueOf(eventQueueLength)))
            queryParams.put("event.queue.length", String.valueOf(eventQueueLength))

        if (!"null".equals(String.valueOf(eventrecorderEnabled)))
            queryParams.put("eventrecorder.enabled", String.valueOf(eventrecorderEnabled))

        if (!"null".equals(String.valueOf(eventrecorderBlacklist)))
            queryParams.put("eventrecorder.blacklist", String.valueOf(eventrecorderBlacklist))

        if (!"null".equals(String.valueOf(eventrecorderEventtypes)))
            queryParams.put("eventrecorder.eventtypes", String.valueOf(eventrecorderEventtypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplDamEventRecorderImplInfo.class )

    }

    def comDayCqDamCoreImplEventDamEventAuditListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventFilter, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplEventDamEventAuditListenerInfo.class )

    }

    def comDayCqDamCoreImplExpiryNotificationJobImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamExpiryNotificationSchedulerIstimebased, String cqDamExpiryNotificationSchedulerTimebasedRule, Integer cqDamExpiryNotificationSchedulerPeriodRule, Boolean sendEmail, Integer assetExpiredLimit, Integer priorNotificationSeconds, String cqDamExpiryNotificationUrlProtocol, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamExpiryNotificationSchedulerIstimebased)))
            queryParams.put("cq.dam.expiry.notification.scheduler.istimebased", String.valueOf(cqDamExpiryNotificationSchedulerIstimebased))

        if (!"null".equals(String.valueOf(cqDamExpiryNotificationSchedulerTimebasedRule)))
            queryParams.put("cq.dam.expiry.notification.scheduler.timebased.rule", String.valueOf(cqDamExpiryNotificationSchedulerTimebasedRule))

        if (!"null".equals(String.valueOf(cqDamExpiryNotificationSchedulerPeriodRule)))
            queryParams.put("cq.dam.expiry.notification.scheduler.period.rule", String.valueOf(cqDamExpiryNotificationSchedulerPeriodRule))

        if (!"null".equals(String.valueOf(sendEmail)))
            queryParams.put("send_email", String.valueOf(sendEmail))

        if (!"null".equals(String.valueOf(assetExpiredLimit)))
            queryParams.put("asset_expired_limit", String.valueOf(assetExpiredLimit))

        if (!"null".equals(String.valueOf(priorNotificationSeconds)))
            queryParams.put("prior_notification_seconds", String.valueOf(priorNotificationSeconds))

        if (!"null".equals(String.valueOf(cqDamExpiryNotificationUrlProtocol)))
            queryParams.put("cq.dam.expiry.notification.url.protocol", String.valueOf(cqDamExpiryNotificationUrlProtocol))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplExpiryNotificationJobImplInfo.class )

    }

    def comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean isEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(isEnabled)))
            queryParams.put("isEnabled", String.valueOf(isEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.class )

    }

    def comDayCqDamCoreImplGfxCommonsGfxRenderer ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean skipBufferedcache, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(skipBufferedcache)))
            queryParams.put("skip.bufferedcache", String.valueOf(skipBufferedcache))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.class )

    }

    def comDayCqDamCoreImplHandlerEPSFormatHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String mimetype, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mimetype)))
            queryParams.put("mimetype", String.valueOf(mimetype))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.class )

    }

    def comDayCqDamCoreImplHandlerIndesignFormatHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> mimetype, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mimetype)))
            queryParams.put("mimetype", String.valueOf(mimetype))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.class )

    }

    def comDayCqDamCoreImplHandlerJpegHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamEnableExtMetaExtraction, Integer largeFileThreshold, Integer largeCommentThreshold, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamEnableExtMetaExtraction)))
            queryParams.put("cq.dam.enable.ext.meta.extraction", String.valueOf(cqDamEnableExtMetaExtraction))

        if (!"null".equals(String.valueOf(largeFileThreshold)))
            queryParams.put("large_file_threshold", String.valueOf(largeFileThreshold))

        if (!"null".equals(String.valueOf(largeCommentThreshold)))
            queryParams.put("large_comment_threshold", String.valueOf(largeCommentThreshold))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplHandlerJpegHandlerInfo.class )

    }

    def comDayCqDamCoreImplHandlerXmpNCommXMPHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> xmphandlerCqFormats, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(xmphandlerCqFormats)))
            queryParams.put("xmphandler.cq.formats", String.valueOf(xmphandlerCqFormats))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.class )

    }

    def comDayCqDamCoreImplJmxAssetIndexUpdateMonitor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String jmxObjectname, Boolean propertyMeasureEnabled, String propertyName, Integer propertyMaxWaitMs, BigDecimal propertyMaxRate, Boolean fulltextMeasureEnabled, String fulltextName, Integer fulltextMaxWaitMs, BigDecimal fulltextMaxRate, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jmxObjectname)))
            queryParams.put("jmx.objectname", String.valueOf(jmxObjectname))

        if (!"null".equals(String.valueOf(propertyMeasureEnabled)))
            queryParams.put("property.measure.enabled", String.valueOf(propertyMeasureEnabled))

        if (!"null".equals(String.valueOf(propertyName)))
            queryParams.put("property.name", String.valueOf(propertyName))

        if (!"null".equals(String.valueOf(propertyMaxWaitMs)))
            queryParams.put("property.max.wait.ms", String.valueOf(propertyMaxWaitMs))

        if (!"null".equals(String.valueOf(propertyMaxRate)))
            queryParams.put("property.max.rate", String.valueOf(propertyMaxRate))

        if (!"null".equals(String.valueOf(fulltextMeasureEnabled)))
            queryParams.put("fulltext.measure.enabled", String.valueOf(fulltextMeasureEnabled))

        if (!"null".equals(String.valueOf(fulltextName)))
            queryParams.put("fulltext.name", String.valueOf(fulltextName))

        if (!"null".equals(String.valueOf(fulltextMaxWaitMs)))
            queryParams.put("fulltext.max.wait.ms", String.valueOf(fulltextMaxWaitMs))

        if (!"null".equals(String.valueOf(fulltextMaxRate)))
            queryParams.put("fulltext.max.rate", String.valueOf(fulltextMaxRate))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.class )

    }

    def comDayCqDamCoreImplJmxAssetMigrationMBeanImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String jmxObjectname, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jmxObjectname)))
            queryParams.put("jmx.objectname", String.valueOf(jmxObjectname))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.class )

    }

    def comDayCqDamCoreImplJmxAssetUpdateMonitorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String jmxObjectname, Boolean active, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jmxObjectname)))
            queryParams.put("jmx.objectname", String.valueOf(jmxObjectname))

        if (!"null".equals(String.valueOf(active)))
            queryParams.put("active", String.valueOf(active))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.class )

    }

    def comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String operation, Boolean emailEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(operation)))
            queryParams.put("operation", String.valueOf(operation))

        if (!"null".equals(String.valueOf(emailEnabled)))
            queryParams.put("emailEnabled", String.valueOf(emailEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.class )

    }

    def comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String operation, String operationIcon, String topicName, Boolean emailEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(operation)))
            queryParams.put("operation", String.valueOf(operation))

        if (!"null".equals(String.valueOf(operationIcon)))
            queryParams.put("operationIcon", String.valueOf(operationIcon))

        if (!"null".equals(String.valueOf(topicName)))
            queryParams.put("topicName", String.valueOf(topicName))

        if (!"null".equals(String.valueOf(emailEnabled)))
            queryParams.put("emailEnabled", String.valueOf(emailEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.class )

    }

    def comDayCqDamCoreImplLightboxLightboxServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingServletPaths, List<String> slingServletMethods, Boolean cqDamEnableAnonymous, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletPaths)))
            queryParams.put("sling.servlet.paths", String.valueOf(slingServletPaths))

        if (!"null".equals(String.valueOf(slingServletMethods)))
            queryParams.put("sling.servlet.methods", String.valueOf(slingServletMethods))

        if (!"null".equals(String.valueOf(cqDamEnableAnonymous)))
            queryParams.put("cq.dam.enable.anonymous", String.valueOf(cqDamEnableAnonymous))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplLightboxLightboxServletInfo.class )

    }

    def comDayCqDamCoreImplMetadataEditorSelectComponentHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> graniteColonData, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(graniteColonData)))
            queryParams.put("granite:data", String.valueOf(graniteColonData))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.class )

    }

    def comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamAllowAllMime, List<String> cqDamAllowedAssetMimes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamAllowAllMime)))
            queryParams.put("cq.dam.allow.all.mime", String.valueOf(cqDamAllowAllMime))

        if (!"null".equals(String.valueOf(cqDamAllowedAssetMimes)))
            queryParams.put("cq.dam.allowed.asset.mimes", String.valueOf(cqDamAllowedAssetMimes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.class )

    }

    def comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamDetectAssetMimeFromContent, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamDetectAssetMimeFromContent)))
            queryParams.put("cq.dam.detect.asset.mime.from.content", String.valueOf(cqDamDetectAssetMimeFromContent))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.class )

    }

    def comDayCqDamCoreImplMissingMetadataNotificationJob ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamMissingmetadataNotificationSchedulerIstimebased, String cqDamMissingmetadataNotificationSchedulerTimebasedRule, Integer cqDamMissingmetadataNotificationSchedulerPeriodRule, String cqDamMissingmetadataNotificationRecipient, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamMissingmetadataNotificationSchedulerIstimebased)))
            queryParams.put("cq.dam.missingmetadata.notification.scheduler.istimebased", String.valueOf(cqDamMissingmetadataNotificationSchedulerIstimebased))

        if (!"null".equals(String.valueOf(cqDamMissingmetadataNotificationSchedulerTimebasedRule)))
            queryParams.put("cq.dam.missingmetadata.notification.scheduler.timebased.rule", String.valueOf(cqDamMissingmetadataNotificationSchedulerTimebasedRule))

        if (!"null".equals(String.valueOf(cqDamMissingmetadataNotificationSchedulerPeriodRule)))
            queryParams.put("cq.dam.missingmetadata.notification.scheduler.period.rule", String.valueOf(cqDamMissingmetadataNotificationSchedulerPeriodRule))

        if (!"null".equals(String.valueOf(cqDamMissingmetadataNotificationRecipient)))
            queryParams.put("cq.dam.missingmetadata.notification.recipient", String.valueOf(cqDamMissingmetadataNotificationRecipient))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.class )

    }

    def comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String processLabel, Boolean notifyOnComplete, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(processLabel)))
            queryParams.put("process.label", String.valueOf(processLabel))

        if (!"null".equals(String.valueOf(notifyOnComplete)))
            queryParams.put("Notify on Complete", String.valueOf(notifyOnComplete))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.class )

    }

    def comDayCqDamCoreImplProcessTextExtractionProcess ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> mimeTypes, Integer maxExtract, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mimeTypes)))
            queryParams.put("mimeTypes", String.valueOf(mimeTypes))

        if (!"null".equals(String.valueOf(maxExtract)))
            queryParams.put("maxExtract", String.valueOf(maxExtract))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplProcessTextExtractionProcessInfo.class )

    }

    def comDayCqDamCoreImplRenditionMakerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean xmpPropagate, List<String> xmpExcludes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(xmpPropagate)))
            queryParams.put("xmp.propagate", String.valueOf(xmpPropagate))

        if (!"null".equals(String.valueOf(xmpExcludes)))
            queryParams.put("xmp.excludes", String.valueOf(xmpExcludes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplRenditionMakerImplInfo.class )

    }

    def comDayCqDamCoreImplReportsReportExportService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer queryBatchSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(queryBatchSize)))
            queryParams.put("queryBatchSize", String.valueOf(queryBatchSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplReportsReportExportServiceInfo.class )

    }

    def comDayCqDamCoreImplReportsReportPurgeService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, Integer maxSavedReports, Integer timeDuration, Boolean enableReportPurge, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        if (!"null".equals(String.valueOf(maxSavedReports)))
            queryParams.put("maxSavedReports", String.valueOf(maxSavedReports))

        if (!"null".equals(String.valueOf(timeDuration)))
            queryParams.put("timeDuration", String.valueOf(timeDuration))

        if (!"null".equals(String.valueOf(enableReportPurge)))
            queryParams.put("enableReportPurge", String.valueOf(enableReportPurge))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplReportsReportPurgeServiceInfo.class )

    }

    def comDayCqDamCoreImplServletAssetDownloadServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletAssetDownloadServletInfo.class )

    }

    def comDayCqDamCoreImplServletAssetStatusServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqDamBatchStatusMaxassets, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamBatchStatusMaxassets)))
            queryParams.put("cq.dam.batch.status.maxassets", String.valueOf(cqDamBatchStatusMaxassets))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletAssetStatusServletInfo.class )

    }

    def comDayCqDamCoreImplServletAssetXMPSearchServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqDamBatchIndesignMaxassets, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamBatchIndesignMaxassets)))
            queryParams.put("cq.dam.batch.indesign.maxassets", String.valueOf(cqDamBatchIndesignMaxassets))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.class )

    }

    def comDayCqDamCoreImplServletBatchMetadataServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqDamBatchMetadataAssetDefault, List<String> cqDamBatchMetadataCollectionDefault, Integer cqDamBatchMetadataMaxresources, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamBatchMetadataAssetDefault)))
            queryParams.put("cq.dam.batch.metadata.asset.default", String.valueOf(cqDamBatchMetadataAssetDefault))

        if (!"null".equals(String.valueOf(cqDamBatchMetadataCollectionDefault)))
            queryParams.put("cq.dam.batch.metadata.collection.default", String.valueOf(cqDamBatchMetadataCollectionDefault))

        if (!"null".equals(String.valueOf(cqDamBatchMetadataMaxresources)))
            queryParams.put("cq.dam.batch.metadata.maxresources", String.valueOf(cqDamBatchMetadataMaxresources))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletBatchMetadataServletInfo.class )

    }

    def comDayCqDamCoreImplServletBinaryProviderServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> slingServletResourceTypes, List<String> slingServletMethods, Boolean cqDamDrmEnable, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletResourceTypes)))
            queryParams.put("sling.servlet.resourceTypes", String.valueOf(slingServletResourceTypes))

        if (!"null".equals(String.valueOf(slingServletMethods)))
            queryParams.put("sling.servlet.methods", String.valueOf(slingServletMethods))

        if (!"null".equals(String.valueOf(cqDamDrmEnable)))
            queryParams.put("cq.dam.drm.enable", String.valueOf(cqDamDrmEnable))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletBinaryProviderServletInfo.class )

    }

    def comDayCqDamCoreImplServletCollectionServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqDamBatchCollectionProperties, Integer cqDamBatchCollectionMaxcollections, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamBatchCollectionProperties)))
            queryParams.put("cq.dam.batch.collection.properties", String.valueOf(cqDamBatchCollectionProperties))

        if (!"null".equals(String.valueOf(cqDamBatchCollectionMaxcollections)))
            queryParams.put("cq.dam.batch.collection.maxcollections", String.valueOf(cqDamBatchCollectionMaxcollections))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletCollectionServletInfo.class )

    }

    def comDayCqDamCoreImplServletCollectionsServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqDamBatchCollectionsProperties, Integer cqDamBatchCollectionsLimit, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamBatchCollectionsProperties)))
            queryParams.put("cq.dam.batch.collections.properties", String.valueOf(cqDamBatchCollectionsProperties))

        if (!"null".equals(String.valueOf(cqDamBatchCollectionsLimit)))
            queryParams.put("cq.dam.batch.collections.limit", String.valueOf(cqDamBatchCollectionsLimit))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletCollectionsServletInfo.class )

    }

    def comDayCqDamCoreImplServletCompanionServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String moreInfo, String slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(moreInfo)))
            queryParams.put("More Info", String.valueOf(moreInfo))

        if (!"null".equals(String.valueOf(slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket)))
            queryParams.put("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}", String.valueOf(slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletCompanionServletInfo.class )

    }

    def comDayCqDamCoreImplServletCreateAssetServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean detectDuplicate, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(detectDuplicate)))
            queryParams.put("detect_duplicate", String.valueOf(detectDuplicate))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletCreateAssetServletInfo.class )

    }

    def comDayCqDamCoreImplServletDamContentDispositionFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqMimeTypeBlacklist, Boolean cqDamEmptyMime, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqMimeTypeBlacklist)))
            queryParams.put("cq.mime.type.blacklist", String.valueOf(cqMimeTypeBlacklist))

        if (!"null".equals(String.valueOf(cqDamEmptyMime)))
            queryParams.put("cq.dam.empty.mime", String.valueOf(cqDamEmptyMime))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.class )

    }

    def comDayCqDamCoreImplServletGuidLookupFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamCoreGuidlookupfilterEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamCoreGuidlookupfilterEnabled)))
            queryParams.put("cq.dam.core.guidlookupfilter.enabled", String.valueOf(cqDamCoreGuidlookupfilterEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletGuidLookupFilterInfo.class )

    }

    def comDayCqDamCoreImplServletHealthCheckServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String cqDamSyncWorkflowId, List<String> cqDamSyncFolderTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamSyncWorkflowId)))
            queryParams.put("cq.dam.sync.workflow.id", String.valueOf(cqDamSyncWorkflowId))

        if (!"null".equals(String.valueOf(cqDamSyncFolderTypes)))
            queryParams.put("cq.dam.sync.folder.types", String.valueOf(cqDamSyncFolderTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletHealthCheckServletInfo.class )

    }

    def comDayCqDamCoreImplServletMetadataGetServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingServletResourceTypes, String slingServletMethods, String slingServletExtensions, String slingServletSelectors, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletResourceTypes)))
            queryParams.put("sling.servlet.resourceTypes", String.valueOf(slingServletResourceTypes))

        if (!"null".equals(String.valueOf(slingServletMethods)))
            queryParams.put("sling.servlet.methods", String.valueOf(slingServletMethods))

        if (!"null".equals(String.valueOf(slingServletExtensions)))
            queryParams.put("sling.servlet.extensions", String.valueOf(slingServletExtensions))

        if (!"null".equals(String.valueOf(slingServletSelectors)))
            queryParams.put("sling.servlet.selectors", String.valueOf(slingServletSelectors))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletMetadataGetServletInfo.class )

    }

    def comDayCqDamCoreImplServletMultipleLicenseAcceptServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamDrmEnable, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamDrmEnable)))
            queryParams.put("cq.dam.drm.enable", String.valueOf(cqDamDrmEnable))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.class )

    }

    def comDayCqDamCoreImplServletResourceCollectionServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> slingServletResourceTypes, String slingServletMethods, String slingServletSelectors, String downloadConfig, String viewSelector, Boolean sendEmail, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletResourceTypes)))
            queryParams.put("sling.servlet.resourceTypes", String.valueOf(slingServletResourceTypes))

        if (!"null".equals(String.valueOf(slingServletMethods)))
            queryParams.put("sling.servlet.methods", String.valueOf(slingServletMethods))

        if (!"null".equals(String.valueOf(slingServletSelectors)))
            queryParams.put("sling.servlet.selectors", String.valueOf(slingServletSelectors))

        if (!"null".equals(String.valueOf(downloadConfig)))
            queryParams.put("download.config", String.valueOf(downloadConfig))

        if (!"null".equals(String.valueOf(viewSelector)))
            queryParams.put("view.selector", String.valueOf(viewSelector))

        if (!"null".equals(String.valueOf(sendEmail)))
            queryParams.put("send_email", String.valueOf(sendEmail))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplServletResourceCollectionServletInfo.class )

    }

    def comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean createPreviewEnabled, Boolean updatePreviewEnabled, Integer queueSize, String folderPreviewRenditionRegex, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(createPreviewEnabled)))
            queryParams.put("createPreviewEnabled", String.valueOf(createPreviewEnabled))

        if (!"null".equals(String.valueOf(updatePreviewEnabled)))
            queryParams.put("updatePreviewEnabled", String.valueOf(updatePreviewEnabled))

        if (!"null".equals(String.valueOf(queueSize)))
            queryParams.put("queueSize", String.valueOf(queueSize))

        if (!"null".equals(String.valueOf(folderPreviewRenditionRegex)))
            queryParams.put("folderPreviewRenditionRegex", String.valueOf(folderPreviewRenditionRegex))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.class )

    }

    def comDayCqDamCoreImplUnzipUnzipConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqDamConfigUnzipMaxuncompressedsize, String cqDamConfigUnzipEncoding, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamConfigUnzipMaxuncompressedsize)))
            queryParams.put("cq.dam.config.unzip.maxuncompressedsize", String.valueOf(cqDamConfigUnzipMaxuncompressedsize))

        if (!"null".equals(String.valueOf(cqDamConfigUnzipEncoding)))
            queryParams.put("cq.dam.config.unzip.encoding", String.valueOf(cqDamConfigUnzipEncoding))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreImplUnzipUnzipConfigInfo.class )

    }

    def comDayCqDamCoreProcessExifToolExtractMetadataProcess ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String processLabel, Boolean cqDamEnableSha1, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(processLabel)))
            queryParams.put("process.label", String.valueOf(processLabel))

        if (!"null".equals(String.valueOf(cqDamEnableSha1)))
            queryParams.put("cq.dam.enable.sha1", String.valueOf(cqDamEnableSha1))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.class )

    }

    def comDayCqDamCoreProcessExtractMetadataProcess ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String processLabel, Boolean cqDamEnableSha1, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(processLabel)))
            queryParams.put("process.label", String.valueOf(processLabel))

        if (!"null".equals(String.valueOf(cqDamEnableSha1)))
            queryParams.put("cq.dam.enable.sha1", String.valueOf(cqDamEnableSha1))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreProcessExtractMetadataProcessInfo.class )

    }

    def comDayCqDamCoreProcessMetadataProcessorProcess ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String processLabel, Boolean cqDamEnableSha1, List<String> cqDamMetadataXssprotectedProperties, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(processLabel)))
            queryParams.put("process.label", String.valueOf(processLabel))

        if (!"null".equals(String.valueOf(cqDamEnableSha1)))
            queryParams.put("cq.dam.enable.sha1", String.valueOf(cqDamEnableSha1))

        if (!"null".equals(String.valueOf(cqDamMetadataXssprotectedProperties)))
            queryParams.put("cq.dam.metadata.xssprotected.properties", String.valueOf(cqDamMetadataXssprotectedProperties))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamCoreProcessMetadataProcessorProcessInfo.class )

    }

    def comDayCqDamHandlerFfmpegLocatorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> executableSearchpath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(executableSearchpath)))
            queryParams.put("executable.searchpath", String.valueOf(executableSearchpath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamHandlerFfmpegLocatorImplInfo.class )

    }

    def comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventFilter, List<String> fontmgrSystemFontDir, String fontmgrAdobeFontDir, String fontmgrCustomerFontDir, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        if (!"null".equals(String.valueOf(fontmgrSystemFontDir)))
            queryParams.put("fontmgr.system.font.dir", String.valueOf(fontmgrSystemFontDir))

        if (!"null".equals(String.valueOf(fontmgrAdobeFontDir)))
            queryParams.put("fontmgr.adobe.font.dir", String.valueOf(fontmgrAdobeFontDir))

        if (!"null".equals(String.valueOf(fontmgrCustomerFontDir)))
            queryParams.put("fontmgr.customer.font.dir", String.valueOf(fontmgrCustomerFontDir))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.class )

    }

    def comDayCqDamHandlerStandardPdfPdfHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean rasterAnnotation, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(rasterAnnotation)))
            queryParams.put("raster.annotation", String.valueOf(rasterAnnotation))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamHandlerStandardPdfPdfHandlerInfo.class )

    }

    def comDayCqDamHandlerStandardPsPostScriptHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean rasterAnnotation, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(rasterAnnotation)))
            queryParams.put("raster.annotation", String.valueOf(rasterAnnotation))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.class )

    }

    def comDayCqDamHandlerStandardPsdPsdHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer largeFileThreshold, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(largeFileThreshold)))
            queryParams.put("large_file_threshold", String.valueOf(largeFileThreshold))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamHandlerStandardPsdPsdHandlerInfo.class )

    }

    def comDayCqDamIdsImplIDSJobProcessor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enableMultisession, Boolean idsCcEnable, Boolean enableRetry, Boolean enableRetryScripterror, String externalizerDomainCqhost, String externalizerDomainHttp, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enableMultisession)))
            queryParams.put("enable.multisession", String.valueOf(enableMultisession))

        if (!"null".equals(String.valueOf(idsCcEnable)))
            queryParams.put("ids.cc.enable", String.valueOf(idsCcEnable))

        if (!"null".equals(String.valueOf(enableRetry)))
            queryParams.put("enable.retry", String.valueOf(enableRetry))

        if (!"null".equals(String.valueOf(enableRetryScripterror)))
            queryParams.put("enable.retry.scripterror", String.valueOf(enableRetryScripterror))

        if (!"null".equals(String.valueOf(externalizerDomainCqhost)))
            queryParams.put("externalizer.domain.cqhost", String.valueOf(externalizerDomainCqhost))

        if (!"null".equals(String.valueOf(externalizerDomainHttp)))
            queryParams.put("externalizer.domain.http", String.valueOf(externalizerDomainHttp))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamIdsImplIDSJobProcessorInfo.class )

    }

    def comDayCqDamIdsImplIDSPoolManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxErrorsToBlacklist, Integer retryIntervalToWhitelist, Integer connectTimeout, Integer socketTimeout, String processLabel, Integer connectionUseMax, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxErrorsToBlacklist)))
            queryParams.put("max.errors.to.blacklist", String.valueOf(maxErrorsToBlacklist))

        if (!"null".equals(String.valueOf(retryIntervalToWhitelist)))
            queryParams.put("retry.interval.to.whitelist", String.valueOf(retryIntervalToWhitelist))

        if (!"null".equals(String.valueOf(connectTimeout)))
            queryParams.put("connect.timeout", String.valueOf(connectTimeout))

        if (!"null".equals(String.valueOf(socketTimeout)))
            queryParams.put("socket.timeout", String.valueOf(socketTimeout))

        if (!"null".equals(String.valueOf(processLabel)))
            queryParams.put("process.label", String.valueOf(processLabel))

        if (!"null".equals(String.valueOf(connectionUseMax)))
            queryParams.put("connection.use.max", String.valueOf(connectionUseMax))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamIdsImplIDSPoolManagerImplInfo.class )

    }

    def comDayCqDamInddImplHandlerIndesignXMPHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String processLabel, Boolean extractPages, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(processLabel)))
            queryParams.put("process.label", String.valueOf(processLabel))

        if (!"null".equals(String.valueOf(extractPages)))
            queryParams.put("extract.pages", String.valueOf(extractPages))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.class )

    }

    def comDayCqDamInddImplServletSnippetCreationServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer snippetcreationMaxcollections, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(snippetcreationMaxcollections)))
            queryParams.put("snippetcreation.maxcollections", String.valueOf(snippetcreationMaxcollections))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamInddImplServletSnippetCreationServletInfo.class )

    }

    def comDayCqDamInddProcessINDDMediaExtractProcess ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String processLabel, String cqDamInddPagesRegex, Boolean idsJobDecoupled, String idsJobWorkflowModel, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(processLabel)))
            queryParams.put("process.label", String.valueOf(processLabel))

        if (!"null".equals(String.valueOf(cqDamInddPagesRegex)))
            queryParams.put("cq.dam.indd.pages.regex", String.valueOf(cqDamInddPagesRegex))

        if (!"null".equals(String.valueOf(idsJobDecoupled)))
            queryParams.put("ids.job.decoupled", String.valueOf(idsJobDecoupled))

        if (!"null".equals(String.valueOf(idsJobWorkflowModel)))
            queryParams.put("ids.job.workflow.model", String.valueOf(idsJobWorkflowModel))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamInddProcessINDDMediaExtractProcessInfo.class )

    }

    def comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer batchCommitSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(batchCommitSize)))
            queryParams.put("batch.commit.size", String.valueOf(batchCommitSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.class )

    }

    def comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.class )

    }

    def comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean deleteZipFile, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(deleteZipFile)))
            queryParams.put("delete.zip.file", String.valueOf(deleteZipFile))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.class )

    }

    def comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamS7damDynamicmediaconfigeventlistenerEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamS7damDynamicmediaconfigeventlistenerEnabled)))
            queryParams.put("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled", String.valueOf(cqDamS7damDynamicmediaconfigeventlistenerEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.class )

    }

    def comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, Boolean schedulerConcurrent, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        if (!"null".equals(String.valueOf(schedulerConcurrent)))
            queryParams.put("scheduler.concurrent", String.valueOf(schedulerConcurrent))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.class )

    }

    def comDayCqDamS7damCommonPostServletsSetCreateHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingPostOperation, String slingServletMethods, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingPostOperation)))
            queryParams.put("sling.post.operation", String.valueOf(slingPostOperation))

        if (!"null".equals(String.valueOf(slingServletMethods)))
            queryParams.put("sling.servlet.methods", String.valueOf(slingServletMethods))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.class )

    }

    def comDayCqDamS7damCommonPostServletsSetModifyHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingPostOperation, String slingServletMethods, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingPostOperation)))
            queryParams.put("sling.post.operation", String.valueOf(slingPostOperation))

        if (!"null".equals(String.valueOf(slingServletMethods)))
            queryParams.put("sling.servlet.methods", String.valueOf(slingServletMethods))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.class )

    }

    def comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String processLabel, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(processLabel)))
            queryParams.put("process.label", String.valueOf(processLabel))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.class )

    }

    def comDayCqDamS7damCommonS7damDamChangeEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamS7damDamchangeeventlistenerEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamS7damDamchangeeventlistenerEnabled)))
            queryParams.put("cq.dam.s7dam.damchangeeventlistener.enabled", String.valueOf(cqDamS7damDamchangeeventlistenerEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.class )

    }

    def comDayCqDamS7damCommonServletsS7damProductInfoServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingServletPaths, String slingServletMethods, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletPaths)))
            queryParams.put("sling.servlet.paths", String.valueOf(slingServletPaths))

        if (!"null".equals(String.valueOf(slingServletMethods)))
            queryParams.put("sling.servlet.methods", String.valueOf(slingServletMethods))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.class )

    }

    def comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, Integer cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, Integer cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, Integer cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, Integer cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, Integer cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, Integer cqDamS7damVideoproxyclientserviceUploadprogressIntervalName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName)))
            queryParams.put("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name", String.valueOf(cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName))

        if (!"null".equals(String.valueOf(cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName)))
            queryParams.put("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name", String.valueOf(cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName))

        if (!"null".equals(String.valueOf(cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName)))
            queryParams.put("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name", String.valueOf(cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName))

        if (!"null".equals(String.valueOf(cqDamS7damVideoproxyclientserviceHttpReadtimeoutName)))
            queryParams.put("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name", String.valueOf(cqDamS7damVideoproxyclientserviceHttpReadtimeoutName))

        if (!"null".equals(String.valueOf(cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName)))
            queryParams.put("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name", String.valueOf(cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName))

        if (!"null".equals(String.valueOf(cqDamS7damVideoproxyclientserviceHttpMaxretrycountName)))
            queryParams.put("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name", String.valueOf(cqDamS7damVideoproxyclientserviceHttpMaxretrycountName))

        if (!"null".equals(String.valueOf(cqDamS7damVideoproxyclientserviceUploadprogressIntervalName)))
            queryParams.put("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name", String.valueOf(cqDamS7damVideoproxyclientserviceUploadprogressIntervalName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.class )

    }

    def comDayCqDamScene7ImplScene7APIClientImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqDamScene7ApiclientRecordsperpageNofilterName, Integer cqDamScene7ApiclientRecordsperpageWithfilterName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamScene7ApiclientRecordsperpageNofilterName)))
            queryParams.put("cq.dam.scene7.apiclient.recordsperpage.nofilter.name", String.valueOf(cqDamScene7ApiclientRecordsperpageNofilterName))

        if (!"null".equals(String.valueOf(cqDamScene7ApiclientRecordsperpageWithfilterName)))
            queryParams.put("cq.dam.scene7.apiclient.recordsperpage.withfilter.name", String.valueOf(cqDamScene7ApiclientRecordsperpageWithfilterName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamScene7ImplScene7APIClientImplInfo.class )

    }

    def comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqDamScene7AssetmimetypeserviceMapping, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamScene7AssetmimetypeserviceMapping)))
            queryParams.put("cq.dam.scene7.assetmimetypeservice.mapping", String.valueOf(cqDamScene7AssetmimetypeserviceMapping))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.class )

    }

    def comDayCqDamScene7ImplScene7ConfigurationEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamScene7ConfigurationeventlistenerEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamScene7ConfigurationeventlistenerEnabled)))
            queryParams.put("cq.dam.scene7.configurationeventlistener.enabled", String.valueOf(cqDamScene7ConfigurationeventlistenerEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.class )

    }

    def comDayCqDamScene7ImplScene7DamChangeEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqDamScene7DamchangeeventlistenerEnabled, List<String> cqDamScene7DamchangeeventlistenerObservedPaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamScene7DamchangeeventlistenerEnabled)))
            queryParams.put("cq.dam.scene7.damchangeeventlistener.enabled", String.valueOf(cqDamScene7DamchangeeventlistenerEnabled))

        if (!"null".equals(String.valueOf(cqDamScene7DamchangeeventlistenerObservedPaths)))
            queryParams.put("cq.dam.scene7.damchangeeventlistener.observed.paths", String.valueOf(cqDamScene7DamchangeeventlistenerObservedPaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.class )

    }

    def comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String scene7FlashTemplatesRti, String scene7FlashTemplatesRsi, String scene7FlashTemplatesRb, String scene7FlashTemplatesRurl, String scene7FlashTemplateUrlFormatParameter, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(scene7FlashTemplatesRti)))
            queryParams.put("scene7FlashTemplates.rti", String.valueOf(scene7FlashTemplatesRti))

        if (!"null".equals(String.valueOf(scene7FlashTemplatesRsi)))
            queryParams.put("scene7FlashTemplates.rsi", String.valueOf(scene7FlashTemplatesRsi))

        if (!"null".equals(String.valueOf(scene7FlashTemplatesRb)))
            queryParams.put("scene7FlashTemplates.rb", String.valueOf(scene7FlashTemplatesRb))

        if (!"null".equals(String.valueOf(scene7FlashTemplatesRurl)))
            queryParams.put("scene7FlashTemplates.rurl", String.valueOf(scene7FlashTemplatesRurl))

        if (!"null".equals(String.valueOf(scene7FlashTemplateUrlFormatParameter)))
            queryParams.put("scene7FlashTemplate.urlFormatParameter", String.valueOf(scene7FlashTemplateUrlFormatParameter))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.class )

    }

    def comDayCqDamScene7ImplScene7UploadServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer cqDamScene7UploadserviceActivejobtimeoutLabel, Integer cqDamScene7UploadserviceConnectionmaxperrouteLabel, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqDamScene7UploadserviceActivejobtimeoutLabel)))
            queryParams.put("cq.dam.scene7.uploadservice.activejobtimeout.label", String.valueOf(cqDamScene7UploadserviceActivejobtimeoutLabel))

        if (!"null".equals(String.valueOf(cqDamScene7UploadserviceConnectionmaxperrouteLabel)))
            queryParams.put("cq.dam.scene7.uploadservice.connectionmaxperroute.label", String.valueOf(cqDamScene7UploadserviceConnectionmaxperrouteLabel))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamScene7ImplScene7UploadServiceImplInfo.class )

    }

    def comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String getCacheExpirationUnit, Integer getCacheExpirationValue, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(getCacheExpirationUnit)))
            queryParams.put("getCacheExpirationUnit", String.valueOf(getCacheExpirationUnit))

        if (!"null".equals(String.valueOf(getCacheExpirationValue)))
            queryParams.put("getCacheExpirationValue", String.valueOf(getCacheExpirationValue))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.class )

    }

    def comDayCqDamStockIntegrationImplConfigurationStockConfiguration ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String locale, String imsConfig, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(locale)))
            queryParams.put("locale", String.valueOf(locale))

        if (!"null".equals(String.valueOf(imsConfig)))
            queryParams.put("imsConfig", String.valueOf(imsConfig))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.class )

    }

    def comDayCqDamVideoImplServletVideoTestServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqDamVideoImplServletVideoTestServletInfo.class )

    }

    def comDayCqExtwidgetServletsImageSpriteServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxWidth, Integer maxHeight, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxWidth)))
            queryParams.put("maxWidth", String.valueOf(maxWidth))

        if (!"null".equals(String.valueOf(maxHeight)))
            queryParams.put("maxHeight", String.valueOf(maxHeight))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqExtwidgetServletsImageSpriteServletInfo.class )

    }

    def comDayCqImageInternalFontFontHelper ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> fontpath, Integer oversamplingFactor, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.image.internal.font.FontHelper"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fontpath)))
            queryParams.put("fontpath", String.valueOf(fontpath))

        if (!"null".equals(String.valueOf(oversamplingFactor)))
            queryParams.put("oversamplingFactor", String.valueOf(oversamplingFactor))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqImageInternalFontFontHelperInfo.class )

    }

    def comDayCqJcrclustersupportClusterStartLevelController ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean clusterLevelEnable, Integer clusterMasterLevel, Integer clusterSlaveLevel, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(clusterLevelEnable)))
            queryParams.put("cluster.level.enable", String.valueOf(clusterLevelEnable))

        if (!"null".equals(String.valueOf(clusterMasterLevel)))
            queryParams.put("cluster.master.level", String.valueOf(clusterMasterLevel))

        if (!"null".equals(String.valueOf(clusterSlaveLevel)))
            queryParams.put("cluster.slave.level", String.valueOf(clusterSlaveLevel))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqJcrclustersupportClusterStartLevelControllerInfo.class )

    }

    def comDayCqMailerDefaultMailService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String smtpHost, Integer smtpPort, String smtpUser, String smtpPassword, String fromAddress, Boolean smtpSsl, Boolean smtpStarttls, Boolean debugEmail, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mailer.DefaultMailService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(smtpHost)))
            queryParams.put("smtp.host", String.valueOf(smtpHost))

        if (!"null".equals(String.valueOf(smtpPort)))
            queryParams.put("smtp.port", String.valueOf(smtpPort))

        if (!"null".equals(String.valueOf(smtpUser)))
            queryParams.put("smtp.user", String.valueOf(smtpUser))

        if (!"null".equals(String.valueOf(smtpPassword)))
            queryParams.put("smtp.password", String.valueOf(smtpPassword))

        if (!"null".equals(String.valueOf(fromAddress)))
            queryParams.put("from.address", String.valueOf(fromAddress))

        if (!"null".equals(String.valueOf(smtpSsl)))
            queryParams.put("smtp.ssl", String.valueOf(smtpSsl))

        if (!"null".equals(String.valueOf(smtpStarttls)))
            queryParams.put("smtp.starttls", String.valueOf(smtpStarttls))

        if (!"null".equals(String.valueOf(debugEmail)))
            queryParams.put("debug.email", String.valueOf(debugEmail))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMailerDefaultMailServiceInfo.class )

    }

    def comDayCqMailerImplCqMailingService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String maxRecipientCount, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxRecipientCount)))
            queryParams.put("max.recipient.count", String.valueOf(maxRecipientCount))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMailerImplCqMailingServiceInfo.class )

    }

    def comDayCqMailerImplEmailCqEmailTemplateFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String mailerEmailCharset, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mailerEmailCharset)))
            queryParams.put("mailer.email.charset", String.valueOf(mailerEmailCharset))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.class )

    }

    def comDayCqMailerImplEmailCqRetrieverTemplateFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean mailerEmailEmbed, String mailerEmailCharset, String mailerEmailRetrieverUserID, String mailerEmailRetrieverUserPWD, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mailerEmailEmbed)))
            queryParams.put("mailer.email.embed", String.valueOf(mailerEmailEmbed))

        if (!"null".equals(String.valueOf(mailerEmailCharset)))
            queryParams.put("mailer.email.charset", String.valueOf(mailerEmailCharset))

        if (!"null".equals(String.valueOf(mailerEmailRetrieverUserID)))
            queryParams.put("mailer.email.retrieverUserID", String.valueOf(mailerEmailRetrieverUserID))

        if (!"null".equals(String.valueOf(mailerEmailRetrieverUserPWD)))
            queryParams.put("mailer.email.retrieverUserPWD", String.valueOf(mailerEmailRetrieverUserPWD))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.class )

    }

    def comDayCqMcmCampaignImplIntegrationConfigImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> aemMcmCampaignFormConstraints, String aemMcmCampaignPublicUrl, Boolean aemMcmCampaignRelaxedSSL, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(aemMcmCampaignFormConstraints)))
            queryParams.put("aem.mcm.campaign.formConstraints", String.valueOf(aemMcmCampaignFormConstraints))

        if (!"null".equals(String.valueOf(aemMcmCampaignPublicUrl)))
            queryParams.put("aem.mcm.campaign.publicUrl", String.valueOf(aemMcmCampaignPublicUrl))

        if (!"null".equals(String.valueOf(aemMcmCampaignRelaxedSSL)))
            queryParams.put("aem.mcm.campaign.relaxedSSL", String.valueOf(aemMcmCampaignRelaxedSSL))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMcmCampaignImplIntegrationConfigImplInfo.class )

    }

    def comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.class )

    }

    def comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String fromAddress, String senderHost, String maxBounceCount, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fromAddress)))
            queryParams.put("from.address", String.valueOf(fromAddress))

        if (!"null".equals(String.valueOf(senderHost)))
            queryParams.put("sender.host", String.valueOf(senderHost))

        if (!"null".equals(String.valueOf(maxBounceCount)))
            queryParams.put("max.bounce.count", String.valueOf(maxBounceCount))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.class )

    }

    def comDayCqMcmImplMCMConfiguration ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> experienceIndirection, List<String> touchpointIndirection, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(experienceIndirection)))
            queryParams.put("experience.indirection", String.valueOf(experienceIndirection))

        if (!"null".equals(String.valueOf(touchpointIndirection)))
            queryParams.put("touchpoint.indirection", String.valueOf(touchpointIndirection))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMcmImplMCMConfigurationInfo.class )

    }

    def comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, String componentResourceType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        if (!"null".equals(String.valueOf(componentResourceType)))
            queryParams.put("component.resourceType", String.valueOf(componentResourceType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.class )

    }

    def comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, String componentResourceType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        if (!"null".equals(String.valueOf(componentResourceType)))
            queryParams.put("component.resourceType", String.valueOf(componentResourceType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.class )

    }

    def comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.class )

    }

    def comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.class )

    }

    def comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, String componentResourceType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        if (!"null".equals(String.valueOf(componentResourceType)))
            queryParams.put("component.resourceType", String.valueOf(componentResourceType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.class )

    }

    def comDayCqNotificationImplNotificationServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventFilter, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqNotificationImplNotificationServiceImplInfo.class )

    }

    def comDayCqPersonalizationImplServletsTargetingConfigurationServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean forcelocation, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(forcelocation)))
            queryParams.put("forcelocation", String.valueOf(forcelocation))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.class )

    }

    def comDayCqPollingImporterImplManagedPollConfigImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String id, Boolean enabled, Boolean reference, Integer interval, String expression, String source, String target, String login, String password, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(id)))
            queryParams.put("id", String.valueOf(id))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(reference)))
            queryParams.put("reference", String.valueOf(reference))

        if (!"null".equals(String.valueOf(interval)))
            queryParams.put("interval", String.valueOf(interval))

        if (!"null".equals(String.valueOf(expression)))
            queryParams.put("expression", String.valueOf(expression))

        if (!"null".equals(String.valueOf(source)))
            queryParams.put("source", String.valueOf(source))

        if (!"null".equals(String.valueOf(target)))
            queryParams.put("target", String.valueOf(target))

        if (!"null".equals(String.valueOf(login)))
            queryParams.put("login", String.valueOf(login))

        if (!"null".equals(String.valueOf(password)))
            queryParams.put("password", String.valueOf(password))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqPollingImporterImplManagedPollConfigImplInfo.class )

    }

    def comDayCqPollingImporterImplManagedPollingImporterImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String importerUser, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(importerUser)))
            queryParams.put("importer.user", String.valueOf(importerUser))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqPollingImporterImplManagedPollingImporterImplInfo.class )

    }

    def comDayCqPollingImporterImplPollingImporterImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer importerMinInterval, String importerUser, List<String> excludePaths, List<String> includePaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(importerMinInterval)))
            queryParams.put("importer.min.interval", String.valueOf(importerMinInterval))

        if (!"null".equals(String.valueOf(importerUser)))
            queryParams.put("importer.user", String.valueOf(importerUser))

        if (!"null".equals(String.valueOf(excludePaths)))
            queryParams.put("exclude.paths", String.valueOf(excludePaths))

        if (!"null".equals(String.valueOf(includePaths)))
            queryParams.put("include.paths", String.valueOf(includePaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqPollingImporterImplPollingImporterImplInfo.class )

    }

    def comDayCqReplicationAuditReplicationEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationAuditReplicationEventListenerInfo.class )

    }

    def comDayCqReplicationContentStaticContentBuilder ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String host, Integer port, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(host)))
            queryParams.put("host", String.valueOf(host))

        if (!"null".equals(String.valueOf(port)))
            queryParams.put("port", String.valueOf(port))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationContentStaticContentBuilderInfo.class )

    }

    def comDayCqReplicationImplAgentManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String jobTopics, String serviceUserTarget, String agentProviderTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jobTopics)))
            queryParams.put("job.topics", String.valueOf(jobTopics))

        if (!"null".equals(String.valueOf(serviceUserTarget)))
            queryParams.put("serviceUser.target", String.valueOf(serviceUserTarget))

        if (!"null".equals(String.valueOf(agentProviderTarget)))
            queryParams.put("agentProvider.target", String.valueOf(agentProviderTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationImplAgentManagerImplInfo.class )

    }

    def comDayCqReplicationImplContentDurboBinaryLessContentBuilder ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer binaryThreshold, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(binaryThreshold)))
            queryParams.put("binary.threshold", String.valueOf(binaryThreshold))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.class )

    }

    def comDayCqReplicationImplContentDurboDurboImportConfigurationProv ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean preserveHierarchyNodes, Boolean ignoreVersioning, Boolean importAcl, Integer saveThreshold, Boolean preserveUserPaths, Boolean preserveUuid, List<String> preserveUuidNodetypes, List<String> preserveUuidSubtrees, Boolean autoCommit, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(preserveHierarchyNodes)))
            queryParams.put("preserve.hierarchy.nodes", String.valueOf(preserveHierarchyNodes))

        if (!"null".equals(String.valueOf(ignoreVersioning)))
            queryParams.put("ignore.versioning", String.valueOf(ignoreVersioning))

        if (!"null".equals(String.valueOf(importAcl)))
            queryParams.put("import.acl", String.valueOf(importAcl))

        if (!"null".equals(String.valueOf(saveThreshold)))
            queryParams.put("save.threshold", String.valueOf(saveThreshold))

        if (!"null".equals(String.valueOf(preserveUserPaths)))
            queryParams.put("preserve.user.paths", String.valueOf(preserveUserPaths))

        if (!"null".equals(String.valueOf(preserveUuid)))
            queryParams.put("preserve.uuid", String.valueOf(preserveUuid))

        if (!"null".equals(String.valueOf(preserveUuidNodetypes)))
            queryParams.put("preserve.uuid.nodetypes", String.valueOf(preserveUuidNodetypes))

        if (!"null".equals(String.valueOf(preserveUuidSubtrees)))
            queryParams.put("preserve.uuid.subtrees", String.valueOf(preserveUuidSubtrees))

        if (!"null".equals(String.valueOf(autoCommit)))
            queryParams.put("auto.commit", String.valueOf(autoCommit))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.class )

    }

    def comDayCqReplicationImplReplicationContentFactoryProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean replicationContentUseFileStorage, Integer replicationContentMaxCommitAttempts, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(replicationContentUseFileStorage)))
            queryParams.put("replication.content.useFileStorage", String.valueOf(replicationContentUseFileStorage))

        if (!"null".equals(String.valueOf(replicationContentMaxCommitAttempts)))
            queryParams.put("replication.content.maxCommitAttempts", String.valueOf(replicationContentMaxCommitAttempts))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.class )

    }

    def comDayCqReplicationImplReplicationReceiverImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer receiverTmpfileThreshold, Boolean receiverPackagesUseInstall, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(receiverTmpfileThreshold)))
            queryParams.put("receiver.tmpfile.threshold", String.valueOf(receiverTmpfileThreshold))

        if (!"null".equals(String.valueOf(receiverPackagesUseInstall)))
            queryParams.put("receiver.packages.use.install", String.valueOf(receiverPackagesUseInstall))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationImplReplicationReceiverImplInfo.class )

    }

    def comDayCqReplicationImplReplicatorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean distributeEvents, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(distributeEvents)))
            queryParams.put("distribute_events", String.valueOf(distributeEvents))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationImplReplicatorImplInfo.class )

    }

    def comDayCqReplicationImplReverseReplicator ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer schedulerPeriod, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerPeriod)))
            queryParams.put("scheduler.period", String.valueOf(schedulerPeriod))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationImplReverseReplicatorInfo.class )

    }

    def comDayCqReplicationImplTransportBinaryLessTransportHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> disabledCipherSuites, List<String> enabledCipherSuites, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(disabledCipherSuites)))
            queryParams.put("disabled.cipher.suites", String.valueOf(disabledCipherSuites))

        if (!"null".equals(String.valueOf(enabledCipherSuites)))
            queryParams.put("enabled.cipher.suites", String.valueOf(enabledCipherSuites))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.class )

    }

    def comDayCqReplicationImplTransportHttp ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> disabledCipherSuites, List<String> enabledCipherSuites, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.replication.impl.transport.Http"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(disabledCipherSuites)))
            queryParams.put("disabled.cipher.suites", String.valueOf(disabledCipherSuites))

        if (!"null".equals(String.valueOf(enabledCipherSuites)))
            queryParams.put("enabled.cipher.suites", String.valueOf(enabledCipherSuites))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReplicationImplTransportHttpInfo.class )

    }

    def comDayCqReportingImplCacheCacheImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean repcacheEnable, Integer repcacheTtl, Integer repcacheMax, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(repcacheEnable)))
            queryParams.put("repcache.enable", String.valueOf(repcacheEnable))

        if (!"null".equals(String.valueOf(repcacheTtl)))
            queryParams.put("repcache.ttl", String.valueOf(repcacheTtl))

        if (!"null".equals(String.valueOf(repcacheMax)))
            queryParams.put("repcache.max", String.valueOf(repcacheMax))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReportingImplCacheCacheImplInfo.class )

    }

    def comDayCqReportingImplConfigServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String repconfTimezone, String repconfLocale, String repconfSnapshots, String repconfRepdir, Integer repconfHourofday, Integer repconfMinofhour, Integer repconfMaxrows, Boolean repconfFakedata, String repconfSnapshotuser, Boolean repconfEnforcesnapshotuser, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(repconfTimezone)))
            queryParams.put("repconf.timezone", String.valueOf(repconfTimezone))

        if (!"null".equals(String.valueOf(repconfLocale)))
            queryParams.put("repconf.locale", String.valueOf(repconfLocale))

        if (!"null".equals(String.valueOf(repconfSnapshots)))
            queryParams.put("repconf.snapshots", String.valueOf(repconfSnapshots))

        if (!"null".equals(String.valueOf(repconfRepdir)))
            queryParams.put("repconf.repdir", String.valueOf(repconfRepdir))

        if (!"null".equals(String.valueOf(repconfHourofday)))
            queryParams.put("repconf.hourofday", String.valueOf(repconfHourofday))

        if (!"null".equals(String.valueOf(repconfMinofhour)))
            queryParams.put("repconf.minofhour", String.valueOf(repconfMinofhour))

        if (!"null".equals(String.valueOf(repconfMaxrows)))
            queryParams.put("repconf.maxrows", String.valueOf(repconfMaxrows))

        if (!"null".equals(String.valueOf(repconfFakedata)))
            queryParams.put("repconf.fakedata", String.valueOf(repconfFakedata))

        if (!"null".equals(String.valueOf(repconfSnapshotuser)))
            queryParams.put("repconf.snapshotuser", String.valueOf(repconfSnapshotuser))

        if (!"null".equals(String.valueOf(repconfEnforcesnapshotuser)))
            queryParams.put("repconf.enforcesnapshotuser", String.valueOf(repconfEnforcesnapshotuser))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReportingImplConfigServiceImplInfo.class )

    }

    def comDayCqReportingImplRLogAnalyzer ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String requestLogOutput, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(requestLogOutput)))
            queryParams.put("request.log.output", String.valueOf(requestLogOutput))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqReportingImplRLogAnalyzerInfo.class )

    }

    def comDayCqRewriterLinkcheckerImplLinkCheckerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer schedulerPeriod, Boolean schedulerConcurrent, Integer serviceBadLinkToleranceInterval, List<String> serviceCheckOverridePatterns, Boolean serviceCacheBrokenInternalLinks, List<String> serviceSpecialLinkPrefix, List<String> serviceSpecialLinkPatterns, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerPeriod)))
            queryParams.put("scheduler.period", String.valueOf(schedulerPeriod))

        if (!"null".equals(String.valueOf(schedulerConcurrent)))
            queryParams.put("scheduler.concurrent", String.valueOf(schedulerConcurrent))

        if (!"null".equals(String.valueOf(serviceBadLinkToleranceInterval)))
            queryParams.put("service.bad_link_tolerance_interval", String.valueOf(serviceBadLinkToleranceInterval))

        if (!"null".equals(String.valueOf(serviceCheckOverridePatterns)))
            queryParams.put("service.check_override_patterns", String.valueOf(serviceCheckOverridePatterns))

        if (!"null".equals(String.valueOf(serviceCacheBrokenInternalLinks)))
            queryParams.put("service.cache_broken_internal_links", String.valueOf(serviceCacheBrokenInternalLinks))

        if (!"null".equals(String.valueOf(serviceSpecialLinkPrefix)))
            queryParams.put("service.special_link_prefix", String.valueOf(serviceSpecialLinkPrefix))

        if (!"null".equals(String.valueOf(serviceSpecialLinkPatterns)))
            queryParams.put("service.special_link_patterns", String.valueOf(serviceSpecialLinkPatterns))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.class )

    }

    def comDayCqRewriterLinkcheckerImplLinkCheckerTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer schedulerPeriod, Boolean schedulerConcurrent, Integer goodLinkTestInterval, Integer badLinkTestInterval, Integer linkUnusedInterval, Integer connectionTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerPeriod)))
            queryParams.put("scheduler.period", String.valueOf(schedulerPeriod))

        if (!"null".equals(String.valueOf(schedulerConcurrent)))
            queryParams.put("scheduler.concurrent", String.valueOf(schedulerConcurrent))

        if (!"null".equals(String.valueOf(goodLinkTestInterval)))
            queryParams.put("good_link_test_interval", String.valueOf(goodLinkTestInterval))

        if (!"null".equals(String.valueOf(badLinkTestInterval)))
            queryParams.put("bad_link_test_interval", String.valueOf(badLinkTestInterval))

        if (!"null".equals(String.valueOf(linkUnusedInterval)))
            queryParams.put("link_unused_interval", String.valueOf(linkUnusedInterval))

        if (!"null".equals(String.valueOf(connectionTimeout)))
            queryParams.put("connection.timeout", String.valueOf(connectionTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.class )

    }

    def comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean linkcheckertransformerDisableRewriting, Boolean linkcheckertransformerDisableChecking, Integer linkcheckertransformerMapCacheSize, Boolean linkcheckertransformerStrictExtensionCheck, Boolean linkcheckertransformerStripHtmltExtension, List<String> linkcheckertransformerRewriteElements, List<String> linkcheckertransformerStripExtensionPathBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(linkcheckertransformerDisableRewriting)))
            queryParams.put("linkcheckertransformer.disableRewriting", String.valueOf(linkcheckertransformerDisableRewriting))

        if (!"null".equals(String.valueOf(linkcheckertransformerDisableChecking)))
            queryParams.put("linkcheckertransformer.disableChecking", String.valueOf(linkcheckertransformerDisableChecking))

        if (!"null".equals(String.valueOf(linkcheckertransformerMapCacheSize)))
            queryParams.put("linkcheckertransformer.mapCacheSize", String.valueOf(linkcheckertransformerMapCacheSize))

        if (!"null".equals(String.valueOf(linkcheckertransformerStrictExtensionCheck)))
            queryParams.put("linkcheckertransformer.strictExtensionCheck", String.valueOf(linkcheckertransformerStrictExtensionCheck))

        if (!"null".equals(String.valueOf(linkcheckertransformerStripHtmltExtension)))
            queryParams.put("linkcheckertransformer.stripHtmltExtension", String.valueOf(linkcheckertransformerStripHtmltExtension))

        if (!"null".equals(String.valueOf(linkcheckertransformerRewriteElements)))
            queryParams.put("linkcheckertransformer.rewriteElements", String.valueOf(linkcheckertransformerRewriteElements))

        if (!"null".equals(String.valueOf(linkcheckertransformerStripExtensionPathBlacklist)))
            queryParams.put("linkcheckertransformer.stripExtensionPathBlacklist", String.valueOf(linkcheckertransformerStripExtensionPathBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.class )

    }

    def comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceMaxLinksPerHost, Boolean serviceSaveExternalLinkReferences, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceMaxLinksPerHost)))
            queryParams.put("service.max_links_per_host", String.valueOf(serviceMaxLinksPerHost))

        if (!"null".equals(String.valueOf(serviceSaveExternalLinkReferences)))
            queryParams.put("service.save_external_link_references", String.valueOf(serviceSaveExternalLinkReferences))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.class )

    }

    def comDayCqRewriterProcessorImplHtmlParserFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> htmlparserProcessTags, Boolean htmlparserPreserveCamelCase, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(htmlparserProcessTags)))
            queryParams.put("htmlparser.processTags", String.valueOf(htmlparserProcessTags))

        if (!"null".equals(String.valueOf(htmlparserPreserveCamelCase)))
            queryParams.put("htmlparser.preserveCamelCase", String.valueOf(htmlparserPreserveCamelCase))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.class )

    }

    def comDayCqSearchImplBuilderQueryBuilderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> excerptProperties, Integer cacheMaxEntries, Integer cacheEntryLifetime, Boolean xpathUnion, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(excerptProperties)))
            queryParams.put("excerpt.properties", String.valueOf(excerptProperties))

        if (!"null".equals(String.valueOf(cacheMaxEntries)))
            queryParams.put("cache.max.entries", String.valueOf(cacheMaxEntries))

        if (!"null".equals(String.valueOf(cacheEntryLifetime)))
            queryParams.put("cache.entry.lifetime", String.valueOf(cacheEntryLifetime))

        if (!"null".equals(String.valueOf(xpathUnion)))
            queryParams.put("xpath.union", String.valueOf(xpathUnion))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqSearchImplBuilderQueryBuilderImplInfo.class )

    }

    def comDayCqSearchSuggestImplSuggestionIndexManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String pathBuilderTarget, String suggestBasepath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(pathBuilderTarget)))
            queryParams.put("pathBuilder.target", String.valueOf(pathBuilderTarget))

        if (!"null".equals(String.valueOf(suggestBasepath)))
            queryParams.put("suggest.basepath", String.valueOf(suggestBasepath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.class )

    }

    def comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqSearchpromoteConfighandlerEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqSearchpromoteConfighandlerEnabled)))
            queryParams.put("cq.searchpromote.confighandler.enabled", String.valueOf(cqSearchpromoteConfighandlerEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.class )

    }

    def comDayCqSearchpromoteImplSearchPromoteServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String cqSearchpromoteConfigurationServerUri, String cqSearchpromoteConfigurationEnvironment, Integer connectionTimeout, Integer socketTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqSearchpromoteConfigurationServerUri)))
            queryParams.put("cq.searchpromote.configuration.server.uri", String.valueOf(cqSearchpromoteConfigurationServerUri))

        if (!"null".equals(String.valueOf(cqSearchpromoteConfigurationEnvironment)))
            queryParams.put("cq.searchpromote.configuration.environment", String.valueOf(cqSearchpromoteConfigurationEnvironment))

        if (!"null".equals(String.valueOf(connectionTimeout)))
            queryParams.put("connection.timeout", String.valueOf(connectionTimeout))

        if (!"null".equals(String.valueOf(socketTimeout)))
            queryParams.put("socket.timeout", String.valueOf(socketTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.class )

    }

    def comDayCqSecurityACLSetup ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqAclsetupRules, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.security.ACLSetup"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqAclsetupRules)))
            queryParams.put("cq.aclsetup.rules", String.valueOf(cqAclsetupRules))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqSecurityACLSetupInfo.class )

    }

    def comDayCqStatisticsImplStatisticsServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer schedulerPeriod, Boolean schedulerConcurrent, String path, String workspace, String keywordsPath, Boolean asyncEntries, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerPeriod)))
            queryParams.put("scheduler.period", String.valueOf(schedulerPeriod))

        if (!"null".equals(String.valueOf(schedulerConcurrent)))
            queryParams.put("scheduler.concurrent", String.valueOf(schedulerConcurrent))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(workspace)))
            queryParams.put("workspace", String.valueOf(workspace))

        if (!"null".equals(String.valueOf(keywordsPath)))
            queryParams.put("keywordsPath", String.valueOf(keywordsPath))

        if (!"null".equals(String.valueOf(asyncEntries)))
            queryParams.put("asyncEntries", String.valueOf(asyncEntries))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqStatisticsImplStatisticsServiceImplInfo.class )

    }

    def comDayCqTaggingImplJcrTagManagerFactoryImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean validationEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(validationEnabled)))
            queryParams.put("validation.enabled", String.valueOf(validationEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.class )

    }

    def comDayCqTaggingImplSearchTagPredicateEvaluator ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean ignorePath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(ignorePath)))
            queryParams.put("ignore_path", String.valueOf(ignorePath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.class )

    }

    def comDayCqTaggingImplTagGarbageCollector ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqTaggingImplTagGarbageCollectorInfo.class )

    }

    def comDayCqWcmContentsyncImplHandlerPagesUpdateHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqPagesupdatehandlerImageresourcetypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqPagesupdatehandlerImageresourcetypes)))
            queryParams.put("cq.pagesupdatehandler.imageresourcetypes", String.valueOf(cqPagesupdatehandlerImageresourcetypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.class )

    }

    def comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqContentsyncPathrewritertransformerMappingLinks, List<String> cqContentsyncPathrewritertransformerMappingClientlibs, List<String> cqContentsyncPathrewritertransformerMappingImages, String cqContentsyncPathrewritertransformerAttributePattern, String cqContentsyncPathrewritertransformerClientlibraryPattern, String cqContentsyncPathrewritertransformerClientlibraryReplace, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqContentsyncPathrewritertransformerMappingLinks)))
            queryParams.put("cq.contentsync.pathrewritertransformer.mapping.links", String.valueOf(cqContentsyncPathrewritertransformerMappingLinks))

        if (!"null".equals(String.valueOf(cqContentsyncPathrewritertransformerMappingClientlibs)))
            queryParams.put("cq.contentsync.pathrewritertransformer.mapping.clientlibs", String.valueOf(cqContentsyncPathrewritertransformerMappingClientlibs))

        if (!"null".equals(String.valueOf(cqContentsyncPathrewritertransformerMappingImages)))
            queryParams.put("cq.contentsync.pathrewritertransformer.mapping.images", String.valueOf(cqContentsyncPathrewritertransformerMappingImages))

        if (!"null".equals(String.valueOf(cqContentsyncPathrewritertransformerAttributePattern)))
            queryParams.put("cq.contentsync.pathrewritertransformer.attribute.pattern", String.valueOf(cqContentsyncPathrewritertransformerAttributePattern))

        if (!"null".equals(String.valueOf(cqContentsyncPathrewritertransformerClientlibraryPattern)))
            queryParams.put("cq.contentsync.pathrewritertransformer.clientlibrary.pattern", String.valueOf(cqContentsyncPathrewritertransformerClientlibraryPattern))

        if (!"null".equals(String.valueOf(cqContentsyncPathrewritertransformerClientlibraryReplace)))
            queryParams.put("cq.contentsync.pathrewritertransformer.clientlibrary.replace", String.valueOf(cqContentsyncPathrewritertransformerClientlibraryReplace))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.class )

    }

    def comDayCqWcmCoreImplAuthoringUIModeServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String authoringUIModeServiceDefault, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(authoringUIModeServiceDefault)))
            queryParams.put("authoringUIModeService.default", String.valueOf(authoringUIModeServiceDefault))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.class )

    }

    def comDayCqWcmCoreImplCommandsWCMCommandServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> wcmcommandservletDeleteWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(wcmcommandservletDeleteWhitelist)))
            queryParams.put("wcmcommandservlet.delete_whitelist", String.valueOf(wcmcommandservletDeleteWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.class )

    }

    def comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String dimDefaultMode, Boolean dimAppcacheEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(dimDefaultMode)))
            queryParams.put("dim.default.mode", String.valueOf(dimDefaultMode))

        if (!"null".equals(String.valueOf(dimAppcacheEnabled)))
            queryParams.put("dim.appcache.enabled", String.valueOf(dimAppcacheEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.class )

    }

    def comDayCqWcmCoreImplEventPageEventAuditListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String configured, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(configured)))
            queryParams.put("configured", String.valueOf(configured))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.class )

    }

    def comDayCqWcmCoreImplEventPagePostProcessor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> paths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(paths)))
            queryParams.put("paths", String.valueOf(paths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplEventPagePostProcessorInfo.class )

    }

    def comDayCqWcmCoreImplEventRepositoryChangeEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> paths, List<String> excludedPaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(paths)))
            queryParams.put("paths", String.valueOf(paths))

        if (!"null".equals(String.valueOf(excludedPaths)))
            queryParams.put("excludedPaths", String.valueOf(excludedPaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.class )

    }

    def comDayCqWcmCoreImplEventTemplatePostProcessor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String paths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(paths)))
            queryParams.put("paths", String.valueOf(paths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.class )

    }

    def comDayCqWcmCoreImplLanguageManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String langmgrListPath, List<String> langmgrCountryDefault, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(langmgrListPath)))
            queryParams.put("langmgr.list.path", String.valueOf(langmgrListPath))

        if (!"null".equals(String.valueOf(langmgrCountryDefault)))
            queryParams.put("langmgr.country.default", String.valueOf(langmgrCountryDefault))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplLanguageManagerImplInfo.class )

    }

    def comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String linkExpiredPrefix, Boolean linkExpiredRemove, String linkExpiredSuffix, String linkInvalidPrefix, Boolean linkInvalidRemove, String linkInvalidSuffix, String linkPredatedPrefix, Boolean linkPredatedRemove, String linkPredatedSuffix, List<String> linkWcmmodes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(linkExpiredPrefix)))
            queryParams.put("link.expired.prefix", String.valueOf(linkExpiredPrefix))

        if (!"null".equals(String.valueOf(linkExpiredRemove)))
            queryParams.put("link.expired.remove", String.valueOf(linkExpiredRemove))

        if (!"null".equals(String.valueOf(linkExpiredSuffix)))
            queryParams.put("link.expired.suffix", String.valueOf(linkExpiredSuffix))

        if (!"null".equals(String.valueOf(linkInvalidPrefix)))
            queryParams.put("link.invalid.prefix", String.valueOf(linkInvalidPrefix))

        if (!"null".equals(String.valueOf(linkInvalidRemove)))
            queryParams.put("link.invalid.remove", String.valueOf(linkInvalidRemove))

        if (!"null".equals(String.valueOf(linkInvalidSuffix)))
            queryParams.put("link.invalid.suffix", String.valueOf(linkInvalidSuffix))

        if (!"null".equals(String.valueOf(linkPredatedPrefix)))
            queryParams.put("link.predated.prefix", String.valueOf(linkPredatedPrefix))

        if (!"null".equals(String.valueOf(linkPredatedRemove)))
            queryParams.put("link.predated.remove", String.valueOf(linkPredatedRemove))

        if (!"null".equals(String.valueOf(linkPredatedSuffix)))
            queryParams.put("link.predated.suffix", String.valueOf(linkPredatedSuffix))

        if (!"null".equals(String.valueOf(linkWcmmodes)))
            queryParams.put("link.wcmmodes", String.valueOf(linkWcmmodes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.class )

    }

    def comDayCqWcmCoreImplPagePageInfoAggregatorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String pageInfoProviderPropertyRegexDefault, String pageInfoProviderPropertyName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(pageInfoProviderPropertyRegexDefault)))
            queryParams.put("page.info.provider.property.regex.default", String.valueOf(pageInfoProviderPropertyRegexDefault))

        if (!"null".equals(String.valueOf(pageInfoProviderPropertyName)))
            queryParams.put("page.info.provider.property.name", String.valueOf(pageInfoProviderPropertyName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.class )

    }

    def comDayCqWcmCoreImplPagePageManagerFactoryImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String illegalCharMapping, Boolean pageSubTreeActivationCheck, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(illegalCharMapping)))
            queryParams.put("illegalCharMapping", String.valueOf(illegalCharMapping))

        if (!"null".equals(String.valueOf(pageSubTreeActivationCheck)))
            queryParams.put("pageSubTreeActivationCheck", String.valueOf(pageSubTreeActivationCheck))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.class )

    }

    def comDayCqWcmCoreImplReferencesContentContentReferenceConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> contentReferenceConfigResourceTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(contentReferenceConfigResourceTypes)))
            queryParams.put("contentReferenceConfig.resourceTypes", String.valueOf(contentReferenceConfigResourceTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.class )

    }

    def comDayCqWcmCoreImplServletsContentfinderAssetViewHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean damShowexpired, Boolean damShowhidden, Boolean tagTitleSearch, String guessTotal, String damExpiryProperty, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(damShowexpired)))
            queryParams.put("dam.showexpired", String.valueOf(damShowexpired))

        if (!"null".equals(String.valueOf(damShowhidden)))
            queryParams.put("dam.showhidden", String.valueOf(damShowhidden))

        if (!"null".equals(String.valueOf(tagTitleSearch)))
            queryParams.put("tagTitleSearch", String.valueOf(tagTitleSearch))

        if (!"null".equals(String.valueOf(guessTotal)))
            queryParams.put("guessTotal", String.valueOf(guessTotal))

        if (!"null".equals(String.valueOf(damExpiryProperty)))
            queryParams.put("dam.expiryProperty", String.valueOf(damExpiryProperty))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.class )

    }

    def comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> itemResourceTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(itemResourceTypes)))
            queryParams.put("item.resource.types", String.valueOf(itemResourceTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.class )

    }

    def comDayCqWcmCoreImplServletsContentfinderPageViewHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String guessTotal, Boolean tagTitleSearch, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(guessTotal)))
            queryParams.put("guessTotal", String.valueOf(guessTotal))

        if (!"null".equals(String.valueOf(tagTitleSearch)))
            queryParams.put("tagTitleSearch", String.valueOf(tagTitleSearch))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.class )

    }

    def comDayCqWcmCoreImplServletsFindReplaceServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> scope, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(scope)))
            queryParams.put("scope", String.valueOf(scope))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplServletsFindReplaceServletInfo.class )

    }

    def comDayCqWcmCoreImplServletsReferenceSearchServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer referencesearchservletMaxReferencesPerPage, Integer referencesearchservletMaxPages, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(referencesearchservletMaxReferencesPerPage)))
            queryParams.put("referencesearchservlet.maxReferencesPerPage", String.valueOf(referencesearchservletMaxReferencesPerPage))

        if (!"null".equals(String.valueOf(referencesearchservletMaxPages)))
            queryParams.put("referencesearchservlet.maxPages", String.valueOf(referencesearchservletMaxPages))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.class )

    }

    def comDayCqWcmCoreImplServletsThumbnailServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String workspace, List<String> dimensions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(workspace)))
            queryParams.put("workspace", String.valueOf(workspace))

        if (!"null".equals(String.valueOf(dimensions)))
            queryParams.put("dimensions", String.valueOf(dimensions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplServletsThumbnailServletInfo.class )

    }

    def comDayCqWcmCoreImplUtilsDefaultPageNameValidator ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String nonValidChars, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(nonValidChars)))
            queryParams.put("nonValidChars", String.valueOf(nonValidChars))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.class )

    }

    def comDayCqWcmCoreImplVariantsPageVariantsProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String defaultExternalizerDomain, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(defaultExternalizerDomain)))
            queryParams.put("default.externalizer.domain", String.valueOf(defaultExternalizerDomain))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.class )

    }

    def comDayCqWcmCoreImplVersionManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean versionmanagerCreateVersionOnActivation, Boolean versionmanagerPurgingEnabled, List<String> versionmanagerPurgePaths, List<String> versionmanagerIvPaths, Integer versionmanagerMaxAgeDays, Integer versionmanagerMaxNumberVersions, Integer versionmanagerMinNumberVersions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(versionmanagerCreateVersionOnActivation)))
            queryParams.put("versionmanager.createVersionOnActivation", String.valueOf(versionmanagerCreateVersionOnActivation))

        if (!"null".equals(String.valueOf(versionmanagerPurgingEnabled)))
            queryParams.put("versionmanager.purgingEnabled", String.valueOf(versionmanagerPurgingEnabled))

        if (!"null".equals(String.valueOf(versionmanagerPurgePaths)))
            queryParams.put("versionmanager.purgePaths", String.valueOf(versionmanagerPurgePaths))

        if (!"null".equals(String.valueOf(versionmanagerIvPaths)))
            queryParams.put("versionmanager.ivPaths", String.valueOf(versionmanagerIvPaths))

        if (!"null".equals(String.valueOf(versionmanagerMaxAgeDays)))
            queryParams.put("versionmanager.maxAgeDays", String.valueOf(versionmanagerMaxAgeDays))

        if (!"null".equals(String.valueOf(versionmanagerMaxNumberVersions)))
            queryParams.put("versionmanager.maxNumberVersions", String.valueOf(versionmanagerMaxNumberVersions))

        if (!"null".equals(String.valueOf(versionmanagerMinNumberVersions)))
            queryParams.put("versionmanager.minNumberVersions", String.valueOf(versionmanagerMinNumberVersions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplVersionManagerImplInfo.class )

    }

    def comDayCqWcmCoreImplVersionPurgeTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> versionpurgePaths, Boolean versionpurgeRecursive, Integer versionpurgeMaxVersions, Integer versionpurgeMinVersions, Integer versionpurgeMaxAgeDays, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(versionpurgePaths)))
            queryParams.put("versionpurge.paths", String.valueOf(versionpurgePaths))

        if (!"null".equals(String.valueOf(versionpurgeRecursive)))
            queryParams.put("versionpurge.recursive", String.valueOf(versionpurgeRecursive))

        if (!"null".equals(String.valueOf(versionpurgeMaxVersions)))
            queryParams.put("versionpurge.maxVersions", String.valueOf(versionpurgeMaxVersions))

        if (!"null".equals(String.valueOf(versionpurgeMinVersions)))
            queryParams.put("versionpurge.minVersions", String.valueOf(versionpurgeMinVersions))

        if (!"null".equals(String.valueOf(versionpurgeMaxAgeDays)))
            queryParams.put("versionpurge.maxAgeDays", String.valueOf(versionpurgeMaxAgeDays))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplVersionPurgeTaskInfo.class )

    }

    def comDayCqWcmCoreImplWCMDebugFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean wcmdbgfilterEnabled, Boolean wcmdbgfilterJspDebug, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(wcmdbgfilterEnabled)))
            queryParams.put("wcmdbgfilter.enabled", String.valueOf(wcmdbgfilterEnabled))

        if (!"null".equals(String.valueOf(wcmdbgfilterJspDebug)))
            queryParams.put("wcmdbgfilter.jspDebug", String.valueOf(wcmdbgfilterJspDebug))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplWCMDebugFilterInfo.class )

    }

    def comDayCqWcmCoreImplWCMDeveloperModeFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean wcmdevmodefilterEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(wcmdevmodefilterEnabled)))
            queryParams.put("wcmdevmodefilter.enabled", String.valueOf(wcmdevmodefilterEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.class )

    }

    def comDayCqWcmCoreImplWarpTimeWarpFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String filterOrder, String filterScope, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(filterOrder)))
            queryParams.put("filter.order", String.valueOf(filterOrder))

        if (!"null".equals(String.valueOf(filterScope)))
            queryParams.put("filter.scope", String.valueOf(filterScope))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.class )

    }

    def comDayCqWcmCoreMvtMVTStatisticsImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String mvtstatisticsTrackingurl, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mvtstatisticsTrackingurl)))
            queryParams.put("mvtstatistics.trackingurl", String.valueOf(mvtstatisticsTrackingurl))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreMvtMVTStatisticsImplInfo.class )

    }

    def comDayCqWcmCoreStatsPageViewStatisticsImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String pageviewstatisticsTrackingurl, String pageviewstatisticsTrackingscriptEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(pageviewstatisticsTrackingurl)))
            queryParams.put("pageviewstatistics.trackingurl", String.valueOf(pageviewstatisticsTrackingurl))

        if (!"null".equals(String.valueOf(pageviewstatisticsTrackingscriptEnabled)))
            queryParams.put("pageviewstatistics.trackingscript.enabled", String.valueOf(pageviewstatisticsTrackingscriptEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.class )

    }

    def comDayCqWcmCoreWCMRequestFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String wcmfilterMode, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(wcmfilterMode)))
            queryParams.put("wcmfilter.mode", String.valueOf(wcmfilterMode))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmCoreWCMRequestFilterInfo.class )

    }

    def comDayCqWcmDesignimporterDesignPackageImporter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> extractFilter, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(extractFilter)))
            queryParams.put("extract.filter", String.valueOf(extractFilter))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterDesignPackageImporterInfo.class )

    }

    def comDayCqWcmDesignimporterImplCanvasBuilderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String filepattern, Boolean buildPageNodes, Boolean buildClientLibs, Boolean buildCanvasComponent, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(filepattern)))
            queryParams.put("filepattern", String.valueOf(filepattern))

        if (!"null".equals(String.valueOf(buildPageNodes)))
            queryParams.put("build.page.nodes", String.valueOf(buildPageNodes))

        if (!"null".equals(String.valueOf(buildClientLibs)))
            queryParams.put("build.client.libs", String.valueOf(buildClientLibs))

        if (!"null".equals(String.valueOf(buildCanvasComponent)))
            queryParams.put("build.canvas.component", String.valueOf(buildCanvasComponent))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.class )

    }

    def comDayCqWcmDesignimporterImplCanvasPageDeleteHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer minThreadPoolSize, Integer maxThreadPoolSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(minThreadPoolSize)))
            queryParams.put("minThreadPoolSize", String.valueOf(minThreadPoolSize))

        if (!"null".equals(String.valueOf(maxThreadPoolSize)))
            queryParams.put("maxThreadPoolSize", String.valueOf(maxThreadPoolSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.class )

    }

    def comDayCqWcmDesignimporterImplEntryPreprocessorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String searchPattern, String replacePattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(searchPattern)))
            queryParams.put("search.pattern", String.valueOf(searchPattern))

        if (!"null".equals(String.valueOf(replacePattern)))
            queryParams.put("replace.pattern", String.valueOf(replacePattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.class )

    }

    def comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String filepattern, List<String> deviceGroups, Boolean buildPageNodes, Boolean buildClientLibs, Boolean buildCanvasComponent, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(filepattern)))
            queryParams.put("filepattern", String.valueOf(filepattern))

        if (!"null".equals(String.valueOf(deviceGroups)))
            queryParams.put("device.groups", String.valueOf(deviceGroups))

        if (!"null".equals(String.valueOf(buildPageNodes)))
            queryParams.put("build.page.nodes", String.valueOf(buildPageNodes))

        if (!"null".equals(String.valueOf(buildClientLibs)))
            queryParams.put("build.client.libs", String.valueOf(buildClientLibs))

        if (!"null".equals(String.valueOf(buildCanvasComponent)))
            queryParams.put("build.canvas.component", String.valueOf(buildCanvasComponent))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, String componentResourceType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        if (!"null".equals(String.valueOf(componentResourceType)))
            queryParams.put("component.resourceType", String.valueOf(componentResourceType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, String componentResourceType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        if (!"null".equals(String.valueOf(componentResourceType)))
            queryParams.put("component.resourceType", String.valueOf(componentResourceType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, String componentResourceType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        if (!"null".equals(String.valueOf(componentResourceType)))
            queryParams.put("component.resourceType", String.valueOf(componentResourceType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, String componentResourceType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        if (!"null".equals(String.valueOf(componentResourceType)))
            queryParams.put("component.resourceType", String.valueOf(componentResourceType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.class )

    }

    def comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String tagpattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(tagpattern)))
            queryParams.put("tagpattern", String.valueOf(tagpattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.class )

    }

    def comDayCqWcmFoundationFormsImplFormChooserServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String serviceName, String slingServletResourceTypes, String slingServletSelectors, List<String> slingServletMethods, Boolean formsFormchooserservletAdvansesearchRequire, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("service.name", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(slingServletResourceTypes)))
            queryParams.put("sling.servlet.resourceTypes", String.valueOf(slingServletResourceTypes))

        if (!"null".equals(String.valueOf(slingServletSelectors)))
            queryParams.put("sling.servlet.selectors", String.valueOf(slingServletSelectors))

        if (!"null".equals(String.valueOf(slingServletMethods)))
            queryParams.put("sling.servlet.methods", String.valueOf(slingServletMethods))

        if (!"null".equals(String.valueOf(formsFormchooserservletAdvansesearchRequire)))
            queryParams.put("forms.formchooserservlet.advansesearch.require", String.valueOf(formsFormchooserservletAdvansesearchRequire))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmFoundationFormsImplFormChooserServletInfo.class )

    }

    def comDayCqWcmFoundationFormsImplFormParagraphPostProcessor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean formsFormparagraphpostprocessorEnabled, List<String> formsFormparagraphpostprocessorFormresourcetypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(formsFormparagraphpostprocessorEnabled)))
            queryParams.put("forms.formparagraphpostprocessor.enabled", String.valueOf(formsFormparagraphpostprocessorEnabled))

        if (!"null".equals(String.valueOf(formsFormparagraphpostprocessorFormresourcetypes)))
            queryParams.put("forms.formparagraphpostprocessor.formresourcetypes", String.valueOf(formsFormparagraphpostprocessorFormresourcetypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.class )

    }

    def comDayCqWcmFoundationFormsImplFormsHandlingServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String nameWhitelist, Boolean allowExpressions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(nameWhitelist)))
            queryParams.put("name.whitelist", String.valueOf(nameWhitelist))

        if (!"null".equals(String.valueOf(allowExpressions)))
            queryParams.put("allow.expressions", String.valueOf(allowExpressions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.class )

    }

    def comDayCqWcmFoundationFormsImplMailServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingServletResourceTypes, String slingServletSelectors, List<String> resourceWhitelist, String resourceBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletResourceTypes)))
            queryParams.put("sling.servlet.resourceTypes", String.valueOf(slingServletResourceTypes))

        if (!"null".equals(String.valueOf(slingServletSelectors)))
            queryParams.put("sling.servlet.selectors", String.valueOf(slingServletSelectors))

        if (!"null".equals(String.valueOf(resourceWhitelist)))
            queryParams.put("resource.whitelist", String.valueOf(resourceWhitelist))

        if (!"null".equals(String.valueOf(resourceBlacklist)))
            queryParams.put("resource.blacklist", String.valueOf(resourceBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmFoundationFormsImplMailServletInfo.class )

    }

    def comDayCqWcmFoundationImplAdaptiveImageComponentServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> adaptSupportedWidths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(adaptSupportedWidths)))
            queryParams.put("adapt.supported.widths", String.valueOf(adaptSupportedWidths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.class )

    }

    def comDayCqWcmFoundationImplHTTPAuthHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String path, Boolean authHttpNologin, String authHttpRealm, String authDefaultLoginpage, List<String> authCredForm, List<String> authCredUtf8, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(authHttpNologin)))
            queryParams.put("auth.http.nologin", String.valueOf(authHttpNologin))

        if (!"null".equals(String.valueOf(authHttpRealm)))
            queryParams.put("auth.http.realm", String.valueOf(authHttpRealm))

        if (!"null".equals(String.valueOf(authDefaultLoginpage)))
            queryParams.put("auth.default.loginpage", String.valueOf(authDefaultLoginpage))

        if (!"null".equals(String.valueOf(authCredForm)))
            queryParams.put("auth.cred.form", String.valueOf(authCredForm))

        if (!"null".equals(String.valueOf(authCredUtf8)))
            queryParams.put("auth.cred.utf8", String.valueOf(authCredUtf8))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.class )

    }

    def comDayCqWcmFoundationImplPageImpressionsTracker ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingAuthRequirements, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingAuthRequirements)))
            queryParams.put("sling.auth.requirements", String.valueOf(slingAuthRequirements))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.class )

    }

    def comDayCqWcmFoundationImplPageRedirectServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> excludedResourceTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(excludedResourceTypes)))
            queryParams.put("excluded.resource.types", String.valueOf(excludedResourceTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmFoundationImplPageRedirectServletInfo.class )

    }

    def comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> defaultAttachmentTypeBlacklist, List<String> baselineAttachmentTypeBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(defaultAttachmentTypeBlacklist)))
            queryParams.put("default.attachment.type.blacklist", String.valueOf(defaultAttachmentTypeBlacklist))

        if (!"null".equals(String.valueOf(baselineAttachmentTypeBlacklist)))
            queryParams.put("baseline.attachment.type.blacklist", String.valueOf(baselineAttachmentTypeBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.class )

    }

    def comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> parameterWhitelist, List<String> parameterWhitelistPrefixes, List<String> binaryParameterWhitelist, List<String> modifierWhitelist, List<String> operationWhitelist, List<String> operationWhitelistPrefixes, List<String> typehintWhitelist, List<String> resourcetypeWhitelist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(parameterWhitelist)))
            queryParams.put("parameter.whitelist", String.valueOf(parameterWhitelist))

        if (!"null".equals(String.valueOf(parameterWhitelistPrefixes)))
            queryParams.put("parameter.whitelist.prefixes", String.valueOf(parameterWhitelistPrefixes))

        if (!"null".equals(String.valueOf(binaryParameterWhitelist)))
            queryParams.put("binary.parameter.whitelist", String.valueOf(binaryParameterWhitelist))

        if (!"null".equals(String.valueOf(modifierWhitelist)))
            queryParams.put("modifier.whitelist", String.valueOf(modifierWhitelist))

        if (!"null".equals(String.valueOf(operationWhitelist)))
            queryParams.put("operation.whitelist", String.valueOf(operationWhitelist))

        if (!"null".equals(String.valueOf(operationWhitelistPrefixes)))
            queryParams.put("operation.whitelist.prefixes", String.valueOf(operationWhitelistPrefixes))

        if (!"null".equals(String.valueOf(typehintWhitelist)))
            queryParams.put("typehint.whitelist", String.valueOf(typehintWhitelist))

        if (!"null".equals(String.valueOf(resourcetypeWhitelist)))
            queryParams.put("resourcetype.whitelist", String.valueOf(resourcetypeWhitelist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.class )

    }

    def comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean deviceInfoTransformerEnabled, String deviceInfoTransformerCssStyle, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(deviceInfoTransformerEnabled)))
            queryParams.put("device.info.transformer.enabled", String.valueOf(deviceInfoTransformerEnabled))

        if (!"null".equals(String.valueOf(deviceInfoTransformerCssStyle)))
            queryParams.put("device.info.transformer.css.style", String.valueOf(deviceInfoTransformerCssStyle))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.class )

    }

    def comDayCqWcmMobileCoreImplRedirectRedirectFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean redirectEnabled, Boolean redirectStatsEnabled, List<String> redirectExtensions, List<String> redirectPaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(redirectEnabled)))
            queryParams.put("redirect.enabled", String.valueOf(redirectEnabled))

        if (!"null".equals(String.valueOf(redirectStatsEnabled)))
            queryParams.put("redirect.stats.enabled", String.valueOf(redirectStatsEnabled))

        if (!"null".equals(String.valueOf(redirectExtensions)))
            queryParams.put("redirect.extensions", String.valueOf(redirectExtensions))

        if (!"null".equals(String.valueOf(redirectPaths)))
            queryParams.put("redirect.paths", String.valueOf(redirectPaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.class )

    }

    def comDayCqWcmMsmImplActionsContentCopyActionFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqWcmMsmActionExcludednodetypes, List<String> cqWcmMsmActionExcludedparagraphitems, List<String> cqWcmMsmActionExcludedprops, String contentcopyactionOrderStyle, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludednodetypes)))
            queryParams.put("cq.wcm.msm.action.excludednodetypes", String.valueOf(cqWcmMsmActionExcludednodetypes))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedparagraphitems)))
            queryParams.put("cq.wcm.msm.action.excludedparagraphitems", String.valueOf(cqWcmMsmActionExcludedparagraphitems))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedprops)))
            queryParams.put("cq.wcm.msm.action.excludedprops", String.valueOf(cqWcmMsmActionExcludedprops))

        if (!"null".equals(String.valueOf(contentcopyactionOrderStyle)))
            queryParams.put("contentcopyaction.order.style", String.valueOf(contentcopyactionOrderStyle))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.class )

    }

    def comDayCqWcmMsmImplActionsContentDeleteActionFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqWcmMsmActionExcludednodetypes, List<String> cqWcmMsmActionExcludedparagraphitems, List<String> cqWcmMsmActionExcludedprops, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludednodetypes)))
            queryParams.put("cq.wcm.msm.action.excludednodetypes", String.valueOf(cqWcmMsmActionExcludednodetypes))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedparagraphitems)))
            queryParams.put("cq.wcm.msm.action.excludedparagraphitems", String.valueOf(cqWcmMsmActionExcludedparagraphitems))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedprops)))
            queryParams.put("cq.wcm.msm.action.excludedprops", String.valueOf(cqWcmMsmActionExcludedprops))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.class )

    }

    def comDayCqWcmMsmImplActionsContentUpdateActionFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqWcmMsmActionExcludednodetypes, List<String> cqWcmMsmActionExcludedparagraphitems, List<String> cqWcmMsmActionExcludedprops, List<String> cqWcmMsmActionIgnoredMixin, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludednodetypes)))
            queryParams.put("cq.wcm.msm.action.excludednodetypes", String.valueOf(cqWcmMsmActionExcludednodetypes))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedparagraphitems)))
            queryParams.put("cq.wcm.msm.action.excludedparagraphitems", String.valueOf(cqWcmMsmActionExcludedparagraphitems))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedprops)))
            queryParams.put("cq.wcm.msm.action.excludedprops", String.valueOf(cqWcmMsmActionExcludedprops))

        if (!"null".equals(String.valueOf(cqWcmMsmActionIgnoredMixin)))
            queryParams.put("cq.wcm.msm.action.ignoredMixin", String.valueOf(cqWcmMsmActionIgnoredMixin))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.class )

    }

    def comDayCqWcmMsmImplActionsOrderChildrenActionFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqWcmMsmActionExcludednodetypes, List<String> cqWcmMsmActionExcludedparagraphitems, List<String> cqWcmMsmActionExcludedprops, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludednodetypes)))
            queryParams.put("cq.wcm.msm.action.excludednodetypes", String.valueOf(cqWcmMsmActionExcludednodetypes))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedparagraphitems)))
            queryParams.put("cq.wcm.msm.action.excludedparagraphitems", String.valueOf(cqWcmMsmActionExcludedparagraphitems))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedprops)))
            queryParams.put("cq.wcm.msm.action.excludedprops", String.valueOf(cqWcmMsmActionExcludedprops))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.class )

    }

    def comDayCqWcmMsmImplActionsPageMoveActionFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqWcmMsmActionExcludednodetypes, List<String> cqWcmMsmActionExcludedparagraphitems, List<String> cqWcmMsmActionExcludedprops, Boolean cqWcmMsmImplActionsPagemovePropReferenceUpdate, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludednodetypes)))
            queryParams.put("cq.wcm.msm.action.excludednodetypes", String.valueOf(cqWcmMsmActionExcludednodetypes))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedparagraphitems)))
            queryParams.put("cq.wcm.msm.action.excludedparagraphitems", String.valueOf(cqWcmMsmActionExcludedparagraphitems))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedprops)))
            queryParams.put("cq.wcm.msm.action.excludedprops", String.valueOf(cqWcmMsmActionExcludedprops))

        if (!"null".equals(String.valueOf(cqWcmMsmImplActionsPagemovePropReferenceUpdate)))
            queryParams.put("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate", String.valueOf(cqWcmMsmImplActionsPagemovePropReferenceUpdate))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.class )

    }

    def comDayCqWcmMsmImplActionsReferencesUpdateActionFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqWcmMsmActionExcludednodetypes, List<String> cqWcmMsmActionExcludedparagraphitems, List<String> cqWcmMsmActionExcludedprops, Boolean cqWcmMsmImplActionReferencesupdatePropUpdateNested, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludednodetypes)))
            queryParams.put("cq.wcm.msm.action.excludednodetypes", String.valueOf(cqWcmMsmActionExcludednodetypes))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedparagraphitems)))
            queryParams.put("cq.wcm.msm.action.excludedparagraphitems", String.valueOf(cqWcmMsmActionExcludedparagraphitems))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedprops)))
            queryParams.put("cq.wcm.msm.action.excludedprops", String.valueOf(cqWcmMsmActionExcludedprops))

        if (!"null".equals(String.valueOf(cqWcmMsmImplActionReferencesupdatePropUpdateNested)))
            queryParams.put("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested", String.valueOf(cqWcmMsmImplActionReferencesupdatePropUpdateNested))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.class )

    }

    def comDayCqWcmMsmImplActionsVersionCopyActionFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cqWcmMsmActionExcludednodetypes, List<String> cqWcmMsmActionExcludedparagraphitems, List<String> cqWcmMsmActionExcludedprops, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludednodetypes)))
            queryParams.put("cq.wcm.msm.action.excludednodetypes", String.valueOf(cqWcmMsmActionExcludednodetypes))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedparagraphitems)))
            queryParams.put("cq.wcm.msm.action.excludedparagraphitems", String.valueOf(cqWcmMsmActionExcludedparagraphitems))

        if (!"null".equals(String.valueOf(cqWcmMsmActionExcludedprops)))
            queryParams.put("cq.wcm.msm.action.excludedprops", String.valueOf(cqWcmMsmActionExcludedprops))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.class )

    }

    def comDayCqWcmMsmImplLiveRelationshipManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String liverelationshipmgrRelationsconfigDefault, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(liverelationshipmgrRelationsconfigDefault)))
            queryParams.put("liverelationshipmgr.relationsconfig.default", String.valueOf(liverelationshipmgrRelationsconfigDefault))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.class )

    }

    def comDayCqWcmMsmImplRolloutManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventFilter, List<String> rolloutmgrExcludedpropsDefault, List<String> rolloutmgrExcludedparagraphpropsDefault, List<String> rolloutmgrExcludednodetypesDefault, Integer rolloutmgrThreadpoolMaxsize, Integer rolloutmgrThreadpoolMaxshutdowntime, String rolloutmgrThreadpoolPriority, Integer rolloutmgrCommitSize, Boolean rolloutmgrConflicthandlingEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        if (!"null".equals(String.valueOf(rolloutmgrExcludedpropsDefault)))
            queryParams.put("rolloutmgr.excludedprops.default", String.valueOf(rolloutmgrExcludedpropsDefault))

        if (!"null".equals(String.valueOf(rolloutmgrExcludedparagraphpropsDefault)))
            queryParams.put("rolloutmgr.excludedparagraphprops.default", String.valueOf(rolloutmgrExcludedparagraphpropsDefault))

        if (!"null".equals(String.valueOf(rolloutmgrExcludednodetypesDefault)))
            queryParams.put("rolloutmgr.excludednodetypes.default", String.valueOf(rolloutmgrExcludednodetypesDefault))

        if (!"null".equals(String.valueOf(rolloutmgrThreadpoolMaxsize)))
            queryParams.put("rolloutmgr.threadpool.maxsize", String.valueOf(rolloutmgrThreadpoolMaxsize))

        if (!"null".equals(String.valueOf(rolloutmgrThreadpoolMaxshutdowntime)))
            queryParams.put("rolloutmgr.threadpool.maxshutdowntime", String.valueOf(rolloutmgrThreadpoolMaxshutdowntime))

        if (!"null".equals(String.valueOf(rolloutmgrThreadpoolPriority)))
            queryParams.put("rolloutmgr.threadpool.priority", String.valueOf(rolloutmgrThreadpoolPriority))

        if (!"null".equals(String.valueOf(rolloutmgrCommitSize)))
            queryParams.put("rolloutmgr.commit.size", String.valueOf(rolloutmgrCommitSize))

        if (!"null".equals(String.valueOf(rolloutmgrConflicthandlingEnabled)))
            queryParams.put("rolloutmgr.conflicthandling.enabled", String.valueOf(rolloutmgrConflicthandlingEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMsmImplRolloutManagerImplInfo.class )

    }

    def comDayCqWcmMsmImplServletsAuditLogServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer auditlogservletDefaultEventsCount, String auditlogservletDefaultPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(auditlogservletDefaultEventsCount)))
            queryParams.put("auditlogservlet.default.events.count", String.valueOf(auditlogservletDefaultEventsCount))

        if (!"null".equals(String.valueOf(auditlogservletDefaultPath)))
            queryParams.put("auditlogservlet.default.path", String.valueOf(auditlogservletDefaultPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmMsmImplServletsAuditLogServletInfo.class )

    }

    def comDayCqWcmNotificationEmailImplEmailChannel ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String emailFrom, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(emailFrom)))
            queryParams.put("email.from", String.valueOf(emailFrom))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmNotificationEmailImplEmailChannelInfo.class )

    }

    def comDayCqWcmNotificationImplNotificationManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> eventTopics, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventTopics)))
            queryParams.put("event.topics", String.valueOf(eventTopics))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmNotificationImplNotificationManagerImplInfo.class )

    }

    def comDayCqWcmScriptingImplBVPManager ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> comDayCqWcmScriptingBvpScriptEngines, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(comDayCqWcmScriptingBvpScriptEngines)))
            queryParams.put("com.day.cq.wcm.scripting.bvp.script.engines", String.valueOf(comDayCqWcmScriptingBvpScriptEngines))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmScriptingImplBVPManagerInfo.class )

    }

    def comDayCqWcmUndoUndoConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean cqWcmUndoEnabled, String cqWcmUndoPath, Integer cqWcmUndoValidity, Integer cqWcmUndoSteps, String cqWcmUndoPersistence, Boolean cqWcmUndoPersistenceMode, String cqWcmUndoMarkermode, List<String> cqWcmUndoWhitelist, List<String> cqWcmUndoBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cqWcmUndoEnabled)))
            queryParams.put("cq.wcm.undo.enabled", String.valueOf(cqWcmUndoEnabled))

        if (!"null".equals(String.valueOf(cqWcmUndoPath)))
            queryParams.put("cq.wcm.undo.path", String.valueOf(cqWcmUndoPath))

        if (!"null".equals(String.valueOf(cqWcmUndoValidity)))
            queryParams.put("cq.wcm.undo.validity", String.valueOf(cqWcmUndoValidity))

        if (!"null".equals(String.valueOf(cqWcmUndoSteps)))
            queryParams.put("cq.wcm.undo.steps", String.valueOf(cqWcmUndoSteps))

        if (!"null".equals(String.valueOf(cqWcmUndoPersistence)))
            queryParams.put("cq.wcm.undo.persistence", String.valueOf(cqWcmUndoPersistence))

        if (!"null".equals(String.valueOf(cqWcmUndoPersistenceMode)))
            queryParams.put("cq.wcm.undo.persistence.mode", String.valueOf(cqWcmUndoPersistenceMode))

        if (!"null".equals(String.valueOf(cqWcmUndoMarkermode)))
            queryParams.put("cq.wcm.undo.markermode", String.valueOf(cqWcmUndoMarkermode))

        if (!"null".equals(String.valueOf(cqWcmUndoWhitelist)))
            queryParams.put("cq.wcm.undo.whitelist", String.valueOf(cqWcmUndoWhitelist))

        if (!"null".equals(String.valueOf(cqWcmUndoBlacklist)))
            queryParams.put("cq.wcm.undo.blacklist", String.valueOf(cqWcmUndoBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmUndoUndoConfigInfo.class )

    }

    def comDayCqWcmWebservicesupportImplReplicationEventListener ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> flushAgents, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(flushAgents)))
            queryParams.put("Flush agents", String.valueOf(flushAgents))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.class )

    }

    def comDayCqWcmWorkflowImplWcmWorkflowServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String eventFilter, Integer minThreadPoolSize, Integer maxThreadPoolSize, Boolean cqWcmWorkflowTerminateOnActivate, List<String> cqWcmWorklfowTerminateExclusionList, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(eventFilter)))
            queryParams.put("event.filter", String.valueOf(eventFilter))

        if (!"null".equals(String.valueOf(minThreadPoolSize)))
            queryParams.put("minThreadPoolSize", String.valueOf(minThreadPoolSize))

        if (!"null".equals(String.valueOf(maxThreadPoolSize)))
            queryParams.put("maxThreadPoolSize", String.valueOf(maxThreadPoolSize))

        if (!"null".equals(String.valueOf(cqWcmWorkflowTerminateOnActivate)))
            queryParams.put("cq.wcm.workflow.terminate.on.activate", String.valueOf(cqWcmWorkflowTerminateOnActivate))

        if (!"null".equals(String.valueOf(cqWcmWorklfowTerminateExclusionList)))
            queryParams.put("cq.wcm.worklfow.terminate.exclusion.list", String.valueOf(cqWcmWorklfowTerminateExclusionList))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.class )

    }

    def comDayCqWcmWorkflowImplWorkflowPackageInfoProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> workflowpackageinfoproviderFilter, String workflowpackageinfoproviderFilterRootpath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(workflowpackageinfoproviderFilter)))
            queryParams.put("workflowpackageinfoprovider.filter", String.valueOf(workflowpackageinfoproviderFilter))

        if (!"null".equals(String.valueOf(workflowpackageinfoproviderFilterRootpath)))
            queryParams.put("workflowpackageinfoprovider.filter.rootpath", String.valueOf(workflowpackageinfoproviderFilterRootpath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.class )

    }

    def comDayCqWidgetImplHtmlLibraryManagerImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String htmllibmanagerClientmanager, Boolean htmllibmanagerDebug, Boolean htmllibmanagerDebugConsole, String htmllibmanagerDebugInitJs, String htmllibmanagerDefaultthemename, String htmllibmanagerDefaultuserthemename, String htmllibmanagerFirebuglitePath, Boolean htmllibmanagerForceCQUrlInfo, Boolean htmllibmanagerGzip, Integer htmllibmanagerMaxage, Integer htmllibmanagerMaxDataUriSize, Boolean htmllibmanagerMinify, List<String> htmllibmanagerPathList, Boolean htmllibmanagerTiming, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(htmllibmanagerClientmanager)))
            queryParams.put("htmllibmanager.clientmanager", String.valueOf(htmllibmanagerClientmanager))

        if (!"null".equals(String.valueOf(htmllibmanagerDebug)))
            queryParams.put("htmllibmanager.debug", String.valueOf(htmllibmanagerDebug))

        if (!"null".equals(String.valueOf(htmllibmanagerDebugConsole)))
            queryParams.put("htmllibmanager.debug.console", String.valueOf(htmllibmanagerDebugConsole))

        if (!"null".equals(String.valueOf(htmllibmanagerDebugInitJs)))
            queryParams.put("htmllibmanager.debug.init.js", String.valueOf(htmllibmanagerDebugInitJs))

        if (!"null".equals(String.valueOf(htmllibmanagerDefaultthemename)))
            queryParams.put("htmllibmanager.defaultthemename", String.valueOf(htmllibmanagerDefaultthemename))

        if (!"null".equals(String.valueOf(htmllibmanagerDefaultuserthemename)))
            queryParams.put("htmllibmanager.defaultuserthemename", String.valueOf(htmllibmanagerDefaultuserthemename))

        if (!"null".equals(String.valueOf(htmllibmanagerFirebuglitePath)))
            queryParams.put("htmllibmanager.firebuglite.path", String.valueOf(htmllibmanagerFirebuglitePath))

        if (!"null".equals(String.valueOf(htmllibmanagerForceCQUrlInfo)))
            queryParams.put("htmllibmanager.forceCQUrlInfo", String.valueOf(htmllibmanagerForceCQUrlInfo))

        if (!"null".equals(String.valueOf(htmllibmanagerGzip)))
            queryParams.put("htmllibmanager.gzip", String.valueOf(htmllibmanagerGzip))

        if (!"null".equals(String.valueOf(htmllibmanagerMaxage)))
            queryParams.put("htmllibmanager.maxage", String.valueOf(htmllibmanagerMaxage))

        if (!"null".equals(String.valueOf(htmllibmanagerMaxDataUriSize)))
            queryParams.put("htmllibmanager.maxDataUriSize", String.valueOf(htmllibmanagerMaxDataUriSize))

        if (!"null".equals(String.valueOf(htmllibmanagerMinify)))
            queryParams.put("htmllibmanager.minify", String.valueOf(htmllibmanagerMinify))

        if (!"null".equals(String.valueOf(htmllibmanagerPathList)))
            queryParams.put("htmllibmanager.path.list", String.valueOf(htmllibmanagerPathList))

        if (!"null".equals(String.valueOf(htmllibmanagerTiming)))
            queryParams.put("htmllibmanager.timing", String.valueOf(htmllibmanagerTiming))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWidgetImplHtmlLibraryManagerImplInfo.class )

    }

    def comDayCqWidgetImplWidgetExtensionProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> extendableWidgets, Boolean widgetextensionproviderDebug, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(extendableWidgets)))
            queryParams.put("extendable.widgets", String.valueOf(extendableWidgets))

        if (!"null".equals(String.valueOf(widgetextensionproviderDebug)))
            queryParams.put("widgetextensionprovider.debug", String.valueOf(widgetextensionproviderDebug))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWidgetImplWidgetExtensionProviderImplInfo.class )

    }

    def comDayCqWorkflowImplEmailEMailNotificationService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String fromAddress, String hostPrefix, Boolean notifyOnabort, Boolean notifyOncomplete, Boolean notifyOncontainercomplete, Boolean notifyUseronly, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(fromAddress)))
            queryParams.put("from.address", String.valueOf(fromAddress))

        if (!"null".equals(String.valueOf(hostPrefix)))
            queryParams.put("host.prefix", String.valueOf(hostPrefix))

        if (!"null".equals(String.valueOf(notifyOnabort)))
            queryParams.put("notify.onabort", String.valueOf(notifyOnabort))

        if (!"null".equals(String.valueOf(notifyOncomplete)))
            queryParams.put("notify.oncomplete", String.valueOf(notifyOncomplete))

        if (!"null".equals(String.valueOf(notifyOncontainercomplete)))
            queryParams.put("notify.oncontainercomplete", String.valueOf(notifyOncontainercomplete))

        if (!"null".equals(String.valueOf(notifyUseronly)))
            queryParams.put("notify.useronly", String.valueOf(notifyUseronly))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.class )

    }

    def comDayCqWorkflowImplEmailTaskEMailNotificationService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean notifyOnupdate, Boolean notifyOncomplete, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(notifyOnupdate)))
            queryParams.put("notify.onupdate", String.valueOf(notifyOnupdate))

        if (!"null".equals(String.valueOf(notifyOncomplete)))
            queryParams.put("notify.oncomplete", String.valueOf(notifyOncomplete))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.class )

    }

    def comDayCrxSecurityTokenImplImplTokenAuthenticationHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String path, String tokenRequiredAttr, String tokenAlternateUrl, Boolean tokenEncapsulated, List<String> skipTokenRefresh, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(tokenRequiredAttr)))
            queryParams.put("token.required.attr", String.valueOf(tokenRequiredAttr))

        if (!"null".equals(String.valueOf(tokenAlternateUrl)))
            queryParams.put("token.alternate.url", String.valueOf(tokenAlternateUrl))

        if (!"null".equals(String.valueOf(tokenEncapsulated)))
            queryParams.put("token.encapsulated", String.valueOf(tokenEncapsulated))

        if (!"null".equals(String.valueOf(skipTokenRefresh)))
            queryParams.put("skip.token.refresh", String.valueOf(skipTokenRefresh))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.class )

    }

    def comDayCrxSecurityTokenImplTokenCleanupTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enableTokenCleanupTask, String schedulerExpression, Integer batchSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enableTokenCleanupTask)))
            queryParams.put("enable.token.cleanup.task", String.valueOf(enableTokenCleanupTask))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        if (!"null".equals(String.valueOf(batchSize)))
            queryParams.put("batch.size", String.valueOf(batchSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.class )

    }

    def guideLocalizationService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> supportedLocales, List<String> localizableProperties, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/Guide Localization Service"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(supportedLocales)))
            queryParams.put("supportedLocales", String.valueOf(supportedLocales))

        if (!"null".equals(String.valueOf(localizableProperties)))
            queryParams.put("Localizable Properties", String.valueOf(localizableProperties))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    GuideLocalizationServiceInfo.class )

    }

    def messagingUserComponentFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/MessagingUserComponentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    MessagingUserComponentFactoryInfo.class )

    }

    def orgApacheAriesJmxFrameworkStateConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean attributeChangeNotificationEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(attributeChangeNotificationEnabled)))
            queryParams.put("attributeChangeNotificationEnabled", String.valueOf(attributeChangeNotificationEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheAriesJmxFrameworkStateConfigInfo.class )

    }

    def orgApacheFelixEventadminImplEventAdmin ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer orgApacheFelixEventadminThreadPoolSize, BigDecimal orgApacheFelixEventadminAsyncToSyncThreadRatio, Integer orgApacheFelixEventadminTimeout, Boolean orgApacheFelixEventadminRequireTopic, List<String> orgApacheFelixEventadminIgnoreTimeout, List<String> orgApacheFelixEventadminIgnoreTopic, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheFelixEventadminThreadPoolSize)))
            queryParams.put("org.apache.felix.eventadmin.ThreadPoolSize", String.valueOf(orgApacheFelixEventadminThreadPoolSize))

        if (!"null".equals(String.valueOf(orgApacheFelixEventadminAsyncToSyncThreadRatio)))
            queryParams.put("org.apache.felix.eventadmin.AsyncToSyncThreadRatio", String.valueOf(orgApacheFelixEventadminAsyncToSyncThreadRatio))

        if (!"null".equals(String.valueOf(orgApacheFelixEventadminTimeout)))
            queryParams.put("org.apache.felix.eventadmin.Timeout", String.valueOf(orgApacheFelixEventadminTimeout))

        if (!"null".equals(String.valueOf(orgApacheFelixEventadminRequireTopic)))
            queryParams.put("org.apache.felix.eventadmin.RequireTopic", String.valueOf(orgApacheFelixEventadminRequireTopic))

        if (!"null".equals(String.valueOf(orgApacheFelixEventadminIgnoreTimeout)))
            queryParams.put("org.apache.felix.eventadmin.IgnoreTimeout", String.valueOf(orgApacheFelixEventadminIgnoreTimeout))

        if (!"null".equals(String.valueOf(orgApacheFelixEventadminIgnoreTopic)))
            queryParams.put("org.apache.felix.eventadmin.IgnoreTopic", String.valueOf(orgApacheFelixEventadminIgnoreTopic))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixEventadminImplEventAdminInfo.class )

    }

    def orgApacheFelixHttp ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String orgApacheFelixHttpHost, Boolean orgApacheFelixHttpEnable, Integer orgOsgiServiceHttpPort, Integer orgApacheFelixHttpTimeout, Boolean orgApacheFelixHttpsEnable, Integer orgOsgiServiceHttpPortSecure, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpContextPath, Boolean orgApacheFelixHttpMbeans, Integer orgApacheFelixHttpSessionTimeout, Integer orgApacheFelixHttpJettyThreadpoolMax, Integer orgApacheFelixHttpJettyAcceptors, Integer orgApacheFelixHttpJettySelectors, Integer orgApacheFelixHttpJettyHeaderBufferSize, Integer orgApacheFelixHttpJettyRequestBufferSize, Integer orgApacheFelixHttpJettyResponseBufferSize, Integer orgApacheFelixHttpJettyMaxFormSize, List<String> orgApacheFelixHttpPathExclusions, List<String> orgApacheFelixHttpsJettyCiphersuitesExcluded, List<String> orgApacheFelixHttpsJettyCiphersuitesIncluded, Boolean orgApacheFelixHttpJettySendServerHeader, List<String> orgApacheFelixHttpsJettyProtocolsIncluded, List<String> orgApacheFelixHttpsJettyProtocolsExcluded, Boolean orgApacheFelixProxyLoadBalancerConnectionEnable, Boolean orgApacheFelixHttpsJettyRenegotiateAllowed, Boolean orgApacheFelixHttpsJettySessionCookieHttpOnly, Boolean orgApacheFelixHttpsJettySessionCookieSecure, String orgEclipseJettyServletSessionIdPathParameterName, Boolean orgEclipseJettyServletCheckingRemoteSessionIdEncoding, String orgEclipseJettyServletSessionCookie, String orgEclipseJettyServletSessionDomain, String orgEclipseJettyServletSessionPath, Integer orgEclipseJettyServletMaxAge, String orgApacheFelixHttpName, Boolean orgApacheFelixJettyGziphandlerEnable, Integer orgApacheFelixJettyGzipMinGzipSize, Integer orgApacheFelixJettyGzipCompressionLevel, Integer orgApacheFelixJettyGzipInflateBufferSize, Boolean orgApacheFelixJettyGzipSyncFlush, List<String> orgApacheFelixJettyGzipExcludedUserAgents, List<String> orgApacheFelixJettyGzipIncludedMethods, List<String> orgApacheFelixJettyGzipExcludedMethods, List<String> orgApacheFelixJettyGzipIncludedPaths, List<String> orgApacheFelixJettyGzipExcludedPaths, List<String> orgApacheFelixJettyGzipIncludedMimeTypes, List<String> orgApacheFelixJettyGzipExcludedMimeTypes, Boolean orgApacheFelixHttpSessionInvalidate, Boolean orgApacheFelixHttpSessionUniqueid, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.http"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpHost)))
            queryParams.put("org.apache.felix.http.host", String.valueOf(orgApacheFelixHttpHost))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpEnable)))
            queryParams.put("org.apache.felix.http.enable", String.valueOf(orgApacheFelixHttpEnable))

        if (!"null".equals(String.valueOf(orgOsgiServiceHttpPort)))
            queryParams.put("org.osgi.service.http.port", String.valueOf(orgOsgiServiceHttpPort))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpTimeout)))
            queryParams.put("org.apache.felix.http.timeout", String.valueOf(orgApacheFelixHttpTimeout))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsEnable)))
            queryParams.put("org.apache.felix.https.enable", String.valueOf(orgApacheFelixHttpsEnable))

        if (!"null".equals(String.valueOf(orgOsgiServiceHttpPortSecure)))
            queryParams.put("org.osgi.service.http.port.secure", String.valueOf(orgOsgiServiceHttpPortSecure))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsKeystore)))
            queryParams.put("org.apache.felix.https.keystore", String.valueOf(orgApacheFelixHttpsKeystore))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsKeystorePassword)))
            queryParams.put("org.apache.felix.https.keystore.password", String.valueOf(orgApacheFelixHttpsKeystorePassword))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsKeystoreKeyPassword)))
            queryParams.put("org.apache.felix.https.keystore.key.password", String.valueOf(orgApacheFelixHttpsKeystoreKeyPassword))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsTruststore)))
            queryParams.put("org.apache.felix.https.truststore", String.valueOf(orgApacheFelixHttpsTruststore))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsTruststorePassword)))
            queryParams.put("org.apache.felix.https.truststore.password", String.valueOf(orgApacheFelixHttpsTruststorePassword))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsClientcertificate)))
            queryParams.put("org.apache.felix.https.clientcertificate", String.valueOf(orgApacheFelixHttpsClientcertificate))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpContextPath)))
            queryParams.put("org.apache.felix.http.context_path", String.valueOf(orgApacheFelixHttpContextPath))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpMbeans)))
            queryParams.put("org.apache.felix.http.mbeans", String.valueOf(orgApacheFelixHttpMbeans))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpSessionTimeout)))
            queryParams.put("org.apache.felix.http.session.timeout", String.valueOf(orgApacheFelixHttpSessionTimeout))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpJettyThreadpoolMax)))
            queryParams.put("org.apache.felix.http.jetty.threadpool.max", String.valueOf(orgApacheFelixHttpJettyThreadpoolMax))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpJettyAcceptors)))
            queryParams.put("org.apache.felix.http.jetty.acceptors", String.valueOf(orgApacheFelixHttpJettyAcceptors))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpJettySelectors)))
            queryParams.put("org.apache.felix.http.jetty.selectors", String.valueOf(orgApacheFelixHttpJettySelectors))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpJettyHeaderBufferSize)))
            queryParams.put("org.apache.felix.http.jetty.headerBufferSize", String.valueOf(orgApacheFelixHttpJettyHeaderBufferSize))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpJettyRequestBufferSize)))
            queryParams.put("org.apache.felix.http.jetty.requestBufferSize", String.valueOf(orgApacheFelixHttpJettyRequestBufferSize))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpJettyResponseBufferSize)))
            queryParams.put("org.apache.felix.http.jetty.responseBufferSize", String.valueOf(orgApacheFelixHttpJettyResponseBufferSize))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpJettyMaxFormSize)))
            queryParams.put("org.apache.felix.http.jetty.maxFormSize", String.valueOf(orgApacheFelixHttpJettyMaxFormSize))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpPathExclusions)))
            queryParams.put("org.apache.felix.http.path_exclusions", String.valueOf(orgApacheFelixHttpPathExclusions))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsJettyCiphersuitesExcluded)))
            queryParams.put("org.apache.felix.https.jetty.ciphersuites.excluded", String.valueOf(orgApacheFelixHttpsJettyCiphersuitesExcluded))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsJettyCiphersuitesIncluded)))
            queryParams.put("org.apache.felix.https.jetty.ciphersuites.included", String.valueOf(orgApacheFelixHttpsJettyCiphersuitesIncluded))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpJettySendServerHeader)))
            queryParams.put("org.apache.felix.http.jetty.sendServerHeader", String.valueOf(orgApacheFelixHttpJettySendServerHeader))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsJettyProtocolsIncluded)))
            queryParams.put("org.apache.felix.https.jetty.protocols.included", String.valueOf(orgApacheFelixHttpsJettyProtocolsIncluded))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsJettyProtocolsExcluded)))
            queryParams.put("org.apache.felix.https.jetty.protocols.excluded", String.valueOf(orgApacheFelixHttpsJettyProtocolsExcluded))

        if (!"null".equals(String.valueOf(orgApacheFelixProxyLoadBalancerConnectionEnable)))
            queryParams.put("org.apache.felix.proxy.load.balancer.connection.enable", String.valueOf(orgApacheFelixProxyLoadBalancerConnectionEnable))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsJettyRenegotiateAllowed)))
            queryParams.put("org.apache.felix.https.jetty.renegotiateAllowed", String.valueOf(orgApacheFelixHttpsJettyRenegotiateAllowed))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsJettySessionCookieHttpOnly)))
            queryParams.put("org.apache.felix.https.jetty.session.cookie.httpOnly", String.valueOf(orgApacheFelixHttpsJettySessionCookieHttpOnly))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpsJettySessionCookieSecure)))
            queryParams.put("org.apache.felix.https.jetty.session.cookie.secure", String.valueOf(orgApacheFelixHttpsJettySessionCookieSecure))

        if (!"null".equals(String.valueOf(orgEclipseJettyServletSessionIdPathParameterName)))
            queryParams.put("org.eclipse.jetty.servlet.SessionIdPathParameterName", String.valueOf(orgEclipseJettyServletSessionIdPathParameterName))

        if (!"null".equals(String.valueOf(orgEclipseJettyServletCheckingRemoteSessionIdEncoding)))
            queryParams.put("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding", String.valueOf(orgEclipseJettyServletCheckingRemoteSessionIdEncoding))

        if (!"null".equals(String.valueOf(orgEclipseJettyServletSessionCookie)))
            queryParams.put("org.eclipse.jetty.servlet.SessionCookie", String.valueOf(orgEclipseJettyServletSessionCookie))

        if (!"null".equals(String.valueOf(orgEclipseJettyServletSessionDomain)))
            queryParams.put("org.eclipse.jetty.servlet.SessionDomain", String.valueOf(orgEclipseJettyServletSessionDomain))

        if (!"null".equals(String.valueOf(orgEclipseJettyServletSessionPath)))
            queryParams.put("org.eclipse.jetty.servlet.SessionPath", String.valueOf(orgEclipseJettyServletSessionPath))

        if (!"null".equals(String.valueOf(orgEclipseJettyServletMaxAge)))
            queryParams.put("org.eclipse.jetty.servlet.MaxAge", String.valueOf(orgEclipseJettyServletMaxAge))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpName)))
            queryParams.put("org.apache.felix.http.name", String.valueOf(orgApacheFelixHttpName))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGziphandlerEnable)))
            queryParams.put("org.apache.felix.jetty.gziphandler.enable", String.valueOf(orgApacheFelixJettyGziphandlerEnable))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipMinGzipSize)))
            queryParams.put("org.apache.felix.jetty.gzip.minGzipSize", String.valueOf(orgApacheFelixJettyGzipMinGzipSize))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipCompressionLevel)))
            queryParams.put("org.apache.felix.jetty.gzip.compressionLevel", String.valueOf(orgApacheFelixJettyGzipCompressionLevel))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipInflateBufferSize)))
            queryParams.put("org.apache.felix.jetty.gzip.inflateBufferSize", String.valueOf(orgApacheFelixJettyGzipInflateBufferSize))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipSyncFlush)))
            queryParams.put("org.apache.felix.jetty.gzip.syncFlush", String.valueOf(orgApacheFelixJettyGzipSyncFlush))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipExcludedUserAgents)))
            queryParams.put("org.apache.felix.jetty.gzip.excludedUserAgents", String.valueOf(orgApacheFelixJettyGzipExcludedUserAgents))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipIncludedMethods)))
            queryParams.put("org.apache.felix.jetty.gzip.includedMethods", String.valueOf(orgApacheFelixJettyGzipIncludedMethods))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipExcludedMethods)))
            queryParams.put("org.apache.felix.jetty.gzip.excludedMethods", String.valueOf(orgApacheFelixJettyGzipExcludedMethods))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipIncludedPaths)))
            queryParams.put("org.apache.felix.jetty.gzip.includedPaths", String.valueOf(orgApacheFelixJettyGzipIncludedPaths))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipExcludedPaths)))
            queryParams.put("org.apache.felix.jetty.gzip.excludedPaths", String.valueOf(orgApacheFelixJettyGzipExcludedPaths))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipIncludedMimeTypes)))
            queryParams.put("org.apache.felix.jetty.gzip.includedMimeTypes", String.valueOf(orgApacheFelixJettyGzipIncludedMimeTypes))

        if (!"null".equals(String.valueOf(orgApacheFelixJettyGzipExcludedMimeTypes)))
            queryParams.put("org.apache.felix.jetty.gzip.excludedMimeTypes", String.valueOf(orgApacheFelixJettyGzipExcludedMimeTypes))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpSessionInvalidate)))
            queryParams.put("org.apache.felix.http.session.invalidate", String.valueOf(orgApacheFelixHttpSessionInvalidate))

        if (!"null".equals(String.valueOf(orgApacheFelixHttpSessionUniqueid)))
            queryParams.put("org.apache.felix.http.session.uniqueid", String.valueOf(orgApacheFelixHttpSessionUniqueid))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixHttpInfo.class )

    }

    def orgApacheFelixHttpSslfilterSslFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String sslForwardHeader, String sslForwardValue, String sslForwardCertHeader, Boolean rewriteAbsoluteUrls, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(sslForwardHeader)))
            queryParams.put("ssl-forward.header", String.valueOf(sslForwardHeader))

        if (!"null".equals(String.valueOf(sslForwardValue)))
            queryParams.put("ssl-forward.value", String.valueOf(sslForwardValue))

        if (!"null".equals(String.valueOf(sslForwardCertHeader)))
            queryParams.put("ssl-forward-cert.header", String.valueOf(sslForwardCertHeader))

        if (!"null".equals(String.valueOf(rewriteAbsoluteUrls)))
            queryParams.put("rewrite.absolute.urls", String.valueOf(rewriteAbsoluteUrls))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixHttpSslfilterSslFilterInfo.class )

    }

    def orgApacheFelixJaasConfigurationFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String jaasControlFlag, Integer jaasRanking, String jaasRealmName, String jaasClassname, List<String> jaasOptions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.jaas.Configuration.factory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jaasControlFlag)))
            queryParams.put("jaas.controlFlag", String.valueOf(jaasControlFlag))

        if (!"null".equals(String.valueOf(jaasRanking)))
            queryParams.put("jaas.ranking", String.valueOf(jaasRanking))

        if (!"null".equals(String.valueOf(jaasRealmName)))
            queryParams.put("jaas.realmName", String.valueOf(jaasRealmName))

        if (!"null".equals(String.valueOf(jaasClassname)))
            queryParams.put("jaas.classname", String.valueOf(jaasClassname))

        if (!"null".equals(String.valueOf(jaasOptions)))
            queryParams.put("jaas.options", String.valueOf(jaasOptions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixJaasConfigurationFactoryInfo.class )

    }

    def orgApacheFelixJaasConfigurationSpi ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String jaasDefaultRealmName, String jaasConfigProviderName, String jaasGlobalConfigPolicy, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jaasDefaultRealmName)))
            queryParams.put("jaas.defaultRealmName", String.valueOf(jaasDefaultRealmName))

        if (!"null".equals(String.valueOf(jaasConfigProviderName)))
            queryParams.put("jaas.configProviderName", String.valueOf(jaasConfigProviderName))

        if (!"null".equals(String.valueOf(jaasGlobalConfigPolicy)))
            queryParams.put("jaas.globalConfigPolicy", String.valueOf(jaasGlobalConfigPolicy))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixJaasConfigurationSpiInfo.class )

    }

    def orgApacheFelixScrScrService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer dsLoglevel, Boolean dsFactoryEnabled, Boolean dsDelayedKeepInstances, Integer dsLockTimeoutMilliseconds, Integer dsStopTimeoutMilliseconds, Boolean dsGlobalExtender, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.scr.ScrService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(dsLoglevel)))
            queryParams.put("ds.loglevel", String.valueOf(dsLoglevel))

        if (!"null".equals(String.valueOf(dsFactoryEnabled)))
            queryParams.put("ds.factory.enabled", String.valueOf(dsFactoryEnabled))

        if (!"null".equals(String.valueOf(dsDelayedKeepInstances)))
            queryParams.put("ds.delayed.keepInstances", String.valueOf(dsDelayedKeepInstances))

        if (!"null".equals(String.valueOf(dsLockTimeoutMilliseconds)))
            queryParams.put("ds.lock.timeout.milliseconds", String.valueOf(dsLockTimeoutMilliseconds))

        if (!"null".equals(String.valueOf(dsStopTimeoutMilliseconds)))
            queryParams.put("ds.stop.timeout.milliseconds", String.valueOf(dsStopTimeoutMilliseconds))

        if (!"null".equals(String.valueOf(dsGlobalExtender)))
            queryParams.put("ds.global.extender", String.valueOf(dsGlobalExtender))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixScrScrServiceInfo.class )

    }

    def orgApacheFelixSystemreadyImplComponentsCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> componentsList, String type, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(componentsList)))
            queryParams.put("components.list", String.valueOf(componentsList))

        if (!"null".equals(String.valueOf(type)))
            queryParams.put("type", String.valueOf(type))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixSystemreadyImplComponentsCheckInfo.class )

    }

    def orgApacheFelixSystemreadyImplFrameworkStartCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer timeout, Integer targetStartLevel, String targetStartLevelPropName, String type, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(timeout)))
            queryParams.put("timeout", String.valueOf(timeout))

        if (!"null".equals(String.valueOf(targetStartLevel)))
            queryParams.put("target.start.level", String.valueOf(targetStartLevel))

        if (!"null".equals(String.valueOf(targetStartLevelPropName)))
            queryParams.put("target.start.level.prop.name", String.valueOf(targetStartLevelPropName))

        if (!"null".equals(String.valueOf(type)))
            queryParams.put("type", String.valueOf(type))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.class )

    }

    def orgApacheFelixSystemreadyImplServicesCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> servicesList, String type, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(servicesList)))
            queryParams.put("services.list", String.valueOf(servicesList))

        if (!"null".equals(String.valueOf(type)))
            queryParams.put("type", String.valueOf(type))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixSystemreadyImplServicesCheckInfo.class )

    }

    def orgApacheFelixSystemreadyImplServletSystemAliveServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String osgiHttpWhiteboardServletPattern, String osgiHttpWhiteboardContextSelect, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(osgiHttpWhiteboardServletPattern)))
            queryParams.put("osgi.http.whiteboard.servlet.pattern", String.valueOf(osgiHttpWhiteboardServletPattern))

        if (!"null".equals(String.valueOf(osgiHttpWhiteboardContextSelect)))
            queryParams.put("osgi.http.whiteboard.context.select", String.valueOf(osgiHttpWhiteboardContextSelect))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.class )

    }

    def orgApacheFelixSystemreadyImplServletSystemReadyServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String osgiHttpWhiteboardServletPattern, String osgiHttpWhiteboardContextSelect, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(osgiHttpWhiteboardServletPattern)))
            queryParams.put("osgi.http.whiteboard.servlet.pattern", String.valueOf(osgiHttpWhiteboardServletPattern))

        if (!"null".equals(String.valueOf(osgiHttpWhiteboardContextSelect)))
            queryParams.put("osgi.http.whiteboard.context.select", String.valueOf(osgiHttpWhiteboardContextSelect))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.class )

    }

    def orgApacheFelixSystemreadySystemReadyMonitor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer pollInterval, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(pollInterval)))
            queryParams.put("poll.interval", String.valueOf(pollInterval))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixSystemreadySystemReadyMonitorInfo.class )

    }

    def orgApacheFelixWebconsoleInternalServletOsgiManager ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String managerRoot, String httpServiceFilter, String defaultRender, String realm, String username, String password, String category, String locale, Integer loglevel, String plugins, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(managerRoot)))
            queryParams.put("manager.root", String.valueOf(managerRoot))

        if (!"null".equals(String.valueOf(httpServiceFilter)))
            queryParams.put("http.service.filter", String.valueOf(httpServiceFilter))

        if (!"null".equals(String.valueOf(defaultRender)))
            queryParams.put("default.render", String.valueOf(defaultRender))

        if (!"null".equals(String.valueOf(realm)))
            queryParams.put("realm", String.valueOf(realm))

        if (!"null".equals(String.valueOf(username)))
            queryParams.put("username", String.valueOf(username))

        if (!"null".equals(String.valueOf(password)))
            queryParams.put("password", String.valueOf(password))

        if (!"null".equals(String.valueOf(category)))
            queryParams.put("category", String.valueOf(category))

        if (!"null".equals(String.valueOf(locale)))
            queryParams.put("locale", String.valueOf(locale))

        if (!"null".equals(String.valueOf(loglevel)))
            queryParams.put("loglevel", String.valueOf(loglevel))

        if (!"null".equals(String.valueOf(plugins)))
            queryParams.put("plugins", String.valueOf(plugins))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.class )

    }

    def orgApacheFelixWebconsolePluginsEventInternalPluginServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxSize)))
            queryParams.put("max.size", String.valueOf(maxSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.class )

    }

    def orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer felixMemoryusageDumpThreshold, Integer felixMemoryusageDumpInterval, String felixMemoryusageDumpLocation, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(felixMemoryusageDumpThreshold)))
            queryParams.put("felix.memoryusage.dump.threshold", String.valueOf(felixMemoryusageDumpThreshold))

        if (!"null".equals(String.valueOf(felixMemoryusageDumpInterval)))
            queryParams.put("felix.memoryusage.dump.interval", String.valueOf(felixMemoryusageDumpInterval))

        if (!"null".equals(String.valueOf(felixMemoryusageDumpLocation)))
            queryParams.put("felix.memoryusage.dump.location", String.valueOf(felixMemoryusageDumpLocation))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.class )

    }

    def orgApacheHttpProxyconfigurator ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean proxyEnabled, String proxyHost, Integer proxyPort, String proxyUser, String proxyPassword, List<String> proxyExceptions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.http.proxyconfigurator"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(proxyEnabled)))
            queryParams.put("proxy.enabled", String.valueOf(proxyEnabled))

        if (!"null".equals(String.valueOf(proxyHost)))
            queryParams.put("proxy.host", String.valueOf(proxyHost))

        if (!"null".equals(String.valueOf(proxyPort)))
            queryParams.put("proxy.port", String.valueOf(proxyPort))

        if (!"null".equals(String.valueOf(proxyUser)))
            queryParams.put("proxy.user", String.valueOf(proxyUser))

        if (!"null".equals(String.valueOf(proxyPassword)))
            queryParams.put("proxy.password", String.valueOf(proxyPassword))

        if (!"null".equals(String.valueOf(proxyExceptions)))
            queryParams.put("proxy.exceptions", String.valueOf(proxyExceptions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheHttpProxyconfiguratorInfo.class )

    }

    def orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String dir, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(dir)))
            queryParams.put("dir", String.valueOf(dir))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.class )

    }

    def orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String path, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.class )

    }

    def orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String mongouri, String db, Boolean socketKeepAlive, Integer cache, Integer nodeCachePercentage, Integer prevDocCachePercentage, Integer childrenCachePercentage, Integer diffCachePercentage, Integer cacheSegmentCount, Integer cacheStackMoveDistance, Integer blobCacheSize, String persistentCache, String journalCache, Boolean customBlobStore, Integer journalGCInterval, Integer journalGCMaxAge, Boolean prefetchExternalChanges, String role, Integer versionGcMaxAgeInSecs, String versionGCExpression, Integer versionGCTimeLimitInSecs, Integer blobGcMaxAgeInSecs, Integer blobTrackSnapshotIntervalInSecs, String repositoryHome, Integer maxReplicationLagInSecs, String documentStoreType, Boolean bundlingDisabled, Integer updateLimit, List<String> persistentCacheIncludes, String leaseCheckMode, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mongouri)))
            queryParams.put("mongouri", String.valueOf(mongouri))

        if (!"null".equals(String.valueOf(db)))
            queryParams.put("db", String.valueOf(db))

        if (!"null".equals(String.valueOf(socketKeepAlive)))
            queryParams.put("socketKeepAlive", String.valueOf(socketKeepAlive))

        if (!"null".equals(String.valueOf(cache)))
            queryParams.put("cache", String.valueOf(cache))

        if (!"null".equals(String.valueOf(nodeCachePercentage)))
            queryParams.put("nodeCachePercentage", String.valueOf(nodeCachePercentage))

        if (!"null".equals(String.valueOf(prevDocCachePercentage)))
            queryParams.put("prevDocCachePercentage", String.valueOf(prevDocCachePercentage))

        if (!"null".equals(String.valueOf(childrenCachePercentage)))
            queryParams.put("childrenCachePercentage", String.valueOf(childrenCachePercentage))

        if (!"null".equals(String.valueOf(diffCachePercentage)))
            queryParams.put("diffCachePercentage", String.valueOf(diffCachePercentage))

        if (!"null".equals(String.valueOf(cacheSegmentCount)))
            queryParams.put("cacheSegmentCount", String.valueOf(cacheSegmentCount))

        if (!"null".equals(String.valueOf(cacheStackMoveDistance)))
            queryParams.put("cacheStackMoveDistance", String.valueOf(cacheStackMoveDistance))

        if (!"null".equals(String.valueOf(blobCacheSize)))
            queryParams.put("blobCacheSize", String.valueOf(blobCacheSize))

        if (!"null".equals(String.valueOf(persistentCache)))
            queryParams.put("persistentCache", String.valueOf(persistentCache))

        if (!"null".equals(String.valueOf(journalCache)))
            queryParams.put("journalCache", String.valueOf(journalCache))

        if (!"null".equals(String.valueOf(customBlobStore)))
            queryParams.put("customBlobStore", String.valueOf(customBlobStore))

        if (!"null".equals(String.valueOf(journalGCInterval)))
            queryParams.put("journalGCInterval", String.valueOf(journalGCInterval))

        if (!"null".equals(String.valueOf(journalGCMaxAge)))
            queryParams.put("journalGCMaxAge", String.valueOf(journalGCMaxAge))

        if (!"null".equals(String.valueOf(prefetchExternalChanges)))
            queryParams.put("prefetchExternalChanges", String.valueOf(prefetchExternalChanges))

        if (!"null".equals(String.valueOf(role)))
            queryParams.put("role", String.valueOf(role))

        if (!"null".equals(String.valueOf(versionGcMaxAgeInSecs)))
            queryParams.put("versionGcMaxAgeInSecs", String.valueOf(versionGcMaxAgeInSecs))

        if (!"null".equals(String.valueOf(versionGCExpression)))
            queryParams.put("versionGCExpression", String.valueOf(versionGCExpression))

        if (!"null".equals(String.valueOf(versionGCTimeLimitInSecs)))
            queryParams.put("versionGCTimeLimitInSecs", String.valueOf(versionGCTimeLimitInSecs))

        if (!"null".equals(String.valueOf(blobGcMaxAgeInSecs)))
            queryParams.put("blobGcMaxAgeInSecs", String.valueOf(blobGcMaxAgeInSecs))

        if (!"null".equals(String.valueOf(blobTrackSnapshotIntervalInSecs)))
            queryParams.put("blobTrackSnapshotIntervalInSecs", String.valueOf(blobTrackSnapshotIntervalInSecs))

        if (!"null".equals(String.valueOf(repositoryHome)))
            queryParams.put("repository.home", String.valueOf(repositoryHome))

        if (!"null".equals(String.valueOf(maxReplicationLagInSecs)))
            queryParams.put("maxReplicationLagInSecs", String.valueOf(maxReplicationLagInSecs))

        if (!"null".equals(String.valueOf(documentStoreType)))
            queryParams.put("documentStoreType", String.valueOf(documentStoreType))

        if (!"null".equals(String.valueOf(bundlingDisabled)))
            queryParams.put("bundlingDisabled", String.valueOf(bundlingDisabled))

        if (!"null".equals(String.valueOf(updateLimit)))
            queryParams.put("updateLimit", String.valueOf(updateLimit))

        if (!"null".equals(String.valueOf(persistentCacheIncludes)))
            queryParams.put("persistentCacheIncludes", String.valueOf(persistentCacheIncludes))

        if (!"null".equals(String.valueOf(leaseCheckMode)))
            queryParams.put("leaseCheckMode", String.valueOf(leaseCheckMode))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.class )

    }

    def orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> persistentCacheIncludes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(persistentCacheIncludes)))
            queryParams.put("persistentCacheIncludes", String.valueOf(persistentCacheIncludes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.class )

    }

    def orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> includedPaths, Boolean enableAsyncObserver, Integer observerQueueSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(includedPaths)))
            queryParams.put("includedPaths", String.valueOf(includedPaths))

        if (!"null".equals(String.valueOf(enableAsyncObserver)))
            queryParams.put("enableAsyncObserver", String.valueOf(enableAsyncObserver))

        if (!"null".equals(String.valueOf(observerQueueSize)))
            queryParams.put("observerQueueSize", String.valueOf(observerQueueSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.class )

    }

    def orgApacheJackrabbitOakPluginsIndexAsyncIndexerService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> asyncConfigs, Integer leaseTimeOutMinutes, Integer failingIndexTimeoutSeconds, Integer errorWarnIntervalSeconds, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(asyncConfigs)))
            queryParams.put("asyncConfigs", String.valueOf(asyncConfigs))

        if (!"null".equals(String.valueOf(leaseTimeOutMinutes)))
            queryParams.put("leaseTimeOutMinutes", String.valueOf(leaseTimeOutMinutes))

        if (!"null".equals(String.valueOf(failingIndexTimeoutSeconds)))
            queryParams.put("failingIndexTimeoutSeconds", String.valueOf(failingIndexTimeoutSeconds))

        if (!"null".equals(String.valueOf(errorWarnIntervalSeconds)))
            queryParams.put("errorWarnIntervalSeconds", String.valueOf(errorWarnIntervalSeconds))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.class )

    }

    def orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean disabled, Boolean debug, String localIndexDir, Boolean enableOpenIndexAsync, Integer threadPoolSize, Boolean prefetchIndexFiles, Integer extractedTextCacheSizeInMB, Integer extractedTextCacheExpiryInSecs, Boolean alwaysUsePreExtractedCache, Integer booleanClauseLimit, Boolean enableHybridIndexing, Integer hybridQueueSize, Boolean disableStoredIndexDefinition, Boolean deletedBlobsCollectionEnabled, Integer propIndexCleanerIntervalInSecs, Boolean enableSingleBlobIndexFiles, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(disabled)))
            queryParams.put("disabled", String.valueOf(disabled))

        if (!"null".equals(String.valueOf(debug)))
            queryParams.put("debug", String.valueOf(debug))

        if (!"null".equals(String.valueOf(localIndexDir)))
            queryParams.put("localIndexDir", String.valueOf(localIndexDir))

        if (!"null".equals(String.valueOf(enableOpenIndexAsync)))
            queryParams.put("enableOpenIndexAsync", String.valueOf(enableOpenIndexAsync))

        if (!"null".equals(String.valueOf(threadPoolSize)))
            queryParams.put("threadPoolSize", String.valueOf(threadPoolSize))

        if (!"null".equals(String.valueOf(prefetchIndexFiles)))
            queryParams.put("prefetchIndexFiles", String.valueOf(prefetchIndexFiles))

        if (!"null".equals(String.valueOf(extractedTextCacheSizeInMB)))
            queryParams.put("extractedTextCacheSizeInMB", String.valueOf(extractedTextCacheSizeInMB))

        if (!"null".equals(String.valueOf(extractedTextCacheExpiryInSecs)))
            queryParams.put("extractedTextCacheExpiryInSecs", String.valueOf(extractedTextCacheExpiryInSecs))

        if (!"null".equals(String.valueOf(alwaysUsePreExtractedCache)))
            queryParams.put("alwaysUsePreExtractedCache", String.valueOf(alwaysUsePreExtractedCache))

        if (!"null".equals(String.valueOf(booleanClauseLimit)))
            queryParams.put("booleanClauseLimit", String.valueOf(booleanClauseLimit))

        if (!"null".equals(String.valueOf(enableHybridIndexing)))
            queryParams.put("enableHybridIndexing", String.valueOf(enableHybridIndexing))

        if (!"null".equals(String.valueOf(hybridQueueSize)))
            queryParams.put("hybridQueueSize", String.valueOf(hybridQueueSize))

        if (!"null".equals(String.valueOf(disableStoredIndexDefinition)))
            queryParams.put("disableStoredIndexDefinition", String.valueOf(disableStoredIndexDefinition))

        if (!"null".equals(String.valueOf(deletedBlobsCollectionEnabled)))
            queryParams.put("deletedBlobsCollectionEnabled", String.valueOf(deletedBlobsCollectionEnabled))

        if (!"null".equals(String.valueOf(propIndexCleanerIntervalInSecs)))
            queryParams.put("propIndexCleanerIntervalInSecs", String.valueOf(propIndexCleanerIntervalInSecs))

        if (!"null".equals(String.valueOf(enableSingleBlobIndexFiles)))
            queryParams.put("enableSingleBlobIndexFiles", String.valueOf(enableSingleBlobIndexFiles))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.class )

    }

    def orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String solrHomePath, String solrCoreName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(solrHomePath)))
            queryParams.put("solr.home.path", String.valueOf(solrHomePath))

        if (!"null".equals(String.valueOf(solrCoreName)))
            queryParams.put("solr.core.name", String.valueOf(solrCoreName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.class )

    }

    def orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.class )

    }

    def orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String pathDescField, String pathChildField, String pathParentField, String pathExactField, String catchAllField, String collapsedPathField, String pathDepthField, String commitPolicy, Integer rows, Boolean pathRestrictions, Boolean propertyRestrictions, Boolean primarytypesRestrictions, List<String> ignoredProperties, List<String> usedProperties, List<String> typeMappings, List<String> propertyMappings, Boolean collapseJcrcontentNodes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(pathDescField)))
            queryParams.put("path.desc.field", String.valueOf(pathDescField))

        if (!"null".equals(String.valueOf(pathChildField)))
            queryParams.put("path.child.field", String.valueOf(pathChildField))

        if (!"null".equals(String.valueOf(pathParentField)))
            queryParams.put("path.parent.field", String.valueOf(pathParentField))

        if (!"null".equals(String.valueOf(pathExactField)))
            queryParams.put("path.exact.field", String.valueOf(pathExactField))

        if (!"null".equals(String.valueOf(catchAllField)))
            queryParams.put("catch.all.field", String.valueOf(catchAllField))

        if (!"null".equals(String.valueOf(collapsedPathField)))
            queryParams.put("collapsed.path.field", String.valueOf(collapsedPathField))

        if (!"null".equals(String.valueOf(pathDepthField)))
            queryParams.put("path.depth.field", String.valueOf(pathDepthField))

        if (!"null".equals(String.valueOf(commitPolicy)))
            queryParams.put("commit.policy", String.valueOf(commitPolicy))

        if (!"null".equals(String.valueOf(rows)))
            queryParams.put("rows", String.valueOf(rows))

        if (!"null".equals(String.valueOf(pathRestrictions)))
            queryParams.put("path.restrictions", String.valueOf(pathRestrictions))

        if (!"null".equals(String.valueOf(propertyRestrictions)))
            queryParams.put("property.restrictions", String.valueOf(propertyRestrictions))

        if (!"null".equals(String.valueOf(primarytypesRestrictions)))
            queryParams.put("primarytypes.restrictions", String.valueOf(primarytypesRestrictions))

        if (!"null".equals(String.valueOf(ignoredProperties)))
            queryParams.put("ignored.properties", String.valueOf(ignoredProperties))

        if (!"null".equals(String.valueOf(usedProperties)))
            queryParams.put("used.properties", String.valueOf(usedProperties))

        if (!"null".equals(String.valueOf(typeMappings)))
            queryParams.put("type.mappings", String.valueOf(typeMappings))

        if (!"null".equals(String.valueOf(propertyMappings)))
            queryParams.put("property.mappings", String.valueOf(propertyMappings))

        if (!"null".equals(String.valueOf(collapseJcrcontentNodes)))
            queryParams.put("collapse.jcrcontent.nodes", String.valueOf(collapseJcrcontentNodes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.class )

    }

    def orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String solrHttpUrl, String solrZkHost, String solrCollection, Integer solrSocketTimeout, Integer solrConnectionTimeout, Integer solrShardsNo, Integer solrReplicationFactor, String solrConfDir, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(solrHttpUrl)))
            queryParams.put("solr.http.url", String.valueOf(solrHttpUrl))

        if (!"null".equals(String.valueOf(solrZkHost)))
            queryParams.put("solr.zk.host", String.valueOf(solrZkHost))

        if (!"null".equals(String.valueOf(solrCollection)))
            queryParams.put("solr.collection", String.valueOf(solrCollection))

        if (!"null".equals(String.valueOf(solrSocketTimeout)))
            queryParams.put("solr.socket.timeout", String.valueOf(solrSocketTimeout))

        if (!"null".equals(String.valueOf(solrConnectionTimeout)))
            queryParams.put("solr.connection.timeout", String.valueOf(solrConnectionTimeout))

        if (!"null".equals(String.valueOf(solrShardsNo)))
            queryParams.put("solr.shards.no", String.valueOf(solrShardsNo))

        if (!"null".equals(String.valueOf(solrReplicationFactor)))
            queryParams.put("solr.replication.factor", String.valueOf(solrReplicationFactor))

        if (!"null".equals(String.valueOf(solrConfDir)))
            queryParams.put("solr.conf.dir", String.valueOf(solrConfDir))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.class )

    }

    def orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean queryAggregation, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(queryAggregation)))
            queryParams.put("query.aggregation", String.valueOf(queryAggregation))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.class )

    }

    def orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String serverType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serverType)))
            queryParams.put("server.type", String.valueOf(serverType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.class )

    }

    def orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String providerType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(providerType)))
            queryParams.put("providerType", String.valueOf(providerType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.class )

    }

    def orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxItems, Integer maxPathDepth, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxItems)))
            queryParams.put("maxItems", String.valueOf(maxItems))

        if (!"null".equals(String.valueOf(maxPathDepth)))
            queryParams.put("maxPathDepth", String.valueOf(maxPathDepth))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.class )

    }

    def orgApacheJackrabbitOakQueryQueryEngineSettingsService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer queryLimitInMemory, Integer queryLimitReads, Boolean queryFailTraversal, Boolean fastQuerySize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(queryLimitInMemory)))
            queryParams.put("queryLimitInMemory", String.valueOf(queryLimitInMemory))

        if (!"null".equals(String.valueOf(queryLimitReads)))
            queryParams.put("queryLimitReads", String.valueOf(queryLimitReads))

        if (!"null".equals(String.valueOf(queryFailTraversal)))
            queryParams.put("queryFailTraversal", String.valueOf(queryFailTraversal))

        if (!"null".equals(String.valueOf(fastQuerySize)))
            queryParams.put("fastQuerySize", String.valueOf(fastQuerySize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.class )

    }

    def orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String orgApacheJackrabbitOakAuthenticationAppName, String orgApacheJackrabbitOakAuthenticationConfigSpiName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheJackrabbitOakAuthenticationAppName)))
            queryParams.put("org.apache.jackrabbit.oak.authentication.appName", String.valueOf(orgApacheJackrabbitOakAuthenticationAppName))

        if (!"null".equals(String.valueOf(orgApacheJackrabbitOakAuthenticationConfigSpiName)))
            queryParams.put("org.apache.jackrabbit.oak.authentication.configSpiName", String.valueOf(orgApacheJackrabbitOakAuthenticationConfigSpiName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.class )

    }

    def orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String providerName, String hostName, Integer hostPort, Boolean hostSsl, Boolean hostTls, Boolean hostNoCertCheck, String bindDn, String bindPassword, String searchTimeout, Integer adminPoolMaxActive, Boolean adminPoolLookupOnValidate, Integer userPoolMaxActive, Boolean userPoolLookupOnValidate, String userBaseDN, List<String> userObjectclass, String userIdAttribute, String userExtraFilter, Boolean userMakeDnPath, String groupBaseDN, List<String> groupObjectclass, String groupNameAttribute, String groupExtraFilter, Boolean groupMakeDnPath, String groupMemberAttribute, Boolean useUidForExtId, List<String> customattributes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(providerName)))
            queryParams.put("provider.name", String.valueOf(providerName))

        if (!"null".equals(String.valueOf(hostName)))
            queryParams.put("host.name", String.valueOf(hostName))

        if (!"null".equals(String.valueOf(hostPort)))
            queryParams.put("host.port", String.valueOf(hostPort))

        if (!"null".equals(String.valueOf(hostSsl)))
            queryParams.put("host.ssl", String.valueOf(hostSsl))

        if (!"null".equals(String.valueOf(hostTls)))
            queryParams.put("host.tls", String.valueOf(hostTls))

        if (!"null".equals(String.valueOf(hostNoCertCheck)))
            queryParams.put("host.noCertCheck", String.valueOf(hostNoCertCheck))

        if (!"null".equals(String.valueOf(bindDn)))
            queryParams.put("bind.dn", String.valueOf(bindDn))

        if (!"null".equals(String.valueOf(bindPassword)))
            queryParams.put("bind.password", String.valueOf(bindPassword))

        if (!"null".equals(String.valueOf(searchTimeout)))
            queryParams.put("searchTimeout", String.valueOf(searchTimeout))

        if (!"null".equals(String.valueOf(adminPoolMaxActive)))
            queryParams.put("adminPool.maxActive", String.valueOf(adminPoolMaxActive))

        if (!"null".equals(String.valueOf(adminPoolLookupOnValidate)))
            queryParams.put("adminPool.lookupOnValidate", String.valueOf(adminPoolLookupOnValidate))

        if (!"null".equals(String.valueOf(userPoolMaxActive)))
            queryParams.put("userPool.maxActive", String.valueOf(userPoolMaxActive))

        if (!"null".equals(String.valueOf(userPoolLookupOnValidate)))
            queryParams.put("userPool.lookupOnValidate", String.valueOf(userPoolLookupOnValidate))

        if (!"null".equals(String.valueOf(userBaseDN)))
            queryParams.put("user.baseDN", String.valueOf(userBaseDN))

        if (!"null".equals(String.valueOf(userObjectclass)))
            queryParams.put("user.objectclass", String.valueOf(userObjectclass))

        if (!"null".equals(String.valueOf(userIdAttribute)))
            queryParams.put("user.idAttribute", String.valueOf(userIdAttribute))

        if (!"null".equals(String.valueOf(userExtraFilter)))
            queryParams.put("user.extraFilter", String.valueOf(userExtraFilter))

        if (!"null".equals(String.valueOf(userMakeDnPath)))
            queryParams.put("user.makeDnPath", String.valueOf(userMakeDnPath))

        if (!"null".equals(String.valueOf(groupBaseDN)))
            queryParams.put("group.baseDN", String.valueOf(groupBaseDN))

        if (!"null".equals(String.valueOf(groupObjectclass)))
            queryParams.put("group.objectclass", String.valueOf(groupObjectclass))

        if (!"null".equals(String.valueOf(groupNameAttribute)))
            queryParams.put("group.nameAttribute", String.valueOf(groupNameAttribute))

        if (!"null".equals(String.valueOf(groupExtraFilter)))
            queryParams.put("group.extraFilter", String.valueOf(groupExtraFilter))

        if (!"null".equals(String.valueOf(groupMakeDnPath)))
            queryParams.put("group.makeDnPath", String.valueOf(groupMakeDnPath))

        if (!"null".equals(String.valueOf(groupMemberAttribute)))
            queryParams.put("group.memberAttribute", String.valueOf(groupMemberAttribute))

        if (!"null".equals(String.valueOf(useUidForExtId)))
            queryParams.put("useUidForExtId", String.valueOf(useUidForExtId))

        if (!"null".equals(String.valueOf(customattributes)))
            queryParams.put("customattributes", String.valueOf(customattributes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.class )

    }

    def orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String tokenExpiration, String tokenLength, Boolean tokenRefresh, Integer tokenCleanupThreshold, String passwordHashAlgorithm, Integer passwordHashIterations, Integer passwordSaltSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(tokenExpiration)))
            queryParams.put("tokenExpiration", String.valueOf(tokenExpiration))

        if (!"null".equals(String.valueOf(tokenLength)))
            queryParams.put("tokenLength", String.valueOf(tokenLength))

        if (!"null".equals(String.valueOf(tokenRefresh)))
            queryParams.put("tokenRefresh", String.valueOf(tokenRefresh))

        if (!"null".equals(String.valueOf(tokenCleanupThreshold)))
            queryParams.put("tokenCleanupThreshold", String.valueOf(tokenCleanupThreshold))

        if (!"null".equals(String.valueOf(passwordHashAlgorithm)))
            queryParams.put("passwordHashAlgorithm", String.valueOf(passwordHashAlgorithm))

        if (!"null".equals(String.valueOf(passwordHashIterations)))
            queryParams.put("passwordHashIterations", String.valueOf(passwordHashIterations))

        if (!"null".equals(String.valueOf(passwordSaltSize)))
            queryParams.put("passwordSaltSize", String.valueOf(passwordSaltSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.class )

    }

    def orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String permissionsJr2, String importBehavior, List<String> readPaths, List<String> administrativePrincipals, Integer configurationRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(permissionsJr2)))
            queryParams.put("permissionsJr2", String.valueOf(permissionsJr2))

        if (!"null".equals(String.valueOf(importBehavior)))
            queryParams.put("importBehavior", String.valueOf(importBehavior))

        if (!"null".equals(String.valueOf(readPaths)))
            queryParams.put("readPaths", String.valueOf(readPaths))

        if (!"null".equals(String.valueOf(administrativePrincipals)))
            queryParams.put("administrativePrincipals", String.valueOf(administrativePrincipals))

        if (!"null".equals(String.valueOf(configurationRanking)))
            queryParams.put("configurationRanking", String.valueOf(configurationRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.class )

    }

    def orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> requiredServicePids, String authorizationCompositionType, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(requiredServicePids)))
            queryParams.put("requiredServicePids", String.valueOf(requiredServicePids))

        if (!"null".equals(String.valueOf(authorizationCompositionType)))
            queryParams.put("authorizationCompositionType", String.valueOf(authorizationCompositionType))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.class )

    }

    def orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer length, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(length)))
            queryParams.put("length", String.valueOf(length))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.class )

    }

    def orgApacheJackrabbitOakSecurityUserUserConfigurationImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String usersPath, String groupsPath, String systemRelativePath, Integer defaultDepth, String importBehavior, String passwordHashAlgorithm, Integer passwordHashIterations, Integer passwordSaltSize, Boolean omitAdminPw, Boolean supportAutoSave, Integer passwordMaxAge, Boolean initialPasswordChange, Integer passwordHistorySize, Boolean passwordExpiryForAdmin, Integer cacheExpiration, Boolean enableRFC7613UsercaseMappedProfile, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(usersPath)))
            queryParams.put("usersPath", String.valueOf(usersPath))

        if (!"null".equals(String.valueOf(groupsPath)))
            queryParams.put("groupsPath", String.valueOf(groupsPath))

        if (!"null".equals(String.valueOf(systemRelativePath)))
            queryParams.put("systemRelativePath", String.valueOf(systemRelativePath))

        if (!"null".equals(String.valueOf(defaultDepth)))
            queryParams.put("defaultDepth", String.valueOf(defaultDepth))

        if (!"null".equals(String.valueOf(importBehavior)))
            queryParams.put("importBehavior", String.valueOf(importBehavior))

        if (!"null".equals(String.valueOf(passwordHashAlgorithm)))
            queryParams.put("passwordHashAlgorithm", String.valueOf(passwordHashAlgorithm))

        if (!"null".equals(String.valueOf(passwordHashIterations)))
            queryParams.put("passwordHashIterations", String.valueOf(passwordHashIterations))

        if (!"null".equals(String.valueOf(passwordSaltSize)))
            queryParams.put("passwordSaltSize", String.valueOf(passwordSaltSize))

        if (!"null".equals(String.valueOf(omitAdminPw)))
            queryParams.put("omitAdminPw", String.valueOf(omitAdminPw))

        if (!"null".equals(String.valueOf(supportAutoSave)))
            queryParams.put("supportAutoSave", String.valueOf(supportAutoSave))

        if (!"null".equals(String.valueOf(passwordMaxAge)))
            queryParams.put("passwordMaxAge", String.valueOf(passwordMaxAge))

        if (!"null".equals(String.valueOf(initialPasswordChange)))
            queryParams.put("initialPasswordChange", String.valueOf(initialPasswordChange))

        if (!"null".equals(String.valueOf(passwordHistorySize)))
            queryParams.put("passwordHistorySize", String.valueOf(passwordHistorySize))

        if (!"null".equals(String.valueOf(passwordExpiryForAdmin)))
            queryParams.put("passwordExpiryForAdmin", String.valueOf(passwordExpiryForAdmin))

        if (!"null".equals(String.valueOf(cacheExpiration)))
            queryParams.put("cacheExpiration", String.valueOf(cacheExpiration))

        if (!"null".equals(String.valueOf(enableRFC7613UsercaseMappedProfile)))
            queryParams.put("enableRFC7613UsercaseMappedProfile", String.valueOf(enableRFC7613UsercaseMappedProfile))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.class )

    }

    def orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String accountName, String containerName, String accessKey, String rootPath, String connectionURL, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(accountName)))
            queryParams.put("accountName", String.valueOf(accountName))

        if (!"null".equals(String.valueOf(containerName)))
            queryParams.put("containerName", String.valueOf(containerName))

        if (!"null".equals(String.valueOf(accessKey)))
            queryParams.put("accessKey", String.valueOf(accessKey))

        if (!"null".equals(String.valueOf(rootPath)))
            queryParams.put("rootPath", String.valueOf(rootPath))

        if (!"null".equals(String.valueOf(connectionURL)))
            queryParams.put("connectionURL", String.valueOf(connectionURL))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.class )

    }

    def orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String repositoryHome, String tarmkMode, Integer tarmkSize, Integer segmentCacheSize, Integer stringCacheSize, Integer templateCacheSize, Integer stringDeduplicationCacheSize, Integer templateDeduplicationCacheSize, Integer nodeDeduplicationCacheSize, Boolean pauseCompaction, Integer compactionRetryCount, Integer compactionForceTimeout, Integer compactionSizeDeltaEstimation, Boolean compactionDisableEstimation, Integer compactionRetainedGenerations, Integer compactionMemoryThreshold, Integer compactionProgressLog, Boolean standby, Boolean customBlobStore, Boolean customSegmentStore, Boolean splitPersistence, String repositoryBackupDir, Integer blobGcMaxAgeInSecs, Integer blobTrackSnapshotIntervalInSecs, String role, Boolean registerDescriptors, Boolean dispatchChanges, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(repositoryHome)))
            queryParams.put("repository.home", String.valueOf(repositoryHome))

        if (!"null".equals(String.valueOf(tarmkMode)))
            queryParams.put("tarmk.mode", String.valueOf(tarmkMode))

        if (!"null".equals(String.valueOf(tarmkSize)))
            queryParams.put("tarmk.size", String.valueOf(tarmkSize))

        if (!"null".equals(String.valueOf(segmentCacheSize)))
            queryParams.put("segmentCache.size", String.valueOf(segmentCacheSize))

        if (!"null".equals(String.valueOf(stringCacheSize)))
            queryParams.put("stringCache.size", String.valueOf(stringCacheSize))

        if (!"null".equals(String.valueOf(templateCacheSize)))
            queryParams.put("templateCache.size", String.valueOf(templateCacheSize))

        if (!"null".equals(String.valueOf(stringDeduplicationCacheSize)))
            queryParams.put("stringDeduplicationCache.size", String.valueOf(stringDeduplicationCacheSize))

        if (!"null".equals(String.valueOf(templateDeduplicationCacheSize)))
            queryParams.put("templateDeduplicationCache.size", String.valueOf(templateDeduplicationCacheSize))

        if (!"null".equals(String.valueOf(nodeDeduplicationCacheSize)))
            queryParams.put("nodeDeduplicationCache.size", String.valueOf(nodeDeduplicationCacheSize))

        if (!"null".equals(String.valueOf(pauseCompaction)))
            queryParams.put("pauseCompaction", String.valueOf(pauseCompaction))

        if (!"null".equals(String.valueOf(compactionRetryCount)))
            queryParams.put("compaction.retryCount", String.valueOf(compactionRetryCount))

        if (!"null".equals(String.valueOf(compactionForceTimeout)))
            queryParams.put("compaction.force.timeout", String.valueOf(compactionForceTimeout))

        if (!"null".equals(String.valueOf(compactionSizeDeltaEstimation)))
            queryParams.put("compaction.sizeDeltaEstimation", String.valueOf(compactionSizeDeltaEstimation))

        if (!"null".equals(String.valueOf(compactionDisableEstimation)))
            queryParams.put("compaction.disableEstimation", String.valueOf(compactionDisableEstimation))

        if (!"null".equals(String.valueOf(compactionRetainedGenerations)))
            queryParams.put("compaction.retainedGenerations", String.valueOf(compactionRetainedGenerations))

        if (!"null".equals(String.valueOf(compactionMemoryThreshold)))
            queryParams.put("compaction.memoryThreshold", String.valueOf(compactionMemoryThreshold))

        if (!"null".equals(String.valueOf(compactionProgressLog)))
            queryParams.put("compaction.progressLog", String.valueOf(compactionProgressLog))

        if (!"null".equals(String.valueOf(standby)))
            queryParams.put("standby", String.valueOf(standby))

        if (!"null".equals(String.valueOf(customBlobStore)))
            queryParams.put("customBlobStore", String.valueOf(customBlobStore))

        if (!"null".equals(String.valueOf(customSegmentStore)))
            queryParams.put("customSegmentStore", String.valueOf(customSegmentStore))

        if (!"null".equals(String.valueOf(splitPersistence)))
            queryParams.put("splitPersistence", String.valueOf(splitPersistence))

        if (!"null".equals(String.valueOf(repositoryBackupDir)))
            queryParams.put("repository.backup.dir", String.valueOf(repositoryBackupDir))

        if (!"null".equals(String.valueOf(blobGcMaxAgeInSecs)))
            queryParams.put("blobGcMaxAgeInSecs", String.valueOf(blobGcMaxAgeInSecs))

        if (!"null".equals(String.valueOf(blobTrackSnapshotIntervalInSecs)))
            queryParams.put("blobTrackSnapshotIntervalInSecs", String.valueOf(blobTrackSnapshotIntervalInSecs))

        if (!"null".equals(String.valueOf(role)))
            queryParams.put("role", String.valueOf(role))

        if (!"null".equals(String.valueOf(registerDescriptors)))
            queryParams.put("registerDescriptors", String.valueOf(registerDescriptors))

        if (!"null".equals(String.valueOf(dispatchChanges)))
            queryParams.put("dispatchChanges", String.valueOf(dispatchChanges))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.class )

    }

    def orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> commitsTrackerWriterGroups, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(commitsTrackerWriterGroups)))
            queryParams.put("commitsTrackerWriterGroups", String.valueOf(commitsTrackerWriterGroups))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.class )

    }

    def orgApacheJackrabbitOakSegmentSegmentNodeStoreService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String repositoryHome, String tarmkMode, Integer tarmkSize, Integer segmentCacheSize, Integer stringCacheSize, Integer templateCacheSize, Integer stringDeduplicationCacheSize, Integer templateDeduplicationCacheSize, Integer nodeDeduplicationCacheSize, Boolean pauseCompaction, Integer compactionRetryCount, Integer compactionForceTimeout, Integer compactionSizeDeltaEstimation, Boolean compactionDisableEstimation, Integer compactionRetainedGenerations, Integer compactionMemoryThreshold, Integer compactionProgressLog, Boolean standby, Boolean customBlobStore, Boolean customSegmentStore, Boolean splitPersistence, String repositoryBackupDir, Integer blobGcMaxAgeInSecs, Integer blobTrackSnapshotIntervalInSecs, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(repositoryHome)))
            queryParams.put("repository.home", String.valueOf(repositoryHome))

        if (!"null".equals(String.valueOf(tarmkMode)))
            queryParams.put("tarmk.mode", String.valueOf(tarmkMode))

        if (!"null".equals(String.valueOf(tarmkSize)))
            queryParams.put("tarmk.size", String.valueOf(tarmkSize))

        if (!"null".equals(String.valueOf(segmentCacheSize)))
            queryParams.put("segmentCache.size", String.valueOf(segmentCacheSize))

        if (!"null".equals(String.valueOf(stringCacheSize)))
            queryParams.put("stringCache.size", String.valueOf(stringCacheSize))

        if (!"null".equals(String.valueOf(templateCacheSize)))
            queryParams.put("templateCache.size", String.valueOf(templateCacheSize))

        if (!"null".equals(String.valueOf(stringDeduplicationCacheSize)))
            queryParams.put("stringDeduplicationCache.size", String.valueOf(stringDeduplicationCacheSize))

        if (!"null".equals(String.valueOf(templateDeduplicationCacheSize)))
            queryParams.put("templateDeduplicationCache.size", String.valueOf(templateDeduplicationCacheSize))

        if (!"null".equals(String.valueOf(nodeDeduplicationCacheSize)))
            queryParams.put("nodeDeduplicationCache.size", String.valueOf(nodeDeduplicationCacheSize))

        if (!"null".equals(String.valueOf(pauseCompaction)))
            queryParams.put("pauseCompaction", String.valueOf(pauseCompaction))

        if (!"null".equals(String.valueOf(compactionRetryCount)))
            queryParams.put("compaction.retryCount", String.valueOf(compactionRetryCount))

        if (!"null".equals(String.valueOf(compactionForceTimeout)))
            queryParams.put("compaction.force.timeout", String.valueOf(compactionForceTimeout))

        if (!"null".equals(String.valueOf(compactionSizeDeltaEstimation)))
            queryParams.put("compaction.sizeDeltaEstimation", String.valueOf(compactionSizeDeltaEstimation))

        if (!"null".equals(String.valueOf(compactionDisableEstimation)))
            queryParams.put("compaction.disableEstimation", String.valueOf(compactionDisableEstimation))

        if (!"null".equals(String.valueOf(compactionRetainedGenerations)))
            queryParams.put("compaction.retainedGenerations", String.valueOf(compactionRetainedGenerations))

        if (!"null".equals(String.valueOf(compactionMemoryThreshold)))
            queryParams.put("compaction.memoryThreshold", String.valueOf(compactionMemoryThreshold))

        if (!"null".equals(String.valueOf(compactionProgressLog)))
            queryParams.put("compaction.progressLog", String.valueOf(compactionProgressLog))

        if (!"null".equals(String.valueOf(standby)))
            queryParams.put("standby", String.valueOf(standby))

        if (!"null".equals(String.valueOf(customBlobStore)))
            queryParams.put("customBlobStore", String.valueOf(customBlobStore))

        if (!"null".equals(String.valueOf(customSegmentStore)))
            queryParams.put("customSegmentStore", String.valueOf(customSegmentStore))

        if (!"null".equals(String.valueOf(splitPersistence)))
            queryParams.put("splitPersistence", String.valueOf(splitPersistence))

        if (!"null".equals(String.valueOf(repositoryBackupDir)))
            queryParams.put("repository.backup.dir", String.valueOf(repositoryBackupDir))

        if (!"null".equals(String.valueOf(blobGcMaxAgeInSecs)))
            queryParams.put("blobGcMaxAgeInSecs", String.valueOf(blobGcMaxAgeInSecs))

        if (!"null".equals(String.valueOf(blobTrackSnapshotIntervalInSecs)))
            queryParams.put("blobTrackSnapshotIntervalInSecs", String.valueOf(blobTrackSnapshotIntervalInSecs))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.class )

    }

    def orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean orgApacheSlingInstallerConfigurationPersist, String mode, Integer port, String primaryHost, Integer interval, List<String> primaryAllowedClientIpRanges, Boolean secure, Integer standbyReadtimeout, Boolean standbyAutoclean, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheSlingInstallerConfigurationPersist)))
            queryParams.put("org.apache.sling.installer.configuration.persist", String.valueOf(orgApacheSlingInstallerConfigurationPersist))

        if (!"null".equals(String.valueOf(mode)))
            queryParams.put("mode", String.valueOf(mode))

        if (!"null".equals(String.valueOf(port)))
            queryParams.put("port", String.valueOf(port))

        if (!"null".equals(String.valueOf(primaryHost)))
            queryParams.put("primary.host", String.valueOf(primaryHost))

        if (!"null".equals(String.valueOf(interval)))
            queryParams.put("interval", String.valueOf(interval))

        if (!"null".equals(String.valueOf(primaryAllowedClientIpRanges)))
            queryParams.put("primary.allowed-client-ip-ranges", String.valueOf(primaryAllowedClientIpRanges))

        if (!"null".equals(String.valueOf(secure)))
            queryParams.put("secure", String.valueOf(secure))

        if (!"null".equals(String.valueOf(standbyReadtimeout)))
            queryParams.put("standby.readtimeout", String.valueOf(standbyReadtimeout))

        if (!"null".equals(String.valueOf(standbyAutoclean)))
            queryParams.put("standby.autoclean", String.valueOf(standbyAutoclean))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.class )

    }

    def orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String handlerName, String userExpirationTime, List<String> userAutoMembership, List<String> userPropertyMapping, String userPathPrefix, String userMembershipExpTime, Integer userMembershipNestingDepth, Boolean userDynamicMembership, Boolean userDisableMissing, String groupExpirationTime, List<String> groupAutoMembership, List<String> groupPropertyMapping, String groupPathPrefix, Boolean enableRFC7613UsercaseMappedProfile, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(handlerName)))
            queryParams.put("handler.name", String.valueOf(handlerName))

        if (!"null".equals(String.valueOf(userExpirationTime)))
            queryParams.put("user.expirationTime", String.valueOf(userExpirationTime))

        if (!"null".equals(String.valueOf(userAutoMembership)))
            queryParams.put("user.autoMembership", String.valueOf(userAutoMembership))

        if (!"null".equals(String.valueOf(userPropertyMapping)))
            queryParams.put("user.propertyMapping", String.valueOf(userPropertyMapping))

        if (!"null".equals(String.valueOf(userPathPrefix)))
            queryParams.put("user.pathPrefix", String.valueOf(userPathPrefix))

        if (!"null".equals(String.valueOf(userMembershipExpTime)))
            queryParams.put("user.membershipExpTime", String.valueOf(userMembershipExpTime))

        if (!"null".equals(String.valueOf(userMembershipNestingDepth)))
            queryParams.put("user.membershipNestingDepth", String.valueOf(userMembershipNestingDepth))

        if (!"null".equals(String.valueOf(userDynamicMembership)))
            queryParams.put("user.dynamicMembership", String.valueOf(userDynamicMembership))

        if (!"null".equals(String.valueOf(userDisableMissing)))
            queryParams.put("user.disableMissing", String.valueOf(userDisableMissing))

        if (!"null".equals(String.valueOf(groupExpirationTime)))
            queryParams.put("group.expirationTime", String.valueOf(groupExpirationTime))

        if (!"null".equals(String.valueOf(groupAutoMembership)))
            queryParams.put("group.autoMembership", String.valueOf(groupAutoMembership))

        if (!"null".equals(String.valueOf(groupPropertyMapping)))
            queryParams.put("group.propertyMapping", String.valueOf(groupPropertyMapping))

        if (!"null".equals(String.valueOf(groupPathPrefix)))
            queryParams.put("group.pathPrefix", String.valueOf(groupPathPrefix))

        if (!"null".equals(String.valueOf(enableRFC7613UsercaseMappedProfile)))
            queryParams.put("enableRFC7613UsercaseMappedProfile", String.valueOf(enableRFC7613UsercaseMappedProfile))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.class )

    }

    def orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer jaasRanking, String jaasControlFlag, String jaasRealmName, String idpName, String syncHandlerName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jaasRanking)))
            queryParams.put("jaas.ranking", String.valueOf(jaasRanking))

        if (!"null".equals(String.valueOf(jaasControlFlag)))
            queryParams.put("jaas.controlFlag", String.valueOf(jaasControlFlag))

        if (!"null".equals(String.valueOf(jaasRealmName)))
            queryParams.put("jaas.realmName", String.valueOf(jaasRealmName))

        if (!"null".equals(String.valueOf(idpName)))
            queryParams.put("idp.name", String.valueOf(idpName))

        if (!"null".equals(String.valueOf(syncHandlerName)))
            queryParams.put("sync.handlerName", String.valueOf(syncHandlerName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.class )

    }

    def orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean protectExternalId, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(protectExternalId)))
            queryParams.put("protectExternalId", String.valueOf(protectExternalId))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.class )

    }

    def orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> cugSupportedPaths, Boolean cugEnabled, Integer configurationRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(cugSupportedPaths)))
            queryParams.put("cugSupportedPaths", String.valueOf(cugSupportedPaths))

        if (!"null".equals(String.valueOf(cugEnabled)))
            queryParams.put("cugEnabled", String.valueOf(cugEnabled))

        if (!"null".equals(String.valueOf(configurationRanking)))
            queryParams.put("configurationRanking", String.valueOf(configurationRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.class )

    }

    def orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> principalNames, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(principalNames)))
            queryParams.put("principalNames", String.valueOf(principalNames))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.class )

    }

    def orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String enabledActions, List<String> userPrivilegeNames, List<String> groupPrivilegeNames, String constraint, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabledActions)))
            queryParams.put("enabledActions", String.valueOf(enabledActions))

        if (!"null".equals(String.valueOf(userPrivilegeNames)))
            queryParams.put("userPrivilegeNames", String.valueOf(userPrivilegeNames))

        if (!"null".equals(String.valueOf(groupPrivilegeNames)))
            queryParams.put("groupPrivilegeNames", String.valueOf(groupPrivilegeNames))

        if (!"null".equals(String.valueOf(constraint)))
            queryParams.put("constraint", String.valueOf(constraint))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.class )

    }

    def orgApacheJackrabbitVaultPackagingImplPackagingImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> packageRoots, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(packageRoots)))
            queryParams.put("packageRoots", String.valueOf(packageRoots))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.class )

    }

    def orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String homePath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(homePath)))
            queryParams.put("homePath", String.valueOf(homePath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.class )

    }

    def orgApacheSlingAuthCoreImplLogoutServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> slingServletMethods, String slingServletPaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletMethods)))
            queryParams.put("sling.servlet.methods", String.valueOf(slingServletMethods))

        if (!"null".equals(String.valueOf(slingServletPaths)))
            queryParams.put("sling.servlet.paths", String.valueOf(slingServletPaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingAuthCoreImplLogoutServletInfo.class )

    }

    def orgApacheSlingCaconfigImplConfigurationBindingsValueProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.class )

    }

    def orgApacheSlingCaconfigImplConfigurationResolverImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> configBucketNames, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(configBucketNames)))
            queryParams.put("configBucketNames", String.valueOf(configBucketNames))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.class )

    }

    def orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, List<String> configPropertyInheritancePropertyNames, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(configPropertyInheritancePropertyNames)))
            queryParams.put("configPropertyInheritancePropertyNames", String.valueOf(configPropertyInheritancePropertyNames))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.class )

    }

    def orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.class )

    }

    def orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String description, List<String> overrides, Boolean enabled, Integer serviceRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(description)))
            queryParams.put("description", String.valueOf(description))

        if (!"null".equals(String.valueOf(overrides)))
            queryParams.put("overrides", String.valueOf(overrides))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.class )

    }

    def orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, Integer serviceRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.class )

    }

    def orgApacheSlingCaconfigManagementImplConfigurationManagementSetti ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> ignorePropertyNameRegex, List<String> configCollectionPropertiesResourceNames, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(ignorePropertyNameRegex)))
            queryParams.put("ignorePropertyNameRegex", String.valueOf(ignorePropertyNameRegex))

        if (!"null".equals(String.valueOf(configCollectionPropertiesResourceNames)))
            queryParams.put("configCollectionPropertiesResourceNames", String.valueOf(configCollectionPropertiesResourceNames))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.class )

    }

    def orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, String configPath, List<String> fallbackPaths, List<String> configCollectionInheritancePropertyNames, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(configPath)))
            queryParams.put("configPath", String.valueOf(configPath))

        if (!"null".equals(String.valueOf(fallbackPaths)))
            queryParams.put("fallbackPaths", String.valueOf(fallbackPaths))

        if (!"null".equals(String.valueOf(configCollectionInheritancePropertyNames)))
            queryParams.put("configCollectionInheritancePropertyNames", String.valueOf(configCollectionInheritancePropertyNames))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.class )

    }

    def orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean enabled, List<String> configRefResourceNames, List<String> configRefPropertyNames, Integer serviceRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(configRefResourceNames)))
            queryParams.put("configRefResourceNames", String.valueOf(configRefResourceNames))

        if (!"null".equals(String.valueOf(configRefPropertyNames)))
            queryParams.put("configRefPropertyNames", String.valueOf(configRefPropertyNames))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.class )

    }

    def orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> parserFeatures, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(parserFeatures)))
            queryParams.put("parser.features", String.valueOf(parserFeatures))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.class )

    }

    def orgApacheSlingCommonsLogLogManager ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String orgApacheSlingCommonsLogLevel, String orgApacheSlingCommonsLogFile, Integer orgApacheSlingCommonsLogFileNumber, String orgApacheSlingCommonsLogFileSize, String orgApacheSlingCommonsLogPattern, String orgApacheSlingCommonsLogConfigurationFile, Boolean orgApacheSlingCommonsLogPackagingDataEnabled, Integer orgApacheSlingCommonsLogMaxCallerDataDepth, Integer orgApacheSlingCommonsLogMaxOldFileCountInDump, Integer orgApacheSlingCommonsLogNumOfLines, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.commons.log.LogManager"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogLevel)))
            queryParams.put("org.apache.sling.commons.log.level", String.valueOf(orgApacheSlingCommonsLogLevel))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogFile)))
            queryParams.put("org.apache.sling.commons.log.file", String.valueOf(orgApacheSlingCommonsLogFile))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogFileNumber)))
            queryParams.put("org.apache.sling.commons.log.file.number", String.valueOf(orgApacheSlingCommonsLogFileNumber))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogFileSize)))
            queryParams.put("org.apache.sling.commons.log.file.size", String.valueOf(orgApacheSlingCommonsLogFileSize))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogPattern)))
            queryParams.put("org.apache.sling.commons.log.pattern", String.valueOf(orgApacheSlingCommonsLogPattern))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogConfigurationFile)))
            queryParams.put("org.apache.sling.commons.log.configurationFile", String.valueOf(orgApacheSlingCommonsLogConfigurationFile))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogPackagingDataEnabled)))
            queryParams.put("org.apache.sling.commons.log.packagingDataEnabled", String.valueOf(orgApacheSlingCommonsLogPackagingDataEnabled))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogMaxCallerDataDepth)))
            queryParams.put("org.apache.sling.commons.log.maxCallerDataDepth", String.valueOf(orgApacheSlingCommonsLogMaxCallerDataDepth))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogMaxOldFileCountInDump)))
            queryParams.put("org.apache.sling.commons.log.maxOldFileCountInDump", String.valueOf(orgApacheSlingCommonsLogMaxOldFileCountInDump))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogNumOfLines)))
            queryParams.put("org.apache.sling.commons.log.numOfLines", String.valueOf(orgApacheSlingCommonsLogNumOfLines))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCommonsLogLogManagerInfo.class )

    }

    def orgApacheSlingCommonsLogLogManagerFactoryConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String orgApacheSlingCommonsLogLevel, String orgApacheSlingCommonsLogFile, String orgApacheSlingCommonsLogPattern, List<String> orgApacheSlingCommonsLogNames, Boolean orgApacheSlingCommonsLogAdditiv, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogLevel)))
            queryParams.put("org.apache.sling.commons.log.level", String.valueOf(orgApacheSlingCommonsLogLevel))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogFile)))
            queryParams.put("org.apache.sling.commons.log.file", String.valueOf(orgApacheSlingCommonsLogFile))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogPattern)))
            queryParams.put("org.apache.sling.commons.log.pattern", String.valueOf(orgApacheSlingCommonsLogPattern))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogNames)))
            queryParams.put("org.apache.sling.commons.log.names", String.valueOf(orgApacheSlingCommonsLogNames))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogAdditiv)))
            queryParams.put("org.apache.sling.commons.log.additiv", String.valueOf(orgApacheSlingCommonsLogAdditiv))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.class )

    }

    def orgApacheSlingCommonsLogLogManagerFactoryWriter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String orgApacheSlingCommonsLogFile, Integer orgApacheSlingCommonsLogFileNumber, String orgApacheSlingCommonsLogFileSize, Boolean orgApacheSlingCommonsLogFileBuffered, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogFile)))
            queryParams.put("org.apache.sling.commons.log.file", String.valueOf(orgApacheSlingCommonsLogFile))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogFileNumber)))
            queryParams.put("org.apache.sling.commons.log.file.number", String.valueOf(orgApacheSlingCommonsLogFileNumber))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogFileSize)))
            queryParams.put("org.apache.sling.commons.log.file.size", String.valueOf(orgApacheSlingCommonsLogFileSize))

        if (!"null".equals(String.valueOf(orgApacheSlingCommonsLogFileBuffered)))
            queryParams.put("org.apache.sling.commons.log.file.buffered", String.valueOf(orgApacheSlingCommonsLogFileBuffered))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.class )

    }

    def orgApacheSlingCommonsMetricsInternalLogReporter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer period, String timeUnit, String level, String loggerName, String prefix, String pattern, String registryName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(period)))
            queryParams.put("period", String.valueOf(period))

        if (!"null".equals(String.valueOf(timeUnit)))
            queryParams.put("timeUnit", String.valueOf(timeUnit))

        if (!"null".equals(String.valueOf(level)))
            queryParams.put("level", String.valueOf(level))

        if (!"null".equals(String.valueOf(loggerName)))
            queryParams.put("loggerName", String.valueOf(loggerName))

        if (!"null".equals(String.valueOf(prefix)))
            queryParams.put("prefix", String.valueOf(prefix))

        if (!"null".equals(String.valueOf(pattern)))
            queryParams.put("pattern", String.valueOf(pattern))

        if (!"null".equals(String.valueOf(registryName)))
            queryParams.put("registryName", String.valueOf(registryName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCommonsMetricsInternalLogReporterInfo.class )

    }

    def orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> datasources, Integer step, List<String> archives, String path, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(datasources)))
            queryParams.put("datasources", String.valueOf(datasources))

        if (!"null".equals(String.valueOf(step)))
            queryParams.put("step", String.valueOf(step))

        if (!"null".equals(String.valueOf(archives)))
            queryParams.put("archives", String.valueOf(archives))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.class )

    }

    def orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> mimeTypes, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mimeTypes)))
            queryParams.put("mime.types", String.valueOf(mimeTypes))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.class )

    }

    def orgApacheSlingCommonsSchedulerImplQuartzScheduler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String poolName, List<String> allowedPoolNames, Boolean schedulerUseleaderforsingle, List<String> metricsFilters, Integer slowThresholdMillis, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(poolName)))
            queryParams.put("poolName", String.valueOf(poolName))

        if (!"null".equals(String.valueOf(allowedPoolNames)))
            queryParams.put("allowedPoolNames", String.valueOf(allowedPoolNames))

        if (!"null".equals(String.valueOf(schedulerUseleaderforsingle)))
            queryParams.put("scheduler.useleaderforsingle", String.valueOf(schedulerUseleaderforsingle))

        if (!"null".equals(String.valueOf(metricsFilters)))
            queryParams.put("metrics.filters", String.valueOf(metricsFilters))

        if (!"null".equals(String.valueOf(slowThresholdMillis)))
            queryParams.put("slowThresholdMillis", String.valueOf(slowThresholdMillis))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.class )

    }

    def orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxQuartzJobDurationAcceptable, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxQuartzJobDurationAcceptable)))
            queryParams.put("max.quartzJob.duration.acceptable", String.valueOf(maxQuartzJobDurationAcceptable))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.class )

    }

    def orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, Integer minPoolSize, Integer maxPoolSize, Integer queueSize, Integer maxThreadAge, Integer keepAliveTime, String blockPolicy, Boolean shutdownGraceful, Boolean daemon, Integer shutdownWaitTime, String priority, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(minPoolSize)))
            queryParams.put("minPoolSize", String.valueOf(minPoolSize))

        if (!"null".equals(String.valueOf(maxPoolSize)))
            queryParams.put("maxPoolSize", String.valueOf(maxPoolSize))

        if (!"null".equals(String.valueOf(queueSize)))
            queryParams.put("queueSize", String.valueOf(queueSize))

        if (!"null".equals(String.valueOf(maxThreadAge)))
            queryParams.put("maxThreadAge", String.valueOf(maxThreadAge))

        if (!"null".equals(String.valueOf(keepAliveTime)))
            queryParams.put("keepAliveTime", String.valueOf(keepAliveTime))

        if (!"null".equals(String.valueOf(blockPolicy)))
            queryParams.put("blockPolicy", String.valueOf(blockPolicy))

        if (!"null".equals(String.valueOf(shutdownGraceful)))
            queryParams.put("shutdownGraceful", String.valueOf(shutdownGraceful))

        if (!"null".equals(String.valueOf(daemon)))
            queryParams.put("daemon", String.valueOf(daemon))

        if (!"null".equals(String.valueOf(shutdownWaitTime)))
            queryParams.put("shutdownWaitTime", String.valueOf(shutdownWaitTime))

        if (!"null".equals(String.valueOf(priority)))
            queryParams.put("priority", String.valueOf(priority))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.class )

    }

    def orgApacheSlingDatasourceDataSourceFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String datasourceName, String datasourceSvcPropName, String driverClassName, String url, String username, String password, String defaultAutoCommit, String defaultReadOnly, String defaultTransactionIsolation, String defaultCatalog, Integer maxActive, Integer maxIdle, Integer minIdle, Integer initialSize, Integer maxWait, Integer maxAge, Boolean testOnBorrow, Boolean testOnReturn, Boolean testWhileIdle, String validationQuery, Integer validationQueryTimeout, Integer timeBetweenEvictionRunsMillis, Integer minEvictableIdleTimeMillis, String connectionProperties, String initSQL, String jdbcInterceptors, Integer validationInterval, Boolean logValidationErrors, List<String> datasourceSvcProperties, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(datasourceName)))
            queryParams.put("datasource.name", String.valueOf(datasourceName))

        if (!"null".equals(String.valueOf(datasourceSvcPropName)))
            queryParams.put("datasource.svc.prop.name", String.valueOf(datasourceSvcPropName))

        if (!"null".equals(String.valueOf(driverClassName)))
            queryParams.put("driverClassName", String.valueOf(driverClassName))

        if (!"null".equals(String.valueOf(url)))
            queryParams.put("url", String.valueOf(url))

        if (!"null".equals(String.valueOf(username)))
            queryParams.put("username", String.valueOf(username))

        if (!"null".equals(String.valueOf(password)))
            queryParams.put("password", String.valueOf(password))

        if (!"null".equals(String.valueOf(defaultAutoCommit)))
            queryParams.put("defaultAutoCommit", String.valueOf(defaultAutoCommit))

        if (!"null".equals(String.valueOf(defaultReadOnly)))
            queryParams.put("defaultReadOnly", String.valueOf(defaultReadOnly))

        if (!"null".equals(String.valueOf(defaultTransactionIsolation)))
            queryParams.put("defaultTransactionIsolation", String.valueOf(defaultTransactionIsolation))

        if (!"null".equals(String.valueOf(defaultCatalog)))
            queryParams.put("defaultCatalog", String.valueOf(defaultCatalog))

        if (!"null".equals(String.valueOf(maxActive)))
            queryParams.put("maxActive", String.valueOf(maxActive))

        if (!"null".equals(String.valueOf(maxIdle)))
            queryParams.put("maxIdle", String.valueOf(maxIdle))

        if (!"null".equals(String.valueOf(minIdle)))
            queryParams.put("minIdle", String.valueOf(minIdle))

        if (!"null".equals(String.valueOf(initialSize)))
            queryParams.put("initialSize", String.valueOf(initialSize))

        if (!"null".equals(String.valueOf(maxWait)))
            queryParams.put("maxWait", String.valueOf(maxWait))

        if (!"null".equals(String.valueOf(maxAge)))
            queryParams.put("maxAge", String.valueOf(maxAge))

        if (!"null".equals(String.valueOf(testOnBorrow)))
            queryParams.put("testOnBorrow", String.valueOf(testOnBorrow))

        if (!"null".equals(String.valueOf(testOnReturn)))
            queryParams.put("testOnReturn", String.valueOf(testOnReturn))

        if (!"null".equals(String.valueOf(testWhileIdle)))
            queryParams.put("testWhileIdle", String.valueOf(testWhileIdle))

        if (!"null".equals(String.valueOf(validationQuery)))
            queryParams.put("validationQuery", String.valueOf(validationQuery))

        if (!"null".equals(String.valueOf(validationQueryTimeout)))
            queryParams.put("validationQueryTimeout", String.valueOf(validationQueryTimeout))

        if (!"null".equals(String.valueOf(timeBetweenEvictionRunsMillis)))
            queryParams.put("timeBetweenEvictionRunsMillis", String.valueOf(timeBetweenEvictionRunsMillis))

        if (!"null".equals(String.valueOf(minEvictableIdleTimeMillis)))
            queryParams.put("minEvictableIdleTimeMillis", String.valueOf(minEvictableIdleTimeMillis))

        if (!"null".equals(String.valueOf(connectionProperties)))
            queryParams.put("connectionProperties", String.valueOf(connectionProperties))

        if (!"null".equals(String.valueOf(initSQL)))
            queryParams.put("initSQL", String.valueOf(initSQL))

        if (!"null".equals(String.valueOf(jdbcInterceptors)))
            queryParams.put("jdbcInterceptors", String.valueOf(jdbcInterceptors))

        if (!"null".equals(String.valueOf(validationInterval)))
            queryParams.put("validationInterval", String.valueOf(validationInterval))

        if (!"null".equals(String.valueOf(logValidationErrors)))
            queryParams.put("logValidationErrors", String.valueOf(logValidationErrors))

        if (!"null".equals(String.valueOf(datasourceSvcProperties)))
            queryParams.put("datasource.svc.properties", String.valueOf(datasourceSvcProperties))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDatasourceDataSourceFactoryInfo.class )

    }

    def orgApacheSlingDatasourceJNDIDataSourceFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String datasourceName, String datasourceSvcPropName, String datasourceJndiName, List<String> jndiProperties, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(datasourceName)))
            queryParams.put("datasource.name", String.valueOf(datasourceName))

        if (!"null".equals(String.valueOf(datasourceSvcPropName)))
            queryParams.put("datasource.svc.prop.name", String.valueOf(datasourceSvcPropName))

        if (!"null".equals(String.valueOf(datasourceJndiName)))
            queryParams.put("datasource.jndi.name", String.valueOf(datasourceJndiName))

        if (!"null".equals(String.valueOf(jndiProperties)))
            queryParams.put("jndi.properties", String.valueOf(jndiProperties))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.class )

    }

    def orgApacheSlingDiscoveryOakConfig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer connectorPingTimeout, Integer connectorPingInterval, Integer discoveryLiteCheckInterval, Integer clusterSyncServiceTimeout, Integer clusterSyncServiceInterval, Boolean enableSyncToken, Integer minEventDelay, Integer socketConnectTimeout, Integer soTimeout, List<String> topologyConnectorUrls, List<String> topologyConnectorWhitelist, Boolean autoStopLocalLoopEnabled, Boolean gzipConnectorRequestsEnabled, Boolean hmacEnabled, Boolean enableEncryption, String sharedKey, Integer hmacSharedKeyTTL, String backoffStandbyFactor, String backoffStableFactor, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.discovery.oak.Config"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(connectorPingTimeout)))
            queryParams.put("connectorPingTimeout", String.valueOf(connectorPingTimeout))

        if (!"null".equals(String.valueOf(connectorPingInterval)))
            queryParams.put("connectorPingInterval", String.valueOf(connectorPingInterval))

        if (!"null".equals(String.valueOf(discoveryLiteCheckInterval)))
            queryParams.put("discoveryLiteCheckInterval", String.valueOf(discoveryLiteCheckInterval))

        if (!"null".equals(String.valueOf(clusterSyncServiceTimeout)))
            queryParams.put("clusterSyncServiceTimeout", String.valueOf(clusterSyncServiceTimeout))

        if (!"null".equals(String.valueOf(clusterSyncServiceInterval)))
            queryParams.put("clusterSyncServiceInterval", String.valueOf(clusterSyncServiceInterval))

        if (!"null".equals(String.valueOf(enableSyncToken)))
            queryParams.put("enableSyncToken", String.valueOf(enableSyncToken))

        if (!"null".equals(String.valueOf(minEventDelay)))
            queryParams.put("minEventDelay", String.valueOf(minEventDelay))

        if (!"null".equals(String.valueOf(socketConnectTimeout)))
            queryParams.put("socketConnectTimeout", String.valueOf(socketConnectTimeout))

        if (!"null".equals(String.valueOf(soTimeout)))
            queryParams.put("soTimeout", String.valueOf(soTimeout))

        if (!"null".equals(String.valueOf(topologyConnectorUrls)))
            queryParams.put("topologyConnectorUrls", String.valueOf(topologyConnectorUrls))

        if (!"null".equals(String.valueOf(topologyConnectorWhitelist)))
            queryParams.put("topologyConnectorWhitelist", String.valueOf(topologyConnectorWhitelist))

        if (!"null".equals(String.valueOf(autoStopLocalLoopEnabled)))
            queryParams.put("autoStopLocalLoopEnabled", String.valueOf(autoStopLocalLoopEnabled))

        if (!"null".equals(String.valueOf(gzipConnectorRequestsEnabled)))
            queryParams.put("gzipConnectorRequestsEnabled", String.valueOf(gzipConnectorRequestsEnabled))

        if (!"null".equals(String.valueOf(hmacEnabled)))
            queryParams.put("hmacEnabled", String.valueOf(hmacEnabled))

        if (!"null".equals(String.valueOf(enableEncryption)))
            queryParams.put("enableEncryption", String.valueOf(enableEncryption))

        if (!"null".equals(String.valueOf(sharedKey)))
            queryParams.put("sharedKey", String.valueOf(sharedKey))

        if (!"null".equals(String.valueOf(hmacSharedKeyTTL)))
            queryParams.put("hmacSharedKeyTTL", String.valueOf(hmacSharedKeyTTL))

        if (!"null".equals(String.valueOf(backoffStandbyFactor)))
            queryParams.put("backoffStandbyFactor", String.valueOf(backoffStandbyFactor))

        if (!"null".equals(String.valueOf(backoffStableFactor)))
            queryParams.put("backoffStableFactor", String.valueOf(backoffStableFactor))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDiscoveryOakConfigInfo.class )

    }

    def orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String hcName, List<String> hcTags, String hcMbeanName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcName)))
            queryParams.put("hc.name", String.valueOf(hcName))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(hcMbeanName)))
            queryParams.put("hc.mbean.name", String.valueOf(hcMbeanName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.class )

    }

    def orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String title, String details, Boolean enabled, String serviceName, String logLevel, List<String> allowedRoots, Boolean queueProcessingEnabled, List<String> packageImporterEndpoints, List<String> passiveQueues, List<String> priorityQueues, String retryStrategy, Integer retryAttempts, String requestAuthorizationStrategyTarget, String transportSecretProviderTarget, String packageBuilderTarget, String triggersTarget, String queueProvider, Boolean asyncDelivery, Integer httpConnTimeout, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(title)))
            queryParams.put("title", String.valueOf(title))

        if (!"null".equals(String.valueOf(details)))
            queryParams.put("details", String.valueOf(details))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(logLevel)))
            queryParams.put("log.level", String.valueOf(logLevel))

        if (!"null".equals(String.valueOf(allowedRoots)))
            queryParams.put("allowed.roots", String.valueOf(allowedRoots))

        if (!"null".equals(String.valueOf(queueProcessingEnabled)))
            queryParams.put("queue.processing.enabled", String.valueOf(queueProcessingEnabled))

        if (!"null".equals(String.valueOf(packageImporterEndpoints)))
            queryParams.put("packageImporter.endpoints", String.valueOf(packageImporterEndpoints))

        if (!"null".equals(String.valueOf(passiveQueues)))
            queryParams.put("passiveQueues", String.valueOf(passiveQueues))

        if (!"null".equals(String.valueOf(priorityQueues)))
            queryParams.put("priorityQueues", String.valueOf(priorityQueues))

        if (!"null".equals(String.valueOf(retryStrategy)))
            queryParams.put("retry.strategy", String.valueOf(retryStrategy))

        if (!"null".equals(String.valueOf(retryAttempts)))
            queryParams.put("retry.attempts", String.valueOf(retryAttempts))

        if (!"null".equals(String.valueOf(requestAuthorizationStrategyTarget)))
            queryParams.put("requestAuthorizationStrategy.target", String.valueOf(requestAuthorizationStrategyTarget))

        if (!"null".equals(String.valueOf(transportSecretProviderTarget)))
            queryParams.put("transportSecretProvider.target", String.valueOf(transportSecretProviderTarget))

        if (!"null".equals(String.valueOf(packageBuilderTarget)))
            queryParams.put("packageBuilder.target", String.valueOf(packageBuilderTarget))

        if (!"null".equals(String.valueOf(triggersTarget)))
            queryParams.put("triggers.target", String.valueOf(triggersTarget))

        if (!"null".equals(String.valueOf(queueProvider)))
            queryParams.put("queue.provider", String.valueOf(queueProvider))

        if (!"null".equals(String.valueOf(asyncDelivery)))
            queryParams.put("async.delivery", String.valueOf(asyncDelivery))

        if (!"null".equals(String.valueOf(httpConnTimeout)))
            queryParams.put("http.conn.timeout", String.valueOf(httpConnTimeout))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.class )

    }

    def orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String jcrPrivilege, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(jcrPrivilege)))
            queryParams.put("jcrPrivilege", String.valueOf(jcrPrivilege))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.class )

    }

    def orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String title, String details, Boolean enabled, String serviceName, String logLevel, List<String> allowedRoots, String requestAuthorizationStrategyTarget, String queueProviderFactoryTarget, String packageBuilderTarget, String triggersTarget, List<String> priorityQueues, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(title)))
            queryParams.put("title", String.valueOf(title))

        if (!"null".equals(String.valueOf(details)))
            queryParams.put("details", String.valueOf(details))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(logLevel)))
            queryParams.put("log.level", String.valueOf(logLevel))

        if (!"null".equals(String.valueOf(allowedRoots)))
            queryParams.put("allowed.roots", String.valueOf(allowedRoots))

        if (!"null".equals(String.valueOf(requestAuthorizationStrategyTarget)))
            queryParams.put("requestAuthorizationStrategy.target", String.valueOf(requestAuthorizationStrategyTarget))

        if (!"null".equals(String.valueOf(queueProviderFactoryTarget)))
            queryParams.put("queueProviderFactory.target", String.valueOf(queueProviderFactoryTarget))

        if (!"null".equals(String.valueOf(packageBuilderTarget)))
            queryParams.put("packageBuilder.target", String.valueOf(packageBuilderTarget))

        if (!"null".equals(String.valueOf(triggersTarget)))
            queryParams.put("triggers.target", String.valueOf(triggersTarget))

        if (!"null".equals(String.valueOf(priorityQueues)))
            queryParams.put("priorityQueues", String.valueOf(priorityQueues))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.class )

    }

    def orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String title, String details, Boolean enabled, String serviceName, String logLevel, Boolean queueProcessingEnabled, List<String> packageExporterEndpoints, Integer pullItems, Integer httpConnTimeout, String requestAuthorizationStrategyTarget, String transportSecretProviderTarget, String packageBuilderTarget, String triggersTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(title)))
            queryParams.put("title", String.valueOf(title))

        if (!"null".equals(String.valueOf(details)))
            queryParams.put("details", String.valueOf(details))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(logLevel)))
            queryParams.put("log.level", String.valueOf(logLevel))

        if (!"null".equals(String.valueOf(queueProcessingEnabled)))
            queryParams.put("queue.processing.enabled", String.valueOf(queueProcessingEnabled))

        if (!"null".equals(String.valueOf(packageExporterEndpoints)))
            queryParams.put("packageExporter.endpoints", String.valueOf(packageExporterEndpoints))

        if (!"null".equals(String.valueOf(pullItems)))
            queryParams.put("pull.items", String.valueOf(pullItems))

        if (!"null".equals(String.valueOf(httpConnTimeout)))
            queryParams.put("http.conn.timeout", String.valueOf(httpConnTimeout))

        if (!"null".equals(String.valueOf(requestAuthorizationStrategyTarget)))
            queryParams.put("requestAuthorizationStrategy.target", String.valueOf(requestAuthorizationStrategyTarget))

        if (!"null".equals(String.valueOf(transportSecretProviderTarget)))
            queryParams.put("transportSecretProvider.target", String.valueOf(transportSecretProviderTarget))

        if (!"null".equals(String.valueOf(packageBuilderTarget)))
            queryParams.put("packageBuilder.target", String.valueOf(packageBuilderTarget))

        if (!"null".equals(String.valueOf(triggersTarget)))
            queryParams.put("triggers.target", String.valueOf(triggersTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.class )

    }

    def orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String title, String details, Boolean enabled, String serviceName, String logLevel, Boolean queueProcessingEnabled, String packageExporterTarget, String packageImporterTarget, String requestAuthorizationStrategyTarget, String triggersTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(title)))
            queryParams.put("title", String.valueOf(title))

        if (!"null".equals(String.valueOf(details)))
            queryParams.put("details", String.valueOf(details))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(logLevel)))
            queryParams.put("log.level", String.valueOf(logLevel))

        if (!"null".equals(String.valueOf(queueProcessingEnabled)))
            queryParams.put("queue.processing.enabled", String.valueOf(queueProcessingEnabled))

        if (!"null".equals(String.valueOf(packageExporterTarget)))
            queryParams.put("packageExporter.target", String.valueOf(packageExporterTarget))

        if (!"null".equals(String.valueOf(packageImporterTarget)))
            queryParams.put("packageImporter.target", String.valueOf(packageImporterTarget))

        if (!"null".equals(String.valueOf(requestAuthorizationStrategyTarget)))
            queryParams.put("requestAuthorizationStrategy.target", String.valueOf(requestAuthorizationStrategyTarget))

        if (!"null".equals(String.valueOf(triggersTarget)))
            queryParams.put("triggers.target", String.valueOf(triggersTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.class )

    }

    def orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String title, String details, Boolean enabled, String serviceName, String logLevel, Boolean queueProcessingEnabled, List<String> passiveQueues, List<String> packageExporterEndpoints, List<String> packageImporterEndpoints, String retryStrategy, Integer retryAttempts, Integer pullItems, Integer httpConnTimeout, String requestAuthorizationStrategyTarget, String transportSecretProviderTarget, String packageBuilderTarget, String triggersTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(title)))
            queryParams.put("title", String.valueOf(title))

        if (!"null".equals(String.valueOf(details)))
            queryParams.put("details", String.valueOf(details))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(logLevel)))
            queryParams.put("log.level", String.valueOf(logLevel))

        if (!"null".equals(String.valueOf(queueProcessingEnabled)))
            queryParams.put("queue.processing.enabled", String.valueOf(queueProcessingEnabled))

        if (!"null".equals(String.valueOf(passiveQueues)))
            queryParams.put("passiveQueues", String.valueOf(passiveQueues))

        if (!"null".equals(String.valueOf(packageExporterEndpoints)))
            queryParams.put("packageExporter.endpoints", String.valueOf(packageExporterEndpoints))

        if (!"null".equals(String.valueOf(packageImporterEndpoints)))
            queryParams.put("packageImporter.endpoints", String.valueOf(packageImporterEndpoints))

        if (!"null".equals(String.valueOf(retryStrategy)))
            queryParams.put("retry.strategy", String.valueOf(retryStrategy))

        if (!"null".equals(String.valueOf(retryAttempts)))
            queryParams.put("retry.attempts", String.valueOf(retryAttempts))

        if (!"null".equals(String.valueOf(pullItems)))
            queryParams.put("pull.items", String.valueOf(pullItems))

        if (!"null".equals(String.valueOf(httpConnTimeout)))
            queryParams.put("http.conn.timeout", String.valueOf(httpConnTimeout))

        if (!"null".equals(String.valueOf(requestAuthorizationStrategyTarget)))
            queryParams.put("requestAuthorizationStrategy.target", String.valueOf(requestAuthorizationStrategyTarget))

        if (!"null".equals(String.valueOf(transportSecretProviderTarget)))
            queryParams.put("transportSecretProvider.target", String.valueOf(transportSecretProviderTarget))

        if (!"null".equals(String.valueOf(packageBuilderTarget)))
            queryParams.put("packageBuilder.target", String.valueOf(packageBuilderTarget))

        if (!"null".equals(String.valueOf(triggersTarget)))
            queryParams.put("triggers.target", String.valueOf(triggersTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.class )

    }

    def orgApacheSlingDistributionMonitorDistributionQueueHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String hcName, List<String> hcTags, String hcMbeanName, Integer numberOfRetriesAllowed, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcName)))
            queryParams.put("hc.name", String.valueOf(hcName))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(hcMbeanName)))
            queryParams.put("hc.mbean.name", String.valueOf(hcMbeanName))

        if (!"null".equals(String.valueOf(numberOfRetriesAllowed)))
            queryParams.put("numberOfRetriesAllowed", String.valueOf(numberOfRetriesAllowed))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.class )

    }

    def orgApacheSlingDistributionPackagingImplExporterAgentDistributio ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String queue, Boolean dropInvalidItems, String agentTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(queue)))
            queryParams.put("queue", String.valueOf(queue))

        if (!"null".equals(String.valueOf(dropInvalidItems)))
            queryParams.put("drop.invalid.items", String.valueOf(dropInvalidItems))

        if (!"null".equals(String.valueOf(agentTarget)))
            queryParams.put("agent.target", String.valueOf(agentTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.class )

    }

    def orgApacheSlingDistributionPackagingImplExporterLocalDistributio ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String packageBuilderTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(packageBuilderTarget)))
            queryParams.put("packageBuilder.target", String.valueOf(packageBuilderTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.class )

    }

    def orgApacheSlingDistributionPackagingImplExporterRemoteDistributi ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, List<String> endpoints, Integer pullItems, String packageBuilderTarget, String transportSecretProviderTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(endpoints)))
            queryParams.put("endpoints", String.valueOf(endpoints))

        if (!"null".equals(String.valueOf(pullItems)))
            queryParams.put("pull.items", String.valueOf(pullItems))

        if (!"null".equals(String.valueOf(packageBuilderTarget)))
            queryParams.put("packageBuilder.target", String.valueOf(packageBuilderTarget))

        if (!"null".equals(String.valueOf(transportSecretProviderTarget)))
            queryParams.put("transportSecretProvider.target", String.valueOf(transportSecretProviderTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.class )

    }

    def orgApacheSlingDistributionPackagingImplImporterLocalDistributio ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String packageBuilderTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(packageBuilderTarget)))
            queryParams.put("packageBuilder.target", String.valueOf(packageBuilderTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.class )

    }

    def orgApacheSlingDistributionPackagingImplImporterRemoteDistributi ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, List<String> endpoints, String transportSecretProviderTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(endpoints)))
            queryParams.put("endpoints", String.valueOf(endpoints))

        if (!"null".equals(String.valueOf(transportSecretProviderTarget)))
            queryParams.put("transportSecretProvider.target", String.valueOf(transportSecretProviderTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.class )

    }

    def orgApacheSlingDistributionPackagingImplImporterRepositoryDistri ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String serviceName, String path, String privilegeName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("service.name", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(privilegeName)))
            queryParams.put("privilege.name", String.valueOf(privilegeName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.class )

    }

    def orgApacheSlingDistributionResourcesImplDistributionConfiguration ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String providerRoots, String kind, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(providerRoots)))
            queryParams.put("provider.roots", String.valueOf(providerRoots))

        if (!"null".equals(String.valueOf(kind)))
            queryParams.put("kind", String.valueOf(kind))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.class )

    }

    def orgApacheSlingDistributionResourcesImplDistributionServiceResour ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String providerRoots, String kind, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(providerRoots)))
            queryParams.put("provider.roots", String.valueOf(providerRoots))

        if (!"null".equals(String.valueOf(kind)))
            queryParams.put("kind", String.valueOf(kind))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.class )

    }

    def orgApacheSlingDistributionSerializationImplDistributionPackageBu ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String type, String formatTarget, String tempFsFolder, Integer fileThreshold, String memoryUnit, Boolean useOffHeapMemory, String digestAlgorithm, Integer monitoringQueueSize, Integer cleanupDelay, List<String> packageFilters, List<String> propertyFilters, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(type)))
            queryParams.put("type", String.valueOf(type))

        if (!"null".equals(String.valueOf(formatTarget)))
            queryParams.put("format.target", String.valueOf(formatTarget))

        if (!"null".equals(String.valueOf(tempFsFolder)))
            queryParams.put("tempFsFolder", String.valueOf(tempFsFolder))

        if (!"null".equals(String.valueOf(fileThreshold)))
            queryParams.put("fileThreshold", String.valueOf(fileThreshold))

        if (!"null".equals(String.valueOf(memoryUnit)))
            queryParams.put("memoryUnit", String.valueOf(memoryUnit))

        if (!"null".equals(String.valueOf(useOffHeapMemory)))
            queryParams.put("useOffHeapMemory", String.valueOf(useOffHeapMemory))

        if (!"null".equals(String.valueOf(digestAlgorithm)))
            queryParams.put("digestAlgorithm", String.valueOf(digestAlgorithm))

        if (!"null".equals(String.valueOf(monitoringQueueSize)))
            queryParams.put("monitoringQueueSize", String.valueOf(monitoringQueueSize))

        if (!"null".equals(String.valueOf(cleanupDelay)))
            queryParams.put("cleanupDelay", String.valueOf(cleanupDelay))

        if (!"null".equals(String.valueOf(packageFilters)))
            queryParams.put("package.filters", String.valueOf(packageFilters))

        if (!"null".equals(String.valueOf(propertyFilters)))
            queryParams.put("property.filters", String.valueOf(propertyFilters))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.class )

    }

    def orgApacheSlingDistributionSerializationImplVltVaultDistribution ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String type, String importMode, String aclHandling, String packageRoots, List<String> packageFilters, List<String> propertyFilters, String tempFsFolder, Boolean useBinaryReferences, Integer autoSaveThreshold, Integer cleanupDelay, Integer fileThreshold, String MEGA_BYTES, Boolean useOffHeapMemory, String digestAlgorithm, Integer monitoringQueueSize, List<String> pathsMapping, Boolean strictImport, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(type)))
            queryParams.put("type", String.valueOf(type))

        if (!"null".equals(String.valueOf(importMode)))
            queryParams.put("importMode", String.valueOf(importMode))

        if (!"null".equals(String.valueOf(aclHandling)))
            queryParams.put("aclHandling", String.valueOf(aclHandling))

        if (!"null".equals(String.valueOf(packageRoots)))
            queryParams.put("package.roots", String.valueOf(packageRoots))

        if (!"null".equals(String.valueOf(packageFilters)))
            queryParams.put("package.filters", String.valueOf(packageFilters))

        if (!"null".equals(String.valueOf(propertyFilters)))
            queryParams.put("property.filters", String.valueOf(propertyFilters))

        if (!"null".equals(String.valueOf(tempFsFolder)))
            queryParams.put("tempFsFolder", String.valueOf(tempFsFolder))

        if (!"null".equals(String.valueOf(useBinaryReferences)))
            queryParams.put("useBinaryReferences", String.valueOf(useBinaryReferences))

        if (!"null".equals(String.valueOf(autoSaveThreshold)))
            queryParams.put("autoSaveThreshold", String.valueOf(autoSaveThreshold))

        if (!"null".equals(String.valueOf(cleanupDelay)))
            queryParams.put("cleanupDelay", String.valueOf(cleanupDelay))

        if (!"null".equals(String.valueOf(fileThreshold)))
            queryParams.put("fileThreshold", String.valueOf(fileThreshold))

        if (!"null".equals(String.valueOf(MEGA_BYTES)))
            queryParams.put("MEGA_BYTES", String.valueOf(MEGA_BYTES))

        if (!"null".equals(String.valueOf(useOffHeapMemory)))
            queryParams.put("useOffHeapMemory", String.valueOf(useOffHeapMemory))

        if (!"null".equals(String.valueOf(digestAlgorithm)))
            queryParams.put("digestAlgorithm", String.valueOf(digestAlgorithm))

        if (!"null".equals(String.valueOf(monitoringQueueSize)))
            queryParams.put("monitoringQueueSize", String.valueOf(monitoringQueueSize))

        if (!"null".equals(String.valueOf(pathsMapping)))
            queryParams.put("pathsMapping", String.valueOf(pathsMapping))

        if (!"null".equals(String.valueOf(strictImport)))
            queryParams.put("strictImport", String.valueOf(strictImport))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.class )

    }

    def orgApacheSlingDistributionTransportImplUserCredentialsDistributi ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String username, String password, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(username)))
            queryParams.put("username", String.valueOf(username))

        if (!"null".equals(String.valueOf(password)))
            queryParams.put("password", String.valueOf(password))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.class )

    }

    def orgApacheSlingDistributionTriggerImplDistributionEventDistribute ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String path, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.class )

    }

    def orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String path, List<String> ignoredPathsPatterns, String serviceName, Boolean deep, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(ignoredPathsPatterns)))
            queryParams.put("ignoredPathsPatterns", String.valueOf(ignoredPathsPatterns))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(deep)))
            queryParams.put("deep", String.valueOf(deep))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.class )

    }

    def orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String path, String serviceName, String nuggetsPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        if (!"null".equals(String.valueOf(nuggetsPath)))
            queryParams.put("nuggetsPath", String.valueOf(nuggetsPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.class )

    }

    def orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String endpoint, String transportSecretProviderTarget, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(endpoint)))
            queryParams.put("endpoint", String.valueOf(endpoint))

        if (!"null".equals(String.valueOf(transportSecretProviderTarget)))
            queryParams.put("transportSecretProvider.target", String.valueOf(transportSecretProviderTarget))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.class )

    }

    def orgApacheSlingDistributionTriggerImplResourceEventDistributionTr ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String path, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.class )

    }

    def orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String path, String seconds, String serviceName, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(seconds)))
            queryParams.put("seconds", String.valueOf(seconds))

        if (!"null".equals(String.valueOf(serviceName)))
            queryParams.put("serviceName", String.valueOf(serviceName))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.class )

    }

    def orgApacheSlingEngineImplAuthSlingAuthenticator ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String osgiHttpWhiteboardContextSelect, String osgiHttpWhiteboardListener, String authSudoCookie, String authSudoParameter, Boolean authAnnonymous, List<String> slingAuthRequirements, String slingAuthAnonymousUser, String slingAuthAnonymousPassword, String authHttp, String authHttpRealm, List<String> authUriSuffix, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(osgiHttpWhiteboardContextSelect)))
            queryParams.put("osgi.http.whiteboard.context.select", String.valueOf(osgiHttpWhiteboardContextSelect))

        if (!"null".equals(String.valueOf(osgiHttpWhiteboardListener)))
            queryParams.put("osgi.http.whiteboard.listener", String.valueOf(osgiHttpWhiteboardListener))

        if (!"null".equals(String.valueOf(authSudoCookie)))
            queryParams.put("auth.sudo.cookie", String.valueOf(authSudoCookie))

        if (!"null".equals(String.valueOf(authSudoParameter)))
            queryParams.put("auth.sudo.parameter", String.valueOf(authSudoParameter))

        if (!"null".equals(String.valueOf(authAnnonymous)))
            queryParams.put("auth.annonymous", String.valueOf(authAnnonymous))

        if (!"null".equals(String.valueOf(slingAuthRequirements)))
            queryParams.put("sling.auth.requirements", String.valueOf(slingAuthRequirements))

        if (!"null".equals(String.valueOf(slingAuthAnonymousUser)))
            queryParams.put("sling.auth.anonymous.user", String.valueOf(slingAuthAnonymousUser))

        if (!"null".equals(String.valueOf(slingAuthAnonymousPassword)))
            queryParams.put("sling.auth.anonymous.password", String.valueOf(slingAuthAnonymousPassword))

        if (!"null".equals(String.valueOf(authHttp)))
            queryParams.put("auth.http", String.valueOf(authHttp))

        if (!"null".equals(String.valueOf(authHttpRealm)))
            queryParams.put("auth.http.realm", String.valueOf(authHttpRealm))

        if (!"null".equals(String.valueOf(authUriSuffix)))
            queryParams.put("auth.uri.suffix", String.valueOf(authUriSuffix))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.class )

    }

    def orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> extensions, Integer minDurationMs, Integer maxDurationMs, Boolean compactLogFormat, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(extensions)))
            queryParams.put("extensions", String.valueOf(extensions))

        if (!"null".equals(String.valueOf(minDurationMs)))
            queryParams.put("minDurationMs", String.valueOf(minDurationMs))

        if (!"null".equals(String.valueOf(maxDurationMs)))
            queryParams.put("maxDurationMs", String.valueOf(maxDurationMs))

        if (!"null".equals(String.valueOf(compactLogFormat)))
            queryParams.put("compactLogFormat", String.valueOf(compactLogFormat))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.class )

    }

    def orgApacheSlingEngineImplLogRequestLogger ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String requestLogOutput, Integer requestLogOutputtype, Boolean requestLogEnabled, String accessLogOutput, Integer accessLogOutputtype, Boolean accessLogEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(requestLogOutput)))
            queryParams.put("request.log.output", String.valueOf(requestLogOutput))

        if (!"null".equals(String.valueOf(requestLogOutputtype)))
            queryParams.put("request.log.outputtype", String.valueOf(requestLogOutputtype))

        if (!"null".equals(String.valueOf(requestLogEnabled)))
            queryParams.put("request.log.enabled", String.valueOf(requestLogEnabled))

        if (!"null".equals(String.valueOf(accessLogOutput)))
            queryParams.put("access.log.output", String.valueOf(accessLogOutput))

        if (!"null".equals(String.valueOf(accessLogOutputtype)))
            queryParams.put("access.log.outputtype", String.valueOf(accessLogOutputtype))

        if (!"null".equals(String.valueOf(accessLogEnabled)))
            queryParams.put("access.log.enabled", String.valueOf(accessLogEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEngineImplLogRequestLoggerInfo.class )

    }

    def orgApacheSlingEngineImplLogRequestLoggerService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String requestLogServiceFormat, String requestLogServiceOutput, Integer requestLogServiceOutputtype, Boolean requestLogServiceOnentry, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(requestLogServiceFormat)))
            queryParams.put("request.log.service.format", String.valueOf(requestLogServiceFormat))

        if (!"null".equals(String.valueOf(requestLogServiceOutput)))
            queryParams.put("request.log.service.output", String.valueOf(requestLogServiceOutput))

        if (!"null".equals(String.valueOf(requestLogServiceOutputtype)))
            queryParams.put("request.log.service.outputtype", String.valueOf(requestLogServiceOutputtype))

        if (!"null".equals(String.valueOf(requestLogServiceOnentry)))
            queryParams.put("request.log.service.onentry", String.valueOf(requestLogServiceOnentry))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.class )

    }

    def orgApacheSlingEngineImplSlingMainServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer slingMaxCalls, Integer slingMaxInclusions, Boolean slingTraceAllow, Integer slingMaxRecordRequests, List<String> slingStorePatternRequests, String slingServerinfo, List<String> slingAdditionalResponseHeaders, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingMaxCalls)))
            queryParams.put("sling.max.calls", String.valueOf(slingMaxCalls))

        if (!"null".equals(String.valueOf(slingMaxInclusions)))
            queryParams.put("sling.max.inclusions", String.valueOf(slingMaxInclusions))

        if (!"null".equals(String.valueOf(slingTraceAllow)))
            queryParams.put("sling.trace.allow", String.valueOf(slingTraceAllow))

        if (!"null".equals(String.valueOf(slingMaxRecordRequests)))
            queryParams.put("sling.max.record.requests", String.valueOf(slingMaxRecordRequests))

        if (!"null".equals(String.valueOf(slingStorePatternRequests)))
            queryParams.put("sling.store.pattern.requests", String.valueOf(slingStorePatternRequests))

        if (!"null".equals(String.valueOf(slingServerinfo)))
            queryParams.put("sling.serverinfo", String.valueOf(slingServerinfo))

        if (!"null".equals(String.valueOf(slingAdditionalResponseHeaders)))
            queryParams.put("sling.additional.response.headers", String.valueOf(slingAdditionalResponseHeaders))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEngineImplSlingMainServletInfo.class )

    }

    def orgApacheSlingEngineParameters ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingDefaultParameterEncoding, Integer slingDefaultMaxParameters, String fileLocation, Integer fileThreshold, Integer fileMax, Integer requestMax, Boolean slingDefaultParameterCheckForAdditionalContainerParameters, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.engine.parameters"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingDefaultParameterEncoding)))
            queryParams.put("sling.default.parameter.encoding", String.valueOf(slingDefaultParameterEncoding))

        if (!"null".equals(String.valueOf(slingDefaultMaxParameters)))
            queryParams.put("sling.default.max.parameters", String.valueOf(slingDefaultMaxParameters))

        if (!"null".equals(String.valueOf(fileLocation)))
            queryParams.put("file.location", String.valueOf(fileLocation))

        if (!"null".equals(String.valueOf(fileThreshold)))
            queryParams.put("file.threshold", String.valueOf(fileThreshold))

        if (!"null".equals(String.valueOf(fileMax)))
            queryParams.put("file.max", String.valueOf(fileMax))

        if (!"null".equals(String.valueOf(requestMax)))
            queryParams.put("request.max", String.valueOf(requestMax))

        if (!"null".equals(String.valueOf(slingDefaultParameterCheckForAdditionalContainerParameters)))
            queryParams.put("sling.default.parameter.checkForAdditionalContainerParameters", String.valueOf(slingDefaultParameterCheckForAdditionalContainerParameters))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEngineParametersInfo.class )

    }

    def orgApacheSlingEventImplEventingThreadPool ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer minPoolSize, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(minPoolSize)))
            queryParams.put("minPoolSize", String.valueOf(minPoolSize))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEventImplEventingThreadPoolInfo.class )

    }

    def orgApacheSlingEventImplJobsDefaultJobManager ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String queuePriority, Integer queueRetries, Integer queueRetrydelay, Integer queueMaxparallel, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(queuePriority)))
            queryParams.put("queue.priority", String.valueOf(queuePriority))

        if (!"null".equals(String.valueOf(queueRetries)))
            queryParams.put("queue.retries", String.valueOf(queueRetries))

        if (!"null".equals(String.valueOf(queueRetrydelay)))
            queryParams.put("queue.retrydelay", String.valueOf(queueRetrydelay))

        if (!"null".equals(String.valueOf(queueMaxparallel)))
            queryParams.put("queue.maxparallel", String.valueOf(queueMaxparallel))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEventImplJobsDefaultJobManagerInfo.class )

    }

    def orgApacheSlingEventImplJobsJcrPersistenceHandler ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean jobConsumermanagerDisableDistribution, Integer startupDelay, Integer cleanupPeriod, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jobConsumermanagerDisableDistribution)))
            queryParams.put("job.consumermanager.disableDistribution", String.valueOf(jobConsumermanagerDisableDistribution))

        if (!"null".equals(String.valueOf(startupDelay)))
            queryParams.put("startup.delay", String.valueOf(startupDelay))

        if (!"null".equals(String.valueOf(cleanupPeriod)))
            queryParams.put("cleanup.period", String.valueOf(cleanupPeriod))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.class )

    }

    def orgApacheSlingEventImplJobsJobConsumerManager ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean orgApacheSlingInstallerConfigurationPersist, List<String> jobConsumermanagerWhitelist, List<String> jobConsumermanagerBlacklist, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheSlingInstallerConfigurationPersist)))
            queryParams.put("org.apache.sling.installer.configuration.persist", String.valueOf(orgApacheSlingInstallerConfigurationPersist))

        if (!"null".equals(String.valueOf(jobConsumermanagerWhitelist)))
            queryParams.put("job.consumermanager.whitelist", String.valueOf(jobConsumermanagerWhitelist))

        if (!"null".equals(String.valueOf(jobConsumermanagerBlacklist)))
            queryParams.put("job.consumermanager.blacklist", String.valueOf(jobConsumermanagerBlacklist))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEventImplJobsJobConsumerManagerInfo.class )

    }

    def orgApacheSlingEventJobsQueueConfiguration ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String queueName, List<String> queueTopics, String queueType, String queuePriority, Integer queueRetries, Integer queueRetrydelay, BigDecimal queueMaxparallel, Boolean queueKeepJobs, Boolean queuePreferRunOnCreationInstance, Integer queueThreadPoolSize, Integer serviceRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(queueName)))
            queryParams.put("queue.name", String.valueOf(queueName))

        if (!"null".equals(String.valueOf(queueTopics)))
            queryParams.put("queue.topics", String.valueOf(queueTopics))

        if (!"null".equals(String.valueOf(queueType)))
            queryParams.put("queue.type", String.valueOf(queueType))

        if (!"null".equals(String.valueOf(queuePriority)))
            queryParams.put("queue.priority", String.valueOf(queuePriority))

        if (!"null".equals(String.valueOf(queueRetries)))
            queryParams.put("queue.retries", String.valueOf(queueRetries))

        if (!"null".equals(String.valueOf(queueRetrydelay)))
            queryParams.put("queue.retrydelay", String.valueOf(queueRetrydelay))

        if (!"null".equals(String.valueOf(queueMaxparallel)))
            queryParams.put("queue.maxparallel", String.valueOf(queueMaxparallel))

        if (!"null".equals(String.valueOf(queueKeepJobs)))
            queryParams.put("queue.keepJobs", String.valueOf(queueKeepJobs))

        if (!"null".equals(String.valueOf(queuePreferRunOnCreationInstance)))
            queryParams.put("queue.preferRunOnCreationInstance", String.valueOf(queuePreferRunOnCreationInstance))

        if (!"null".equals(String.valueOf(queueThreadPoolSize)))
            queryParams.put("queue.threadPoolSize", String.valueOf(queueThreadPoolSize))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingEventJobsQueueConfigurationInfo.class )

    }

    def orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> users, List<String> groups, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(users)))
            queryParams.put("users", String.valueOf(users))

        if (!"null".equals(String.valueOf(groups)))
            queryParams.put("groups", String.valueOf(groups))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.class )

    }

    def orgApacheSlingFeatureflagsFeature ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String description, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.featureflags.Feature"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(description)))
            queryParams.put("description", String.valueOf(description))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingFeatureflagsFeatureInfo.class )

    }

    def orgApacheSlingFeatureflagsImplConfiguredFeature ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String name, String description, Boolean enabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(name)))
            queryParams.put("name", String.valueOf(name))

        if (!"null".equals(String.valueOf(description)))
            queryParams.put("description", String.valueOf(description))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.class )

    }

    def orgApacheSlingHapiImplHApiUtilImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String orgApacheSlingHapiToolsResourcetype, String orgApacheSlingHapiToolsCollectionresourcetype, List<String> orgApacheSlingHapiToolsSearchpaths, String orgApacheSlingHapiToolsExternalurl, Boolean orgApacheSlingHapiToolsEnabled, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheSlingHapiToolsResourcetype)))
            queryParams.put("org.apache.sling.hapi.tools.resourcetype", String.valueOf(orgApacheSlingHapiToolsResourcetype))

        if (!"null".equals(String.valueOf(orgApacheSlingHapiToolsCollectionresourcetype)))
            queryParams.put("org.apache.sling.hapi.tools.collectionresourcetype", String.valueOf(orgApacheSlingHapiToolsCollectionresourcetype))

        if (!"null".equals(String.valueOf(orgApacheSlingHapiToolsSearchpaths)))
            queryParams.put("org.apache.sling.hapi.tools.searchpaths", String.valueOf(orgApacheSlingHapiToolsSearchpaths))

        if (!"null".equals(String.valueOf(orgApacheSlingHapiToolsExternalurl)))
            queryParams.put("org.apache.sling.hapi.tools.externalurl", String.valueOf(orgApacheSlingHapiToolsExternalurl))

        if (!"null".equals(String.valueOf(orgApacheSlingHapiToolsEnabled)))
            queryParams.put("org.apache.sling.hapi.tools.enabled", String.valueOf(orgApacheSlingHapiToolsEnabled))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingHapiImplHApiUtilImplInfo.class )

    }

    def orgApacheSlingHcCoreImplCompositeHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String hcName, List<String> hcTags, String hcMbeanName, List<String> filterTags, Boolean filterCombineTagsWithOr, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcName)))
            queryParams.put("hc.name", String.valueOf(hcName))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(hcMbeanName)))
            queryParams.put("hc.mbean.name", String.valueOf(hcMbeanName))

        if (!"null".equals(String.valueOf(filterTags)))
            queryParams.put("filter.tags", String.valueOf(filterTags))

        if (!"null".equals(String.valueOf(filterCombineTagsWithOr)))
            queryParams.put("filter.combineTagsWithOr", String.valueOf(filterCombineTagsWithOr))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.class )

    }

    def orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer timeoutInMs, Integer longRunningFutureThresholdForCriticalMs, Integer resultCacheTtlInMs, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(timeoutInMs)))
            queryParams.put("timeoutInMs", String.valueOf(timeoutInMs))

        if (!"null".equals(String.valueOf(longRunningFutureThresholdForCriticalMs)))
            queryParams.put("longRunningFutureThresholdForCriticalMs", String.valueOf(longRunningFutureThresholdForCriticalMs))

        if (!"null".equals(String.valueOf(resultCacheTtlInMs)))
            queryParams.put("resultCacheTtlInMs", String.valueOf(resultCacheTtlInMs))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.class )

    }

    def orgApacheSlingHcCoreImplJmxAttributeHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String hcName, List<String> hcTags, String hcMbeanName, String mbeanName, String attributeName, String attributeValueConstraint, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcName)))
            queryParams.put("hc.name", String.valueOf(hcName))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(hcMbeanName)))
            queryParams.put("hc.mbean.name", String.valueOf(hcMbeanName))

        if (!"null".equals(String.valueOf(mbeanName)))
            queryParams.put("mbean.name", String.valueOf(mbeanName))

        if (!"null".equals(String.valueOf(attributeName)))
            queryParams.put("attribute.name", String.valueOf(attributeName))

        if (!"null".equals(String.valueOf(attributeValueConstraint)))
            queryParams.put("attribute.value.constraint", String.valueOf(attributeValueConstraint))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.class )

    }

    def orgApacheSlingHcCoreImplScriptableHealthCheck ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String hcName, List<String> hcTags, String hcMbeanName, String expression, String languageExtension, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(hcName)))
            queryParams.put("hc.name", String.valueOf(hcName))

        if (!"null".equals(String.valueOf(hcTags)))
            queryParams.put("hc.tags", String.valueOf(hcTags))

        if (!"null".equals(String.valueOf(hcMbeanName)))
            queryParams.put("hc.mbean.name", String.valueOf(hcMbeanName))

        if (!"null".equals(String.valueOf(expression)))
            queryParams.put("expression", String.valueOf(expression))

        if (!"null".equals(String.valueOf(languageExtension)))
            queryParams.put("language.extension", String.valueOf(languageExtension))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.class )

    }

    def orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String servletPath, Boolean disabled, String corsAccessControlAllowOrigin, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(servletPath)))
            queryParams.put("servletPath", String.valueOf(servletPath))

        if (!"null".equals(String.valueOf(disabled)))
            queryParams.put("disabled", String.valueOf(disabled))

        if (!"null".equals(String.valueOf(corsAccessControlAllowOrigin)))
            queryParams.put("cors.accessControlAllowOrigin", String.valueOf(corsAccessControlAllowOrigin))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.class )

    }

    def orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer totalWidth, Integer colWidthName, Integer colWidthResult, Integer colWidthTiming, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(totalWidth)))
            queryParams.put("totalWidth", String.valueOf(totalWidth))

        if (!"null".equals(String.valueOf(colWidthName)))
            queryParams.put("colWidthName", String.valueOf(colWidthName))

        if (!"null".equals(String.valueOf(colWidthResult)))
            queryParams.put("colWidthResult", String.valueOf(colWidthResult))

        if (!"null".equals(String.valueOf(colWidthTiming)))
            queryParams.put("colWidthTiming", String.valueOf(colWidthTiming))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.class )

    }

    def orgApacheSlingI18nImplI18NFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, List<String> slingFilterScope, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(slingFilterScope)))
            queryParams.put("sling.filter.scope", String.valueOf(slingFilterScope))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingI18nImplI18NFilterInfo.class )

    }

    def orgApacheSlingI18nImplJcrResourceBundleProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String localeDefault, Boolean preloadBundles, Integer invalidationDelay, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(localeDefault)))
            queryParams.put("locale.default", String.valueOf(localeDefault))

        if (!"null".equals(String.valueOf(preloadBundles)))
            queryParams.put("preload.bundles", String.valueOf(preloadBundles))

        if (!"null".equals(String.valueOf(invalidationDelay)))
            queryParams.put("invalidation.delay", String.valueOf(invalidationDelay))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.class )

    }

    def orgApacheSlingInstallerProviderJcrImplJcrInstaller ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> handlerSchemes, String slingJcrinstallFolderNameRegexp, Integer slingJcrinstallFolderMaxDepth, List<String> slingJcrinstallSearchPath, String slingJcrinstallNewConfigPath, String slingJcrinstallSignalPath, Boolean slingJcrinstallEnableWriteback, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(handlerSchemes)))
            queryParams.put("handler.schemes", String.valueOf(handlerSchemes))

        if (!"null".equals(String.valueOf(slingJcrinstallFolderNameRegexp)))
            queryParams.put("sling.jcrinstall.folder.name.regexp", String.valueOf(slingJcrinstallFolderNameRegexp))

        if (!"null".equals(String.valueOf(slingJcrinstallFolderMaxDepth)))
            queryParams.put("sling.jcrinstall.folder.max.depth", String.valueOf(slingJcrinstallFolderMaxDepth))

        if (!"null".equals(String.valueOf(slingJcrinstallSearchPath)))
            queryParams.put("sling.jcrinstall.search.path", String.valueOf(slingJcrinstallSearchPath))

        if (!"null".equals(String.valueOf(slingJcrinstallNewConfigPath)))
            queryParams.put("sling.jcrinstall.new.config.path", String.valueOf(slingJcrinstallNewConfigPath))

        if (!"null".equals(String.valueOf(slingJcrinstallSignalPath)))
            queryParams.put("sling.jcrinstall.signal.path", String.valueOf(slingJcrinstallSignalPath))

        if (!"null".equals(String.valueOf(slingJcrinstallEnableWriteback)))
            queryParams.put("sling.jcrinstall.enable.writeback", String.valueOf(slingJcrinstallEnableWriteback))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.class )

    }

    def orgApacheSlingJcrBaseInternalLoginAdminWhitelist ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean whitelistBypass, String whitelistBundlesRegexp, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(whitelistBypass)))
            queryParams.put("whitelist.bypass", String.valueOf(whitelistBypass))

        if (!"null".equals(String.valueOf(whitelistBundlesRegexp)))
            queryParams.put("whitelist.bundles.regexp", String.valueOf(whitelistBundlesRegexp))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.class )

    }

    def orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String whitelistName, List<String> whitelistBundles, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(whitelistName)))
            queryParams.put("whitelist.name", String.valueOf(whitelistName))

        if (!"null".equals(String.valueOf(whitelistBundles)))
            queryParams.put("whitelist.bundles", String.valueOf(whitelistBundles))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.class )

    }

    def orgApacheSlingJcrDavexImplServletsSlingDavExServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String alias, Boolean davCreateAbsoluteUri, String davProtectedhandlers, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(alias)))
            queryParams.put("alias", String.valueOf(alias))

        if (!"null".equals(String.valueOf(davCreateAbsoluteUri)))
            queryParams.put("dav.create-absolute-uri", String.valueOf(davCreateAbsoluteUri))

        if (!"null".equals(String.valueOf(davProtectedhandlers)))
            queryParams.put("dav.protectedhandlers", String.valueOf(davProtectedhandlers))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.class )

    }

    def orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String javaNamingFactoryInitial, String javaNamingProviderUrl, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(javaNamingFactoryInitial)))
            queryParams.put("java.naming.factory.initial", String.valueOf(javaNamingFactoryInitial))

        if (!"null".equals(String.valueOf(javaNamingProviderUrl)))
            queryParams.put("java.naming.provider.url", String.valueOf(javaNamingProviderUrl))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.class )

    }

    def orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer port, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(port)))
            queryParams.put("port", String.valueOf(port))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.class )

    }

    def orgApacheSlingJcrRepoinitImplRepositoryInitializer ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> references, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(references)))
            queryParams.put("references", String.valueOf(references))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.class )

    }

    def orgApacheSlingJcrRepoinitRepositoryInitializer ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> references, List<String> scripts, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(references)))
            queryParams.put("references", String.valueOf(references))

        if (!"null".equals(String.valueOf(scripts)))
            queryParams.put("scripts", String.valueOf(scripts))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.class )

    }

    def orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> resourceResolverSearchpath, Boolean resourceResolverManglenamespaces, Boolean resourceResolverAllowDirect, List<String> resourceResolverRequiredProviders, List<String> resourceResolverRequiredProvidernames, List<String> resourceResolverVirtual, List<String> resourceResolverMapping, String resourceResolverMapLocation, List<String> resourceResolverMapObservation, Integer resourceResolverDefaultVanityRedirectStatus, Boolean resourceResolverEnableVanitypath, Integer resourceResolverVanitypathMaxEntries, Boolean resourceResolverVanitypathMaxEntriesStartup, Integer resourceResolverVanitypathBloomfilterMaxBytes, Boolean resourceResolverOptimizeAliasResolution, List<String> resourceResolverVanitypathWhitelist, List<String> resourceResolverVanitypathBlacklist, Boolean resourceResolverVanityPrecedence, Boolean resourceResolverProviderhandlingParanoid, Boolean resourceResolverLogClosing, Boolean resourceResolverLogUnclosed, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(resourceResolverSearchpath)))
            queryParams.put("resource.resolver.searchpath", String.valueOf(resourceResolverSearchpath))

        if (!"null".equals(String.valueOf(resourceResolverManglenamespaces)))
            queryParams.put("resource.resolver.manglenamespaces", String.valueOf(resourceResolverManglenamespaces))

        if (!"null".equals(String.valueOf(resourceResolverAllowDirect)))
            queryParams.put("resource.resolver.allowDirect", String.valueOf(resourceResolverAllowDirect))

        if (!"null".equals(String.valueOf(resourceResolverRequiredProviders)))
            queryParams.put("resource.resolver.required.providers", String.valueOf(resourceResolverRequiredProviders))

        if (!"null".equals(String.valueOf(resourceResolverRequiredProvidernames)))
            queryParams.put("resource.resolver.required.providernames", String.valueOf(resourceResolverRequiredProvidernames))

        if (!"null".equals(String.valueOf(resourceResolverVirtual)))
            queryParams.put("resource.resolver.virtual", String.valueOf(resourceResolverVirtual))

        if (!"null".equals(String.valueOf(resourceResolverMapping)))
            queryParams.put("resource.resolver.mapping", String.valueOf(resourceResolverMapping))

        if (!"null".equals(String.valueOf(resourceResolverMapLocation)))
            queryParams.put("resource.resolver.map.location", String.valueOf(resourceResolverMapLocation))

        if (!"null".equals(String.valueOf(resourceResolverMapObservation)))
            queryParams.put("resource.resolver.map.observation", String.valueOf(resourceResolverMapObservation))

        if (!"null".equals(String.valueOf(resourceResolverDefaultVanityRedirectStatus)))
            queryParams.put("resource.resolver.default.vanity.redirect.status", String.valueOf(resourceResolverDefaultVanityRedirectStatus))

        if (!"null".equals(String.valueOf(resourceResolverEnableVanitypath)))
            queryParams.put("resource.resolver.enable.vanitypath", String.valueOf(resourceResolverEnableVanitypath))

        if (!"null".equals(String.valueOf(resourceResolverVanitypathMaxEntries)))
            queryParams.put("resource.resolver.vanitypath.maxEntries", String.valueOf(resourceResolverVanitypathMaxEntries))

        if (!"null".equals(String.valueOf(resourceResolverVanitypathMaxEntriesStartup)))
            queryParams.put("resource.resolver.vanitypath.maxEntries.startup", String.valueOf(resourceResolverVanitypathMaxEntriesStartup))

        if (!"null".equals(String.valueOf(resourceResolverVanitypathBloomfilterMaxBytes)))
            queryParams.put("resource.resolver.vanitypath.bloomfilter.maxBytes", String.valueOf(resourceResolverVanitypathBloomfilterMaxBytes))

        if (!"null".equals(String.valueOf(resourceResolverOptimizeAliasResolution)))
            queryParams.put("resource.resolver.optimize.alias.resolution", String.valueOf(resourceResolverOptimizeAliasResolution))

        if (!"null".equals(String.valueOf(resourceResolverVanitypathWhitelist)))
            queryParams.put("resource.resolver.vanitypath.whitelist", String.valueOf(resourceResolverVanitypathWhitelist))

        if (!"null".equals(String.valueOf(resourceResolverVanitypathBlacklist)))
            queryParams.put("resource.resolver.vanitypath.blacklist", String.valueOf(resourceResolverVanitypathBlacklist))

        if (!"null".equals(String.valueOf(resourceResolverVanityPrecedence)))
            queryParams.put("resource.resolver.vanity.precedence", String.valueOf(resourceResolverVanityPrecedence))

        if (!"null".equals(String.valueOf(resourceResolverProviderhandlingParanoid)))
            queryParams.put("resource.resolver.providerhandling.paranoid", String.valueOf(resourceResolverProviderhandlingParanoid))

        if (!"null".equals(String.valueOf(resourceResolverLogClosing)))
            queryParams.put("resource.resolver.log.closing", String.valueOf(resourceResolverLogClosing))

        if (!"null".equals(String.valueOf(resourceResolverLogUnclosed)))
            queryParams.put("resource.resolver.log.unclosed", String.valueOf(resourceResolverLogUnclosed))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.class )

    }

    def orgApacheSlingJcrResourceInternalJcrSystemUserValidator ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean allowOnlySystemUser, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(allowOnlySystemUser)))
            queryParams.put("allow.only.system.user", String.valueOf(allowOnlySystemUser))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.class )

    }

    def orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String path, String checkpathPrefix, String jcrPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        if (!"null".equals(String.valueOf(checkpathPrefix)))
            queryParams.put("checkpath.prefix", String.valueOf(checkpathPrefix))

        if (!"null".equals(String.valueOf(jcrPath)))
            queryParams.put("jcrPath", String.valueOf(jcrPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.class )

    }

    def orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, String typeCollections, String typeNoncollections, String typeContent, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(typeCollections)))
            queryParams.put("type.collections", String.valueOf(typeCollections))

        if (!"null".equals(String.valueOf(typeNoncollections)))
            queryParams.put("type.noncollections", String.valueOf(typeNoncollections))

        if (!"null".equals(String.valueOf(typeContent)))
            queryParams.put("type.content", String.valueOf(typeContent))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.class )

    }

    def orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.class )

    }

    def orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String davRoot, Boolean davCreateAbsoluteUri, String davRealm, List<String> collectionTypes, List<String> filterPrefixes, String filterTypes, String filterUris, String typeCollections, String typeNoncollections, String typeContent, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(davRoot)))
            queryParams.put("dav.root", String.valueOf(davRoot))

        if (!"null".equals(String.valueOf(davCreateAbsoluteUri)))
            queryParams.put("dav.create-absolute-uri", String.valueOf(davCreateAbsoluteUri))

        if (!"null".equals(String.valueOf(davRealm)))
            queryParams.put("dav.realm", String.valueOf(davRealm))

        if (!"null".equals(String.valueOf(collectionTypes)))
            queryParams.put("collection.types", String.valueOf(collectionTypes))

        if (!"null".equals(String.valueOf(filterPrefixes)))
            queryParams.put("filter.prefixes", String.valueOf(filterPrefixes))

        if (!"null".equals(String.valueOf(filterTypes)))
            queryParams.put("filter.types", String.valueOf(filterTypes))

        if (!"null".equals(String.valueOf(filterUris)))
            queryParams.put("filter.uris", String.valueOf(filterUris))

        if (!"null".equals(String.valueOf(typeCollections)))
            queryParams.put("type.collections", String.valueOf(typeCollections))

        if (!"null".equals(String.valueOf(typeNoncollections)))
            queryParams.put("type.noncollections", String.valueOf(typeNoncollections))

        if (!"null".equals(String.valueOf(typeContent)))
            queryParams.put("type.content", String.valueOf(typeContent))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.class )

    }

    def orgApacheSlingJmxProviderImplJMXResourceProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String providerRoots, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(providerRoots)))
            queryParams.put("provider.roots", String.valueOf(providerRoots))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.class )

    }

    def orgApacheSlingModelsImplModelAdapterFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String osgiHttpWhiteboardListener, String osgiHttpWhiteboardContextSelect, Integer maxRecursionDepth, Integer cleanupJobPeriod, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(osgiHttpWhiteboardListener)))
            queryParams.put("osgi.http.whiteboard.listener", String.valueOf(osgiHttpWhiteboardListener))

        if (!"null".equals(String.valueOf(osgiHttpWhiteboardContextSelect)))
            queryParams.put("osgi.http.whiteboard.context.select", String.valueOf(osgiHttpWhiteboardContextSelect))

        if (!"null".equals(String.valueOf(maxRecursionDepth)))
            queryParams.put("max.recursion.depth", String.valueOf(maxRecursionDepth))

        if (!"null".equals(String.valueOf(cleanupJobPeriod)))
            queryParams.put("cleanup.job.period", String.valueOf(cleanupJobPeriod))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingModelsImplModelAdapterFactoryInfo.class )

    }

    def orgApacheSlingModelsJacksonexporterImplResourceModuleProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer maxRecursionLevels, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(maxRecursionLevels)))
            queryParams.put("max.recursion.levels", String.valueOf(maxRecursionLevels))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.class )

    }

    def orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String felixInventoryPrinterName, String felixInventoryPrinterTitle, String path, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(felixInventoryPrinterName)))
            queryParams.put("felix.inventory.printer.name", String.valueOf(felixInventoryPrinterName))

        if (!"null".equals(String.valueOf(felixInventoryPrinterTitle)))
            queryParams.put("felix.inventory.printer.title", String.valueOf(felixInventoryPrinterTitle))

        if (!"null".equals(String.valueOf(path)))
            queryParams.put("path", String.valueOf(path))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.class )

    }

    def orgApacheSlingResourcemergerImplMergedResourceProviderFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String mergeRoot, Boolean mergeReadOnly, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mergeRoot)))
            queryParams.put("merge.root", String.valueOf(mergeRoot))

        if (!"null".equals(String.valueOf(mergeReadOnly)))
            queryParams.put("merge.readOnly", String.valueOf(mergeReadOnly))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.class )

    }

    def orgApacheSlingResourcemergerPickerOverriding ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String mergeRoot, Boolean mergeReadOnly, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(mergeRoot)))
            queryParams.put("merge.root", String.valueOf(mergeRoot))

        if (!"null".equals(String.valueOf(mergeReadOnly)))
            queryParams.put("merge.readOnly", String.valueOf(mergeReadOnly))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingResourcemergerPickerOverridingInfo.class )

    }

    def orgApacheSlingScriptingCoreImplScriptCacheImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer orgApacheSlingScriptingCacheSize, List<String> orgApacheSlingScriptingCacheAdditionalExtensions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheSlingScriptingCacheSize)))
            queryParams.put("org.apache.sling.scripting.cache.size", String.valueOf(orgApacheSlingScriptingCacheSize))

        if (!"null".equals(String.valueOf(orgApacheSlingScriptingCacheAdditionalExtensions)))
            queryParams.put("org.apache.sling.scripting.cache.additional_extensions", String.valueOf(orgApacheSlingScriptingCacheAdditionalExtensions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.class )

    }

    def orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean logStacktraceOnclose, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(logStacktraceOnclose)))
            queryParams.put("log.stacktrace.onclose", String.valueOf(logStacktraceOnclose))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.class )

    }

    def orgApacheSlingScriptingJavaImplJavaScriptEngineFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean javaClassdebuginfo, String javaJavaEncoding, String javaCompilerSourceVM, String javaCompilerTargetVM, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(javaClassdebuginfo)))
            queryParams.put("java.classdebuginfo", String.valueOf(javaClassdebuginfo))

        if (!"null".equals(String.valueOf(javaJavaEncoding)))
            queryParams.put("java.javaEncoding", String.valueOf(javaJavaEncoding))

        if (!"null".equals(String.valueOf(javaCompilerSourceVM)))
            queryParams.put("java.compilerSourceVM", String.valueOf(javaCompilerSourceVM))

        if (!"null".equals(String.valueOf(javaCompilerTargetVM)))
            queryParams.put("java.compilerTargetVM", String.valueOf(javaCompilerTargetVM))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.class )

    }

    def orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer orgApacheSlingScriptingJavascriptRhinoOptLevel, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheSlingScriptingJavascriptRhinoOptLevel)))
            queryParams.put("org.apache.sling.scripting.javascript.rhino.optLevel", String.valueOf(orgApacheSlingScriptingJavascriptRhinoOptLevel))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.class )

    }

    def orgApacheSlingScriptingJspJspScriptEngineFactory ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String jasperCompilerTargetVM, String jasperCompilerSourceVM, Boolean jasperClassdebuginfo, Boolean jasperEnablePooling, String jasperIeClassId, Boolean jasperGenStringAsCharArray, Boolean jasperKeepgenerated, Boolean jasperMappedfile, Boolean jasperTrimSpaces, Boolean jasperDisplaySourceFragments, Boolean defaultIsSession, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(jasperCompilerTargetVM)))
            queryParams.put("jasper.compilerTargetVM", String.valueOf(jasperCompilerTargetVM))

        if (!"null".equals(String.valueOf(jasperCompilerSourceVM)))
            queryParams.put("jasper.compilerSourceVM", String.valueOf(jasperCompilerSourceVM))

        if (!"null".equals(String.valueOf(jasperClassdebuginfo)))
            queryParams.put("jasper.classdebuginfo", String.valueOf(jasperClassdebuginfo))

        if (!"null".equals(String.valueOf(jasperEnablePooling)))
            queryParams.put("jasper.enablePooling", String.valueOf(jasperEnablePooling))

        if (!"null".equals(String.valueOf(jasperIeClassId)))
            queryParams.put("jasper.ieClassId", String.valueOf(jasperIeClassId))

        if (!"null".equals(String.valueOf(jasperGenStringAsCharArray)))
            queryParams.put("jasper.genStringAsCharArray", String.valueOf(jasperGenStringAsCharArray))

        if (!"null".equals(String.valueOf(jasperKeepgenerated)))
            queryParams.put("jasper.keepgenerated", String.valueOf(jasperKeepgenerated))

        if (!"null".equals(String.valueOf(jasperMappedfile)))
            queryParams.put("jasper.mappedfile", String.valueOf(jasperMappedfile))

        if (!"null".equals(String.valueOf(jasperTrimSpaces)))
            queryParams.put("jasper.trimSpaces", String.valueOf(jasperTrimSpaces))

        if (!"null".equals(String.valueOf(jasperDisplaySourceFragments)))
            queryParams.put("jasper.displaySourceFragments", String.valueOf(jasperDisplaySourceFragments))

        if (!"null".equals(String.valueOf(defaultIsSession)))
            queryParams.put("default.is.session", String.valueOf(defaultIsSession))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.class )

    }

    def orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> orgApacheSlingScriptingSightlyJsBindings, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(orgApacheSlingScriptingSightlyJsBindings)))
            queryParams.put("org.apache.sling.scripting.sightly.js.bindings", String.valueOf(orgApacheSlingScriptingSightlyJsBindings))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.class )

    }

    def orgApacheSlingSecurityImplContentDispositionFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> slingContentDispositionPaths, List<String> slingContentDispositionExcludedPaths, Boolean slingContentDispositionAllPaths, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingContentDispositionPaths)))
            queryParams.put("sling.content.disposition.paths", String.valueOf(slingContentDispositionPaths))

        if (!"null".equals(String.valueOf(slingContentDispositionExcludedPaths)))
            queryParams.put("sling.content.disposition.excluded.paths", String.valueOf(slingContentDispositionExcludedPaths))

        if (!"null".equals(String.valueOf(slingContentDispositionAllPaths)))
            queryParams.put("sling.content.disposition.all.paths", String.valueOf(slingContentDispositionAllPaths))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingSecurityImplContentDispositionFilterInfo.class )

    }

    def orgApacheSlingSecurityImplReferrerFilter ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean allowEmpty, List<String> allowHosts, List<String> allowHostsRegexp, List<String> filterMethods, List<String> excludeAgentsRegexp, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(allowEmpty)))
            queryParams.put("allow.empty", String.valueOf(allowEmpty))

        if (!"null".equals(String.valueOf(allowHosts)))
            queryParams.put("allow.hosts", String.valueOf(allowHosts))

        if (!"null".equals(String.valueOf(allowHostsRegexp)))
            queryParams.put("allow.hosts.regexp", String.valueOf(allowHostsRegexp))

        if (!"null".equals(String.valueOf(filterMethods)))
            queryParams.put("filter.methods", String.valueOf(filterMethods))

        if (!"null".equals(String.valueOf(excludeAgentsRegexp)))
            queryParams.put("exclude.agents.regexp", String.valueOf(excludeAgentsRegexp))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingSecurityImplReferrerFilterInfo.class )

    }

    def orgApacheSlingServiceusermappingImplServiceUserMapperImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> userMapping, String userDefault, Boolean userEnableDefaultMapping, Boolean requireValidation, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(userMapping)))
            queryParams.put("user.mapping", String.valueOf(userMapping))

        if (!"null".equals(String.valueOf(userDefault)))
            queryParams.put("user.default", String.valueOf(userDefault))

        if (!"null".equals(String.valueOf(userEnableDefaultMapping)))
            queryParams.put("user.enable.default.mapping", String.valueOf(userEnableDefaultMapping))

        if (!"null".equals(String.valueOf(requireValidation)))
            queryParams.put("require.validation", String.valueOf(requireValidation))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.class )

    }

    def orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Integer serviceRanking, List<String> userMapping, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(serviceRanking)))
            queryParams.put("service.ranking", String.valueOf(serviceRanking))

        if (!"null".equals(String.valueOf(userMapping)))
            queryParams.put("user.mapping", String.valueOf(userMapping))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.class )

    }

    def orgApacheSlingServletsGetDefaultGetServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> aliases, Boolean index, List<String> indexFiles, Boolean enableHtml, Boolean enableJson, Boolean enableTxt, Boolean enableXml, Integer jsonMaximumresults, Boolean ecmaSuport, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(aliases)))
            queryParams.put("aliases", String.valueOf(aliases))

        if (!"null".equals(String.valueOf(index)))
            queryParams.put("index", String.valueOf(index))

        if (!"null".equals(String.valueOf(indexFiles)))
            queryParams.put("index.files", String.valueOf(indexFiles))

        if (!"null".equals(String.valueOf(enableHtml)))
            queryParams.put("enable.html", String.valueOf(enableHtml))

        if (!"null".equals(String.valueOf(enableJson)))
            queryParams.put("enable.json", String.valueOf(enableJson))

        if (!"null".equals(String.valueOf(enableTxt)))
            queryParams.put("enable.txt", String.valueOf(enableTxt))

        if (!"null".equals(String.valueOf(enableXml)))
            queryParams.put("enable.xml", String.valueOf(enableXml))

        if (!"null".equals(String.valueOf(jsonMaximumresults)))
            queryParams.put("json.maximumresults", String.valueOf(jsonMaximumresults))

        if (!"null".equals(String.valueOf(ecmaSuport)))
            queryParams.put("ecmaSuport", String.valueOf(ecmaSuport))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingServletsGetDefaultGetServletInfo.class )

    }

    def orgApacheSlingServletsGetImplVersionVersionInfoServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> slingServletSelectors, Boolean ecmaSuport, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingServletSelectors)))
            queryParams.put("sling.servlet.selectors", String.valueOf(slingServletSelectors))

        if (!"null".equals(String.valueOf(ecmaSuport)))
            queryParams.put("ecmaSuport", String.valueOf(ecmaSuport))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.class )

    }

    def orgApacheSlingServletsPostImplHelperChunkCleanUpTask ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String schedulerExpression, Boolean schedulerConcurrent, Integer chunkCleanupAge, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(schedulerExpression)))
            queryParams.put("scheduler.expression", String.valueOf(schedulerExpression))

        if (!"null".equals(String.valueOf(schedulerConcurrent)))
            queryParams.put("scheduler.concurrent", String.valueOf(schedulerConcurrent))

        if (!"null".equals(String.valueOf(chunkCleanupAge)))
            queryParams.put("chunk.cleanup.age", String.valueOf(chunkCleanupAge))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.class )

    }

    def orgApacheSlingServletsPostImplSlingPostServlet ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> servletPostDateFormats, List<String> servletPostNodeNameHints, Integer servletPostNodeNameMaxLength, Boolean servletPostCheckinNewVersionableNodes, Boolean servletPostAutoCheckout, Boolean servletPostAutoCheckin, String servletPostIgnorePattern, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(servletPostDateFormats)))
            queryParams.put("servlet.post.dateFormats", String.valueOf(servletPostDateFormats))

        if (!"null".equals(String.valueOf(servletPostNodeNameHints)))
            queryParams.put("servlet.post.nodeNameHints", String.valueOf(servletPostNodeNameHints))

        if (!"null".equals(String.valueOf(servletPostNodeNameMaxLength)))
            queryParams.put("servlet.post.nodeNameMaxLength", String.valueOf(servletPostNodeNameMaxLength))

        if (!"null".equals(String.valueOf(servletPostCheckinNewVersionableNodes)))
            queryParams.put("servlet.post.checkinNewVersionableNodes", String.valueOf(servletPostCheckinNewVersionableNodes))

        if (!"null".equals(String.valueOf(servletPostAutoCheckout)))
            queryParams.put("servlet.post.autoCheckout", String.valueOf(servletPostAutoCheckout))

        if (!"null".equals(String.valueOf(servletPostAutoCheckin)))
            queryParams.put("servlet.post.autoCheckin", String.valueOf(servletPostAutoCheckin))

        if (!"null".equals(String.valueOf(servletPostIgnorePattern)))
            queryParams.put("servlet.post.ignorePattern", String.valueOf(servletPostIgnorePattern))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingServletsPostImplSlingPostServletInfo.class )

    }

    def orgApacheSlingServletsResolverSlingServletResolver ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String servletresolverServletRoot, Integer servletresolverCacheSize, List<String> servletresolverPaths, List<String> servletresolverDefaultExtensions, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(servletresolverServletRoot)))
            queryParams.put("servletresolver.servletRoot", String.valueOf(servletresolverServletRoot))

        if (!"null".equals(String.valueOf(servletresolverCacheSize)))
            queryParams.put("servletresolver.cacheSize", String.valueOf(servletresolverCacheSize))

        if (!"null".equals(String.valueOf(servletresolverPaths)))
            queryParams.put("servletresolver.paths", String.valueOf(servletresolverPaths))

        if (!"null".equals(String.valueOf(servletresolverDefaultExtensions)))
            queryParams.put("servletresolver.defaultExtensions", String.valueOf(servletresolverDefaultExtensions))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingServletsResolverSlingServletResolverInfo.class )

    }

    def orgApacheSlingSettingsImplSlingSettingsServiceImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String slingName, String slingDescription, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(slingName)))
            queryParams.put("sling.name", String.valueOf(slingName))

        if (!"null".equals(String.valueOf(slingDescription)))
            queryParams.put("sling.description", String.valueOf(slingDescription))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.class )

    }

    def orgApacheSlingStartupfilterImplStartupFilterImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, Boolean activeByDefault, String defaultMessage, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(activeByDefault)))
            queryParams.put("active.by.default", String.valueOf(activeByDefault))

        if (!"null".equals(String.valueOf(defaultMessage)))
            queryParams.put("default.message", String.valueOf(defaultMessage))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingStartupfilterImplStartupFilterImplInfo.class )

    }

    def orgApacheSlingTenantInternalTenantProviderImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String tenantRoot, List<String> tenantPathMatcher, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(tenantRoot)))
            queryParams.put("tenant.root", String.valueOf(tenantRoot))

        if (!"null".equals(String.valueOf(tenantPathMatcher)))
            queryParams.put("tenant.path.matcher", String.valueOf(tenantPathMatcher))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingTenantInternalTenantProviderImplInfo.class )

    }

    def orgApacheSlingTracerInternalLogTracer ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, List<String> tracerSets, Boolean enabled, Boolean servletEnabled, Integer recordingCacheSizeInMB, Integer recordingCacheDurationInSecs, Boolean recordingCompressionEnabled, Boolean gzipResponse, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(tracerSets)))
            queryParams.put("tracerSets", String.valueOf(tracerSets))

        if (!"null".equals(String.valueOf(enabled)))
            queryParams.put("enabled", String.valueOf(enabled))

        if (!"null".equals(String.valueOf(servletEnabled)))
            queryParams.put("servletEnabled", String.valueOf(servletEnabled))

        if (!"null".equals(String.valueOf(recordingCacheSizeInMB)))
            queryParams.put("recordingCacheSizeInMB", String.valueOf(recordingCacheSizeInMB))

        if (!"null".equals(String.valueOf(recordingCacheDurationInSecs)))
            queryParams.put("recordingCacheDurationInSecs", String.valueOf(recordingCacheDurationInSecs))

        if (!"null".equals(String.valueOf(recordingCompressionEnabled)))
            queryParams.put("recordingCompressionEnabled", String.valueOf(recordingCompressionEnabled))

        if (!"null".equals(String.valueOf(gzipResponse)))
            queryParams.put("gzipResponse", String.valueOf(gzipResponse))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingTracerInternalLogTracerInfo.class )

    }

    def orgApacheSlingXssImplXSSFilterImpl ( Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> propertylist, String policyPath, Closure onSuccess, Closure onFailure)  {
        // create path and map path parameters (TODO)
        String resourcePath = "/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl"

        // query params
        def queryParams = [:]
        def headerParams = [:]

        if (!"null".equals(String.valueOf(post)))
            queryParams.put("post", String.valueOf(post))

        if (!"null".equals(String.valueOf(apply)))
            queryParams.put("apply", String.valueOf(apply))

        if (!"null".equals(String.valueOf(delete)))
            queryParams.put("delete", String.valueOf(delete))

        if (!"null".equals(String.valueOf(action)))
            queryParams.put("action", String.valueOf(action))

        if (!"null".equals(String.valueOf($location)))
            queryParams.put("$location", String.valueOf($location))

        if (!"null".equals(String.valueOf(propertylist)))
            queryParams.put("propertylist", String.valueOf(propertylist))

        if (!"null".equals(String.valueOf(policyPath)))
            queryParams.put("policyPath", String.valueOf(policyPath))

        // TODO: form params, body param not yet support

        invokeApi(onSuccess, onFailure, basePath, versionPath, resourcePath, queryParams, headerParams,
                    "POST", "",
                    OrgApacheSlingXssImplXSSFilterImplInfo.class )

    }

}
