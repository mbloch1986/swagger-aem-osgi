/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties()
{
    m_Event_filterIsSet = false;
    m_Launches_eventhandler_threadpool_maxsizeIsSet = false;
    m_Launches_eventhandler_threadpool_priorityIsSet = false;
    m_Launches_eventhandler_updatelastmodificationIsSet = false;
}

ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::~ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties()
{
}

void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Event_filterIsSet)
    {
        val[utility::conversions::to_string_t("event.filter")] = ModelBase::toJson(m_Event_filter);
    }
    if(m_Launches_eventhandler_threadpool_maxsizeIsSet)
    {
        val[utility::conversions::to_string_t("launches.eventhandler.threadpool.maxsize")] = ModelBase::toJson(m_Launches_eventhandler_threadpool_maxsize);
    }
    if(m_Launches_eventhandler_threadpool_priorityIsSet)
    {
        val[utility::conversions::to_string_t("launches.eventhandler.threadpool.priority")] = ModelBase::toJson(m_Launches_eventhandler_threadpool_priority);
    }
    if(m_Launches_eventhandler_updatelastmodificationIsSet)
    {
        val[utility::conversions::to_string_t("launches.eventhandler.updatelastmodification")] = ModelBase::toJson(m_Launches_eventhandler_updatelastmodification);
    }

    return val;
}

void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("event.filter")))
    {
        if(!val[utility::conversions::to_string_t("event.filter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("event.filter")]);
            setEventFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("launches.eventhandler.threadpool.maxsize")))
    {
        if(!val[utility::conversions::to_string_t("launches.eventhandler.threadpool.maxsize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("launches.eventhandler.threadpool.maxsize")]);
            setLaunchesEventhandlerThreadpoolMaxsize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("launches.eventhandler.threadpool.priority")))
    {
        if(!val[utility::conversions::to_string_t("launches.eventhandler.threadpool.priority")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("launches.eventhandler.threadpool.priority")]);
            setLaunchesEventhandlerThreadpoolPriority( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("launches.eventhandler.updatelastmodification")))
    {
        if(!val[utility::conversions::to_string_t("launches.eventhandler.updatelastmodification")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("launches.eventhandler.updatelastmodification")]);
            setLaunchesEventhandlerUpdatelastmodification( newItem );
        }
    }
}

void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Event_filterIsSet)
    {
        if (m_Event_filter.get())
        {
            m_Event_filter->toMultipart(multipart, utility::conversions::to_string_t("event.filter."));
        }
    }
    if(m_Launches_eventhandler_threadpool_maxsizeIsSet)
    {
        if (m_Launches_eventhandler_threadpool_maxsize.get())
        {
            m_Launches_eventhandler_threadpool_maxsize->toMultipart(multipart, utility::conversions::to_string_t("launches.eventhandler.threadpool.maxsize."));
        }
    }
    if(m_Launches_eventhandler_threadpool_priorityIsSet)
    {
        if (m_Launches_eventhandler_threadpool_priority.get())
        {
            m_Launches_eventhandler_threadpool_priority->toMultipart(multipart, utility::conversions::to_string_t("launches.eventhandler.threadpool.priority."));
        }
    }
    if(m_Launches_eventhandler_updatelastmodificationIsSet)
    {
        if (m_Launches_eventhandler_updatelastmodification.get())
        {
            m_Launches_eventhandler_updatelastmodification->toMultipart(multipart, utility::conversions::to_string_t("launches.eventhandler.updatelastmodification."));
        }
    }
}

void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("event.filter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("event.filter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("event.filter."));
            setEventFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("launches.eventhandler.threadpool.maxsize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("launches.eventhandler.threadpool.maxsize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("launches.eventhandler.threadpool.maxsize."));
            setLaunchesEventhandlerThreadpoolMaxsize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("launches.eventhandler.threadpool.priority")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("launches.eventhandler.threadpool.priority")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("launches.eventhandler.threadpool.priority."));
            setLaunchesEventhandlerThreadpoolPriority( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("launches.eventhandler.updatelastmodification")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("launches.eventhandler.updatelastmodification")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("launches.eventhandler.updatelastmodification."));
            setLaunchesEventhandlerUpdatelastmodification( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getEventFilter() const
{
    return m_Event_filter;
}


void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setEventFilter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}

void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerThreadpoolMaxsize() const
{
    return m_Launches_eventhandler_threadpool_maxsize;
}


void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerThreadpoolMaxsize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Launches_eventhandler_threadpool_maxsize = value;
    m_Launches_eventhandler_threadpool_maxsizeIsSet = true;
}
bool ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::launchesEventhandlerThreadpoolMaxsizeIsSet() const
{
    return m_Launches_eventhandler_threadpool_maxsizeIsSet;
}

void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::unsetLaunches_eventhandler_threadpool_maxsize()
{
    m_Launches_eventhandler_threadpool_maxsizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerThreadpoolPriority() const
{
    return m_Launches_eventhandler_threadpool_priority;
}


void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerThreadpoolPriority(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Launches_eventhandler_threadpool_priority = value;
    m_Launches_eventhandler_threadpool_priorityIsSet = true;
}
bool ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::launchesEventhandlerThreadpoolPriorityIsSet() const
{
    return m_Launches_eventhandler_threadpool_priorityIsSet;
}

void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::unsetLaunches_eventhandler_threadpool_priority()
{
    m_Launches_eventhandler_threadpool_priorityIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerUpdatelastmodification() const
{
    return m_Launches_eventhandler_updatelastmodification;
}


void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerUpdatelastmodification(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Launches_eventhandler_updatelastmodification = value;
    m_Launches_eventhandler_updatelastmodificationIsSet = true;
}
bool ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::launchesEventhandlerUpdatelastmodificationIsSet() const
{
    return m_Launches_eventhandler_updatelastmodificationIsSet;
}

void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::unsetLaunches_eventhandler_updatelastmodification()
{
    m_Launches_eventhandler_updatelastmodificationIsSet = false;
}

}
}
}
}

