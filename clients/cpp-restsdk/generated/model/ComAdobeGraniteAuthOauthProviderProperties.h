/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteAuthOauthProviderProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthOauthProviderProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthOauthProviderProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteAuthOauthProviderProperties
    : public ModelBase
{
public:
    ComAdobeGraniteAuthOauthProviderProperties();
    virtual ~ComAdobeGraniteAuthOauthProviderProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteAuthOauthProviderProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthConfigId() const;
    bool oauthConfigIdIsSet() const;
    void unsetOauth_config_id();
    void setOauthConfigId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthClientId() const;
    bool oauthClientIdIsSet() const;
    void unsetOauth_client_id();
    void setOauthClientId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthClientSecret() const;
    bool oauthClientSecretIsSet() const;
    void unsetOauth_client_secret();
    void setOauthClientSecret(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getOauthScope() const;
    bool oauthScopeIsSet() const;
    void unsetOauth_scope();
    void setOauthScope(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthConfigProviderId() const;
    bool oauthConfigProviderIdIsSet() const;
    void unsetOauth_config_provider_id();
    void setOauthConfigProviderId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthCreateUsers() const;
    bool oauthCreateUsersIsSet() const;
    void unsetOauth_create_users();
    void setOauthCreateUsers(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthUseridProperty() const;
    bool oauthUseridPropertyIsSet() const;
    void unsetOauth_userid_property();
    void setOauthUseridProperty(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getForceStrictUsernameMatching() const;
    bool forceStrictUsernameMatchingIsSet() const;
    void unsetForce_strict_username_matching();
    void setForceStrictUsernameMatching(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthEncodeUserids() const;
    bool oauthEncodeUseridsIsSet() const;
    void unsetOauth_encode_userids();
    void setOauthEncodeUserids(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthHashUserids() const;
    bool oauthHashUseridsIsSet() const;
    void unsetOauth_hash_userids();
    void setOauthHashUserids(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthCallBackUrl() const;
    bool oauthCallBackUrlIsSet() const;
    void unsetOauth_callBackUrl();
    void setOauthCallBackUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthAccessTokenPersist() const;
    bool oauthAccessTokenPersistIsSet() const;
    void unsetOauth_access_token_persist();
    void setOauthAccessTokenPersist(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthAccessTokenPersistCookie() const;
    bool oauthAccessTokenPersistCookieIsSet() const;
    void unsetOauth_access_token_persist_cookie();
    void setOauthAccessTokenPersistCookie(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthCsrfStateProtection() const;
    bool oauthCsrfStateProtectionIsSet() const;
    void unsetOauth_csrf_state_protection();
    void setOauthCsrfStateProtection(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthRedirectRequestParams() const;
    bool oauthRedirectRequestParamsIsSet() const;
    void unsetOauth_redirect_request_params();
    void setOauthRedirectRequestParams(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthConfigSiblingsAllow() const;
    bool oauthConfigSiblingsAllowIsSet() const;
    void unsetOauth_config_siblings_allow();
    void setOauthConfigSiblingsAllow(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_config_id;
    bool m_Oauth_config_idIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_client_id;
    bool m_Oauth_client_idIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_client_secret;
    bool m_Oauth_client_secretIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Oauth_scope;
    bool m_Oauth_scopeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_config_provider_id;
    bool m_Oauth_config_provider_idIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_create_users;
    bool m_Oauth_create_usersIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_userid_property;
    bool m_Oauth_userid_propertyIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Force_strict_username_matching;
    bool m_Force_strict_username_matchingIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_encode_userids;
    bool m_Oauth_encode_useridsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_hash_userids;
    bool m_Oauth_hash_useridsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_callBackUrl;
    bool m_Oauth_callBackUrlIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_access_token_persist;
    bool m_Oauth_access_token_persistIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_access_token_persist_cookie;
    bool m_Oauth_access_token_persist_cookieIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_csrf_state_protection;
    bool m_Oauth_csrf_state_protectionIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_redirect_request_params;
    bool m_Oauth_redirect_request_paramsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_config_siblings_allow;
    bool m_Oauth_config_siblings_allowIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthOauthProviderProperties_H_ */
