/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteAuthOauthProviderProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteAuthOauthProviderProperties :  IEquatable<ComAdobeGraniteAuthOauthProviderProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteAuthOauthProviderProperties" /> class.
        /// </summary>
        /// <param name="oauthConfigId">oauthConfigId.</param>
        /// <param name="oauthClientId">oauthClientId.</param>
        /// <param name="oauthClientSecret">oauthClientSecret.</param>
        /// <param name="oauthScope">oauthScope.</param>
        /// <param name="oauthConfigProviderId">oauthConfigProviderId.</param>
        /// <param name="oauthCreateUsers">oauthCreateUsers.</param>
        /// <param name="oauthUseridProperty">oauthUseridProperty.</param>
        /// <param name="forceStrictUsernameMatching">forceStrictUsernameMatching.</param>
        /// <param name="oauthEncodeUserids">oauthEncodeUserids.</param>
        /// <param name="oauthHashUserids">oauthHashUserids.</param>
        /// <param name="oauthCallBackUrl">oauthCallBackUrl.</param>
        /// <param name="oauthAccessTokenPersist">oauthAccessTokenPersist.</param>
        /// <param name="oauthAccessTokenPersistCookie">oauthAccessTokenPersistCookie.</param>
        /// <param name="oauthCsrfStateProtection">oauthCsrfStateProtection.</param>
        /// <param name="oauthRedirectRequestParams">oauthRedirectRequestParams.</param>
        /// <param name="oauthConfigSiblingsAllow">oauthConfigSiblingsAllow.</param>
        public ComAdobeGraniteAuthOauthProviderProperties(ConfigNodePropertyString oauthConfigId = default(ConfigNodePropertyString), ConfigNodePropertyString oauthClientId = default(ConfigNodePropertyString), ConfigNodePropertyString oauthClientSecret = default(ConfigNodePropertyString), ConfigNodePropertyArray oauthScope = default(ConfigNodePropertyArray), ConfigNodePropertyString oauthConfigProviderId = default(ConfigNodePropertyString), ConfigNodePropertyBoolean oauthCreateUsers = default(ConfigNodePropertyBoolean), ConfigNodePropertyString oauthUseridProperty = default(ConfigNodePropertyString), ConfigNodePropertyBoolean forceStrictUsernameMatching = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean oauthEncodeUserids = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean oauthHashUserids = default(ConfigNodePropertyBoolean), ConfigNodePropertyString oauthCallBackUrl = default(ConfigNodePropertyString), ConfigNodePropertyBoolean oauthAccessTokenPersist = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean oauthAccessTokenPersistCookie = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean oauthCsrfStateProtection = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean oauthRedirectRequestParams = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean oauthConfigSiblingsAllow = default(ConfigNodePropertyBoolean))
        {
            this.OauthConfigId = oauthConfigId;
            this.OauthClientId = oauthClientId;
            this.OauthClientSecret = oauthClientSecret;
            this.OauthScope = oauthScope;
            this.OauthConfigProviderId = oauthConfigProviderId;
            this.OauthCreateUsers = oauthCreateUsers;
            this.OauthUseridProperty = oauthUseridProperty;
            this.ForceStrictUsernameMatching = forceStrictUsernameMatching;
            this.OauthEncodeUserids = oauthEncodeUserids;
            this.OauthHashUserids = oauthHashUserids;
            this.OauthCallBackUrl = oauthCallBackUrl;
            this.OauthAccessTokenPersist = oauthAccessTokenPersist;
            this.OauthAccessTokenPersistCookie = oauthAccessTokenPersistCookie;
            this.OauthCsrfStateProtection = oauthCsrfStateProtection;
            this.OauthRedirectRequestParams = oauthRedirectRequestParams;
            this.OauthConfigSiblingsAllow = oauthConfigSiblingsAllow;
        }
        
        /// <summary>
        /// Gets or Sets OauthConfigId
        /// </summary>
        [DataMember(Name="oauth.config.id", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthConfigId { get; set; }

        /// <summary>
        /// Gets or Sets OauthClientId
        /// </summary>
        [DataMember(Name="oauth.client.id", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthClientId { get; set; }

        /// <summary>
        /// Gets or Sets OauthClientSecret
        /// </summary>
        [DataMember(Name="oauth.client.secret", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets OauthScope
        /// </summary>
        [DataMember(Name="oauth.scope", EmitDefaultValue=false)]
        public ConfigNodePropertyArray OauthScope { get; set; }

        /// <summary>
        /// Gets or Sets OauthConfigProviderId
        /// </summary>
        [DataMember(Name="oauth.config.provider.id", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthConfigProviderId { get; set; }

        /// <summary>
        /// Gets or Sets OauthCreateUsers
        /// </summary>
        [DataMember(Name="oauth.create.users", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OauthCreateUsers { get; set; }

        /// <summary>
        /// Gets or Sets OauthUseridProperty
        /// </summary>
        [DataMember(Name="oauth.userid.property", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthUseridProperty { get; set; }

        /// <summary>
        /// Gets or Sets ForceStrictUsernameMatching
        /// </summary>
        [DataMember(Name="force.strict.username.matching", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ForceStrictUsernameMatching { get; set; }

        /// <summary>
        /// Gets or Sets OauthEncodeUserids
        /// </summary>
        [DataMember(Name="oauth.encode.userids", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OauthEncodeUserids { get; set; }

        /// <summary>
        /// Gets or Sets OauthHashUserids
        /// </summary>
        [DataMember(Name="oauth.hash.userids", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OauthHashUserids { get; set; }

        /// <summary>
        /// Gets or Sets OauthCallBackUrl
        /// </summary>
        [DataMember(Name="oauth.callBackUrl", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthCallBackUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthAccessTokenPersist
        /// </summary>
        [DataMember(Name="oauth.access.token.persist", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OauthAccessTokenPersist { get; set; }

        /// <summary>
        /// Gets or Sets OauthAccessTokenPersistCookie
        /// </summary>
        [DataMember(Name="oauth.access.token.persist.cookie", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OauthAccessTokenPersistCookie { get; set; }

        /// <summary>
        /// Gets or Sets OauthCsrfStateProtection
        /// </summary>
        [DataMember(Name="oauth.csrf.state.protection", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OauthCsrfStateProtection { get; set; }

        /// <summary>
        /// Gets or Sets OauthRedirectRequestParams
        /// </summary>
        [DataMember(Name="oauth.redirect.request.params", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OauthRedirectRequestParams { get; set; }

        /// <summary>
        /// Gets or Sets OauthConfigSiblingsAllow
        /// </summary>
        [DataMember(Name="oauth.config.siblings.allow", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OauthConfigSiblingsAllow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteAuthOauthProviderProperties {\n");
            sb.Append("  OauthConfigId: ").Append(OauthConfigId).Append("\n");
            sb.Append("  OauthClientId: ").Append(OauthClientId).Append("\n");
            sb.Append("  OauthClientSecret: ").Append(OauthClientSecret).Append("\n");
            sb.Append("  OauthScope: ").Append(OauthScope).Append("\n");
            sb.Append("  OauthConfigProviderId: ").Append(OauthConfigProviderId).Append("\n");
            sb.Append("  OauthCreateUsers: ").Append(OauthCreateUsers).Append("\n");
            sb.Append("  OauthUseridProperty: ").Append(OauthUseridProperty).Append("\n");
            sb.Append("  ForceStrictUsernameMatching: ").Append(ForceStrictUsernameMatching).Append("\n");
            sb.Append("  OauthEncodeUserids: ").Append(OauthEncodeUserids).Append("\n");
            sb.Append("  OauthHashUserids: ").Append(OauthHashUserids).Append("\n");
            sb.Append("  OauthCallBackUrl: ").Append(OauthCallBackUrl).Append("\n");
            sb.Append("  OauthAccessTokenPersist: ").Append(OauthAccessTokenPersist).Append("\n");
            sb.Append("  OauthAccessTokenPersistCookie: ").Append(OauthAccessTokenPersistCookie).Append("\n");
            sb.Append("  OauthCsrfStateProtection: ").Append(OauthCsrfStateProtection).Append("\n");
            sb.Append("  OauthRedirectRequestParams: ").Append(OauthRedirectRequestParams).Append("\n");
            sb.Append("  OauthConfigSiblingsAllow: ").Append(OauthConfigSiblingsAllow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteAuthOauthProviderProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteAuthOauthProviderProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteAuthOauthProviderProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteAuthOauthProviderProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OauthConfigId == input.OauthConfigId ||
                    (this.OauthConfigId != null &&
                    this.OauthConfigId.Equals(input.OauthConfigId))
                ) && 
                (
                    this.OauthClientId == input.OauthClientId ||
                    (this.OauthClientId != null &&
                    this.OauthClientId.Equals(input.OauthClientId))
                ) && 
                (
                    this.OauthClientSecret == input.OauthClientSecret ||
                    (this.OauthClientSecret != null &&
                    this.OauthClientSecret.Equals(input.OauthClientSecret))
                ) && 
                (
                    this.OauthScope == input.OauthScope ||
                    (this.OauthScope != null &&
                    this.OauthScope.Equals(input.OauthScope))
                ) && 
                (
                    this.OauthConfigProviderId == input.OauthConfigProviderId ||
                    (this.OauthConfigProviderId != null &&
                    this.OauthConfigProviderId.Equals(input.OauthConfigProviderId))
                ) && 
                (
                    this.OauthCreateUsers == input.OauthCreateUsers ||
                    (this.OauthCreateUsers != null &&
                    this.OauthCreateUsers.Equals(input.OauthCreateUsers))
                ) && 
                (
                    this.OauthUseridProperty == input.OauthUseridProperty ||
                    (this.OauthUseridProperty != null &&
                    this.OauthUseridProperty.Equals(input.OauthUseridProperty))
                ) && 
                (
                    this.ForceStrictUsernameMatching == input.ForceStrictUsernameMatching ||
                    (this.ForceStrictUsernameMatching != null &&
                    this.ForceStrictUsernameMatching.Equals(input.ForceStrictUsernameMatching))
                ) && 
                (
                    this.OauthEncodeUserids == input.OauthEncodeUserids ||
                    (this.OauthEncodeUserids != null &&
                    this.OauthEncodeUserids.Equals(input.OauthEncodeUserids))
                ) && 
                (
                    this.OauthHashUserids == input.OauthHashUserids ||
                    (this.OauthHashUserids != null &&
                    this.OauthHashUserids.Equals(input.OauthHashUserids))
                ) && 
                (
                    this.OauthCallBackUrl == input.OauthCallBackUrl ||
                    (this.OauthCallBackUrl != null &&
                    this.OauthCallBackUrl.Equals(input.OauthCallBackUrl))
                ) && 
                (
                    this.OauthAccessTokenPersist == input.OauthAccessTokenPersist ||
                    (this.OauthAccessTokenPersist != null &&
                    this.OauthAccessTokenPersist.Equals(input.OauthAccessTokenPersist))
                ) && 
                (
                    this.OauthAccessTokenPersistCookie == input.OauthAccessTokenPersistCookie ||
                    (this.OauthAccessTokenPersistCookie != null &&
                    this.OauthAccessTokenPersistCookie.Equals(input.OauthAccessTokenPersistCookie))
                ) && 
                (
                    this.OauthCsrfStateProtection == input.OauthCsrfStateProtection ||
                    (this.OauthCsrfStateProtection != null &&
                    this.OauthCsrfStateProtection.Equals(input.OauthCsrfStateProtection))
                ) && 
                (
                    this.OauthRedirectRequestParams == input.OauthRedirectRequestParams ||
                    (this.OauthRedirectRequestParams != null &&
                    this.OauthRedirectRequestParams.Equals(input.OauthRedirectRequestParams))
                ) && 
                (
                    this.OauthConfigSiblingsAllow == input.OauthConfigSiblingsAllow ||
                    (this.OauthConfigSiblingsAllow != null &&
                    this.OauthConfigSiblingsAllow.Equals(input.OauthConfigSiblingsAllow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OauthConfigId != null)
                    hashCode = hashCode * 59 + this.OauthConfigId.GetHashCode();
                if (this.OauthClientId != null)
                    hashCode = hashCode * 59 + this.OauthClientId.GetHashCode();
                if (this.OauthClientSecret != null)
                    hashCode = hashCode * 59 + this.OauthClientSecret.GetHashCode();
                if (this.OauthScope != null)
                    hashCode = hashCode * 59 + this.OauthScope.GetHashCode();
                if (this.OauthConfigProviderId != null)
                    hashCode = hashCode * 59 + this.OauthConfigProviderId.GetHashCode();
                if (this.OauthCreateUsers != null)
                    hashCode = hashCode * 59 + this.OauthCreateUsers.GetHashCode();
                if (this.OauthUseridProperty != null)
                    hashCode = hashCode * 59 + this.OauthUseridProperty.GetHashCode();
                if (this.ForceStrictUsernameMatching != null)
                    hashCode = hashCode * 59 + this.ForceStrictUsernameMatching.GetHashCode();
                if (this.OauthEncodeUserids != null)
                    hashCode = hashCode * 59 + this.OauthEncodeUserids.GetHashCode();
                if (this.OauthHashUserids != null)
                    hashCode = hashCode * 59 + this.OauthHashUserids.GetHashCode();
                if (this.OauthCallBackUrl != null)
                    hashCode = hashCode * 59 + this.OauthCallBackUrl.GetHashCode();
                if (this.OauthAccessTokenPersist != null)
                    hashCode = hashCode * 59 + this.OauthAccessTokenPersist.GetHashCode();
                if (this.OauthAccessTokenPersistCookie != null)
                    hashCode = hashCode * 59 + this.OauthAccessTokenPersistCookie.GetHashCode();
                if (this.OauthCsrfStateProtection != null)
                    hashCode = hashCode * 59 + this.OauthCsrfStateProtection.GetHashCode();
                if (this.OauthRedirectRequestParams != null)
                    hashCode = hashCode * 59 + this.OauthRedirectRequestParams.GetHashCode();
                if (this.OauthConfigSiblingsAllow != null)
                    hashCode = hashCode * 59 + this.OauthConfigSiblingsAllow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
