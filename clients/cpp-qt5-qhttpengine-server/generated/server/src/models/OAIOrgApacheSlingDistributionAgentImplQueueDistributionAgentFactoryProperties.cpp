/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties() {
    this->init();
}

OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::~OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties() {
    
}

void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::init() {
    m_name_isSet = false;
    m_title_isSet = false;
    m_details_isSet = false;
    m_enabled_isSet = false;
    m_service_name_isSet = false;
    m_log_level_isSet = false;
    m_allowed_roots_isSet = false;
    m_request_authorization_strategy_target_isSet = false;
    m_queue_provider_factory_target_isSet = false;
    m_package_builder_target_isSet = false;
    m_triggers_target_isSet = false;
    m_priority_queues_isSet = false;
}

void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    
    ::OpenAPI::fromJsonValue(details, json[QString("details")]);
    
    ::OpenAPI::fromJsonValue(enabled, json[QString("enabled")]);
    
    ::OpenAPI::fromJsonValue(service_name, json[QString("serviceName")]);
    
    ::OpenAPI::fromJsonValue(log_level, json[QString("log.level")]);
    
    ::OpenAPI::fromJsonValue(allowed_roots, json[QString("allowed.roots")]);
    
    ::OpenAPI::fromJsonValue(request_authorization_strategy_target, json[QString("requestAuthorizationStrategy.target")]);
    
    ::OpenAPI::fromJsonValue(queue_provider_factory_target, json[QString("queueProviderFactory.target")]);
    
    ::OpenAPI::fromJsonValue(package_builder_target, json[QString("packageBuilder.target")]);
    
    ::OpenAPI::fromJsonValue(triggers_target, json[QString("triggers.target")]);
    
    ::OpenAPI::fromJsonValue(priority_queues, json[QString("priorityQueues")]);
    
}

QString
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::asJsonObject() const {
    QJsonObject obj;
	if(name.isSet()){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(title.isSet()){
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
	if(details.isSet()){
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(details));
    }
	if(enabled.isSet()){
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(enabled));
    }
	if(service_name.isSet()){
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(service_name));
    }
	if(log_level.isSet()){
        obj.insert(QString("log.level"), ::OpenAPI::toJsonValue(log_level));
    }
	if(allowed_roots.isSet()){
        obj.insert(QString("allowed.roots"), ::OpenAPI::toJsonValue(allowed_roots));
    }
	if(request_authorization_strategy_target.isSet()){
        obj.insert(QString("requestAuthorizationStrategy.target"), ::OpenAPI::toJsonValue(request_authorization_strategy_target));
    }
	if(queue_provider_factory_target.isSet()){
        obj.insert(QString("queueProviderFactory.target"), ::OpenAPI::toJsonValue(queue_provider_factory_target));
    }
	if(package_builder_target.isSet()){
        obj.insert(QString("packageBuilder.target"), ::OpenAPI::toJsonValue(package_builder_target));
    }
	if(triggers_target.isSet()){
        obj.insert(QString("triggers.target"), ::OpenAPI::toJsonValue(triggers_target));
    }
	if(priority_queues.isSet()){
        obj.insert(QString("priorityQueues"), ::OpenAPI::toJsonValue(priority_queues));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getName() const {
    return name;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setName(const OAIConfigNodePropertyString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getTitle() const {
    return title;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setTitle(const OAIConfigNodePropertyString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getDetails() const {
    return details;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setDetails(const OAIConfigNodePropertyString &details) {
    this->details = details;
    this->m_details_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getEnabled() const {
    return enabled;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setEnabled(const OAIConfigNodePropertyBoolean &enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getServiceName() const {
    return service_name;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setServiceName(const OAIConfigNodePropertyString &service_name) {
    this->service_name = service_name;
    this->m_service_name_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getLogLevel() const {
    return log_level;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setLogLevel(const OAIConfigNodePropertyDropDown &log_level) {
    this->log_level = log_level;
    this->m_log_level_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getAllowedRoots() const {
    return allowed_roots;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setAllowedRoots(const OAIConfigNodePropertyArray &allowed_roots) {
    this->allowed_roots = allowed_roots;
    this->m_allowed_roots_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getRequestAuthorizationStrategyTarget() const {
    return request_authorization_strategy_target;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setRequestAuthorizationStrategyTarget(const OAIConfigNodePropertyString &request_authorization_strategy_target) {
    this->request_authorization_strategy_target = request_authorization_strategy_target;
    this->m_request_authorization_strategy_target_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getQueueProviderFactoryTarget() const {
    return queue_provider_factory_target;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setQueueProviderFactoryTarget(const OAIConfigNodePropertyString &queue_provider_factory_target) {
    this->queue_provider_factory_target = queue_provider_factory_target;
    this->m_queue_provider_factory_target_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getPackageBuilderTarget() const {
    return package_builder_target;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setPackageBuilderTarget(const OAIConfigNodePropertyString &package_builder_target) {
    this->package_builder_target = package_builder_target;
    this->m_package_builder_target_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getTriggersTarget() const {
    return triggers_target;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setTriggersTarget(const OAIConfigNodePropertyString &triggers_target) {
    this->triggers_target = triggers_target;
    this->m_triggers_target_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getPriorityQueues() const {
    return priority_queues;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setPriorityQueues(const OAIConfigNodePropertyArray &priority_queues) {
    this->priority_queues = priority_queues;
    this->m_priority_queues_isSet = true;
}


bool
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(name.isSet()){ isObjectUpdated = true; break;}
    
        if(title.isSet()){ isObjectUpdated = true; break;}
    
        if(details.isSet()){ isObjectUpdated = true; break;}
    
        if(enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(service_name.isSet()){ isObjectUpdated = true; break;}
    
        if(log_level.isSet()){ isObjectUpdated = true; break;}
    
        if(allowed_roots.isSet()){ isObjectUpdated = true; break;}
    
        if(request_authorization_strategy_target.isSet()){ isObjectUpdated = true; break;}
    
        if(queue_provider_factory_target.isSet()){ isObjectUpdated = true; break;}
    
        if(package_builder_target.isSet()){ isObjectUpdated = true; break;}
    
        if(triggers_target.isSet()){ isObjectUpdated = true; break;}
    
        if(priority_queues.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

