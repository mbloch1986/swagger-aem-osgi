# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_string import ConfigNodePropertyString  # noqa: F401,E501
from openapi_server import util


class ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_path: ConfigNodePropertyString=None, stream_name: ConfigNodePropertyString=None):  # noqa: E501
        """ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties - a model defined in OpenAPI

        :param stream_path: The stream_path of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.  # noqa: E501
        :type stream_path: ConfigNodePropertyString
        :param stream_name: The stream_name of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.  # noqa: E501
        :type stream_name: ConfigNodePropertyString
        """
        self.openapi_types = {
            'stream_path': ConfigNodePropertyString,
            'stream_name': ConfigNodePropertyString
        }

        self.attribute_map = {
            'stream_path': 'streamPath',
            'stream_name': 'streamName'
        }

        self._stream_path = stream_path
        self._stream_name = stream_name

    @classmethod
    def from_dict(cls, dikt) -> 'ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.  # noqa: E501
        :rtype: ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_path(self) -> ConfigNodePropertyString:
        """Gets the stream_path of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.


        :return: The stream_path of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._stream_path

    @stream_path.setter
    def stream_path(self, stream_path: ConfigNodePropertyString):
        """Sets the stream_path of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.


        :param stream_path: The stream_path of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.
        :type stream_path: ConfigNodePropertyString
        """

        self._stream_path = stream_path

    @property
    def stream_name(self) -> ConfigNodePropertyString:
        """Gets the stream_name of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.


        :return: The stream_name of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name: ConfigNodePropertyString):
        """Sets the stream_name of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.


        :param stream_name: The stream_name of this ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.
        :type stream_name: ConfigNodePropertyString
        """

        self._stream_name = stream_name
