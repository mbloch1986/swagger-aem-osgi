/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteCsrfImplCSRFServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteCsrfImplCSRFServletProperties::ComAdobeGraniteCsrfImplCSRFServletProperties()
{
    m_Csrf_token_expires_inIsSet = false;
    m_Sling_auth_requirementsIsSet = false;
}

ComAdobeGraniteCsrfImplCSRFServletProperties::~ComAdobeGraniteCsrfImplCSRFServletProperties()
{
}

void ComAdobeGraniteCsrfImplCSRFServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteCsrfImplCSRFServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Csrf_token_expires_inIsSet)
    {
        val[utility::conversions::to_string_t("csrf.token.expires.in")] = ModelBase::toJson(m_Csrf_token_expires_in);
    }
    if(m_Sling_auth_requirementsIsSet)
    {
        val[utility::conversions::to_string_t("sling.auth.requirements")] = ModelBase::toJson(m_Sling_auth_requirements);
    }

    return val;
}

void ComAdobeGraniteCsrfImplCSRFServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("csrf.token.expires.in")))
    {
        if(!val[utility::conversions::to_string_t("csrf.token.expires.in")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("csrf.token.expires.in")]);
            setCsrfTokenExpiresIn( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.auth.requirements")))
    {
        if(!val[utility::conversions::to_string_t("sling.auth.requirements")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.auth.requirements")]);
            setSlingAuthRequirements( newItem );
        }
    }
}

void ComAdobeGraniteCsrfImplCSRFServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Csrf_token_expires_inIsSet)
    {
        if (m_Csrf_token_expires_in.get())
        {
            m_Csrf_token_expires_in->toMultipart(multipart, utility::conversions::to_string_t("csrf.token.expires.in."));
        }
    }
    if(m_Sling_auth_requirementsIsSet)
    {
        if (m_Sling_auth_requirements.get())
        {
            m_Sling_auth_requirements->toMultipart(multipart, utility::conversions::to_string_t("sling.auth.requirements."));
        }
    }
}

void ComAdobeGraniteCsrfImplCSRFServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("csrf.token.expires.in")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("csrf.token.expires.in")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("csrf.token.expires.in."));
            setCsrfTokenExpiresIn( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.auth.requirements")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.auth.requirements")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.auth.requirements."));
            setSlingAuthRequirements( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteCsrfImplCSRFServletProperties::getCsrfTokenExpiresIn() const
{
    return m_Csrf_token_expires_in;
}


void ComAdobeGraniteCsrfImplCSRFServletProperties::setCsrfTokenExpiresIn(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Csrf_token_expires_in = value;
    m_Csrf_token_expires_inIsSet = true;
}
bool ComAdobeGraniteCsrfImplCSRFServletProperties::csrfTokenExpiresInIsSet() const
{
    return m_Csrf_token_expires_inIsSet;
}

void ComAdobeGraniteCsrfImplCSRFServletProperties::unsetCsrf_token_expires_in()
{
    m_Csrf_token_expires_inIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteCsrfImplCSRFServletProperties::getSlingAuthRequirements() const
{
    return m_Sling_auth_requirements;
}


void ComAdobeGraniteCsrfImplCSRFServletProperties::setSlingAuthRequirements(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sling_auth_requirements = value;
    m_Sling_auth_requirementsIsSet = true;
}
bool ComAdobeGraniteCsrfImplCSRFServletProperties::slingAuthRequirementsIsSet() const
{
    return m_Sling_auth_requirementsIsSet;
}

void ComAdobeGraniteCsrfImplCSRFServletProperties::unsetSling_auth_requirements()
{
    m_Sling_auth_requirementsIsSet = false;
}

}
}
}
}

