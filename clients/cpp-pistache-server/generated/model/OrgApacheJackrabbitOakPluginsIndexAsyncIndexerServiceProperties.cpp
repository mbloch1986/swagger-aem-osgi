/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties()
{
    m_AsyncConfigsIsSet = false;
    m_LeaseTimeOutMinutesIsSet = false;
    m_FailingIndexTimeoutSecondsIsSet = false;
    m_ErrorWarnIntervalSecondsIsSet = false;
    
}

OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::~OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties()
{
}

void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_AsyncConfigsIsSet)
    {
        val["asyncConfigs"] = ModelBase::toJson(m_AsyncConfigs);
    }
    if(m_LeaseTimeOutMinutesIsSet)
    {
        val["leaseTimeOutMinutes"] = ModelBase::toJson(m_LeaseTimeOutMinutes);
    }
    if(m_FailingIndexTimeoutSecondsIsSet)
    {
        val["failingIndexTimeoutSeconds"] = ModelBase::toJson(m_FailingIndexTimeoutSeconds);
    }
    if(m_ErrorWarnIntervalSecondsIsSet)
    {
        val["errorWarnIntervalSeconds"] = ModelBase::toJson(m_ErrorWarnIntervalSeconds);
    }
    

    return val;
}

void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::fromJson(nlohmann::json& val)
{
    if(val.find("asyncConfigs") != val.end())
    {
        if(!val["asyncConfigs"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["asyncConfigs"]);
            setAsyncConfigs( newItem );
        }
        
    }
    if(val.find("leaseTimeOutMinutes") != val.end())
    {
        if(!val["leaseTimeOutMinutes"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["leaseTimeOutMinutes"]);
            setLeaseTimeOutMinutes( newItem );
        }
        
    }
    if(val.find("failingIndexTimeoutSeconds") != val.end())
    {
        if(!val["failingIndexTimeoutSeconds"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["failingIndexTimeoutSeconds"]);
            setFailingIndexTimeoutSeconds( newItem );
        }
        
    }
    if(val.find("errorWarnIntervalSeconds") != val.end())
    {
        if(!val["errorWarnIntervalSeconds"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["errorWarnIntervalSeconds"]);
            setErrorWarnIntervalSeconds( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getAsyncConfigs() const
{
    return m_AsyncConfigs;
}
void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setAsyncConfigs(ConfigNodePropertyArray const& value)
{
    m_AsyncConfigs = value;
    m_AsyncConfigsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::asyncConfigsIsSet() const
{
    return m_AsyncConfigsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::unsetAsyncConfigs()
{
    m_AsyncConfigsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getLeaseTimeOutMinutes() const
{
    return m_LeaseTimeOutMinutes;
}
void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setLeaseTimeOutMinutes(ConfigNodePropertyInteger const& value)
{
    m_LeaseTimeOutMinutes = value;
    m_LeaseTimeOutMinutesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::leaseTimeOutMinutesIsSet() const
{
    return m_LeaseTimeOutMinutesIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::unsetLeaseTimeOutMinutes()
{
    m_LeaseTimeOutMinutesIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getFailingIndexTimeoutSeconds() const
{
    return m_FailingIndexTimeoutSeconds;
}
void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setFailingIndexTimeoutSeconds(ConfigNodePropertyInteger const& value)
{
    m_FailingIndexTimeoutSeconds = value;
    m_FailingIndexTimeoutSecondsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::failingIndexTimeoutSecondsIsSet() const
{
    return m_FailingIndexTimeoutSecondsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::unsetFailingIndexTimeoutSeconds()
{
    m_FailingIndexTimeoutSecondsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getErrorWarnIntervalSeconds() const
{
    return m_ErrorWarnIntervalSeconds;
}
void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setErrorWarnIntervalSeconds(ConfigNodePropertyInteger const& value)
{
    m_ErrorWarnIntervalSeconds = value;
    m_ErrorWarnIntervalSecondsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::errorWarnIntervalSecondsIsSet() const
{
    return m_ErrorWarnIntervalSecondsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::unsetErrorWarnIntervalSeconds()
{
    m_ErrorWarnIntervalSecondsIsSet = false;
}

}
}
}
}

