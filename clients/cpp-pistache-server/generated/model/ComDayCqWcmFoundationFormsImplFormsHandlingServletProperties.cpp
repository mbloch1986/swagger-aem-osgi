/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties()
{
    m_Name_whitelistIsSet = false;
    m_Allow_expressionsIsSet = false;
    
}

ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::~ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties()
{
}

void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Name_whitelistIsSet)
    {
        val["name.whitelist"] = ModelBase::toJson(m_Name_whitelist);
    }
    if(m_Allow_expressionsIsSet)
    {
        val["allow.expressions"] = ModelBase::toJson(m_Allow_expressions);
    }
    

    return val;
}

void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name.whitelist") != val.end())
    {
        if(!val["name.whitelist"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name.whitelist"]);
            setNameWhitelist( newItem );
        }
        
    }
    if(val.find("allow.expressions") != val.end())
    {
        if(!val["allow.expressions"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["allow.expressions"]);
            setAllowExpressions( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::getNameWhitelist() const
{
    return m_Name_whitelist;
}
void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::setNameWhitelist(ConfigNodePropertyString const& value)
{
    m_Name_whitelist = value;
    m_Name_whitelistIsSet = true;
}
bool ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::nameWhitelistIsSet() const
{
    return m_Name_whitelistIsSet;
}
void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::unsetName_whitelist()
{
    m_Name_whitelistIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::getAllowExpressions() const
{
    return m_Allow_expressions;
}
void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::setAllowExpressions(ConfigNodePropertyBoolean const& value)
{
    m_Allow_expressions = value;
    m_Allow_expressionsIsSet = true;
}
bool ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::allowExpressionsIsSet() const
{
    return m_Allow_expressionsIsSet;
}
void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::unsetAllow_expressions()
{
    m_Allow_expressionsIsSet = false;
}

}
}
}
}

