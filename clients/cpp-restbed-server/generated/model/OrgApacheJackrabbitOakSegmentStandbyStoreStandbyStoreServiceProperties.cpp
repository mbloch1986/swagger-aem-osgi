/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties()
{
    
}

OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::~OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties()
{
}

std::string OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getOrgApacheSlingInstallerConfigurationPersist() const
{
    return m_Org_apache_sling_installer_configuration_persist;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setOrgApacheSlingInstallerConfigurationPersist(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_sling_installer_configuration_persist = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getMode() const
{
    return m_Mode;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setMode(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Mode = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPort() const
{
    return m_Port;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPort(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Port = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPrimaryHost() const
{
    return m_Primary_host;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPrimaryHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Primary_host = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getInterval() const
{
    return m_Interval;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Interval = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPrimaryAllowedClientIpRanges() const
{
    return m_Primary_allowed_client_ip_ranges;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPrimaryAllowedClientIpRanges(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Primary_allowed_client_ip_ranges = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getSecure() const
{
    return m_Secure;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setSecure(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Secure = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getStandbyReadtimeout() const
{
    return m_Standby_readtimeout;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setStandbyReadtimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Standby_readtimeout = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getStandbyAutoclean() const
{
    return m_Standby_autoclean;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setStandbyAutoclean(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Standby_autoclean = value;
}

}
}
}
}

