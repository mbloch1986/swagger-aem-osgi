/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqAuditPurgePagesProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqAuditPurgePagesProperties::OAIComAdobeCqAuditPurgePagesProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqAuditPurgePagesProperties::OAIComAdobeCqAuditPurgePagesProperties() {
    init();
}

OAIComAdobeCqAuditPurgePagesProperties::~OAIComAdobeCqAuditPurgePagesProperties() {
    this->cleanup();
}

void
OAIComAdobeCqAuditPurgePagesProperties::init() {
    auditlog_rule_name = new OAIConfigNodePropertyString();
    m_auditlog_rule_name_isSet = false;
    auditlog_rule_contentpath = new OAIConfigNodePropertyString();
    m_auditlog_rule_contentpath_isSet = false;
    auditlog_rule_minimumage = new OAIConfigNodePropertyInteger();
    m_auditlog_rule_minimumage_isSet = false;
    auditlog_rule_types = new OAIConfigNodePropertyDropDown();
    m_auditlog_rule_types_isSet = false;
}

void
OAIComAdobeCqAuditPurgePagesProperties::cleanup() {
    if(auditlog_rule_name != nullptr) { 
        delete auditlog_rule_name;
    }
    if(auditlog_rule_contentpath != nullptr) { 
        delete auditlog_rule_contentpath;
    }
    if(auditlog_rule_minimumage != nullptr) { 
        delete auditlog_rule_minimumage;
    }
    if(auditlog_rule_types != nullptr) { 
        delete auditlog_rule_types;
    }
}

OAIComAdobeCqAuditPurgePagesProperties*
OAIComAdobeCqAuditPurgePagesProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqAuditPurgePagesProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&auditlog_rule_name, pJson["auditlog.rule.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auditlog_rule_contentpath, pJson["auditlog.rule.contentpath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auditlog_rule_minimumage, pJson["auditlog.rule.minimumage"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&auditlog_rule_types, pJson["auditlog.rule.types"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
}

QString
OAIComAdobeCqAuditPurgePagesProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqAuditPurgePagesProperties::asJsonObject() {
    QJsonObject obj;
    if((auditlog_rule_name != nullptr) && (auditlog_rule_name->isSet())){
        toJsonValue(QString("auditlog.rule.name"), auditlog_rule_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auditlog_rule_contentpath != nullptr) && (auditlog_rule_contentpath->isSet())){
        toJsonValue(QString("auditlog.rule.contentpath"), auditlog_rule_contentpath, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auditlog_rule_minimumage != nullptr) && (auditlog_rule_minimumage->isSet())){
        toJsonValue(QString("auditlog.rule.minimumage"), auditlog_rule_minimumage, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((auditlog_rule_types != nullptr) && (auditlog_rule_types->isSet())){
        toJsonValue(QString("auditlog.rule.types"), auditlog_rule_types, obj, QString("OAIConfigNodePropertyDropDown"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqAuditPurgePagesProperties::getAuditlogRuleName() {
    return auditlog_rule_name;
}
void
OAIComAdobeCqAuditPurgePagesProperties::setAuditlogRuleName(OAIConfigNodePropertyString* auditlog_rule_name) {
    this->auditlog_rule_name = auditlog_rule_name;
    this->m_auditlog_rule_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqAuditPurgePagesProperties::getAuditlogRuleContentpath() {
    return auditlog_rule_contentpath;
}
void
OAIComAdobeCqAuditPurgePagesProperties::setAuditlogRuleContentpath(OAIConfigNodePropertyString* auditlog_rule_contentpath) {
    this->auditlog_rule_contentpath = auditlog_rule_contentpath;
    this->m_auditlog_rule_contentpath_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqAuditPurgePagesProperties::getAuditlogRuleMinimumage() {
    return auditlog_rule_minimumage;
}
void
OAIComAdobeCqAuditPurgePagesProperties::setAuditlogRuleMinimumage(OAIConfigNodePropertyInteger* auditlog_rule_minimumage) {
    this->auditlog_rule_minimumage = auditlog_rule_minimumage;
    this->m_auditlog_rule_minimumage_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeCqAuditPurgePagesProperties::getAuditlogRuleTypes() {
    return auditlog_rule_types;
}
void
OAIComAdobeCqAuditPurgePagesProperties::setAuditlogRuleTypes(OAIConfigNodePropertyDropDown* auditlog_rule_types) {
    this->auditlog_rule_types = auditlog_rule_types;
    this->m_auditlog_rule_types_isSet = true;
}


bool
OAIComAdobeCqAuditPurgePagesProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(auditlog_rule_name != nullptr && auditlog_rule_name->isSet()){ isObjectUpdated = true; break;}
        if(auditlog_rule_contentpath != nullptr && auditlog_rule_contentpath->isSet()){ isObjectUpdated = true; break;}
        if(auditlog_rule_minimumage != nullptr && auditlog_rule_minimumage->isSet()){ isObjectUpdated = true; break;}
        if(auditlog_rule_types != nullptr && auditlog_rule_types->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

