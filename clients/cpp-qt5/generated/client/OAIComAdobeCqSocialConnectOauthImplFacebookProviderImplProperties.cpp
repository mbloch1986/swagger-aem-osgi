/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties() {
    init();
}

OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::~OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::init() {
    oauth_provider_id = new OAIConfigNodePropertyString();
    m_oauth_provider_id_isSet = false;
    oauth_cloud_config_root = new OAIConfigNodePropertyString();
    m_oauth_cloud_config_root_isSet = false;
    provider_config_root = new OAIConfigNodePropertyString();
    m_provider_config_root_isSet = false;
    provider_config_create_tags_enabled = new OAIConfigNodePropertyBoolean();
    m_provider_config_create_tags_enabled_isSet = false;
    provider_config_user_folder = new OAIConfigNodePropertyDropDown();
    m_provider_config_user_folder_isSet = false;
    provider_config_facebook_fetch_fields = new OAIConfigNodePropertyBoolean();
    m_provider_config_facebook_fetch_fields_isSet = false;
    provider_config_facebook_fields = new OAIConfigNodePropertyArray();
    m_provider_config_facebook_fields_isSet = false;
    provider_config_refresh_userdata_enabled = new OAIConfigNodePropertyBoolean();
    m_provider_config_refresh_userdata_enabled_isSet = false;
}

void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::cleanup() {
    if(oauth_provider_id != nullptr) { 
        delete oauth_provider_id;
    }
    if(oauth_cloud_config_root != nullptr) { 
        delete oauth_cloud_config_root;
    }
    if(provider_config_root != nullptr) { 
        delete provider_config_root;
    }
    if(provider_config_create_tags_enabled != nullptr) { 
        delete provider_config_create_tags_enabled;
    }
    if(provider_config_user_folder != nullptr) { 
        delete provider_config_user_folder;
    }
    if(provider_config_facebook_fetch_fields != nullptr) { 
        delete provider_config_facebook_fetch_fields;
    }
    if(provider_config_facebook_fields != nullptr) { 
        delete provider_config_facebook_fields;
    }
    if(provider_config_refresh_userdata_enabled != nullptr) { 
        delete provider_config_refresh_userdata_enabled;
    }
}

OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties*
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&oauth_provider_id, pJson["oauth.provider.id"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_cloud_config_root, pJson["oauth.cloud.config.root"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&provider_config_root, pJson["provider.config.root"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&provider_config_create_tags_enabled, pJson["provider.config.create.tags.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&provider_config_user_folder, pJson["provider.config.user.folder"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&provider_config_facebook_fetch_fields, pJson["provider.config.facebook.fetch.fields"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&provider_config_facebook_fields, pJson["provider.config.facebook.fields"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&provider_config_refresh_userdata_enabled, pJson["provider.config.refresh.userdata.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::asJsonObject() {
    QJsonObject obj;
    if((oauth_provider_id != nullptr) && (oauth_provider_id->isSet())){
        toJsonValue(QString("oauth.provider.id"), oauth_provider_id, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_cloud_config_root != nullptr) && (oauth_cloud_config_root->isSet())){
        toJsonValue(QString("oauth.cloud.config.root"), oauth_cloud_config_root, obj, QString("OAIConfigNodePropertyString"));
    }
    if((provider_config_root != nullptr) && (provider_config_root->isSet())){
        toJsonValue(QString("provider.config.root"), provider_config_root, obj, QString("OAIConfigNodePropertyString"));
    }
    if((provider_config_create_tags_enabled != nullptr) && (provider_config_create_tags_enabled->isSet())){
        toJsonValue(QString("provider.config.create.tags.enabled"), provider_config_create_tags_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((provider_config_user_folder != nullptr) && (provider_config_user_folder->isSet())){
        toJsonValue(QString("provider.config.user.folder"), provider_config_user_folder, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((provider_config_facebook_fetch_fields != nullptr) && (provider_config_facebook_fetch_fields->isSet())){
        toJsonValue(QString("provider.config.facebook.fetch.fields"), provider_config_facebook_fetch_fields, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((provider_config_facebook_fields != nullptr) && (provider_config_facebook_fields->isSet())){
        toJsonValue(QString("provider.config.facebook.fields"), provider_config_facebook_fields, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((provider_config_refresh_userdata_enabled != nullptr) && (provider_config_refresh_userdata_enabled->isSet())){
        toJsonValue(QString("provider.config.refresh.userdata.enabled"), provider_config_refresh_userdata_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getOauthProviderId() {
    return oauth_provider_id;
}
void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setOauthProviderId(OAIConfigNodePropertyString* oauth_provider_id) {
    this->oauth_provider_id = oauth_provider_id;
    this->m_oauth_provider_id_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getOauthCloudConfigRoot() {
    return oauth_cloud_config_root;
}
void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setOauthCloudConfigRoot(OAIConfigNodePropertyString* oauth_cloud_config_root) {
    this->oauth_cloud_config_root = oauth_cloud_config_root;
    this->m_oauth_cloud_config_root_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigRoot() {
    return provider_config_root;
}
void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigRoot(OAIConfigNodePropertyString* provider_config_root) {
    this->provider_config_root = provider_config_root;
    this->m_provider_config_root_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigCreateTagsEnabled() {
    return provider_config_create_tags_enabled;
}
void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigCreateTagsEnabled(OAIConfigNodePropertyBoolean* provider_config_create_tags_enabled) {
    this->provider_config_create_tags_enabled = provider_config_create_tags_enabled;
    this->m_provider_config_create_tags_enabled_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigUserFolder() {
    return provider_config_user_folder;
}
void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigUserFolder(OAIConfigNodePropertyDropDown* provider_config_user_folder) {
    this->provider_config_user_folder = provider_config_user_folder;
    this->m_provider_config_user_folder_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigFacebookFetchFields() {
    return provider_config_facebook_fetch_fields;
}
void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigFacebookFetchFields(OAIConfigNodePropertyBoolean* provider_config_facebook_fetch_fields) {
    this->provider_config_facebook_fetch_fields = provider_config_facebook_fetch_fields;
    this->m_provider_config_facebook_fetch_fields_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigFacebookFields() {
    return provider_config_facebook_fields;
}
void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigFacebookFields(OAIConfigNodePropertyArray* provider_config_facebook_fields) {
    this->provider_config_facebook_fields = provider_config_facebook_fields;
    this->m_provider_config_facebook_fields_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::getProviderConfigRefreshUserdataEnabled() {
    return provider_config_refresh_userdata_enabled;
}
void
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::setProviderConfigRefreshUserdataEnabled(OAIConfigNodePropertyBoolean* provider_config_refresh_userdata_enabled) {
    this->provider_config_refresh_userdata_enabled = provider_config_refresh_userdata_enabled;
    this->m_provider_config_refresh_userdata_enabled_isSet = true;
}


bool
OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(oauth_provider_id != nullptr && oauth_provider_id->isSet()){ isObjectUpdated = true; break;}
        if(oauth_cloud_config_root != nullptr && oauth_cloud_config_root->isSet()){ isObjectUpdated = true; break;}
        if(provider_config_root != nullptr && provider_config_root->isSet()){ isObjectUpdated = true; break;}
        if(provider_config_create_tags_enabled != nullptr && provider_config_create_tags_enabled->isSet()){ isObjectUpdated = true; break;}
        if(provider_config_user_folder != nullptr && provider_config_user_folder->isSet()){ isObjectUpdated = true; break;}
        if(provider_config_facebook_fetch_fields != nullptr && provider_config_facebook_fetch_fields->isSet()){ isObjectUpdated = true; break;}
        if(provider_config_facebook_fields != nullptr && provider_config_facebook_fields->isSet()){ isObjectUpdated = true; break;}
        if(provider_config_refresh_userdata_enabled != nullptr && provider_config_refresh_userdata_enabled->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

