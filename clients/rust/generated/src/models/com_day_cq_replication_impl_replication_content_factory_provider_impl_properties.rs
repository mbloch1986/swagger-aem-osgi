/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties {
  #[serde(rename = "replication.content.useFileStorage")]
  replication_content_use_file_storage: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "replication.content.maxCommitAttempts")]
  replication_content_max_commit_attempts: Option<::models::ConfigNodePropertyInteger>
}

impl ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties {
  pub fn new() -> ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties {
    ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties {
      replication_content_use_file_storage: None,
      replication_content_max_commit_attempts: None
    }
  }

  pub fn set_replication_content_use_file_storage(&mut self, replication_content_use_file_storage: ::models::ConfigNodePropertyBoolean) {
    self.replication_content_use_file_storage = Some(replication_content_use_file_storage);
  }

  pub fn with_replication_content_use_file_storage(mut self, replication_content_use_file_storage: ::models::ConfigNodePropertyBoolean) -> ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties {
    self.replication_content_use_file_storage = Some(replication_content_use_file_storage);
    self
  }

  pub fn replication_content_use_file_storage(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.replication_content_use_file_storage.as_ref()
  }

  pub fn reset_replication_content_use_file_storage(&mut self) {
    self.replication_content_use_file_storage = None;
  }

  pub fn set_replication_content_max_commit_attempts(&mut self, replication_content_max_commit_attempts: ::models::ConfigNodePropertyInteger) {
    self.replication_content_max_commit_attempts = Some(replication_content_max_commit_attempts);
  }

  pub fn with_replication_content_max_commit_attempts(mut self, replication_content_max_commit_attempts: ::models::ConfigNodePropertyInteger) -> ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties {
    self.replication_content_max_commit_attempts = Some(replication_content_max_commit_attempts);
    self
  }

  pub fn replication_content_max_commit_attempts(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.replication_content_max_commit_attempts.as_ref()
  }

  pub fn reset_replication_content_max_commit_attempts(&mut self) {
    self.replication_content_max_commit_attempts = None;
  }

}



