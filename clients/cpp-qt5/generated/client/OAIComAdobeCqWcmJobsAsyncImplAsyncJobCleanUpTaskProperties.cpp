/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties() {
    init();
}

OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::~OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties() {
    this->cleanup();
}

void
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::init() {
    scheduler_expression = new OAIConfigNodePropertyString();
    m_scheduler_expression_isSet = false;
    job_purge_threshold = new OAIConfigNodePropertyInteger();
    m_job_purge_threshold_isSet = false;
    job_purge_max_jobs = new OAIConfigNodePropertyInteger();
    m_job_purge_max_jobs_isSet = false;
}

void
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::cleanup() {
    if(scheduler_expression != nullptr) { 
        delete scheduler_expression;
    }
    if(job_purge_threshold != nullptr) { 
        delete job_purge_threshold;
    }
    if(job_purge_max_jobs != nullptr) { 
        delete job_purge_max_jobs;
    }
}

OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties*
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&scheduler_expression, pJson["scheduler.expression"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&job_purge_threshold, pJson["job.purge.threshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&job_purge_max_jobs, pJson["job.purge.max.jobs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::asJsonObject() {
    QJsonObject obj;
    if((scheduler_expression != nullptr) && (scheduler_expression->isSet())){
        toJsonValue(QString("scheduler.expression"), scheduler_expression, obj, QString("OAIConfigNodePropertyString"));
    }
    if((job_purge_threshold != nullptr) && (job_purge_threshold->isSet())){
        toJsonValue(QString("job.purge.threshold"), job_purge_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((job_purge_max_jobs != nullptr) && (job_purge_max_jobs->isSet())){
        toJsonValue(QString("job.purge.max.jobs"), job_purge_max_jobs, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::getSchedulerExpression() {
    return scheduler_expression;
}
void
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::setSchedulerExpression(OAIConfigNodePropertyString* scheduler_expression) {
    this->scheduler_expression = scheduler_expression;
    this->m_scheduler_expression_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::getJobPurgeThreshold() {
    return job_purge_threshold;
}
void
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::setJobPurgeThreshold(OAIConfigNodePropertyInteger* job_purge_threshold) {
    this->job_purge_threshold = job_purge_threshold;
    this->m_job_purge_threshold_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::getJobPurgeMaxJobs() {
    return job_purge_max_jobs;
}
void
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::setJobPurgeMaxJobs(OAIConfigNodePropertyInteger* job_purge_max_jobs) {
    this->job_purge_max_jobs = job_purge_max_jobs;
    this->m_job_purge_max_jobs_isSet = true;
}


bool
OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(scheduler_expression != nullptr && scheduler_expression->isSet()){ isObjectUpdated = true; break;}
        if(job_purge_threshold != nullptr && job_purge_threshold->isSet()){ isObjectUpdated = true; break;}
        if(job_purge_max_jobs != nullptr && job_purge_max_jobs->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

