/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCommonsHttpclientProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCommonsHttpclientProperties::ComDayCommonsHttpclientProperties()
{
    m_Proxy_enabledIsSet = false;
    m_Proxy_hostIsSet = false;
    m_Proxy_userIsSet = false;
    m_Proxy_passwordIsSet = false;
    m_Proxy_ntlm_hostIsSet = false;
    m_Proxy_ntlm_domainIsSet = false;
    m_Proxy_exceptionsIsSet = false;
    
}

ComDayCommonsHttpclientProperties::~ComDayCommonsHttpclientProperties()
{
}

void ComDayCommonsHttpclientProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCommonsHttpclientProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Proxy_enabledIsSet)
    {
        val["proxy.enabled"] = ModelBase::toJson(m_Proxy_enabled);
    }
    if(m_Proxy_hostIsSet)
    {
        val["proxy.host"] = ModelBase::toJson(m_Proxy_host);
    }
    if(m_Proxy_userIsSet)
    {
        val["proxy.user"] = ModelBase::toJson(m_Proxy_user);
    }
    if(m_Proxy_passwordIsSet)
    {
        val["proxy.password"] = ModelBase::toJson(m_Proxy_password);
    }
    if(m_Proxy_ntlm_hostIsSet)
    {
        val["proxy.ntlm.host"] = ModelBase::toJson(m_Proxy_ntlm_host);
    }
    if(m_Proxy_ntlm_domainIsSet)
    {
        val["proxy.ntlm.domain"] = ModelBase::toJson(m_Proxy_ntlm_domain);
    }
    if(m_Proxy_exceptionsIsSet)
    {
        val["proxy.exceptions"] = ModelBase::toJson(m_Proxy_exceptions);
    }
    

    return val;
}

void ComDayCommonsHttpclientProperties::fromJson(nlohmann::json& val)
{
    if(val.find("proxy.enabled") != val.end())
    {
        if(!val["proxy.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["proxy.enabled"]);
            setProxyEnabled( newItem );
        }
        
    }
    if(val.find("proxy.host") != val.end())
    {
        if(!val["proxy.host"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["proxy.host"]);
            setProxyHost( newItem );
        }
        
    }
    if(val.find("proxy.user") != val.end())
    {
        if(!val["proxy.user"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["proxy.user"]);
            setProxyUser( newItem );
        }
        
    }
    if(val.find("proxy.password") != val.end())
    {
        if(!val["proxy.password"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["proxy.password"]);
            setProxyPassword( newItem );
        }
        
    }
    if(val.find("proxy.ntlm.host") != val.end())
    {
        if(!val["proxy.ntlm.host"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["proxy.ntlm.host"]);
            setProxyNtlmHost( newItem );
        }
        
    }
    if(val.find("proxy.ntlm.domain") != val.end())
    {
        if(!val["proxy.ntlm.domain"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["proxy.ntlm.domain"]);
            setProxyNtlmDomain( newItem );
        }
        
    }
    if(val.find("proxy.exceptions") != val.end())
    {
        if(!val["proxy.exceptions"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["proxy.exceptions"]);
            setProxyExceptions( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCommonsHttpclientProperties::getProxyEnabled() const
{
    return m_Proxy_enabled;
}
void ComDayCommonsHttpclientProperties::setProxyEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Proxy_enabled = value;
    m_Proxy_enabledIsSet = true;
}
bool ComDayCommonsHttpclientProperties::proxyEnabledIsSet() const
{
    return m_Proxy_enabledIsSet;
}
void ComDayCommonsHttpclientProperties::unsetProxy_enabled()
{
    m_Proxy_enabledIsSet = false;
}
ConfigNodePropertyString ComDayCommonsHttpclientProperties::getProxyHost() const
{
    return m_Proxy_host;
}
void ComDayCommonsHttpclientProperties::setProxyHost(ConfigNodePropertyString const& value)
{
    m_Proxy_host = value;
    m_Proxy_hostIsSet = true;
}
bool ComDayCommonsHttpclientProperties::proxyHostIsSet() const
{
    return m_Proxy_hostIsSet;
}
void ComDayCommonsHttpclientProperties::unsetProxy_host()
{
    m_Proxy_hostIsSet = false;
}
ConfigNodePropertyString ComDayCommonsHttpclientProperties::getProxyUser() const
{
    return m_Proxy_user;
}
void ComDayCommonsHttpclientProperties::setProxyUser(ConfigNodePropertyString const& value)
{
    m_Proxy_user = value;
    m_Proxy_userIsSet = true;
}
bool ComDayCommonsHttpclientProperties::proxyUserIsSet() const
{
    return m_Proxy_userIsSet;
}
void ComDayCommonsHttpclientProperties::unsetProxy_user()
{
    m_Proxy_userIsSet = false;
}
ConfigNodePropertyString ComDayCommonsHttpclientProperties::getProxyPassword() const
{
    return m_Proxy_password;
}
void ComDayCommonsHttpclientProperties::setProxyPassword(ConfigNodePropertyString const& value)
{
    m_Proxy_password = value;
    m_Proxy_passwordIsSet = true;
}
bool ComDayCommonsHttpclientProperties::proxyPasswordIsSet() const
{
    return m_Proxy_passwordIsSet;
}
void ComDayCommonsHttpclientProperties::unsetProxy_password()
{
    m_Proxy_passwordIsSet = false;
}
ConfigNodePropertyString ComDayCommonsHttpclientProperties::getProxyNtlmHost() const
{
    return m_Proxy_ntlm_host;
}
void ComDayCommonsHttpclientProperties::setProxyNtlmHost(ConfigNodePropertyString const& value)
{
    m_Proxy_ntlm_host = value;
    m_Proxy_ntlm_hostIsSet = true;
}
bool ComDayCommonsHttpclientProperties::proxyNtlmHostIsSet() const
{
    return m_Proxy_ntlm_hostIsSet;
}
void ComDayCommonsHttpclientProperties::unsetProxy_ntlm_host()
{
    m_Proxy_ntlm_hostIsSet = false;
}
ConfigNodePropertyString ComDayCommonsHttpclientProperties::getProxyNtlmDomain() const
{
    return m_Proxy_ntlm_domain;
}
void ComDayCommonsHttpclientProperties::setProxyNtlmDomain(ConfigNodePropertyString const& value)
{
    m_Proxy_ntlm_domain = value;
    m_Proxy_ntlm_domainIsSet = true;
}
bool ComDayCommonsHttpclientProperties::proxyNtlmDomainIsSet() const
{
    return m_Proxy_ntlm_domainIsSet;
}
void ComDayCommonsHttpclientProperties::unsetProxy_ntlm_domain()
{
    m_Proxy_ntlm_domainIsSet = false;
}
ConfigNodePropertyArray ComDayCommonsHttpclientProperties::getProxyExceptions() const
{
    return m_Proxy_exceptions;
}
void ComDayCommonsHttpclientProperties::setProxyExceptions(ConfigNodePropertyArray const& value)
{
    m_Proxy_exceptions = value;
    m_Proxy_exceptionsIsSet = true;
}
bool ComDayCommonsHttpclientProperties::proxyExceptionsIsSet() const
{
    return m_Proxy_exceptionsIsSet;
}
void ComDayCommonsHttpclientProperties::unsetProxy_exceptions()
{
    m_Proxy_exceptionsIsSet = false;
}

}
}
}
}

