/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqReportingImplConfigServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqReportingImplConfigServiceImplProperties::ComDayCqReportingImplConfigServiceImplProperties()
{
    m_Repconf_timezoneIsSet = false;
    m_Repconf_localeIsSet = false;
    m_Repconf_snapshotsIsSet = false;
    m_Repconf_repdirIsSet = false;
    m_Repconf_hourofdayIsSet = false;
    m_Repconf_minofhourIsSet = false;
    m_Repconf_maxrowsIsSet = false;
    m_Repconf_fakedataIsSet = false;
    m_Repconf_snapshotuserIsSet = false;
    m_Repconf_enforcesnapshotuserIsSet = false;
}

ComDayCqReportingImplConfigServiceImplProperties::~ComDayCqReportingImplConfigServiceImplProperties()
{
}

void ComDayCqReportingImplConfigServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqReportingImplConfigServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Repconf_timezoneIsSet)
    {
        val[utility::conversions::to_string_t("repconf.timezone")] = ModelBase::toJson(m_Repconf_timezone);
    }
    if(m_Repconf_localeIsSet)
    {
        val[utility::conversions::to_string_t("repconf.locale")] = ModelBase::toJson(m_Repconf_locale);
    }
    if(m_Repconf_snapshotsIsSet)
    {
        val[utility::conversions::to_string_t("repconf.snapshots")] = ModelBase::toJson(m_Repconf_snapshots);
    }
    if(m_Repconf_repdirIsSet)
    {
        val[utility::conversions::to_string_t("repconf.repdir")] = ModelBase::toJson(m_Repconf_repdir);
    }
    if(m_Repconf_hourofdayIsSet)
    {
        val[utility::conversions::to_string_t("repconf.hourofday")] = ModelBase::toJson(m_Repconf_hourofday);
    }
    if(m_Repconf_minofhourIsSet)
    {
        val[utility::conversions::to_string_t("repconf.minofhour")] = ModelBase::toJson(m_Repconf_minofhour);
    }
    if(m_Repconf_maxrowsIsSet)
    {
        val[utility::conversions::to_string_t("repconf.maxrows")] = ModelBase::toJson(m_Repconf_maxrows);
    }
    if(m_Repconf_fakedataIsSet)
    {
        val[utility::conversions::to_string_t("repconf.fakedata")] = ModelBase::toJson(m_Repconf_fakedata);
    }
    if(m_Repconf_snapshotuserIsSet)
    {
        val[utility::conversions::to_string_t("repconf.snapshotuser")] = ModelBase::toJson(m_Repconf_snapshotuser);
    }
    if(m_Repconf_enforcesnapshotuserIsSet)
    {
        val[utility::conversions::to_string_t("repconf.enforcesnapshotuser")] = ModelBase::toJson(m_Repconf_enforcesnapshotuser);
    }

    return val;
}

void ComDayCqReportingImplConfigServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("repconf.timezone")))
    {
        if(!val[utility::conversions::to_string_t("repconf.timezone")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("repconf.timezone")]);
            setRepconfTimezone( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repconf.locale")))
    {
        if(!val[utility::conversions::to_string_t("repconf.locale")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("repconf.locale")]);
            setRepconfLocale( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repconf.snapshots")))
    {
        if(!val[utility::conversions::to_string_t("repconf.snapshots")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("repconf.snapshots")]);
            setRepconfSnapshots( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repconf.repdir")))
    {
        if(!val[utility::conversions::to_string_t("repconf.repdir")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("repconf.repdir")]);
            setRepconfRepdir( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repconf.hourofday")))
    {
        if(!val[utility::conversions::to_string_t("repconf.hourofday")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("repconf.hourofday")]);
            setRepconfHourofday( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repconf.minofhour")))
    {
        if(!val[utility::conversions::to_string_t("repconf.minofhour")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("repconf.minofhour")]);
            setRepconfMinofhour( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repconf.maxrows")))
    {
        if(!val[utility::conversions::to_string_t("repconf.maxrows")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("repconf.maxrows")]);
            setRepconfMaxrows( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repconf.fakedata")))
    {
        if(!val[utility::conversions::to_string_t("repconf.fakedata")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("repconf.fakedata")]);
            setRepconfFakedata( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repconf.snapshotuser")))
    {
        if(!val[utility::conversions::to_string_t("repconf.snapshotuser")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("repconf.snapshotuser")]);
            setRepconfSnapshotuser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repconf.enforcesnapshotuser")))
    {
        if(!val[utility::conversions::to_string_t("repconf.enforcesnapshotuser")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("repconf.enforcesnapshotuser")]);
            setRepconfEnforcesnapshotuser( newItem );
        }
    }
}

void ComDayCqReportingImplConfigServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Repconf_timezoneIsSet)
    {
        if (m_Repconf_timezone.get())
        {
            m_Repconf_timezone->toMultipart(multipart, utility::conversions::to_string_t("repconf.timezone."));
        }
    }
    if(m_Repconf_localeIsSet)
    {
        if (m_Repconf_locale.get())
        {
            m_Repconf_locale->toMultipart(multipart, utility::conversions::to_string_t("repconf.locale."));
        }
    }
    if(m_Repconf_snapshotsIsSet)
    {
        if (m_Repconf_snapshots.get())
        {
            m_Repconf_snapshots->toMultipart(multipart, utility::conversions::to_string_t("repconf.snapshots."));
        }
    }
    if(m_Repconf_repdirIsSet)
    {
        if (m_Repconf_repdir.get())
        {
            m_Repconf_repdir->toMultipart(multipart, utility::conversions::to_string_t("repconf.repdir."));
        }
    }
    if(m_Repconf_hourofdayIsSet)
    {
        if (m_Repconf_hourofday.get())
        {
            m_Repconf_hourofday->toMultipart(multipart, utility::conversions::to_string_t("repconf.hourofday."));
        }
    }
    if(m_Repconf_minofhourIsSet)
    {
        if (m_Repconf_minofhour.get())
        {
            m_Repconf_minofhour->toMultipart(multipart, utility::conversions::to_string_t("repconf.minofhour."));
        }
    }
    if(m_Repconf_maxrowsIsSet)
    {
        if (m_Repconf_maxrows.get())
        {
            m_Repconf_maxrows->toMultipart(multipart, utility::conversions::to_string_t("repconf.maxrows."));
        }
    }
    if(m_Repconf_fakedataIsSet)
    {
        if (m_Repconf_fakedata.get())
        {
            m_Repconf_fakedata->toMultipart(multipart, utility::conversions::to_string_t("repconf.fakedata."));
        }
    }
    if(m_Repconf_snapshotuserIsSet)
    {
        if (m_Repconf_snapshotuser.get())
        {
            m_Repconf_snapshotuser->toMultipart(multipart, utility::conversions::to_string_t("repconf.snapshotuser."));
        }
    }
    if(m_Repconf_enforcesnapshotuserIsSet)
    {
        if (m_Repconf_enforcesnapshotuser.get())
        {
            m_Repconf_enforcesnapshotuser->toMultipart(multipart, utility::conversions::to_string_t("repconf.enforcesnapshotuser."));
        }
    }
}

void ComDayCqReportingImplConfigServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("repconf.timezone")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repconf.timezone")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repconf.timezone."));
            setRepconfTimezone( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repconf.locale")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repconf.locale")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repconf.locale."));
            setRepconfLocale( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repconf.snapshots")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repconf.snapshots")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repconf.snapshots."));
            setRepconfSnapshots( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repconf.repdir")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repconf.repdir")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repconf.repdir."));
            setRepconfRepdir( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repconf.hourofday")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repconf.hourofday")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repconf.hourofday."));
            setRepconfHourofday( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repconf.minofhour")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repconf.minofhour")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repconf.minofhour."));
            setRepconfMinofhour( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repconf.maxrows")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repconf.maxrows")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repconf.maxrows."));
            setRepconfMaxrows( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repconf.fakedata")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repconf.fakedata")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repconf.fakedata."));
            setRepconfFakedata( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repconf.snapshotuser")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repconf.snapshotuser")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repconf.snapshotuser."));
            setRepconfSnapshotuser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repconf.enforcesnapshotuser")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repconf.enforcesnapshotuser")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repconf.enforcesnapshotuser."));
            setRepconfEnforcesnapshotuser( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqReportingImplConfigServiceImplProperties::getRepconfTimezone() const
{
    return m_Repconf_timezone;
}


void ComDayCqReportingImplConfigServiceImplProperties::setRepconfTimezone(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repconf_timezone = value;
    m_Repconf_timezoneIsSet = true;
}
bool ComDayCqReportingImplConfigServiceImplProperties::repconfTimezoneIsSet() const
{
    return m_Repconf_timezoneIsSet;
}

void ComDayCqReportingImplConfigServiceImplProperties::unsetRepconf_timezone()
{
    m_Repconf_timezoneIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqReportingImplConfigServiceImplProperties::getRepconfLocale() const
{
    return m_Repconf_locale;
}


void ComDayCqReportingImplConfigServiceImplProperties::setRepconfLocale(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repconf_locale = value;
    m_Repconf_localeIsSet = true;
}
bool ComDayCqReportingImplConfigServiceImplProperties::repconfLocaleIsSet() const
{
    return m_Repconf_localeIsSet;
}

void ComDayCqReportingImplConfigServiceImplProperties::unsetRepconf_locale()
{
    m_Repconf_localeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqReportingImplConfigServiceImplProperties::getRepconfSnapshots() const
{
    return m_Repconf_snapshots;
}


void ComDayCqReportingImplConfigServiceImplProperties::setRepconfSnapshots(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repconf_snapshots = value;
    m_Repconf_snapshotsIsSet = true;
}
bool ComDayCqReportingImplConfigServiceImplProperties::repconfSnapshotsIsSet() const
{
    return m_Repconf_snapshotsIsSet;
}

void ComDayCqReportingImplConfigServiceImplProperties::unsetRepconf_snapshots()
{
    m_Repconf_snapshotsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqReportingImplConfigServiceImplProperties::getRepconfRepdir() const
{
    return m_Repconf_repdir;
}


void ComDayCqReportingImplConfigServiceImplProperties::setRepconfRepdir(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repconf_repdir = value;
    m_Repconf_repdirIsSet = true;
}
bool ComDayCqReportingImplConfigServiceImplProperties::repconfRepdirIsSet() const
{
    return m_Repconf_repdirIsSet;
}

void ComDayCqReportingImplConfigServiceImplProperties::unsetRepconf_repdir()
{
    m_Repconf_repdirIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReportingImplConfigServiceImplProperties::getRepconfHourofday() const
{
    return m_Repconf_hourofday;
}


void ComDayCqReportingImplConfigServiceImplProperties::setRepconfHourofday(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Repconf_hourofday = value;
    m_Repconf_hourofdayIsSet = true;
}
bool ComDayCqReportingImplConfigServiceImplProperties::repconfHourofdayIsSet() const
{
    return m_Repconf_hourofdayIsSet;
}

void ComDayCqReportingImplConfigServiceImplProperties::unsetRepconf_hourofday()
{
    m_Repconf_hourofdayIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReportingImplConfigServiceImplProperties::getRepconfMinofhour() const
{
    return m_Repconf_minofhour;
}


void ComDayCqReportingImplConfigServiceImplProperties::setRepconfMinofhour(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Repconf_minofhour = value;
    m_Repconf_minofhourIsSet = true;
}
bool ComDayCqReportingImplConfigServiceImplProperties::repconfMinofhourIsSet() const
{
    return m_Repconf_minofhourIsSet;
}

void ComDayCqReportingImplConfigServiceImplProperties::unsetRepconf_minofhour()
{
    m_Repconf_minofhourIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReportingImplConfigServiceImplProperties::getRepconfMaxrows() const
{
    return m_Repconf_maxrows;
}


void ComDayCqReportingImplConfigServiceImplProperties::setRepconfMaxrows(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Repconf_maxrows = value;
    m_Repconf_maxrowsIsSet = true;
}
bool ComDayCqReportingImplConfigServiceImplProperties::repconfMaxrowsIsSet() const
{
    return m_Repconf_maxrowsIsSet;
}

void ComDayCqReportingImplConfigServiceImplProperties::unsetRepconf_maxrows()
{
    m_Repconf_maxrowsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReportingImplConfigServiceImplProperties::getRepconfFakedata() const
{
    return m_Repconf_fakedata;
}


void ComDayCqReportingImplConfigServiceImplProperties::setRepconfFakedata(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Repconf_fakedata = value;
    m_Repconf_fakedataIsSet = true;
}
bool ComDayCqReportingImplConfigServiceImplProperties::repconfFakedataIsSet() const
{
    return m_Repconf_fakedataIsSet;
}

void ComDayCqReportingImplConfigServiceImplProperties::unsetRepconf_fakedata()
{
    m_Repconf_fakedataIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqReportingImplConfigServiceImplProperties::getRepconfSnapshotuser() const
{
    return m_Repconf_snapshotuser;
}


void ComDayCqReportingImplConfigServiceImplProperties::setRepconfSnapshotuser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repconf_snapshotuser = value;
    m_Repconf_snapshotuserIsSet = true;
}
bool ComDayCqReportingImplConfigServiceImplProperties::repconfSnapshotuserIsSet() const
{
    return m_Repconf_snapshotuserIsSet;
}

void ComDayCqReportingImplConfigServiceImplProperties::unsetRepconf_snapshotuser()
{
    m_Repconf_snapshotuserIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReportingImplConfigServiceImplProperties::getRepconfEnforcesnapshotuser() const
{
    return m_Repconf_enforcesnapshotuser;
}


void ComDayCqReportingImplConfigServiceImplProperties::setRepconfEnforcesnapshotuser(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Repconf_enforcesnapshotuser = value;
    m_Repconf_enforcesnapshotuserIsSet = true;
}
bool ComDayCqReportingImplConfigServiceImplProperties::repconfEnforcesnapshotuserIsSet() const
{
    return m_Repconf_enforcesnapshotuserIsSet;
}

void ComDayCqReportingImplConfigServiceImplProperties::unsetRepconf_enforcesnapshotuser()
{
    m_Repconf_enforcesnapshotuserIsSet = false;
}

}
}
}
}

