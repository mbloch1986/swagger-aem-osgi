/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmMsmImplRolloutManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmMsmImplRolloutManagerImplProperties::ComDayCqWcmMsmImplRolloutManagerImplProperties()
{
    m_Event_filterIsSet = false;
    m_Rolloutmgr_excludedprops_defaultIsSet = false;
    m_Rolloutmgr_excludedparagraphprops_defaultIsSet = false;
    m_Rolloutmgr_excludednodetypes_defaultIsSet = false;
    m_Rolloutmgr_threadpool_maxsizeIsSet = false;
    m_Rolloutmgr_threadpool_maxshutdowntimeIsSet = false;
    m_Rolloutmgr_threadpool_priorityIsSet = false;
    m_Rolloutmgr_commit_sizeIsSet = false;
    m_Rolloutmgr_conflicthandling_enabledIsSet = false;
}

ComDayCqWcmMsmImplRolloutManagerImplProperties::~ComDayCqWcmMsmImplRolloutManagerImplProperties()
{
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmMsmImplRolloutManagerImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Event_filterIsSet)
    {
        val[utility::conversions::to_string_t("event.filter")] = ModelBase::toJson(m_Event_filter);
    }
    if(m_Rolloutmgr_excludedprops_defaultIsSet)
    {
        val[utility::conversions::to_string_t("rolloutmgr.excludedprops.default")] = ModelBase::toJson(m_Rolloutmgr_excludedprops_default);
    }
    if(m_Rolloutmgr_excludedparagraphprops_defaultIsSet)
    {
        val[utility::conversions::to_string_t("rolloutmgr.excludedparagraphprops.default")] = ModelBase::toJson(m_Rolloutmgr_excludedparagraphprops_default);
    }
    if(m_Rolloutmgr_excludednodetypes_defaultIsSet)
    {
        val[utility::conversions::to_string_t("rolloutmgr.excludednodetypes.default")] = ModelBase::toJson(m_Rolloutmgr_excludednodetypes_default);
    }
    if(m_Rolloutmgr_threadpool_maxsizeIsSet)
    {
        val[utility::conversions::to_string_t("rolloutmgr.threadpool.maxsize")] = ModelBase::toJson(m_Rolloutmgr_threadpool_maxsize);
    }
    if(m_Rolloutmgr_threadpool_maxshutdowntimeIsSet)
    {
        val[utility::conversions::to_string_t("rolloutmgr.threadpool.maxshutdowntime")] = ModelBase::toJson(m_Rolloutmgr_threadpool_maxshutdowntime);
    }
    if(m_Rolloutmgr_threadpool_priorityIsSet)
    {
        val[utility::conversions::to_string_t("rolloutmgr.threadpool.priority")] = ModelBase::toJson(m_Rolloutmgr_threadpool_priority);
    }
    if(m_Rolloutmgr_commit_sizeIsSet)
    {
        val[utility::conversions::to_string_t("rolloutmgr.commit.size")] = ModelBase::toJson(m_Rolloutmgr_commit_size);
    }
    if(m_Rolloutmgr_conflicthandling_enabledIsSet)
    {
        val[utility::conversions::to_string_t("rolloutmgr.conflicthandling.enabled")] = ModelBase::toJson(m_Rolloutmgr_conflicthandling_enabled);
    }

    return val;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("event.filter")))
    {
        if(!val[utility::conversions::to_string_t("event.filter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("event.filter")]);
            setEventFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rolloutmgr.excludedprops.default")))
    {
        if(!val[utility::conversions::to_string_t("rolloutmgr.excludedprops.default")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("rolloutmgr.excludedprops.default")]);
            setRolloutmgrExcludedpropsDefault( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rolloutmgr.excludedparagraphprops.default")))
    {
        if(!val[utility::conversions::to_string_t("rolloutmgr.excludedparagraphprops.default")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("rolloutmgr.excludedparagraphprops.default")]);
            setRolloutmgrExcludedparagraphpropsDefault( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rolloutmgr.excludednodetypes.default")))
    {
        if(!val[utility::conversions::to_string_t("rolloutmgr.excludednodetypes.default")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("rolloutmgr.excludednodetypes.default")]);
            setRolloutmgrExcludednodetypesDefault( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rolloutmgr.threadpool.maxsize")))
    {
        if(!val[utility::conversions::to_string_t("rolloutmgr.threadpool.maxsize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("rolloutmgr.threadpool.maxsize")]);
            setRolloutmgrThreadpoolMaxsize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rolloutmgr.threadpool.maxshutdowntime")))
    {
        if(!val[utility::conversions::to_string_t("rolloutmgr.threadpool.maxshutdowntime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("rolloutmgr.threadpool.maxshutdowntime")]);
            setRolloutmgrThreadpoolMaxshutdowntime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rolloutmgr.threadpool.priority")))
    {
        if(!val[utility::conversions::to_string_t("rolloutmgr.threadpool.priority")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("rolloutmgr.threadpool.priority")]);
            setRolloutmgrThreadpoolPriority( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rolloutmgr.commit.size")))
    {
        if(!val[utility::conversions::to_string_t("rolloutmgr.commit.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("rolloutmgr.commit.size")]);
            setRolloutmgrCommitSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rolloutmgr.conflicthandling.enabled")))
    {
        if(!val[utility::conversions::to_string_t("rolloutmgr.conflicthandling.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("rolloutmgr.conflicthandling.enabled")]);
            setRolloutmgrConflicthandlingEnabled( newItem );
        }
    }
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Event_filterIsSet)
    {
        if (m_Event_filter.get())
        {
            m_Event_filter->toMultipart(multipart, utility::conversions::to_string_t("event.filter."));
        }
    }
    if(m_Rolloutmgr_excludedprops_defaultIsSet)
    {
        if (m_Rolloutmgr_excludedprops_default.get())
        {
            m_Rolloutmgr_excludedprops_default->toMultipart(multipart, utility::conversions::to_string_t("rolloutmgr.excludedprops.default."));
        }
    }
    if(m_Rolloutmgr_excludedparagraphprops_defaultIsSet)
    {
        if (m_Rolloutmgr_excludedparagraphprops_default.get())
        {
            m_Rolloutmgr_excludedparagraphprops_default->toMultipart(multipart, utility::conversions::to_string_t("rolloutmgr.excludedparagraphprops.default."));
        }
    }
    if(m_Rolloutmgr_excludednodetypes_defaultIsSet)
    {
        if (m_Rolloutmgr_excludednodetypes_default.get())
        {
            m_Rolloutmgr_excludednodetypes_default->toMultipart(multipart, utility::conversions::to_string_t("rolloutmgr.excludednodetypes.default."));
        }
    }
    if(m_Rolloutmgr_threadpool_maxsizeIsSet)
    {
        if (m_Rolloutmgr_threadpool_maxsize.get())
        {
            m_Rolloutmgr_threadpool_maxsize->toMultipart(multipart, utility::conversions::to_string_t("rolloutmgr.threadpool.maxsize."));
        }
    }
    if(m_Rolloutmgr_threadpool_maxshutdowntimeIsSet)
    {
        if (m_Rolloutmgr_threadpool_maxshutdowntime.get())
        {
            m_Rolloutmgr_threadpool_maxshutdowntime->toMultipart(multipart, utility::conversions::to_string_t("rolloutmgr.threadpool.maxshutdowntime."));
        }
    }
    if(m_Rolloutmgr_threadpool_priorityIsSet)
    {
        if (m_Rolloutmgr_threadpool_priority.get())
        {
            m_Rolloutmgr_threadpool_priority->toMultipart(multipart, utility::conversions::to_string_t("rolloutmgr.threadpool.priority."));
        }
    }
    if(m_Rolloutmgr_commit_sizeIsSet)
    {
        if (m_Rolloutmgr_commit_size.get())
        {
            m_Rolloutmgr_commit_size->toMultipart(multipart, utility::conversions::to_string_t("rolloutmgr.commit.size."));
        }
    }
    if(m_Rolloutmgr_conflicthandling_enabledIsSet)
    {
        if (m_Rolloutmgr_conflicthandling_enabled.get())
        {
            m_Rolloutmgr_conflicthandling_enabled->toMultipart(multipart, utility::conversions::to_string_t("rolloutmgr.conflicthandling.enabled."));
        }
    }
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("event.filter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("event.filter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("event.filter."));
            setEventFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.excludedprops.default")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.excludedprops.default")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rolloutmgr.excludedprops.default."));
            setRolloutmgrExcludedpropsDefault( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.excludedparagraphprops.default")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.excludedparagraphprops.default")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rolloutmgr.excludedparagraphprops.default."));
            setRolloutmgrExcludedparagraphpropsDefault( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.excludednodetypes.default")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.excludednodetypes.default")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rolloutmgr.excludednodetypes.default."));
            setRolloutmgrExcludednodetypesDefault( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.threadpool.maxsize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.threadpool.maxsize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rolloutmgr.threadpool.maxsize."));
            setRolloutmgrThreadpoolMaxsize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.threadpool.maxshutdowntime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.threadpool.maxshutdowntime")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rolloutmgr.threadpool.maxshutdowntime."));
            setRolloutmgrThreadpoolMaxshutdowntime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.threadpool.priority")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.threadpool.priority")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rolloutmgr.threadpool.priority."));
            setRolloutmgrThreadpoolPriority( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.commit.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.commit.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rolloutmgr.commit.size."));
            setRolloutmgrCommitSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.conflicthandling.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rolloutmgr.conflicthandling.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rolloutmgr.conflicthandling.enabled."));
            setRolloutmgrConflicthandlingEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmMsmImplRolloutManagerImplProperties::getEventFilter() const
{
    return m_Event_filter;
}


void ComDayCqWcmMsmImplRolloutManagerImplProperties::setEventFilter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludedpropsDefault() const
{
    return m_Rolloutmgr_excludedprops_default;
}


void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludedpropsDefault(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Rolloutmgr_excludedprops_default = value;
    m_Rolloutmgr_excludedprops_defaultIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrExcludedpropsDefaultIsSet() const
{
    return m_Rolloutmgr_excludedprops_defaultIsSet;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_excludedprops_default()
{
    m_Rolloutmgr_excludedprops_defaultIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludedparagraphpropsDefault() const
{
    return m_Rolloutmgr_excludedparagraphprops_default;
}


void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludedparagraphpropsDefault(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Rolloutmgr_excludedparagraphprops_default = value;
    m_Rolloutmgr_excludedparagraphprops_defaultIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrExcludedparagraphpropsDefaultIsSet() const
{
    return m_Rolloutmgr_excludedparagraphprops_defaultIsSet;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_excludedparagraphprops_default()
{
    m_Rolloutmgr_excludedparagraphprops_defaultIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludednodetypesDefault() const
{
    return m_Rolloutmgr_excludednodetypes_default;
}


void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludednodetypesDefault(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Rolloutmgr_excludednodetypes_default = value;
    m_Rolloutmgr_excludednodetypes_defaultIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrExcludednodetypesDefaultIsSet() const
{
    return m_Rolloutmgr_excludednodetypes_defaultIsSet;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_excludednodetypes_default()
{
    m_Rolloutmgr_excludednodetypes_defaultIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolMaxsize() const
{
    return m_Rolloutmgr_threadpool_maxsize;
}


void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolMaxsize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Rolloutmgr_threadpool_maxsize = value;
    m_Rolloutmgr_threadpool_maxsizeIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrThreadpoolMaxsizeIsSet() const
{
    return m_Rolloutmgr_threadpool_maxsizeIsSet;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_threadpool_maxsize()
{
    m_Rolloutmgr_threadpool_maxsizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolMaxshutdowntime() const
{
    return m_Rolloutmgr_threadpool_maxshutdowntime;
}


void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolMaxshutdowntime(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Rolloutmgr_threadpool_maxshutdowntime = value;
    m_Rolloutmgr_threadpool_maxshutdowntimeIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrThreadpoolMaxshutdowntimeIsSet() const
{
    return m_Rolloutmgr_threadpool_maxshutdowntimeIsSet;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_threadpool_maxshutdowntime()
{
    m_Rolloutmgr_threadpool_maxshutdowntimeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolPriority() const
{
    return m_Rolloutmgr_threadpool_priority;
}


void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolPriority(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Rolloutmgr_threadpool_priority = value;
    m_Rolloutmgr_threadpool_priorityIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrThreadpoolPriorityIsSet() const
{
    return m_Rolloutmgr_threadpool_priorityIsSet;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_threadpool_priority()
{
    m_Rolloutmgr_threadpool_priorityIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrCommitSize() const
{
    return m_Rolloutmgr_commit_size;
}


void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrCommitSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Rolloutmgr_commit_size = value;
    m_Rolloutmgr_commit_sizeIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrCommitSizeIsSet() const
{
    return m_Rolloutmgr_commit_sizeIsSet;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_commit_size()
{
    m_Rolloutmgr_commit_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrConflicthandlingEnabled() const
{
    return m_Rolloutmgr_conflicthandling_enabled;
}


void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrConflicthandlingEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Rolloutmgr_conflicthandling_enabled = value;
    m_Rolloutmgr_conflicthandling_enabledIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrConflicthandlingEnabledIsSet() const
{
    return m_Rolloutmgr_conflicthandling_enabledIsSet;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_conflicthandling_enabled()
{
    m_Rolloutmgr_conflicthandling_enabledIsSet = false;
}

}
}
}
}

