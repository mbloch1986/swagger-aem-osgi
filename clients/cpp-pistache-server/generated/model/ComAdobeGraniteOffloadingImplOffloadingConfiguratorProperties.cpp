/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties()
{
    m_Offloading_transporterIsSet = false;
    m_Offloading_cleanup_payloadIsSet = false;
    
}

ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::~ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties()
{
}

void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Offloading_transporterIsSet)
    {
        val["offloading.transporter"] = ModelBase::toJson(m_Offloading_transporter);
    }
    if(m_Offloading_cleanup_payloadIsSet)
    {
        val["offloading.cleanup.payload"] = ModelBase::toJson(m_Offloading_cleanup_payload);
    }
    

    return val;
}

void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::fromJson(nlohmann::json& val)
{
    if(val.find("offloading.transporter") != val.end())
    {
        if(!val["offloading.transporter"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["offloading.transporter"]);
            setOffloadingTransporter( newItem );
        }
        
    }
    if(val.find("offloading.cleanup.payload") != val.end())
    {
        if(!val["offloading.cleanup.payload"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["offloading.cleanup.payload"]);
            setOffloadingCleanupPayload( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::getOffloadingTransporter() const
{
    return m_Offloading_transporter;
}
void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::setOffloadingTransporter(ConfigNodePropertyString const& value)
{
    m_Offloading_transporter = value;
    m_Offloading_transporterIsSet = true;
}
bool ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::offloadingTransporterIsSet() const
{
    return m_Offloading_transporterIsSet;
}
void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::unsetOffloading_transporter()
{
    m_Offloading_transporterIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::getOffloadingCleanupPayload() const
{
    return m_Offloading_cleanup_payload;
}
void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::setOffloadingCleanupPayload(ConfigNodePropertyBoolean const& value)
{
    m_Offloading_cleanup_payload = value;
    m_Offloading_cleanup_payloadIsSet = true;
}
bool ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::offloadingCleanupPayloadIsSet() const
{
    return m_Offloading_cleanup_payloadIsSet;
}
void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::unsetOffloading_cleanup_payload()
{
    m_Offloading_cleanup_payloadIsSet = false;
}

}
}
}
}

