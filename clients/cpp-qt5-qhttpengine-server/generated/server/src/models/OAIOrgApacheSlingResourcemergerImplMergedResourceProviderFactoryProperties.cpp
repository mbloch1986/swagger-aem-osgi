/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties() {
    this->init();
}

OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::~OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties() {
    
}

void
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::init() {
    m_merge_root_isSet = false;
    m_merge_read_only_isSet = false;
}

void
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(merge_root, json[QString("merge.root")]);
    
    ::OpenAPI::fromJsonValue(merge_read_only, json[QString("merge.readOnly")]);
    
}

QString
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::asJsonObject() const {
    QJsonObject obj;
	if(merge_root.isSet()){
        obj.insert(QString("merge.root"), ::OpenAPI::toJsonValue(merge_root));
    }
	if(merge_read_only.isSet()){
        obj.insert(QString("merge.readOnly"), ::OpenAPI::toJsonValue(merge_read_only));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::getMergeRoot() const {
    return merge_root;
}
void
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::setMergeRoot(const OAIConfigNodePropertyString &merge_root) {
    this->merge_root = merge_root;
    this->m_merge_root_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::getMergeReadOnly() const {
    return merge_read_only;
}
void
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::setMergeReadOnly(const OAIConfigNodePropertyBoolean &merge_read_only) {
    this->merge_read_only = merge_read_only;
    this->m_merge_read_only_isSet = true;
}


bool
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(merge_root.isSet()){ isObjectUpdated = true; break;}
    
        if(merge_read_only.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

