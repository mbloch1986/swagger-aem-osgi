/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties {
  #[serde(rename = "name.whitelist")]
  name_whitelist: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "allow.expressions")]
  allow_expressions: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties {
  pub fn new() -> ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties {
    ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties {
      name_whitelist: None,
      allow_expressions: None
    }
  }

  pub fn set_name_whitelist(&mut self, name_whitelist: ::models::ConfigNodePropertyString) {
    self.name_whitelist = Some(name_whitelist);
  }

  pub fn with_name_whitelist(mut self, name_whitelist: ::models::ConfigNodePropertyString) -> ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties {
    self.name_whitelist = Some(name_whitelist);
    self
  }

  pub fn name_whitelist(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.name_whitelist.as_ref()
  }

  pub fn reset_name_whitelist(&mut self) {
    self.name_whitelist = None;
  }

  pub fn set_allow_expressions(&mut self, allow_expressions: ::models::ConfigNodePropertyBoolean) {
    self.allow_expressions = Some(allow_expressions);
  }

  pub fn with_allow_expressions(mut self, allow_expressions: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties {
    self.allow_expressions = Some(allow_expressions);
    self
  }

  pub fn allow_expressions(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.allow_expressions.as_ref()
  }

  pub fn reset_allow_expressions(&mut self) {
    self.allow_expressions = None;
  }

}



