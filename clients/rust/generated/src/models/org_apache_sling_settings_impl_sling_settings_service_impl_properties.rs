/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties {
  #[serde(rename = "sling.name")]
  sling_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sling.description")]
  sling_description: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties {
  pub fn new() -> OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties {
    OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties {
      sling_name: None,
      sling_description: None
    }
  }

  pub fn set_sling_name(&mut self, sling_name: ::models::ConfigNodePropertyString) {
    self.sling_name = Some(sling_name);
  }

  pub fn with_sling_name(mut self, sling_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties {
    self.sling_name = Some(sling_name);
    self
  }

  pub fn sling_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_name.as_ref()
  }

  pub fn reset_sling_name(&mut self) {
    self.sling_name = None;
  }

  pub fn set_sling_description(&mut self, sling_description: ::models::ConfigNodePropertyString) {
    self.sling_description = Some(sling_description);
  }

  pub fn with_sling_description(mut self, sling_description: ::models::ConfigNodePropertyString) -> OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties {
    self.sling_description = Some(sling_description);
    self
  }

  pub fn sling_description(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_description.as_ref()
  }

  pub fn reset_sling_description(&mut self) {
    self.sling_description = None;
  }

}



