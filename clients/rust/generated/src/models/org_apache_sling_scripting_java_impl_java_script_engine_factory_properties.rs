/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
  #[serde(rename = "java.classdebuginfo")]
  java_classdebuginfo: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "java.javaEncoding")]
  java_java_encoding: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "java.compilerSourceVM")]
  java_compiler_source_vm: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "java.compilerTargetVM")]
  java_compiler_target_vm: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
  pub fn new() -> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
    OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
      java_classdebuginfo: None,
      java_java_encoding: None,
      java_compiler_source_vm: None,
      java_compiler_target_vm: None
    }
  }

  pub fn set_java_classdebuginfo(&mut self, java_classdebuginfo: ::models::ConfigNodePropertyBoolean) {
    self.java_classdebuginfo = Some(java_classdebuginfo);
  }

  pub fn with_java_classdebuginfo(mut self, java_classdebuginfo: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
    self.java_classdebuginfo = Some(java_classdebuginfo);
    self
  }

  pub fn java_classdebuginfo(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.java_classdebuginfo.as_ref()
  }

  pub fn reset_java_classdebuginfo(&mut self) {
    self.java_classdebuginfo = None;
  }

  pub fn set_java_java_encoding(&mut self, java_java_encoding: ::models::ConfigNodePropertyString) {
    self.java_java_encoding = Some(java_java_encoding);
  }

  pub fn with_java_java_encoding(mut self, java_java_encoding: ::models::ConfigNodePropertyString) -> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
    self.java_java_encoding = Some(java_java_encoding);
    self
  }

  pub fn java_java_encoding(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.java_java_encoding.as_ref()
  }

  pub fn reset_java_java_encoding(&mut self) {
    self.java_java_encoding = None;
  }

  pub fn set_java_compiler_source_vm(&mut self, java_compiler_source_vm: ::models::ConfigNodePropertyString) {
    self.java_compiler_source_vm = Some(java_compiler_source_vm);
  }

  pub fn with_java_compiler_source_vm(mut self, java_compiler_source_vm: ::models::ConfigNodePropertyString) -> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
    self.java_compiler_source_vm = Some(java_compiler_source_vm);
    self
  }

  pub fn java_compiler_source_vm(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.java_compiler_source_vm.as_ref()
  }

  pub fn reset_java_compiler_source_vm(&mut self) {
    self.java_compiler_source_vm = None;
  }

  pub fn set_java_compiler_target_vm(&mut self, java_compiler_target_vm: ::models::ConfigNodePropertyString) {
    self.java_compiler_target_vm = Some(java_compiler_target_vm);
  }

  pub fn with_java_compiler_target_vm(mut self, java_compiler_target_vm: ::models::ConfigNodePropertyString) -> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
    self.java_compiler_target_vm = Some(java_compiler_target_vm);
    self
  }

  pub fn java_compiler_target_vm(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.java_compiler_target_vm.as_ref()
  }

  pub fn reset_java_compiler_target_vm(&mut self) {
    self.java_compiler_target_vm = None;
  }

}



