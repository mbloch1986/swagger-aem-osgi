/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDatasourceDataSourceFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::OAIOrgApacheSlingDatasourceDataSourceFactoryProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::OAIOrgApacheSlingDatasourceDataSourceFactoryProperties() {
    this->init();
}

OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::~OAIOrgApacheSlingDatasourceDataSourceFactoryProperties() {
    
}

void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::init() {
    m_datasource_name_isSet = false;
    m_datasource_svc_prop_name_isSet = false;
    m_driver_class_name_isSet = false;
    m_url_isSet = false;
    m_username_isSet = false;
    m_password_isSet = false;
    m_default_auto_commit_isSet = false;
    m_default_read_only_isSet = false;
    m_default_transaction_isolation_isSet = false;
    m_default_catalog_isSet = false;
    m_max_active_isSet = false;
    m_max_idle_isSet = false;
    m_min_idle_isSet = false;
    m_initial_size_isSet = false;
    m_max_wait_isSet = false;
    m_max_age_isSet = false;
    m_test_on_borrow_isSet = false;
    m_test_on_return_isSet = false;
    m_test_while_idle_isSet = false;
    m_validation_query_isSet = false;
    m_validation_query_timeout_isSet = false;
    m_time_between_eviction_runs_millis_isSet = false;
    m_min_evictable_idle_time_millis_isSet = false;
    m_connection_properties_isSet = false;
    m_init_sql_isSet = false;
    m_jdbc_interceptors_isSet = false;
    m_validation_interval_isSet = false;
    m_log_validation_errors_isSet = false;
    m_datasource_svc_properties_isSet = false;
}

void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(datasource_name, json[QString("datasource.name")]);
    
    ::OpenAPI::fromJsonValue(datasource_svc_prop_name, json[QString("datasource.svc.prop.name")]);
    
    ::OpenAPI::fromJsonValue(driver_class_name, json[QString("driverClassName")]);
    
    ::OpenAPI::fromJsonValue(url, json[QString("url")]);
    
    ::OpenAPI::fromJsonValue(username, json[QString("username")]);
    
    ::OpenAPI::fromJsonValue(password, json[QString("password")]);
    
    ::OpenAPI::fromJsonValue(default_auto_commit, json[QString("defaultAutoCommit")]);
    
    ::OpenAPI::fromJsonValue(default_read_only, json[QString("defaultReadOnly")]);
    
    ::OpenAPI::fromJsonValue(default_transaction_isolation, json[QString("defaultTransactionIsolation")]);
    
    ::OpenAPI::fromJsonValue(default_catalog, json[QString("defaultCatalog")]);
    
    ::OpenAPI::fromJsonValue(max_active, json[QString("maxActive")]);
    
    ::OpenAPI::fromJsonValue(max_idle, json[QString("maxIdle")]);
    
    ::OpenAPI::fromJsonValue(min_idle, json[QString("minIdle")]);
    
    ::OpenAPI::fromJsonValue(initial_size, json[QString("initialSize")]);
    
    ::OpenAPI::fromJsonValue(max_wait, json[QString("maxWait")]);
    
    ::OpenAPI::fromJsonValue(max_age, json[QString("maxAge")]);
    
    ::OpenAPI::fromJsonValue(test_on_borrow, json[QString("testOnBorrow")]);
    
    ::OpenAPI::fromJsonValue(test_on_return, json[QString("testOnReturn")]);
    
    ::OpenAPI::fromJsonValue(test_while_idle, json[QString("testWhileIdle")]);
    
    ::OpenAPI::fromJsonValue(validation_query, json[QString("validationQuery")]);
    
    ::OpenAPI::fromJsonValue(validation_query_timeout, json[QString("validationQueryTimeout")]);
    
    ::OpenAPI::fromJsonValue(time_between_eviction_runs_millis, json[QString("timeBetweenEvictionRunsMillis")]);
    
    ::OpenAPI::fromJsonValue(min_evictable_idle_time_millis, json[QString("minEvictableIdleTimeMillis")]);
    
    ::OpenAPI::fromJsonValue(connection_properties, json[QString("connectionProperties")]);
    
    ::OpenAPI::fromJsonValue(init_sql, json[QString("initSQL")]);
    
    ::OpenAPI::fromJsonValue(jdbc_interceptors, json[QString("jdbcInterceptors")]);
    
    ::OpenAPI::fromJsonValue(validation_interval, json[QString("validationInterval")]);
    
    ::OpenAPI::fromJsonValue(log_validation_errors, json[QString("logValidationErrors")]);
    
    ::OpenAPI::fromJsonValue(datasource_svc_properties, json[QString("datasource.svc.properties")]);
    
}

QString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::asJsonObject() const {
    QJsonObject obj;
	if(datasource_name.isSet()){
        obj.insert(QString("datasource.name"), ::OpenAPI::toJsonValue(datasource_name));
    }
	if(datasource_svc_prop_name.isSet()){
        obj.insert(QString("datasource.svc.prop.name"), ::OpenAPI::toJsonValue(datasource_svc_prop_name));
    }
	if(driver_class_name.isSet()){
        obj.insert(QString("driverClassName"), ::OpenAPI::toJsonValue(driver_class_name));
    }
	if(url.isSet()){
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(url));
    }
	if(username.isSet()){
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(username));
    }
	if(password.isSet()){
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(password));
    }
	if(default_auto_commit.isSet()){
        obj.insert(QString("defaultAutoCommit"), ::OpenAPI::toJsonValue(default_auto_commit));
    }
	if(default_read_only.isSet()){
        obj.insert(QString("defaultReadOnly"), ::OpenAPI::toJsonValue(default_read_only));
    }
	if(default_transaction_isolation.isSet()){
        obj.insert(QString("defaultTransactionIsolation"), ::OpenAPI::toJsonValue(default_transaction_isolation));
    }
	if(default_catalog.isSet()){
        obj.insert(QString("defaultCatalog"), ::OpenAPI::toJsonValue(default_catalog));
    }
	if(max_active.isSet()){
        obj.insert(QString("maxActive"), ::OpenAPI::toJsonValue(max_active));
    }
	if(max_idle.isSet()){
        obj.insert(QString("maxIdle"), ::OpenAPI::toJsonValue(max_idle));
    }
	if(min_idle.isSet()){
        obj.insert(QString("minIdle"), ::OpenAPI::toJsonValue(min_idle));
    }
	if(initial_size.isSet()){
        obj.insert(QString("initialSize"), ::OpenAPI::toJsonValue(initial_size));
    }
	if(max_wait.isSet()){
        obj.insert(QString("maxWait"), ::OpenAPI::toJsonValue(max_wait));
    }
	if(max_age.isSet()){
        obj.insert(QString("maxAge"), ::OpenAPI::toJsonValue(max_age));
    }
	if(test_on_borrow.isSet()){
        obj.insert(QString("testOnBorrow"), ::OpenAPI::toJsonValue(test_on_borrow));
    }
	if(test_on_return.isSet()){
        obj.insert(QString("testOnReturn"), ::OpenAPI::toJsonValue(test_on_return));
    }
	if(test_while_idle.isSet()){
        obj.insert(QString("testWhileIdle"), ::OpenAPI::toJsonValue(test_while_idle));
    }
	if(validation_query.isSet()){
        obj.insert(QString("validationQuery"), ::OpenAPI::toJsonValue(validation_query));
    }
	if(validation_query_timeout.isSet()){
        obj.insert(QString("validationQueryTimeout"), ::OpenAPI::toJsonValue(validation_query_timeout));
    }
	if(time_between_eviction_runs_millis.isSet()){
        obj.insert(QString("timeBetweenEvictionRunsMillis"), ::OpenAPI::toJsonValue(time_between_eviction_runs_millis));
    }
	if(min_evictable_idle_time_millis.isSet()){
        obj.insert(QString("minEvictableIdleTimeMillis"), ::OpenAPI::toJsonValue(min_evictable_idle_time_millis));
    }
	if(connection_properties.isSet()){
        obj.insert(QString("connectionProperties"), ::OpenAPI::toJsonValue(connection_properties));
    }
	if(init_sql.isSet()){
        obj.insert(QString("initSQL"), ::OpenAPI::toJsonValue(init_sql));
    }
	if(jdbc_interceptors.isSet()){
        obj.insert(QString("jdbcInterceptors"), ::OpenAPI::toJsonValue(jdbc_interceptors));
    }
	if(validation_interval.isSet()){
        obj.insert(QString("validationInterval"), ::OpenAPI::toJsonValue(validation_interval));
    }
	if(log_validation_errors.isSet()){
        obj.insert(QString("logValidationErrors"), ::OpenAPI::toJsonValue(log_validation_errors));
    }
	if(datasource_svc_properties.isSet()){
        obj.insert(QString("datasource.svc.properties"), ::OpenAPI::toJsonValue(datasource_svc_properties));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceName() const {
    return datasource_name;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceName(const OAIConfigNodePropertyString &datasource_name) {
    this->datasource_name = datasource_name;
    this->m_datasource_name_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceSvcPropName() const {
    return datasource_svc_prop_name;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceSvcPropName(const OAIConfigNodePropertyString &datasource_svc_prop_name) {
    this->datasource_svc_prop_name = datasource_svc_prop_name;
    this->m_datasource_svc_prop_name_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDriverClassName() const {
    return driver_class_name;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDriverClassName(const OAIConfigNodePropertyString &driver_class_name) {
    this->driver_class_name = driver_class_name;
    this->m_driver_class_name_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getUrl() const {
    return url;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setUrl(const OAIConfigNodePropertyString &url) {
    this->url = url;
    this->m_url_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getUsername() const {
    return username;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setUsername(const OAIConfigNodePropertyString &username) {
    this->username = username;
    this->m_username_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getPassword() const {
    return password;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setPassword(const OAIConfigNodePropertyString &password) {
    this->password = password;
    this->m_password_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultAutoCommit() const {
    return default_auto_commit;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultAutoCommit(const OAIConfigNodePropertyDropDown &default_auto_commit) {
    this->default_auto_commit = default_auto_commit;
    this->m_default_auto_commit_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultReadOnly() const {
    return default_read_only;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultReadOnly(const OAIConfigNodePropertyDropDown &default_read_only) {
    this->default_read_only = default_read_only;
    this->m_default_read_only_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultTransactionIsolation() const {
    return default_transaction_isolation;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultTransactionIsolation(const OAIConfigNodePropertyDropDown &default_transaction_isolation) {
    this->default_transaction_isolation = default_transaction_isolation;
    this->m_default_transaction_isolation_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultCatalog() const {
    return default_catalog;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultCatalog(const OAIConfigNodePropertyString &default_catalog) {
    this->default_catalog = default_catalog;
    this->m_default_catalog_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxActive() const {
    return max_active;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxActive(const OAIConfigNodePropertyInteger &max_active) {
    this->max_active = max_active;
    this->m_max_active_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxIdle() const {
    return max_idle;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxIdle(const OAIConfigNodePropertyInteger &max_idle) {
    this->max_idle = max_idle;
    this->m_max_idle_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMinIdle() const {
    return min_idle;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMinIdle(const OAIConfigNodePropertyInteger &min_idle) {
    this->min_idle = min_idle;
    this->m_min_idle_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getInitialSize() const {
    return initial_size;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setInitialSize(const OAIConfigNodePropertyInteger &initial_size) {
    this->initial_size = initial_size;
    this->m_initial_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxWait() const {
    return max_wait;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxWait(const OAIConfigNodePropertyInteger &max_wait) {
    this->max_wait = max_wait;
    this->m_max_wait_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxAge() const {
    return max_age;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxAge(const OAIConfigNodePropertyInteger &max_age) {
    this->max_age = max_age;
    this->m_max_age_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getTestOnBorrow() const {
    return test_on_borrow;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setTestOnBorrow(const OAIConfigNodePropertyBoolean &test_on_borrow) {
    this->test_on_borrow = test_on_borrow;
    this->m_test_on_borrow_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getTestOnReturn() const {
    return test_on_return;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setTestOnReturn(const OAIConfigNodePropertyBoolean &test_on_return) {
    this->test_on_return = test_on_return;
    this->m_test_on_return_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getTestWhileIdle() const {
    return test_while_idle;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setTestWhileIdle(const OAIConfigNodePropertyBoolean &test_while_idle) {
    this->test_while_idle = test_while_idle;
    this->m_test_while_idle_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationQuery() const {
    return validation_query;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationQuery(const OAIConfigNodePropertyString &validation_query) {
    this->validation_query = validation_query;
    this->m_validation_query_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationQueryTimeout() const {
    return validation_query_timeout;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationQueryTimeout(const OAIConfigNodePropertyInteger &validation_query_timeout) {
    this->validation_query_timeout = validation_query_timeout;
    this->m_validation_query_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getTimeBetweenEvictionRunsMillis() const {
    return time_between_eviction_runs_millis;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setTimeBetweenEvictionRunsMillis(const OAIConfigNodePropertyInteger &time_between_eviction_runs_millis) {
    this->time_between_eviction_runs_millis = time_between_eviction_runs_millis;
    this->m_time_between_eviction_runs_millis_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMinEvictableIdleTimeMillis() const {
    return min_evictable_idle_time_millis;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMinEvictableIdleTimeMillis(const OAIConfigNodePropertyInteger &min_evictable_idle_time_millis) {
    this->min_evictable_idle_time_millis = min_evictable_idle_time_millis;
    this->m_min_evictable_idle_time_millis_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getConnectionProperties() const {
    return connection_properties;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setConnectionProperties(const OAIConfigNodePropertyString &connection_properties) {
    this->connection_properties = connection_properties;
    this->m_connection_properties_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getInitSql() const {
    return init_sql;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setInitSql(const OAIConfigNodePropertyString &init_sql) {
    this->init_sql = init_sql;
    this->m_init_sql_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getJdbcInterceptors() const {
    return jdbc_interceptors;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setJdbcInterceptors(const OAIConfigNodePropertyString &jdbc_interceptors) {
    this->jdbc_interceptors = jdbc_interceptors;
    this->m_jdbc_interceptors_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationInterval() const {
    return validation_interval;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationInterval(const OAIConfigNodePropertyInteger &validation_interval) {
    this->validation_interval = validation_interval;
    this->m_validation_interval_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getLogValidationErrors() const {
    return log_validation_errors;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setLogValidationErrors(const OAIConfigNodePropertyBoolean &log_validation_errors) {
    this->log_validation_errors = log_validation_errors;
    this->m_log_validation_errors_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceSvcProperties() const {
    return datasource_svc_properties;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceSvcProperties(const OAIConfigNodePropertyArray &datasource_svc_properties) {
    this->datasource_svc_properties = datasource_svc_properties;
    this->m_datasource_svc_properties_isSet = true;
}


bool
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(datasource_name.isSet()){ isObjectUpdated = true; break;}
    
        if(datasource_svc_prop_name.isSet()){ isObjectUpdated = true; break;}
    
        if(driver_class_name.isSet()){ isObjectUpdated = true; break;}
    
        if(url.isSet()){ isObjectUpdated = true; break;}
    
        if(username.isSet()){ isObjectUpdated = true; break;}
    
        if(password.isSet()){ isObjectUpdated = true; break;}
    
        if(default_auto_commit.isSet()){ isObjectUpdated = true; break;}
    
        if(default_read_only.isSet()){ isObjectUpdated = true; break;}
    
        if(default_transaction_isolation.isSet()){ isObjectUpdated = true; break;}
    
        if(default_catalog.isSet()){ isObjectUpdated = true; break;}
    
        if(max_active.isSet()){ isObjectUpdated = true; break;}
    
        if(max_idle.isSet()){ isObjectUpdated = true; break;}
    
        if(min_idle.isSet()){ isObjectUpdated = true; break;}
    
        if(initial_size.isSet()){ isObjectUpdated = true; break;}
    
        if(max_wait.isSet()){ isObjectUpdated = true; break;}
    
        if(max_age.isSet()){ isObjectUpdated = true; break;}
    
        if(test_on_borrow.isSet()){ isObjectUpdated = true; break;}
    
        if(test_on_return.isSet()){ isObjectUpdated = true; break;}
    
        if(test_while_idle.isSet()){ isObjectUpdated = true; break;}
    
        if(validation_query.isSet()){ isObjectUpdated = true; break;}
    
        if(validation_query_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(time_between_eviction_runs_millis.isSet()){ isObjectUpdated = true; break;}
    
        if(min_evictable_idle_time_millis.isSet()){ isObjectUpdated = true; break;}
    
        if(connection_properties.isSet()){ isObjectUpdated = true; break;}
    
        if(init_sql.isSet()){ isObjectUpdated = true; break;}
    
        if(jdbc_interceptors.isSet()){ isObjectUpdated = true; break;}
    
        if(validation_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(log_validation_errors.isSet()){ isObjectUpdated = true; break;}
    
        if(datasource_svc_properties.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

