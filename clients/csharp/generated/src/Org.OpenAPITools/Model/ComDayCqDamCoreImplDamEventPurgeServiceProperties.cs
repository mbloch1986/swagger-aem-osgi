/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqDamCoreImplDamEventPurgeServiceProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreImplDamEventPurgeServiceProperties :  IEquatable<ComDayCqDamCoreImplDamEventPurgeServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqDamCoreImplDamEventPurgeServiceProperties" /> class.
        /// </summary>
        /// <param name="schedulerExpression">schedulerExpression.</param>
        /// <param name="maxSavedActivities">maxSavedActivities.</param>
        /// <param name="saveInterval">saveInterval.</param>
        /// <param name="enableActivityPurge">enableActivityPurge.</param>
        /// <param name="eventTypes">eventTypes.</param>
        public ComDayCqDamCoreImplDamEventPurgeServiceProperties(ConfigNodePropertyString schedulerExpression = default(ConfigNodePropertyString), ConfigNodePropertyInteger maxSavedActivities = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger saveInterval = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean enableActivityPurge = default(ConfigNodePropertyBoolean), ConfigNodePropertyDropDown eventTypes = default(ConfigNodePropertyDropDown))
        {
            this.SchedulerExpression = schedulerExpression;
            this.MaxSavedActivities = maxSavedActivities;
            this.SaveInterval = saveInterval;
            this.EnableActivityPurge = enableActivityPurge;
            this.EventTypes = eventTypes;
        }
        
        /// <summary>
        /// Gets or Sets SchedulerExpression
        /// </summary>
        [DataMember(Name="scheduler.expression", EmitDefaultValue=false)]
        public ConfigNodePropertyString SchedulerExpression { get; set; }

        /// <summary>
        /// Gets or Sets MaxSavedActivities
        /// </summary>
        [DataMember(Name="maxSavedActivities", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxSavedActivities { get; set; }

        /// <summary>
        /// Gets or Sets SaveInterval
        /// </summary>
        [DataMember(Name="saveInterval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SaveInterval { get; set; }

        /// <summary>
        /// Gets or Sets EnableActivityPurge
        /// </summary>
        [DataMember(Name="enableActivityPurge", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableActivityPurge { get; set; }

        /// <summary>
        /// Gets or Sets EventTypes
        /// </summary>
        [DataMember(Name="eventTypes", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown EventTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreImplDamEventPurgeServiceProperties {\n");
            sb.Append("  SchedulerExpression: ").Append(SchedulerExpression).Append("\n");
            sb.Append("  MaxSavedActivities: ").Append(MaxSavedActivities).Append("\n");
            sb.Append("  SaveInterval: ").Append(SaveInterval).Append("\n");
            sb.Append("  EnableActivityPurge: ").Append(EnableActivityPurge).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqDamCoreImplDamEventPurgeServiceProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreImplDamEventPurgeServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqDamCoreImplDamEventPurgeServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreImplDamEventPurgeServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SchedulerExpression == input.SchedulerExpression ||
                    (this.SchedulerExpression != null &&
                    this.SchedulerExpression.Equals(input.SchedulerExpression))
                ) && 
                (
                    this.MaxSavedActivities == input.MaxSavedActivities ||
                    (this.MaxSavedActivities != null &&
                    this.MaxSavedActivities.Equals(input.MaxSavedActivities))
                ) && 
                (
                    this.SaveInterval == input.SaveInterval ||
                    (this.SaveInterval != null &&
                    this.SaveInterval.Equals(input.SaveInterval))
                ) && 
                (
                    this.EnableActivityPurge == input.EnableActivityPurge ||
                    (this.EnableActivityPurge != null &&
                    this.EnableActivityPurge.Equals(input.EnableActivityPurge))
                ) && 
                (
                    this.EventTypes == input.EventTypes ||
                    (this.EventTypes != null &&
                    this.EventTypes.Equals(input.EventTypes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchedulerExpression != null)
                    hashCode = hashCode * 59 + this.SchedulerExpression.GetHashCode();
                if (this.MaxSavedActivities != null)
                    hashCode = hashCode * 59 + this.MaxSavedActivities.GetHashCode();
                if (this.SaveInterval != null)
                    hashCode = hashCode * 59 + this.SaveInterval.GetHashCode();
                if (this.EnableActivityPurge != null)
                    hashCode = hashCode * 59 + this.EnableActivityPurge.GetHashCode();
                if (this.EventTypes != null)
                    hashCode = hashCode * 59 + this.EventTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
