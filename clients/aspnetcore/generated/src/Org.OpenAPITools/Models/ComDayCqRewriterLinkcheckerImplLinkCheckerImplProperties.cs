/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties : IEquatable<ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties>
    { 
        /// <summary>
        /// Gets or Sets SchedulerPeriod
        /// </summary>
        [DataMember(Name="scheduler.period")]
        public ConfigNodePropertyInteger SchedulerPeriod { get; set; }

        /// <summary>
        /// Gets or Sets SchedulerConcurrent
        /// </summary>
        [DataMember(Name="scheduler.concurrent")]
        public ConfigNodePropertyBoolean SchedulerConcurrent { get; set; }

        /// <summary>
        /// Gets or Sets ServiceBadLinkToleranceInterval
        /// </summary>
        [DataMember(Name="service.bad_link_tolerance_interval")]
        public ConfigNodePropertyInteger ServiceBadLinkToleranceInterval { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCheckOverridePatterns
        /// </summary>
        [DataMember(Name="service.check_override_patterns")]
        public ConfigNodePropertyArray ServiceCheckOverridePatterns { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCacheBrokenInternalLinks
        /// </summary>
        [DataMember(Name="service.cache_broken_internal_links")]
        public ConfigNodePropertyBoolean ServiceCacheBrokenInternalLinks { get; set; }

        /// <summary>
        /// Gets or Sets ServiceSpecialLinkPrefix
        /// </summary>
        [DataMember(Name="service.special_link_prefix")]
        public ConfigNodePropertyArray ServiceSpecialLinkPrefix { get; set; }

        /// <summary>
        /// Gets or Sets ServiceSpecialLinkPatterns
        /// </summary>
        [DataMember(Name="service.special_link_patterns")]
        public ConfigNodePropertyArray ServiceSpecialLinkPatterns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {\n");
            sb.Append("  SchedulerPeriod: ").Append(SchedulerPeriod).Append("\n");
            sb.Append("  SchedulerConcurrent: ").Append(SchedulerConcurrent).Append("\n");
            sb.Append("  ServiceBadLinkToleranceInterval: ").Append(ServiceBadLinkToleranceInterval).Append("\n");
            sb.Append("  ServiceCheckOverridePatterns: ").Append(ServiceCheckOverridePatterns).Append("\n");
            sb.Append("  ServiceCacheBrokenInternalLinks: ").Append(ServiceCacheBrokenInternalLinks).Append("\n");
            sb.Append("  ServiceSpecialLinkPrefix: ").Append(ServiceSpecialLinkPrefix).Append("\n");
            sb.Append("  ServiceSpecialLinkPatterns: ").Append(ServiceSpecialLinkPatterns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SchedulerPeriod == other.SchedulerPeriod ||
                    SchedulerPeriod != null &&
                    SchedulerPeriod.Equals(other.SchedulerPeriod)
                ) && 
                (
                    SchedulerConcurrent == other.SchedulerConcurrent ||
                    SchedulerConcurrent != null &&
                    SchedulerConcurrent.Equals(other.SchedulerConcurrent)
                ) && 
                (
                    ServiceBadLinkToleranceInterval == other.ServiceBadLinkToleranceInterval ||
                    ServiceBadLinkToleranceInterval != null &&
                    ServiceBadLinkToleranceInterval.Equals(other.ServiceBadLinkToleranceInterval)
                ) && 
                (
                    ServiceCheckOverridePatterns == other.ServiceCheckOverridePatterns ||
                    ServiceCheckOverridePatterns != null &&
                    ServiceCheckOverridePatterns.Equals(other.ServiceCheckOverridePatterns)
                ) && 
                (
                    ServiceCacheBrokenInternalLinks == other.ServiceCacheBrokenInternalLinks ||
                    ServiceCacheBrokenInternalLinks != null &&
                    ServiceCacheBrokenInternalLinks.Equals(other.ServiceCacheBrokenInternalLinks)
                ) && 
                (
                    ServiceSpecialLinkPrefix == other.ServiceSpecialLinkPrefix ||
                    ServiceSpecialLinkPrefix != null &&
                    ServiceSpecialLinkPrefix.Equals(other.ServiceSpecialLinkPrefix)
                ) && 
                (
                    ServiceSpecialLinkPatterns == other.ServiceSpecialLinkPatterns ||
                    ServiceSpecialLinkPatterns != null &&
                    ServiceSpecialLinkPatterns.Equals(other.ServiceSpecialLinkPatterns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SchedulerPeriod != null)
                    hashCode = hashCode * 59 + SchedulerPeriod.GetHashCode();
                    if (SchedulerConcurrent != null)
                    hashCode = hashCode * 59 + SchedulerConcurrent.GetHashCode();
                    if (ServiceBadLinkToleranceInterval != null)
                    hashCode = hashCode * 59 + ServiceBadLinkToleranceInterval.GetHashCode();
                    if (ServiceCheckOverridePatterns != null)
                    hashCode = hashCode * 59 + ServiceCheckOverridePatterns.GetHashCode();
                    if (ServiceCacheBrokenInternalLinks != null)
                    hashCode = hashCode * 59 + ServiceCacheBrokenInternalLinks.GetHashCode();
                    if (ServiceSpecialLinkPrefix != null)
                    hashCode = hashCode * 59 + ServiceSpecialLinkPrefix.GetHashCode();
                    if (ServiceSpecialLinkPatterns != null)
                    hashCode = hashCode * 59 + ServiceSpecialLinkPatterns.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties left, ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties left, ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
