/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqReportingImplCacheCacheImplProperties {
  #[serde(rename = "repcache.enable")]
  repcache_enable: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "repcache.ttl")]
  repcache_ttl: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "repcache.max")]
  repcache_max: Option<::models::ConfigNodePropertyInteger>
}

impl ComDayCqReportingImplCacheCacheImplProperties {
  pub fn new() -> ComDayCqReportingImplCacheCacheImplProperties {
    ComDayCqReportingImplCacheCacheImplProperties {
      repcache_enable: None,
      repcache_ttl: None,
      repcache_max: None
    }
  }

  pub fn set_repcache_enable(&mut self, repcache_enable: ::models::ConfigNodePropertyBoolean) {
    self.repcache_enable = Some(repcache_enable);
  }

  pub fn with_repcache_enable(mut self, repcache_enable: ::models::ConfigNodePropertyBoolean) -> ComDayCqReportingImplCacheCacheImplProperties {
    self.repcache_enable = Some(repcache_enable);
    self
  }

  pub fn repcache_enable(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.repcache_enable.as_ref()
  }

  pub fn reset_repcache_enable(&mut self) {
    self.repcache_enable = None;
  }

  pub fn set_repcache_ttl(&mut self, repcache_ttl: ::models::ConfigNodePropertyInteger) {
    self.repcache_ttl = Some(repcache_ttl);
  }

  pub fn with_repcache_ttl(mut self, repcache_ttl: ::models::ConfigNodePropertyInteger) -> ComDayCqReportingImplCacheCacheImplProperties {
    self.repcache_ttl = Some(repcache_ttl);
    self
  }

  pub fn repcache_ttl(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.repcache_ttl.as_ref()
  }

  pub fn reset_repcache_ttl(&mut self) {
    self.repcache_ttl = None;
  }

  pub fn set_repcache_max(&mut self, repcache_max: ::models::ConfigNodePropertyInteger) {
    self.repcache_max = Some(repcache_max);
  }

  pub fn with_repcache_max(mut self, repcache_max: ::models::ConfigNodePropertyInteger) -> ComDayCqReportingImplCacheCacheImplProperties {
    self.repcache_max = Some(repcache_max);
    self
  }

  pub fn repcache_max(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.repcache_max.as_ref()
  }

  pub fn reset_repcache_max(&mut self) {
    self.repcache_max = None;
  }

}



