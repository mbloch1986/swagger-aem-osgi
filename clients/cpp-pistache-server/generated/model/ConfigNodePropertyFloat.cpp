/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConfigNodePropertyFloat.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ConfigNodePropertyFloat::ConfigNodePropertyFloat()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Optional = false;
    m_OptionalIsSet = false;
    m_Is_set = false;
    m_Is_setIsSet = false;
    m_Type = 0;
    m_TypeIsSet = false;
    m_Value = 0.0;
    m_ValueIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    
}

ConfigNodePropertyFloat::~ConfigNodePropertyFloat()
{
}

void ConfigNodePropertyFloat::validate()
{
    // TODO: implement validation
}

nlohmann::json ConfigNodePropertyFloat::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_OptionalIsSet)
    {
        val["optional"] = m_Optional;
    }
    if(m_Is_setIsSet)
    {
        val["is_set"] = m_Is_set;
    }
    if(m_TypeIsSet)
    {
        val["type"] = m_Type;
    }
    if(m_ValueIsSet)
    {
        val["value"] = m_Value;
    }
    if(m_DescriptionIsSet)
    {
        val["description"] = ModelBase::toJson(m_Description);
    }
    

    return val;
}

void ConfigNodePropertyFloat::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        setName(val.at("name"));
    }
    if(val.find("optional") != val.end())
    {
        setOptional(val.at("optional"));
    }
    if(val.find("is_set") != val.end())
    {
        setIsSet(val.at("is_set"));
    }
    if(val.find("type") != val.end())
    {
        setType(val.at("type"));
    }
    if(val.find("value") != val.end())
    {
        setValue(val.at("value"));
    }
    if(val.find("description") != val.end())
    {
        setDescription(val.at("description"));
    }
    
}


std::string ConfigNodePropertyFloat::getName() const
{
    return m_Name;
}
void ConfigNodePropertyFloat::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ConfigNodePropertyFloat::nameIsSet() const
{
    return m_NameIsSet;
}
void ConfigNodePropertyFloat::unsetName()
{
    m_NameIsSet = false;
}
bool ConfigNodePropertyFloat::isOptional() const
{
    return m_Optional;
}
void ConfigNodePropertyFloat::setOptional(bool const value)
{
    m_Optional = value;
    m_OptionalIsSet = true;
}
bool ConfigNodePropertyFloat::optionalIsSet() const
{
    return m_OptionalIsSet;
}
void ConfigNodePropertyFloat::unsetOptional()
{
    m_OptionalIsSet = false;
}
bool ConfigNodePropertyFloat::isIsSet() const
{
    return m_Is_set;
}
void ConfigNodePropertyFloat::setIsSet(bool const value)
{
    m_Is_set = value;
    m_Is_setIsSet = true;
}
bool ConfigNodePropertyFloat::isSetIsSet() const
{
    return m_Is_setIsSet;
}
void ConfigNodePropertyFloat::unsetIs_set()
{
    m_Is_setIsSet = false;
}
int32_t ConfigNodePropertyFloat::getType() const
{
    return m_Type;
}
void ConfigNodePropertyFloat::setType(int32_t const value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool ConfigNodePropertyFloat::typeIsSet() const
{
    return m_TypeIsSet;
}
void ConfigNodePropertyFloat::unsetType()
{
    m_TypeIsSet = false;
}
double ConfigNodePropertyFloat::getValue() const
{
    return m_Value;
}
void ConfigNodePropertyFloat::setValue(double const value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool ConfigNodePropertyFloat::valueIsSet() const
{
    return m_ValueIsSet;
}
void ConfigNodePropertyFloat::unsetValue()
{
    m_ValueIsSet = false;
}
std::string ConfigNodePropertyFloat::getDescription() const
{
    return m_Description;
}
void ConfigNodePropertyFloat::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool ConfigNodePropertyFloat::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void ConfigNodePropertyFloat::unsetDescription()
{
    m_DescriptionIsSet = false;
}

}
}
}
}

