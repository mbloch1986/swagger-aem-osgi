/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties()
{
    m_Repository_homeIsSet = false;
    m_Tarmk_modeIsSet = false;
    m_Tarmk_sizeIsSet = false;
    m_SegmentCache_sizeIsSet = false;
    m_StringCache_sizeIsSet = false;
    m_TemplateCache_sizeIsSet = false;
    m_StringDeduplicationCache_sizeIsSet = false;
    m_TemplateDeduplicationCache_sizeIsSet = false;
    m_NodeDeduplicationCache_sizeIsSet = false;
    m_PauseCompactionIsSet = false;
    m_Compaction_retryCountIsSet = false;
    m_Compaction_force_timeoutIsSet = false;
    m_Compaction_sizeDeltaEstimationIsSet = false;
    m_Compaction_disableEstimationIsSet = false;
    m_Compaction_retainedGenerationsIsSet = false;
    m_Compaction_memoryThresholdIsSet = false;
    m_Compaction_progressLogIsSet = false;
    m_StandbyIsSet = false;
    m_CustomBlobStoreIsSet = false;
    m_CustomSegmentStoreIsSet = false;
    m_SplitPersistenceIsSet = false;
    m_Repository_backup_dirIsSet = false;
    m_BlobGcMaxAgeInSecsIsSet = false;
    m_BlobTrackSnapshotIntervalInSecsIsSet = false;
    m_RoleIsSet = false;
    m_RegisterDescriptorsIsSet = false;
    m_DispatchChangesIsSet = false;
    
}

OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::~OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties()
{
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Repository_homeIsSet)
    {
        val["repository.home"] = ModelBase::toJson(m_Repository_home);
    }
    if(m_Tarmk_modeIsSet)
    {
        val["tarmk.mode"] = ModelBase::toJson(m_Tarmk_mode);
    }
    if(m_Tarmk_sizeIsSet)
    {
        val["tarmk.size"] = ModelBase::toJson(m_Tarmk_size);
    }
    if(m_SegmentCache_sizeIsSet)
    {
        val["segmentCache.size"] = ModelBase::toJson(m_SegmentCache_size);
    }
    if(m_StringCache_sizeIsSet)
    {
        val["stringCache.size"] = ModelBase::toJson(m_StringCache_size);
    }
    if(m_TemplateCache_sizeIsSet)
    {
        val["templateCache.size"] = ModelBase::toJson(m_TemplateCache_size);
    }
    if(m_StringDeduplicationCache_sizeIsSet)
    {
        val["stringDeduplicationCache.size"] = ModelBase::toJson(m_StringDeduplicationCache_size);
    }
    if(m_TemplateDeduplicationCache_sizeIsSet)
    {
        val["templateDeduplicationCache.size"] = ModelBase::toJson(m_TemplateDeduplicationCache_size);
    }
    if(m_NodeDeduplicationCache_sizeIsSet)
    {
        val["nodeDeduplicationCache.size"] = ModelBase::toJson(m_NodeDeduplicationCache_size);
    }
    if(m_PauseCompactionIsSet)
    {
        val["pauseCompaction"] = ModelBase::toJson(m_PauseCompaction);
    }
    if(m_Compaction_retryCountIsSet)
    {
        val["compaction.retryCount"] = ModelBase::toJson(m_Compaction_retryCount);
    }
    if(m_Compaction_force_timeoutIsSet)
    {
        val["compaction.force.timeout"] = ModelBase::toJson(m_Compaction_force_timeout);
    }
    if(m_Compaction_sizeDeltaEstimationIsSet)
    {
        val["compaction.sizeDeltaEstimation"] = ModelBase::toJson(m_Compaction_sizeDeltaEstimation);
    }
    if(m_Compaction_disableEstimationIsSet)
    {
        val["compaction.disableEstimation"] = ModelBase::toJson(m_Compaction_disableEstimation);
    }
    if(m_Compaction_retainedGenerationsIsSet)
    {
        val["compaction.retainedGenerations"] = ModelBase::toJson(m_Compaction_retainedGenerations);
    }
    if(m_Compaction_memoryThresholdIsSet)
    {
        val["compaction.memoryThreshold"] = ModelBase::toJson(m_Compaction_memoryThreshold);
    }
    if(m_Compaction_progressLogIsSet)
    {
        val["compaction.progressLog"] = ModelBase::toJson(m_Compaction_progressLog);
    }
    if(m_StandbyIsSet)
    {
        val["standby"] = ModelBase::toJson(m_Standby);
    }
    if(m_CustomBlobStoreIsSet)
    {
        val["customBlobStore"] = ModelBase::toJson(m_CustomBlobStore);
    }
    if(m_CustomSegmentStoreIsSet)
    {
        val["customSegmentStore"] = ModelBase::toJson(m_CustomSegmentStore);
    }
    if(m_SplitPersistenceIsSet)
    {
        val["splitPersistence"] = ModelBase::toJson(m_SplitPersistence);
    }
    if(m_Repository_backup_dirIsSet)
    {
        val["repository.backup.dir"] = ModelBase::toJson(m_Repository_backup_dir);
    }
    if(m_BlobGcMaxAgeInSecsIsSet)
    {
        val["blobGcMaxAgeInSecs"] = ModelBase::toJson(m_BlobGcMaxAgeInSecs);
    }
    if(m_BlobTrackSnapshotIntervalInSecsIsSet)
    {
        val["blobTrackSnapshotIntervalInSecs"] = ModelBase::toJson(m_BlobTrackSnapshotIntervalInSecs);
    }
    if(m_RoleIsSet)
    {
        val["role"] = ModelBase::toJson(m_Role);
    }
    if(m_RegisterDescriptorsIsSet)
    {
        val["registerDescriptors"] = ModelBase::toJson(m_RegisterDescriptors);
    }
    if(m_DispatchChangesIsSet)
    {
        val["dispatchChanges"] = ModelBase::toJson(m_DispatchChanges);
    }
    

    return val;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::fromJson(nlohmann::json& val)
{
    if(val.find("repository.home") != val.end())
    {
        if(!val["repository.home"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["repository.home"]);
            setRepositoryHome( newItem );
        }
        
    }
    if(val.find("tarmk.mode") != val.end())
    {
        if(!val["tarmk.mode"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["tarmk.mode"]);
            setTarmkMode( newItem );
        }
        
    }
    if(val.find("tarmk.size") != val.end())
    {
        if(!val["tarmk.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["tarmk.size"]);
            setTarmkSize( newItem );
        }
        
    }
    if(val.find("segmentCache.size") != val.end())
    {
        if(!val["segmentCache.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["segmentCache.size"]);
            setSegmentCacheSize( newItem );
        }
        
    }
    if(val.find("stringCache.size") != val.end())
    {
        if(!val["stringCache.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["stringCache.size"]);
            setStringCacheSize( newItem );
        }
        
    }
    if(val.find("templateCache.size") != val.end())
    {
        if(!val["templateCache.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["templateCache.size"]);
            setTemplateCacheSize( newItem );
        }
        
    }
    if(val.find("stringDeduplicationCache.size") != val.end())
    {
        if(!val["stringDeduplicationCache.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["stringDeduplicationCache.size"]);
            setStringDeduplicationCacheSize( newItem );
        }
        
    }
    if(val.find("templateDeduplicationCache.size") != val.end())
    {
        if(!val["templateDeduplicationCache.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["templateDeduplicationCache.size"]);
            setTemplateDeduplicationCacheSize( newItem );
        }
        
    }
    if(val.find("nodeDeduplicationCache.size") != val.end())
    {
        if(!val["nodeDeduplicationCache.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["nodeDeduplicationCache.size"]);
            setNodeDeduplicationCacheSize( newItem );
        }
        
    }
    if(val.find("pauseCompaction") != val.end())
    {
        if(!val["pauseCompaction"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["pauseCompaction"]);
            setPauseCompaction( newItem );
        }
        
    }
    if(val.find("compaction.retryCount") != val.end())
    {
        if(!val["compaction.retryCount"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["compaction.retryCount"]);
            setCompactionRetryCount( newItem );
        }
        
    }
    if(val.find("compaction.force.timeout") != val.end())
    {
        if(!val["compaction.force.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["compaction.force.timeout"]);
            setCompactionForceTimeout( newItem );
        }
        
    }
    if(val.find("compaction.sizeDeltaEstimation") != val.end())
    {
        if(!val["compaction.sizeDeltaEstimation"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["compaction.sizeDeltaEstimation"]);
            setCompactionSizeDeltaEstimation( newItem );
        }
        
    }
    if(val.find("compaction.disableEstimation") != val.end())
    {
        if(!val["compaction.disableEstimation"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["compaction.disableEstimation"]);
            setCompactionDisableEstimation( newItem );
        }
        
    }
    if(val.find("compaction.retainedGenerations") != val.end())
    {
        if(!val["compaction.retainedGenerations"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["compaction.retainedGenerations"]);
            setCompactionRetainedGenerations( newItem );
        }
        
    }
    if(val.find("compaction.memoryThreshold") != val.end())
    {
        if(!val["compaction.memoryThreshold"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["compaction.memoryThreshold"]);
            setCompactionMemoryThreshold( newItem );
        }
        
    }
    if(val.find("compaction.progressLog") != val.end())
    {
        if(!val["compaction.progressLog"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["compaction.progressLog"]);
            setCompactionProgressLog( newItem );
        }
        
    }
    if(val.find("standby") != val.end())
    {
        if(!val["standby"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["standby"]);
            setStandby( newItem );
        }
        
    }
    if(val.find("customBlobStore") != val.end())
    {
        if(!val["customBlobStore"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["customBlobStore"]);
            setCustomBlobStore( newItem );
        }
        
    }
    if(val.find("customSegmentStore") != val.end())
    {
        if(!val["customSegmentStore"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["customSegmentStore"]);
            setCustomSegmentStore( newItem );
        }
        
    }
    if(val.find("splitPersistence") != val.end())
    {
        if(!val["splitPersistence"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["splitPersistence"]);
            setSplitPersistence( newItem );
        }
        
    }
    if(val.find("repository.backup.dir") != val.end())
    {
        if(!val["repository.backup.dir"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["repository.backup.dir"]);
            setRepositoryBackupDir( newItem );
        }
        
    }
    if(val.find("blobGcMaxAgeInSecs") != val.end())
    {
        if(!val["blobGcMaxAgeInSecs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["blobGcMaxAgeInSecs"]);
            setBlobGcMaxAgeInSecs( newItem );
        }
        
    }
    if(val.find("blobTrackSnapshotIntervalInSecs") != val.end())
    {
        if(!val["blobTrackSnapshotIntervalInSecs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["blobTrackSnapshotIntervalInSecs"]);
            setBlobTrackSnapshotIntervalInSecs( newItem );
        }
        
    }
    if(val.find("role") != val.end())
    {
        if(!val["role"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["role"]);
            setRole( newItem );
        }
        
    }
    if(val.find("registerDescriptors") != val.end())
    {
        if(!val["registerDescriptors"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["registerDescriptors"]);
            setRegisterDescriptors( newItem );
        }
        
    }
    if(val.find("dispatchChanges") != val.end())
    {
        if(!val["dispatchChanges"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["dispatchChanges"]);
            setDispatchChanges( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getRepositoryHome() const
{
    return m_Repository_home;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setRepositoryHome(ConfigNodePropertyString const& value)
{
    m_Repository_home = value;
    m_Repository_homeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::repositoryHomeIsSet() const
{
    return m_Repository_homeIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetRepository_home()
{
    m_Repository_homeIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getTarmkMode() const
{
    return m_Tarmk_mode;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setTarmkMode(ConfigNodePropertyString const& value)
{
    m_Tarmk_mode = value;
    m_Tarmk_modeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::tarmkModeIsSet() const
{
    return m_Tarmk_modeIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetTarmk_mode()
{
    m_Tarmk_modeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getTarmkSize() const
{
    return m_Tarmk_size;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setTarmkSize(ConfigNodePropertyInteger const& value)
{
    m_Tarmk_size = value;
    m_Tarmk_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::tarmkSizeIsSet() const
{
    return m_Tarmk_sizeIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetTarmk_size()
{
    m_Tarmk_sizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getSegmentCacheSize() const
{
    return m_SegmentCache_size;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setSegmentCacheSize(ConfigNodePropertyInteger const& value)
{
    m_SegmentCache_size = value;
    m_SegmentCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::segmentCacheSizeIsSet() const
{
    return m_SegmentCache_sizeIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetSegmentCache_size()
{
    m_SegmentCache_sizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getStringCacheSize() const
{
    return m_StringCache_size;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setStringCacheSize(ConfigNodePropertyInteger const& value)
{
    m_StringCache_size = value;
    m_StringCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::stringCacheSizeIsSet() const
{
    return m_StringCache_sizeIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetStringCache_size()
{
    m_StringCache_sizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getTemplateCacheSize() const
{
    return m_TemplateCache_size;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setTemplateCacheSize(ConfigNodePropertyInteger const& value)
{
    m_TemplateCache_size = value;
    m_TemplateCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::templateCacheSizeIsSet() const
{
    return m_TemplateCache_sizeIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetTemplateCache_size()
{
    m_TemplateCache_sizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getStringDeduplicationCacheSize() const
{
    return m_StringDeduplicationCache_size;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setStringDeduplicationCacheSize(ConfigNodePropertyInteger const& value)
{
    m_StringDeduplicationCache_size = value;
    m_StringDeduplicationCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::stringDeduplicationCacheSizeIsSet() const
{
    return m_StringDeduplicationCache_sizeIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetStringDeduplicationCache_size()
{
    m_StringDeduplicationCache_sizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getTemplateDeduplicationCacheSize() const
{
    return m_TemplateDeduplicationCache_size;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setTemplateDeduplicationCacheSize(ConfigNodePropertyInteger const& value)
{
    m_TemplateDeduplicationCache_size = value;
    m_TemplateDeduplicationCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::templateDeduplicationCacheSizeIsSet() const
{
    return m_TemplateDeduplicationCache_sizeIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetTemplateDeduplicationCache_size()
{
    m_TemplateDeduplicationCache_sizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getNodeDeduplicationCacheSize() const
{
    return m_NodeDeduplicationCache_size;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setNodeDeduplicationCacheSize(ConfigNodePropertyInteger const& value)
{
    m_NodeDeduplicationCache_size = value;
    m_NodeDeduplicationCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::nodeDeduplicationCacheSizeIsSet() const
{
    return m_NodeDeduplicationCache_sizeIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetNodeDeduplicationCache_size()
{
    m_NodeDeduplicationCache_sizeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getPauseCompaction() const
{
    return m_PauseCompaction;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setPauseCompaction(ConfigNodePropertyBoolean const& value)
{
    m_PauseCompaction = value;
    m_PauseCompactionIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::pauseCompactionIsSet() const
{
    return m_PauseCompactionIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetPauseCompaction()
{
    m_PauseCompactionIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getCompactionRetryCount() const
{
    return m_Compaction_retryCount;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setCompactionRetryCount(ConfigNodePropertyInteger const& value)
{
    m_Compaction_retryCount = value;
    m_Compaction_retryCountIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::compactionRetryCountIsSet() const
{
    return m_Compaction_retryCountIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetCompaction_retryCount()
{
    m_Compaction_retryCountIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getCompactionForceTimeout() const
{
    return m_Compaction_force_timeout;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setCompactionForceTimeout(ConfigNodePropertyInteger const& value)
{
    m_Compaction_force_timeout = value;
    m_Compaction_force_timeoutIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::compactionForceTimeoutIsSet() const
{
    return m_Compaction_force_timeoutIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetCompaction_force_timeout()
{
    m_Compaction_force_timeoutIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getCompactionSizeDeltaEstimation() const
{
    return m_Compaction_sizeDeltaEstimation;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setCompactionSizeDeltaEstimation(ConfigNodePropertyInteger const& value)
{
    m_Compaction_sizeDeltaEstimation = value;
    m_Compaction_sizeDeltaEstimationIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::compactionSizeDeltaEstimationIsSet() const
{
    return m_Compaction_sizeDeltaEstimationIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetCompaction_sizeDeltaEstimation()
{
    m_Compaction_sizeDeltaEstimationIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getCompactionDisableEstimation() const
{
    return m_Compaction_disableEstimation;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setCompactionDisableEstimation(ConfigNodePropertyBoolean const& value)
{
    m_Compaction_disableEstimation = value;
    m_Compaction_disableEstimationIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::compactionDisableEstimationIsSet() const
{
    return m_Compaction_disableEstimationIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetCompaction_disableEstimation()
{
    m_Compaction_disableEstimationIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getCompactionRetainedGenerations() const
{
    return m_Compaction_retainedGenerations;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setCompactionRetainedGenerations(ConfigNodePropertyInteger const& value)
{
    m_Compaction_retainedGenerations = value;
    m_Compaction_retainedGenerationsIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::compactionRetainedGenerationsIsSet() const
{
    return m_Compaction_retainedGenerationsIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetCompaction_retainedGenerations()
{
    m_Compaction_retainedGenerationsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getCompactionMemoryThreshold() const
{
    return m_Compaction_memoryThreshold;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setCompactionMemoryThreshold(ConfigNodePropertyInteger const& value)
{
    m_Compaction_memoryThreshold = value;
    m_Compaction_memoryThresholdIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::compactionMemoryThresholdIsSet() const
{
    return m_Compaction_memoryThresholdIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetCompaction_memoryThreshold()
{
    m_Compaction_memoryThresholdIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getCompactionProgressLog() const
{
    return m_Compaction_progressLog;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setCompactionProgressLog(ConfigNodePropertyInteger const& value)
{
    m_Compaction_progressLog = value;
    m_Compaction_progressLogIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::compactionProgressLogIsSet() const
{
    return m_Compaction_progressLogIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetCompaction_progressLog()
{
    m_Compaction_progressLogIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getStandby() const
{
    return m_Standby;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setStandby(ConfigNodePropertyBoolean const& value)
{
    m_Standby = value;
    m_StandbyIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::standbyIsSet() const
{
    return m_StandbyIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetStandby()
{
    m_StandbyIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getCustomBlobStore() const
{
    return m_CustomBlobStore;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setCustomBlobStore(ConfigNodePropertyBoolean const& value)
{
    m_CustomBlobStore = value;
    m_CustomBlobStoreIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::customBlobStoreIsSet() const
{
    return m_CustomBlobStoreIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetCustomBlobStore()
{
    m_CustomBlobStoreIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getCustomSegmentStore() const
{
    return m_CustomSegmentStore;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setCustomSegmentStore(ConfigNodePropertyBoolean const& value)
{
    m_CustomSegmentStore = value;
    m_CustomSegmentStoreIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::customSegmentStoreIsSet() const
{
    return m_CustomSegmentStoreIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetCustomSegmentStore()
{
    m_CustomSegmentStoreIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getSplitPersistence() const
{
    return m_SplitPersistence;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setSplitPersistence(ConfigNodePropertyBoolean const& value)
{
    m_SplitPersistence = value;
    m_SplitPersistenceIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::splitPersistenceIsSet() const
{
    return m_SplitPersistenceIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetSplitPersistence()
{
    m_SplitPersistenceIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getRepositoryBackupDir() const
{
    return m_Repository_backup_dir;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setRepositoryBackupDir(ConfigNodePropertyString const& value)
{
    m_Repository_backup_dir = value;
    m_Repository_backup_dirIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::repositoryBackupDirIsSet() const
{
    return m_Repository_backup_dirIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetRepository_backup_dir()
{
    m_Repository_backup_dirIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getBlobGcMaxAgeInSecs() const
{
    return m_BlobGcMaxAgeInSecs;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setBlobGcMaxAgeInSecs(ConfigNodePropertyInteger const& value)
{
    m_BlobGcMaxAgeInSecs = value;
    m_BlobGcMaxAgeInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::blobGcMaxAgeInSecsIsSet() const
{
    return m_BlobGcMaxAgeInSecsIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetBlobGcMaxAgeInSecs()
{
    m_BlobGcMaxAgeInSecsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getBlobTrackSnapshotIntervalInSecs() const
{
    return m_BlobTrackSnapshotIntervalInSecs;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setBlobTrackSnapshotIntervalInSecs(ConfigNodePropertyInteger const& value)
{
    m_BlobTrackSnapshotIntervalInSecs = value;
    m_BlobTrackSnapshotIntervalInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::blobTrackSnapshotIntervalInSecsIsSet() const
{
    return m_BlobTrackSnapshotIntervalInSecsIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetBlobTrackSnapshotIntervalInSecs()
{
    m_BlobTrackSnapshotIntervalInSecsIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getRole() const
{
    return m_Role;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setRole(ConfigNodePropertyString const& value)
{
    m_Role = value;
    m_RoleIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::roleIsSet() const
{
    return m_RoleIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetRole()
{
    m_RoleIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getRegisterDescriptors() const
{
    return m_RegisterDescriptors;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setRegisterDescriptors(ConfigNodePropertyBoolean const& value)
{
    m_RegisterDescriptors = value;
    m_RegisterDescriptorsIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::registerDescriptorsIsSet() const
{
    return m_RegisterDescriptorsIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetRegisterDescriptors()
{
    m_RegisterDescriptorsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::getDispatchChanges() const
{
    return m_DispatchChanges;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::setDispatchChanges(ConfigNodePropertyBoolean const& value)
{
    m_DispatchChanges = value;
    m_DispatchChangesIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::dispatchChangesIsSet() const
{
    return m_DispatchChangesIsSet;
}
void OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties::unsetDispatchChanges()
{
    m_DispatchChangesIsSet = false;
}

}
}
}
}

