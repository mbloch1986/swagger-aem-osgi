<?php
/**
 * OrgApacheSlingTracerInternalLogTracerProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrgApacheSlingTracerInternalLogTracerProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class OrgApacheSlingTracerInternalLogTracerProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("tracerSets")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $tracerSets;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("enabled")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $enabled;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("servletEnabled")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $servletEnabled;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("recordingCacheSizeInMB")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $recordingCacheSizeInMB;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("recordingCacheDurationInSecs")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $recordingCacheDurationInSecs;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("recordingCompressionEnabled")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $recordingCompressionEnabled;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("gzipResponse")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $gzipResponse;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->tracerSets = isset($data['tracerSets']) ? $data['tracerSets'] : null;
        $this->enabled = isset($data['enabled']) ? $data['enabled'] : null;
        $this->servletEnabled = isset($data['servletEnabled']) ? $data['servletEnabled'] : null;
        $this->recordingCacheSizeInMB = isset($data['recordingCacheSizeInMB']) ? $data['recordingCacheSizeInMB'] : null;
        $this->recordingCacheDurationInSecs = isset($data['recordingCacheDurationInSecs']) ? $data['recordingCacheDurationInSecs'] : null;
        $this->recordingCompressionEnabled = isset($data['recordingCompressionEnabled']) ? $data['recordingCompressionEnabled'] : null;
        $this->gzipResponse = isset($data['gzipResponse']) ? $data['gzipResponse'] : null;
    }

    /**
     * Gets tracerSets.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getTracerSets()
    {
        return $this->tracerSets;
    }

    /**
     * Sets tracerSets.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $tracerSets
     *
     * @return $this
     */
    public function setTracerSets(ConfigNodePropertyArray $tracerSets = null)
    {
        $this->tracerSets = $tracerSets;

        return $this;
    }

    /**
     * Gets enabled.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * Sets enabled.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $enabled
     *
     * @return $this
     */
    public function setEnabled(ConfigNodePropertyBoolean $enabled = null)
    {
        $this->enabled = $enabled;

        return $this;
    }

    /**
     * Gets servletEnabled.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getServletEnabled()
    {
        return $this->servletEnabled;
    }

    /**
     * Sets servletEnabled.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $servletEnabled
     *
     * @return $this
     */
    public function setServletEnabled(ConfigNodePropertyBoolean $servletEnabled = null)
    {
        $this->servletEnabled = $servletEnabled;

        return $this;
    }

    /**
     * Gets recordingCacheSizeInMB.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getRecordingCacheSizeInMB()
    {
        return $this->recordingCacheSizeInMB;
    }

    /**
     * Sets recordingCacheSizeInMB.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $recordingCacheSizeInMB
     *
     * @return $this
     */
    public function setRecordingCacheSizeInMB(ConfigNodePropertyInteger $recordingCacheSizeInMB = null)
    {
        $this->recordingCacheSizeInMB = $recordingCacheSizeInMB;

        return $this;
    }

    /**
     * Gets recordingCacheDurationInSecs.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getRecordingCacheDurationInSecs()
    {
        return $this->recordingCacheDurationInSecs;
    }

    /**
     * Sets recordingCacheDurationInSecs.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $recordingCacheDurationInSecs
     *
     * @return $this
     */
    public function setRecordingCacheDurationInSecs(ConfigNodePropertyInteger $recordingCacheDurationInSecs = null)
    {
        $this->recordingCacheDurationInSecs = $recordingCacheDurationInSecs;

        return $this;
    }

    /**
     * Gets recordingCompressionEnabled.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getRecordingCompressionEnabled()
    {
        return $this->recordingCompressionEnabled;
    }

    /**
     * Sets recordingCompressionEnabled.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $recordingCompressionEnabled
     *
     * @return $this
     */
    public function setRecordingCompressionEnabled(ConfigNodePropertyBoolean $recordingCompressionEnabled = null)
    {
        $this->recordingCompressionEnabled = $recordingCompressionEnabled;

        return $this;
    }

    /**
     * Gets gzipResponse.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getGzipResponse()
    {
        return $this->gzipResponse;
    }

    /**
     * Sets gzipResponse.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $gzipResponse
     *
     * @return $this
     */
    public function setGzipResponse(ConfigNodePropertyBoolean $gzipResponse = null)
    {
        $this->gzipResponse = $gzipResponse;

        return $this;
    }
}


