/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties()
{
    m_Solr_http_urlIsSet = false;
    m_Solr_zk_hostIsSet = false;
    m_Solr_collectionIsSet = false;
    m_Solr_socket_timeoutIsSet = false;
    m_Solr_connection_timeoutIsSet = false;
    m_Solr_shards_noIsSet = false;
    m_Solr_replication_factorIsSet = false;
    m_Solr_conf_dirIsSet = false;
}

OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::~OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties()
{
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Solr_http_urlIsSet)
    {
        val[utility::conversions::to_string_t("solr.http.url")] = ModelBase::toJson(m_Solr_http_url);
    }
    if(m_Solr_zk_hostIsSet)
    {
        val[utility::conversions::to_string_t("solr.zk.host")] = ModelBase::toJson(m_Solr_zk_host);
    }
    if(m_Solr_collectionIsSet)
    {
        val[utility::conversions::to_string_t("solr.collection")] = ModelBase::toJson(m_Solr_collection);
    }
    if(m_Solr_socket_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("solr.socket.timeout")] = ModelBase::toJson(m_Solr_socket_timeout);
    }
    if(m_Solr_connection_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("solr.connection.timeout")] = ModelBase::toJson(m_Solr_connection_timeout);
    }
    if(m_Solr_shards_noIsSet)
    {
        val[utility::conversions::to_string_t("solr.shards.no")] = ModelBase::toJson(m_Solr_shards_no);
    }
    if(m_Solr_replication_factorIsSet)
    {
        val[utility::conversions::to_string_t("solr.replication.factor")] = ModelBase::toJson(m_Solr_replication_factor);
    }
    if(m_Solr_conf_dirIsSet)
    {
        val[utility::conversions::to_string_t("solr.conf.dir")] = ModelBase::toJson(m_Solr_conf_dir);
    }

    return val;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("solr.http.url")))
    {
        if(!val[utility::conversions::to_string_t("solr.http.url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("solr.http.url")]);
            setSolrHttpUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("solr.zk.host")))
    {
        if(!val[utility::conversions::to_string_t("solr.zk.host")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("solr.zk.host")]);
            setSolrZkHost( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("solr.collection")))
    {
        if(!val[utility::conversions::to_string_t("solr.collection")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("solr.collection")]);
            setSolrCollection( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("solr.socket.timeout")))
    {
        if(!val[utility::conversions::to_string_t("solr.socket.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("solr.socket.timeout")]);
            setSolrSocketTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("solr.connection.timeout")))
    {
        if(!val[utility::conversions::to_string_t("solr.connection.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("solr.connection.timeout")]);
            setSolrConnectionTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("solr.shards.no")))
    {
        if(!val[utility::conversions::to_string_t("solr.shards.no")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("solr.shards.no")]);
            setSolrShardsNo( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("solr.replication.factor")))
    {
        if(!val[utility::conversions::to_string_t("solr.replication.factor")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("solr.replication.factor")]);
            setSolrReplicationFactor( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("solr.conf.dir")))
    {
        if(!val[utility::conversions::to_string_t("solr.conf.dir")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("solr.conf.dir")]);
            setSolrConfDir( newItem );
        }
    }
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Solr_http_urlIsSet)
    {
        if (m_Solr_http_url.get())
        {
            m_Solr_http_url->toMultipart(multipart, utility::conversions::to_string_t("solr.http.url."));
        }
    }
    if(m_Solr_zk_hostIsSet)
    {
        if (m_Solr_zk_host.get())
        {
            m_Solr_zk_host->toMultipart(multipart, utility::conversions::to_string_t("solr.zk.host."));
        }
    }
    if(m_Solr_collectionIsSet)
    {
        if (m_Solr_collection.get())
        {
            m_Solr_collection->toMultipart(multipart, utility::conversions::to_string_t("solr.collection."));
        }
    }
    if(m_Solr_socket_timeoutIsSet)
    {
        if (m_Solr_socket_timeout.get())
        {
            m_Solr_socket_timeout->toMultipart(multipart, utility::conversions::to_string_t("solr.socket.timeout."));
        }
    }
    if(m_Solr_connection_timeoutIsSet)
    {
        if (m_Solr_connection_timeout.get())
        {
            m_Solr_connection_timeout->toMultipart(multipart, utility::conversions::to_string_t("solr.connection.timeout."));
        }
    }
    if(m_Solr_shards_noIsSet)
    {
        if (m_Solr_shards_no.get())
        {
            m_Solr_shards_no->toMultipart(multipart, utility::conversions::to_string_t("solr.shards.no."));
        }
    }
    if(m_Solr_replication_factorIsSet)
    {
        if (m_Solr_replication_factor.get())
        {
            m_Solr_replication_factor->toMultipart(multipart, utility::conversions::to_string_t("solr.replication.factor."));
        }
    }
    if(m_Solr_conf_dirIsSet)
    {
        if (m_Solr_conf_dir.get())
        {
            m_Solr_conf_dir->toMultipart(multipart, utility::conversions::to_string_t("solr.conf.dir."));
        }
    }
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("solr.http.url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("solr.http.url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("solr.http.url."));
            setSolrHttpUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("solr.zk.host")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("solr.zk.host")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("solr.zk.host."));
            setSolrZkHost( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("solr.collection")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("solr.collection")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("solr.collection."));
            setSolrCollection( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("solr.socket.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("solr.socket.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("solr.socket.timeout."));
            setSolrSocketTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("solr.connection.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("solr.connection.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("solr.connection.timeout."));
            setSolrConnectionTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("solr.shards.no")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("solr.shards.no")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("solr.shards.no."));
            setSolrShardsNo( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("solr.replication.factor")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("solr.replication.factor")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("solr.replication.factor."));
            setSolrReplicationFactor( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("solr.conf.dir")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("solr.conf.dir")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("solr.conf.dir."));
            setSolrConfDir( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrHttpUrl() const
{
    return m_Solr_http_url;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrHttpUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Solr_http_url = value;
    m_Solr_http_urlIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrHttpUrlIsSet() const
{
    return m_Solr_http_urlIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_http_url()
{
    m_Solr_http_urlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrZkHost() const
{
    return m_Solr_zk_host;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrZkHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Solr_zk_host = value;
    m_Solr_zk_hostIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrZkHostIsSet() const
{
    return m_Solr_zk_hostIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_zk_host()
{
    m_Solr_zk_hostIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrCollection() const
{
    return m_Solr_collection;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrCollection(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Solr_collection = value;
    m_Solr_collectionIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrCollectionIsSet() const
{
    return m_Solr_collectionIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_collection()
{
    m_Solr_collectionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrSocketTimeout() const
{
    return m_Solr_socket_timeout;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrSocketTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Solr_socket_timeout = value;
    m_Solr_socket_timeoutIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrSocketTimeoutIsSet() const
{
    return m_Solr_socket_timeoutIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_socket_timeout()
{
    m_Solr_socket_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrConnectionTimeout() const
{
    return m_Solr_connection_timeout;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrConnectionTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Solr_connection_timeout = value;
    m_Solr_connection_timeoutIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrConnectionTimeoutIsSet() const
{
    return m_Solr_connection_timeoutIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_connection_timeout()
{
    m_Solr_connection_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrShardsNo() const
{
    return m_Solr_shards_no;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrShardsNo(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Solr_shards_no = value;
    m_Solr_shards_noIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrShardsNoIsSet() const
{
    return m_Solr_shards_noIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_shards_no()
{
    m_Solr_shards_noIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrReplicationFactor() const
{
    return m_Solr_replication_factor;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrReplicationFactor(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Solr_replication_factor = value;
    m_Solr_replication_factorIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrReplicationFactorIsSet() const
{
    return m_Solr_replication_factorIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_replication_factor()
{
    m_Solr_replication_factorIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrConfDir() const
{
    return m_Solr_conf_dir;
}


void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrConfDir(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Solr_conf_dir = value;
    m_Solr_conf_dirIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrConfDirIsSet() const
{
    return m_Solr_conf_dirIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_conf_dir()
{
    m_Solr_conf_dirIsSet = false;
}

}
}
}
}

