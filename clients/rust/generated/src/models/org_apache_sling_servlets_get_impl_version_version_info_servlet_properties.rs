/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties {
  #[serde(rename = "sling.servlet.selectors")]
  sling_servlet_selectors: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "ecmaSuport")]
  ecma_suport: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties {
  pub fn new() -> OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties {
    OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties {
      sling_servlet_selectors: None,
      ecma_suport: None
    }
  }

  pub fn set_sling_servlet_selectors(&mut self, sling_servlet_selectors: ::models::ConfigNodePropertyArray) {
    self.sling_servlet_selectors = Some(sling_servlet_selectors);
  }

  pub fn with_sling_servlet_selectors(mut self, sling_servlet_selectors: ::models::ConfigNodePropertyArray) -> OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties {
    self.sling_servlet_selectors = Some(sling_servlet_selectors);
    self
  }

  pub fn sling_servlet_selectors(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.sling_servlet_selectors.as_ref()
  }

  pub fn reset_sling_servlet_selectors(&mut self) {
    self.sling_servlet_selectors = None;
  }

  pub fn set_ecma_suport(&mut self, ecma_suport: ::models::ConfigNodePropertyBoolean) {
    self.ecma_suport = Some(ecma_suport);
  }

  pub fn with_ecma_suport(mut self, ecma_suport: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties {
    self.ecma_suport = Some(ecma_suport);
    self
  }

  pub fn ecma_suport(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.ecma_suport.as_ref()
  }

  pub fn reset_ecma_suport(&mut self) {
    self.ecma_suport = None;
  }

}



