/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyArray;
import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
  
  @SerializedName("resource.resolver.searchpath")
  private ConfigNodePropertyArray resourceResolverSearchpath = null;
  @SerializedName("resource.resolver.manglenamespaces")
  private ConfigNodePropertyBoolean resourceResolverManglenamespaces = null;
  @SerializedName("resource.resolver.allowDirect")
  private ConfigNodePropertyBoolean resourceResolverAllowDirect = null;
  @SerializedName("resource.resolver.required.providers")
  private ConfigNodePropertyArray resourceResolverRequiredProviders = null;
  @SerializedName("resource.resolver.required.providernames")
  private ConfigNodePropertyArray resourceResolverRequiredProvidernames = null;
  @SerializedName("resource.resolver.virtual")
  private ConfigNodePropertyArray resourceResolverVirtual = null;
  @SerializedName("resource.resolver.mapping")
  private ConfigNodePropertyArray resourceResolverMapping = null;
  @SerializedName("resource.resolver.map.location")
  private ConfigNodePropertyString resourceResolverMapLocation = null;
  @SerializedName("resource.resolver.map.observation")
  private ConfigNodePropertyArray resourceResolverMapObservation = null;
  @SerializedName("resource.resolver.default.vanity.redirect.status")
  private ConfigNodePropertyInteger resourceResolverDefaultVanityRedirectStatus = null;
  @SerializedName("resource.resolver.enable.vanitypath")
  private ConfigNodePropertyBoolean resourceResolverEnableVanitypath = null;
  @SerializedName("resource.resolver.vanitypath.maxEntries")
  private ConfigNodePropertyInteger resourceResolverVanitypathMaxEntries = null;
  @SerializedName("resource.resolver.vanitypath.maxEntries.startup")
  private ConfigNodePropertyBoolean resourceResolverVanitypathMaxEntriesStartup = null;
  @SerializedName("resource.resolver.vanitypath.bloomfilter.maxBytes")
  private ConfigNodePropertyInteger resourceResolverVanitypathBloomfilterMaxBytes = null;
  @SerializedName("resource.resolver.optimize.alias.resolution")
  private ConfigNodePropertyBoolean resourceResolverOptimizeAliasResolution = null;
  @SerializedName("resource.resolver.vanitypath.whitelist")
  private ConfigNodePropertyArray resourceResolverVanitypathWhitelist = null;
  @SerializedName("resource.resolver.vanitypath.blacklist")
  private ConfigNodePropertyArray resourceResolverVanitypathBlacklist = null;
  @SerializedName("resource.resolver.vanity.precedence")
  private ConfigNodePropertyBoolean resourceResolverVanityPrecedence = null;
  @SerializedName("resource.resolver.providerhandling.paranoid")
  private ConfigNodePropertyBoolean resourceResolverProviderhandlingParanoid = null;
  @SerializedName("resource.resolver.log.closing")
  private ConfigNodePropertyBoolean resourceResolverLogClosing = null;
  @SerializedName("resource.resolver.log.unclosed")
  private ConfigNodePropertyBoolean resourceResolverLogUnclosed = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getResourceResolverSearchpath() {
    return resourceResolverSearchpath;
  }
  public void setResourceResolverSearchpath(ConfigNodePropertyArray resourceResolverSearchpath) {
    this.resourceResolverSearchpath = resourceResolverSearchpath;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getResourceResolverManglenamespaces() {
    return resourceResolverManglenamespaces;
  }
  public void setResourceResolverManglenamespaces(ConfigNodePropertyBoolean resourceResolverManglenamespaces) {
    this.resourceResolverManglenamespaces = resourceResolverManglenamespaces;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getResourceResolverAllowDirect() {
    return resourceResolverAllowDirect;
  }
  public void setResourceResolverAllowDirect(ConfigNodePropertyBoolean resourceResolverAllowDirect) {
    this.resourceResolverAllowDirect = resourceResolverAllowDirect;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getResourceResolverRequiredProviders() {
    return resourceResolverRequiredProviders;
  }
  public void setResourceResolverRequiredProviders(ConfigNodePropertyArray resourceResolverRequiredProviders) {
    this.resourceResolverRequiredProviders = resourceResolverRequiredProviders;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getResourceResolverRequiredProvidernames() {
    return resourceResolverRequiredProvidernames;
  }
  public void setResourceResolverRequiredProvidernames(ConfigNodePropertyArray resourceResolverRequiredProvidernames) {
    this.resourceResolverRequiredProvidernames = resourceResolverRequiredProvidernames;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getResourceResolverVirtual() {
    return resourceResolverVirtual;
  }
  public void setResourceResolverVirtual(ConfigNodePropertyArray resourceResolverVirtual) {
    this.resourceResolverVirtual = resourceResolverVirtual;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getResourceResolverMapping() {
    return resourceResolverMapping;
  }
  public void setResourceResolverMapping(ConfigNodePropertyArray resourceResolverMapping) {
    this.resourceResolverMapping = resourceResolverMapping;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getResourceResolverMapLocation() {
    return resourceResolverMapLocation;
  }
  public void setResourceResolverMapLocation(ConfigNodePropertyString resourceResolverMapLocation) {
    this.resourceResolverMapLocation = resourceResolverMapLocation;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getResourceResolverMapObservation() {
    return resourceResolverMapObservation;
  }
  public void setResourceResolverMapObservation(ConfigNodePropertyArray resourceResolverMapObservation) {
    this.resourceResolverMapObservation = resourceResolverMapObservation;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getResourceResolverDefaultVanityRedirectStatus() {
    return resourceResolverDefaultVanityRedirectStatus;
  }
  public void setResourceResolverDefaultVanityRedirectStatus(ConfigNodePropertyInteger resourceResolverDefaultVanityRedirectStatus) {
    this.resourceResolverDefaultVanityRedirectStatus = resourceResolverDefaultVanityRedirectStatus;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getResourceResolverEnableVanitypath() {
    return resourceResolverEnableVanitypath;
  }
  public void setResourceResolverEnableVanitypath(ConfigNodePropertyBoolean resourceResolverEnableVanitypath) {
    this.resourceResolverEnableVanitypath = resourceResolverEnableVanitypath;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getResourceResolverVanitypathMaxEntries() {
    return resourceResolverVanitypathMaxEntries;
  }
  public void setResourceResolverVanitypathMaxEntries(ConfigNodePropertyInteger resourceResolverVanitypathMaxEntries) {
    this.resourceResolverVanitypathMaxEntries = resourceResolverVanitypathMaxEntries;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getResourceResolverVanitypathMaxEntriesStartup() {
    return resourceResolverVanitypathMaxEntriesStartup;
  }
  public void setResourceResolverVanitypathMaxEntriesStartup(ConfigNodePropertyBoolean resourceResolverVanitypathMaxEntriesStartup) {
    this.resourceResolverVanitypathMaxEntriesStartup = resourceResolverVanitypathMaxEntriesStartup;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getResourceResolverVanitypathBloomfilterMaxBytes() {
    return resourceResolverVanitypathBloomfilterMaxBytes;
  }
  public void setResourceResolverVanitypathBloomfilterMaxBytes(ConfigNodePropertyInteger resourceResolverVanitypathBloomfilterMaxBytes) {
    this.resourceResolverVanitypathBloomfilterMaxBytes = resourceResolverVanitypathBloomfilterMaxBytes;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getResourceResolverOptimizeAliasResolution() {
    return resourceResolverOptimizeAliasResolution;
  }
  public void setResourceResolverOptimizeAliasResolution(ConfigNodePropertyBoolean resourceResolverOptimizeAliasResolution) {
    this.resourceResolverOptimizeAliasResolution = resourceResolverOptimizeAliasResolution;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getResourceResolverVanitypathWhitelist() {
    return resourceResolverVanitypathWhitelist;
  }
  public void setResourceResolverVanitypathWhitelist(ConfigNodePropertyArray resourceResolverVanitypathWhitelist) {
    this.resourceResolverVanitypathWhitelist = resourceResolverVanitypathWhitelist;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getResourceResolverVanitypathBlacklist() {
    return resourceResolverVanitypathBlacklist;
  }
  public void setResourceResolverVanitypathBlacklist(ConfigNodePropertyArray resourceResolverVanitypathBlacklist) {
    this.resourceResolverVanitypathBlacklist = resourceResolverVanitypathBlacklist;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getResourceResolverVanityPrecedence() {
    return resourceResolverVanityPrecedence;
  }
  public void setResourceResolverVanityPrecedence(ConfigNodePropertyBoolean resourceResolverVanityPrecedence) {
    this.resourceResolverVanityPrecedence = resourceResolverVanityPrecedence;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getResourceResolverProviderhandlingParanoid() {
    return resourceResolverProviderhandlingParanoid;
  }
  public void setResourceResolverProviderhandlingParanoid(ConfigNodePropertyBoolean resourceResolverProviderhandlingParanoid) {
    this.resourceResolverProviderhandlingParanoid = resourceResolverProviderhandlingParanoid;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getResourceResolverLogClosing() {
    return resourceResolverLogClosing;
  }
  public void setResourceResolverLogClosing(ConfigNodePropertyBoolean resourceResolverLogClosing) {
    this.resourceResolverLogClosing = resourceResolverLogClosing;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getResourceResolverLogUnclosed() {
    return resourceResolverLogUnclosed;
  }
  public void setResourceResolverLogUnclosed(ConfigNodePropertyBoolean resourceResolverLogUnclosed) {
    this.resourceResolverLogUnclosed = resourceResolverLogUnclosed;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties = (OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties) o;
    return (this.resourceResolverSearchpath == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverSearchpath == null : this.resourceResolverSearchpath.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverSearchpath)) &&
        (this.resourceResolverManglenamespaces == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverManglenamespaces == null : this.resourceResolverManglenamespaces.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverManglenamespaces)) &&
        (this.resourceResolverAllowDirect == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverAllowDirect == null : this.resourceResolverAllowDirect.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverAllowDirect)) &&
        (this.resourceResolverRequiredProviders == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverRequiredProviders == null : this.resourceResolverRequiredProviders.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverRequiredProviders)) &&
        (this.resourceResolverRequiredProvidernames == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverRequiredProvidernames == null : this.resourceResolverRequiredProvidernames.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverRequiredProvidernames)) &&
        (this.resourceResolverVirtual == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVirtual == null : this.resourceResolverVirtual.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVirtual)) &&
        (this.resourceResolverMapping == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverMapping == null : this.resourceResolverMapping.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverMapping)) &&
        (this.resourceResolverMapLocation == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverMapLocation == null : this.resourceResolverMapLocation.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverMapLocation)) &&
        (this.resourceResolverMapObservation == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverMapObservation == null : this.resourceResolverMapObservation.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverMapObservation)) &&
        (this.resourceResolverDefaultVanityRedirectStatus == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverDefaultVanityRedirectStatus == null : this.resourceResolverDefaultVanityRedirectStatus.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverDefaultVanityRedirectStatus)) &&
        (this.resourceResolverEnableVanitypath == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverEnableVanitypath == null : this.resourceResolverEnableVanitypath.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverEnableVanitypath)) &&
        (this.resourceResolverVanitypathMaxEntries == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathMaxEntries == null : this.resourceResolverVanitypathMaxEntries.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathMaxEntries)) &&
        (this.resourceResolverVanitypathMaxEntriesStartup == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathMaxEntriesStartup == null : this.resourceResolverVanitypathMaxEntriesStartup.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathMaxEntriesStartup)) &&
        (this.resourceResolverVanitypathBloomfilterMaxBytes == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathBloomfilterMaxBytes == null : this.resourceResolverVanitypathBloomfilterMaxBytes.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathBloomfilterMaxBytes)) &&
        (this.resourceResolverOptimizeAliasResolution == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverOptimizeAliasResolution == null : this.resourceResolverOptimizeAliasResolution.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverOptimizeAliasResolution)) &&
        (this.resourceResolverVanitypathWhitelist == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathWhitelist == null : this.resourceResolverVanitypathWhitelist.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathWhitelist)) &&
        (this.resourceResolverVanitypathBlacklist == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathBlacklist == null : this.resourceResolverVanitypathBlacklist.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathBlacklist)) &&
        (this.resourceResolverVanityPrecedence == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanityPrecedence == null : this.resourceResolverVanityPrecedence.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanityPrecedence)) &&
        (this.resourceResolverProviderhandlingParanoid == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverProviderhandlingParanoid == null : this.resourceResolverProviderhandlingParanoid.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverProviderhandlingParanoid)) &&
        (this.resourceResolverLogClosing == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverLogClosing == null : this.resourceResolverLogClosing.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverLogClosing)) &&
        (this.resourceResolverLogUnclosed == null ? orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverLogUnclosed == null : this.resourceResolverLogUnclosed.equals(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverLogUnclosed));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.resourceResolverSearchpath == null ? 0: this.resourceResolverSearchpath.hashCode());
    result = 31 * result + (this.resourceResolverManglenamespaces == null ? 0: this.resourceResolverManglenamespaces.hashCode());
    result = 31 * result + (this.resourceResolverAllowDirect == null ? 0: this.resourceResolverAllowDirect.hashCode());
    result = 31 * result + (this.resourceResolverRequiredProviders == null ? 0: this.resourceResolverRequiredProviders.hashCode());
    result = 31 * result + (this.resourceResolverRequiredProvidernames == null ? 0: this.resourceResolverRequiredProvidernames.hashCode());
    result = 31 * result + (this.resourceResolverVirtual == null ? 0: this.resourceResolverVirtual.hashCode());
    result = 31 * result + (this.resourceResolverMapping == null ? 0: this.resourceResolverMapping.hashCode());
    result = 31 * result + (this.resourceResolverMapLocation == null ? 0: this.resourceResolverMapLocation.hashCode());
    result = 31 * result + (this.resourceResolverMapObservation == null ? 0: this.resourceResolverMapObservation.hashCode());
    result = 31 * result + (this.resourceResolverDefaultVanityRedirectStatus == null ? 0: this.resourceResolverDefaultVanityRedirectStatus.hashCode());
    result = 31 * result + (this.resourceResolverEnableVanitypath == null ? 0: this.resourceResolverEnableVanitypath.hashCode());
    result = 31 * result + (this.resourceResolverVanitypathMaxEntries == null ? 0: this.resourceResolverVanitypathMaxEntries.hashCode());
    result = 31 * result + (this.resourceResolverVanitypathMaxEntriesStartup == null ? 0: this.resourceResolverVanitypathMaxEntriesStartup.hashCode());
    result = 31 * result + (this.resourceResolverVanitypathBloomfilterMaxBytes == null ? 0: this.resourceResolverVanitypathBloomfilterMaxBytes.hashCode());
    result = 31 * result + (this.resourceResolverOptimizeAliasResolution == null ? 0: this.resourceResolverOptimizeAliasResolution.hashCode());
    result = 31 * result + (this.resourceResolverVanitypathWhitelist == null ? 0: this.resourceResolverVanitypathWhitelist.hashCode());
    result = 31 * result + (this.resourceResolverVanitypathBlacklist == null ? 0: this.resourceResolverVanitypathBlacklist.hashCode());
    result = 31 * result + (this.resourceResolverVanityPrecedence == null ? 0: this.resourceResolverVanityPrecedence.hashCode());
    result = 31 * result + (this.resourceResolverProviderhandlingParanoid == null ? 0: this.resourceResolverProviderhandlingParanoid.hashCode());
    result = 31 * result + (this.resourceResolverLogClosing == null ? 0: this.resourceResolverLogClosing.hashCode());
    result = 31 * result + (this.resourceResolverLogUnclosed == null ? 0: this.resourceResolverLogUnclosed.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {\n");
    
    sb.append("  resourceResolverSearchpath: ").append(resourceResolverSearchpath).append("\n");
    sb.append("  resourceResolverManglenamespaces: ").append(resourceResolverManglenamespaces).append("\n");
    sb.append("  resourceResolverAllowDirect: ").append(resourceResolverAllowDirect).append("\n");
    sb.append("  resourceResolverRequiredProviders: ").append(resourceResolverRequiredProviders).append("\n");
    sb.append("  resourceResolverRequiredProvidernames: ").append(resourceResolverRequiredProvidernames).append("\n");
    sb.append("  resourceResolverVirtual: ").append(resourceResolverVirtual).append("\n");
    sb.append("  resourceResolverMapping: ").append(resourceResolverMapping).append("\n");
    sb.append("  resourceResolverMapLocation: ").append(resourceResolverMapLocation).append("\n");
    sb.append("  resourceResolverMapObservation: ").append(resourceResolverMapObservation).append("\n");
    sb.append("  resourceResolverDefaultVanityRedirectStatus: ").append(resourceResolverDefaultVanityRedirectStatus).append("\n");
    sb.append("  resourceResolverEnableVanitypath: ").append(resourceResolverEnableVanitypath).append("\n");
    sb.append("  resourceResolverVanitypathMaxEntries: ").append(resourceResolverVanitypathMaxEntries).append("\n");
    sb.append("  resourceResolverVanitypathMaxEntriesStartup: ").append(resourceResolverVanitypathMaxEntriesStartup).append("\n");
    sb.append("  resourceResolverVanitypathBloomfilterMaxBytes: ").append(resourceResolverVanitypathBloomfilterMaxBytes).append("\n");
    sb.append("  resourceResolverOptimizeAliasResolution: ").append(resourceResolverOptimizeAliasResolution).append("\n");
    sb.append("  resourceResolverVanitypathWhitelist: ").append(resourceResolverVanitypathWhitelist).append("\n");
    sb.append("  resourceResolverVanitypathBlacklist: ").append(resourceResolverVanitypathBlacklist).append("\n");
    sb.append("  resourceResolverVanityPrecedence: ").append(resourceResolverVanityPrecedence).append("\n");
    sb.append("  resourceResolverProviderhandlingParanoid: ").append(resourceResolverProviderhandlingParanoid).append("\n");
    sb.append("  resourceResolverLogClosing: ").append(resourceResolverLogClosing).append("\n");
    sb.append("  resourceResolverLogUnclosed: ").append(resourceResolverLogUnclosed).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
