/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteCsrfImplCsrfServletProperties {
  #[serde(rename = "csrf.token.expires.in")]
  csrf_token_expires_in: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "sling.auth.requirements")]
  sling_auth_requirements: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteCsrfImplCsrfServletProperties {
  pub fn new() -> ComAdobeGraniteCsrfImplCsrfServletProperties {
    ComAdobeGraniteCsrfImplCsrfServletProperties {
      csrf_token_expires_in: None,
      sling_auth_requirements: None
    }
  }

  pub fn set_csrf_token_expires_in(&mut self, csrf_token_expires_in: ::models::ConfigNodePropertyInteger) {
    self.csrf_token_expires_in = Some(csrf_token_expires_in);
  }

  pub fn with_csrf_token_expires_in(mut self, csrf_token_expires_in: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteCsrfImplCsrfServletProperties {
    self.csrf_token_expires_in = Some(csrf_token_expires_in);
    self
  }

  pub fn csrf_token_expires_in(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.csrf_token_expires_in.as_ref()
  }

  pub fn reset_csrf_token_expires_in(&mut self) {
    self.csrf_token_expires_in = None;
  }

  pub fn set_sling_auth_requirements(&mut self, sling_auth_requirements: ::models::ConfigNodePropertyString) {
    self.sling_auth_requirements = Some(sling_auth_requirements);
  }

  pub fn with_sling_auth_requirements(mut self, sling_auth_requirements: ::models::ConfigNodePropertyString) -> ComAdobeGraniteCsrfImplCsrfServletProperties {
    self.sling_auth_requirements = Some(sling_auth_requirements);
    self
  }

  pub fn sling_auth_requirements(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_auth_requirements.as_ref()
  }

  pub fn reset_sling_auth_requirements(&mut self) {
    self.sling_auth_requirements = None;
  }

}



