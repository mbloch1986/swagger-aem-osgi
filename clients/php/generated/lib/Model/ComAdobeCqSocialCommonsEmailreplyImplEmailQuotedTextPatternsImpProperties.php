<?php
/**
 * ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pattern_time' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'pattern_newline' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'pattern_day_of_month' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'pattern_month' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'pattern_year' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'pattern_date' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'pattern_date_time' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'pattern_email' => '\OpenAPI\Client\Model\ConfigNodePropertyString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'pattern_time' => null,
        'pattern_newline' => null,
        'pattern_day_of_month' => null,
        'pattern_month' => null,
        'pattern_year' => null,
        'pattern_date' => null,
        'pattern_date_time' => null,
        'pattern_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pattern_time' => 'pattern.time',
        'pattern_newline' => 'pattern.newline',
        'pattern_day_of_month' => 'pattern.dayOfMonth',
        'pattern_month' => 'pattern.month',
        'pattern_year' => 'pattern.year',
        'pattern_date' => 'pattern.date',
        'pattern_date_time' => 'pattern.dateTime',
        'pattern_email' => 'pattern.email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pattern_time' => 'setPatternTime',
        'pattern_newline' => 'setPatternNewline',
        'pattern_day_of_month' => 'setPatternDayOfMonth',
        'pattern_month' => 'setPatternMonth',
        'pattern_year' => 'setPatternYear',
        'pattern_date' => 'setPatternDate',
        'pattern_date_time' => 'setPatternDateTime',
        'pattern_email' => 'setPatternEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pattern_time' => 'getPatternTime',
        'pattern_newline' => 'getPatternNewline',
        'pattern_day_of_month' => 'getPatternDayOfMonth',
        'pattern_month' => 'getPatternMonth',
        'pattern_year' => 'getPatternYear',
        'pattern_date' => 'getPatternDate',
        'pattern_date_time' => 'getPatternDateTime',
        'pattern_email' => 'getPatternEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pattern_time'] = isset($data['pattern_time']) ? $data['pattern_time'] : null;
        $this->container['pattern_newline'] = isset($data['pattern_newline']) ? $data['pattern_newline'] : null;
        $this->container['pattern_day_of_month'] = isset($data['pattern_day_of_month']) ? $data['pattern_day_of_month'] : null;
        $this->container['pattern_month'] = isset($data['pattern_month']) ? $data['pattern_month'] : null;
        $this->container['pattern_year'] = isset($data['pattern_year']) ? $data['pattern_year'] : null;
        $this->container['pattern_date'] = isset($data['pattern_date']) ? $data['pattern_date'] : null;
        $this->container['pattern_date_time'] = isset($data['pattern_date_time']) ? $data['pattern_date_time'] : null;
        $this->container['pattern_email'] = isset($data['pattern_email']) ? $data['pattern_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pattern_time
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPatternTime()
    {
        return $this->container['pattern_time'];
    }

    /**
     * Sets pattern_time
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $pattern_time pattern_time
     *
     * @return $this
     */
    public function setPatternTime($pattern_time)
    {
        $this->container['pattern_time'] = $pattern_time;

        return $this;
    }

    /**
     * Gets pattern_newline
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPatternNewline()
    {
        return $this->container['pattern_newline'];
    }

    /**
     * Sets pattern_newline
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $pattern_newline pattern_newline
     *
     * @return $this
     */
    public function setPatternNewline($pattern_newline)
    {
        $this->container['pattern_newline'] = $pattern_newline;

        return $this;
    }

    /**
     * Gets pattern_day_of_month
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPatternDayOfMonth()
    {
        return $this->container['pattern_day_of_month'];
    }

    /**
     * Sets pattern_day_of_month
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $pattern_day_of_month pattern_day_of_month
     *
     * @return $this
     */
    public function setPatternDayOfMonth($pattern_day_of_month)
    {
        $this->container['pattern_day_of_month'] = $pattern_day_of_month;

        return $this;
    }

    /**
     * Gets pattern_month
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPatternMonth()
    {
        return $this->container['pattern_month'];
    }

    /**
     * Sets pattern_month
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $pattern_month pattern_month
     *
     * @return $this
     */
    public function setPatternMonth($pattern_month)
    {
        $this->container['pattern_month'] = $pattern_month;

        return $this;
    }

    /**
     * Gets pattern_year
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPatternYear()
    {
        return $this->container['pattern_year'];
    }

    /**
     * Sets pattern_year
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $pattern_year pattern_year
     *
     * @return $this
     */
    public function setPatternYear($pattern_year)
    {
        $this->container['pattern_year'] = $pattern_year;

        return $this;
    }

    /**
     * Gets pattern_date
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPatternDate()
    {
        return $this->container['pattern_date'];
    }

    /**
     * Sets pattern_date
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $pattern_date pattern_date
     *
     * @return $this
     */
    public function setPatternDate($pattern_date)
    {
        $this->container['pattern_date'] = $pattern_date;

        return $this;
    }

    /**
     * Gets pattern_date_time
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPatternDateTime()
    {
        return $this->container['pattern_date_time'];
    }

    /**
     * Sets pattern_date_time
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $pattern_date_time pattern_date_time
     *
     * @return $this
     */
    public function setPatternDateTime($pattern_date_time)
    {
        $this->container['pattern_date_time'] = $pattern_date_time;

        return $this;
    }

    /**
     * Gets pattern_email
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPatternEmail()
    {
        return $this->container['pattern_email'];
    }

    /**
     * Sets pattern_email
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $pattern_email pattern_email
     *
     * @return $this
     */
    public function setPatternEmail($pattern_email)
    {
        $this->container['pattern_email'] = $pattern_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


