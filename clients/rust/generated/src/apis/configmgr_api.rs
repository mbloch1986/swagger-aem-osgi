/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ConfigmgrApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ConfigmgrApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ConfigmgrApiClient<C> {
        ConfigmgrApiClient {
            configuration: configuration,
        }
    }
}

pub trait ConfigmgrApi {
    fn adaptive_form_and_interactive_communication_web_channel_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, show_placeholder: bool, maximum_cache_entries: i32, af_scripting_compatversion: &str, make_file_name_unique: bool, generating_compliant_data: bool) -> Box<Future<Item = ::models::AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo, Error = Error<serde_json::Value>>>;
    fn adaptive_form_and_interactive_communication_web_channel_theme_configur(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, font_list: Vec<String>) -> Box<Future<Item = ::models::AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo, Error = Error<serde_json::Value>>>;
    fn analytics_component_query_cache_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_component_query_cache_size: i32) -> Box<Future<Item = ::models::AnalyticsComponentQueryCacheServiceInfo, Error = Error<serde_json::Value>>>;
    fn apache_sling_health_check_result_html_serializer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, style_string: &str) -> Box<Future<Item = ::models::ApacheSlingHealthCheckResultHtmlSerializerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, forms_manager_config_include_ootb_templates: bool, forms_manager_config_include_deprecated_templates: bool) -> Box<Future<Item = ::models::ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_aem_transaction_core_impl_transaction_recorder(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_transaction_recording_enabled: bool) -> Box<Future<Item = ::models::ComAdobeAemTransactionCoreImplTransactionRecorderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str) -> Box<Future<Item = ::models::ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str) -> Box<Future<Item = ::models::ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pre_upgrade_maintenance_tasks: Vec<String>, pre_upgrade_hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, root_path: &str, fix_inconsistencies: bool) -> Box<Future<Item = ::models::ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_account_api_account_management_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_accountmanager_token_validity_period: i32, cq_accountmanager_config_requestnewaccount_mail: &str, cq_accountmanager_config_requestnewpwd_mail: &str) -> Box<Future<Item = ::models::ComAdobeCqAccountApiAccountManagementServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_account_impl_account_management_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_accountmanager_config_informnewaccount_mail: &str, cq_accountmanager_config_informnewpwd_mail: &str) -> Box<Future<Item = ::models::ComAdobeCqAccountImplAccountManagementServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_address_impl_location_location_list_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_address_location_default_max_results: i32) -> Box<Future<Item = ::models::ComAdobeCqAddressImplLocationLocationListServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_audit_purge_dam(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auditlog_rule_name: &str, auditlog_rule_contentpath: &str, auditlog_rule_minimumage: i32, auditlog_rule_types: &str) -> Box<Future<Item = ::models::ComAdobeCqAuditPurgeDamInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_audit_purge_pages(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auditlog_rule_name: &str, auditlog_rule_contentpath: &str, auditlog_rule_minimumage: i32, auditlog_rule_types: &str) -> Box<Future<Item = ::models::ComAdobeCqAuditPurgePagesInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_audit_purge_replication(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auditlog_rule_name: &str, auditlog_rule_contentpath: &str, auditlog_rule_minimumage: i32, auditlog_rule_types: &str) -> Box<Future<Item = ::models::ComAdobeCqAuditPurgeReplicationInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, keypair_id: &str, keypair_alias: &str, cdnrewriter_attributes: Vec<String>, cdn_rewriter_distribution_domain: &str) -> Box<Future<Item = ::models::ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cdn_config_distribution_domain: &str, cdn_config_enable_rewriting: bool, cdn_config_path_prefixes: Vec<String>, cdn_config_cdnttl: i32, cdn_config_application_protocol: &str) -> Box<Future<Item = ::models::ComAdobeCqCdnRewriterImplCdnConfigServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, cdnrewriter_attributes: Vec<String>, cdn_rewriter_distribution_domain: &str) -> Box<Future<Item = ::models::ComAdobeCqCdnRewriterImplCdnRewriterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, flush_agents: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_commerce_impl_asset_dynamic_image_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_asset_handler_active: bool, cq_commerce_asset_handler_name: &str) -> Box<Future<Item = ::models::ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_asset_handler_fallback: &str) -> Box<Future<Item = ::models::ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_commerce_impl_asset_static_image_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_asset_handler_active: bool, cq_commerce_asset_handler_name: &str) -> Box<Future<Item = ::models::ComAdobeCqCommerceImplAssetStaticImageHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_commerce_impl_asset_video_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_asset_handler_active: bool, cq_commerce_asset_handler_name: &str) -> Box<Future<Item = ::models::ComAdobeCqCommerceImplAssetVideoHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_promotion_root: &str) -> Box<Future<Item = ::models::ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_cataloggenerator_bucketsize: i32, cq_commerce_cataloggenerator_bucketname: &str, cq_commerce_cataloggenerator_excludedtemplateproperties: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_commerce_pim_impl_page_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_pageeventlistener_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqCommercePimImplPageEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, feed_generator_algorithm: &str) -> Box<Future<Item = ::models::ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, reportingservices_url: &str) -> Box<Future<Item = ::models::ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, brightedge_url: &str) -> Box<Future<Item = ::models::ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, reportingservices_proxy_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_cfm_impl_component_component_config_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dam_cfm_component_resource_type: &str, dam_cfm_component_file_reference_prop: &str, dam_cfm_component_elements_prop: &str, dam_cfm_component_variation_prop: &str) -> Box<Future<Item = ::models::ComAdobeCqDamCfmImplComponentComponentConfigImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dam_cfm_resource_types: Vec<String>, dam_cfm_reference_properties: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqDamCfmImplConfFeatureConfigImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pipeline_type: &str) -> Box<Future<Item = ::models::ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pipeline_type: &str) -> Box<Future<Item = ::models::ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pipeline_type: &str) -> Box<Future<Item = ::models::ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_memory: i32) -> Box<Future<Item = ::models::ComAdobeCqDamDmProcessImagePTiffManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dmreplicateonmodify_enabled: bool, dmreplicateonmodify_forcesyncdeletes: bool) -> Box<Future<Item = ::models::ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_dam_mac_sync_client_so_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqDamMacSyncHelperImplMacSyncClientImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths: Vec<String>, com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions: bool, com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms: i32, com_adobe_cq_dam_mac_sync_damsyncservice_platform: &str) -> Box<Future<Item = ::models::ComAdobeCqDamMacSyncImplDamSyncServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, nui_enabled: bool, nui_service_url: &str, nui_api_key: &str) -> Box<Future<Item = ::models::ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_s7imaging_impl_is_image_server_component(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, tcp_port: &str, allow_remote_access: bool, max_render_rgn_pixels: &str, max_message_size: &str, random_access_url_timeout: i32, worker_threads: i32) -> Box<Future<Item = ::models::ComAdobeCqDamS7imagingImplIsImageServerComponentInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cache_enable: bool, cache_root_paths: Vec<String>, cache_max_size: i32, cache_max_entries: i32) -> Box<Future<Item = ::models::ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_webdav_impl_io_asset_io_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, path_prefix: &str, create_version: bool) -> Box<Future<Item = ::models::ComAdobeCqDamWebdavImplIoAssetIoHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_webdav_version_linking_enable: bool, cq_dam_webdav_version_linking_scheduler_period: i32, cq_dam_webdav_version_linking_staging_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dam_webdav_impl_io_special_files_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_day_cq_dam_core_impl_io_special_files_handler_filepatters: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_deserfw_impl_deserialization_firewall_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, firewall_deserialization_whitelist: Vec<String>, firewall_deserialization_blacklist: Vec<String>, firewall_deserialization_diagnostics: &str) -> Box<Future<Item = ::models::ComAdobeCqDeserfwImplDeserializationFirewallImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dtm_impl_service_dtm_web_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, connection_timeout: i32, socket_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqDtmImplServiceDtmWebServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dtm_staging_ip_whitelist: Vec<String>, dtm_production_ip_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqDtmImplServletsDtmDeployHookServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_dtm_reactor_impl_service_web_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, endpoint_uri: &str, connection_timeout: i32, socket_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqDtmReactorImplServiceWebServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_experiencelog_impl_experience_log_config_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, disabled_for_groups: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_hc_content_packages_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str, package_names: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqHcContentPackagesHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_history_impl_history_request_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, history_request_filter_excluded_selectors: Vec<String>, history_request_filter_excluded_extensions: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqHistoryImplHistoryRequestFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_history_impl_history_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, history_service_resource_types: Vec<String>, history_service_path_filter: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqHistoryImplHistoryServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_inbox_impl_typeprovider_item_type_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, inbox_impl_typeprovider_registrypaths: Vec<String>, inbox_impl_typeprovider_legacypaths: Vec<String>, inbox_impl_typeprovider_defaulturl_failureitem: &str, inbox_impl_typeprovider_defaulturl_workitem: &str, inbox_impl_typeprovider_defaulturl_task: &str) -> Box<Future<Item = ::models::ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_projects_impl_servlet_project_image_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, image_quality: &str, image_supported_resolutions: &str) -> Box<Future<Item = ::models::ComAdobeCqProjectsImplServletProjectImageServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_projects_purge_scheduler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduledpurge_name: &str, scheduledpurge_purge_active: bool, scheduledpurge_templates: Vec<String>, scheduledpurge_purge_groups: bool, scheduledpurge_purge_assets: bool, scheduledpurge_terminate_running_workflows: bool, scheduledpurge_daysold: i32, scheduledpurge_save_threshold: i32) -> Box<Future<Item = ::models::ComAdobeCqProjectsPurgeSchedulerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, include_paths: Vec<String>, exporter_user: &str) -> Box<Future<Item = ::models::ComAdobeCqScheduledExporterImplScheduledExporterImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_cq_screens_analytics_impl_url: &str, com_adobe_cq_screens_analytics_impl_apikey: &str, com_adobe_cq_screens_analytics_impl_project: &str, com_adobe_cq_screens_analytics_impl_environment: &str, com_adobe_cq_screens_analytics_impl_send_frequency: i32) -> Box<Future<Item = ::models::ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_device_impl_device_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_aem_screens_player_pingfrequency: i32, com_adobe_aem_screens_device_pasword_specialchars: &str, com_adobe_aem_screens_device_pasword_minlowercasechars: i32, com_adobe_aem_screens_device_pasword_minuppercasechars: i32, com_adobe_aem_screens_device_pasword_minnumberchars: i32, com_adobe_aem_screens_device_pasword_minspecialchars: i32, com_adobe_aem_screens_device_pasword_minlength: i32) -> Box<Future<Item = ::models::ComAdobeCqScreensDeviceImplDeviceServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_device_registration_impl_registration_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, device_registration_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_impl_handler_channels_update_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_pagesupdatehandler_imageresourcetypes: Vec<String>, cq_pagesupdatehandler_productresourcetypes: Vec<String>, cq_pagesupdatehandler_videoresourcetypes: Vec<String>, cq_pagesupdatehandler_dynamicsequenceresourcetypes: Vec<String>, cq_pagesupdatehandler_previewmodepaths: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str) -> Box<Future<Item = ::models::ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_aem_screens_impl_remote_request_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_impl_screens_channel_post_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, screens_channels_properties_to_remove: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqScreensImplScreensChannelPostProcessorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path: Vec<String>, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency: &str, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout: i32, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients: &str, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver: &str, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport: i32, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls: bool, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username: &str, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password: &str) -> Box<Future<Item = ::models::ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, global_size: i32, max_disk_usage: i32, persistence_enabled: bool, thread_pool_max_size: i32, scheduled_thread_pool_max_size: i32, graceful_shutdown_timeout: i32, queues: Vec<String>, topics: Vec<String>, addresses_max_delivery_attempts: i32, addresses_expiry_delay: i32, addresses_address_full_message_policy: &str, addresses_max_size_bytes: i32, addresses_page_size_bytes: i32, addresses_page_cache_max_size: i32, cluster_user: &str, cluster_password: &str, cluster_call_timeout: i32, cluster_call_failover_timeout: i32, cluster_client_failure_check_period: i32, cluster_notification_attempts: i32, cluster_notification_interval: i32, id_cache_size: i32, cluster_confirmation_window_size: i32, cluster_connection_ttl: i32, cluster_duplicate_detection: bool, cluster_initial_connect_attempts: i32, cluster_max_retry_interval: i32, cluster_min_large_message_size: i32, cluster_producer_window_size: i32, cluster_reconnect_attempts: i32, cluster_retry_interval: i32, cluster_retry_interval_multiplier: f32) -> Box<Future<Item = ::models::ComAdobeCqScreensMqActivemqImplArtemisJmsProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path: Vec<String>, com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency: &str) -> Box<Future<Item = ::models::ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disable_smart_sync: bool) -> Box<Future<Item = ::models::ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable_data_triggered_content: bool) -> Box<Future<Item = ::models::ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, dispatcher_address: &str, dispatcher_filter_allowed: Vec<String>, dispatcher_filter_blocked: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_security_hc_packages_impl_example_content_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, webserver_address: &str) -> Box<Future<Item = ::models::ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_accountverification_impl_account_management_config_im(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable: bool, ttl1: i32, ttl2: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, accepted: bool, ranked: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ranking: i32, enable: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, stream_path: &str, stream_name: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_retry: i32, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, attachment_type_blacklist: &str, extension_order: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_calendar_servlets_time_zone_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, timezones_expirytime: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCalendarServletsTimeZoneServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ranking: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, num_user_limit: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable_scheduled_posts_search: bool, number_of_minutes: i32, max_search_limit: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_cors_cors_authentication_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cors_enabling: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, context_path: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pattern_time: &str, pattern_newline: &str, pattern_day_of_month: &str, pattern_month: &str, pattern_year: &str, pattern_date: &str, pattern_date_time: &str, pattern_email: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, email_name: &str, email_create_post_from_reply: bool, email_add_comment_id_to: &str, email_subject_maximum_length: i32, email_reply_to_address: &str, email_reply_to_delimiter: &str, email_tracker_id_prefix_in_subject: &str, email_tracker_id_prefix_in_body: &str, email_as_html: bool, email_default_user_name: &str, email_templates_root_path: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, connect_protocol: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, reply_email_patterns: Vec<String>, priority_order: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, number_of_days: i32, age_of_file: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str, verbs: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable: bool, ugc_limit: i32, ugc_limit_duration: i32, domains: Vec<String>, to_list: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str, oauth_cloud_config_root: &str, provider_config_root: &str, provider_config_create_tags_enabled: bool, provider_config_user_folder: &str, provider_config_facebook_fetch_fields: bool, provider_config_facebook_fields: Vec<String>, provider_config_refresh_userdata_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: Vec<String>, service_ranking: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, facebook: Vec<String>, twitter: Vec<String>, provider_config_user_folder: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str, oauth_cloud_config_root: &str, provider_config_root: &str, provider_config_user_folder: &str, provider_config_twitter_enable_params: bool, provider_config_twitter_params: Vec<String>, provider_config_refresh_userdata_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_social_content_fragments_services_enabled: bool, cq_social_content_fragments_services_wait_time_seconds: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, version_id: &str, cache_on: bool, concurrency_level: i32, cache_start_size: i32, cache_ttl: i32, cache_size: i32, time_limit: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, solr_zk_timeout: &str, solr_commit: &str, cache_on: bool, concurrency_level: i32, cache_start_size: i32, cache_ttl: i32, cache_size: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, solr_zk_timeout: &str, solr_commit: &str, cache_on: bool, concurrency_level: i32, cache_start_size: i32, cache_ttl: i32, cache_size: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_member_check: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_member_check: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_enablement_services_impl_author_marker_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_selectors: &str, sling_servlet_extensions: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_forum_dispatcher_impl_flush_operations(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, extension_order: i32, flush_forumontopic: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_group_client_impl_community_group_collection_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, group_listing_pagination_enable: bool, group_listing_lazyloading_enable: bool, page_size: i32, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_group_impl_group_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_wait_time: i32, min_wait_between_retries: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialGroupImplGroupServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_handlebars_guava_template_cache_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, parameter_guava_cache_enabled: bool, parameter_guava_cache_params: &str, parameter_guava_cache_reload: bool, service_ranking: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_members_impl_community_member_group_profile_component_f(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, everyone_limit: i32, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, message_properties: Vec<String>, message_box_size_limit: i32, message_count_limit: i32, notify_failure: bool, failure_message_from: &str, failure_template_path: &str, max_retries: i32, min_wait_between_retries: i32, count_update_pool_size: i32, inbox_path: &str, sentitems_path: &str, support_attachments: bool, support_group_messaging: bool, max_total_recipients: i32, batch_size: i32, max_total_attachment_size: i32, attachment_type_blacklist: Vec<String>, allowed_attachment_types: Vec<String>, service_selector: &str, field_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, resource_type_filters: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, resource_type_filters: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_notifications_impl_mentions_router(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialNotificationsImplMentionsRouterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_notifications_impl_notification_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_unread_notification_count: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_notifications_impl_notifications_router(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialNotificationsImplNotificationsRouterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_social_reporting_analytics_polling_importer_interval: i32, cq_social_reporting_analytics_polling_importer_page_size: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, report_fetch_delay: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_social_console_analytics_sites_mapping: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_selectors: &str, sling_servlet_extensions: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_selectors: Vec<String>, sling_servlet_extensions: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_scoring_impl_scoring_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialScoringImplScoringEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable_fallback: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_site_endpoints_impl_site_operation_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, site_path_filters: Vec<String>, site_package_group: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_social_console_analytics_components: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_site_impl_site_configurator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, components_using_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_srp_impl_social_solr_connector(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, srp_type: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialSrpImplSocialSolrConnectorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_sync_impl_diff_changes_observer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, agent_name: &str, diff_path: &str, property_names: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialSyncImplDiffChangesObserverInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_sync_impl_group_sync_listener_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, nodetypes: Vec<String>, ignorableprops: Vec<String>, ignorablenodes: &str, enabled: bool, distfolders: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_sync_impl_publisher_sync_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, active_run_modes: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_sync_impl_user_sync_listener_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, nodetypes: Vec<String>, ignorableprops: Vec<String>, ignorablenodes: Vec<String>, enabled: bool, distfolders: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialSyncImplUserSyncListenerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_translation_impl_translation_service_config_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, translate_language: &str, translate_display: &str, translate_attribution: bool, translate_caching: &str, translate_smart_rendering: &str, translate_caching_duration: &str, translate_session_save_interval: &str, translate_session_save_batch_limit: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_translation_impl_ugc_language_detector(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str, translate_listener_type: Vec<String>, translate_property_list: Vec<String>, pool_size: i32, max_pool_size: i32, queue_size: i32, keep_alive_time: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialTranslationImplUgcLanguageDetectorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, thread_pool_size: i32, delay_time: i32, worker_sleep_time: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pool_size: i32, max_pool_size: i32, queue_size: i32, keep_alive_time: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_primary_publisher: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_ugcbase_impl_social_utils_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, legacy_cloud_ugc_path_mapping: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, automoderation_sequence: Vec<String>, automoderation_onfailurestop: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, watchwords_positive: Vec<String>, watchwords_negative: Vec<String>, watchwords_path: &str, sentiment_path: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_attachment_type_blacklist: Vec<String>, baseline_attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, parameter_whitelist: Vec<String>, parameter_whitelist_prefixes: Vec<String>, binary_parameter_whitelist: Vec<String>, modifier_whitelist: Vec<String>, operation_whitelist: Vec<String>, operation_whitelist_prefixes: Vec<String>, typehint_whitelist: Vec<String>, resourcetype_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_extensions: &str, sling_servlet_paths: &str, sling_servlet_methods: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_social_user_impl_transport_http_to_publisher(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable: bool, agent_configuration: Vec<String>, context_path: &str, disabled_cipher_suites: Vec<String>, enabled_cipher_suites: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialUserImplTransportHttpToPublisherInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, resource_types: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, delete_path_regexps: Vec<String>, delete_sql2_query: &str) -> Box<Future<Item = ::models::ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, delete_name_regexps: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, threshold: i32, job_topic_name: &str, email_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, job_purge_threshold: i32, job_purge_max_jobs: i32) -> Box<Future<Item = ::models::ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, threshold: i32, job_topic_name: &str, email_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, threshold: i32, job_topic_name: &str, email_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_wcm_launches_impl_launches_event_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, launches_eventhandler_threadpool_maxsize: i32, launches_eventhandler_threadpool_priority: &str, launches_eventhandler_updatelastmodification: bool) -> Box<Future<Item = ::models::ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_qrcode_servlet_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, size: i32) -> Box<Future<Item = ::models::ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sync_translation_state_scheduling_format: &str, scheduling_repeat_translation_scheduling_format: &str, sync_translation_state_lock_timeout_in_minutes: &str, export_format: &str) -> Box<Future<Item = ::models::ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, portal_outboxes: Vec<String>, draft_data_service: &str, draft_metadata_service: &str, submit_data_service: &str, submit_metadata_service: &str, pending_sign_data_service: &str, pending_sign_metadata_service: &str) -> Box<Future<Item = ::models::ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_fd_fp_config_forms_portal_scheduler_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, formportal_interval: &str) -> Box<Future<Item = ::models::ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_forms_common_service_impl_default_data_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, alloweddata_file_locations: Vec<String>) -> Box<Future<Item = ::models::ComAdobeFormsCommonServiceImplDefaultDataProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, temp_storage_config: &str) -> Box<Future<Item = ::models::ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_forms_common_servlet_temp_clean_up_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, duration_for_temporary_storage: &str, duration_for_anonymous_storage: &str) -> Box<Future<Item = ::models::ComAdobeFormsCommonServletTempCleanUpTaskInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_acp_platform_platform_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, query_limit: i32, file_type_extension_map: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteAcpPlatformPlatformServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_activitystreams_impl_activity_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, aggregate_relationships: Vec<String>, aggregate_descend_virtual: bool) -> Box<Future<Item = ::models::ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_analyzer_base_system_status_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_apicontroller_filter_resolver_hook_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_cq_cdn_cdn_rewriter: &str, com_adobe_cq_cloud_config_components: &str, com_adobe_cq_cloud_config_core: &str, com_adobe_cq_cloud_config_ui: &str, com_adobe_cq_com_adobe_cq_editor: &str, com_adobe_cq_com_adobe_cq_projects_core: &str, com_adobe_cq_com_adobe_cq_projects_wcm_core: &str, com_adobe_cq_com_adobe_cq_ui_commons: &str, com_adobe_cq_com_adobe_cq_wcm_style: &str, com_adobe_cq_cq_activitymap_integration: &str, com_adobe_cq_cq_contexthub_commons: &str, com_adobe_cq_cq_dtm: &str, com_adobe_cq_cq_healthcheck: &str, com_adobe_cq_cq_multisite_targeting: &str, com_adobe_cq_cq_pre_upgrade_cleanup: &str, com_adobe_cq_cq_product_info_provider: &str, com_adobe_cq_cq_rest_sites: &str, com_adobe_cq_cq_security_hc: &str, com_adobe_cq_dam_cq_dam_svg_handler: &str, com_adobe_cq_dam_cq_scene7_imaging: &str, com_adobe_cq_dtm_reactor_core: &str, com_adobe_cq_dtm_reactor_ui: &str, com_adobe_cq_exp_jspel_resolver: &str, com_adobe_cq_inbox_cq_inbox: &str, com_adobe_cq_json_schema_parser: &str, com_adobe_cq_media_cq_media_publishing_dps_fp_core: &str, com_adobe_cq_mobile_cq_mobile_caas: &str, com_adobe_cq_mobile_cq_mobile_index_builder: &str, com_adobe_cq_mobile_cq_mobile_phonegap_build: &str, com_adobe_cq_myspell: &str, com_adobe_cq_sample_we_retail_core: &str, com_adobe_cq_screens_com_adobe_cq_screens_dcc: &str, com_adobe_cq_screens_com_adobe_cq_screens_mq_core: &str, com_adobe_cq_social_cq_social_as_provider: &str, com_adobe_cq_social_cq_social_badging_basic_impl: &str, com_adobe_cq_social_cq_social_badging_impl: &str, com_adobe_cq_social_cq_social_calendar_impl: &str, com_adobe_cq_social_cq_social_content_fragments_impl: &str, com_adobe_cq_social_cq_social_enablement_impl: &str, com_adobe_cq_social_cq_social_graph_impl: &str, com_adobe_cq_social_cq_social_ideation_impl: &str, com_adobe_cq_social_cq_social_jcr_provider: &str, com_adobe_cq_social_cq_social_members_impl: &str, com_adobe_cq_social_cq_social_ms_provider: &str, com_adobe_cq_social_cq_social_notifications_channels_web: &str, com_adobe_cq_social_cq_social_notifications_impl: &str, com_adobe_cq_social_cq_social_rdb_provider: &str, com_adobe_cq_social_cq_social_scf_impl: &str, com_adobe_cq_social_cq_social_scoring_basic_impl: &str, com_adobe_cq_social_cq_social_scoring_impl: &str, com_adobe_cq_social_cq_social_serviceusers_impl: &str, com_adobe_cq_social_cq_social_srp_impl: &str, com_adobe_cq_social_cq_social_ugcbase_impl: &str, com_adobe_dam_cq_dam_cfm_impl: &str, com_adobe_forms_foundation_forms_foundation_base: &str, com_adobe_granite_apicontroller: &str, com_adobe_granite_asset_core: &str, com_adobe_granite_auth_sso: &str, com_adobe_granite_bundles_hc_impl: &str, com_adobe_granite_compat_router: &str, com_adobe_granite_conf: &str, com_adobe_granite_conf_ui_core: &str, com_adobe_granite_cors: &str, com_adobe_granite_crx_explorer: &str, com_adobe_granite_crxde_lite: &str, com_adobe_granite_crypto_config: &str, com_adobe_granite_crypto_extension: &str, com_adobe_granite_crypto_file: &str, com_adobe_granite_crypto_jcr: &str, com_adobe_granite_csrf: &str, com_adobe_granite_distribution_core: &str, com_adobe_granite_dropwizard_metrics: &str, com_adobe_granite_frags_impl: &str, com_adobe_granite_gibson: &str, com_adobe_granite_infocollector: &str, com_adobe_granite_installer_factory_packages: &str, com_adobe_granite_jetty_ssl: &str, com_adobe_granite_jobs_async: &str, com_adobe_granite_maintenance_oak: &str, com_adobe_granite_monitoring_core: &str, com_adobe_granite_queries: &str, com_adobe_granite_replication_hc_impl: &str, com_adobe_granite_repository_checker: &str, com_adobe_granite_repository_hc_impl: &str, com_adobe_granite_rest_assets: &str, com_adobe_granite_security_ui: &str, com_adobe_granite_startup: &str, com_adobe_granite_tagsoup: &str, com_adobe_granite_taskmanagement_core: &str, com_adobe_granite_taskmanagement_workflow: &str, com_adobe_granite_ui_clientlibs_compiler_less: &str, com_adobe_granite_ui_clientlibs_processor_gcc: &str, com_adobe_granite_webconsole_plugins: &str, com_adobe_granite_workflow_console: &str, com_adobe_xmp_worker_files_native_fragment_linux: &str, com_adobe_xmp_worker_files_native_fragment_macosx: &str, com_adobe_xmp_worker_files_native_fragment_win: &str, com_day_commons_osgi_wrapper_simple_jndi: &str, com_day_cq_cq_authhandler: &str, com_day_cq_cq_compat_configupdate: &str, com_day_cq_cq_licensebranding: &str, com_day_cq_cq_notifcation_impl: &str, com_day_cq_cq_replication_audit: &str, com_day_cq_cq_search_ext: &str, com_day_cq_dam_cq_dam_annotation_print: &str, com_day_cq_dam_cq_dam_asset_usage: &str, com_day_cq_dam_cq_dam_s7dam: &str, com_day_cq_dam_cq_dam_similaritysearch: &str, com_day_cq_dam_dam_webdav_support: &str, com_day_cq_pre_upgrade_tasks: &str, com_day_cq_replication_extensions: &str, com_day_cq_wcm_cq_msm_core: &str, com_day_cq_wcm_cq_wcm_translation: &str, day_commons_jrawio: &str, org_apache_aries_jmx_whiteboard: &str, org_apache_felix_http_sslfilter: &str, org_apache_felix_org_apache_felix_threaddump: &str, org_apache_felix_webconsole_plugins_ds: &str, org_apache_felix_webconsole_plugins_event: &str, org_apache_felix_webconsole_plugins_memoryusage: &str, org_apache_felix_webconsole_plugins_packageadmin: &str, org_apache_jackrabbit_oak_auth_ldap: &str, org_apache_jackrabbit_oak_segment_tar: &str, org_apache_jackrabbit_oak_solr_osgi: &str, org_apache_sling_bundleresource_impl: &str, org_apache_sling_commons_fsclassloader: &str, org_apache_sling_commons_log_webconsole: &str, org_apache_sling_datasource: &str, org_apache_sling_discovery_base: &str, org_apache_sling_discovery_oak: &str, org_apache_sling_discovery_support: &str, org_apache_sling_distribution_api: &str, org_apache_sling_distribution_core: &str, org_apache_sling_extensions_webconsolesecurityprovider: &str, org_apache_sling_hc_webconsole: &str, org_apache_sling_installer_console: &str, org_apache_sling_installer_provider_file: &str, org_apache_sling_installer_provider_jcr: &str, org_apache_sling_jcr_davex: &str, org_apache_sling_jcr_resourcesecurity: &str, org_apache_sling_jmx_provider: &str, org_apache_sling_launchpad_installer: &str, org_apache_sling_models_impl: &str, org_apache_sling_repoinit_parser: &str, org_apache_sling_resource_inventory: &str, org_apache_sling_resourceresolver: &str, org_apache_sling_scripting_javascript: &str, org_apache_sling_scripting_jst: &str, org_apache_sling_scripting_sightly_js_provider: &str, org_apache_sling_scripting_sightly_models_provider: &str, org_apache_sling_security: &str, org_apache_sling_servlets_compat: &str, org_apache_sling_servlets_get: &str, org_apache_sling_startupfilter_disabler: &str, org_apache_sling_tracer: &str, we_retail_client_app_core: &str) -> Box<Future<Item = ::models::ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_cert_impl_client_cert_auth_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, service_ranking: i32) -> Box<Future<Item = ::models::ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_ims(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, configid: &str, scope: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auth_ims_client_secret: &str, customizer_type: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_ims_impl_ims_config_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_configmanager_ims_configid: &str, ims_owning_entity: &str, aem_instance_id: &str, ims_service_code: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_ims_impl_ims_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str, oauth_provider_ims_authorization_url: &str, oauth_provider_ims_token_url: &str, oauth_provider_ims_profile_url: &str, oauth_provider_ims_extended_details_urls: Vec<String>, oauth_provider_ims_validate_token_url: &str, oauth_provider_ims_session_property: &str, oauth_provider_ims_service_token_client_id: &str, oauth_provider_ims_service_token_client_secret: &str, oauth_provider_ims_service_token: &str, ims_org_ref: &str, ims_group_mapping: Vec<String>, oauth_provider_ims_only_license_group: bool) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsImplImsProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_accesstoken_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, auth_token_provider_title: &str, auth_token_provider_default_claims: Vec<String>, auth_token_provider_endpoint: &str, auth_access_token_request: &str, auth_token_provider_keypair_alias: &str, auth_token_provider_conn_timeout: i32, auth_token_provider_so_timeout: i32, auth_token_provider_client_id: &str, auth_token_provider_scope: &str, auth_token_provider_reuse_access_token: bool, auth_token_provider_relaxed_ssl: bool, token_request_customizer_type: &str, auth_token_validator_type: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthAccesstokenProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, oauth_client_ids_allowed: Vec<String>, auth_bearer_sync_ims: bool, auth_token_request_parameter: &str, oauth_bearer_configid: &str, oauth_jwt_support: bool) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_impl_default_token_validator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auth_token_validator_type: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_impl_facebook_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_impl_github_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str, oauth_provider_github_authorization_url: &str, oauth_provider_github_token_url: &str, oauth_provider_github_profile_url: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplGithubProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_impl_granite_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str, oauth_provider_granite_authorization_url: &str, oauth_provider_granite_token_url: &str, oauth_provider_granite_profile_url: &str, oauth_provider_granite_extended_details_urls: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplGraniteProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_cookie_login_timeout: &str, oauth_cookie_max_age: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_cookie_login_timeout: &str, oauth_cookie_max_age: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_impl_twitter_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_oauth_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_config_id: &str, oauth_client_id: &str, oauth_client_secret: &str, oauth_scope: Vec<String>, oauth_config_provider_id: &str, oauth_create_users: bool, oauth_userid_property: &str, force_strict_username_matching: bool, oauth_encode_userids: bool, oauth_hash_userids: bool, oauth_call_back_url: &str, oauth_access_token_persist: bool, oauth_access_token_persist_cookie: bool, oauth_csrf_state_protection: bool, oauth_redirect_request_params: bool, oauth_config_siblings_allow: bool) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_requirement_impl_default_requirement_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, supported_paths: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_saml_saml_authentication_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: Vec<String>, service_ranking: i32, idp_url: &str, idp_cert_alias: &str, idp_http_redirect: bool, service_provider_entity_id: &str, assertion_consumer_service_url: &str, sp_private_key_alias: &str, key_store_password: &str, default_redirect_url: &str, user_id_attribute: &str, use_encryption: bool, create_user: bool, user_intermediate_path: &str, add_group_memberships: bool, group_membership_attribute: &str, default_groups: Vec<String>, name_id_format: &str, synchronize_attributes: Vec<String>, handle_logout: bool, logout_url: &str, clock_tolerance: i32, digest_method: &str, signature_method: &str, identity_sync_type: &str, idp_identifier: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_auth_sso_impl_sso_authentication_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, service_ranking: i32, jaas_control_flag: &str, jaas_realm_name: &str, jaas_ranking: i32, headers: Vec<String>, cookies: Vec<String>, parameters: Vec<String>, usermap: Vec<String>, format: &str, trusted_credentials_attribute: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_bundles_hc_impl_code_cache_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, minimum_code_cache_size: i32) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, ignored_bundles: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_bundles_hc_impl_jobs_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, max_queued_jobs: i32) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_comments_internal_comment_replication_content_filter_fac(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, replicate_comment_resource_types: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_compatrouter_impl_compat_switching_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, compatgroups: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_compatrouter_impl_routing_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, id: &str, compat_path: &str, new_path: &str) -> Box<Future<Item = ::models::ComAdobeGraniteCompatrouterImplRoutingConfigInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_compatrouter_impl_switch_mapping_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, group: &str, ids: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, fallback_paths: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_contexthub_impl_context_hub_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_granite_contexthub_silent_mode: bool, com_adobe_granite_contexthub_show_ui: bool) -> Box<Future<Item = ::models::ComAdobeGraniteContexthubImplContextHubImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_cors_impl_cors_policy_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, alloworigin: Vec<String>, alloworiginregexp: Vec<String>, allowedpaths: Vec<String>, exposedheaders: Vec<String>, maxage: i32, supportedheaders: Vec<String>, supportedmethods: Vec<String>, supportscredentials: bool) -> Box<Future<Item = ::models::ComAdobeGraniteCorsImplCorsPolicyImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_csrf_impl_csrf_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, filter_methods: Vec<String>, filter_enable_safe_user_agents: bool, filter_safe_user_agents: Vec<String>, filter_excluded_paths: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteCsrfImplCsrfFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_csrf_impl_csrf_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, csrf_token_expires_in: i32, sling_auth_requirements: &str) -> Box<Future<Item = ::models::ComAdobeGraniteCsrfImplCsrfServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, username: &str, encrypted_password: &str) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, agent_name: &str, diff_path: &str, observed_path: &str, service_name: &str, property_names: &str, distribution_delay: i32, service_user_target: &str) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_distribution_core_impl_diff_diff_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, diff_path: &str, service_name: &str, service_user_target: &str) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_distribution_core_impl_distribution_to_replication_even(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, importer_name: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_distribution_core_impl_replication_adapters_replicat(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_name: &str, forward_requests: bool) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_distribution_core_impl_replication_distribution_trans(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, forward_requests: bool) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_distribution_core_impl_transport_access_token_distribu(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, service_name: &str, user_id: &str, access_token_provider_target: &str) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_frags_impl_check_http_header_flag(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, feature_name: &str, feature_description: &str, http_header_name: &str, http_header_valuepattern: &str) -> Box<Future<Item = ::models::ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_frags_impl_random_feature(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, feature_name: &str, feature_description: &str, active_percentage: &str, cookie_name: &str, cookie_max_age: i32) -> Box<Future<Item = ::models::ComAdobeGraniteFragsImplRandomFeatureInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_httpcache_file_file_cache_store(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_granite_httpcache_file_document_root: &str, com_adobe_granite_httpcache_file_include_host: &str) -> Box<Future<Item = ::models::ComAdobeGraniteHttpcacheFileFileCacheStoreInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_httpcache_impl_outer_cache_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_granite_httpcache_url_paths: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_i18n_impl_bundle_pseudo_translations(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pseudo_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_i18n_impl_preferences_locale_resolver_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, security_preferences_name: &str) -> Box<Future<Item = ::models::ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_infocollector_info_collector(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, granite_infocollector_include_thread_dumps: bool, granite_infocollector_include_heap_dump: bool) -> Box<Future<Item = ::models::ComAdobeGraniteInfocollectorInfoCollectorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_granite_jetty_ssl_port: i32, com_adobe_granite_jetty_ssl_keystore_user: &str, com_adobe_granite_jetty_ssl_keystore_password: &str, com_adobe_granite_jetty_ssl_ciphersuites_excluded: Vec<String>, com_adobe_granite_jetty_ssl_ciphersuites_included: Vec<String>, com_adobe_granite_jetty_ssl_client_certificate: &str) -> Box<Future<Item = ::models::ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_license_impl_license_check_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, check_internval: i32, exclude_ids: Vec<String>, encrypt_ping: bool) -> Box<Future<Item = ::models::ComAdobeGraniteLicenseImplLicenseCheckFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_logging_impl_log_analyser_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, messages_queue_size: i32, logger_config: Vec<String>, messages_size: i32) -> Box<Future<Item = ::models::ComAdobeGraniteLoggingImplLogAnalyserImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_logging_impl_log_error_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, granite_maintenance_mandatory: bool, job_topics: &str) -> Box<Future<Item = ::models::ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, job_topics: &str) -> Box<Future<Item = ::models::ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, full_gc_days: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_monitoring_impl_script_config_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, script_filename: &str, script_display: &str, script_path: &str, script_platform: Vec<String>, interval: i32, jmxdomain: &str) -> Box<Future<Item = ::models::ComAdobeGraniteMonitoringImplScriptConfigImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, jaas_control_flag: &str, jaas_realm_name: &str, jaas_ranking: i32, oauth_offline_validation: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_oauth_server_impl_access_token_cleanup_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_client_revocation_active: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_paths: &str, oauth_revocation_active: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_issuer: &str, oauth_access_token_expires_in: &str, osgi_http_whiteboard_servlet_pattern: &str, osgi_http_whiteboard_context_select: &str) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_token_revocation_active: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_offloading_impl_offloading_configurator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, offloading_transporter: &str, offloading_cleanup_payload: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_offloading_impl_offloading_job_cloner(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, offloading_jobcloner_enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_offloading_impl_offloading_job_offloader(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, offloading_offloader_enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, offloading_agentmanager_enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_transport_agent_to_worker_prefix: &str, default_transport_agent_to_master_prefix: &str, default_transport_input_package: &str, default_transport_output_package: &str, default_transport_replication_synchronous: bool, default_transport_contentpackage: bool, offloading_transporter_default_enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, omnisearch_suggestion_requiretext_min: i32, omnisearch_suggestion_spellcheck_require: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_optout_impl_opt_out_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, optout_cookies: Vec<String>, optout_headers: Vec<String>, optout_whitelist_cookies: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteOptoutImplOptOutServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_queries_impl_hc_async_index_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, indexing_critical_threshold: i32, indexing_warn_threshold: i32, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_queries_impl_hc_large_index_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, large_index_critical_threshold: i32, large_index_warn_threshold: i32, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_queries_impl_hc_queries_status_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_queries_impl_hc_query_health_check_metrics(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, get_period: i32) -> Box<Future<Item = ::models::ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_queries_impl_hc_query_limits_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_replication_hc_impl_replication_queue_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, number_of_retries_allowed: i32, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, exclude_search_path: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_repository_hc_impl_default_logins_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, account_logins: Vec<String>, console_logins: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_repository_hc_impl_disk_space_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, disk_space_warn_threshold: i32, disk_space_error_threshold: i32) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_repository_impl_commit_stats_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, interval_seconds: i32, commits_per_interval_threshold: i32, max_location_length: i32, max_details_shown: i32, min_details_percentage: i32, thread_matchers: Vec<String>, max_greedy_depth: i32, greedy_stack_matchers: &str, stack_filters: Vec<String>, stack_matchers: Vec<String>, stack_categorizers: Vec<String>, stack_shorteners: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryImplCommitStatsConfigInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_repository_service_user_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, serviceusers_simple_subject_population: bool, serviceusers_list: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryServiceUserConfigurationInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_resourcestatus_impl_composite_status_type(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, types: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_root: &str) -> Box<Future<Item = ::models::ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mime_allow_empty: bool, mime_allowed: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_roots: &str) -> Box<Future<Item = ::models::ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_rest_impl_servlet_default_get_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_limit: i32, use_absolute_uri: bool) -> Box<Future<Item = ::models::ComAdobeGraniteRestImplServletDefaultGetServletInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_security_user_user_properties_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, adapter_condition: &str, granite_userproperties_nodetypes: Vec<String>, granite_userproperties_resourcetypes: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteSecurityUserUserPropertiesServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_socialgraph_impl_social_graph_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, group2member_relationship_outgoing: &str, group2member_excluded_outgoing: Vec<String>, group2member_relationship_incoming: &str, group2member_excluded_incoming: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, jmx_objectname: &str) -> Box<Future<Item = ::models::ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, adapter_condition: &str) -> Box<Future<Item = ::models::ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, archiving_enabled: bool, scheduler_expression: &str, archive_since_days_completed: i32) -> Box<Future<Item = ::models::ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, purge_completed: bool, completed_age: i32, purge_active: bool, active_age: i32, save_threshold: i32) -> Box<Future<Item = ::models::ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, adapter_condition: &str, taskmanager_admingroups: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_threaddump_thread_dump_collector(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_period: i32, scheduler_run_on: &str, granite_threaddump_enabled: bool, granite_threaddump_dumps_per_file: i32, granite_threaddump_enable_gzip_compression: bool, granite_threaddump_enable_directories_compression: bool, granite_threaddump_enable_j_stack: bool, granite_threaddump_max_backup_days: i32, granite_threaddump_backup_clean_trigger: &str) -> Box<Future<Item = ::models::ComAdobeGraniteThreaddumpThreadDumpCollectorInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, translation_factory: &str, default_connector_label: &str, default_connector_attribution: &str, default_connector_workspace_id: &str, default_connector_subscription_key: &str, language_map_location: &str, category_map_location: &str, retry_attempts: i32, timeout_count: i32) -> Box<Future<Item = ::models::ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_translation_core_impl_translation_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_connector_name: &str, default_category: &str) -> Box<Future<Item = ::models::ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, htmllibmanager_timing: bool, htmllibmanager_debug_init_js: &str, htmllibmanager_minify: bool, htmllibmanager_debug: bool, htmllibmanager_gzip: bool, htmllibmanager_max_data_uri_size: i32, htmllibmanager_maxage: i32, htmllibmanager_force_cq_url_info: bool, htmllibmanager_defaultthemename: &str, htmllibmanager_defaultuserthemename: &str, htmllibmanager_clientmanager: &str, htmllibmanager_path_list: Vec<String>, htmllibmanager_excluded_path_list: Vec<String>, htmllibmanager_processor_js: Vec<String>, htmllibmanager_processor_css: Vec<String>, htmllibmanager_longcache_patterns: Vec<String>, htmllibmanager_longcache_format: &str, htmllibmanager_use_file_system_output_cache: bool, htmllibmanager_file_system_output_cache_location: &str, htmllibmanager_disable_replacement: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_console_publish_workflow_publish_event_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, granite_workflow_workflow_publish_event_service_enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, bucket_size: i32) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_core_job_external_process_job_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_timeout: i32, max_timeout: i32, default_period: i32) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_core_job_job_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, job_topics: Vec<String>, allow_self_process_termination: bool) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreJobJobHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, job_topics: &str) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_core_payload_map_cache(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, get_system_workflow_models: Vec<String>, get_package_root_path: &str) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCorePayloadMapCacheInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_core_payloadmap_payload_move_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, payload_move_white_list: Vec<String>, payload_move_handle_from_workflow_process: bool) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_core_workflow_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_workflow_config_workflow_packages_root_path: Vec<String>, cq_workflow_config_workflow_process_legacy_mode: bool, cq_workflow_config_allow_locking: bool) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreWorkflowConfigInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_core_workflow_session_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, granite_workflowinbox_sort_property_name: &str, granite_workflowinbox_sort_order: &str, cq_workflow_job_retry: i32, cq_workflow_superuser: Vec<String>, granite_workflow_inbox_query_size: i32, granite_workflow_admin_user_group_filter: bool, granite_workflow_enforce_workitem_assignee_permissions: bool, granite_workflow_enforce_workflow_initiator_permissions: bool, granite_workflow_inject_tenant_id_in_job_topics: bool, granite_workflow_max_purge_save_threshold: i32, granite_workflow_max_purge_query_count: i32) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_granite_workflow_purge_scheduler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduledpurge_name: &str, scheduledpurge_workflow_status: &str, scheduledpurge_model_ids: Vec<String>, scheduledpurge_daysold: i32) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowPurgeSchedulerInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_octopus_ncomm_bootstrap(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_connections: i32, max_requests: i32, request_timeout: i32, request_retries: i32, launch_timeout: i32) -> Box<Future<Item = ::models::ComAdobeOctopusNcommBootstrapInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, communities_integration_livefyre_sling_event_filter: &str) -> Box<Future<Item = ::models::ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo, Error = Error<serde_json::Value>>>;
    fn com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_connections: &str, max_requests: &str, request_timeout: &str, log_dir: &str) -> Box<Future<Item = ::models::ComAdobeXmpWorkerFilesNcommXmpFilesNCommInfo, Error = Error<serde_json::Value>>>;
    fn com_day_commons_datasource_jdbcpool_jdbc_pool_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jdbc_driver_class: &str, jdbc_connection_uri: &str, jdbc_username: &str, jdbc_password: &str, jdbc_validation_query: &str, default_readonly: bool, default_autocommit: bool, pool_size: i32, pool_max_wait_msec: i32, datasource_name: &str, datasource_svc_properties: Vec<String>) -> Box<Future<Item = ::models::ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_day_commons_httpclient(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, proxy_enabled: bool, proxy_host: &str, proxy_user: &str, proxy_password: &str, proxy_ntlm_host: &str, proxy_ntlm_domain: &str, proxy_exceptions: Vec<String>) -> Box<Future<Item = ::models::ComDayCommonsHttpclientInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_impl_store_properties_change_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_store_listener_additional_store_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, allowed_paths: Vec<String>, cq_analytics_saint_exporter_pagesize: i32) -> Box<Future<Item = ::models::ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, report_fetch_attempts: i32, report_fetch_delay: i32) -> Box<Future<Item = ::models::ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_adapterfactory_contextstores: Vec<String>) -> Box<Future<Item = ::models::ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_sitecatalyst_service_datacenter_url: Vec<String>, devhostnamepatterns: Vec<String>, connection_timeout: i32, socket_timeout: i32) -> Box<Future<Item = ::models::ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_testandtarget_impl_account_options_updater(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_testandtarget_accountoptionsupdater_enabled: bool) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_testandtarget_deleteauthoractivitylistener_enabled: bool) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled: bool) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_testandtarget_impl_segment_importer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_testandtarget_segmentimporter_enabled: bool) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_testandtarget_impl_service_web_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, endpoint_uri: &str, connection_timeout: i32, socket_timeout: i32) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, testandtarget_endpoint_url: &str) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_testandtarget_api_url: &str, cq_analytics_testandtarget_timeout: i32, cq_analytics_testandtarget_sockettimeout: i32, cq_analytics_testandtarget_recommendations_url_replace: &str, cq_analytics_testandtarget_recommendations_url_replacewith: &str) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_auth_impl_cug_cug_support_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cug_exempted_principals: Vec<String>, cug_enabled: bool, cug_principals_regex: &str, cug_principals_replacement: &str) -> Box<Future<Item = ::models::ComDayCqAuthImplCugCugSupportImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_auth_impl_login_selector_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, service_ranking: i32, auth_loginselector_mappings: Vec<String>, auth_loginselector_changepw_mappings: Vec<String>, auth_loginselector_defaultloginpage: &str, auth_loginselector_defaultchangepwpage: &str, auth_loginselector_handle: Vec<String>, auth_loginselector_handle_all_extensions: bool) -> Box<Future<Item = ::models::ComDayCqAuthImplLoginSelectorHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_commons_impl_externalizer_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, externalizer_domains: Vec<String>, externalizer_host: &str, externalizer_contextpath: &str, externalizer_encodedpath: bool) -> Box<Future<Item = ::models::ComDayCqCommonsImplExternalizerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_commons_servlets_root_mapping_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, rootmapping_target: &str) -> Box<Future<Item = ::models::ComDayCqCommonsServletsRootMappingServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, codeupgradetasks: Vec<String>, codeupgradetaskfilters: Vec<String>) -> Box<Future<Item = ::models::ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, upgrade_task_ignore_list: Vec<String>) -> Box<Future<Item = ::models::ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, effective_bundle_list_path: &str) -> Box<Future<Item = ::models::ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_contentsync_impl_content_sync_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, contentsync_fallback_authorizable: &str, contentsync_fallback_updateuser: &str) -> Box<Future<Item = ::models::ComDayCqContentsyncImplContentSyncManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_commons_handler_standard_image_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, large_file_threshold: i32, large_comment_threshold: i32, cq_dam_enable_ext_meta_extraction: bool) -> Box<Future<Item = ::models::ComDayCqDamCommonsHandlerStandardImageHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_commons_metadata_xmp_filter_black_white(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, xmp_filter_apply_whitelist: bool, xmp_filter_whitelist: Vec<String>, xmp_filter_apply_blacklist: bool, xmp_filter_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_commons_util_impl_asset_cache_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, large_file_min: i32, cache_apply: bool, mime_types: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCommonsUtilImplAssetCacheImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_config_annotation_pdf_document_width: i32, cq_dam_config_annotation_pdf_document_height: i32, cq_dam_config_annotation_pdf_document_padding_horizontal: i32, cq_dam_config_annotation_pdf_document_padding_vertical: i32, cq_dam_config_annotation_pdf_font_size: i32, cq_dam_config_annotation_pdf_font_color: &str, cq_dam_config_annotation_pdf_font_family: &str, cq_dam_config_annotation_pdf_font_light: &str, cq_dam_config_annotation_pdf_margin_text_image: i32, cq_dam_config_annotation_pdf_min_image_height: i32, cq_dam_config_annotation_pdf_review_status_width: i32, cq_dam_config_annotation_pdf_review_status_color_approved: &str, cq_dam_config_annotation_pdf_review_status_color_rejected: &str, cq_dam_config_annotation_pdf_review_status_color_changes_requested: &str, cq_dam_config_annotation_pdf_annotation_marker_width: i32, cq_dam_config_annotation_pdf_asset_minheight: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_asset_move_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplAssetMoveListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_adhoc_asset_share_prezip_maxcontentsize: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_image_cache_max_memory: i32, cq_dam_image_cache_max_age: i32, cq_dam_image_cache_max_dimension: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplCacheCqBufferedImageCacheInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_dam_change_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, changeeventlistener_observed_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplDamChangeEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_dam_event_purge_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, max_saved_activities: i32, save_interval: i32, enable_activity_purge: bool, event_types: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplDamEventPurgeServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_dam_event_recorder_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, event_queue_length: i32, eventrecorder_enabled: bool, eventrecorder_blacklist: Vec<String>, eventrecorder_eventtypes: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplDamEventRecorderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_event_dam_event_audit_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplEventDamEventAuditListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_expiry_notification_job_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_expiry_notification_scheduler_istimebased: bool, cq_dam_expiry_notification_scheduler_timebased_rule: &str, cq_dam_expiry_notification_scheduler_period_rule: i32, send_email: bool, asset_expired_limit: i32, prior_notification_seconds: i32, cq_dam_expiry_notification_url_protocol: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplExpiryNotificationJobImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, skip_bufferedcache: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplGfxCommonsGfxRendererInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_handler_eps_format_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mimetype: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplHandlerEpsFormatHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_handler_indesign_format_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mimetype: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_handler_jpeg_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_enable_ext_meta_extraction: bool, large_file_threshold: i32, large_comment_threshold: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplHandlerJpegHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, xmphandler_cq_formats: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jmx_objectname: &str, property_measure_enabled: bool, property_name: &str, property_max_wait_ms: i32, property_max_rate: f32, fulltext_measure_enabled: bool, fulltext_name: &str, fulltext_max_wait_ms: i32, fulltext_max_rate: f32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jmx_objectname: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jmx_objectname: &str, active: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, operation: &str, email_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, operation: &str, operation_icon: &str, topic_name: &str, email_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_lightbox_lightbox_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_paths: &str, sling_servlet_methods: Vec<String>, cq_dam_enable_anonymous: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplLightboxLightboxServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_metadata_editor_select_component_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, granitedata: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_allow_all_mime: bool, cq_dam_allowed_asset_mimes: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_detect_asset_mime_from_content: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_missing_metadata_notification_job(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_missingmetadata_notification_scheduler_istimebased: bool, cq_dam_missingmetadata_notification_scheduler_timebased_rule: &str, cq_dam_missingmetadata_notification_scheduler_period_rule: i32, cq_dam_missingmetadata_notification_recipient: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplMissingMetadataNotificationJobInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, notify_on_complete: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_process_text_extraction_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mime_types: Vec<String>, max_extract: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplProcessTextExtractionProcessInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_rendition_maker_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, xmp_propagate: bool, xmp_excludes: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplRenditionMakerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_reports_report_export_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, query_batch_size: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplReportsReportExportServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_reports_report_purge_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, max_saved_reports: i32, time_duration: i32, enable_report_purge: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplReportsReportPurgeServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_asset_download_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletAssetDownloadServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_asset_status_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_batch_status_maxassets: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletAssetStatusServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_batch_indesign_maxassets: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletAssetXmpSearchServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_batch_metadata_asset_default: Vec<String>, cq_dam_batch_metadata_collection_default: Vec<String>, cq_dam_batch_metadata_maxresources: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletBatchMetadataServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_binary_provider_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_resource_types: Vec<String>, sling_servlet_methods: Vec<String>, cq_dam_drm_enable: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletBinaryProviderServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_collection_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_batch_collection_properties: Vec<String>, cq_dam_batch_collection_maxcollections: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletCollectionServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_collections_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_batch_collections_properties: Vec<String>, cq_dam_batch_collections_limit: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletCollectionsServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_companion_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, more_info: &str, mntoverlaydamguicontentassetsmoreinfo_htmlpath: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletCompanionServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_create_asset_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, detect_duplicate: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletCreateAssetServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_mime_type_blacklist: Vec<String>, cq_dam_empty_mime: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletDamContentDispositionFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_guid_lookup_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_core_guidlookupfilter_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletGuidLookupFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_health_check_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_sync_workflow_id: &str, cq_dam_sync_folder_types: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletHealthCheckServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_metadata_get_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_resource_types: &str, sling_servlet_methods: &str, sling_servlet_extensions: &str, sling_servlet_selectors: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletMetadataGetServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_drm_enable: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_servlet_resource_collection_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_resource_types: Vec<String>, sling_servlet_methods: &str, sling_servlet_selectors: &str, download_config: &str, view_selector: &str, send_email: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletResourceCollectionServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, create_preview_enabled: bool, update_preview_enabled: bool, queue_size: i32, folder_preview_rendition_regex: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_impl_unzip_unzip_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_config_unzip_maxuncompressedsize: i32, cq_dam_config_unzip_encoding: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplUnzipUnzipConfigInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_process_exif_tool_extract_metadata_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, cq_dam_enable_sha1: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_process_extract_metadata_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, cq_dam_enable_sha1: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreProcessExtractMetadataProcessInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_core_process_metadata_processor_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, cq_dam_enable_sha1: bool, cq_dam_metadata_xssprotected_properties: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreProcessMetadataProcessorProcessInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_handler_ffmpeg_locator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, executable_searchpath: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamHandlerFfmpegLocatorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, fontmgr_system_font_dir: Vec<String>, fontmgr_adobe_font_dir: &str, fontmgr_customer_font_dir: &str) -> Box<Future<Item = ::models::ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_handler_standard_pdf_pdf_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, raster_annotation: bool) -> Box<Future<Item = ::models::ComDayCqDamHandlerStandardPdfPdfHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_handler_standard_ps_post_script_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, raster_annotation: bool) -> Box<Future<Item = ::models::ComDayCqDamHandlerStandardPsPostScriptHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_handler_standard_psd_psd_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, large_file_threshold: i32) -> Box<Future<Item = ::models::ComDayCqDamHandlerStandardPsdPsdHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_ids_impl_ids_job_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable_multisession: bool, ids_cc_enable: bool, enable_retry: bool, enable_retry_scripterror: bool, externalizer_domain_cqhost: &str, externalizer_domain_http: &str) -> Box<Future<Item = ::models::ComDayCqDamIdsImplIdsJobProcessorInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_ids_impl_ids_pool_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_errors_to_blacklist: i32, retry_interval_to_whitelist: i32, connect_timeout: i32, socket_timeout: i32, process_label: &str, connection_use_max: i32) -> Box<Future<Item = ::models::ComDayCqDamIdsImplIdsPoolManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, extract_pages: bool) -> Box<Future<Item = ::models::ComDayCqDamInddImplHandlerIndesignXmpHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, snippetcreation_maxcollections: i32) -> Box<Future<Item = ::models::ComDayCqDamInddImplServletSnippetCreationServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_indd_process_indd_media_extract_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, cq_dam_indd_pages_regex: &str, ids_job_decoupled: bool, ids_job_workflow_model: &str) -> Box<Future<Item = ::models::ComDayCqDamInddProcessInddMediaExtractProcessInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, batch_commit_size: i32) -> Box<Future<Item = ::models::ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_performance_internal_asset_performance_report_sync_job(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str) -> Box<Future<Item = ::models::ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, delete_zip_file: bool) -> Box<Future<Item = ::models::ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, scheduler_concurrent: bool) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_post_operation: &str, sling_servlet_methods: &str) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_post_operation: &str, sling_servlet_methods: &str) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_s7dam_damchangeeventlistener_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_paths: &str, sling_servlet_methods: &str) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name: i32, cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name: i32, cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name: i32, cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name: i32, cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name: i32, cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name: i32, cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name: i32) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_scene7_impl_scene7_api_client_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_scene7_apiclient_recordsperpage_nofilter_name: i32, cq_dam_scene7_apiclient_recordsperpage_withfilter_name: i32) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7ApiClientImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_scene7_assetmimetypeservice_mapping: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_scene7_configurationeventlistener_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_scene7_damchangeeventlistener_enabled: bool, cq_dam_scene7_damchangeeventlistener_observed_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scene7_flash_templates_rti: &str, scene7_flash_templates_rsi: &str, scene7_flash_templates_rb: &str, scene7_flash_templates_rurl: &str, scene7_flash_template_url_format_parameter: &str) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_scene7_impl_scene7_upload_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_scene7_uploadservice_activejobtimeout_label: i32, cq_dam_scene7_uploadservice_connectionmaxperroute_label: i32) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7UploadServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, get_cache_expiration_unit: &str, get_cache_expiration_value: i32) -> Box<Future<Item = ::models::ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, locale: &str, ims_config: &str) -> Box<Future<Item = ::models::ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_dam_video_impl_servlet_video_test_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamVideoImplServletVideoTestServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_extwidget_servlets_image_sprite_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_width: i32, max_height: i32) -> Box<Future<Item = ::models::ComDayCqExtwidgetServletsImageSpriteServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_image_internal_font_font_helper(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, fontpath: Vec<String>, oversampling_factor: i32) -> Box<Future<Item = ::models::ComDayCqImageInternalFontFontHelperInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_jcrclustersupport_cluster_start_level_controller(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cluster_level_enable: bool, cluster_master_level: i32, cluster_slave_level: i32) -> Box<Future<Item = ::models::ComDayCqJcrclustersupportClusterStartLevelControllerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mailer_default_mail_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, smtp_host: &str, smtp_port: i32, smtp_user: &str, smtp_password: &str, from_address: &str, smtp_ssl: bool, smtp_starttls: bool, debug_email: bool) -> Box<Future<Item = ::models::ComDayCqMailerDefaultMailServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mailer_impl_cq_mailing_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_recipient_count: &str) -> Box<Future<Item = ::models::ComDayCqMailerImplCqMailingServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mailer_impl_email_cq_email_template_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mailer_email_charset: &str) -> Box<Future<Item = ::models::ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mailer_impl_email_cq_retriever_template_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mailer_email_embed: bool, mailer_email_charset: &str, mailer_email_retriever_user_id: &str, mailer_email_retriever_user_pwd: &str) -> Box<Future<Item = ::models::ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mcm_campaign_impl_integration_config_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, aem_mcm_campaign_form_constraints: Vec<String>, aem_mcm_campaign_public_url: &str, aem_mcm_campaign_relaxed_ssl: bool) -> Box<Future<Item = ::models::ComDayCqMcmCampaignImplIntegrationConfigImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, from_address: &str, sender_host: &str, max_bounce_count: &str) -> Box<Future<Item = ::models::ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mcm_impl_mcm_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, experience_indirection: Vec<String>, touchpoint_indirection: Vec<String>) -> Box<Future<Item = ::models::ComDayCqMcmImplMcmConfigurationInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_notification_impl_notification_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str) -> Box<Future<Item = ::models::ComDayCqNotificationImplNotificationServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, forcelocation: bool) -> Box<Future<Item = ::models::ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_polling_importer_impl_managed_poll_config_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, id: &str, enabled: bool, reference: bool, interval: i32, expression: &str, source: &str, target: &str, login: &str, password: &str) -> Box<Future<Item = ::models::ComDayCqPollingImporterImplManagedPollConfigImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_polling_importer_impl_managed_polling_importer_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, importer_user: &str) -> Box<Future<Item = ::models::ComDayCqPollingImporterImplManagedPollingImporterImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_polling_importer_impl_polling_importer_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, importer_min_interval: i32, importer_user: &str, exclude_paths: Vec<String>, include_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqPollingImporterImplPollingImporterImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_audit_replication_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32) -> Box<Future<Item = ::models::ComDayCqReplicationAuditReplicationEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_content_static_content_builder(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, host: &str, port: i32) -> Box<Future<Item = ::models::ComDayCqReplicationContentStaticContentBuilderInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_impl_agent_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, job_topics: &str, service_user_target: &str, agent_provider_target: &str) -> Box<Future<Item = ::models::ComDayCqReplicationImplAgentManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_impl_content_durbo_binary_less_content_builder(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, binary_threshold: i32) -> Box<Future<Item = ::models::ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, preserve_hierarchy_nodes: bool, ignore_versioning: bool, import_acl: bool, save_threshold: i32, preserve_user_paths: bool, preserve_uuid: bool, preserve_uuid_nodetypes: Vec<String>, preserve_uuid_subtrees: Vec<String>, auto_commit: bool) -> Box<Future<Item = ::models::ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_impl_replication_content_factory_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, replication_content_use_file_storage: bool, replication_content_max_commit_attempts: i32) -> Box<Future<Item = ::models::ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_impl_replication_receiver_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, receiver_tmpfile_threshold: i32, receiver_packages_use_install: bool) -> Box<Future<Item = ::models::ComDayCqReplicationImplReplicationReceiverImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_impl_replicator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, distribute_events: bool) -> Box<Future<Item = ::models::ComDayCqReplicationImplReplicatorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_impl_reverse_replicator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_period: i32) -> Box<Future<Item = ::models::ComDayCqReplicationImplReverseReplicatorInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_impl_transport_binary_less_transport_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disabled_cipher_suites: Vec<String>, enabled_cipher_suites: Vec<String>) -> Box<Future<Item = ::models::ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_replication_impl_transport_http(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disabled_cipher_suites: Vec<String>, enabled_cipher_suites: Vec<String>) -> Box<Future<Item = ::models::ComDayCqReplicationImplTransportHttpInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_reporting_impl_cache_cache_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, repcache_enable: bool, repcache_ttl: i32, repcache_max: i32) -> Box<Future<Item = ::models::ComDayCqReportingImplCacheCacheImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_reporting_impl_config_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, repconf_timezone: &str, repconf_locale: &str, repconf_snapshots: &str, repconf_repdir: &str, repconf_hourofday: i32, repconf_minofhour: i32, repconf_maxrows: i32, repconf_fakedata: bool, repconf_snapshotuser: &str, repconf_enforcesnapshotuser: bool) -> Box<Future<Item = ::models::ComDayCqReportingImplConfigServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_reporting_impl_r_log_analyzer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, request_log_output: &str) -> Box<Future<Item = ::models::ComDayCqReportingImplRLogAnalyzerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_rewriter_linkchecker_impl_link_checker_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_period: i32, scheduler_concurrent: bool, service_bad_link_tolerance_interval: i32, service_check_override_patterns: Vec<String>, service_cache_broken_internal_links: bool, service_special_link_prefix: Vec<String>, service_special_link_patterns: Vec<String>) -> Box<Future<Item = ::models::ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_rewriter_linkchecker_impl_link_checker_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_period: i32, scheduler_concurrent: bool, good_link_test_interval: i32, bad_link_test_interval: i32, link_unused_interval: i32, connection_timeout: i32) -> Box<Future<Item = ::models::ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, linkcheckertransformer_disable_rewriting: bool, linkcheckertransformer_disable_checking: bool, linkcheckertransformer_map_cache_size: i32, linkcheckertransformer_strict_extension_check: bool, linkcheckertransformer_strip_htmlt_extension: bool, linkcheckertransformer_rewrite_elements: Vec<String>, linkcheckertransformer_strip_extension_path_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_max_links_per_host: i32, service_save_external_link_references: bool) -> Box<Future<Item = ::models::ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_rewriter_processor_impl_html_parser_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, htmlparser_process_tags: Vec<String>, htmlparser_preserve_camel_case: bool) -> Box<Future<Item = ::models::ComDayCqRewriterProcessorImplHtmlParserFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_search_impl_builder_query_builder_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, excerpt_properties: Vec<String>, cache_max_entries: i32, cache_entry_lifetime: i32, xpath_union: bool) -> Box<Future<Item = ::models::ComDayCqSearchImplBuilderQueryBuilderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_search_suggest_impl_suggestion_index_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path_builder_target: &str, suggest_basepath: &str) -> Box<Future<Item = ::models::ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_searchpromote_impl_publish_search_promote_config_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_searchpromote_confighandler_enabled: bool) -> Box<Future<Item = ::models::ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_searchpromote_impl_search_promote_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_searchpromote_configuration_server_uri: &str, cq_searchpromote_configuration_environment: &str, connection_timeout: i32, socket_timeout: i32) -> Box<Future<Item = ::models::ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_security_acl_setup(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_aclsetup_rules: Vec<String>) -> Box<Future<Item = ::models::ComDayCqSecurityAclSetupInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_statistics_impl_statistics_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_period: i32, scheduler_concurrent: bool, path: &str, workspace: &str, keywords_path: &str, async_entries: bool) -> Box<Future<Item = ::models::ComDayCqStatisticsImplStatisticsServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, validation_enabled: bool) -> Box<Future<Item = ::models::ComDayCqTaggingImplJcrTagManagerFactoryImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_tagging_impl_search_tag_predicate_evaluator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ignore_path: bool) -> Box<Future<Item = ::models::ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_tagging_impl_tag_garbage_collector(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str) -> Box<Future<Item = ::models::ComDayCqTaggingImplTagGarbageCollectorInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_pagesupdatehandler_imageresourcetypes: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_contentsync_pathrewritertransformer_mapping_links: Vec<String>, cq_contentsync_pathrewritertransformer_mapping_clientlibs: Vec<String>, cq_contentsync_pathrewritertransformer_mapping_images: Vec<String>, cq_contentsync_pathrewritertransformer_attribute_pattern: &str, cq_contentsync_pathrewritertransformer_clientlibrary_pattern: &str, cq_contentsync_pathrewritertransformer_clientlibrary_replace: &str) -> Box<Future<Item = ::models::ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, authoring_ui_mode_service_default: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplAuthoringUiModeServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_commands_wcm_command_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, wcmcommandservlet_delete_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplCommandsWcmCommandServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dim_default_mode: &str, dim_appcache_enabled: bool) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_event_page_event_audit_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, configured: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplEventPageEventAuditListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_event_page_post_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplEventPagePostProcessorInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_event_repository_change_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, paths: Vec<String>, excluded_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_event_template_post_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, paths: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplEventTemplatePostProcessorInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_language_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, langmgr_list_path: &str, langmgr_country_default: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplLanguageManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, link_expired_prefix: &str, link_expired_remove: bool, link_expired_suffix: &str, link_invalid_prefix: &str, link_invalid_remove: bool, link_invalid_suffix: &str, link_predated_prefix: &str, link_predated_remove: bool, link_predated_suffix: &str, link_wcmmodes: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, page_info_provider_property_regex_default: &str, page_info_provider_property_name: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_page_page_manager_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, illegal_char_mapping: &str, page_sub_tree_activation_check: bool) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_references_content_content_reference_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, content_reference_config_resource_types: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dam_showexpired: bool, dam_showhidden: bool, tag_title_search: bool, guess_total: &str, dam_expiry_property: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, item_resource_types: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, guess_total: &str, tag_title_search: bool) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_servlets_find_replace_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scope: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsFindReplaceServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_servlets_reference_search_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, referencesearchservlet_max_references_per_page: i32, referencesearchservlet_max_pages: i32) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsReferenceSearchServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, workspace: &str, dimensions: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsThumbnailServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_utils_default_page_name_validator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, non_valid_chars: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_externalizer_domain: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_version_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, versionmanager_create_version_on_activation: bool, versionmanager_purging_enabled: bool, versionmanager_purge_paths: Vec<String>, versionmanager_iv_paths: Vec<String>, versionmanager_max_age_days: i32, versionmanager_max_number_versions: i32, versionmanager_min_number_versions: i32) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplVersionManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_version_purge_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, versionpurge_paths: Vec<String>, versionpurge_recursive: bool, versionpurge_max_versions: i32, versionpurge_min_versions: i32, versionpurge_max_age_days: i32) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplVersionPurgeTaskInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_warp_time_warp_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, filter_order: &str, filter_scope: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplWarpTimeWarpFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_wcm_debug_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, wcmdbgfilter_enabled: bool, wcmdbgfilter_jsp_debug: bool) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplWcmDebugFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_impl_wcm_developer_mode_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, wcmdevmodefilter_enabled: bool) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplWcmDeveloperModeFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_mvt_mvt_statistics_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mvtstatistics_trackingurl: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreMvtMvtStatisticsImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_stats_page_view_statistics_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pageviewstatistics_trackingurl: &str, pageviewstatistics_trackingscript_enabled: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreStatsPageViewStatisticsImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_core_wcm_request_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, wcmfilter_mode: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreWcmRequestFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_design_package_importer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, extract_filter: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterDesignPackageImporterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_impl_canvas_builder_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, filepattern: &str, build_page_nodes: bool, build_client_libs: bool, build_canvas_component: bool) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, min_thread_pool_size: i32, max_thread_pool_size: i32) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, search_pattern: &str, replace_pattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, filepattern: &str, device_groups: Vec<String>, build_page_nodes: bool, build_client_libs: bool, build_canvas_component: bool) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_name: &str, sling_servlet_resource_types: &str, sling_servlet_selectors: &str, sling_servlet_methods: Vec<String>, forms_formchooserservlet_advansesearch_require: bool) -> Box<Future<Item = ::models::ComDayCqWcmFoundationFormsImplFormChooserServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, forms_formparagraphpostprocessor_enabled: bool, forms_formparagraphpostprocessor_formresourcetypes: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name_whitelist: &str, allow_expressions: bool) -> Box<Future<Item = ::models::ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_foundation_forms_impl_mail_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_resource_types: &str, sling_servlet_selectors: &str, resource_whitelist: Vec<String>, resource_blacklist: &str) -> Box<Future<Item = ::models::ComDayCqWcmFoundationFormsImplMailServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, adapt_supported_widths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_foundation_impl_http_auth_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, auth_http_nologin: bool, auth_http_realm: &str, auth_default_loginpage: &str, auth_cred_form: Vec<String>, auth_cred_utf8: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationImplHttpAuthHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_foundation_impl_page_impressions_tracker(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_auth_requirements: &str) -> Box<Future<Item = ::models::ComDayCqWcmFoundationImplPageImpressionsTrackerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_foundation_impl_page_redirect_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, excluded_resource_types: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationImplPageRedirectServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_attachment_type_blacklist: Vec<String>, baseline_attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, parameter_whitelist: Vec<String>, parameter_whitelist_prefixes: Vec<String>, binary_parameter_whitelist: Vec<String>, modifier_whitelist: Vec<String>, operation_whitelist: Vec<String>, operation_whitelist_prefixes: Vec<String>, typehint_whitelist: Vec<String>, resourcetype_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, device_info_transformer_enabled: bool, device_info_transformer_css_style: &str) -> Box<Future<Item = ::models::ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, redirect_enabled: bool, redirect_stats_enabled: bool, redirect_extensions: Vec<String>, redirect_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>, contentcopyaction_order_style: &str) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_msm_impl_actions_content_update_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>, cq_wcm_msm_action_ignored_mixin: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_msm_impl_actions_order_children_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_msm_impl_actions_page_move_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>, cq_wcm_msm_impl_actions_pagemove_prop_reference_update: bool) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_msm_impl_actions_references_update_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>, cq_wcm_msm_impl_action_referencesupdate_prop_update_nested: bool) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_msm_impl_live_relationship_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, liverelationshipmgr_relationsconfig_default: &str) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_msm_impl_rollout_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, rolloutmgr_excludedprops_default: Vec<String>, rolloutmgr_excludedparagraphprops_default: Vec<String>, rolloutmgr_excludednodetypes_default: Vec<String>, rolloutmgr_threadpool_maxsize: i32, rolloutmgr_threadpool_maxshutdowntime: i32, rolloutmgr_threadpool_priority: &str, rolloutmgr_commit_size: i32, rolloutmgr_conflicthandling_enabled: bool) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplRolloutManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auditlogservlet_default_events_count: i32, auditlogservlet_default_path: &str) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplServletsAuditLogServletInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_notification_email_impl_email_channel(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, email_from: &str) -> Box<Future<Item = ::models::ComDayCqWcmNotificationEmailImplEmailChannelInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_notification_impl_notification_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmNotificationImplNotificationManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_scripting_impl_bvp_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_day_cq_wcm_scripting_bvp_script_engines: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmScriptingImplBvpManagerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_undo_undo_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_undo_enabled: bool, cq_wcm_undo_path: &str, cq_wcm_undo_validity: i32, cq_wcm_undo_steps: i32, cq_wcm_undo_persistence: &str, cq_wcm_undo_persistence_mode: bool, cq_wcm_undo_markermode: &str, cq_wcm_undo_whitelist: Vec<String>, cq_wcm_undo_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmUndoUndoConfigInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_webservicesupport_impl_replication_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, flush_agents: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, min_thread_pool_size: i32, max_thread_pool_size: i32, cq_wcm_workflow_terminate_on_activate: bool, cq_wcm_worklfow_terminate_exclusion_list: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_wcm_workflow_impl_workflow_package_info_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, workflowpackageinfoprovider_filter: Vec<String>, workflowpackageinfoprovider_filter_rootpath: &str) -> Box<Future<Item = ::models::ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_widget_impl_html_library_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, htmllibmanager_clientmanager: &str, htmllibmanager_debug: bool, htmllibmanager_debug_console: bool, htmllibmanager_debug_init_js: &str, htmllibmanager_defaultthemename: &str, htmllibmanager_defaultuserthemename: &str, htmllibmanager_firebuglite_path: &str, htmllibmanager_force_cq_url_info: bool, htmllibmanager_gzip: bool, htmllibmanager_maxage: i32, htmllibmanager_max_data_uri_size: i32, htmllibmanager_minify: bool, htmllibmanager_path_list: Vec<String>, htmllibmanager_timing: bool) -> Box<Future<Item = ::models::ComDayCqWidgetImplHtmlLibraryManagerImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_widget_impl_widget_extension_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, extendable_widgets: Vec<String>, widgetextensionprovider_debug: bool) -> Box<Future<Item = ::models::ComDayCqWidgetImplWidgetExtensionProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_workflow_impl_email_e_mail_notification_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, from_address: &str, host_prefix: &str, notify_onabort: bool, notify_oncomplete: bool, notify_oncontainercomplete: bool, notify_useronly: bool) -> Box<Future<Item = ::models::ComDayCqWorkflowImplEmailEMailNotificationServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_day_cq_workflow_impl_email_task_e_mail_notification_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, notify_onupdate: bool, notify_oncomplete: bool) -> Box<Future<Item = ::models::ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo, Error = Error<serde_json::Value>>>;
    fn com_day_crx_security_token_impl_impl_token_authentication_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, token_required_attr: &str, token_alternate_url: &str, token_encapsulated: bool, skip_token_refresh: Vec<String>) -> Box<Future<Item = ::models::ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo, Error = Error<serde_json::Value>>>;
    fn com_day_crx_security_token_impl_token_cleanup_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable_token_cleanup_task: bool, scheduler_expression: &str, batch_size: i32) -> Box<Future<Item = ::models::ComDayCrxSecurityTokenImplTokenCleanupTaskInfo, Error = Error<serde_json::Value>>>;
    fn guide_localization_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, supported_locales: Vec<String>, localizable_properties: Vec<String>) -> Box<Future<Item = ::models::GuideLocalizationServiceInfo, Error = Error<serde_json::Value>>>;
    fn messaging_user_component_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority: i32) -> Box<Future<Item = ::models::MessagingUserComponentFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_aries_jmx_framework_state_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, attribute_change_notification_enabled: bool) -> Box<Future<Item = ::models::OrgApacheAriesJmxFrameworkStateConfigInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_eventadmin_impl_event_admin(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_felix_eventadmin_thread_pool_size: i32, org_apache_felix_eventadmin_async_to_sync_thread_ratio: f32, org_apache_felix_eventadmin_timeout: i32, org_apache_felix_eventadmin_require_topic: bool, org_apache_felix_eventadmin_ignore_timeout: Vec<String>, org_apache_felix_eventadmin_ignore_topic: Vec<String>) -> Box<Future<Item = ::models::OrgApacheFelixEventadminImplEventAdminInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_http(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_felix_http_host: &str, org_apache_felix_http_enable: bool, org_osgi_service_http_port: i32, org_apache_felix_http_timeout: i32, org_apache_felix_https_enable: bool, org_osgi_service_http_port_secure: i32, org_apache_felix_https_keystore: &str, org_apache_felix_https_keystore_password: &str, org_apache_felix_https_keystore_key_password: &str, org_apache_felix_https_truststore: &str, org_apache_felix_https_truststore_password: &str, org_apache_felix_https_clientcertificate: &str, org_apache_felix_http_context_path: &str, org_apache_felix_http_mbeans: bool, org_apache_felix_http_session_timeout: i32, org_apache_felix_http_jetty_threadpool_max: i32, org_apache_felix_http_jetty_acceptors: i32, org_apache_felix_http_jetty_selectors: i32, org_apache_felix_http_jetty_header_buffer_size: i32, org_apache_felix_http_jetty_request_buffer_size: i32, org_apache_felix_http_jetty_response_buffer_size: i32, org_apache_felix_http_jetty_max_form_size: i32, org_apache_felix_http_path_exclusions: Vec<String>, org_apache_felix_https_jetty_ciphersuites_excluded: Vec<String>, org_apache_felix_https_jetty_ciphersuites_included: Vec<String>, org_apache_felix_http_jetty_send_server_header: bool, org_apache_felix_https_jetty_protocols_included: Vec<String>, org_apache_felix_https_jetty_protocols_excluded: Vec<String>, org_apache_felix_proxy_load_balancer_connection_enable: bool, org_apache_felix_https_jetty_renegotiate_allowed: bool, org_apache_felix_https_jetty_session_cookie_http_only: bool, org_apache_felix_https_jetty_session_cookie_secure: bool, org_eclipse_jetty_servlet_session_id_path_parameter_name: &str, org_eclipse_jetty_servlet_checking_remote_session_id_encoding: bool, org_eclipse_jetty_servlet_session_cookie: &str, org_eclipse_jetty_servlet_session_domain: &str, org_eclipse_jetty_servlet_session_path: &str, org_eclipse_jetty_servlet_max_age: i32, org_apache_felix_http_name: &str, org_apache_felix_jetty_gziphandler_enable: bool, org_apache_felix_jetty_gzip_min_gzip_size: i32, org_apache_felix_jetty_gzip_compression_level: i32, org_apache_felix_jetty_gzip_inflate_buffer_size: i32, org_apache_felix_jetty_gzip_sync_flush: bool, org_apache_felix_jetty_gzip_excluded_user_agents: Vec<String>, org_apache_felix_jetty_gzip_included_methods: Vec<String>, org_apache_felix_jetty_gzip_excluded_methods: Vec<String>, org_apache_felix_jetty_gzip_included_paths: Vec<String>, org_apache_felix_jetty_gzip_excluded_paths: Vec<String>, org_apache_felix_jetty_gzip_included_mime_types: Vec<String>, org_apache_felix_jetty_gzip_excluded_mime_types: Vec<String>, org_apache_felix_http_session_invalidate: bool, org_apache_felix_http_session_uniqueid: bool) -> Box<Future<Item = ::models::OrgApacheFelixHttpInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_http_sslfilter_ssl_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ssl_forward_header: &str, ssl_forward_value: &str, ssl_forward_cert_header: &str, rewrite_absolute_urls: bool) -> Box<Future<Item = ::models::OrgApacheFelixHttpSslfilterSslFilterInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_jaas_configuration_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jaas_control_flag: &str, jaas_ranking: i32, jaas_realm_name: &str, jaas_classname: &str, jaas_options: Vec<String>) -> Box<Future<Item = ::models::OrgApacheFelixJaasConfigurationFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_jaas_configuration_spi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jaas_default_realm_name: &str, jaas_config_provider_name: &str, jaas_global_config_policy: &str) -> Box<Future<Item = ::models::OrgApacheFelixJaasConfigurationSpiInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_scr_scr_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ds_loglevel: i32, ds_factory_enabled: bool, ds_delayed_keep_instances: bool, ds_lock_timeout_milliseconds: i32, ds_stop_timeout_milliseconds: i32, ds_global_extender: bool) -> Box<Future<Item = ::models::OrgApacheFelixScrScrServiceInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_systemready_impl_components_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, components_list: Vec<String>, _type: &str) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadyImplComponentsCheckInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_systemready_impl_framework_start_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, timeout: i32, target_start_level: i32, target_start_level_prop_name: &str, _type: &str) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_systemready_impl_services_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, services_list: Vec<String>, _type: &str) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadyImplServicesCheckInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_systemready_impl_servlet_system_alive_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, osgi_http_whiteboard_servlet_pattern: &str, osgi_http_whiteboard_context_select: &str) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_systemready_impl_servlet_system_ready_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, osgi_http_whiteboard_servlet_pattern: &str, osgi_http_whiteboard_context_select: &str) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_systemready_system_ready_monitor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, poll_interval: i32) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadySystemReadyMonitorInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_webconsole_internal_servlet_osgi_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, manager_root: &str, http_service_filter: &str, default_render: &str, realm: &str, username: &str, password: &str, category: &str, locale: &str, loglevel: i32, plugins: &str) -> Box<Future<Item = ::models::OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_size: i32) -> Box<Future<Item = ::models::OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, felix_memoryusage_dump_threshold: i32, felix_memoryusage_dump_interval: i32, felix_memoryusage_dump_location: &str) -> Box<Future<Item = ::models::OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_http_proxyconfigurator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, proxy_enabled: bool, proxy_host: &str, proxy_port: i32, proxy_user: &str, proxy_password: &str, proxy_exceptions: Vec<String>) -> Box<Future<Item = ::models::OrgApacheHttpProxyconfiguratorInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dir: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_document_document_node_store_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mongouri: &str, db: &str, socket_keep_alive: bool, cache: i32, node_cache_percentage: i32, prev_doc_cache_percentage: i32, children_cache_percentage: i32, diff_cache_percentage: i32, cache_segment_count: i32, cache_stack_move_distance: i32, blob_cache_size: i32, persistent_cache: &str, journal_cache: &str, custom_blob_store: bool, journal_gc_interval: i32, journal_gc_max_age: i32, prefetch_external_changes: bool, role: &str, version_gc_max_age_in_secs: i32, version_gc_expression: &str, version_gc_time_limit_in_secs: i32, blob_gc_max_age_in_secs: i32, blob_track_snapshot_interval_in_secs: i32, repository_home: &str, max_replication_lag_in_secs: i32, document_store_type: &str, bundling_disabled: bool, update_limit: i32, persistent_cache_includes: Vec<String>, lease_check_mode: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, persistent_cache_includes: Vec<String>) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, included_paths: Vec<String>, enable_async_observer: bool, observer_queue_size: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_index_async_indexer_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, async_configs: Vec<String>, lease_time_out_minutes: i32, failing_index_timeout_seconds: i32, error_warn_interval_seconds: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disabled: bool, debug: bool, local_index_dir: &str, enable_open_index_async: bool, thread_pool_size: i32, prefetch_index_files: bool, extracted_text_cache_size_in_mb: i32, extracted_text_cache_expiry_in_secs: i32, always_use_pre_extracted_cache: bool, boolean_clause_limit: i32, enable_hybrid_indexing: bool, hybrid_queue_size: i32, disable_stored_index_definition: bool, deleted_blobs_collection_enabled: bool, prop_index_cleaner_interval_in_secs: i32, enable_single_blob_index_files: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, solr_home_path: &str, solr_core_name: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path_desc_field: &str, path_child_field: &str, path_parent_field: &str, path_exact_field: &str, catch_all_field: &str, collapsed_path_field: &str, path_depth_field: &str, commit_policy: &str, rows: i32, path_restrictions: bool, property_restrictions: bool, primarytypes_restrictions: bool, ignored_properties: Vec<String>, used_properties: Vec<String>, type_mappings: Vec<String>, property_mappings: Vec<String>, collapse_jcrcontent_nodes: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, solr_http_url: &str, solr_zk_host: &str, solr_collection: &str, solr_socket_timeout: i32, solr_connection_timeout: i32, solr_shards_no: i32, solr_replication_factor: i32, solr_conf_dir: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, query_aggregation: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, server_type: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_type: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_items: i32, max_path_depth: i32, enabled: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_query_query_engine_settings_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, query_limit_in_memory: i32, query_limit_reads: i32, query_fail_traversal: bool, fast_query_size: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_security_authentication_authentication_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_jackrabbit_oak_authentication_app_name: &str, org_apache_jackrabbit_oak_authentication_config_spi_name: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_name: &str, host_name: &str, host_port: i32, host_ssl: bool, host_tls: bool, host_no_cert_check: bool, bind_dn: &str, bind_password: &str, search_timeout: &str, admin_pool_max_active: i32, admin_pool_lookup_on_validate: bool, user_pool_max_active: i32, user_pool_lookup_on_validate: bool, user_base_dn: &str, user_objectclass: Vec<String>, user_id_attribute: &str, user_extra_filter: &str, user_make_dn_path: bool, group_base_dn: &str, group_objectclass: Vec<String>, group_name_attribute: &str, group_extra_filter: &str, group_make_dn_path: bool, group_member_attribute: &str, use_uid_for_ext_id: bool, customattributes: Vec<String>) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_security_authentication_token_token_configura(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, token_expiration: &str, token_length: &str, token_refresh: bool, token_cleanup_threshold: i32, password_hash_algorithm: &str, password_hash_iterations: i32, password_salt_size: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_security_authorization_authorization_configur(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, permissions_jr2: &str, import_behavior: &str, read_paths: Vec<String>, administrative_principals: Vec<String>, configuration_ranking: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_security_internal_security_provider_registrati(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, required_service_pids: Vec<String>, authorization_composition_type: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, length: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_security_user_user_configuration_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, users_path: &str, groups_path: &str, system_relative_path: &str, default_depth: i32, import_behavior: &str, password_hash_algorithm: &str, password_hash_iterations: i32, password_salt_size: i32, omit_admin_pw: bool, support_auto_save: bool, password_max_age: i32, initial_password_change: bool, password_history_size: i32, password_expiry_for_admin: bool, cache_expiration: i32, enable_rfc7613_usercase_mapped_profile: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, account_name: &str, container_name: &str, access_key: &str, root_path: &str, connection_url: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_segment_segment_node_store_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, repository_home: &str, tarmk_mode: &str, tarmk_size: i32, segment_cache_size: i32, string_cache_size: i32, template_cache_size: i32, string_deduplication_cache_size: i32, template_deduplication_cache_size: i32, node_deduplication_cache_size: i32, pause_compaction: bool, compaction_retry_count: i32, compaction_force_timeout: i32, compaction_size_delta_estimation: i32, compaction_disable_estimation: bool, compaction_retained_generations: i32, compaction_memory_threshold: i32, compaction_progress_log: i32, standby: bool, custom_blob_store: bool, custom_segment_store: bool, split_persistence: bool, repository_backup_dir: &str, blob_gc_max_age_in_secs: i32, blob_track_snapshot_interval_in_secs: i32, role: &str, register_descriptors: bool, dispatch_changes: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, commits_tracker_writer_groups: Vec<String>) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_segment_segment_node_store_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, repository_home: &str, tarmk_mode: &str, tarmk_size: i32, segment_cache_size: i32, string_cache_size: i32, template_cache_size: i32, string_deduplication_cache_size: i32, template_deduplication_cache_size: i32, node_deduplication_cache_size: i32, pause_compaction: bool, compaction_retry_count: i32, compaction_force_timeout: i32, compaction_size_delta_estimation: i32, compaction_disable_estimation: bool, compaction_retained_generations: i32, compaction_memory_threshold: i32, compaction_progress_log: i32, standby: bool, custom_blob_store: bool, custom_segment_store: bool, split_persistence: bool, repository_backup_dir: &str, blob_gc_max_age_in_secs: i32, blob_track_snapshot_interval_in_secs: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_installer_configuration_persist: bool, mode: &str, port: i32, primary_host: &str, interval: i32, primary_allowed_client_ip_ranges: Vec<String>, secure: bool, standby_readtimeout: i32, standby_autoclean: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, handler_name: &str, user_expiration_time: &str, user_auto_membership: Vec<String>, user_property_mapping: Vec<String>, user_path_prefix: &str, user_membership_exp_time: &str, user_membership_nesting_depth: i32, user_dynamic_membership: bool, user_disable_missing: bool, group_expiration_time: &str, group_auto_membership: Vec<String>, group_property_mapping: Vec<String>, group_path_prefix: &str, enable_rfc7613_usercase_mapped_profile: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jaas_ranking: i32, jaas_control_flag: &str, jaas_realm_name: &str, idp_name: &str, sync_handler_name: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, protect_external_id: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cug_supported_paths: Vec<String>, cug_enabled: bool, configuration_ranking: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, principal_names: Vec<String>) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled_actions: &str, user_privilege_names: Vec<String>, group_privilege_names: Vec<String>, constraint: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_vault_packaging_impl_packaging_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, package_roots: Vec<String>) -> Box<Future<Item = ::models::OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, home_path: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_auth_core_impl_logout_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_methods: Vec<String>, sling_servlet_paths: &str) -> Box<Future<Item = ::models::OrgApacheSlingAuthCoreImplLogoutServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_caconfig_impl_configuration_bindings_value_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_caconfig_impl_configuration_resolver_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, config_bucket_names: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplConfigurationResolverImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, config_property_inheritance_property_names: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, description: &str, overrides: Vec<String>, enabled: bool, service_ranking: i32) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_caconfig_impl_override_system_property_configuration_ove(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, service_ranking: i32) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_caconfig_management_impl_configuration_management_setti(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ignore_property_name_regex: Vec<String>, config_collection_properties_resource_names: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, config_path: &str, fallback_paths: Vec<String>, config_collection_inheritance_property_names: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, config_ref_resource_names: Vec<String>, config_ref_property_names: Vec<String>, service_ranking: i32) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_commons_html_internal_tagsoup_html_parser(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, parser_features: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_commons_log_log_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_commons_log_level: &str, org_apache_sling_commons_log_file: &str, org_apache_sling_commons_log_file_number: i32, org_apache_sling_commons_log_file_size: &str, org_apache_sling_commons_log_pattern: &str, org_apache_sling_commons_log_configuration_file: &str, org_apache_sling_commons_log_packaging_data_enabled: bool, org_apache_sling_commons_log_max_caller_data_depth: i32, org_apache_sling_commons_log_max_old_file_count_in_dump: i32, org_apache_sling_commons_log_num_of_lines: i32) -> Box<Future<Item = ::models::OrgApacheSlingCommonsLogLogManagerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_commons_log_log_manager_factory_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_commons_log_level: &str, org_apache_sling_commons_log_file: &str, org_apache_sling_commons_log_pattern: &str, org_apache_sling_commons_log_names: Vec<String>, org_apache_sling_commons_log_additiv: bool) -> Box<Future<Item = ::models::OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_commons_log_log_manager_factory_writer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_commons_log_file: &str, org_apache_sling_commons_log_file_number: i32, org_apache_sling_commons_log_file_size: &str, org_apache_sling_commons_log_file_buffered: bool) -> Box<Future<Item = ::models::OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_commons_metrics_internal_log_reporter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, period: i32, time_unit: &str, level: &str, logger_name: &str, prefix: &str, pattern: &str, registry_name: &str) -> Box<Future<Item = ::models::OrgApacheSlingCommonsMetricsInternalLogReporterInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, datasources: Vec<String>, step: i32, archives: Vec<String>, path: &str) -> Box<Future<Item = ::models::OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_commons_mime_internal_mime_type_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mime_types: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_commons_scheduler_impl_quartz_scheduler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pool_name: &str, allowed_pool_names: Vec<String>, scheduler_useleaderforsingle: bool, metrics_filters: Vec<String>, slow_threshold_millis: i32) -> Box<Future<Item = ::models::OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_commons_scheduler_impl_scheduler_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_quartz_job_duration_acceptable: i32) -> Box<Future<Item = ::models::OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_commons_threads_impl_default_thread_pool_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, min_pool_size: i32, max_pool_size: i32, queue_size: i32, max_thread_age: i32, keep_alive_time: i32, block_policy: &str, shutdown_graceful: bool, daemon: bool, shutdown_wait_time: i32, priority: &str) -> Box<Future<Item = ::models::OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_datasource_data_source_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, datasource_name: &str, datasource_svc_prop_name: &str, driver_class_name: &str, url: &str, username: &str, password: &str, default_auto_commit: &str, default_read_only: &str, default_transaction_isolation: &str, default_catalog: &str, max_active: i32, max_idle: i32, min_idle: i32, initial_size: i32, max_wait: i32, max_age: i32, test_on_borrow: bool, test_on_return: bool, test_while_idle: bool, validation_query: &str, validation_query_timeout: i32, time_between_eviction_runs_millis: i32, min_evictable_idle_time_millis: i32, connection_properties: &str, init_sql: &str, jdbc_interceptors: &str, validation_interval: i32, log_validation_errors: bool, datasource_svc_properties: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingDatasourceDataSourceFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_datasource_jndi_data_source_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, datasource_name: &str, datasource_svc_prop_name: &str, datasource_jndi_name: &str, jndi_properties: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingDatasourceJndiDataSourceFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_discovery_oak_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, connector_ping_timeout: i32, connector_ping_interval: i32, discovery_lite_check_interval: i32, cluster_sync_service_timeout: i32, cluster_sync_service_interval: i32, enable_sync_token: bool, min_event_delay: i32, socket_connect_timeout: i32, so_timeout: i32, topology_connector_urls: Vec<String>, topology_connector_whitelist: Vec<String>, auto_stop_local_loop_enabled: bool, gzip_connector_requests_enabled: bool, hmac_enabled: bool, enable_encryption: bool, shared_key: &str, hmac_shared_key_ttl: i32, backoff_standby_factor: &str, backoff_stable_factor: &str) -> Box<Future<Item = ::models::OrgApacheSlingDiscoveryOakConfigInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_discovery_oak_synchronized_clocks_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str) -> Box<Future<Item = ::models::OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, title: &str, details: &str, enabled: bool, service_name: &str, log_level: &str, allowed_roots: Vec<String>, queue_processing_enabled: bool, package_importer_endpoints: Vec<String>, passive_queues: Vec<String>, priority_queues: Vec<String>, retry_strategy: &str, retry_attempts: i32, request_authorization_strategy_target: &str, transport_secret_provider_target: &str, package_builder_target: &str, triggers_target: &str, queue_provider: &str, async_delivery: bool, http_conn_timeout: i32) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, jcr_privilege: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, title: &str, details: &str, enabled: bool, service_name: &str, log_level: &str, allowed_roots: Vec<String>, request_authorization_strategy_target: &str, queue_provider_factory_target: &str, package_builder_target: &str, triggers_target: &str, priority_queues: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, title: &str, details: &str, enabled: bool, service_name: &str, log_level: &str, queue_processing_enabled: bool, package_exporter_endpoints: Vec<String>, pull_items: i32, http_conn_timeout: i32, request_authorization_strategy_target: &str, transport_secret_provider_target: &str, package_builder_target: &str, triggers_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, title: &str, details: &str, enabled: bool, service_name: &str, log_level: &str, queue_processing_enabled: bool, package_exporter_target: &str, package_importer_target: &str, request_authorization_strategy_target: &str, triggers_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, title: &str, details: &str, enabled: bool, service_name: &str, log_level: &str, queue_processing_enabled: bool, passive_queues: Vec<String>, package_exporter_endpoints: Vec<String>, package_importer_endpoints: Vec<String>, retry_strategy: &str, retry_attempts: i32, pull_items: i32, http_conn_timeout: i32, request_authorization_strategy_target: &str, transport_secret_provider_target: &str, package_builder_target: &str, triggers_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_monitor_distribution_queue_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str, number_of_retries_allowed: i32) -> Box<Future<Item = ::models::OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, queue: &str, drop_invalid_items: bool, agent_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_packaging_impl_exporter_local_distributio(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, package_builder_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, endpoints: Vec<String>, pull_items: i32, package_builder_target: &str, transport_secret_provider_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_packaging_impl_importer_local_distributio(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, package_builder_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_packaging_impl_importer_remote_distributi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, endpoints: Vec<String>, transport_secret_provider_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_packaging_impl_importer_repository_distri(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, service_name: &str, path: &str, privilege_name: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_resources_impl_distribution_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_roots: &str, kind: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_resources_impl_distribution_service_resour(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_roots: &str, kind: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_serialization_impl_distribution_package_bu(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, _type: &str, format_target: &str, temp_fs_folder: &str, file_threshold: i32, memory_unit: &str, use_off_heap_memory: bool, digest_algorithm: &str, monitoring_queue_size: i32, cleanup_delay: i32, package_filters: Vec<String>, property_filters: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, _type: &str, import_mode: &str, acl_handling: &str, package_roots: &str, package_filters: Vec<String>, property_filters: Vec<String>, temp_fs_folder: &str, use_binary_references: bool, auto_save_threshold: i32, cleanup_delay: i32, file_threshold: i32, MEGA_BYTES: &str, use_off_heap_memory: bool, digest_algorithm: &str, monitoring_queue_size: i32, paths_mapping: Vec<String>, strict_import: bool) -> Box<Future<Item = ::models::OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_transport_impl_user_credentials_distributi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, username: &str, password: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_trigger_impl_distribution_event_distribute(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, path: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, path: &str, ignored_paths_patterns: Vec<String>, service_name: &str, deep: bool) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, path: &str, service_name: &str, nuggets_path: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, endpoint: &str, transport_secret_provider_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, path: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, path: &str, seconds: &str, service_name: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_engine_impl_auth_sling_authenticator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, osgi_http_whiteboard_context_select: &str, osgi_http_whiteboard_listener: &str, auth_sudo_cookie: &str, auth_sudo_parameter: &str, auth_annonymous: bool, sling_auth_requirements: Vec<String>, sling_auth_anonymous_user: &str, sling_auth_anonymous_password: &str, auth_http: &str, auth_http_realm: &str, auth_uri_suffix: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, extensions: Vec<String>, min_duration_ms: i32, max_duration_ms: i32, compact_log_format: bool) -> Box<Future<Item = ::models::OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_engine_impl_log_request_logger(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, request_log_output: &str, request_log_outputtype: i32, request_log_enabled: bool, access_log_output: &str, access_log_outputtype: i32, access_log_enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingEngineImplLogRequestLoggerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_engine_impl_log_request_logger_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, request_log_service_format: &str, request_log_service_output: &str, request_log_service_outputtype: i32, request_log_service_onentry: bool) -> Box<Future<Item = ::models::OrgApacheSlingEngineImplLogRequestLoggerServiceInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_engine_impl_sling_main_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_max_calls: i32, sling_max_inclusions: i32, sling_trace_allow: bool, sling_max_record_requests: i32, sling_store_pattern_requests: Vec<String>, sling_serverinfo: &str, sling_additional_response_headers: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingEngineImplSlingMainServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_engine_parameters(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_default_parameter_encoding: &str, sling_default_max_parameters: i32, file_location: &str, file_threshold: i32, file_max: i32, request_max: i32, sling_default_parameter_check_for_additional_container_parameters: bool) -> Box<Future<Item = ::models::OrgApacheSlingEngineParametersInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_event_impl_eventing_thread_pool(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, min_pool_size: i32) -> Box<Future<Item = ::models::OrgApacheSlingEventImplEventingThreadPoolInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_event_impl_jobs_default_job_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, queue_priority: &str, queue_retries: i32, queue_retrydelay: i32, queue_maxparallel: i32) -> Box<Future<Item = ::models::OrgApacheSlingEventImplJobsDefaultJobManagerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_event_impl_jobs_jcr_persistence_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, job_consumermanager_disable_distribution: bool, startup_delay: i32, cleanup_period: i32) -> Box<Future<Item = ::models::OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_event_impl_jobs_job_consumer_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_installer_configuration_persist: bool, job_consumermanager_whitelist: Vec<String>, job_consumermanager_blacklist: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingEventImplJobsJobConsumerManagerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_event_jobs_queue_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, queue_name: &str, queue_topics: Vec<String>, queue_type: &str, queue_priority: &str, queue_retries: i32, queue_retrydelay: i32, queue_maxparallel: f32, queue_keep_jobs: bool, queue_prefer_run_on_creation_instance: bool, queue_thread_pool_size: i32, service_ranking: i32) -> Box<Future<Item = ::models::OrgApacheSlingEventJobsQueueConfigurationInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, users: Vec<String>, groups: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_featureflags_feature(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, description: &str, enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingFeatureflagsFeatureInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_featureflags_impl_configured_feature(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, description: &str, enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_hapi_impl_h_api_util_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_hapi_tools_resourcetype: &str, org_apache_sling_hapi_tools_collectionresourcetype: &str, org_apache_sling_hapi_tools_searchpaths: Vec<String>, org_apache_sling_hapi_tools_externalurl: &str, org_apache_sling_hapi_tools_enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingHapiImplHApiUtilImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_hc_core_impl_composite_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str, filter_tags: Vec<String>, filter_combine_tags_with_or: bool) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplCompositeHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_hc_core_impl_executor_health_check_executor_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, timeout_in_ms: i32, long_running_future_threshold_for_critical_ms: i32, result_cache_ttl_in_ms: i32) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_hc_core_impl_jmx_attribute_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str, mbean_name: &str, attribute_name: &str, attribute_value_constraint: &str) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_hc_core_impl_scriptable_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str, expression: &str, language_extension: &str) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplScriptableHealthCheckInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, servlet_path: &str, disabled: bool, cors_access_control_allow_origin: &str) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, total_width: i32, col_width_name: i32, col_width_result: i32, col_width_timing: i32) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_i18n_impl_i18_n_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, sling_filter_scope: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingI18nImplI18NFilterInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_i18n_impl_jcr_resource_bundle_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, locale_default: &str, preload_bundles: bool, invalidation_delay: i32) -> Box<Future<Item = ::models::OrgApacheSlingI18nImplJcrResourceBundleProviderInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_installer_provider_jcr_impl_jcr_installer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, handler_schemes: Vec<String>, sling_jcrinstall_folder_name_regexp: &str, sling_jcrinstall_folder_max_depth: i32, sling_jcrinstall_search_path: Vec<String>, sling_jcrinstall_new_config_path: &str, sling_jcrinstall_signal_path: &str, sling_jcrinstall_enable_writeback: bool) -> Box<Future<Item = ::models::OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_base_internal_login_admin_whitelist(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, whitelist_bypass: bool, whitelist_bundles_regexp: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, whitelist_name: &str, whitelist_bundles: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, alias: &str, dav_create_absolute_uri: bool, dav_protectedhandlers: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, java_naming_factory_initial: &str, java_naming_provider_url: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, port: i32) -> Box<Future<Item = ::models::OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_repoinit_impl_repository_initializer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, references: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_repoinit_repository_initializer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, references: Vec<String>, scripts: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingJcrRepoinitRepositoryInitializerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, resource_resolver_searchpath: Vec<String>, resource_resolver_manglenamespaces: bool, resource_resolver_allow_direct: bool, resource_resolver_required_providers: Vec<String>, resource_resolver_required_providernames: Vec<String>, resource_resolver_virtual: Vec<String>, resource_resolver_mapping: Vec<String>, resource_resolver_map_location: &str, resource_resolver_map_observation: Vec<String>, resource_resolver_default_vanity_redirect_status: i32, resource_resolver_enable_vanitypath: bool, resource_resolver_vanitypath_max_entries: i32, resource_resolver_vanitypath_max_entries_startup: bool, resource_resolver_vanitypath_bloomfilter_max_bytes: i32, resource_resolver_optimize_alias_resolution: bool, resource_resolver_vanitypath_whitelist: Vec<String>, resource_resolver_vanitypath_blacklist: Vec<String>, resource_resolver_vanity_precedence: bool, resource_resolver_providerhandling_paranoid: bool, resource_resolver_log_closing: bool, resource_resolver_log_unclosed: bool) -> Box<Future<Item = ::models::OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_resource_internal_jcr_system_user_validator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, allow_only_system_user: bool) -> Box<Future<Item = ::models::OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, checkpath_prefix: &str, jcr_path: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_webdav_impl_handler_default_handler_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, type_collections: &str, type_noncollections: &str, type_content: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32) -> Box<Future<Item = ::models::OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dav_root: &str, dav_create_absolute_uri: bool, dav_realm: &str, collection_types: Vec<String>, filter_prefixes: Vec<String>, filter_types: &str, filter_uris: &str, type_collections: &str, type_noncollections: &str, type_content: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_jmx_provider_impl_jmx_resource_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_roots: &str) -> Box<Future<Item = ::models::OrgApacheSlingJmxProviderImplJmxResourceProviderInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_models_impl_model_adapter_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, osgi_http_whiteboard_listener: &str, osgi_http_whiteboard_context_select: &str, max_recursion_depth: i32, cleanup_job_period: i32) -> Box<Future<Item = ::models::OrgApacheSlingModelsImplModelAdapterFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_models_jacksonexporter_impl_resource_module_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_recursion_levels: i32) -> Box<Future<Item = ::models::OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, felix_inventory_printer_name: &str, felix_inventory_printer_title: &str, path: &str) -> Box<Future<Item = ::models::OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, merge_root: &str, merge_read_only: bool) -> Box<Future<Item = ::models::OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_resourcemerger_picker_overriding(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, merge_root: &str, merge_read_only: bool) -> Box<Future<Item = ::models::OrgApacheSlingResourcemergerPickerOverridingInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_scripting_core_impl_script_cache_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_scripting_cache_size: i32, org_apache_sling_scripting_cache_additional_extensions: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingScriptingCoreImplScriptCacheImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, log_stacktrace_onclose: bool) -> Box<Future<Item = ::models::OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_scripting_java_impl_java_script_engine_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, java_classdebuginfo: bool, java_java_encoding: &str, java_compiler_source_vm: &str, java_compiler_target_vm: &str) -> Box<Future<Item = ::models::OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_scripting_javascript_rhino_opt_level: i32) -> Box<Future<Item = ::models::OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_scripting_jsp_jsp_script_engine_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jasper_compiler_target_vm: &str, jasper_compiler_source_vm: &str, jasper_classdebuginfo: bool, jasper_enable_pooling: bool, jasper_ie_class_id: &str, jasper_gen_string_as_char_array: bool, jasper_keepgenerated: bool, jasper_mappedfile: bool, jasper_trim_spaces: bool, jasper_display_source_fragments: bool, default_is_session: bool) -> Box<Future<Item = ::models::OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_scripting_sightly_js_bindings: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_security_impl_content_disposition_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_content_disposition_paths: Vec<String>, sling_content_disposition_excluded_paths: Vec<String>, sling_content_disposition_all_paths: bool) -> Box<Future<Item = ::models::OrgApacheSlingSecurityImplContentDispositionFilterInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_security_impl_referrer_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, allow_empty: bool, allow_hosts: Vec<String>, allow_hosts_regexp: Vec<String>, filter_methods: Vec<String>, exclude_agents_regexp: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingSecurityImplReferrerFilterInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, user_mapping: Vec<String>, user_default: &str, user_enable_default_mapping: bool, require_validation: bool) -> Box<Future<Item = ::models::OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, user_mapping: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_servlets_get_default_get_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, aliases: Vec<String>, index: bool, index_files: Vec<String>, enable_html: bool, enable_json: bool, enable_txt: bool, enable_xml: bool, json_maximumresults: i32, ecma_suport: bool) -> Box<Future<Item = ::models::OrgApacheSlingServletsGetDefaultGetServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_servlets_get_impl_version_version_info_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_selectors: Vec<String>, ecma_suport: bool) -> Box<Future<Item = ::models::OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, scheduler_concurrent: bool, chunk_cleanup_age: i32) -> Box<Future<Item = ::models::OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_servlets_post_impl_sling_post_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, servlet_post_date_formats: Vec<String>, servlet_post_node_name_hints: Vec<String>, servlet_post_node_name_max_length: i32, servlet_post_checkin_new_versionable_nodes: bool, servlet_post_auto_checkout: bool, servlet_post_auto_checkin: bool, servlet_post_ignore_pattern: &str) -> Box<Future<Item = ::models::OrgApacheSlingServletsPostImplSlingPostServletInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_servlets_resolver_sling_servlet_resolver(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, servletresolver_servlet_root: &str, servletresolver_cache_size: i32, servletresolver_paths: Vec<String>, servletresolver_default_extensions: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingServletsResolverSlingServletResolverInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_settings_impl_sling_settings_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_name: &str, sling_description: &str) -> Box<Future<Item = ::models::OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_startupfilter_impl_startup_filter_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, active_by_default: bool, default_message: &str) -> Box<Future<Item = ::models::OrgApacheSlingStartupfilterImplStartupFilterImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_tenant_internal_tenant_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, tenant_root: &str, tenant_path_matcher: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingTenantInternalTenantProviderImplInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_tracer_internal_log_tracer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, tracer_sets: Vec<String>, enabled: bool, servlet_enabled: bool, recording_cache_size_in_mb: i32, recording_cache_duration_in_secs: i32, recording_compression_enabled: bool, gzip_response: bool) -> Box<Future<Item = ::models::OrgApacheSlingTracerInternalLogTracerInfo, Error = Error<serde_json::Value>>>;
    fn org_apache_sling_xss_impl_xss_filter_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, policy_path: &str) -> Box<Future<Item = ::models::OrgApacheSlingXssImplXssFilterImplInfo, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>ConfigmgrApi for ConfigmgrApiClient<C> {
    fn adaptive_form_and_interactive_communication_web_channel_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, show_placeholder: bool, maximum_cache_entries: i32, af_scripting_compatversion: &str, make_file_name_unique: bool, generating_compliant_data: bool) -> Box<Future<Item = ::models::AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("showPlaceholder".to_string(), show_placeholder.to_string())
            .with_query_param("maximumCacheEntries".to_string(), maximum_cache_entries.to_string())
            .with_query_param("af.scripting.compatversion".to_string(), af_scripting_compatversion.to_string())
            .with_query_param("makeFileNameUnique".to_string(), make_file_name_unique.to_string())
            .with_query_param("generatingCompliantData".to_string(), generating_compliant_data.to_string())
            .execute(self.configuration.borrow())
    }

    fn adaptive_form_and_interactive_communication_web_channel_theme_configur(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, font_list: Vec<String>) -> Box<Future<Item = ::models::AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fontList".to_string(), font_list.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn analytics_component_query_cache_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_component_query_cache_size: i32) -> Box<Future<Item = ::models::AnalyticsComponentQueryCacheServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/Analytics Component Query Cache Service".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.analytics.component.query.cache.size".to_string(), cq_analytics_component_query_cache_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn apache_sling_health_check_result_html_serializer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, style_string: &str) -> Box<Future<Item = ::models::ApacheSlingHealthCheckResultHtmlSerializerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/Apache Sling Health Check Result HTML Serializer".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("styleString".to_string(), style_string.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, forms_manager_config_include_ootb_templates: bool, forms_manager_config_include_deprecated_templates: bool) -> Box<Future<Item = ::models::ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("formsManagerConfig.includeOOTBTemplates".to_string(), forms_manager_config_include_ootb_templates.to_string())
            .with_query_param("formsManagerConfig.includeDeprecatedTemplates".to_string(), forms_manager_config_include_deprecated_templates.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_aem_transaction_core_impl_transaction_recorder(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_transaction_recording_enabled: bool) -> Box<Future<Item = ::models::ComAdobeAemTransactionCoreImplTransactionRecorderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("isTransactionRecordingEnabled".to_string(), is_transaction_recording_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str) -> Box<Future<Item = ::models::ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.name".to_string(), hc_name.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("hc.mbean.name".to_string(), hc_mbean_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str) -> Box<Future<Item = ::models::ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.name".to_string(), hc_name.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("hc.mbean.name".to_string(), hc_mbean_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pre_upgrade_maintenance_tasks: Vec<String>, pre_upgrade_hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("pre-upgrade.maintenance.tasks".to_string(), pre_upgrade_maintenance_tasks.join(",").to_string())
            .with_query_param("pre-upgrade.hc.tags".to_string(), pre_upgrade_hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, root_path: &str, fix_inconsistencies: bool) -> Box<Future<Item = ::models::ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("root.path".to_string(), root_path.to_string())
            .with_query_param("fix.inconsistencies".to_string(), fix_inconsistencies.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_account_api_account_management_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_accountmanager_token_validity_period: i32, cq_accountmanager_config_requestnewaccount_mail: &str, cq_accountmanager_config_requestnewpwd_mail: &str) -> Box<Future<Item = ::models::ComAdobeCqAccountApiAccountManagementServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.accountmanager.token.validity.period".to_string(), cq_accountmanager_token_validity_period.to_string())
            .with_query_param("cq.accountmanager.config.requestnewaccount.mail".to_string(), cq_accountmanager_config_requestnewaccount_mail.to_string())
            .with_query_param("cq.accountmanager.config.requestnewpwd.mail".to_string(), cq_accountmanager_config_requestnewpwd_mail.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_account_impl_account_management_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_accountmanager_config_informnewaccount_mail: &str, cq_accountmanager_config_informnewpwd_mail: &str) -> Box<Future<Item = ::models::ComAdobeCqAccountImplAccountManagementServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.accountmanager.config.informnewaccount.mail".to_string(), cq_accountmanager_config_informnewaccount_mail.to_string())
            .with_query_param("cq.accountmanager.config.informnewpwd.mail".to_string(), cq_accountmanager_config_informnewpwd_mail.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_address_impl_location_location_list_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_address_location_default_max_results: i32) -> Box<Future<Item = ::models::ComAdobeCqAddressImplLocationLocationListServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.address.location.default.maxResults".to_string(), cq_address_location_default_max_results.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_audit_purge_dam(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auditlog_rule_name: &str, auditlog_rule_contentpath: &str, auditlog_rule_minimumage: i32, auditlog_rule_types: &str) -> Box<Future<Item = ::models::ComAdobeCqAuditPurgeDamInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.audit.purge.Dam".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("auditlog.rule.name".to_string(), auditlog_rule_name.to_string())
            .with_query_param("auditlog.rule.contentpath".to_string(), auditlog_rule_contentpath.to_string())
            .with_query_param("auditlog.rule.minimumage".to_string(), auditlog_rule_minimumage.to_string())
            .with_query_param("auditlog.rule.types".to_string(), auditlog_rule_types.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_audit_purge_pages(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auditlog_rule_name: &str, auditlog_rule_contentpath: &str, auditlog_rule_minimumage: i32, auditlog_rule_types: &str) -> Box<Future<Item = ::models::ComAdobeCqAuditPurgePagesInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.audit.purge.Pages".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("auditlog.rule.name".to_string(), auditlog_rule_name.to_string())
            .with_query_param("auditlog.rule.contentpath".to_string(), auditlog_rule_contentpath.to_string())
            .with_query_param("auditlog.rule.minimumage".to_string(), auditlog_rule_minimumage.to_string())
            .with_query_param("auditlog.rule.types".to_string(), auditlog_rule_types.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_audit_purge_replication(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auditlog_rule_name: &str, auditlog_rule_contentpath: &str, auditlog_rule_minimumage: i32, auditlog_rule_types: &str) -> Box<Future<Item = ::models::ComAdobeCqAuditPurgeReplicationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.audit.purge.Replication".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("auditlog.rule.name".to_string(), auditlog_rule_name.to_string())
            .with_query_param("auditlog.rule.contentpath".to_string(), auditlog_rule_contentpath.to_string())
            .with_query_param("auditlog.rule.minimumage".to_string(), auditlog_rule_minimumage.to_string())
            .with_query_param("auditlog.rule.types".to_string(), auditlog_rule_types.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, keypair_id: &str, keypair_alias: &str, cdnrewriter_attributes: Vec<String>, cdn_rewriter_distribution_domain: &str) -> Box<Future<Item = ::models::ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("keypair.id".to_string(), keypair_id.to_string())
            .with_query_param("keypair.alias".to_string(), keypair_alias.to_string())
            .with_query_param("cdnrewriter.attributes".to_string(), cdnrewriter_attributes.join(",").to_string())
            .with_query_param("cdn.rewriter.distribution.domain".to_string(), cdn_rewriter_distribution_domain.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cdn_config_distribution_domain: &str, cdn_config_enable_rewriting: bool, cdn_config_path_prefixes: Vec<String>, cdn_config_cdnttl: i32, cdn_config_application_protocol: &str) -> Box<Future<Item = ::models::ComAdobeCqCdnRewriterImplCdnConfigServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cdn.config.distribution.domain".to_string(), cdn_config_distribution_domain.to_string())
            .with_query_param("cdn.config.enable.rewriting".to_string(), cdn_config_enable_rewriting.to_string())
            .with_query_param("cdn.config.path.prefixes".to_string(), cdn_config_path_prefixes.join(",").to_string())
            .with_query_param("cdn.config.cdnttl".to_string(), cdn_config_cdnttl.to_string())
            .with_query_param("cdn.config.application.protocol".to_string(), cdn_config_application_protocol.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, cdnrewriter_attributes: Vec<String>, cdn_rewriter_distribution_domain: &str) -> Box<Future<Item = ::models::ComAdobeCqCdnRewriterImplCdnRewriterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("cdnrewriter.attributes".to_string(), cdnrewriter_attributes.join(",").to_string())
            .with_query_param("cdn.rewriter.distribution.domain".to_string(), cdn_rewriter_distribution_domain.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, flush_agents: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("flush.agents".to_string(), flush_agents.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_commerce_impl_asset_dynamic_image_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_asset_handler_active: bool, cq_commerce_asset_handler_name: &str) -> Box<Future<Item = ::models::ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.commerce.asset.handler.active".to_string(), cq_commerce_asset_handler_active.to_string())
            .with_query_param("cq.commerce.asset.handler.name".to_string(), cq_commerce_asset_handler_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_asset_handler_fallback: &str) -> Box<Future<Item = ::models::ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.commerce.asset.handler.fallback".to_string(), cq_commerce_asset_handler_fallback.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_commerce_impl_asset_static_image_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_asset_handler_active: bool, cq_commerce_asset_handler_name: &str) -> Box<Future<Item = ::models::ComAdobeCqCommerceImplAssetStaticImageHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.commerce.asset.handler.active".to_string(), cq_commerce_asset_handler_active.to_string())
            .with_query_param("cq.commerce.asset.handler.name".to_string(), cq_commerce_asset_handler_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_commerce_impl_asset_video_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_asset_handler_active: bool, cq_commerce_asset_handler_name: &str) -> Box<Future<Item = ::models::ComAdobeCqCommerceImplAssetVideoHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.commerce.asset.handler.active".to_string(), cq_commerce_asset_handler_active.to_string())
            .with_query_param("cq.commerce.asset.handler.name".to_string(), cq_commerce_asset_handler_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_promotion_root: &str) -> Box<Future<Item = ::models::ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.commerce.promotion.root".to_string(), cq_commerce_promotion_root.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_cataloggenerator_bucketsize: i32, cq_commerce_cataloggenerator_bucketname: &str, cq_commerce_cataloggenerator_excludedtemplateproperties: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.commerce.cataloggenerator.bucketsize".to_string(), cq_commerce_cataloggenerator_bucketsize.to_string())
            .with_query_param("cq.commerce.cataloggenerator.bucketname".to_string(), cq_commerce_cataloggenerator_bucketname.to_string())
            .with_query_param("cq.commerce.cataloggenerator.excludedtemplateproperties".to_string(), cq_commerce_cataloggenerator_excludedtemplateproperties.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_commerce_pim_impl_page_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_commerce_pageeventlistener_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqCommercePimImplPageEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.commerce.pageeventlistener.enabled".to_string(), cq_commerce_pageeventlistener_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, feed_generator_algorithm: &str) -> Box<Future<Item = ::models::ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("Feed generator algorithm".to_string(), feed_generator_algorithm.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, reportingservices_url: &str) -> Box<Future<Item = ::models::ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("reportingservices.url".to_string(), reportingservices_url.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, brightedge_url: &str) -> Box<Future<Item = ::models::ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("brightedge.url".to_string(), brightedge_url.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, reportingservices_proxy_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("reportingservices.proxy.whitelist".to_string(), reportingservices_proxy_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_cfm_impl_component_component_config_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dam_cfm_component_resource_type: &str, dam_cfm_component_file_reference_prop: &str, dam_cfm_component_elements_prop: &str, dam_cfm_component_variation_prop: &str) -> Box<Future<Item = ::models::ComAdobeCqDamCfmImplComponentComponentConfigImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("dam.cfm.component.resourceType".to_string(), dam_cfm_component_resource_type.to_string())
            .with_query_param("dam.cfm.component.fileReferenceProp".to_string(), dam_cfm_component_file_reference_prop.to_string())
            .with_query_param("dam.cfm.component.elementsProp".to_string(), dam_cfm_component_elements_prop.to_string())
            .with_query_param("dam.cfm.component.variationProp".to_string(), dam_cfm_component_variation_prop.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dam_cfm_resource_types: Vec<String>, dam_cfm_reference_properties: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqDamCfmImplConfFeatureConfigImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("dam.cfm.resourceTypes".to_string(), dam_cfm_resource_types.join(",").to_string())
            .with_query_param("dam.cfm.referenceProperties".to_string(), dam_cfm_reference_properties.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pipeline_type: &str) -> Box<Future<Item = ::models::ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("pipeline.type".to_string(), pipeline_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pipeline_type: &str) -> Box<Future<Item = ::models::ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("pipeline.type".to_string(), pipeline_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pipeline_type: &str) -> Box<Future<Item = ::models::ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("pipeline.type".to_string(), pipeline_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_memory: i32) -> Box<Future<Item = ::models::ComAdobeCqDamDmProcessImagePTiffManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("maxMemory".to_string(), max_memory.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dmreplicateonmodify_enabled: bool, dmreplicateonmodify_forcesyncdeletes: bool) -> Box<Future<Item = ::models::ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("dmreplicateonmodify.enabled".to_string(), dmreplicateonmodify_enabled.to_string())
            .with_query_param("dmreplicateonmodify.forcesyncdeletes".to_string(), dmreplicateonmodify_forcesyncdeletes.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_dam_mac_sync_client_so_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqDamMacSyncHelperImplMacSyncClientImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.dam.mac.sync.client.so.timeout".to_string(), com_adobe_dam_mac_sync_client_so_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths: Vec<String>, com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions: bool, com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms: i32, com_adobe_cq_dam_mac_sync_damsyncservice_platform: &str) -> Box<Future<Item = ::models::ComAdobeCqDamMacSyncImplDamSyncServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths".to_string(), com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths.join(",").to_string())
            .with_query_param("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions".to_string(), com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions.to_string())
            .with_query_param("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms".to_string(), com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms.to_string())
            .with_query_param("com.adobe.cq.dam.mac.sync.damsyncservice.platform".to_string(), com_adobe_cq_dam_mac_sync_damsyncservice_platform.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, nui_enabled: bool, nui_service_url: &str, nui_api_key: &str) -> Box<Future<Item = ::models::ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("nuiEnabled".to_string(), nui_enabled.to_string())
            .with_query_param("nuiServiceUrl".to_string(), nui_service_url.to_string())
            .with_query_param("nuiApiKey".to_string(), nui_api_key.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_s7imaging_impl_is_image_server_component(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, tcp_port: &str, allow_remote_access: bool, max_render_rgn_pixels: &str, max_message_size: &str, random_access_url_timeout: i32, worker_threads: i32) -> Box<Future<Item = ::models::ComAdobeCqDamS7imagingImplIsImageServerComponentInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("TcpPort".to_string(), tcp_port.to_string())
            .with_query_param("AllowRemoteAccess".to_string(), allow_remote_access.to_string())
            .with_query_param("MaxRenderRgnPixels".to_string(), max_render_rgn_pixels.to_string())
            .with_query_param("MaxMessageSize".to_string(), max_message_size.to_string())
            .with_query_param("RandomAccessUrlTimeout".to_string(), random_access_url_timeout.to_string())
            .with_query_param("WorkerThreads".to_string(), worker_threads.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cache_enable: bool, cache_root_paths: Vec<String>, cache_max_size: i32, cache_max_entries: i32) -> Box<Future<Item = ::models::ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cache.enable".to_string(), cache_enable.to_string())
            .with_query_param("cache.rootPaths".to_string(), cache_root_paths.join(",").to_string())
            .with_query_param("cache.maxSize".to_string(), cache_max_size.to_string())
            .with_query_param("cache.maxEntries".to_string(), cache_max_entries.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_webdav_impl_io_asset_io_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, path_prefix: &str, create_version: bool) -> Box<Future<Item = ::models::ComAdobeCqDamWebdavImplIoAssetIoHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("pathPrefix".to_string(), path_prefix.to_string())
            .with_query_param("createVersion".to_string(), create_version.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_webdav_version_linking_enable: bool, cq_dam_webdav_version_linking_scheduler_period: i32, cq_dam_webdav_version_linking_staging_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.webdav.version.linking.enable".to_string(), cq_dam_webdav_version_linking_enable.to_string())
            .with_query_param("cq.dam.webdav.version.linking.scheduler.period".to_string(), cq_dam_webdav_version_linking_scheduler_period.to_string())
            .with_query_param("cq.dam.webdav.version.linking.staging.timeout".to_string(), cq_dam_webdav_version_linking_staging_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dam_webdav_impl_io_special_files_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_day_cq_dam_core_impl_io_special_files_handler_filepatters: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters".to_string(), com_day_cq_dam_core_impl_io_special_files_handler_filepatters.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_deserfw_impl_deserialization_firewall_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, firewall_deserialization_whitelist: Vec<String>, firewall_deserialization_blacklist: Vec<String>, firewall_deserialization_diagnostics: &str) -> Box<Future<Item = ::models::ComAdobeCqDeserfwImplDeserializationFirewallImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("firewall.deserialization.whitelist".to_string(), firewall_deserialization_whitelist.join(",").to_string())
            .with_query_param("firewall.deserialization.blacklist".to_string(), firewall_deserialization_blacklist.join(",").to_string())
            .with_query_param("firewall.deserialization.diagnostics".to_string(), firewall_deserialization_diagnostics.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dtm_impl_service_dtm_web_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, connection_timeout: i32, socket_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqDtmImplServiceDtmWebServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("connection.timeout".to_string(), connection_timeout.to_string())
            .with_query_param("socket.timeout".to_string(), socket_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dtm_staging_ip_whitelist: Vec<String>, dtm_production_ip_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqDtmImplServletsDtmDeployHookServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("dtm.staging.ip.whitelist".to_string(), dtm_staging_ip_whitelist.join(",").to_string())
            .with_query_param("dtm.production.ip.whitelist".to_string(), dtm_production_ip_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_dtm_reactor_impl_service_web_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, endpoint_uri: &str, connection_timeout: i32, socket_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqDtmReactorImplServiceWebServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("endpointUri".to_string(), endpoint_uri.to_string())
            .with_query_param("connectionTimeout".to_string(), connection_timeout.to_string())
            .with_query_param("socketTimeout".to_string(), socket_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_experiencelog_impl_experience_log_config_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, disabled_for_groups: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("disabledForGroups".to_string(), disabled_for_groups.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_hc_content_packages_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str, package_names: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqHcContentPackagesHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.name".to_string(), hc_name.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("hc.mbean.name".to_string(), hc_mbean_name.to_string())
            .with_query_param("package.names".to_string(), package_names.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_history_impl_history_request_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, history_request_filter_excluded_selectors: Vec<String>, history_request_filter_excluded_extensions: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqHistoryImplHistoryRequestFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("history.requestFilter.excludedSelectors".to_string(), history_request_filter_excluded_selectors.join(",").to_string())
            .with_query_param("history.requestFilter.excludedExtensions".to_string(), history_request_filter_excluded_extensions.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_history_impl_history_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, history_service_resource_types: Vec<String>, history_service_path_filter: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqHistoryImplHistoryServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("history.service.resourceTypes".to_string(), history_service_resource_types.join(",").to_string())
            .with_query_param("history.service.pathFilter".to_string(), history_service_path_filter.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_inbox_impl_typeprovider_item_type_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, inbox_impl_typeprovider_registrypaths: Vec<String>, inbox_impl_typeprovider_legacypaths: Vec<String>, inbox_impl_typeprovider_defaulturl_failureitem: &str, inbox_impl_typeprovider_defaulturl_workitem: &str, inbox_impl_typeprovider_defaulturl_task: &str) -> Box<Future<Item = ::models::ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("inbox.impl.typeprovider.registrypaths".to_string(), inbox_impl_typeprovider_registrypaths.join(",").to_string())
            .with_query_param("inbox.impl.typeprovider.legacypaths".to_string(), inbox_impl_typeprovider_legacypaths.join(",").to_string())
            .with_query_param("inbox.impl.typeprovider.defaulturl.failureitem".to_string(), inbox_impl_typeprovider_defaulturl_failureitem.to_string())
            .with_query_param("inbox.impl.typeprovider.defaulturl.workitem".to_string(), inbox_impl_typeprovider_defaulturl_workitem.to_string())
            .with_query_param("inbox.impl.typeprovider.defaulturl.task".to_string(), inbox_impl_typeprovider_defaulturl_task.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_projects_impl_servlet_project_image_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, image_quality: &str, image_supported_resolutions: &str) -> Box<Future<Item = ::models::ComAdobeCqProjectsImplServletProjectImageServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("image.quality".to_string(), image_quality.to_string())
            .with_query_param("image.supported.resolutions".to_string(), image_supported_resolutions.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_projects_purge_scheduler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduledpurge_name: &str, scheduledpurge_purge_active: bool, scheduledpurge_templates: Vec<String>, scheduledpurge_purge_groups: bool, scheduledpurge_purge_assets: bool, scheduledpurge_terminate_running_workflows: bool, scheduledpurge_daysold: i32, scheduledpurge_save_threshold: i32) -> Box<Future<Item = ::models::ComAdobeCqProjectsPurgeSchedulerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduledpurge.name".to_string(), scheduledpurge_name.to_string())
            .with_query_param("scheduledpurge.purgeActive".to_string(), scheduledpurge_purge_active.to_string())
            .with_query_param("scheduledpurge.templates".to_string(), scheduledpurge_templates.join(",").to_string())
            .with_query_param("scheduledpurge.purgeGroups".to_string(), scheduledpurge_purge_groups.to_string())
            .with_query_param("scheduledpurge.purgeAssets".to_string(), scheduledpurge_purge_assets.to_string())
            .with_query_param("scheduledpurge.terminateRunningWorkflows".to_string(), scheduledpurge_terminate_running_workflows.to_string())
            .with_query_param("scheduledpurge.daysold".to_string(), scheduledpurge_daysold.to_string())
            .with_query_param("scheduledpurge.saveThreshold".to_string(), scheduledpurge_save_threshold.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, include_paths: Vec<String>, exporter_user: &str) -> Box<Future<Item = ::models::ComAdobeCqScheduledExporterImplScheduledExporterImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("include.paths".to_string(), include_paths.join(",").to_string())
            .with_query_param("exporter.user".to_string(), exporter_user.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_cq_screens_analytics_impl_url: &str, com_adobe_cq_screens_analytics_impl_apikey: &str, com_adobe_cq_screens_analytics_impl_project: &str, com_adobe_cq_screens_analytics_impl_environment: &str, com_adobe_cq_screens_analytics_impl_send_frequency: i32) -> Box<Future<Item = ::models::ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.cq.screens.analytics.impl.url".to_string(), com_adobe_cq_screens_analytics_impl_url.to_string())
            .with_query_param("com.adobe.cq.screens.analytics.impl.apikey".to_string(), com_adobe_cq_screens_analytics_impl_apikey.to_string())
            .with_query_param("com.adobe.cq.screens.analytics.impl.project".to_string(), com_adobe_cq_screens_analytics_impl_project.to_string())
            .with_query_param("com.adobe.cq.screens.analytics.impl.environment".to_string(), com_adobe_cq_screens_analytics_impl_environment.to_string())
            .with_query_param("com.adobe.cq.screens.analytics.impl.sendFrequency".to_string(), com_adobe_cq_screens_analytics_impl_send_frequency.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_device_impl_device_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_aem_screens_player_pingfrequency: i32, com_adobe_aem_screens_device_pasword_specialchars: &str, com_adobe_aem_screens_device_pasword_minlowercasechars: i32, com_adobe_aem_screens_device_pasword_minuppercasechars: i32, com_adobe_aem_screens_device_pasword_minnumberchars: i32, com_adobe_aem_screens_device_pasword_minspecialchars: i32, com_adobe_aem_screens_device_pasword_minlength: i32) -> Box<Future<Item = ::models::ComAdobeCqScreensDeviceImplDeviceServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.aem.screens.player.pingfrequency".to_string(), com_adobe_aem_screens_player_pingfrequency.to_string())
            .with_query_param("com.adobe.aem.screens.device.pasword.specialchars".to_string(), com_adobe_aem_screens_device_pasword_specialchars.to_string())
            .with_query_param("com.adobe.aem.screens.device.pasword.minlowercasechars".to_string(), com_adobe_aem_screens_device_pasword_minlowercasechars.to_string())
            .with_query_param("com.adobe.aem.screens.device.pasword.minuppercasechars".to_string(), com_adobe_aem_screens_device_pasword_minuppercasechars.to_string())
            .with_query_param("com.adobe.aem.screens.device.pasword.minnumberchars".to_string(), com_adobe_aem_screens_device_pasword_minnumberchars.to_string())
            .with_query_param("com.adobe.aem.screens.device.pasword.minspecialchars".to_string(), com_adobe_aem_screens_device_pasword_minspecialchars.to_string())
            .with_query_param("com.adobe.aem.screens.device.pasword.minlength".to_string(), com_adobe_aem_screens_device_pasword_minlength.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_device_registration_impl_registration_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, device_registration_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("deviceRegistrationTimeout".to_string(), device_registration_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_impl_handler_channels_update_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_pagesupdatehandler_imageresourcetypes: Vec<String>, cq_pagesupdatehandler_productresourcetypes: Vec<String>, cq_pagesupdatehandler_videoresourcetypes: Vec<String>, cq_pagesupdatehandler_dynamicsequenceresourcetypes: Vec<String>, cq_pagesupdatehandler_previewmodepaths: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.pagesupdatehandler.imageresourcetypes".to_string(), cq_pagesupdatehandler_imageresourcetypes.join(",").to_string())
            .with_query_param("cq.pagesupdatehandler.productresourcetypes".to_string(), cq_pagesupdatehandler_productresourcetypes.join(",").to_string())
            .with_query_param("cq.pagesupdatehandler.videoresourcetypes".to_string(), cq_pagesupdatehandler_videoresourcetypes.join(",").to_string())
            .with_query_param("cq.pagesupdatehandler.dynamicsequenceresourcetypes".to_string(), cq_pagesupdatehandler_dynamicsequenceresourcetypes.join(",").to_string())
            .with_query_param("cq.pagesupdatehandler.previewmodepaths".to_string(), cq_pagesupdatehandler_previewmodepaths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str) -> Box<Future<Item = ::models::ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_aem_screens_impl_remote_request_timeout: i32) -> Box<Future<Item = ::models::ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.aem.screens.impl.remote.request_timeout".to_string(), com_adobe_aem_screens_impl_remote_request_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_impl_screens_channel_post_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, screens_channels_properties_to_remove: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqScreensImplScreensChannelPostProcessorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("screens.channels.properties.to.remove".to_string(), screens_channels_properties_to_remove.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path: Vec<String>, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency: &str, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout: i32, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients: &str, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver: &str, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport: i32, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls: bool, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username: &str, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password: &str) -> Box<Future<Item = ::models::ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath".to_string(), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path.join(",").to_string())
            .with_query_param("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency".to_string(), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency.to_string())
            .with_query_param("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout".to_string(), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout.to_string())
            .with_query_param("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients".to_string(), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients.to_string())
            .with_query_param("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver".to_string(), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver.to_string())
            .with_query_param("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport".to_string(), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport.to_string())
            .with_query_param("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls".to_string(), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls.to_string())
            .with_query_param("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username".to_string(), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username.to_string())
            .with_query_param("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password".to_string(), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, global_size: i32, max_disk_usage: i32, persistence_enabled: bool, thread_pool_max_size: i32, scheduled_thread_pool_max_size: i32, graceful_shutdown_timeout: i32, queues: Vec<String>, topics: Vec<String>, addresses_max_delivery_attempts: i32, addresses_expiry_delay: i32, addresses_address_full_message_policy: &str, addresses_max_size_bytes: i32, addresses_page_size_bytes: i32, addresses_page_cache_max_size: i32, cluster_user: &str, cluster_password: &str, cluster_call_timeout: i32, cluster_call_failover_timeout: i32, cluster_client_failure_check_period: i32, cluster_notification_attempts: i32, cluster_notification_interval: i32, id_cache_size: i32, cluster_confirmation_window_size: i32, cluster_connection_ttl: i32, cluster_duplicate_detection: bool, cluster_initial_connect_attempts: i32, cluster_max_retry_interval: i32, cluster_min_large_message_size: i32, cluster_producer_window_size: i32, cluster_reconnect_attempts: i32, cluster_retry_interval: i32, cluster_retry_interval_multiplier: f32) -> Box<Future<Item = ::models::ComAdobeCqScreensMqActivemqImplArtemisJmsProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("global.size".to_string(), global_size.to_string())
            .with_query_param("max.disk.usage".to_string(), max_disk_usage.to_string())
            .with_query_param("persistence.enabled".to_string(), persistence_enabled.to_string())
            .with_query_param("thread.pool.max.size".to_string(), thread_pool_max_size.to_string())
            .with_query_param("scheduled.thread.pool.max.size".to_string(), scheduled_thread_pool_max_size.to_string())
            .with_query_param("graceful.shutdown.timeout".to_string(), graceful_shutdown_timeout.to_string())
            .with_query_param("queues".to_string(), queues.join(",").to_string())
            .with_query_param("topics".to_string(), topics.join(",").to_string())
            .with_query_param("addresses.max.delivery.attempts".to_string(), addresses_max_delivery_attempts.to_string())
            .with_query_param("addresses.expiry.delay".to_string(), addresses_expiry_delay.to_string())
            .with_query_param("addresses.address.full.message.policy".to_string(), addresses_address_full_message_policy.to_string())
            .with_query_param("addresses.max.size.bytes".to_string(), addresses_max_size_bytes.to_string())
            .with_query_param("addresses.page.size.bytes".to_string(), addresses_page_size_bytes.to_string())
            .with_query_param("addresses.page.cache.max.size".to_string(), addresses_page_cache_max_size.to_string())
            .with_query_param("cluster.user".to_string(), cluster_user.to_string())
            .with_query_param("cluster.password".to_string(), cluster_password.to_string())
            .with_query_param("cluster.call.timeout".to_string(), cluster_call_timeout.to_string())
            .with_query_param("cluster.call.failover.timeout".to_string(), cluster_call_failover_timeout.to_string())
            .with_query_param("cluster.client.failure.check.period".to_string(), cluster_client_failure_check_period.to_string())
            .with_query_param("cluster.notification.attempts".to_string(), cluster_notification_attempts.to_string())
            .with_query_param("cluster.notification.interval".to_string(), cluster_notification_interval.to_string())
            .with_query_param("id.cache.size".to_string(), id_cache_size.to_string())
            .with_query_param("cluster.confirmation.window.size".to_string(), cluster_confirmation_window_size.to_string())
            .with_query_param("cluster.connection.ttl".to_string(), cluster_connection_ttl.to_string())
            .with_query_param("cluster.duplicate.detection".to_string(), cluster_duplicate_detection.to_string())
            .with_query_param("cluster.initial.connect.attempts".to_string(), cluster_initial_connect_attempts.to_string())
            .with_query_param("cluster.max.retry.interval".to_string(), cluster_max_retry_interval.to_string())
            .with_query_param("cluster.min.large.message.size".to_string(), cluster_min_large_message_size.to_string())
            .with_query_param("cluster.producer.window.size".to_string(), cluster_producer_window_size.to_string())
            .with_query_param("cluster.reconnect.attempts".to_string(), cluster_reconnect_attempts.to_string())
            .with_query_param("cluster.retry.interval".to_string(), cluster_retry_interval.to_string())
            .with_query_param("cluster.retry.interval.multiplier".to_string(), cluster_retry_interval_multiplier.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path: Vec<String>, com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency: &str) -> Box<Future<Item = ::models::ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath".to_string(), com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path.join(",").to_string())
            .with_query_param("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency".to_string(), com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disable_smart_sync: bool) -> Box<Future<Item = ::models::ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("disableSmartSync".to_string(), disable_smart_sync.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable_data_triggered_content: bool) -> Box<Future<Item = ::models::ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enableDataTriggeredContent".to_string(), enable_data_triggered_content.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, dispatcher_address: &str, dispatcher_filter_allowed: Vec<String>, dispatcher_filter_blocked: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("dispatcher.address".to_string(), dispatcher_address.to_string())
            .with_query_param("dispatcher.filter.allowed".to_string(), dispatcher_filter_allowed.join(",").to_string())
            .with_query_param("dispatcher.filter.blocked".to_string(), dispatcher_filter_blocked.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_security_hc_packages_impl_example_content_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, webserver_address: &str) -> Box<Future<Item = ::models::ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("webserver.address".to_string(), webserver_address.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_accountverification_impl_account_management_config_im(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable: bool, ttl1: i32, ttl2: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enable".to_string(), enable.to_string())
            .with_query_param("ttl1".to_string(), ttl1.to_string())
            .with_query_param("ttl2".to_string(), ttl2.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.topics".to_string(), event_topics.to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, accepted: bool, ranked: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("accepted".to_string(), accepted.to_string())
            .with_query_param("ranked".to_string(), ranked.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ranking: i32, enable: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("ranking".to_string(), ranking.to_string())
            .with_query_param("enable".to_string(), enable.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, stream_path: &str, stream_name: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("streamPath".to_string(), stream_path.to_string())
            .with_query_param("streamName".to_string(), stream_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_retry: i32, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("MaxRetry".to_string(), max_retry.to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, attachment_type_blacklist: &str, extension_order: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.to_string())
            .with_query_param("extension.order".to_string(), extension_order.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_calendar_servlets_time_zone_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, timezones_expirytime: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCalendarServletsTimeZoneServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("timezones.expirytime".to_string(), timezones_expirytime.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ranking: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("ranking".to_string(), ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, num_user_limit: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("numUserLimit".to_string(), num_user_limit.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable_scheduled_posts_search: bool, number_of_minutes: i32, max_search_limit: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enableScheduledPostsSearch".to_string(), enable_scheduled_posts_search.to_string())
            .with_query_param("numberOfMinutes".to_string(), number_of_minutes.to_string())
            .with_query_param("maxSearchLimit".to_string(), max_search_limit.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_cors_cors_authentication_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cors_enabling: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cors.enabling".to_string(), cors_enabling.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priorityOrder".to_string(), priority_order.to_string())
            .with_query_param("replyEmailPatterns".to_string(), reply_email_patterns.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, context_path: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("context.path".to_string(), context_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.topics".to_string(), event_topics.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priorityOrder".to_string(), priority_order.to_string())
            .with_query_param("replyEmailPatterns".to_string(), reply_email_patterns.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pattern_time: &str, pattern_newline: &str, pattern_day_of_month: &str, pattern_month: &str, pattern_year: &str, pattern_date: &str, pattern_date_time: &str, pattern_email: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("pattern.time".to_string(), pattern_time.to_string())
            .with_query_param("pattern.newline".to_string(), pattern_newline.to_string())
            .with_query_param("pattern.dayOfMonth".to_string(), pattern_day_of_month.to_string())
            .with_query_param("pattern.month".to_string(), pattern_month.to_string())
            .with_query_param("pattern.year".to_string(), pattern_year.to_string())
            .with_query_param("pattern.date".to_string(), pattern_date.to_string())
            .with_query_param("pattern.dateTime".to_string(), pattern_date_time.to_string())
            .with_query_param("pattern.email".to_string(), pattern_email.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, email_name: &str, email_create_post_from_reply: bool, email_add_comment_id_to: &str, email_subject_maximum_length: i32, email_reply_to_address: &str, email_reply_to_delimiter: &str, email_tracker_id_prefix_in_subject: &str, email_tracker_id_prefix_in_body: &str, email_as_html: bool, email_default_user_name: &str, email_templates_root_path: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("email.name".to_string(), email_name.to_string())
            .with_query_param("email.createPostFromReply".to_string(), email_create_post_from_reply.to_string())
            .with_query_param("email.addCommentIdTo".to_string(), email_add_comment_id_to.to_string())
            .with_query_param("email.subjectMaximumLength".to_string(), email_subject_maximum_length.to_string())
            .with_query_param("email.replyToAddress".to_string(), email_reply_to_address.to_string())
            .with_query_param("email.replyToDelimiter".to_string(), email_reply_to_delimiter.to_string())
            .with_query_param("email.trackerIdPrefixInSubject".to_string(), email_tracker_id_prefix_in_subject.to_string())
            .with_query_param("email.trackerIdPrefixInBody".to_string(), email_tracker_id_prefix_in_body.to_string())
            .with_query_param("email.asHTML".to_string(), email_as_html.to_string())
            .with_query_param("email.defaultUserName".to_string(), email_default_user_name.to_string())
            .with_query_param("email.templates.rootPath".to_string(), email_templates_root_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, connect_protocol: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("connectProtocol".to_string(), connect_protocol.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priorityOrder".to_string(), priority_order.to_string())
            .with_query_param("replyEmailPatterns".to_string(), reply_email_patterns.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priorityOrder".to_string(), priority_order.to_string())
            .with_query_param("replyEmailPatterns".to_string(), reply_email_patterns.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priorityOrder".to_string(), priority_order.to_string())
            .with_query_param("replyEmailPatterns".to_string(), reply_email_patterns.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priorityOrder".to_string(), priority_order.to_string())
            .with_query_param("replyEmailPatterns".to_string(), reply_email_patterns.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, reply_email_patterns: Vec<String>, priority_order: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("replyEmailPatterns".to_string(), reply_email_patterns.join(",").to_string())
            .with_query_param("priorityOrder".to_string(), priority_order.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority_order: i32, reply_email_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priorityOrder".to_string(), priority_order.to_string())
            .with_query_param("replyEmailPatterns".to_string(), reply_email_patterns.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, number_of_days: i32, age_of_file: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("numberOfDays".to_string(), number_of_days.to_string())
            .with_query_param("ageOfFile".to_string(), age_of_file.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str, verbs: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.topics".to_string(), event_topics.to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .with_query_param("verbs".to_string(), verbs.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable: bool, ugc_limit: i32, ugc_limit_duration: i32, domains: Vec<String>, to_list: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enable".to_string(), enable.to_string())
            .with_query_param("UGCLimit".to_string(), ugc_limit.to_string())
            .with_query_param("ugcLimitDuration".to_string(), ugc_limit_duration.to_string())
            .with_query_param("domains".to_string(), domains.join(",").to_string())
            .with_query_param("toList".to_string(), to_list.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str, oauth_cloud_config_root: &str, provider_config_root: &str, provider_config_create_tags_enabled: bool, provider_config_user_folder: &str, provider_config_facebook_fetch_fields: bool, provider_config_facebook_fields: Vec<String>, provider_config_refresh_userdata_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.provider.id".to_string(), oauth_provider_id.to_string())
            .with_query_param("oauth.cloud.config.root".to_string(), oauth_cloud_config_root.to_string())
            .with_query_param("provider.config.root".to_string(), provider_config_root.to_string())
            .with_query_param("provider.config.create.tags.enabled".to_string(), provider_config_create_tags_enabled.to_string())
            .with_query_param("provider.config.user.folder".to_string(), provider_config_user_folder.to_string())
            .with_query_param("provider.config.facebook.fetch.fields".to_string(), provider_config_facebook_fetch_fields.to_string())
            .with_query_param("provider.config.facebook.fields".to_string(), provider_config_facebook_fields.join(",").to_string())
            .with_query_param("provider.config.refresh.userdata.enabled".to_string(), provider_config_refresh_userdata_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: Vec<String>, service_ranking: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, facebook: Vec<String>, twitter: Vec<String>, provider_config_user_folder: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("facebook".to_string(), facebook.join(",").to_string())
            .with_query_param("twitter".to_string(), twitter.join(",").to_string())
            .with_query_param("provider.config.user.folder".to_string(), provider_config_user_folder.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str, oauth_cloud_config_root: &str, provider_config_root: &str, provider_config_user_folder: &str, provider_config_twitter_enable_params: bool, provider_config_twitter_params: Vec<String>, provider_config_refresh_userdata_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.provider.id".to_string(), oauth_provider_id.to_string())
            .with_query_param("oauth.cloud.config.root".to_string(), oauth_cloud_config_root.to_string())
            .with_query_param("provider.config.root".to_string(), provider_config_root.to_string())
            .with_query_param("provider.config.user.folder".to_string(), provider_config_user_folder.to_string())
            .with_query_param("provider.config.twitter.enable.params".to_string(), provider_config_twitter_enable_params.to_string())
            .with_query_param("provider.config.twitter.params".to_string(), provider_config_twitter_params.join(",").to_string())
            .with_query_param("provider.config.refresh.userdata.enabled".to_string(), provider_config_refresh_userdata_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_social_content_fragments_services_enabled: bool, cq_social_content_fragments_services_wait_time_seconds: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.social.content.fragments.services.enabled".to_string(), cq_social_content_fragments_services_enabled.to_string())
            .with_query_param("cq.social.content.fragments.services.waitTimeSeconds".to_string(), cq_social_content_fragments_services_wait_time_seconds.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, version_id: &str, cache_on: bool, concurrency_level: i32, cache_start_size: i32, cache_ttl: i32, cache_size: i32, time_limit: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("version.id".to_string(), version_id.to_string())
            .with_query_param("cache.on".to_string(), cache_on.to_string())
            .with_query_param("concurrency.level".to_string(), concurrency_level.to_string())
            .with_query_param("cache.start.size".to_string(), cache_start_size.to_string())
            .with_query_param("cache.ttl".to_string(), cache_ttl.to_string())
            .with_query_param("cache.size".to_string(), cache_size.to_string())
            .with_query_param("time.limit".to_string(), time_limit.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, solr_zk_timeout: &str, solr_commit: &str, cache_on: bool, concurrency_level: i32, cache_start_size: i32, cache_ttl: i32, cache_size: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("solr.zk.timeout".to_string(), solr_zk_timeout.to_string())
            .with_query_param("solr.commit".to_string(), solr_commit.to_string())
            .with_query_param("cache.on".to_string(), cache_on.to_string())
            .with_query_param("concurrency.level".to_string(), concurrency_level.to_string())
            .with_query_param("cache.start.size".to_string(), cache_start_size.to_string())
            .with_query_param("cache.ttl".to_string(), cache_ttl.to_string())
            .with_query_param("cache.size".to_string(), cache_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, solr_zk_timeout: &str, solr_commit: &str, cache_on: bool, concurrency_level: i32, cache_start_size: i32, cache_ttl: i32, cache_size: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("solr.zk.timeout".to_string(), solr_zk_timeout.to_string())
            .with_query_param("solr.commit".to_string(), solr_commit.to_string())
            .with_query_param("cache.on".to_string(), cache_on.to_string())
            .with_query_param("concurrency.level".to_string(), concurrency_level.to_string())
            .with_query_param("cache.start.size".to_string(), cache_start_size.to_string())
            .with_query_param("cache.ttl".to_string(), cache_ttl.to_string())
            .with_query_param("cache.size".to_string(), cache_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_member_check: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("isMemberCheck".to_string(), is_member_check.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_member_check: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("isMemberCheck".to_string(), is_member_check.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_enablement_services_impl_author_marker_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_selectors: &str, sling_servlet_extensions: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.selectors".to_string(), sling_servlet_selectors.to_string())
            .with_query_param("sling.servlet.extensions".to_string(), sling_servlet_extensions.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_forum_dispatcher_impl_flush_operations(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, extension_order: i32, flush_forumontopic: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("extension.order".to_string(), extension_order.to_string())
            .with_query_param("flush.forumontopic".to_string(), flush_forumontopic.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_group_client_impl_community_group_collection_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, group_listing_pagination_enable: bool, group_listing_lazyloading_enable: bool, page_size: i32, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("group.listing.pagination.enable".to_string(), group_listing_pagination_enable.to_string())
            .with_query_param("group.listing.lazyloading.enable".to_string(), group_listing_lazyloading_enable.to_string())
            .with_query_param("page.size".to_string(), page_size.to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_group_impl_group_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_wait_time: i32, min_wait_between_retries: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialGroupImplGroupServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("maxWaitTime".to_string(), max_wait_time.to_string())
            .with_query_param("minWaitBetweenRetries".to_string(), min_wait_between_retries.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_handlebars_guava_template_cache_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, parameter_guava_cache_enabled: bool, parameter_guava_cache_params: &str, parameter_guava_cache_reload: bool, service_ranking: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("parameter.guava.cache.enabled".to_string(), parameter_guava_cache_enabled.to_string())
            .with_query_param("parameter.guava.cache.params".to_string(), parameter_guava_cache_params.to_string())
            .with_query_param("parameter.guava.cache.reload".to_string(), parameter_guava_cache_reload.to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_members_impl_community_member_group_profile_component_f(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, everyone_limit: i32, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("everyoneLimit".to_string(), everyone_limit.to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, message_properties: Vec<String>, message_box_size_limit: i32, message_count_limit: i32, notify_failure: bool, failure_message_from: &str, failure_template_path: &str, max_retries: i32, min_wait_between_retries: i32, count_update_pool_size: i32, inbox_path: &str, sentitems_path: &str, support_attachments: bool, support_group_messaging: bool, max_total_recipients: i32, batch_size: i32, max_total_attachment_size: i32, attachment_type_blacklist: Vec<String>, allowed_attachment_types: Vec<String>, service_selector: &str, field_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("message.properties".to_string(), message_properties.join(",").to_string())
            .with_query_param("messageBoxSizeLimit".to_string(), message_box_size_limit.to_string())
            .with_query_param("messageCountLimit".to_string(), message_count_limit.to_string())
            .with_query_param("notifyFailure".to_string(), notify_failure.to_string())
            .with_query_param("failureMessageFrom".to_string(), failure_message_from.to_string())
            .with_query_param("failureTemplatePath".to_string(), failure_template_path.to_string())
            .with_query_param("maxRetries".to_string(), max_retries.to_string())
            .with_query_param("minWaitBetweenRetries".to_string(), min_wait_between_retries.to_string())
            .with_query_param("countUpdatePoolSize".to_string(), count_update_pool_size.to_string())
            .with_query_param("inbox.path".to_string(), inbox_path.to_string())
            .with_query_param("sentitems.path".to_string(), sentitems_path.to_string())
            .with_query_param("supportAttachments".to_string(), support_attachments.to_string())
            .with_query_param("supportGroupMessaging".to_string(), support_group_messaging.to_string())
            .with_query_param("maxTotalRecipients".to_string(), max_total_recipients.to_string())
            .with_query_param("batchSize".to_string(), batch_size.to_string())
            .with_query_param("maxTotalAttachmentSize".to_string(), max_total_attachment_size.to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.join(",").to_string())
            .with_query_param("allowedAttachmentTypes".to_string(), allowed_attachment_types.join(",").to_string())
            .with_query_param("serviceSelector".to_string(), service_selector.to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, resource_type_filters: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("resourceType.filters".to_string(), resource_type_filters.join(",").to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, resource_type_filters: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("resourceType.filters".to_string(), resource_type_filters.join(",").to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_notifications_impl_mentions_router(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialNotificationsImplMentionsRouterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.topics".to_string(), event_topics.to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_notifications_impl_notification_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_unread_notification_count: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("max.unread.notification.count".to_string(), max_unread_notification_count.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_notifications_impl_notifications_router(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialNotificationsImplNotificationsRouterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.topics".to_string(), event_topics.to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_social_reporting_analytics_polling_importer_interval: i32, cq_social_reporting_analytics_polling_importer_page_size: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.social.reporting.analytics.polling.importer.interval".to_string(), cq_social_reporting_analytics_polling_importer_interval.to_string())
            .with_query_param("cq.social.reporting.analytics.polling.importer.pageSize".to_string(), cq_social_reporting_analytics_polling_importer_page_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, report_fetch_delay: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("report.fetch.delay".to_string(), report_fetch_delay.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_social_console_analytics_sites_mapping: Vec<String>, priority: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.social.console.analytics.sites.mapping".to_string(), cq_social_console_analytics_sites_mapping.join(",").to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .with_query_param("attachmentTypeBlacklist".to_string(), attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_selectors: &str, sling_servlet_extensions: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.selectors".to_string(), sling_servlet_selectors.to_string())
            .with_query_param("sling.servlet.extensions".to_string(), sling_servlet_extensions.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_selectors: Vec<String>, sling_servlet_extensions: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.selectors".to_string(), sling_servlet_selectors.join(",").to_string())
            .with_query_param("sling.servlet.extensions".to_string(), sling_servlet_extensions.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_scoring_impl_scoring_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialScoringImplScoringEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.topics".to_string(), event_topics.to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable_fallback: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enableFallback".to_string(), enable_fallback.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_site_endpoints_impl_site_operation_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, field_whitelist: Vec<String>, site_path_filters: Vec<String>, site_package_group: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fieldWhitelist".to_string(), field_whitelist.join(",").to_string())
            .with_query_param("sitePathFilters".to_string(), site_path_filters.join(",").to_string())
            .with_query_param("sitePackageGroup".to_string(), site_package_group.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_social_console_analytics_components: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.social.console.analytics.components".to_string(), cq_social_console_analytics_components.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_site_impl_site_configurator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, components_using_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("componentsUsingTags".to_string(), components_using_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_srp_impl_social_solr_connector(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, srp_type: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialSrpImplSocialSolrConnectorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("srp.type".to_string(), srp_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_sync_impl_diff_changes_observer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, agent_name: &str, diff_path: &str, property_names: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialSyncImplDiffChangesObserverInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("agentName".to_string(), agent_name.to_string())
            .with_query_param("diffPath".to_string(), diff_path.to_string())
            .with_query_param("propertyNames".to_string(), property_names.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_sync_impl_group_sync_listener_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, nodetypes: Vec<String>, ignorableprops: Vec<String>, ignorablenodes: &str, enabled: bool, distfolders: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("nodetypes".to_string(), nodetypes.join(",").to_string())
            .with_query_param("ignorableprops".to_string(), ignorableprops.join(",").to_string())
            .with_query_param("ignorablenodes".to_string(), ignorablenodes.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("distfolders".to_string(), distfolders.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_sync_impl_publisher_sync_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, active_run_modes: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("activeRunModes".to_string(), active_run_modes.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_sync_impl_user_sync_listener_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, nodetypes: Vec<String>, ignorableprops: Vec<String>, ignorablenodes: Vec<String>, enabled: bool, distfolders: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialSyncImplUserSyncListenerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("nodetypes".to_string(), nodetypes.join(",").to_string())
            .with_query_param("ignorableprops".to_string(), ignorableprops.join(",").to_string())
            .with_query_param("ignorablenodes".to_string(), ignorablenodes.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("distfolders".to_string(), distfolders.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_translation_impl_translation_service_config_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, translate_language: &str, translate_display: &str, translate_attribution: bool, translate_caching: &str, translate_smart_rendering: &str, translate_caching_duration: &str, translate_session_save_interval: &str, translate_session_save_batch_limit: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("translate.language".to_string(), translate_language.to_string())
            .with_query_param("translate.display".to_string(), translate_display.to_string())
            .with_query_param("translate.attribution".to_string(), translate_attribution.to_string())
            .with_query_param("translate.caching".to_string(), translate_caching.to_string())
            .with_query_param("translate.smart.rendering".to_string(), translate_smart_rendering.to_string())
            .with_query_param("translate.caching.duration".to_string(), translate_caching_duration.to_string())
            .with_query_param("translate.session.save.interval".to_string(), translate_session_save_interval.to_string())
            .with_query_param("translate.session.save.batchLimit".to_string(), translate_session_save_batch_limit.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_translation_impl_ugc_language_detector(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: &str, event_filter: &str, translate_listener_type: Vec<String>, translate_property_list: Vec<String>, pool_size: i32, max_pool_size: i32, queue_size: i32, keep_alive_time: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialTranslationImplUgcLanguageDetectorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.topics".to_string(), event_topics.to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .with_query_param("translate.listener.type".to_string(), translate_listener_type.join(",").to_string())
            .with_query_param("translate.property.list".to_string(), translate_property_list.join(",").to_string())
            .with_query_param("poolSize".to_string(), pool_size.to_string())
            .with_query_param("maxPoolSize".to_string(), max_pool_size.to_string())
            .with_query_param("queueSize".to_string(), queue_size.to_string())
            .with_query_param("keepAliveTime".to_string(), keep_alive_time.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, thread_pool_size: i32, delay_time: i32, worker_sleep_time: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("threadPoolSize".to_string(), thread_pool_size.to_string())
            .with_query_param("delayTime".to_string(), delay_time.to_string())
            .with_query_param("workerSleepTime".to_string(), worker_sleep_time.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pool_size: i32, max_pool_size: i32, queue_size: i32, keep_alive_time: i32) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("poolSize".to_string(), pool_size.to_string())
            .with_query_param("maxPoolSize".to_string(), max_pool_size.to_string())
            .with_query_param("queueSize".to_string(), queue_size.to_string())
            .with_query_param("keepAliveTime".to_string(), keep_alive_time.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_primary_publisher: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("isPrimaryPublisher".to_string(), is_primary_publisher.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_ugcbase_impl_social_utils_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, legacy_cloud_ugc_path_mapping: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("legacyCloudUGCPathMapping".to_string(), legacy_cloud_ugc_path_mapping.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, automoderation_sequence: Vec<String>, automoderation_onfailurestop: bool) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("automoderation.sequence".to_string(), automoderation_sequence.join(",").to_string())
            .with_query_param("automoderation.onfailurestop".to_string(), automoderation_onfailurestop.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, watchwords_positive: Vec<String>, watchwords_negative: Vec<String>, watchwords_path: &str, sentiment_path: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("watchwords.positive".to_string(), watchwords_positive.join(",").to_string())
            .with_query_param("watchwords.negative".to_string(), watchwords_negative.join(",").to_string())
            .with_query_param("watchwords.path".to_string(), watchwords_path.to_string())
            .with_query_param("sentiment.path".to_string(), sentiment_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_attachment_type_blacklist: Vec<String>, baseline_attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("default.attachment.type.blacklist".to_string(), default_attachment_type_blacklist.join(",").to_string())
            .with_query_param("baseline.attachment.type.blacklist".to_string(), baseline_attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, parameter_whitelist: Vec<String>, parameter_whitelist_prefixes: Vec<String>, binary_parameter_whitelist: Vec<String>, modifier_whitelist: Vec<String>, operation_whitelist: Vec<String>, operation_whitelist_prefixes: Vec<String>, typehint_whitelist: Vec<String>, resourcetype_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("parameter.whitelist".to_string(), parameter_whitelist.join(",").to_string())
            .with_query_param("parameter.whitelist.prefixes".to_string(), parameter_whitelist_prefixes.join(",").to_string())
            .with_query_param("binary.parameter.whitelist".to_string(), binary_parameter_whitelist.join(",").to_string())
            .with_query_param("modifier.whitelist".to_string(), modifier_whitelist.join(",").to_string())
            .with_query_param("operation.whitelist".to_string(), operation_whitelist.join(",").to_string())
            .with_query_param("operation.whitelist.prefixes".to_string(), operation_whitelist_prefixes.join(",").to_string())
            .with_query_param("typehint.whitelist".to_string(), typehint_whitelist.join(",").to_string())
            .with_query_param("resourcetype.whitelist".to_string(), resourcetype_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_extensions: &str, sling_servlet_paths: &str, sling_servlet_methods: &str) -> Box<Future<Item = ::models::ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.extensions".to_string(), sling_servlet_extensions.to_string())
            .with_query_param("sling.servlet.paths".to_string(), sling_servlet_paths.to_string())
            .with_query_param("sling.servlet.methods".to_string(), sling_servlet_methods.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_social_user_impl_transport_http_to_publisher(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable: bool, agent_configuration: Vec<String>, context_path: &str, disabled_cipher_suites: Vec<String>, enabled_cipher_suites: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqSocialUserImplTransportHttpToPublisherInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enable".to_string(), enable.to_string())
            .with_query_param("agent.configuration".to_string(), agent_configuration.join(",").to_string())
            .with_query_param("context.path".to_string(), context_path.to_string())
            .with_query_param("disabled.cipher.suites".to_string(), disabled_cipher_suites.join(",").to_string())
            .with_query_param("enabled.cipher.suites".to_string(), enabled_cipher_suites.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, resource_types: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("resource.types".to_string(), resource_types.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, delete_path_regexps: Vec<String>, delete_sql2_query: &str) -> Box<Future<Item = ::models::ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("delete.path.regexps".to_string(), delete_path_regexps.join(",").to_string())
            .with_query_param("delete.sql2.query".to_string(), delete_sql2_query.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, delete_name_regexps: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("delete.name.regexps".to_string(), delete_name_regexps.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, threshold: i32, job_topic_name: &str, email_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("threshold".to_string(), threshold.to_string())
            .with_query_param("jobTopicName".to_string(), job_topic_name.to_string())
            .with_query_param("emailEnabled".to_string(), email_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, job_purge_threshold: i32, job_purge_max_jobs: i32) -> Box<Future<Item = ::models::ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .with_query_param("job.purge.threshold".to_string(), job_purge_threshold.to_string())
            .with_query_param("job.purge.max.jobs".to_string(), job_purge_max_jobs.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, threshold: i32, job_topic_name: &str, email_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("threshold".to_string(), threshold.to_string())
            .with_query_param("jobTopicName".to_string(), job_topic_name.to_string())
            .with_query_param("emailEnabled".to_string(), email_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, threshold: i32, job_topic_name: &str, email_enabled: bool) -> Box<Future<Item = ::models::ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("threshold".to_string(), threshold.to_string())
            .with_query_param("jobTopicName".to_string(), job_topic_name.to_string())
            .with_query_param("emailEnabled".to_string(), email_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_wcm_launches_impl_launches_event_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, launches_eventhandler_threadpool_maxsize: i32, launches_eventhandler_threadpool_priority: &str, launches_eventhandler_updatelastmodification: bool) -> Box<Future<Item = ::models::ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .with_query_param("launches.eventhandler.threadpool.maxsize".to_string(), launches_eventhandler_threadpool_maxsize.to_string())
            .with_query_param("launches.eventhandler.threadpool.priority".to_string(), launches_eventhandler_threadpool_priority.to_string())
            .with_query_param("launches.eventhandler.updatelastmodification".to_string(), launches_eventhandler_updatelastmodification.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_qrcode_servlet_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.wcm.qrcode.servlet.whitelist".to_string(), cq_wcm_qrcode_servlet_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, size: i32) -> Box<Future<Item = ::models::ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("size".to_string(), size.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sync_translation_state_scheduling_format: &str, scheduling_repeat_translation_scheduling_format: &str, sync_translation_state_lock_timeout_in_minutes: &str, export_format: &str) -> Box<Future<Item = ::models::ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("syncTranslationState.schedulingFormat".to_string(), sync_translation_state_scheduling_format.to_string())
            .with_query_param("schedulingRepeatTranslation.schedulingFormat".to_string(), scheduling_repeat_translation_scheduling_format.to_string())
            .with_query_param("syncTranslationState.lockTimeoutInMinutes".to_string(), sync_translation_state_lock_timeout_in_minutes.to_string())
            .with_query_param("export.format".to_string(), export_format.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, portal_outboxes: Vec<String>, draft_data_service: &str, draft_metadata_service: &str, submit_data_service: &str, submit_metadata_service: &str, pending_sign_data_service: &str, pending_sign_metadata_service: &str) -> Box<Future<Item = ::models::ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("portal.outboxes".to_string(), portal_outboxes.join(",").to_string())
            .with_query_param("draft.data.service".to_string(), draft_data_service.to_string())
            .with_query_param("draft.metadata.service".to_string(), draft_metadata_service.to_string())
            .with_query_param("submit.data.service".to_string(), submit_data_service.to_string())
            .with_query_param("submit.metadata.service".to_string(), submit_metadata_service.to_string())
            .with_query_param("pendingSign.data.service".to_string(), pending_sign_data_service.to_string())
            .with_query_param("pendingSign.metadata.service".to_string(), pending_sign_metadata_service.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_fd_fp_config_forms_portal_scheduler_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, formportal_interval: &str) -> Box<Future<Item = ::models::ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("formportal.interval".to_string(), formportal_interval.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_forms_common_service_impl_default_data_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, alloweddata_file_locations: Vec<String>) -> Box<Future<Item = ::models::ComAdobeFormsCommonServiceImplDefaultDataProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("alloweddataFileLocations".to_string(), alloweddata_file_locations.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, temp_storage_config: &str) -> Box<Future<Item = ::models::ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("tempStorageConfig".to_string(), temp_storage_config.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_forms_common_servlet_temp_clean_up_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, duration_for_temporary_storage: &str, duration_for_anonymous_storage: &str) -> Box<Future<Item = ::models::ComAdobeFormsCommonServletTempCleanUpTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .with_query_param("Duration for Temporary Storage".to_string(), duration_for_temporary_storage.to_string())
            .with_query_param("Duration for Anonymous Storage".to_string(), duration_for_anonymous_storage.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_acp_platform_platform_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, query_limit: i32, file_type_extension_map: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteAcpPlatformPlatformServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("query.limit".to_string(), query_limit.to_string())
            .with_query_param("file.type.extension.map".to_string(), file_type_extension_map.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_activitystreams_impl_activity_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, aggregate_relationships: Vec<String>, aggregate_descend_virtual: bool) -> Box<Future<Item = ::models::ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("aggregate.relationships".to_string(), aggregate_relationships.join(",").to_string())
            .with_query_param("aggregate.descend.virtual".to_string(), aggregate_descend_virtual.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_analyzer_base_system_status_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("disabled".to_string(), disabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("disabled".to_string(), disabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_apicontroller_filter_resolver_hook_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_cq_cdn_cdn_rewriter: &str, com_adobe_cq_cloud_config_components: &str, com_adobe_cq_cloud_config_core: &str, com_adobe_cq_cloud_config_ui: &str, com_adobe_cq_com_adobe_cq_editor: &str, com_adobe_cq_com_adobe_cq_projects_core: &str, com_adobe_cq_com_adobe_cq_projects_wcm_core: &str, com_adobe_cq_com_adobe_cq_ui_commons: &str, com_adobe_cq_com_adobe_cq_wcm_style: &str, com_adobe_cq_cq_activitymap_integration: &str, com_adobe_cq_cq_contexthub_commons: &str, com_adobe_cq_cq_dtm: &str, com_adobe_cq_cq_healthcheck: &str, com_adobe_cq_cq_multisite_targeting: &str, com_adobe_cq_cq_pre_upgrade_cleanup: &str, com_adobe_cq_cq_product_info_provider: &str, com_adobe_cq_cq_rest_sites: &str, com_adobe_cq_cq_security_hc: &str, com_adobe_cq_dam_cq_dam_svg_handler: &str, com_adobe_cq_dam_cq_scene7_imaging: &str, com_adobe_cq_dtm_reactor_core: &str, com_adobe_cq_dtm_reactor_ui: &str, com_adobe_cq_exp_jspel_resolver: &str, com_adobe_cq_inbox_cq_inbox: &str, com_adobe_cq_json_schema_parser: &str, com_adobe_cq_media_cq_media_publishing_dps_fp_core: &str, com_adobe_cq_mobile_cq_mobile_caas: &str, com_adobe_cq_mobile_cq_mobile_index_builder: &str, com_adobe_cq_mobile_cq_mobile_phonegap_build: &str, com_adobe_cq_myspell: &str, com_adobe_cq_sample_we_retail_core: &str, com_adobe_cq_screens_com_adobe_cq_screens_dcc: &str, com_adobe_cq_screens_com_adobe_cq_screens_mq_core: &str, com_adobe_cq_social_cq_social_as_provider: &str, com_adobe_cq_social_cq_social_badging_basic_impl: &str, com_adobe_cq_social_cq_social_badging_impl: &str, com_adobe_cq_social_cq_social_calendar_impl: &str, com_adobe_cq_social_cq_social_content_fragments_impl: &str, com_adobe_cq_social_cq_social_enablement_impl: &str, com_adobe_cq_social_cq_social_graph_impl: &str, com_adobe_cq_social_cq_social_ideation_impl: &str, com_adobe_cq_social_cq_social_jcr_provider: &str, com_adobe_cq_social_cq_social_members_impl: &str, com_adobe_cq_social_cq_social_ms_provider: &str, com_adobe_cq_social_cq_social_notifications_channels_web: &str, com_adobe_cq_social_cq_social_notifications_impl: &str, com_adobe_cq_social_cq_social_rdb_provider: &str, com_adobe_cq_social_cq_social_scf_impl: &str, com_adobe_cq_social_cq_social_scoring_basic_impl: &str, com_adobe_cq_social_cq_social_scoring_impl: &str, com_adobe_cq_social_cq_social_serviceusers_impl: &str, com_adobe_cq_social_cq_social_srp_impl: &str, com_adobe_cq_social_cq_social_ugcbase_impl: &str, com_adobe_dam_cq_dam_cfm_impl: &str, com_adobe_forms_foundation_forms_foundation_base: &str, com_adobe_granite_apicontroller: &str, com_adobe_granite_asset_core: &str, com_adobe_granite_auth_sso: &str, com_adobe_granite_bundles_hc_impl: &str, com_adobe_granite_compat_router: &str, com_adobe_granite_conf: &str, com_adobe_granite_conf_ui_core: &str, com_adobe_granite_cors: &str, com_adobe_granite_crx_explorer: &str, com_adobe_granite_crxde_lite: &str, com_adobe_granite_crypto_config: &str, com_adobe_granite_crypto_extension: &str, com_adobe_granite_crypto_file: &str, com_adobe_granite_crypto_jcr: &str, com_adobe_granite_csrf: &str, com_adobe_granite_distribution_core: &str, com_adobe_granite_dropwizard_metrics: &str, com_adobe_granite_frags_impl: &str, com_adobe_granite_gibson: &str, com_adobe_granite_infocollector: &str, com_adobe_granite_installer_factory_packages: &str, com_adobe_granite_jetty_ssl: &str, com_adobe_granite_jobs_async: &str, com_adobe_granite_maintenance_oak: &str, com_adobe_granite_monitoring_core: &str, com_adobe_granite_queries: &str, com_adobe_granite_replication_hc_impl: &str, com_adobe_granite_repository_checker: &str, com_adobe_granite_repository_hc_impl: &str, com_adobe_granite_rest_assets: &str, com_adobe_granite_security_ui: &str, com_adobe_granite_startup: &str, com_adobe_granite_tagsoup: &str, com_adobe_granite_taskmanagement_core: &str, com_adobe_granite_taskmanagement_workflow: &str, com_adobe_granite_ui_clientlibs_compiler_less: &str, com_adobe_granite_ui_clientlibs_processor_gcc: &str, com_adobe_granite_webconsole_plugins: &str, com_adobe_granite_workflow_console: &str, com_adobe_xmp_worker_files_native_fragment_linux: &str, com_adobe_xmp_worker_files_native_fragment_macosx: &str, com_adobe_xmp_worker_files_native_fragment_win: &str, com_day_commons_osgi_wrapper_simple_jndi: &str, com_day_cq_cq_authhandler: &str, com_day_cq_cq_compat_configupdate: &str, com_day_cq_cq_licensebranding: &str, com_day_cq_cq_notifcation_impl: &str, com_day_cq_cq_replication_audit: &str, com_day_cq_cq_search_ext: &str, com_day_cq_dam_cq_dam_annotation_print: &str, com_day_cq_dam_cq_dam_asset_usage: &str, com_day_cq_dam_cq_dam_s7dam: &str, com_day_cq_dam_cq_dam_similaritysearch: &str, com_day_cq_dam_dam_webdav_support: &str, com_day_cq_pre_upgrade_tasks: &str, com_day_cq_replication_extensions: &str, com_day_cq_wcm_cq_msm_core: &str, com_day_cq_wcm_cq_wcm_translation: &str, day_commons_jrawio: &str, org_apache_aries_jmx_whiteboard: &str, org_apache_felix_http_sslfilter: &str, org_apache_felix_org_apache_felix_threaddump: &str, org_apache_felix_webconsole_plugins_ds: &str, org_apache_felix_webconsole_plugins_event: &str, org_apache_felix_webconsole_plugins_memoryusage: &str, org_apache_felix_webconsole_plugins_packageadmin: &str, org_apache_jackrabbit_oak_auth_ldap: &str, org_apache_jackrabbit_oak_segment_tar: &str, org_apache_jackrabbit_oak_solr_osgi: &str, org_apache_sling_bundleresource_impl: &str, org_apache_sling_commons_fsclassloader: &str, org_apache_sling_commons_log_webconsole: &str, org_apache_sling_datasource: &str, org_apache_sling_discovery_base: &str, org_apache_sling_discovery_oak: &str, org_apache_sling_discovery_support: &str, org_apache_sling_distribution_api: &str, org_apache_sling_distribution_core: &str, org_apache_sling_extensions_webconsolesecurityprovider: &str, org_apache_sling_hc_webconsole: &str, org_apache_sling_installer_console: &str, org_apache_sling_installer_provider_file: &str, org_apache_sling_installer_provider_jcr: &str, org_apache_sling_jcr_davex: &str, org_apache_sling_jcr_resourcesecurity: &str, org_apache_sling_jmx_provider: &str, org_apache_sling_launchpad_installer: &str, org_apache_sling_models_impl: &str, org_apache_sling_repoinit_parser: &str, org_apache_sling_resource_inventory: &str, org_apache_sling_resourceresolver: &str, org_apache_sling_scripting_javascript: &str, org_apache_sling_scripting_jst: &str, org_apache_sling_scripting_sightly_js_provider: &str, org_apache_sling_scripting_sightly_models_provider: &str, org_apache_sling_security: &str, org_apache_sling_servlets_compat: &str, org_apache_sling_servlets_get: &str, org_apache_sling_startupfilter_disabler: &str, org_apache_sling_tracer: &str, we_retail_client_app_core: &str) -> Box<Future<Item = ::models::ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.cq.cdn.cdn-rewriter".to_string(), com_adobe_cq_cdn_cdn_rewriter.to_string())
            .with_query_param("com.adobe.cq.cloud-config.components".to_string(), com_adobe_cq_cloud_config_components.to_string())
            .with_query_param("com.adobe.cq.cloud-config.core".to_string(), com_adobe_cq_cloud_config_core.to_string())
            .with_query_param("com.adobe.cq.cloud-config.ui".to_string(), com_adobe_cq_cloud_config_ui.to_string())
            .with_query_param("com.adobe.cq.com.adobe.cq.editor".to_string(), com_adobe_cq_com_adobe_cq_editor.to_string())
            .with_query_param("com.adobe.cq.com.adobe.cq.projects.core".to_string(), com_adobe_cq_com_adobe_cq_projects_core.to_string())
            .with_query_param("com.adobe.cq.com.adobe.cq.projects.wcm.core".to_string(), com_adobe_cq_com_adobe_cq_projects_wcm_core.to_string())
            .with_query_param("com.adobe.cq.com.adobe.cq.ui.commons".to_string(), com_adobe_cq_com_adobe_cq_ui_commons.to_string())
            .with_query_param("com.adobe.cq.com.adobe.cq.wcm.style".to_string(), com_adobe_cq_com_adobe_cq_wcm_style.to_string())
            .with_query_param("com.adobe.cq.cq-activitymap-integration".to_string(), com_adobe_cq_cq_activitymap_integration.to_string())
            .with_query_param("com.adobe.cq.cq-contexthub-commons".to_string(), com_adobe_cq_cq_contexthub_commons.to_string())
            .with_query_param("com.adobe.cq.cq-dtm".to_string(), com_adobe_cq_cq_dtm.to_string())
            .with_query_param("com.adobe.cq.cq-healthcheck".to_string(), com_adobe_cq_cq_healthcheck.to_string())
            .with_query_param("com.adobe.cq.cq-multisite-targeting".to_string(), com_adobe_cq_cq_multisite_targeting.to_string())
            .with_query_param("com.adobe.cq.cq-pre-upgrade-cleanup".to_string(), com_adobe_cq_cq_pre_upgrade_cleanup.to_string())
            .with_query_param("com.adobe.cq.cq-product-info-provider".to_string(), com_adobe_cq_cq_product_info_provider.to_string())
            .with_query_param("com.adobe.cq.cq-rest-sites".to_string(), com_adobe_cq_cq_rest_sites.to_string())
            .with_query_param("com.adobe.cq.cq-security-hc".to_string(), com_adobe_cq_cq_security_hc.to_string())
            .with_query_param("com.adobe.cq.dam.cq-dam-svg-handler".to_string(), com_adobe_cq_dam_cq_dam_svg_handler.to_string())
            .with_query_param("com.adobe.cq.dam.cq-scene7-imaging".to_string(), com_adobe_cq_dam_cq_scene7_imaging.to_string())
            .with_query_param("com.adobe.cq.dtm-reactor.core".to_string(), com_adobe_cq_dtm_reactor_core.to_string())
            .with_query_param("com.adobe.cq.dtm-reactor.ui".to_string(), com_adobe_cq_dtm_reactor_ui.to_string())
            .with_query_param("com.adobe.cq.exp-jspel-resolver".to_string(), com_adobe_cq_exp_jspel_resolver.to_string())
            .with_query_param("com.adobe.cq.inbox.cq-inbox".to_string(), com_adobe_cq_inbox_cq_inbox.to_string())
            .with_query_param("com.adobe.cq.json-schema-parser".to_string(), com_adobe_cq_json_schema_parser.to_string())
            .with_query_param("com.adobe.cq.media.cq-media-publishing-dps-fp-core".to_string(), com_adobe_cq_media_cq_media_publishing_dps_fp_core.to_string())
            .with_query_param("com.adobe.cq.mobile.cq-mobile-caas".to_string(), com_adobe_cq_mobile_cq_mobile_caas.to_string())
            .with_query_param("com.adobe.cq.mobile.cq-mobile-index-builder".to_string(), com_adobe_cq_mobile_cq_mobile_index_builder.to_string())
            .with_query_param("com.adobe.cq.mobile.cq-mobile-phonegap-build".to_string(), com_adobe_cq_mobile_cq_mobile_phonegap_build.to_string())
            .with_query_param("com.adobe.cq.myspell".to_string(), com_adobe_cq_myspell.to_string())
            .with_query_param("com.adobe.cq.sample.we.retail.core".to_string(), com_adobe_cq_sample_we_retail_core.to_string())
            .with_query_param("com.adobe.cq.screens.com.adobe.cq.screens.dcc".to_string(), com_adobe_cq_screens_com_adobe_cq_screens_dcc.to_string())
            .with_query_param("com.adobe.cq.screens.com.adobe.cq.screens.mq.core".to_string(), com_adobe_cq_screens_com_adobe_cq_screens_mq_core.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-as-provider".to_string(), com_adobe_cq_social_cq_social_as_provider.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-badging-basic-impl".to_string(), com_adobe_cq_social_cq_social_badging_basic_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-badging-impl".to_string(), com_adobe_cq_social_cq_social_badging_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-calendar-impl".to_string(), com_adobe_cq_social_cq_social_calendar_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-content-fragments-impl".to_string(), com_adobe_cq_social_cq_social_content_fragments_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-enablement-impl".to_string(), com_adobe_cq_social_cq_social_enablement_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-graph-impl".to_string(), com_adobe_cq_social_cq_social_graph_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-ideation-impl".to_string(), com_adobe_cq_social_cq_social_ideation_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-jcr-provider".to_string(), com_adobe_cq_social_cq_social_jcr_provider.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-members-impl".to_string(), com_adobe_cq_social_cq_social_members_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-ms-provider".to_string(), com_adobe_cq_social_cq_social_ms_provider.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-notifications-channels-web".to_string(), com_adobe_cq_social_cq_social_notifications_channels_web.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-notifications-impl".to_string(), com_adobe_cq_social_cq_social_notifications_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-rdb-provider".to_string(), com_adobe_cq_social_cq_social_rdb_provider.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-scf-impl".to_string(), com_adobe_cq_social_cq_social_scf_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-scoring-basic-impl".to_string(), com_adobe_cq_social_cq_social_scoring_basic_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-scoring-impl".to_string(), com_adobe_cq_social_cq_social_scoring_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-serviceusers-impl".to_string(), com_adobe_cq_social_cq_social_serviceusers_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-srp-impl".to_string(), com_adobe_cq_social_cq_social_srp_impl.to_string())
            .with_query_param("com.adobe.cq.social.cq-social-ugcbase-impl".to_string(), com_adobe_cq_social_cq_social_ugcbase_impl.to_string())
            .with_query_param("com.adobe.dam.cq-dam-cfm-impl".to_string(), com_adobe_dam_cq_dam_cfm_impl.to_string())
            .with_query_param("com.adobe.forms.foundation-forms-foundation-base".to_string(), com_adobe_forms_foundation_forms_foundation_base.to_string())
            .with_query_param("com.adobe.granite.apicontroller".to_string(), com_adobe_granite_apicontroller.to_string())
            .with_query_param("com.adobe.granite.asset.core".to_string(), com_adobe_granite_asset_core.to_string())
            .with_query_param("com.adobe.granite.auth.sso".to_string(), com_adobe_granite_auth_sso.to_string())
            .with_query_param("com.adobe.granite.bundles.hc.impl".to_string(), com_adobe_granite_bundles_hc_impl.to_string())
            .with_query_param("com.adobe.granite.compat-router".to_string(), com_adobe_granite_compat_router.to_string())
            .with_query_param("com.adobe.granite.conf".to_string(), com_adobe_granite_conf.to_string())
            .with_query_param("com.adobe.granite.conf.ui.core".to_string(), com_adobe_granite_conf_ui_core.to_string())
            .with_query_param("com.adobe.granite.cors".to_string(), com_adobe_granite_cors.to_string())
            .with_query_param("com.adobe.granite.crx-explorer".to_string(), com_adobe_granite_crx_explorer.to_string())
            .with_query_param("com.adobe.granite.crxde-lite".to_string(), com_adobe_granite_crxde_lite.to_string())
            .with_query_param("com.adobe.granite.crypto.config".to_string(), com_adobe_granite_crypto_config.to_string())
            .with_query_param("com.adobe.granite.crypto.extension".to_string(), com_adobe_granite_crypto_extension.to_string())
            .with_query_param("com.adobe.granite.crypto.file".to_string(), com_adobe_granite_crypto_file.to_string())
            .with_query_param("com.adobe.granite.crypto.jcr".to_string(), com_adobe_granite_crypto_jcr.to_string())
            .with_query_param("com.adobe.granite.csrf".to_string(), com_adobe_granite_csrf.to_string())
            .with_query_param("com.adobe.granite.distribution.core".to_string(), com_adobe_granite_distribution_core.to_string())
            .with_query_param("com.adobe.granite.dropwizard.metrics".to_string(), com_adobe_granite_dropwizard_metrics.to_string())
            .with_query_param("com.adobe.granite.frags.impl".to_string(), com_adobe_granite_frags_impl.to_string())
            .with_query_param("com.adobe.granite.gibson".to_string(), com_adobe_granite_gibson.to_string())
            .with_query_param("com.adobe.granite.infocollector".to_string(), com_adobe_granite_infocollector.to_string())
            .with_query_param("com.adobe.granite.installer.factory.packages".to_string(), com_adobe_granite_installer_factory_packages.to_string())
            .with_query_param("com.adobe.granite.jetty.ssl".to_string(), com_adobe_granite_jetty_ssl.to_string())
            .with_query_param("com.adobe.granite.jobs.async".to_string(), com_adobe_granite_jobs_async.to_string())
            .with_query_param("com.adobe.granite.maintenance.oak".to_string(), com_adobe_granite_maintenance_oak.to_string())
            .with_query_param("com.adobe.granite.monitoring.core".to_string(), com_adobe_granite_monitoring_core.to_string())
            .with_query_param("com.adobe.granite.queries".to_string(), com_adobe_granite_queries.to_string())
            .with_query_param("com.adobe.granite.replication.hc.impl".to_string(), com_adobe_granite_replication_hc_impl.to_string())
            .with_query_param("com.adobe.granite.repository.checker".to_string(), com_adobe_granite_repository_checker.to_string())
            .with_query_param("com.adobe.granite.repository.hc.impl".to_string(), com_adobe_granite_repository_hc_impl.to_string())
            .with_query_param("com.adobe.granite.rest.assets".to_string(), com_adobe_granite_rest_assets.to_string())
            .with_query_param("com.adobe.granite.security.ui".to_string(), com_adobe_granite_security_ui.to_string())
            .with_query_param("com.adobe.granite.startup".to_string(), com_adobe_granite_startup.to_string())
            .with_query_param("com.adobe.granite.tagsoup".to_string(), com_adobe_granite_tagsoup.to_string())
            .with_query_param("com.adobe.granite.taskmanagement.core".to_string(), com_adobe_granite_taskmanagement_core.to_string())
            .with_query_param("com.adobe.granite.taskmanagement.workflow".to_string(), com_adobe_granite_taskmanagement_workflow.to_string())
            .with_query_param("com.adobe.granite.ui.clientlibs.compiler.less".to_string(), com_adobe_granite_ui_clientlibs_compiler_less.to_string())
            .with_query_param("com.adobe.granite.ui.clientlibs.processor.gcc".to_string(), com_adobe_granite_ui_clientlibs_processor_gcc.to_string())
            .with_query_param("com.adobe.granite.webconsole.plugins".to_string(), com_adobe_granite_webconsole_plugins.to_string())
            .with_query_param("com.adobe.granite.workflow.console".to_string(), com_adobe_granite_workflow_console.to_string())
            .with_query_param("com.adobe.xmp.worker.files.native.fragment.linux".to_string(), com_adobe_xmp_worker_files_native_fragment_linux.to_string())
            .with_query_param("com.adobe.xmp.worker.files.native.fragment.macosx".to_string(), com_adobe_xmp_worker_files_native_fragment_macosx.to_string())
            .with_query_param("com.adobe.xmp.worker.files.native.fragment.win".to_string(), com_adobe_xmp_worker_files_native_fragment_win.to_string())
            .with_query_param("com.day.commons.osgi.wrapper.simple-jndi".to_string(), com_day_commons_osgi_wrapper_simple_jndi.to_string())
            .with_query_param("com.day.cq.cq-authhandler".to_string(), com_day_cq_cq_authhandler.to_string())
            .with_query_param("com.day.cq.cq-compat-configupdate".to_string(), com_day_cq_cq_compat_configupdate.to_string())
            .with_query_param("com.day.cq.cq-licensebranding".to_string(), com_day_cq_cq_licensebranding.to_string())
            .with_query_param("com.day.cq.cq-notifcation-impl".to_string(), com_day_cq_cq_notifcation_impl.to_string())
            .with_query_param("com.day.cq.cq-replication-audit".to_string(), com_day_cq_cq_replication_audit.to_string())
            .with_query_param("com.day.cq.cq-search-ext".to_string(), com_day_cq_cq_search_ext.to_string())
            .with_query_param("com.day.cq.dam.cq-dam-annotation-print".to_string(), com_day_cq_dam_cq_dam_annotation_print.to_string())
            .with_query_param("com.day.cq.dam.cq-dam-asset-usage".to_string(), com_day_cq_dam_cq_dam_asset_usage.to_string())
            .with_query_param("com.day.cq.dam.cq-dam-s7dam".to_string(), com_day_cq_dam_cq_dam_s7dam.to_string())
            .with_query_param("com.day.cq.dam.cq-dam-similaritysearch".to_string(), com_day_cq_dam_cq_dam_similaritysearch.to_string())
            .with_query_param("com.day.cq.dam.dam-webdav-support".to_string(), com_day_cq_dam_dam_webdav_support.to_string())
            .with_query_param("com.day.cq.pre-upgrade-tasks".to_string(), com_day_cq_pre_upgrade_tasks.to_string())
            .with_query_param("com.day.cq.replication.extensions".to_string(), com_day_cq_replication_extensions.to_string())
            .with_query_param("com.day.cq.wcm.cq-msm-core".to_string(), com_day_cq_wcm_cq_msm_core.to_string())
            .with_query_param("com.day.cq.wcm.cq-wcm-translation".to_string(), com_day_cq_wcm_cq_wcm_translation.to_string())
            .with_query_param("day-commons-jrawio".to_string(), day_commons_jrawio.to_string())
            .with_query_param("org.apache.aries.jmx.whiteboard".to_string(), org_apache_aries_jmx_whiteboard.to_string())
            .with_query_param("org.apache.felix.http.sslfilter".to_string(), org_apache_felix_http_sslfilter.to_string())
            .with_query_param("org.apache.felix.org.apache.felix.threaddump".to_string(), org_apache_felix_org_apache_felix_threaddump.to_string())
            .with_query_param("org.apache.felix.webconsole.plugins.ds".to_string(), org_apache_felix_webconsole_plugins_ds.to_string())
            .with_query_param("org.apache.felix.webconsole.plugins.event".to_string(), org_apache_felix_webconsole_plugins_event.to_string())
            .with_query_param("org.apache.felix.webconsole.plugins.memoryusage".to_string(), org_apache_felix_webconsole_plugins_memoryusage.to_string())
            .with_query_param("org.apache.felix.webconsole.plugins.packageadmin".to_string(), org_apache_felix_webconsole_plugins_packageadmin.to_string())
            .with_query_param("org.apache.jackrabbit.oak-auth-ldap".to_string(), org_apache_jackrabbit_oak_auth_ldap.to_string())
            .with_query_param("org.apache.jackrabbit.oak-segment-tar".to_string(), org_apache_jackrabbit_oak_segment_tar.to_string())
            .with_query_param("org.apache.jackrabbit.oak-solr-osgi".to_string(), org_apache_jackrabbit_oak_solr_osgi.to_string())
            .with_query_param("org.apache.sling.bundleresource.impl".to_string(), org_apache_sling_bundleresource_impl.to_string())
            .with_query_param("org.apache.sling.commons.fsclassloader".to_string(), org_apache_sling_commons_fsclassloader.to_string())
            .with_query_param("org.apache.sling.commons.log.webconsole".to_string(), org_apache_sling_commons_log_webconsole.to_string())
            .with_query_param("org.apache.sling.datasource".to_string(), org_apache_sling_datasource.to_string())
            .with_query_param("org.apache.sling.discovery.base".to_string(), org_apache_sling_discovery_base.to_string())
            .with_query_param("org.apache.sling.discovery.oak".to_string(), org_apache_sling_discovery_oak.to_string())
            .with_query_param("org.apache.sling.discovery.support".to_string(), org_apache_sling_discovery_support.to_string())
            .with_query_param("org.apache.sling.distribution.api".to_string(), org_apache_sling_distribution_api.to_string())
            .with_query_param("org.apache.sling.distribution.core".to_string(), org_apache_sling_distribution_core.to_string())
            .with_query_param("org.apache.sling.extensions.webconsolesecurityprovider".to_string(), org_apache_sling_extensions_webconsolesecurityprovider.to_string())
            .with_query_param("org.apache.sling.hc.webconsole".to_string(), org_apache_sling_hc_webconsole.to_string())
            .with_query_param("org.apache.sling.installer.console".to_string(), org_apache_sling_installer_console.to_string())
            .with_query_param("org.apache.sling.installer.provider.file".to_string(), org_apache_sling_installer_provider_file.to_string())
            .with_query_param("org.apache.sling.installer.provider.jcr".to_string(), org_apache_sling_installer_provider_jcr.to_string())
            .with_query_param("org.apache.sling.jcr.davex".to_string(), org_apache_sling_jcr_davex.to_string())
            .with_query_param("org.apache.sling.jcr.resourcesecurity".to_string(), org_apache_sling_jcr_resourcesecurity.to_string())
            .with_query_param("org.apache.sling.jmx.provider".to_string(), org_apache_sling_jmx_provider.to_string())
            .with_query_param("org.apache.sling.launchpad.installer".to_string(), org_apache_sling_launchpad_installer.to_string())
            .with_query_param("org.apache.sling.models.impl".to_string(), org_apache_sling_models_impl.to_string())
            .with_query_param("org.apache.sling.repoinit.parser".to_string(), org_apache_sling_repoinit_parser.to_string())
            .with_query_param("org.apache.sling.resource.inventory".to_string(), org_apache_sling_resource_inventory.to_string())
            .with_query_param("org.apache.sling.resourceresolver".to_string(), org_apache_sling_resourceresolver.to_string())
            .with_query_param("org.apache.sling.scripting.javascript".to_string(), org_apache_sling_scripting_javascript.to_string())
            .with_query_param("org.apache.sling.scripting.jst".to_string(), org_apache_sling_scripting_jst.to_string())
            .with_query_param("org.apache.sling.scripting.sightly.js.provider".to_string(), org_apache_sling_scripting_sightly_js_provider.to_string())
            .with_query_param("org.apache.sling.scripting.sightly.models.provider".to_string(), org_apache_sling_scripting_sightly_models_provider.to_string())
            .with_query_param("org.apache.sling.security".to_string(), org_apache_sling_security.to_string())
            .with_query_param("org.apache.sling.servlets.compat".to_string(), org_apache_sling_servlets_compat.to_string())
            .with_query_param("org.apache.sling.servlets.get".to_string(), org_apache_sling_servlets_get.to_string())
            .with_query_param("org.apache.sling.startupfilter.disabler".to_string(), org_apache_sling_startupfilter_disabler.to_string())
            .with_query_param("org.apache.sling.tracer".to_string(), org_apache_sling_tracer.to_string())
            .with_query_param("we.retail.client.app.core".to_string(), we_retail_client_app_core.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_cert_impl_client_cert_auth_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, service_ranking: i32) -> Box<Future<Item = ::models::ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_ims(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, configid: &str, scope: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.ims".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("configid".to_string(), configid.to_string())
            .with_query_param("scope".to_string(), scope.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.provider.id".to_string(), oauth_provider_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auth_ims_client_secret: &str, customizer_type: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("auth.ims.client.secret".to_string(), auth_ims_client_secret.to_string())
            .with_query_param("customizer.type".to_string(), customizer_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_ims_impl_ims_config_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_configmanager_ims_configid: &str, ims_owning_entity: &str, aem_instance_id: &str, ims_service_code: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.configmanager.ims.configid".to_string(), oauth_configmanager_ims_configid.to_string())
            .with_query_param("ims.owningEntity".to_string(), ims_owning_entity.to_string())
            .with_query_param("aem.instanceId".to_string(), aem_instance_id.to_string())
            .with_query_param("ims.serviceCode".to_string(), ims_service_code.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.provider.id".to_string(), oauth_provider_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_ims_impl_ims_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str, oauth_provider_ims_authorization_url: &str, oauth_provider_ims_token_url: &str, oauth_provider_ims_profile_url: &str, oauth_provider_ims_extended_details_urls: Vec<String>, oauth_provider_ims_validate_token_url: &str, oauth_provider_ims_session_property: &str, oauth_provider_ims_service_token_client_id: &str, oauth_provider_ims_service_token_client_secret: &str, oauth_provider_ims_service_token: &str, ims_org_ref: &str, ims_group_mapping: Vec<String>, oauth_provider_ims_only_license_group: bool) -> Box<Future<Item = ::models::ComAdobeGraniteAuthImsImplImsProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.provider.id".to_string(), oauth_provider_id.to_string())
            .with_query_param("oauth.provider.ims.authorization.url".to_string(), oauth_provider_ims_authorization_url.to_string())
            .with_query_param("oauth.provider.ims.token.url".to_string(), oauth_provider_ims_token_url.to_string())
            .with_query_param("oauth.provider.ims.profile.url".to_string(), oauth_provider_ims_profile_url.to_string())
            .with_query_param("oauth.provider.ims.extended.details.urls".to_string(), oauth_provider_ims_extended_details_urls.join(",").to_string())
            .with_query_param("oauth.provider.ims.validate.token.url".to_string(), oauth_provider_ims_validate_token_url.to_string())
            .with_query_param("oauth.provider.ims.session.property".to_string(), oauth_provider_ims_session_property.to_string())
            .with_query_param("oauth.provider.ims.service.token.client.id".to_string(), oauth_provider_ims_service_token_client_id.to_string())
            .with_query_param("oauth.provider.ims.service.token.client.secret".to_string(), oauth_provider_ims_service_token_client_secret.to_string())
            .with_query_param("oauth.provider.ims.service.token".to_string(), oauth_provider_ims_service_token.to_string())
            .with_query_param("ims.org.ref".to_string(), ims_org_ref.to_string())
            .with_query_param("ims.group.mapping".to_string(), ims_group_mapping.join(",").to_string())
            .with_query_param("oauth.provider.ims.only.license.group".to_string(), oauth_provider_ims_only_license_group.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_accesstoken_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, auth_token_provider_title: &str, auth_token_provider_default_claims: Vec<String>, auth_token_provider_endpoint: &str, auth_access_token_request: &str, auth_token_provider_keypair_alias: &str, auth_token_provider_conn_timeout: i32, auth_token_provider_so_timeout: i32, auth_token_provider_client_id: &str, auth_token_provider_scope: &str, auth_token_provider_reuse_access_token: bool, auth_token_provider_relaxed_ssl: bool, token_request_customizer_type: &str, auth_token_validator_type: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthAccesstokenProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("auth.token.provider.title".to_string(), auth_token_provider_title.to_string())
            .with_query_param("auth.token.provider.default.claims".to_string(), auth_token_provider_default_claims.join(",").to_string())
            .with_query_param("auth.token.provider.endpoint".to_string(), auth_token_provider_endpoint.to_string())
            .with_query_param("auth.access.token.request".to_string(), auth_access_token_request.to_string())
            .with_query_param("auth.token.provider.keypair.alias".to_string(), auth_token_provider_keypair_alias.to_string())
            .with_query_param("auth.token.provider.conn.timeout".to_string(), auth_token_provider_conn_timeout.to_string())
            .with_query_param("auth.token.provider.so.timeout".to_string(), auth_token_provider_so_timeout.to_string())
            .with_query_param("auth.token.provider.client.id".to_string(), auth_token_provider_client_id.to_string())
            .with_query_param("auth.token.provider.scope".to_string(), auth_token_provider_scope.to_string())
            .with_query_param("auth.token.provider.reuse.access.token".to_string(), auth_token_provider_reuse_access_token.to_string())
            .with_query_param("auth.token.provider.relaxed.ssl".to_string(), auth_token_provider_relaxed_ssl.to_string())
            .with_query_param("token.request.customizer.type".to_string(), token_request_customizer_type.to_string())
            .with_query_param("auth.token.validator.type".to_string(), auth_token_validator_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, oauth_client_ids_allowed: Vec<String>, auth_bearer_sync_ims: bool, auth_token_request_parameter: &str, oauth_bearer_configid: &str, oauth_jwt_support: bool) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("oauth.clientIds.allowed".to_string(), oauth_client_ids_allowed.join(",").to_string())
            .with_query_param("auth.bearer.sync.ims".to_string(), auth_bearer_sync_ims.to_string())
            .with_query_param("auth.tokenRequestParameter".to_string(), auth_token_request_parameter.to_string())
            .with_query_param("oauth.bearer.configid".to_string(), oauth_bearer_configid.to_string())
            .with_query_param("oauth.jwt.support".to_string(), oauth_jwt_support.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_impl_default_token_validator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auth_token_validator_type: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("auth.token.validator.type".to_string(), auth_token_validator_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_impl_facebook_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.provider.id".to_string(), oauth_provider_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_impl_github_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str, oauth_provider_github_authorization_url: &str, oauth_provider_github_token_url: &str, oauth_provider_github_profile_url: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplGithubProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.provider.id".to_string(), oauth_provider_id.to_string())
            .with_query_param("oauth.provider.github.authorization.url".to_string(), oauth_provider_github_authorization_url.to_string())
            .with_query_param("oauth.provider.github.token.url".to_string(), oauth_provider_github_token_url.to_string())
            .with_query_param("oauth.provider.github.profile.url".to_string(), oauth_provider_github_profile_url.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_impl_granite_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str, oauth_provider_granite_authorization_url: &str, oauth_provider_granite_token_url: &str, oauth_provider_granite_profile_url: &str, oauth_provider_granite_extended_details_urls: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplGraniteProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.provider.id".to_string(), oauth_provider_id.to_string())
            .with_query_param("oauth.provider.granite.authorization.url".to_string(), oauth_provider_granite_authorization_url.to_string())
            .with_query_param("oauth.provider.granite.token.url".to_string(), oauth_provider_granite_token_url.to_string())
            .with_query_param("oauth.provider.granite.profile.url".to_string(), oauth_provider_granite_profile_url.to_string())
            .with_query_param("oauth.provider.granite.extended.details.urls".to_string(), oauth_provider_granite_extended_details_urls.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_cookie_login_timeout: &str, oauth_cookie_max_age: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.cookie.login.timeout".to_string(), oauth_cookie_login_timeout.to_string())
            .with_query_param("oauth.cookie.max.age".to_string(), oauth_cookie_max_age.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_cookie_login_timeout: &str, oauth_cookie_max_age: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.cookie.login.timeout".to_string(), oauth_cookie_login_timeout.to_string())
            .with_query_param("oauth.cookie.max.age".to_string(), oauth_cookie_max_age.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_impl_twitter_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_provider_id: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.provider.id".to_string(), oauth_provider_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_oauth_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_config_id: &str, oauth_client_id: &str, oauth_client_secret: &str, oauth_scope: Vec<String>, oauth_config_provider_id: &str, oauth_create_users: bool, oauth_userid_property: &str, force_strict_username_matching: bool, oauth_encode_userids: bool, oauth_hash_userids: bool, oauth_call_back_url: &str, oauth_access_token_persist: bool, oauth_access_token_persist_cookie: bool, oauth_csrf_state_protection: bool, oauth_redirect_request_params: bool, oauth_config_siblings_allow: bool) -> Box<Future<Item = ::models::ComAdobeGraniteAuthOauthProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.oauth.provider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.config.id".to_string(), oauth_config_id.to_string())
            .with_query_param("oauth.client.id".to_string(), oauth_client_id.to_string())
            .with_query_param("oauth.client.secret".to_string(), oauth_client_secret.to_string())
            .with_query_param("oauth.scope".to_string(), oauth_scope.join(",").to_string())
            .with_query_param("oauth.config.provider.id".to_string(), oauth_config_provider_id.to_string())
            .with_query_param("oauth.create.users".to_string(), oauth_create_users.to_string())
            .with_query_param("oauth.userid.property".to_string(), oauth_userid_property.to_string())
            .with_query_param("force.strict.username.matching".to_string(), force_strict_username_matching.to_string())
            .with_query_param("oauth.encode.userids".to_string(), oauth_encode_userids.to_string())
            .with_query_param("oauth.hash.userids".to_string(), oauth_hash_userids.to_string())
            .with_query_param("oauth.callBackUrl".to_string(), oauth_call_back_url.to_string())
            .with_query_param("oauth.access.token.persist".to_string(), oauth_access_token_persist.to_string())
            .with_query_param("oauth.access.token.persist.cookie".to_string(), oauth_access_token_persist_cookie.to_string())
            .with_query_param("oauth.csrf.state.protection".to_string(), oauth_csrf_state_protection.to_string())
            .with_query_param("oauth.redirect.request.params".to_string(), oauth_redirect_request_params.to_string())
            .with_query_param("oauth.config.siblings.allow".to_string(), oauth_config_siblings_allow.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_requirement_impl_default_requirement_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, supported_paths: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("supportedPaths".to_string(), supported_paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_saml_saml_authentication_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: Vec<String>, service_ranking: i32, idp_url: &str, idp_cert_alias: &str, idp_http_redirect: bool, service_provider_entity_id: &str, assertion_consumer_service_url: &str, sp_private_key_alias: &str, key_store_password: &str, default_redirect_url: &str, user_id_attribute: &str, use_encryption: bool, create_user: bool, user_intermediate_path: &str, add_group_memberships: bool, group_membership_attribute: &str, default_groups: Vec<String>, name_id_format: &str, synchronize_attributes: Vec<String>, handle_logout: bool, logout_url: &str, clock_tolerance: i32, digest_method: &str, signature_method: &str, identity_sync_type: &str, idp_identifier: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("idpUrl".to_string(), idp_url.to_string())
            .with_query_param("idpCertAlias".to_string(), idp_cert_alias.to_string())
            .with_query_param("idpHttpRedirect".to_string(), idp_http_redirect.to_string())
            .with_query_param("serviceProviderEntityId".to_string(), service_provider_entity_id.to_string())
            .with_query_param("assertionConsumerServiceURL".to_string(), assertion_consumer_service_url.to_string())
            .with_query_param("spPrivateKeyAlias".to_string(), sp_private_key_alias.to_string())
            .with_query_param("keyStorePassword".to_string(), key_store_password.to_string())
            .with_query_param("defaultRedirectUrl".to_string(), default_redirect_url.to_string())
            .with_query_param("userIDAttribute".to_string(), user_id_attribute.to_string())
            .with_query_param("useEncryption".to_string(), use_encryption.to_string())
            .with_query_param("createUser".to_string(), create_user.to_string())
            .with_query_param("userIntermediatePath".to_string(), user_intermediate_path.to_string())
            .with_query_param("addGroupMemberships".to_string(), add_group_memberships.to_string())
            .with_query_param("groupMembershipAttribute".to_string(), group_membership_attribute.to_string())
            .with_query_param("defaultGroups".to_string(), default_groups.join(",").to_string())
            .with_query_param("nameIdFormat".to_string(), name_id_format.to_string())
            .with_query_param("synchronizeAttributes".to_string(), synchronize_attributes.join(",").to_string())
            .with_query_param("handleLogout".to_string(), handle_logout.to_string())
            .with_query_param("logoutUrl".to_string(), logout_url.to_string())
            .with_query_param("clockTolerance".to_string(), clock_tolerance.to_string())
            .with_query_param("digestMethod".to_string(), digest_method.to_string())
            .with_query_param("signatureMethod".to_string(), signature_method.to_string())
            .with_query_param("identitySyncType".to_string(), identity_sync_type.to_string())
            .with_query_param("idpIdentifier".to_string(), idp_identifier.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_auth_sso_impl_sso_authentication_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, service_ranking: i32, jaas_control_flag: &str, jaas_realm_name: &str, jaas_ranking: i32, headers: Vec<String>, cookies: Vec<String>, parameters: Vec<String>, usermap: Vec<String>, format: &str, trusted_credentials_attribute: &str) -> Box<Future<Item = ::models::ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("jaas.controlFlag".to_string(), jaas_control_flag.to_string())
            .with_query_param("jaas.realmName".to_string(), jaas_realm_name.to_string())
            .with_query_param("jaas.ranking".to_string(), jaas_ranking.to_string())
            .with_query_param("headers".to_string(), headers.join(",").to_string())
            .with_query_param("cookies".to_string(), cookies.join(",").to_string())
            .with_query_param("parameters".to_string(), parameters.join(",").to_string())
            .with_query_param("usermap".to_string(), usermap.join(",").to_string())
            .with_query_param("format".to_string(), format.to_string())
            .with_query_param("trustedCredentialsAttribute".to_string(), trusted_credentials_attribute.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_bundles_hc_impl_code_cache_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, minimum_code_cache_size: i32) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("minimum.code.cache.size".to_string(), minimum_code_cache_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, ignored_bundles: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("ignored.bundles".to_string(), ignored_bundles.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_bundles_hc_impl_jobs_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, max_queued_jobs: i32) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("max.queued.jobs".to_string(), max_queued_jobs.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_comments_internal_comment_replication_content_filter_fac(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, replicate_comment_resource_types: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("replicate.comment.resourceTypes".to_string(), replicate_comment_resource_types.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_compatrouter_impl_compat_switching_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, compatgroups: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("compatgroups".to_string(), compatgroups.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_compatrouter_impl_routing_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, id: &str, compat_path: &str, new_path: &str) -> Box<Future<Item = ::models::ComAdobeGraniteCompatrouterImplRoutingConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("id".to_string(), id.to_string())
            .with_query_param("compatPath".to_string(), compat_path.to_string())
            .with_query_param("newPath".to_string(), new_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_compatrouter_impl_switch_mapping_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, group: &str, ids: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("group".to_string(), group.to_string())
            .with_query_param("ids".to_string(), ids.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, fallback_paths: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("fallbackPaths".to_string(), fallback_paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_contexthub_impl_context_hub_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_granite_contexthub_silent_mode: bool, com_adobe_granite_contexthub_show_ui: bool) -> Box<Future<Item = ::models::ComAdobeGraniteContexthubImplContextHubImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.granite.contexthub.silent_mode".to_string(), com_adobe_granite_contexthub_silent_mode.to_string())
            .with_query_param("com.adobe.granite.contexthub.show_ui".to_string(), com_adobe_granite_contexthub_show_ui.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_cors_impl_cors_policy_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, alloworigin: Vec<String>, alloworiginregexp: Vec<String>, allowedpaths: Vec<String>, exposedheaders: Vec<String>, maxage: i32, supportedheaders: Vec<String>, supportedmethods: Vec<String>, supportscredentials: bool) -> Box<Future<Item = ::models::ComAdobeGraniteCorsImplCorsPolicyImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("alloworigin".to_string(), alloworigin.join(",").to_string())
            .with_query_param("alloworiginregexp".to_string(), alloworiginregexp.join(",").to_string())
            .with_query_param("allowedpaths".to_string(), allowedpaths.join(",").to_string())
            .with_query_param("exposedheaders".to_string(), exposedheaders.join(",").to_string())
            .with_query_param("maxage".to_string(), maxage.to_string())
            .with_query_param("supportedheaders".to_string(), supportedheaders.join(",").to_string())
            .with_query_param("supportedmethods".to_string(), supportedmethods.join(",").to_string())
            .with_query_param("supportscredentials".to_string(), supportscredentials.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_csrf_impl_csrf_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, filter_methods: Vec<String>, filter_enable_safe_user_agents: bool, filter_safe_user_agents: Vec<String>, filter_excluded_paths: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteCsrfImplCsrfFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("filter.methods".to_string(), filter_methods.join(",").to_string())
            .with_query_param("filter.enable.safe.user.agents".to_string(), filter_enable_safe_user_agents.to_string())
            .with_query_param("filter.safe.user.agents".to_string(), filter_safe_user_agents.join(",").to_string())
            .with_query_param("filter.excluded.paths".to_string(), filter_excluded_paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_csrf_impl_csrf_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, csrf_token_expires_in: i32, sling_auth_requirements: &str) -> Box<Future<Item = ::models::ComAdobeGraniteCsrfImplCsrfServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("csrf.token.expires.in".to_string(), csrf_token_expires_in.to_string())
            .with_query_param("sling.auth.requirements".to_string(), sling_auth_requirements.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, username: &str, encrypted_password: &str) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("username".to_string(), username.to_string())
            .with_query_param("encryptedPassword".to_string(), encrypted_password.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, agent_name: &str, diff_path: &str, observed_path: &str, service_name: &str, property_names: &str, distribution_delay: i32, service_user_target: &str) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("agentName".to_string(), agent_name.to_string())
            .with_query_param("diffPath".to_string(), diff_path.to_string())
            .with_query_param("observedPath".to_string(), observed_path.to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .with_query_param("propertyNames".to_string(), property_names.to_string())
            .with_query_param("distributionDelay".to_string(), distribution_delay.to_string())
            .with_query_param("serviceUser.target".to_string(), service_user_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_distribution_core_impl_diff_diff_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, diff_path: &str, service_name: &str, service_user_target: &str) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("diffPath".to_string(), diff_path.to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .with_query_param("serviceUser.target".to_string(), service_user_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_distribution_core_impl_distribution_to_replication_even(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, importer_name: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("importer.name".to_string(), importer_name.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_distribution_core_impl_replication_adapters_replicat(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_name: &str, forward_requests: bool) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("providerName".to_string(), provider_name.to_string())
            .with_query_param("forward.requests".to_string(), forward_requests.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_distribution_core_impl_replication_distribution_trans(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, forward_requests: bool) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("forward.requests".to_string(), forward_requests.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_distribution_core_impl_transport_access_token_distribu(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, service_name: &str, user_id: &str, access_token_provider_target: &str) -> Box<Future<Item = ::models::ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .with_query_param("userId".to_string(), user_id.to_string())
            .with_query_param("accessTokenProvider.target".to_string(), access_token_provider_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_frags_impl_check_http_header_flag(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, feature_name: &str, feature_description: &str, http_header_name: &str, http_header_valuepattern: &str) -> Box<Future<Item = ::models::ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("feature.name".to_string(), feature_name.to_string())
            .with_query_param("feature.description".to_string(), feature_description.to_string())
            .with_query_param("http.header.name".to_string(), http_header_name.to_string())
            .with_query_param("http.header.valuepattern".to_string(), http_header_valuepattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_frags_impl_random_feature(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, feature_name: &str, feature_description: &str, active_percentage: &str, cookie_name: &str, cookie_max_age: i32) -> Box<Future<Item = ::models::ComAdobeGraniteFragsImplRandomFeatureInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("feature.name".to_string(), feature_name.to_string())
            .with_query_param("feature.description".to_string(), feature_description.to_string())
            .with_query_param("active.percentage".to_string(), active_percentage.to_string())
            .with_query_param("cookie.name".to_string(), cookie_name.to_string())
            .with_query_param("cookie.maxAge".to_string(), cookie_max_age.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_httpcache_file_file_cache_store(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_granite_httpcache_file_document_root: &str, com_adobe_granite_httpcache_file_include_host: &str) -> Box<Future<Item = ::models::ComAdobeGraniteHttpcacheFileFileCacheStoreInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.granite.httpcache.file.documentRoot".to_string(), com_adobe_granite_httpcache_file_document_root.to_string())
            .with_query_param("com.adobe.granite.httpcache.file.includeHost".to_string(), com_adobe_granite_httpcache_file_include_host.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_httpcache_impl_outer_cache_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_granite_httpcache_url_paths: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.granite.httpcache.url.paths".to_string(), com_adobe_granite_httpcache_url_paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_i18n_impl_bundle_pseudo_translations(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pseudo_patterns: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("pseudo.patterns".to_string(), pseudo_patterns.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_i18n_impl_preferences_locale_resolver_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, security_preferences_name: &str) -> Box<Future<Item = ::models::ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("security.preferences.name".to_string(), security_preferences_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_infocollector_info_collector(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, granite_infocollector_include_thread_dumps: bool, granite_infocollector_include_heap_dump: bool) -> Box<Future<Item = ::models::ComAdobeGraniteInfocollectorInfoCollectorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("granite.infocollector.includeThreadDumps".to_string(), granite_infocollector_include_thread_dumps.to_string())
            .with_query_param("granite.infocollector.includeHeapDump".to_string(), granite_infocollector_include_heap_dump.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_adobe_granite_jetty_ssl_port: i32, com_adobe_granite_jetty_ssl_keystore_user: &str, com_adobe_granite_jetty_ssl_keystore_password: &str, com_adobe_granite_jetty_ssl_ciphersuites_excluded: Vec<String>, com_adobe_granite_jetty_ssl_ciphersuites_included: Vec<String>, com_adobe_granite_jetty_ssl_client_certificate: &str) -> Box<Future<Item = ::models::ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.adobe.granite.jetty.ssl.port".to_string(), com_adobe_granite_jetty_ssl_port.to_string())
            .with_query_param("com.adobe.granite.jetty.ssl.keystore.user".to_string(), com_adobe_granite_jetty_ssl_keystore_user.to_string())
            .with_query_param("com.adobe.granite.jetty.ssl.keystore.password".to_string(), com_adobe_granite_jetty_ssl_keystore_password.to_string())
            .with_query_param("com.adobe.granite.jetty.ssl.ciphersuites.excluded".to_string(), com_adobe_granite_jetty_ssl_ciphersuites_excluded.join(",").to_string())
            .with_query_param("com.adobe.granite.jetty.ssl.ciphersuites.included".to_string(), com_adobe_granite_jetty_ssl_ciphersuites_included.join(",").to_string())
            .with_query_param("com.adobe.granite.jetty.ssl.client.certificate".to_string(), com_adobe_granite_jetty_ssl_client_certificate.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_license_impl_license_check_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, check_internval: i32, exclude_ids: Vec<String>, encrypt_ping: bool) -> Box<Future<Item = ::models::ComAdobeGraniteLicenseImplLicenseCheckFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("checkInternval".to_string(), check_internval.to_string())
            .with_query_param("excludeIds".to_string(), exclude_ids.join(",").to_string())
            .with_query_param("encryptPing".to_string(), encrypt_ping.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_logging_impl_log_analyser_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, messages_queue_size: i32, logger_config: Vec<String>, messages_size: i32) -> Box<Future<Item = ::models::ComAdobeGraniteLoggingImplLogAnalyserImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("messages.queue.size".to_string(), messages_queue_size.to_string())
            .with_query_param("logger.config".to_string(), logger_config.join(",").to_string())
            .with_query_param("messages.size".to_string(), messages_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_logging_impl_log_error_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, granite_maintenance_mandatory: bool, job_topics: &str) -> Box<Future<Item = ::models::ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("granite.maintenance.mandatory".to_string(), granite_maintenance_mandatory.to_string())
            .with_query_param("job.topics".to_string(), job_topics.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, job_topics: &str) -> Box<Future<Item = ::models::ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("job.topics".to_string(), job_topics.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, full_gc_days: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("full.gc.days".to_string(), full_gc_days.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_monitoring_impl_script_config_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, script_filename: &str, script_display: &str, script_path: &str, script_platform: Vec<String>, interval: i32, jmxdomain: &str) -> Box<Future<Item = ::models::ComAdobeGraniteMonitoringImplScriptConfigImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("script.filename".to_string(), script_filename.to_string())
            .with_query_param("script.display".to_string(), script_display.to_string())
            .with_query_param("script.path".to_string(), script_path.to_string())
            .with_query_param("script.platform".to_string(), script_platform.join(",").to_string())
            .with_query_param("interval".to_string(), interval.to_string())
            .with_query_param("jmxdomain".to_string(), jmxdomain.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, jaas_control_flag: &str, jaas_realm_name: &str, jaas_ranking: i32, oauth_offline_validation: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("jaas.controlFlag".to_string(), jaas_control_flag.to_string())
            .with_query_param("jaas.realmName".to_string(), jaas_realm_name.to_string())
            .with_query_param("jaas.ranking".to_string(), jaas_ranking.to_string())
            .with_query_param("oauth.offline.validation".to_string(), oauth_offline_validation.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_oauth_server_impl_access_token_cleanup_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_client_revocation_active: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.client.revocation.active".to_string(), oauth_client_revocation_active.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_paths: &str, oauth_revocation_active: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.paths".to_string(), sling_servlet_paths.to_string())
            .with_query_param("oauth.revocation.active".to_string(), oauth_revocation_active.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_issuer: &str, oauth_access_token_expires_in: &str, osgi_http_whiteboard_servlet_pattern: &str, osgi_http_whiteboard_context_select: &str) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.issuer".to_string(), oauth_issuer.to_string())
            .with_query_param("oauth.access.token.expires.in".to_string(), oauth_access_token_expires_in.to_string())
            .with_query_param("osgi.http.whiteboard.servlet.pattern".to_string(), osgi_http_whiteboard_servlet_pattern.to_string())
            .with_query_param("osgi.http.whiteboard.context.select".to_string(), osgi_http_whiteboard_context_select.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, oauth_token_revocation_active: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("oauth.token.revocation.active".to_string(), oauth_token_revocation_active.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_offloading_impl_offloading_configurator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, offloading_transporter: &str, offloading_cleanup_payload: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("offloading.transporter".to_string(), offloading_transporter.to_string())
            .with_query_param("offloading.cleanup.payload".to_string(), offloading_cleanup_payload.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_offloading_impl_offloading_job_cloner(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, offloading_jobcloner_enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("offloading.jobcloner.enabled".to_string(), offloading_jobcloner_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_offloading_impl_offloading_job_offloader(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, offloading_offloader_enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("offloading.offloader.enabled".to_string(), offloading_offloader_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, offloading_agentmanager_enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("offloading.agentmanager.enabled".to_string(), offloading_agentmanager_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_transport_agent_to_worker_prefix: &str, default_transport_agent_to_master_prefix: &str, default_transport_input_package: &str, default_transport_output_package: &str, default_transport_replication_synchronous: bool, default_transport_contentpackage: bool, offloading_transporter_default_enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("default.transport.agent-to-worker.prefix".to_string(), default_transport_agent_to_worker_prefix.to_string())
            .with_query_param("default.transport.agent-to-master.prefix".to_string(), default_transport_agent_to_master_prefix.to_string())
            .with_query_param("default.transport.input.package".to_string(), default_transport_input_package.to_string())
            .with_query_param("default.transport.output.package".to_string(), default_transport_output_package.to_string())
            .with_query_param("default.transport.replication.synchronous".to_string(), default_transport_replication_synchronous.to_string())
            .with_query_param("default.transport.contentpackage".to_string(), default_transport_contentpackage.to_string())
            .with_query_param("offloading.transporter.default.enabled".to_string(), offloading_transporter_default_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, omnisearch_suggestion_requiretext_min: i32, omnisearch_suggestion_spellcheck_require: bool) -> Box<Future<Item = ::models::ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("omnisearch.suggestion.requiretext.min".to_string(), omnisearch_suggestion_requiretext_min.to_string())
            .with_query_param("omnisearch.suggestion.spellcheck.require".to_string(), omnisearch_suggestion_spellcheck_require.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_optout_impl_opt_out_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, optout_cookies: Vec<String>, optout_headers: Vec<String>, optout_whitelist_cookies: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteOptoutImplOptOutServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("optout.cookies".to_string(), optout_cookies.join(",").to_string())
            .with_query_param("optout.headers".to_string(), optout_headers.join(",").to_string())
            .with_query_param("optout.whitelist.cookies".to_string(), optout_whitelist_cookies.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_queries_impl_hc_async_index_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, indexing_critical_threshold: i32, indexing_warn_threshold: i32, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("indexing.critical.threshold".to_string(), indexing_critical_threshold.to_string())
            .with_query_param("indexing.warn.threshold".to_string(), indexing_warn_threshold.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_queries_impl_hc_large_index_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, large_index_critical_threshold: i32, large_index_warn_threshold: i32, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("large.index.critical.threshold".to_string(), large_index_critical_threshold.to_string())
            .with_query_param("large.index.warn.threshold".to_string(), large_index_warn_threshold.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_queries_impl_hc_queries_status_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_queries_impl_hc_query_health_check_metrics(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, get_period: i32) -> Box<Future<Item = ::models::ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("getPeriod".to_string(), get_period.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_queries_impl_hc_query_limits_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_replication_hc_impl_replication_queue_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, number_of_retries_allowed: i32, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("number.of.retries.allowed".to_string(), number_of_retries_allowed.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, exclude_search_path: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("exclude.search.path".to_string(), exclude_search_path.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_repository_hc_impl_default_logins_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, account_logins: Vec<String>, console_logins: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("account.logins".to_string(), account_logins.join(",").to_string())
            .with_query_param("console.logins".to_string(), console_logins.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_repository_hc_impl_disk_space_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>, disk_space_warn_threshold: i32, disk_space_error_threshold: i32) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("disk.space.warn.threshold".to_string(), disk_space_warn_threshold.to_string())
            .with_query_param("disk.space.error.threshold".to_string(), disk_space_error_threshold.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_repository_impl_commit_stats_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, interval_seconds: i32, commits_per_interval_threshold: i32, max_location_length: i32, max_details_shown: i32, min_details_percentage: i32, thread_matchers: Vec<String>, max_greedy_depth: i32, greedy_stack_matchers: &str, stack_filters: Vec<String>, stack_matchers: Vec<String>, stack_categorizers: Vec<String>, stack_shorteners: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryImplCommitStatsConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("intervalSeconds".to_string(), interval_seconds.to_string())
            .with_query_param("commitsPerIntervalThreshold".to_string(), commits_per_interval_threshold.to_string())
            .with_query_param("maxLocationLength".to_string(), max_location_length.to_string())
            .with_query_param("maxDetailsShown".to_string(), max_details_shown.to_string())
            .with_query_param("minDetailsPercentage".to_string(), min_details_percentage.to_string())
            .with_query_param("threadMatchers".to_string(), thread_matchers.join(",").to_string())
            .with_query_param("maxGreedyDepth".to_string(), max_greedy_depth.to_string())
            .with_query_param("greedyStackMatchers".to_string(), greedy_stack_matchers.to_string())
            .with_query_param("stackFilters".to_string(), stack_filters.join(",").to_string())
            .with_query_param("stackMatchers".to_string(), stack_matchers.join(",").to_string())
            .with_query_param("stackCategorizers".to_string(), stack_categorizers.join(",").to_string())
            .with_query_param("stackShorteners".to_string(), stack_shorteners.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_repository_service_user_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, serviceusers_simple_subject_population: bool, serviceusers_list: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRepositoryServiceUserConfigurationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("serviceusers.simpleSubjectPopulation".to_string(), serviceusers_simple_subject_population.to_string())
            .with_query_param("serviceusers.list".to_string(), serviceusers_list.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_resourcestatus_impl_composite_status_type(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, types: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("types".to_string(), types.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_root: &str) -> Box<Future<Item = ::models::ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("provider.root".to_string(), provider_root.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mime_allow_empty: bool, mime_allowed: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("mime.allowEmpty".to_string(), mime_allow_empty.to_string())
            .with_query_param("mime.allowed".to_string(), mime_allowed.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_roots: &str) -> Box<Future<Item = ::models::ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("provider.roots".to_string(), provider_roots.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_rest_impl_servlet_default_get_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_limit: i32, use_absolute_uri: bool) -> Box<Future<Item = ::models::ComAdobeGraniteRestImplServletDefaultGetServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("default.limit".to_string(), default_limit.to_string())
            .with_query_param("use.absolute.uri".to_string(), use_absolute_uri.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_tags: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_security_user_user_properties_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, adapter_condition: &str, granite_userproperties_nodetypes: Vec<String>, granite_userproperties_resourcetypes: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteSecurityUserUserPropertiesServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("adapter.condition".to_string(), adapter_condition.to_string())
            .with_query_param("granite.userproperties.nodetypes".to_string(), granite_userproperties_nodetypes.join(",").to_string())
            .with_query_param("granite.userproperties.resourcetypes".to_string(), granite_userproperties_resourcetypes.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_socialgraph_impl_social_graph_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, group2member_relationship_outgoing: &str, group2member_excluded_outgoing: Vec<String>, group2member_relationship_incoming: &str, group2member_excluded_incoming: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("group2member.relationship.outgoing".to_string(), group2member_relationship_outgoing.to_string())
            .with_query_param("group2member.excluded.outgoing".to_string(), group2member_excluded_outgoing.join(",").to_string())
            .with_query_param("group2member.relationship.incoming".to_string(), group2member_relationship_incoming.to_string())
            .with_query_param("group2member.excluded.incoming".to_string(), group2member_excluded_incoming.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, jmx_objectname: &str) -> Box<Future<Item = ::models::ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .with_query_param("jmx.objectname".to_string(), jmx_objectname.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, adapter_condition: &str) -> Box<Future<Item = ::models::ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("adapter.condition".to_string(), adapter_condition.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, archiving_enabled: bool, scheduler_expression: &str, archive_since_days_completed: i32) -> Box<Future<Item = ::models::ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("archiving.enabled".to_string(), archiving_enabled.to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .with_query_param("archive.since.days.completed".to_string(), archive_since_days_completed.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, purge_completed: bool, completed_age: i32, purge_active: bool, active_age: i32, save_threshold: i32) -> Box<Future<Item = ::models::ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("purgeCompleted".to_string(), purge_completed.to_string())
            .with_query_param("completedAge".to_string(), completed_age.to_string())
            .with_query_param("purgeActive".to_string(), purge_active.to_string())
            .with_query_param("activeAge".to_string(), active_age.to_string())
            .with_query_param("saveThreshold".to_string(), save_threshold.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, adapter_condition: &str, taskmanager_admingroups: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("adapter.condition".to_string(), adapter_condition.to_string())
            .with_query_param("taskmanager.admingroups".to_string(), taskmanager_admingroups.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_threaddump_thread_dump_collector(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_period: i32, scheduler_run_on: &str, granite_threaddump_enabled: bool, granite_threaddump_dumps_per_file: i32, granite_threaddump_enable_gzip_compression: bool, granite_threaddump_enable_directories_compression: bool, granite_threaddump_enable_j_stack: bool, granite_threaddump_max_backup_days: i32, granite_threaddump_backup_clean_trigger: &str) -> Box<Future<Item = ::models::ComAdobeGraniteThreaddumpThreadDumpCollectorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.period".to_string(), scheduler_period.to_string())
            .with_query_param("scheduler.runOn".to_string(), scheduler_run_on.to_string())
            .with_query_param("granite.threaddump.enabled".to_string(), granite_threaddump_enabled.to_string())
            .with_query_param("granite.threaddump.dumpsPerFile".to_string(), granite_threaddump_dumps_per_file.to_string())
            .with_query_param("granite.threaddump.enableGzipCompression".to_string(), granite_threaddump_enable_gzip_compression.to_string())
            .with_query_param("granite.threaddump.enableDirectoriesCompression".to_string(), granite_threaddump_enable_directories_compression.to_string())
            .with_query_param("granite.threaddump.enableJStack".to_string(), granite_threaddump_enable_j_stack.to_string())
            .with_query_param("granite.threaddump.maxBackupDays".to_string(), granite_threaddump_max_backup_days.to_string())
            .with_query_param("granite.threaddump.backupCleanTrigger".to_string(), granite_threaddump_backup_clean_trigger.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, translation_factory: &str, default_connector_label: &str, default_connector_attribution: &str, default_connector_workspace_id: &str, default_connector_subscription_key: &str, language_map_location: &str, category_map_location: &str, retry_attempts: i32, timeout_count: i32) -> Box<Future<Item = ::models::ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("translationFactory".to_string(), translation_factory.to_string())
            .with_query_param("defaultConnectorLabel".to_string(), default_connector_label.to_string())
            .with_query_param("defaultConnectorAttribution".to_string(), default_connector_attribution.to_string())
            .with_query_param("defaultConnectorWorkspaceId".to_string(), default_connector_workspace_id.to_string())
            .with_query_param("defaultConnectorSubscriptionKey".to_string(), default_connector_subscription_key.to_string())
            .with_query_param("languageMapLocation".to_string(), language_map_location.to_string())
            .with_query_param("categoryMapLocation".to_string(), category_map_location.to_string())
            .with_query_param("retryAttempts".to_string(), retry_attempts.to_string())
            .with_query_param("timeoutCount".to_string(), timeout_count.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_translation_core_impl_translation_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_connector_name: &str, default_category: &str) -> Box<Future<Item = ::models::ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("defaultConnectorName".to_string(), default_connector_name.to_string())
            .with_query_param("defaultCategory".to_string(), default_category.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, htmllibmanager_timing: bool, htmllibmanager_debug_init_js: &str, htmllibmanager_minify: bool, htmllibmanager_debug: bool, htmllibmanager_gzip: bool, htmllibmanager_max_data_uri_size: i32, htmllibmanager_maxage: i32, htmllibmanager_force_cq_url_info: bool, htmllibmanager_defaultthemename: &str, htmllibmanager_defaultuserthemename: &str, htmllibmanager_clientmanager: &str, htmllibmanager_path_list: Vec<String>, htmllibmanager_excluded_path_list: Vec<String>, htmllibmanager_processor_js: Vec<String>, htmllibmanager_processor_css: Vec<String>, htmllibmanager_longcache_patterns: Vec<String>, htmllibmanager_longcache_format: &str, htmllibmanager_use_file_system_output_cache: bool, htmllibmanager_file_system_output_cache_location: &str, htmllibmanager_disable_replacement: Vec<String>) -> Box<Future<Item = ::models::ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("htmllibmanager.timing".to_string(), htmllibmanager_timing.to_string())
            .with_query_param("htmllibmanager.debug.init.js".to_string(), htmllibmanager_debug_init_js.to_string())
            .with_query_param("htmllibmanager.minify".to_string(), htmllibmanager_minify.to_string())
            .with_query_param("htmllibmanager.debug".to_string(), htmllibmanager_debug.to_string())
            .with_query_param("htmllibmanager.gzip".to_string(), htmllibmanager_gzip.to_string())
            .with_query_param("htmllibmanager.maxDataUriSize".to_string(), htmllibmanager_max_data_uri_size.to_string())
            .with_query_param("htmllibmanager.maxage".to_string(), htmllibmanager_maxage.to_string())
            .with_query_param("htmllibmanager.forceCQUrlInfo".to_string(), htmllibmanager_force_cq_url_info.to_string())
            .with_query_param("htmllibmanager.defaultthemename".to_string(), htmllibmanager_defaultthemename.to_string())
            .with_query_param("htmllibmanager.defaultuserthemename".to_string(), htmllibmanager_defaultuserthemename.to_string())
            .with_query_param("htmllibmanager.clientmanager".to_string(), htmllibmanager_clientmanager.to_string())
            .with_query_param("htmllibmanager.path.list".to_string(), htmllibmanager_path_list.join(",").to_string())
            .with_query_param("htmllibmanager.excluded.path.list".to_string(), htmllibmanager_excluded_path_list.join(",").to_string())
            .with_query_param("htmllibmanager.processor.js".to_string(), htmllibmanager_processor_js.join(",").to_string())
            .with_query_param("htmllibmanager.processor.css".to_string(), htmllibmanager_processor_css.join(",").to_string())
            .with_query_param("htmllibmanager.longcache.patterns".to_string(), htmllibmanager_longcache_patterns.join(",").to_string())
            .with_query_param("htmllibmanager.longcache.format".to_string(), htmllibmanager_longcache_format.to_string())
            .with_query_param("htmllibmanager.useFileSystemOutputCache".to_string(), htmllibmanager_use_file_system_output_cache.to_string())
            .with_query_param("htmllibmanager.fileSystemOutputCacheLocation".to_string(), htmllibmanager_file_system_output_cache_location.to_string())
            .with_query_param("htmllibmanager.disable.replacement".to_string(), htmllibmanager_disable_replacement.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_console_publish_workflow_publish_event_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, granite_workflow_workflow_publish_event_service_enabled: bool) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("granite.workflow.WorkflowPublishEventService.enabled".to_string(), granite_workflow_workflow_publish_event_service_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, bucket_size: i32) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("bucketSize".to_string(), bucket_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_core_job_external_process_job_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_timeout: i32, max_timeout: i32, default_period: i32) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("default.timeout".to_string(), default_timeout.to_string())
            .with_query_param("max.timeout".to_string(), max_timeout.to_string())
            .with_query_param("default.period".to_string(), default_period.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_core_job_job_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, job_topics: Vec<String>, allow_self_process_termination: bool) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreJobJobHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("job.topics".to_string(), job_topics.join(",").to_string())
            .with_query_param("allow.self.process.termination".to_string(), allow_self_process_termination.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, job_topics: &str) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("job.topics".to_string(), job_topics.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_core_payload_map_cache(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, get_system_workflow_models: Vec<String>, get_package_root_path: &str) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCorePayloadMapCacheInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("getSystemWorkflowModels".to_string(), get_system_workflow_models.join(",").to_string())
            .with_query_param("getPackageRootPath".to_string(), get_package_root_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_core_payloadmap_payload_move_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, payload_move_white_list: Vec<String>, payload_move_handle_from_workflow_process: bool) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("payload.move.white.list".to_string(), payload_move_white_list.join(",").to_string())
            .with_query_param("payload.move.handle.from.workflow.process".to_string(), payload_move_handle_from_workflow_process.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_core_workflow_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_workflow_config_workflow_packages_root_path: Vec<String>, cq_workflow_config_workflow_process_legacy_mode: bool, cq_workflow_config_allow_locking: bool) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreWorkflowConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.workflow.config.workflow.packages.root.path".to_string(), cq_workflow_config_workflow_packages_root_path.join(",").to_string())
            .with_query_param("cq.workflow.config.workflow.process.legacy.mode".to_string(), cq_workflow_config_workflow_process_legacy_mode.to_string())
            .with_query_param("cq.workflow.config.allow.locking".to_string(), cq_workflow_config_allow_locking.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_core_workflow_session_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, granite_workflowinbox_sort_property_name: &str, granite_workflowinbox_sort_order: &str, cq_workflow_job_retry: i32, cq_workflow_superuser: Vec<String>, granite_workflow_inbox_query_size: i32, granite_workflow_admin_user_group_filter: bool, granite_workflow_enforce_workitem_assignee_permissions: bool, granite_workflow_enforce_workflow_initiator_permissions: bool, granite_workflow_inject_tenant_id_in_job_topics: bool, granite_workflow_max_purge_save_threshold: i32, granite_workflow_max_purge_query_count: i32) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("granite.workflowinbox.sort.propertyName".to_string(), granite_workflowinbox_sort_property_name.to_string())
            .with_query_param("granite.workflowinbox.sort.order".to_string(), granite_workflowinbox_sort_order.to_string())
            .with_query_param("cq.workflow.job.retry".to_string(), cq_workflow_job_retry.to_string())
            .with_query_param("cq.workflow.superuser".to_string(), cq_workflow_superuser.join(",").to_string())
            .with_query_param("granite.workflow.inboxQuerySize".to_string(), granite_workflow_inbox_query_size.to_string())
            .with_query_param("granite.workflow.adminUserGroupFilter".to_string(), granite_workflow_admin_user_group_filter.to_string())
            .with_query_param("granite.workflow.enforceWorkitemAssigneePermissions".to_string(), granite_workflow_enforce_workitem_assignee_permissions.to_string())
            .with_query_param("granite.workflow.enforceWorkflowInitiatorPermissions".to_string(), granite_workflow_enforce_workflow_initiator_permissions.to_string())
            .with_query_param("granite.workflow.injectTenantIdInJobTopics".to_string(), granite_workflow_inject_tenant_id_in_job_topics.to_string())
            .with_query_param("granite.workflow.maxPurgeSaveThreshold".to_string(), granite_workflow_max_purge_save_threshold.to_string())
            .with_query_param("granite.workflow.maxPurgeQueryCount".to_string(), granite_workflow_max_purge_query_count.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_granite_workflow_purge_scheduler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduledpurge_name: &str, scheduledpurge_workflow_status: &str, scheduledpurge_model_ids: Vec<String>, scheduledpurge_daysold: i32) -> Box<Future<Item = ::models::ComAdobeGraniteWorkflowPurgeSchedulerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduledpurge.name".to_string(), scheduledpurge_name.to_string())
            .with_query_param("scheduledpurge.workflowStatus".to_string(), scheduledpurge_workflow_status.to_string())
            .with_query_param("scheduledpurge.modelIds".to_string(), scheduledpurge_model_ids.join(",").to_string())
            .with_query_param("scheduledpurge.daysold".to_string(), scheduledpurge_daysold.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_octopus_ncomm_bootstrap(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_connections: i32, max_requests: i32, request_timeout: i32, request_retries: i32, launch_timeout: i32) -> Box<Future<Item = ::models::ComAdobeOctopusNcommBootstrapInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("maxConnections".to_string(), max_connections.to_string())
            .with_query_param("maxRequests".to_string(), max_requests.to_string())
            .with_query_param("requestTimeout".to_string(), request_timeout.to_string())
            .with_query_param("requestRetries".to_string(), request_retries.to_string())
            .with_query_param("launchTimeout".to_string(), launch_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, communities_integration_livefyre_sling_event_filter: &str) -> Box<Future<Item = ::models::ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("communities.integration.livefyre.sling.event.filter".to_string(), communities_integration_livefyre_sling_event_filter.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_connections: &str, max_requests: &str, request_timeout: &str, log_dir: &str) -> Box<Future<Item = ::models::ComAdobeXmpWorkerFilesNcommXmpFilesNCommInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("maxConnections".to_string(), max_connections.to_string())
            .with_query_param("maxRequests".to_string(), max_requests.to_string())
            .with_query_param("requestTimeout".to_string(), request_timeout.to_string())
            .with_query_param("logDir".to_string(), log_dir.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_commons_datasource_jdbcpool_jdbc_pool_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jdbc_driver_class: &str, jdbc_connection_uri: &str, jdbc_username: &str, jdbc_password: &str, jdbc_validation_query: &str, default_readonly: bool, default_autocommit: bool, pool_size: i32, pool_max_wait_msec: i32, datasource_name: &str, datasource_svc_properties: Vec<String>) -> Box<Future<Item = ::models::ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("jdbc.driver.class".to_string(), jdbc_driver_class.to_string())
            .with_query_param("jdbc.connection.uri".to_string(), jdbc_connection_uri.to_string())
            .with_query_param("jdbc.username".to_string(), jdbc_username.to_string())
            .with_query_param("jdbc.password".to_string(), jdbc_password.to_string())
            .with_query_param("jdbc.validation.query".to_string(), jdbc_validation_query.to_string())
            .with_query_param("default.readonly".to_string(), default_readonly.to_string())
            .with_query_param("default.autocommit".to_string(), default_autocommit.to_string())
            .with_query_param("pool.size".to_string(), pool_size.to_string())
            .with_query_param("pool.max.wait.msec".to_string(), pool_max_wait_msec.to_string())
            .with_query_param("datasource.name".to_string(), datasource_name.to_string())
            .with_query_param("datasource.svc.properties".to_string(), datasource_svc_properties.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_commons_httpclient(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, proxy_enabled: bool, proxy_host: &str, proxy_user: &str, proxy_password: &str, proxy_ntlm_host: &str, proxy_ntlm_domain: &str, proxy_exceptions: Vec<String>) -> Box<Future<Item = ::models::ComDayCommonsHttpclientInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.commons.httpclient".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("proxy.enabled".to_string(), proxy_enabled.to_string())
            .with_query_param("proxy.host".to_string(), proxy_host.to_string())
            .with_query_param("proxy.user".to_string(), proxy_user.to_string())
            .with_query_param("proxy.password".to_string(), proxy_password.to_string())
            .with_query_param("proxy.ntlm.host".to_string(), proxy_ntlm_host.to_string())
            .with_query_param("proxy.ntlm.domain".to_string(), proxy_ntlm_domain.to_string())
            .with_query_param("proxy.exceptions".to_string(), proxy_exceptions.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_impl_store_properties_change_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_store_listener_additional_store_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.store.listener.additionalStorePaths".to_string(), cq_store_listener_additional_store_paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, allowed_paths: Vec<String>, cq_analytics_saint_exporter_pagesize: i32) -> Box<Future<Item = ::models::ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("allowed.paths".to_string(), allowed_paths.join(",").to_string())
            .with_query_param("cq.analytics.saint.exporter.pagesize".to_string(), cq_analytics_saint_exporter_pagesize.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, report_fetch_attempts: i32, report_fetch_delay: i32) -> Box<Future<Item = ::models::ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("report.fetch.attempts".to_string(), report_fetch_attempts.to_string())
            .with_query_param("report.fetch.delay".to_string(), report_fetch_delay.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_adapterfactory_contextstores: Vec<String>) -> Box<Future<Item = ::models::ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.analytics.adapterfactory.contextstores".to_string(), cq_analytics_adapterfactory_contextstores.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_sitecatalyst_service_datacenter_url: Vec<String>, devhostnamepatterns: Vec<String>, connection_timeout: i32, socket_timeout: i32) -> Box<Future<Item = ::models::ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.analytics.sitecatalyst.service.datacenter.url".to_string(), cq_analytics_sitecatalyst_service_datacenter_url.join(",").to_string())
            .with_query_param("devhostnamepatterns".to_string(), devhostnamepatterns.join(",").to_string())
            .with_query_param("connection.timeout".to_string(), connection_timeout.to_string())
            .with_query_param("socket.timeout".to_string(), socket_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_testandtarget_impl_account_options_updater(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_testandtarget_accountoptionsupdater_enabled: bool) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.analytics.testandtarget.accountoptionsupdater.enabled".to_string(), cq_analytics_testandtarget_accountoptionsupdater_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_testandtarget_deleteauthoractivitylistener_enabled: bool) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled".to_string(), cq_analytics_testandtarget_deleteauthoractivitylistener_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled: bool) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled".to_string(), cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_testandtarget_impl_segment_importer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_testandtarget_segmentimporter_enabled: bool) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.analytics.testandtarget.segmentimporter.enabled".to_string(), cq_analytics_testandtarget_segmentimporter_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_testandtarget_impl_service_web_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, endpoint_uri: &str, connection_timeout: i32, socket_timeout: i32) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("endpointUri".to_string(), endpoint_uri.to_string())
            .with_query_param("connectionTimeout".to_string(), connection_timeout.to_string())
            .with_query_param("socketTimeout".to_string(), socket_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, testandtarget_endpoint_url: &str) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("testandtarget.endpoint.url".to_string(), testandtarget_endpoint_url.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_analytics_testandtarget_api_url: &str, cq_analytics_testandtarget_timeout: i32, cq_analytics_testandtarget_sockettimeout: i32, cq_analytics_testandtarget_recommendations_url_replace: &str, cq_analytics_testandtarget_recommendations_url_replacewith: &str) -> Box<Future<Item = ::models::ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.analytics.testandtarget.api.url".to_string(), cq_analytics_testandtarget_api_url.to_string())
            .with_query_param("cq.analytics.testandtarget.timeout".to_string(), cq_analytics_testandtarget_timeout.to_string())
            .with_query_param("cq.analytics.testandtarget.sockettimeout".to_string(), cq_analytics_testandtarget_sockettimeout.to_string())
            .with_query_param("cq.analytics.testandtarget.recommendations.url.replace".to_string(), cq_analytics_testandtarget_recommendations_url_replace.to_string())
            .with_query_param("cq.analytics.testandtarget.recommendations.url.replacewith".to_string(), cq_analytics_testandtarget_recommendations_url_replacewith.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_auth_impl_cug_cug_support_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cug_exempted_principals: Vec<String>, cug_enabled: bool, cug_principals_regex: &str, cug_principals_replacement: &str) -> Box<Future<Item = ::models::ComDayCqAuthImplCugCugSupportImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cug.exempted.principals".to_string(), cug_exempted_principals.join(",").to_string())
            .with_query_param("cug.enabled".to_string(), cug_enabled.to_string())
            .with_query_param("cug.principals.regex".to_string(), cug_principals_regex.to_string())
            .with_query_param("cug.principals.replacement".to_string(), cug_principals_replacement.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_auth_impl_login_selector_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, service_ranking: i32, auth_loginselector_mappings: Vec<String>, auth_loginselector_changepw_mappings: Vec<String>, auth_loginselector_defaultloginpage: &str, auth_loginselector_defaultchangepwpage: &str, auth_loginselector_handle: Vec<String>, auth_loginselector_handle_all_extensions: bool) -> Box<Future<Item = ::models::ComDayCqAuthImplLoginSelectorHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("auth.loginselector.mappings".to_string(), auth_loginselector_mappings.join(",").to_string())
            .with_query_param("auth.loginselector.changepw.mappings".to_string(), auth_loginselector_changepw_mappings.join(",").to_string())
            .with_query_param("auth.loginselector.defaultloginpage".to_string(), auth_loginselector_defaultloginpage.to_string())
            .with_query_param("auth.loginselector.defaultchangepwpage".to_string(), auth_loginselector_defaultchangepwpage.to_string())
            .with_query_param("auth.loginselector.handle".to_string(), auth_loginselector_handle.join(",").to_string())
            .with_query_param("auth.loginselector.handle.all.extensions".to_string(), auth_loginselector_handle_all_extensions.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_commons_impl_externalizer_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, externalizer_domains: Vec<String>, externalizer_host: &str, externalizer_contextpath: &str, externalizer_encodedpath: bool) -> Box<Future<Item = ::models::ComDayCqCommonsImplExternalizerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("externalizer.domains".to_string(), externalizer_domains.join(",").to_string())
            .with_query_param("externalizer.host".to_string(), externalizer_host.to_string())
            .with_query_param("externalizer.contextpath".to_string(), externalizer_contextpath.to_string())
            .with_query_param("externalizer.encodedpath".to_string(), externalizer_encodedpath.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_commons_servlets_root_mapping_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, rootmapping_target: &str) -> Box<Future<Item = ::models::ComDayCqCommonsServletsRootMappingServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("rootmapping.target".to_string(), rootmapping_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, codeupgradetasks: Vec<String>, codeupgradetaskfilters: Vec<String>) -> Box<Future<Item = ::models::ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("codeupgradetasks".to_string(), codeupgradetasks.join(",").to_string())
            .with_query_param("codeupgradetaskfilters".to_string(), codeupgradetaskfilters.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, upgrade_task_ignore_list: Vec<String>) -> Box<Future<Item = ::models::ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("upgradeTaskIgnoreList".to_string(), upgrade_task_ignore_list.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, effective_bundle_list_path: &str) -> Box<Future<Item = ::models::ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("effectiveBundleListPath".to_string(), effective_bundle_list_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_contentsync_impl_content_sync_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, contentsync_fallback_authorizable: &str, contentsync_fallback_updateuser: &str) -> Box<Future<Item = ::models::ComDayCqContentsyncImplContentSyncManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("contentsync.fallback.authorizable".to_string(), contentsync_fallback_authorizable.to_string())
            .with_query_param("contentsync.fallback.updateuser".to_string(), contentsync_fallback_updateuser.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_commons_handler_standard_image_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, large_file_threshold: i32, large_comment_threshold: i32, cq_dam_enable_ext_meta_extraction: bool) -> Box<Future<Item = ::models::ComDayCqDamCommonsHandlerStandardImageHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("large_file_threshold".to_string(), large_file_threshold.to_string())
            .with_query_param("large_comment_threshold".to_string(), large_comment_threshold.to_string())
            .with_query_param("cq.dam.enable.ext.meta.extraction".to_string(), cq_dam_enable_ext_meta_extraction.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_commons_metadata_xmp_filter_black_white(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, xmp_filter_apply_whitelist: bool, xmp_filter_whitelist: Vec<String>, xmp_filter_apply_blacklist: bool, xmp_filter_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("xmp.filter.apply_whitelist".to_string(), xmp_filter_apply_whitelist.to_string())
            .with_query_param("xmp.filter.whitelist".to_string(), xmp_filter_whitelist.join(",").to_string())
            .with_query_param("xmp.filter.apply_blacklist".to_string(), xmp_filter_apply_blacklist.to_string())
            .with_query_param("xmp.filter.blacklist".to_string(), xmp_filter_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_commons_util_impl_asset_cache_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, large_file_min: i32, cache_apply: bool, mime_types: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCommonsUtilImplAssetCacheImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("large.file.min".to_string(), large_file_min.to_string())
            .with_query_param("cache.apply".to_string(), cache_apply.to_string())
            .with_query_param("mime.types".to_string(), mime_types.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_config_annotation_pdf_document_width: i32, cq_dam_config_annotation_pdf_document_height: i32, cq_dam_config_annotation_pdf_document_padding_horizontal: i32, cq_dam_config_annotation_pdf_document_padding_vertical: i32, cq_dam_config_annotation_pdf_font_size: i32, cq_dam_config_annotation_pdf_font_color: &str, cq_dam_config_annotation_pdf_font_family: &str, cq_dam_config_annotation_pdf_font_light: &str, cq_dam_config_annotation_pdf_margin_text_image: i32, cq_dam_config_annotation_pdf_min_image_height: i32, cq_dam_config_annotation_pdf_review_status_width: i32, cq_dam_config_annotation_pdf_review_status_color_approved: &str, cq_dam_config_annotation_pdf_review_status_color_rejected: &str, cq_dam_config_annotation_pdf_review_status_color_changes_requested: &str, cq_dam_config_annotation_pdf_annotation_marker_width: i32, cq_dam_config_annotation_pdf_asset_minheight: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.config.annotation.pdf.document.width".to_string(), cq_dam_config_annotation_pdf_document_width.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.document.height".to_string(), cq_dam_config_annotation_pdf_document_height.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.document.padding.horizontal".to_string(), cq_dam_config_annotation_pdf_document_padding_horizontal.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.document.padding.vertical".to_string(), cq_dam_config_annotation_pdf_document_padding_vertical.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.font.size".to_string(), cq_dam_config_annotation_pdf_font_size.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.font.color".to_string(), cq_dam_config_annotation_pdf_font_color.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.font.family".to_string(), cq_dam_config_annotation_pdf_font_family.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.font.light".to_string(), cq_dam_config_annotation_pdf_font_light.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.marginTextImage".to_string(), cq_dam_config_annotation_pdf_margin_text_image.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.minImageHeight".to_string(), cq_dam_config_annotation_pdf_min_image_height.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.reviewStatus.width".to_string(), cq_dam_config_annotation_pdf_review_status_width.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.reviewStatus.color.approved".to_string(), cq_dam_config_annotation_pdf_review_status_color_approved.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.reviewStatus.color.rejected".to_string(), cq_dam_config_annotation_pdf_review_status_color_rejected.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested".to_string(), cq_dam_config_annotation_pdf_review_status_color_changes_requested.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.annotationMarker.width".to_string(), cq_dam_config_annotation_pdf_annotation_marker_width.to_string())
            .with_query_param("cq.dam.config.annotation.pdf.asset.minheight".to_string(), cq_dam_config_annotation_pdf_asset_minheight.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_asset_move_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplAssetMoveListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("isEnabled".to_string(), is_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_adhoc_asset_share_prezip_maxcontentsize: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.adhoc.asset.share.prezip.maxcontentsize".to_string(), cq_dam_adhoc_asset_share_prezip_maxcontentsize.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_image_cache_max_memory: i32, cq_dam_image_cache_max_age: i32, cq_dam_image_cache_max_dimension: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplCacheCqBufferedImageCacheInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.image.cache.max.memory".to_string(), cq_dam_image_cache_max_memory.to_string())
            .with_query_param("cq.dam.image.cache.max.age".to_string(), cq_dam_image_cache_max_age.to_string())
            .with_query_param("cq.dam.image.cache.max.dimension".to_string(), cq_dam_image_cache_max_dimension.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_dam_change_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, changeeventlistener_observed_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplDamChangeEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("changeeventlistener.observed.paths".to_string(), changeeventlistener_observed_paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_dam_event_purge_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, max_saved_activities: i32, save_interval: i32, enable_activity_purge: bool, event_types: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplDamEventPurgeServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .with_query_param("maxSavedActivities".to_string(), max_saved_activities.to_string())
            .with_query_param("saveInterval".to_string(), save_interval.to_string())
            .with_query_param("enableActivityPurge".to_string(), enable_activity_purge.to_string())
            .with_query_param("eventTypes".to_string(), event_types.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_dam_event_recorder_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, event_queue_length: i32, eventrecorder_enabled: bool, eventrecorder_blacklist: Vec<String>, eventrecorder_eventtypes: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplDamEventRecorderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .with_query_param("event.queue.length".to_string(), event_queue_length.to_string())
            .with_query_param("eventrecorder.enabled".to_string(), eventrecorder_enabled.to_string())
            .with_query_param("eventrecorder.blacklist".to_string(), eventrecorder_blacklist.join(",").to_string())
            .with_query_param("eventrecorder.eventtypes".to_string(), eventrecorder_eventtypes.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_event_dam_event_audit_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplEventDamEventAuditListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_expiry_notification_job_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_expiry_notification_scheduler_istimebased: bool, cq_dam_expiry_notification_scheduler_timebased_rule: &str, cq_dam_expiry_notification_scheduler_period_rule: i32, send_email: bool, asset_expired_limit: i32, prior_notification_seconds: i32, cq_dam_expiry_notification_url_protocol: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplExpiryNotificationJobImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.expiry.notification.scheduler.istimebased".to_string(), cq_dam_expiry_notification_scheduler_istimebased.to_string())
            .with_query_param("cq.dam.expiry.notification.scheduler.timebased.rule".to_string(), cq_dam_expiry_notification_scheduler_timebased_rule.to_string())
            .with_query_param("cq.dam.expiry.notification.scheduler.period.rule".to_string(), cq_dam_expiry_notification_scheduler_period_rule.to_string())
            .with_query_param("send_email".to_string(), send_email.to_string())
            .with_query_param("asset_expired_limit".to_string(), asset_expired_limit.to_string())
            .with_query_param("prior_notification_seconds".to_string(), prior_notification_seconds.to_string())
            .with_query_param("cq.dam.expiry.notification.url.protocol".to_string(), cq_dam_expiry_notification_url_protocol.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, is_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("isEnabled".to_string(), is_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, skip_bufferedcache: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplGfxCommonsGfxRendererInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("skip.bufferedcache".to_string(), skip_bufferedcache.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_handler_eps_format_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mimetype: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplHandlerEpsFormatHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("mimetype".to_string(), mimetype.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_handler_indesign_format_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mimetype: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("mimetype".to_string(), mimetype.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_handler_jpeg_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_enable_ext_meta_extraction: bool, large_file_threshold: i32, large_comment_threshold: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplHandlerJpegHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.enable.ext.meta.extraction".to_string(), cq_dam_enable_ext_meta_extraction.to_string())
            .with_query_param("large_file_threshold".to_string(), large_file_threshold.to_string())
            .with_query_param("large_comment_threshold".to_string(), large_comment_threshold.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, xmphandler_cq_formats: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("xmphandler.cq.formats".to_string(), xmphandler_cq_formats.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jmx_objectname: &str, property_measure_enabled: bool, property_name: &str, property_max_wait_ms: i32, property_max_rate: f32, fulltext_measure_enabled: bool, fulltext_name: &str, fulltext_max_wait_ms: i32, fulltext_max_rate: f32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("jmx.objectname".to_string(), jmx_objectname.to_string())
            .with_query_param("property.measure.enabled".to_string(), property_measure_enabled.to_string())
            .with_query_param("property.name".to_string(), property_name.to_string())
            .with_query_param("property.max.wait.ms".to_string(), property_max_wait_ms.to_string())
            .with_query_param("property.max.rate".to_string(), property_max_rate.to_string())
            .with_query_param("fulltext.measure.enabled".to_string(), fulltext_measure_enabled.to_string())
            .with_query_param("fulltext.name".to_string(), fulltext_name.to_string())
            .with_query_param("fulltext.max.wait.ms".to_string(), fulltext_max_wait_ms.to_string())
            .with_query_param("fulltext.max.rate".to_string(), fulltext_max_rate.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jmx_objectname: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("jmx.objectname".to_string(), jmx_objectname.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jmx_objectname: &str, active: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("jmx.objectname".to_string(), jmx_objectname.to_string())
            .with_query_param("active".to_string(), active.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, operation: &str, email_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("operation".to_string(), operation.to_string())
            .with_query_param("emailEnabled".to_string(), email_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, operation: &str, operation_icon: &str, topic_name: &str, email_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("operation".to_string(), operation.to_string())
            .with_query_param("operationIcon".to_string(), operation_icon.to_string())
            .with_query_param("topicName".to_string(), topic_name.to_string())
            .with_query_param("emailEnabled".to_string(), email_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_lightbox_lightbox_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_paths: &str, sling_servlet_methods: Vec<String>, cq_dam_enable_anonymous: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplLightboxLightboxServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.paths".to_string(), sling_servlet_paths.to_string())
            .with_query_param("sling.servlet.methods".to_string(), sling_servlet_methods.join(",").to_string())
            .with_query_param("cq.dam.enable.anonymous".to_string(), cq_dam_enable_anonymous.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_metadata_editor_select_component_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, granitedata: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("granite:data".to_string(), granitedata.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_allow_all_mime: bool, cq_dam_allowed_asset_mimes: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.allow.all.mime".to_string(), cq_dam_allow_all_mime.to_string())
            .with_query_param("cq.dam.allowed.asset.mimes".to_string(), cq_dam_allowed_asset_mimes.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_detect_asset_mime_from_content: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.detect.asset.mime.from.content".to_string(), cq_dam_detect_asset_mime_from_content.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_missing_metadata_notification_job(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_missingmetadata_notification_scheduler_istimebased: bool, cq_dam_missingmetadata_notification_scheduler_timebased_rule: &str, cq_dam_missingmetadata_notification_scheduler_period_rule: i32, cq_dam_missingmetadata_notification_recipient: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplMissingMetadataNotificationJobInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.missingmetadata.notification.scheduler.istimebased".to_string(), cq_dam_missingmetadata_notification_scheduler_istimebased.to_string())
            .with_query_param("cq.dam.missingmetadata.notification.scheduler.timebased.rule".to_string(), cq_dam_missingmetadata_notification_scheduler_timebased_rule.to_string())
            .with_query_param("cq.dam.missingmetadata.notification.scheduler.period.rule".to_string(), cq_dam_missingmetadata_notification_scheduler_period_rule.to_string())
            .with_query_param("cq.dam.missingmetadata.notification.recipient".to_string(), cq_dam_missingmetadata_notification_recipient.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, notify_on_complete: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("process.label".to_string(), process_label.to_string())
            .with_query_param("Notify on Complete".to_string(), notify_on_complete.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_process_text_extraction_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mime_types: Vec<String>, max_extract: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplProcessTextExtractionProcessInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("mimeTypes".to_string(), mime_types.join(",").to_string())
            .with_query_param("maxExtract".to_string(), max_extract.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_rendition_maker_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, xmp_propagate: bool, xmp_excludes: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplRenditionMakerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("xmp.propagate".to_string(), xmp_propagate.to_string())
            .with_query_param("xmp.excludes".to_string(), xmp_excludes.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_reports_report_export_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, query_batch_size: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplReportsReportExportServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("queryBatchSize".to_string(), query_batch_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_reports_report_purge_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, max_saved_reports: i32, time_duration: i32, enable_report_purge: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplReportsReportPurgeServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .with_query_param("maxSavedReports".to_string(), max_saved_reports.to_string())
            .with_query_param("timeDuration".to_string(), time_duration.to_string())
            .with_query_param("enableReportPurge".to_string(), enable_report_purge.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_asset_download_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletAssetDownloadServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_asset_status_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_batch_status_maxassets: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletAssetStatusServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.batch.status.maxassets".to_string(), cq_dam_batch_status_maxassets.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_batch_indesign_maxassets: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletAssetXmpSearchServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.batch.indesign.maxassets".to_string(), cq_dam_batch_indesign_maxassets.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_batch_metadata_asset_default: Vec<String>, cq_dam_batch_metadata_collection_default: Vec<String>, cq_dam_batch_metadata_maxresources: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletBatchMetadataServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.batch.metadata.asset.default".to_string(), cq_dam_batch_metadata_asset_default.join(",").to_string())
            .with_query_param("cq.dam.batch.metadata.collection.default".to_string(), cq_dam_batch_metadata_collection_default.join(",").to_string())
            .with_query_param("cq.dam.batch.metadata.maxresources".to_string(), cq_dam_batch_metadata_maxresources.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_binary_provider_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_resource_types: Vec<String>, sling_servlet_methods: Vec<String>, cq_dam_drm_enable: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletBinaryProviderServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.resourceTypes".to_string(), sling_servlet_resource_types.join(",").to_string())
            .with_query_param("sling.servlet.methods".to_string(), sling_servlet_methods.join(",").to_string())
            .with_query_param("cq.dam.drm.enable".to_string(), cq_dam_drm_enable.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_collection_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_batch_collection_properties: Vec<String>, cq_dam_batch_collection_maxcollections: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletCollectionServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.batch.collection.properties".to_string(), cq_dam_batch_collection_properties.join(",").to_string())
            .with_query_param("cq.dam.batch.collection.maxcollections".to_string(), cq_dam_batch_collection_maxcollections.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_collections_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_batch_collections_properties: Vec<String>, cq_dam_batch_collections_limit: i32) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletCollectionsServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.batch.collections.properties".to_string(), cq_dam_batch_collections_properties.join(",").to_string())
            .with_query_param("cq.dam.batch.collections.limit".to_string(), cq_dam_batch_collections_limit.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_companion_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, more_info: &str, mntoverlaydamguicontentassetsmoreinfo_htmlpath: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletCompanionServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("More Info".to_string(), more_info.to_string())
            .with_query_param("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}".to_string(), mntoverlaydamguicontentassetsmoreinfo_htmlpath.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_create_asset_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, detect_duplicate: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletCreateAssetServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("detect_duplicate".to_string(), detect_duplicate.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_mime_type_blacklist: Vec<String>, cq_dam_empty_mime: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletDamContentDispositionFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.mime.type.blacklist".to_string(), cq_mime_type_blacklist.join(",").to_string())
            .with_query_param("cq.dam.empty.mime".to_string(), cq_dam_empty_mime.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_guid_lookup_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_core_guidlookupfilter_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletGuidLookupFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.core.guidlookupfilter.enabled".to_string(), cq_dam_core_guidlookupfilter_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_health_check_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_sync_workflow_id: &str, cq_dam_sync_folder_types: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletHealthCheckServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.sync.workflow.id".to_string(), cq_dam_sync_workflow_id.to_string())
            .with_query_param("cq.dam.sync.folder.types".to_string(), cq_dam_sync_folder_types.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_metadata_get_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_resource_types: &str, sling_servlet_methods: &str, sling_servlet_extensions: &str, sling_servlet_selectors: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletMetadataGetServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.resourceTypes".to_string(), sling_servlet_resource_types.to_string())
            .with_query_param("sling.servlet.methods".to_string(), sling_servlet_methods.to_string())
            .with_query_param("sling.servlet.extensions".to_string(), sling_servlet_extensions.to_string())
            .with_query_param("sling.servlet.selectors".to_string(), sling_servlet_selectors.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_drm_enable: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.drm.enable".to_string(), cq_dam_drm_enable.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_servlet_resource_collection_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_resource_types: Vec<String>, sling_servlet_methods: &str, sling_servlet_selectors: &str, download_config: &str, view_selector: &str, send_email: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreImplServletResourceCollectionServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.resourceTypes".to_string(), sling_servlet_resource_types.join(",").to_string())
            .with_query_param("sling.servlet.methods".to_string(), sling_servlet_methods.to_string())
            .with_query_param("sling.servlet.selectors".to_string(), sling_servlet_selectors.to_string())
            .with_query_param("download.config".to_string(), download_config.to_string())
            .with_query_param("view.selector".to_string(), view_selector.to_string())
            .with_query_param("send_email".to_string(), send_email.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, create_preview_enabled: bool, update_preview_enabled: bool, queue_size: i32, folder_preview_rendition_regex: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("createPreviewEnabled".to_string(), create_preview_enabled.to_string())
            .with_query_param("updatePreviewEnabled".to_string(), update_preview_enabled.to_string())
            .with_query_param("queueSize".to_string(), queue_size.to_string())
            .with_query_param("folderPreviewRenditionRegex".to_string(), folder_preview_rendition_regex.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_impl_unzip_unzip_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_config_unzip_maxuncompressedsize: i32, cq_dam_config_unzip_encoding: &str) -> Box<Future<Item = ::models::ComDayCqDamCoreImplUnzipUnzipConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.config.unzip.maxuncompressedsize".to_string(), cq_dam_config_unzip_maxuncompressedsize.to_string())
            .with_query_param("cq.dam.config.unzip.encoding".to_string(), cq_dam_config_unzip_encoding.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_process_exif_tool_extract_metadata_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, cq_dam_enable_sha1: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("process.label".to_string(), process_label.to_string())
            .with_query_param("cq.dam.enable.sha1".to_string(), cq_dam_enable_sha1.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_process_extract_metadata_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, cq_dam_enable_sha1: bool) -> Box<Future<Item = ::models::ComDayCqDamCoreProcessExtractMetadataProcessInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("process.label".to_string(), process_label.to_string())
            .with_query_param("cq.dam.enable.sha1".to_string(), cq_dam_enable_sha1.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_core_process_metadata_processor_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, cq_dam_enable_sha1: bool, cq_dam_metadata_xssprotected_properties: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamCoreProcessMetadataProcessorProcessInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("process.label".to_string(), process_label.to_string())
            .with_query_param("cq.dam.enable.sha1".to_string(), cq_dam_enable_sha1.to_string())
            .with_query_param("cq.dam.metadata.xssprotected.properties".to_string(), cq_dam_metadata_xssprotected_properties.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_handler_ffmpeg_locator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, executable_searchpath: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamHandlerFfmpegLocatorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("executable.searchpath".to_string(), executable_searchpath.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, fontmgr_system_font_dir: Vec<String>, fontmgr_adobe_font_dir: &str, fontmgr_customer_font_dir: &str) -> Box<Future<Item = ::models::ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .with_query_param("fontmgr.system.font.dir".to_string(), fontmgr_system_font_dir.join(",").to_string())
            .with_query_param("fontmgr.adobe.font.dir".to_string(), fontmgr_adobe_font_dir.to_string())
            .with_query_param("fontmgr.customer.font.dir".to_string(), fontmgr_customer_font_dir.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_handler_standard_pdf_pdf_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, raster_annotation: bool) -> Box<Future<Item = ::models::ComDayCqDamHandlerStandardPdfPdfHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("raster.annotation".to_string(), raster_annotation.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_handler_standard_ps_post_script_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, raster_annotation: bool) -> Box<Future<Item = ::models::ComDayCqDamHandlerStandardPsPostScriptHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("raster.annotation".to_string(), raster_annotation.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_handler_standard_psd_psd_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, large_file_threshold: i32) -> Box<Future<Item = ::models::ComDayCqDamHandlerStandardPsdPsdHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("large_file_threshold".to_string(), large_file_threshold.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_ids_impl_ids_job_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable_multisession: bool, ids_cc_enable: bool, enable_retry: bool, enable_retry_scripterror: bool, externalizer_domain_cqhost: &str, externalizer_domain_http: &str) -> Box<Future<Item = ::models::ComDayCqDamIdsImplIdsJobProcessorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enable.multisession".to_string(), enable_multisession.to_string())
            .with_query_param("ids.cc.enable".to_string(), ids_cc_enable.to_string())
            .with_query_param("enable.retry".to_string(), enable_retry.to_string())
            .with_query_param("enable.retry.scripterror".to_string(), enable_retry_scripterror.to_string())
            .with_query_param("externalizer.domain.cqhost".to_string(), externalizer_domain_cqhost.to_string())
            .with_query_param("externalizer.domain.http".to_string(), externalizer_domain_http.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_ids_impl_ids_pool_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_errors_to_blacklist: i32, retry_interval_to_whitelist: i32, connect_timeout: i32, socket_timeout: i32, process_label: &str, connection_use_max: i32) -> Box<Future<Item = ::models::ComDayCqDamIdsImplIdsPoolManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("max.errors.to.blacklist".to_string(), max_errors_to_blacklist.to_string())
            .with_query_param("retry.interval.to.whitelist".to_string(), retry_interval_to_whitelist.to_string())
            .with_query_param("connect.timeout".to_string(), connect_timeout.to_string())
            .with_query_param("socket.timeout".to_string(), socket_timeout.to_string())
            .with_query_param("process.label".to_string(), process_label.to_string())
            .with_query_param("connection.use.max".to_string(), connection_use_max.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, extract_pages: bool) -> Box<Future<Item = ::models::ComDayCqDamInddImplHandlerIndesignXmpHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("process.label".to_string(), process_label.to_string())
            .with_query_param("extract.pages".to_string(), extract_pages.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, snippetcreation_maxcollections: i32) -> Box<Future<Item = ::models::ComDayCqDamInddImplServletSnippetCreationServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("snippetcreation.maxcollections".to_string(), snippetcreation_maxcollections.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_indd_process_indd_media_extract_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str, cq_dam_indd_pages_regex: &str, ids_job_decoupled: bool, ids_job_workflow_model: &str) -> Box<Future<Item = ::models::ComDayCqDamInddProcessInddMediaExtractProcessInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("process.label".to_string(), process_label.to_string())
            .with_query_param("cq.dam.indd.pages.regex".to_string(), cq_dam_indd_pages_regex.to_string())
            .with_query_param("ids.job.decoupled".to_string(), ids_job_decoupled.to_string())
            .with_query_param("ids.job.workflow.model".to_string(), ids_job_workflow_model.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, batch_commit_size: i32) -> Box<Future<Item = ::models::ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("batch.commit.size".to_string(), batch_commit_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_performance_internal_asset_performance_report_sync_job(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str) -> Box<Future<Item = ::models::ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, delete_zip_file: bool) -> Box<Future<Item = ::models::ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("delete.zip.file".to_string(), delete_zip_file.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled".to_string(), cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, scheduler_concurrent: bool) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .with_query_param("scheduler.concurrent".to_string(), scheduler_concurrent.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_post_operation: &str, sling_servlet_methods: &str) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.post.operation".to_string(), sling_post_operation.to_string())
            .with_query_param("sling.servlet.methods".to_string(), sling_servlet_methods.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_post_operation: &str, sling_servlet_methods: &str) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.post.operation".to_string(), sling_post_operation.to_string())
            .with_query_param("sling.servlet.methods".to_string(), sling_servlet_methods.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, process_label: &str) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("process.label".to_string(), process_label.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_s7dam_damchangeeventlistener_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.s7dam.damchangeeventlistener.enabled".to_string(), cq_dam_s7dam_damchangeeventlistener_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_paths: &str, sling_servlet_methods: &str) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.paths".to_string(), sling_servlet_paths.to_string())
            .with_query_param("sling.servlet.methods".to_string(), sling_servlet_methods.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name: i32, cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name: i32, cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name: i32, cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name: i32, cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name: i32, cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name: i32, cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name: i32) -> Box<Future<Item = ::models::ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name".to_string(), cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name.to_string())
            .with_query_param("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name".to_string(), cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name.to_string())
            .with_query_param("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name".to_string(), cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name.to_string())
            .with_query_param("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name".to_string(), cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name.to_string())
            .with_query_param("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name".to_string(), cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name.to_string())
            .with_query_param("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name".to_string(), cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name.to_string())
            .with_query_param("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name".to_string(), cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_scene7_impl_scene7_api_client_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_scene7_apiclient_recordsperpage_nofilter_name: i32, cq_dam_scene7_apiclient_recordsperpage_withfilter_name: i32) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7ApiClientImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.scene7.apiclient.recordsperpage.nofilter.name".to_string(), cq_dam_scene7_apiclient_recordsperpage_nofilter_name.to_string())
            .with_query_param("cq.dam.scene7.apiclient.recordsperpage.withfilter.name".to_string(), cq_dam_scene7_apiclient_recordsperpage_withfilter_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_scene7_assetmimetypeservice_mapping: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.scene7.assetmimetypeservice.mapping".to_string(), cq_dam_scene7_assetmimetypeservice_mapping.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_scene7_configurationeventlistener_enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.scene7.configurationeventlistener.enabled".to_string(), cq_dam_scene7_configurationeventlistener_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_scene7_damchangeeventlistener_enabled: bool, cq_dam_scene7_damchangeeventlistener_observed_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.scene7.damchangeeventlistener.enabled".to_string(), cq_dam_scene7_damchangeeventlistener_enabled.to_string())
            .with_query_param("cq.dam.scene7.damchangeeventlistener.observed.paths".to_string(), cq_dam_scene7_damchangeeventlistener_observed_paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scene7_flash_templates_rti: &str, scene7_flash_templates_rsi: &str, scene7_flash_templates_rb: &str, scene7_flash_templates_rurl: &str, scene7_flash_template_url_format_parameter: &str) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scene7FlashTemplates.rti".to_string(), scene7_flash_templates_rti.to_string())
            .with_query_param("scene7FlashTemplates.rsi".to_string(), scene7_flash_templates_rsi.to_string())
            .with_query_param("scene7FlashTemplates.rb".to_string(), scene7_flash_templates_rb.to_string())
            .with_query_param("scene7FlashTemplates.rurl".to_string(), scene7_flash_templates_rurl.to_string())
            .with_query_param("scene7FlashTemplate.urlFormatParameter".to_string(), scene7_flash_template_url_format_parameter.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_scene7_impl_scene7_upload_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_dam_scene7_uploadservice_activejobtimeout_label: i32, cq_dam_scene7_uploadservice_connectionmaxperroute_label: i32) -> Box<Future<Item = ::models::ComDayCqDamScene7ImplScene7UploadServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.dam.scene7.uploadservice.activejobtimeout.label".to_string(), cq_dam_scene7_uploadservice_activejobtimeout_label.to_string())
            .with_query_param("cq.dam.scene7.uploadservice.connectionmaxperroute.label".to_string(), cq_dam_scene7_uploadservice_connectionmaxperroute_label.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, get_cache_expiration_unit: &str, get_cache_expiration_value: i32) -> Box<Future<Item = ::models::ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("getCacheExpirationUnit".to_string(), get_cache_expiration_unit.to_string())
            .with_query_param("getCacheExpirationValue".to_string(), get_cache_expiration_value.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, locale: &str, ims_config: &str) -> Box<Future<Item = ::models::ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("locale".to_string(), locale.to_string())
            .with_query_param("imsConfig".to_string(), ims_config.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_dam_video_impl_servlet_video_test_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::ComDayCqDamVideoImplServletVideoTestServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_extwidget_servlets_image_sprite_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_width: i32, max_height: i32) -> Box<Future<Item = ::models::ComDayCqExtwidgetServletsImageSpriteServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("maxWidth".to_string(), max_width.to_string())
            .with_query_param("maxHeight".to_string(), max_height.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_image_internal_font_font_helper(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, fontpath: Vec<String>, oversampling_factor: i32) -> Box<Future<Item = ::models::ComDayCqImageInternalFontFontHelperInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.image.internal.font.FontHelper".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("fontpath".to_string(), fontpath.join(",").to_string())
            .with_query_param("oversamplingFactor".to_string(), oversampling_factor.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_jcrclustersupport_cluster_start_level_controller(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cluster_level_enable: bool, cluster_master_level: i32, cluster_slave_level: i32) -> Box<Future<Item = ::models::ComDayCqJcrclustersupportClusterStartLevelControllerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cluster.level.enable".to_string(), cluster_level_enable.to_string())
            .with_query_param("cluster.master.level".to_string(), cluster_master_level.to_string())
            .with_query_param("cluster.slave.level".to_string(), cluster_slave_level.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mailer_default_mail_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, smtp_host: &str, smtp_port: i32, smtp_user: &str, smtp_password: &str, from_address: &str, smtp_ssl: bool, smtp_starttls: bool, debug_email: bool) -> Box<Future<Item = ::models::ComDayCqMailerDefaultMailServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mailer.DefaultMailService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("smtp.host".to_string(), smtp_host.to_string())
            .with_query_param("smtp.port".to_string(), smtp_port.to_string())
            .with_query_param("smtp.user".to_string(), smtp_user.to_string())
            .with_query_param("smtp.password".to_string(), smtp_password.to_string())
            .with_query_param("from.address".to_string(), from_address.to_string())
            .with_query_param("smtp.ssl".to_string(), smtp_ssl.to_string())
            .with_query_param("smtp.starttls".to_string(), smtp_starttls.to_string())
            .with_query_param("debug.email".to_string(), debug_email.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mailer_impl_cq_mailing_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_recipient_count: &str) -> Box<Future<Item = ::models::ComDayCqMailerImplCqMailingServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("max.recipient.count".to_string(), max_recipient_count.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mailer_impl_email_cq_email_template_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mailer_email_charset: &str) -> Box<Future<Item = ::models::ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("mailer.email.charset".to_string(), mailer_email_charset.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mailer_impl_email_cq_retriever_template_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mailer_email_embed: bool, mailer_email_charset: &str, mailer_email_retriever_user_id: &str, mailer_email_retriever_user_pwd: &str) -> Box<Future<Item = ::models::ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("mailer.email.embed".to_string(), mailer_email_embed.to_string())
            .with_query_param("mailer.email.charset".to_string(), mailer_email_charset.to_string())
            .with_query_param("mailer.email.retrieverUserID".to_string(), mailer_email_retriever_user_id.to_string())
            .with_query_param("mailer.email.retrieverUserPWD".to_string(), mailer_email_retriever_user_pwd.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mcm_campaign_impl_integration_config_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, aem_mcm_campaign_form_constraints: Vec<String>, aem_mcm_campaign_public_url: &str, aem_mcm_campaign_relaxed_ssl: bool) -> Box<Future<Item = ::models::ComDayCqMcmCampaignImplIntegrationConfigImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("aem.mcm.campaign.formConstraints".to_string(), aem_mcm_campaign_form_constraints.join(",").to_string())
            .with_query_param("aem.mcm.campaign.publicUrl".to_string(), aem_mcm_campaign_public_url.to_string())
            .with_query_param("aem.mcm.campaign.relaxedSSL".to_string(), aem_mcm_campaign_relaxed_ssl.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, from_address: &str, sender_host: &str, max_bounce_count: &str) -> Box<Future<Item = ::models::ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("from.address".to_string(), from_address.to_string())
            .with_query_param("sender.host".to_string(), sender_host.to_string())
            .with_query_param("max.bounce.count".to_string(), max_bounce_count.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mcm_impl_mcm_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, experience_indirection: Vec<String>, touchpoint_indirection: Vec<String>) -> Box<Future<Item = ::models::ComDayCqMcmImplMcmConfigurationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("experience.indirection".to_string(), experience_indirection.join(",").to_string())
            .with_query_param("touchpoint.indirection".to_string(), touchpoint_indirection.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .with_query_param("component.resourceType".to_string(), component_resource_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .with_query_param("component.resourceType".to_string(), component_resource_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .with_query_param("component.resourceType".to_string(), component_resource_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_notification_impl_notification_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str) -> Box<Future<Item = ::models::ComDayCqNotificationImplNotificationServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, forcelocation: bool) -> Box<Future<Item = ::models::ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("forcelocation".to_string(), forcelocation.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_polling_importer_impl_managed_poll_config_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, id: &str, enabled: bool, reference: bool, interval: i32, expression: &str, source: &str, target: &str, login: &str, password: &str) -> Box<Future<Item = ::models::ComDayCqPollingImporterImplManagedPollConfigImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("id".to_string(), id.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("reference".to_string(), reference.to_string())
            .with_query_param("interval".to_string(), interval.to_string())
            .with_query_param("expression".to_string(), expression.to_string())
            .with_query_param("source".to_string(), source.to_string())
            .with_query_param("target".to_string(), target.to_string())
            .with_query_param("login".to_string(), login.to_string())
            .with_query_param("password".to_string(), password.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_polling_importer_impl_managed_polling_importer_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, importer_user: &str) -> Box<Future<Item = ::models::ComDayCqPollingImporterImplManagedPollingImporterImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("importer.user".to_string(), importer_user.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_polling_importer_impl_polling_importer_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, importer_min_interval: i32, importer_user: &str, exclude_paths: Vec<String>, include_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqPollingImporterImplPollingImporterImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("importer.min.interval".to_string(), importer_min_interval.to_string())
            .with_query_param("importer.user".to_string(), importer_user.to_string())
            .with_query_param("exclude.paths".to_string(), exclude_paths.join(",").to_string())
            .with_query_param("include.paths".to_string(), include_paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_audit_replication_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32) -> Box<Future<Item = ::models::ComDayCqReplicationAuditReplicationEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_content_static_content_builder(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, host: &str, port: i32) -> Box<Future<Item = ::models::ComDayCqReplicationContentStaticContentBuilderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("host".to_string(), host.to_string())
            .with_query_param("port".to_string(), port.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_impl_agent_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, job_topics: &str, service_user_target: &str, agent_provider_target: &str) -> Box<Future<Item = ::models::ComDayCqReplicationImplAgentManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("job.topics".to_string(), job_topics.to_string())
            .with_query_param("serviceUser.target".to_string(), service_user_target.to_string())
            .with_query_param("agentProvider.target".to_string(), agent_provider_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_impl_content_durbo_binary_less_content_builder(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, binary_threshold: i32) -> Box<Future<Item = ::models::ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("binary.threshold".to_string(), binary_threshold.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, preserve_hierarchy_nodes: bool, ignore_versioning: bool, import_acl: bool, save_threshold: i32, preserve_user_paths: bool, preserve_uuid: bool, preserve_uuid_nodetypes: Vec<String>, preserve_uuid_subtrees: Vec<String>, auto_commit: bool) -> Box<Future<Item = ::models::ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("preserve.hierarchy.nodes".to_string(), preserve_hierarchy_nodes.to_string())
            .with_query_param("ignore.versioning".to_string(), ignore_versioning.to_string())
            .with_query_param("import.acl".to_string(), import_acl.to_string())
            .with_query_param("save.threshold".to_string(), save_threshold.to_string())
            .with_query_param("preserve.user.paths".to_string(), preserve_user_paths.to_string())
            .with_query_param("preserve.uuid".to_string(), preserve_uuid.to_string())
            .with_query_param("preserve.uuid.nodetypes".to_string(), preserve_uuid_nodetypes.join(",").to_string())
            .with_query_param("preserve.uuid.subtrees".to_string(), preserve_uuid_subtrees.join(",").to_string())
            .with_query_param("auto.commit".to_string(), auto_commit.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_impl_replication_content_factory_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, replication_content_use_file_storage: bool, replication_content_max_commit_attempts: i32) -> Box<Future<Item = ::models::ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("replication.content.useFileStorage".to_string(), replication_content_use_file_storage.to_string())
            .with_query_param("replication.content.maxCommitAttempts".to_string(), replication_content_max_commit_attempts.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_impl_replication_receiver_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, receiver_tmpfile_threshold: i32, receiver_packages_use_install: bool) -> Box<Future<Item = ::models::ComDayCqReplicationImplReplicationReceiverImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("receiver.tmpfile.threshold".to_string(), receiver_tmpfile_threshold.to_string())
            .with_query_param("receiver.packages.use.install".to_string(), receiver_packages_use_install.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_impl_replicator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, distribute_events: bool) -> Box<Future<Item = ::models::ComDayCqReplicationImplReplicatorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("distribute_events".to_string(), distribute_events.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_impl_reverse_replicator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_period: i32) -> Box<Future<Item = ::models::ComDayCqReplicationImplReverseReplicatorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.period".to_string(), scheduler_period.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_impl_transport_binary_less_transport_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disabled_cipher_suites: Vec<String>, enabled_cipher_suites: Vec<String>) -> Box<Future<Item = ::models::ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("disabled.cipher.suites".to_string(), disabled_cipher_suites.join(",").to_string())
            .with_query_param("enabled.cipher.suites".to_string(), enabled_cipher_suites.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_replication_impl_transport_http(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disabled_cipher_suites: Vec<String>, enabled_cipher_suites: Vec<String>) -> Box<Future<Item = ::models::ComDayCqReplicationImplTransportHttpInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.replication.impl.transport.Http".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("disabled.cipher.suites".to_string(), disabled_cipher_suites.join(",").to_string())
            .with_query_param("enabled.cipher.suites".to_string(), enabled_cipher_suites.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_reporting_impl_cache_cache_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, repcache_enable: bool, repcache_ttl: i32, repcache_max: i32) -> Box<Future<Item = ::models::ComDayCqReportingImplCacheCacheImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("repcache.enable".to_string(), repcache_enable.to_string())
            .with_query_param("repcache.ttl".to_string(), repcache_ttl.to_string())
            .with_query_param("repcache.max".to_string(), repcache_max.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_reporting_impl_config_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, repconf_timezone: &str, repconf_locale: &str, repconf_snapshots: &str, repconf_repdir: &str, repconf_hourofday: i32, repconf_minofhour: i32, repconf_maxrows: i32, repconf_fakedata: bool, repconf_snapshotuser: &str, repconf_enforcesnapshotuser: bool) -> Box<Future<Item = ::models::ComDayCqReportingImplConfigServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("repconf.timezone".to_string(), repconf_timezone.to_string())
            .with_query_param("repconf.locale".to_string(), repconf_locale.to_string())
            .with_query_param("repconf.snapshots".to_string(), repconf_snapshots.to_string())
            .with_query_param("repconf.repdir".to_string(), repconf_repdir.to_string())
            .with_query_param("repconf.hourofday".to_string(), repconf_hourofday.to_string())
            .with_query_param("repconf.minofhour".to_string(), repconf_minofhour.to_string())
            .with_query_param("repconf.maxrows".to_string(), repconf_maxrows.to_string())
            .with_query_param("repconf.fakedata".to_string(), repconf_fakedata.to_string())
            .with_query_param("repconf.snapshotuser".to_string(), repconf_snapshotuser.to_string())
            .with_query_param("repconf.enforcesnapshotuser".to_string(), repconf_enforcesnapshotuser.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_reporting_impl_r_log_analyzer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, request_log_output: &str) -> Box<Future<Item = ::models::ComDayCqReportingImplRLogAnalyzerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("request.log.output".to_string(), request_log_output.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_rewriter_linkchecker_impl_link_checker_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_period: i32, scheduler_concurrent: bool, service_bad_link_tolerance_interval: i32, service_check_override_patterns: Vec<String>, service_cache_broken_internal_links: bool, service_special_link_prefix: Vec<String>, service_special_link_patterns: Vec<String>) -> Box<Future<Item = ::models::ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.period".to_string(), scheduler_period.to_string())
            .with_query_param("scheduler.concurrent".to_string(), scheduler_concurrent.to_string())
            .with_query_param("service.bad_link_tolerance_interval".to_string(), service_bad_link_tolerance_interval.to_string())
            .with_query_param("service.check_override_patterns".to_string(), service_check_override_patterns.join(",").to_string())
            .with_query_param("service.cache_broken_internal_links".to_string(), service_cache_broken_internal_links.to_string())
            .with_query_param("service.special_link_prefix".to_string(), service_special_link_prefix.join(",").to_string())
            .with_query_param("service.special_link_patterns".to_string(), service_special_link_patterns.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_rewriter_linkchecker_impl_link_checker_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_period: i32, scheduler_concurrent: bool, good_link_test_interval: i32, bad_link_test_interval: i32, link_unused_interval: i32, connection_timeout: i32) -> Box<Future<Item = ::models::ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.period".to_string(), scheduler_period.to_string())
            .with_query_param("scheduler.concurrent".to_string(), scheduler_concurrent.to_string())
            .with_query_param("good_link_test_interval".to_string(), good_link_test_interval.to_string())
            .with_query_param("bad_link_test_interval".to_string(), bad_link_test_interval.to_string())
            .with_query_param("link_unused_interval".to_string(), link_unused_interval.to_string())
            .with_query_param("connection.timeout".to_string(), connection_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, linkcheckertransformer_disable_rewriting: bool, linkcheckertransformer_disable_checking: bool, linkcheckertransformer_map_cache_size: i32, linkcheckertransformer_strict_extension_check: bool, linkcheckertransformer_strip_htmlt_extension: bool, linkcheckertransformer_rewrite_elements: Vec<String>, linkcheckertransformer_strip_extension_path_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("linkcheckertransformer.disableRewriting".to_string(), linkcheckertransformer_disable_rewriting.to_string())
            .with_query_param("linkcheckertransformer.disableChecking".to_string(), linkcheckertransformer_disable_checking.to_string())
            .with_query_param("linkcheckertransformer.mapCacheSize".to_string(), linkcheckertransformer_map_cache_size.to_string())
            .with_query_param("linkcheckertransformer.strictExtensionCheck".to_string(), linkcheckertransformer_strict_extension_check.to_string())
            .with_query_param("linkcheckertransformer.stripHtmltExtension".to_string(), linkcheckertransformer_strip_htmlt_extension.to_string())
            .with_query_param("linkcheckertransformer.rewriteElements".to_string(), linkcheckertransformer_rewrite_elements.join(",").to_string())
            .with_query_param("linkcheckertransformer.stripExtensionPathBlacklist".to_string(), linkcheckertransformer_strip_extension_path_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_max_links_per_host: i32, service_save_external_link_references: bool) -> Box<Future<Item = ::models::ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.max_links_per_host".to_string(), service_max_links_per_host.to_string())
            .with_query_param("service.save_external_link_references".to_string(), service_save_external_link_references.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_rewriter_processor_impl_html_parser_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, htmlparser_process_tags: Vec<String>, htmlparser_preserve_camel_case: bool) -> Box<Future<Item = ::models::ComDayCqRewriterProcessorImplHtmlParserFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("htmlparser.processTags".to_string(), htmlparser_process_tags.join(",").to_string())
            .with_query_param("htmlparser.preserveCamelCase".to_string(), htmlparser_preserve_camel_case.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_search_impl_builder_query_builder_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, excerpt_properties: Vec<String>, cache_max_entries: i32, cache_entry_lifetime: i32, xpath_union: bool) -> Box<Future<Item = ::models::ComDayCqSearchImplBuilderQueryBuilderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("excerpt.properties".to_string(), excerpt_properties.join(",").to_string())
            .with_query_param("cache.max.entries".to_string(), cache_max_entries.to_string())
            .with_query_param("cache.entry.lifetime".to_string(), cache_entry_lifetime.to_string())
            .with_query_param("xpath.union".to_string(), xpath_union.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_search_suggest_impl_suggestion_index_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path_builder_target: &str, suggest_basepath: &str) -> Box<Future<Item = ::models::ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("pathBuilder.target".to_string(), path_builder_target.to_string())
            .with_query_param("suggest.basepath".to_string(), suggest_basepath.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_searchpromote_impl_publish_search_promote_config_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_searchpromote_confighandler_enabled: bool) -> Box<Future<Item = ::models::ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.searchpromote.confighandler.enabled".to_string(), cq_searchpromote_confighandler_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_searchpromote_impl_search_promote_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_searchpromote_configuration_server_uri: &str, cq_searchpromote_configuration_environment: &str, connection_timeout: i32, socket_timeout: i32) -> Box<Future<Item = ::models::ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.searchpromote.configuration.server.uri".to_string(), cq_searchpromote_configuration_server_uri.to_string())
            .with_query_param("cq.searchpromote.configuration.environment".to_string(), cq_searchpromote_configuration_environment.to_string())
            .with_query_param("connection.timeout".to_string(), connection_timeout.to_string())
            .with_query_param("socket.timeout".to_string(), socket_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_security_acl_setup(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_aclsetup_rules: Vec<String>) -> Box<Future<Item = ::models::ComDayCqSecurityAclSetupInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.security.ACLSetup".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.aclsetup.rules".to_string(), cq_aclsetup_rules.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_statistics_impl_statistics_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_period: i32, scheduler_concurrent: bool, path: &str, workspace: &str, keywords_path: &str, async_entries: bool) -> Box<Future<Item = ::models::ComDayCqStatisticsImplStatisticsServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.period".to_string(), scheduler_period.to_string())
            .with_query_param("scheduler.concurrent".to_string(), scheduler_concurrent.to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("workspace".to_string(), workspace.to_string())
            .with_query_param("keywordsPath".to_string(), keywords_path.to_string())
            .with_query_param("asyncEntries".to_string(), async_entries.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, validation_enabled: bool) -> Box<Future<Item = ::models::ComDayCqTaggingImplJcrTagManagerFactoryImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("validation.enabled".to_string(), validation_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_tagging_impl_search_tag_predicate_evaluator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ignore_path: bool) -> Box<Future<Item = ::models::ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("ignore_path".to_string(), ignore_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_tagging_impl_tag_garbage_collector(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str) -> Box<Future<Item = ::models::ComDayCqTaggingImplTagGarbageCollectorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_pagesupdatehandler_imageresourcetypes: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.pagesupdatehandler.imageresourcetypes".to_string(), cq_pagesupdatehandler_imageresourcetypes.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_contentsync_pathrewritertransformer_mapping_links: Vec<String>, cq_contentsync_pathrewritertransformer_mapping_clientlibs: Vec<String>, cq_contentsync_pathrewritertransformer_mapping_images: Vec<String>, cq_contentsync_pathrewritertransformer_attribute_pattern: &str, cq_contentsync_pathrewritertransformer_clientlibrary_pattern: &str, cq_contentsync_pathrewritertransformer_clientlibrary_replace: &str) -> Box<Future<Item = ::models::ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.contentsync.pathrewritertransformer.mapping.links".to_string(), cq_contentsync_pathrewritertransformer_mapping_links.join(",").to_string())
            .with_query_param("cq.contentsync.pathrewritertransformer.mapping.clientlibs".to_string(), cq_contentsync_pathrewritertransformer_mapping_clientlibs.join(",").to_string())
            .with_query_param("cq.contentsync.pathrewritertransformer.mapping.images".to_string(), cq_contentsync_pathrewritertransformer_mapping_images.join(",").to_string())
            .with_query_param("cq.contentsync.pathrewritertransformer.attribute.pattern".to_string(), cq_contentsync_pathrewritertransformer_attribute_pattern.to_string())
            .with_query_param("cq.contentsync.pathrewritertransformer.clientlibrary.pattern".to_string(), cq_contentsync_pathrewritertransformer_clientlibrary_pattern.to_string())
            .with_query_param("cq.contentsync.pathrewritertransformer.clientlibrary.replace".to_string(), cq_contentsync_pathrewritertransformer_clientlibrary_replace.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, authoring_ui_mode_service_default: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplAuthoringUiModeServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("authoringUIModeService.default".to_string(), authoring_ui_mode_service_default.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_commands_wcm_command_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, wcmcommandservlet_delete_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplCommandsWcmCommandServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("wcmcommandservlet.delete_whitelist".to_string(), wcmcommandservlet_delete_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dim_default_mode: &str, dim_appcache_enabled: bool) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("dim.default.mode".to_string(), dim_default_mode.to_string())
            .with_query_param("dim.appcache.enabled".to_string(), dim_appcache_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_event_page_event_audit_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, configured: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplEventPageEventAuditListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("configured".to_string(), configured.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_event_page_post_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplEventPagePostProcessorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("paths".to_string(), paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_event_repository_change_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, paths: Vec<String>, excluded_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("paths".to_string(), paths.join(",").to_string())
            .with_query_param("excludedPaths".to_string(), excluded_paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_event_template_post_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, paths: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplEventTemplatePostProcessorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("paths".to_string(), paths.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_language_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, langmgr_list_path: &str, langmgr_country_default: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplLanguageManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("langmgr.list.path".to_string(), langmgr_list_path.to_string())
            .with_query_param("langmgr.country.default".to_string(), langmgr_country_default.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, link_expired_prefix: &str, link_expired_remove: bool, link_expired_suffix: &str, link_invalid_prefix: &str, link_invalid_remove: bool, link_invalid_suffix: &str, link_predated_prefix: &str, link_predated_remove: bool, link_predated_suffix: &str, link_wcmmodes: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("link.expired.prefix".to_string(), link_expired_prefix.to_string())
            .with_query_param("link.expired.remove".to_string(), link_expired_remove.to_string())
            .with_query_param("link.expired.suffix".to_string(), link_expired_suffix.to_string())
            .with_query_param("link.invalid.prefix".to_string(), link_invalid_prefix.to_string())
            .with_query_param("link.invalid.remove".to_string(), link_invalid_remove.to_string())
            .with_query_param("link.invalid.suffix".to_string(), link_invalid_suffix.to_string())
            .with_query_param("link.predated.prefix".to_string(), link_predated_prefix.to_string())
            .with_query_param("link.predated.remove".to_string(), link_predated_remove.to_string())
            .with_query_param("link.predated.suffix".to_string(), link_predated_suffix.to_string())
            .with_query_param("link.wcmmodes".to_string(), link_wcmmodes.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, page_info_provider_property_regex_default: &str, page_info_provider_property_name: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("page.info.provider.property.regex.default".to_string(), page_info_provider_property_regex_default.to_string())
            .with_query_param("page.info.provider.property.name".to_string(), page_info_provider_property_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_page_page_manager_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, illegal_char_mapping: &str, page_sub_tree_activation_check: bool) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("illegalCharMapping".to_string(), illegal_char_mapping.to_string())
            .with_query_param("pageSubTreeActivationCheck".to_string(), page_sub_tree_activation_check.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_references_content_content_reference_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, content_reference_config_resource_types: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("contentReferenceConfig.resourceTypes".to_string(), content_reference_config_resource_types.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dam_showexpired: bool, dam_showhidden: bool, tag_title_search: bool, guess_total: &str, dam_expiry_property: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("dam.showexpired".to_string(), dam_showexpired.to_string())
            .with_query_param("dam.showhidden".to_string(), dam_showhidden.to_string())
            .with_query_param("tagTitleSearch".to_string(), tag_title_search.to_string())
            .with_query_param("guessTotal".to_string(), guess_total.to_string())
            .with_query_param("dam.expiryProperty".to_string(), dam_expiry_property.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, item_resource_types: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("item.resource.types".to_string(), item_resource_types.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, guess_total: &str, tag_title_search: bool) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("guessTotal".to_string(), guess_total.to_string())
            .with_query_param("tagTitleSearch".to_string(), tag_title_search.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_servlets_find_replace_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scope: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsFindReplaceServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scope".to_string(), scope.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_servlets_reference_search_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, referencesearchservlet_max_references_per_page: i32, referencesearchservlet_max_pages: i32) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsReferenceSearchServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("referencesearchservlet.maxReferencesPerPage".to_string(), referencesearchservlet_max_references_per_page.to_string())
            .with_query_param("referencesearchservlet.maxPages".to_string(), referencesearchservlet_max_pages.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, workspace: &str, dimensions: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplServletsThumbnailServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("workspace".to_string(), workspace.to_string())
            .with_query_param("dimensions".to_string(), dimensions.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_utils_default_page_name_validator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, non_valid_chars: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("nonValidChars".to_string(), non_valid_chars.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_externalizer_domain: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("default.externalizer.domain".to_string(), default_externalizer_domain.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_version_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, versionmanager_create_version_on_activation: bool, versionmanager_purging_enabled: bool, versionmanager_purge_paths: Vec<String>, versionmanager_iv_paths: Vec<String>, versionmanager_max_age_days: i32, versionmanager_max_number_versions: i32, versionmanager_min_number_versions: i32) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplVersionManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("versionmanager.createVersionOnActivation".to_string(), versionmanager_create_version_on_activation.to_string())
            .with_query_param("versionmanager.purgingEnabled".to_string(), versionmanager_purging_enabled.to_string())
            .with_query_param("versionmanager.purgePaths".to_string(), versionmanager_purge_paths.join(",").to_string())
            .with_query_param("versionmanager.ivPaths".to_string(), versionmanager_iv_paths.join(",").to_string())
            .with_query_param("versionmanager.maxAgeDays".to_string(), versionmanager_max_age_days.to_string())
            .with_query_param("versionmanager.maxNumberVersions".to_string(), versionmanager_max_number_versions.to_string())
            .with_query_param("versionmanager.minNumberVersions".to_string(), versionmanager_min_number_versions.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_version_purge_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, versionpurge_paths: Vec<String>, versionpurge_recursive: bool, versionpurge_max_versions: i32, versionpurge_min_versions: i32, versionpurge_max_age_days: i32) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplVersionPurgeTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("versionpurge.paths".to_string(), versionpurge_paths.join(",").to_string())
            .with_query_param("versionpurge.recursive".to_string(), versionpurge_recursive.to_string())
            .with_query_param("versionpurge.maxVersions".to_string(), versionpurge_max_versions.to_string())
            .with_query_param("versionpurge.minVersions".to_string(), versionpurge_min_versions.to_string())
            .with_query_param("versionpurge.maxAgeDays".to_string(), versionpurge_max_age_days.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_warp_time_warp_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, filter_order: &str, filter_scope: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplWarpTimeWarpFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("filter.order".to_string(), filter_order.to_string())
            .with_query_param("filter.scope".to_string(), filter_scope.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_wcm_debug_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, wcmdbgfilter_enabled: bool, wcmdbgfilter_jsp_debug: bool) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplWcmDebugFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("wcmdbgfilter.enabled".to_string(), wcmdbgfilter_enabled.to_string())
            .with_query_param("wcmdbgfilter.jspDebug".to_string(), wcmdbgfilter_jsp_debug.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_impl_wcm_developer_mode_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, wcmdevmodefilter_enabled: bool) -> Box<Future<Item = ::models::ComDayCqWcmCoreImplWcmDeveloperModeFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("wcmdevmodefilter.enabled".to_string(), wcmdevmodefilter_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_mvt_mvt_statistics_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mvtstatistics_trackingurl: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreMvtMvtStatisticsImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("mvtstatistics.trackingurl".to_string(), mvtstatistics_trackingurl.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_stats_page_view_statistics_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pageviewstatistics_trackingurl: &str, pageviewstatistics_trackingscript_enabled: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreStatsPageViewStatisticsImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("pageviewstatistics.trackingurl".to_string(), pageviewstatistics_trackingurl.to_string())
            .with_query_param("pageviewstatistics.trackingscript.enabled".to_string(), pageviewstatistics_trackingscript_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_core_wcm_request_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, wcmfilter_mode: &str) -> Box<Future<Item = ::models::ComDayCqWcmCoreWcmRequestFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("wcmfilter.mode".to_string(), wcmfilter_mode.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_design_package_importer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, extract_filter: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterDesignPackageImporterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("extract.filter".to_string(), extract_filter.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_impl_canvas_builder_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, filepattern: &str, build_page_nodes: bool, build_client_libs: bool, build_canvas_component: bool) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("filepattern".to_string(), filepattern.to_string())
            .with_query_param("build.page.nodes".to_string(), build_page_nodes.to_string())
            .with_query_param("build.client.libs".to_string(), build_client_libs.to_string())
            .with_query_param("build.canvas.component".to_string(), build_canvas_component.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, min_thread_pool_size: i32, max_thread_pool_size: i32) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("minThreadPoolSize".to_string(), min_thread_pool_size.to_string())
            .with_query_param("maxThreadPoolSize".to_string(), max_thread_pool_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, search_pattern: &str, replace_pattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("search.pattern".to_string(), search_pattern.to_string())
            .with_query_param("replace.pattern".to_string(), replace_pattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, filepattern: &str, device_groups: Vec<String>, build_page_nodes: bool, build_client_libs: bool, build_canvas_component: bool) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("filepattern".to_string(), filepattern.to_string())
            .with_query_param("device.groups".to_string(), device_groups.join(",").to_string())
            .with_query_param("build.page.nodes".to_string(), build_page_nodes.to_string())
            .with_query_param("build.client.libs".to_string(), build_client_libs.to_string())
            .with_query_param("build.canvas.component".to_string(), build_canvas_component.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .with_query_param("component.resourceType".to_string(), component_resource_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .with_query_param("component.resourceType".to_string(), component_resource_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .with_query_param("component.resourceType".to_string(), component_resource_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str, component_resource_type: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .with_query_param("component.resourceType".to_string(), component_resource_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, tagpattern: &str) -> Box<Future<Item = ::models::ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("tagpattern".to_string(), tagpattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_name: &str, sling_servlet_resource_types: &str, sling_servlet_selectors: &str, sling_servlet_methods: Vec<String>, forms_formchooserservlet_advansesearch_require: bool) -> Box<Future<Item = ::models::ComDayCqWcmFoundationFormsImplFormChooserServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.name".to_string(), service_name.to_string())
            .with_query_param("sling.servlet.resourceTypes".to_string(), sling_servlet_resource_types.to_string())
            .with_query_param("sling.servlet.selectors".to_string(), sling_servlet_selectors.to_string())
            .with_query_param("sling.servlet.methods".to_string(), sling_servlet_methods.join(",").to_string())
            .with_query_param("forms.formchooserservlet.advansesearch.require".to_string(), forms_formchooserservlet_advansesearch_require.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, forms_formparagraphpostprocessor_enabled: bool, forms_formparagraphpostprocessor_formresourcetypes: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("forms.formparagraphpostprocessor.enabled".to_string(), forms_formparagraphpostprocessor_enabled.to_string())
            .with_query_param("forms.formparagraphpostprocessor.formresourcetypes".to_string(), forms_formparagraphpostprocessor_formresourcetypes.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name_whitelist: &str, allow_expressions: bool) -> Box<Future<Item = ::models::ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name.whitelist".to_string(), name_whitelist.to_string())
            .with_query_param("allow.expressions".to_string(), allow_expressions.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_foundation_forms_impl_mail_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_resource_types: &str, sling_servlet_selectors: &str, resource_whitelist: Vec<String>, resource_blacklist: &str) -> Box<Future<Item = ::models::ComDayCqWcmFoundationFormsImplMailServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.resourceTypes".to_string(), sling_servlet_resource_types.to_string())
            .with_query_param("sling.servlet.selectors".to_string(), sling_servlet_selectors.to_string())
            .with_query_param("resource.whitelist".to_string(), resource_whitelist.join(",").to_string())
            .with_query_param("resource.blacklist".to_string(), resource_blacklist.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, adapt_supported_widths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("adapt.supported.widths".to_string(), adapt_supported_widths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_foundation_impl_http_auth_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, auth_http_nologin: bool, auth_http_realm: &str, auth_default_loginpage: &str, auth_cred_form: Vec<String>, auth_cred_utf8: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationImplHttpAuthHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("auth.http.nologin".to_string(), auth_http_nologin.to_string())
            .with_query_param("auth.http.realm".to_string(), auth_http_realm.to_string())
            .with_query_param("auth.default.loginpage".to_string(), auth_default_loginpage.to_string())
            .with_query_param("auth.cred.form".to_string(), auth_cred_form.join(",").to_string())
            .with_query_param("auth.cred.utf8".to_string(), auth_cred_utf8.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_foundation_impl_page_impressions_tracker(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_auth_requirements: &str) -> Box<Future<Item = ::models::ComDayCqWcmFoundationImplPageImpressionsTrackerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.auth.requirements".to_string(), sling_auth_requirements.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_foundation_impl_page_redirect_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, excluded_resource_types: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationImplPageRedirectServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("excluded.resource.types".to_string(), excluded_resource_types.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, default_attachment_type_blacklist: Vec<String>, baseline_attachment_type_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("default.attachment.type.blacklist".to_string(), default_attachment_type_blacklist.join(",").to_string())
            .with_query_param("baseline.attachment.type.blacklist".to_string(), baseline_attachment_type_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, parameter_whitelist: Vec<String>, parameter_whitelist_prefixes: Vec<String>, binary_parameter_whitelist: Vec<String>, modifier_whitelist: Vec<String>, operation_whitelist: Vec<String>, operation_whitelist_prefixes: Vec<String>, typehint_whitelist: Vec<String>, resourcetype_whitelist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("parameter.whitelist".to_string(), parameter_whitelist.join(",").to_string())
            .with_query_param("parameter.whitelist.prefixes".to_string(), parameter_whitelist_prefixes.join(",").to_string())
            .with_query_param("binary.parameter.whitelist".to_string(), binary_parameter_whitelist.join(",").to_string())
            .with_query_param("modifier.whitelist".to_string(), modifier_whitelist.join(",").to_string())
            .with_query_param("operation.whitelist".to_string(), operation_whitelist.join(",").to_string())
            .with_query_param("operation.whitelist.prefixes".to_string(), operation_whitelist_prefixes.join(",").to_string())
            .with_query_param("typehint.whitelist".to_string(), typehint_whitelist.join(",").to_string())
            .with_query_param("resourcetype.whitelist".to_string(), resourcetype_whitelist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, device_info_transformer_enabled: bool, device_info_transformer_css_style: &str) -> Box<Future<Item = ::models::ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("device.info.transformer.enabled".to_string(), device_info_transformer_enabled.to_string())
            .with_query_param("device.info.transformer.css.style".to_string(), device_info_transformer_css_style.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, redirect_enabled: bool, redirect_stats_enabled: bool, redirect_extensions: Vec<String>, redirect_paths: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("redirect.enabled".to_string(), redirect_enabled.to_string())
            .with_query_param("redirect.stats.enabled".to_string(), redirect_stats_enabled.to_string())
            .with_query_param("redirect.extensions".to_string(), redirect_extensions.join(",").to_string())
            .with_query_param("redirect.paths".to_string(), redirect_paths.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>, contentcopyaction_order_style: &str) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludednodetypes".to_string(), cq_wcm_msm_action_excludednodetypes.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedparagraphitems".to_string(), cq_wcm_msm_action_excludedparagraphitems.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedprops".to_string(), cq_wcm_msm_action_excludedprops.join(",").to_string())
            .with_query_param("contentcopyaction.order.style".to_string(), contentcopyaction_order_style.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludednodetypes".to_string(), cq_wcm_msm_action_excludednodetypes.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedparagraphitems".to_string(), cq_wcm_msm_action_excludedparagraphitems.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedprops".to_string(), cq_wcm_msm_action_excludedprops.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_msm_impl_actions_content_update_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>, cq_wcm_msm_action_ignored_mixin: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludednodetypes".to_string(), cq_wcm_msm_action_excludednodetypes.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedparagraphitems".to_string(), cq_wcm_msm_action_excludedparagraphitems.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedprops".to_string(), cq_wcm_msm_action_excludedprops.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.ignoredMixin".to_string(), cq_wcm_msm_action_ignored_mixin.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_msm_impl_actions_order_children_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludednodetypes".to_string(), cq_wcm_msm_action_excludednodetypes.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedparagraphitems".to_string(), cq_wcm_msm_action_excludedparagraphitems.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedprops".to_string(), cq_wcm_msm_action_excludedprops.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_msm_impl_actions_page_move_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>, cq_wcm_msm_impl_actions_pagemove_prop_reference_update: bool) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludednodetypes".to_string(), cq_wcm_msm_action_excludednodetypes.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedparagraphitems".to_string(), cq_wcm_msm_action_excludedparagraphitems.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedprops".to_string(), cq_wcm_msm_action_excludedprops.join(",").to_string())
            .with_query_param("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate".to_string(), cq_wcm_msm_impl_actions_pagemove_prop_reference_update.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_msm_impl_actions_references_update_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>, cq_wcm_msm_impl_action_referencesupdate_prop_update_nested: bool) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludednodetypes".to_string(), cq_wcm_msm_action_excludednodetypes.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedparagraphitems".to_string(), cq_wcm_msm_action_excludedparagraphitems.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedprops".to_string(), cq_wcm_msm_action_excludedprops.join(",").to_string())
            .with_query_param("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested".to_string(), cq_wcm_msm_impl_action_referencesupdate_prop_update_nested.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_msm_action_excludednodetypes: Vec<String>, cq_wcm_msm_action_excludedparagraphitems: Vec<String>, cq_wcm_msm_action_excludedprops: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludednodetypes".to_string(), cq_wcm_msm_action_excludednodetypes.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedparagraphitems".to_string(), cq_wcm_msm_action_excludedparagraphitems.join(",").to_string())
            .with_query_param("cq.wcm.msm.action.excludedprops".to_string(), cq_wcm_msm_action_excludedprops.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_msm_impl_live_relationship_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, liverelationshipmgr_relationsconfig_default: &str) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("liverelationshipmgr.relationsconfig.default".to_string(), liverelationshipmgr_relationsconfig_default.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_msm_impl_rollout_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, rolloutmgr_excludedprops_default: Vec<String>, rolloutmgr_excludedparagraphprops_default: Vec<String>, rolloutmgr_excludednodetypes_default: Vec<String>, rolloutmgr_threadpool_maxsize: i32, rolloutmgr_threadpool_maxshutdowntime: i32, rolloutmgr_threadpool_priority: &str, rolloutmgr_commit_size: i32, rolloutmgr_conflicthandling_enabled: bool) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplRolloutManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .with_query_param("rolloutmgr.excludedprops.default".to_string(), rolloutmgr_excludedprops_default.join(",").to_string())
            .with_query_param("rolloutmgr.excludedparagraphprops.default".to_string(), rolloutmgr_excludedparagraphprops_default.join(",").to_string())
            .with_query_param("rolloutmgr.excludednodetypes.default".to_string(), rolloutmgr_excludednodetypes_default.join(",").to_string())
            .with_query_param("rolloutmgr.threadpool.maxsize".to_string(), rolloutmgr_threadpool_maxsize.to_string())
            .with_query_param("rolloutmgr.threadpool.maxshutdowntime".to_string(), rolloutmgr_threadpool_maxshutdowntime.to_string())
            .with_query_param("rolloutmgr.threadpool.priority".to_string(), rolloutmgr_threadpool_priority.to_string())
            .with_query_param("rolloutmgr.commit.size".to_string(), rolloutmgr_commit_size.to_string())
            .with_query_param("rolloutmgr.conflicthandling.enabled".to_string(), rolloutmgr_conflicthandling_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, auditlogservlet_default_events_count: i32, auditlogservlet_default_path: &str) -> Box<Future<Item = ::models::ComDayCqWcmMsmImplServletsAuditLogServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("auditlogservlet.default.events.count".to_string(), auditlogservlet_default_events_count.to_string())
            .with_query_param("auditlogservlet.default.path".to_string(), auditlogservlet_default_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_notification_email_impl_email_channel(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, email_from: &str) -> Box<Future<Item = ::models::ComDayCqWcmNotificationEmailImplEmailChannelInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("email.from".to_string(), email_from.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_notification_impl_notification_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_topics: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmNotificationImplNotificationManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.topics".to_string(), event_topics.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_scripting_impl_bvp_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, com_day_cq_wcm_scripting_bvp_script_engines: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmScriptingImplBvpManagerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("com.day.cq.wcm.scripting.bvp.script.engines".to_string(), com_day_cq_wcm_scripting_bvp_script_engines.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_undo_undo_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cq_wcm_undo_enabled: bool, cq_wcm_undo_path: &str, cq_wcm_undo_validity: i32, cq_wcm_undo_steps: i32, cq_wcm_undo_persistence: &str, cq_wcm_undo_persistence_mode: bool, cq_wcm_undo_markermode: &str, cq_wcm_undo_whitelist: Vec<String>, cq_wcm_undo_blacklist: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmUndoUndoConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cq.wcm.undo.enabled".to_string(), cq_wcm_undo_enabled.to_string())
            .with_query_param("cq.wcm.undo.path".to_string(), cq_wcm_undo_path.to_string())
            .with_query_param("cq.wcm.undo.validity".to_string(), cq_wcm_undo_validity.to_string())
            .with_query_param("cq.wcm.undo.steps".to_string(), cq_wcm_undo_steps.to_string())
            .with_query_param("cq.wcm.undo.persistence".to_string(), cq_wcm_undo_persistence.to_string())
            .with_query_param("cq.wcm.undo.persistence.mode".to_string(), cq_wcm_undo_persistence_mode.to_string())
            .with_query_param("cq.wcm.undo.markermode".to_string(), cq_wcm_undo_markermode.to_string())
            .with_query_param("cq.wcm.undo.whitelist".to_string(), cq_wcm_undo_whitelist.join(",").to_string())
            .with_query_param("cq.wcm.undo.blacklist".to_string(), cq_wcm_undo_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_webservicesupport_impl_replication_event_listener(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, flush_agents: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("Flush agents".to_string(), flush_agents.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, event_filter: &str, min_thread_pool_size: i32, max_thread_pool_size: i32, cq_wcm_workflow_terminate_on_activate: bool, cq_wcm_worklfow_terminate_exclusion_list: Vec<String>) -> Box<Future<Item = ::models::ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("event.filter".to_string(), event_filter.to_string())
            .with_query_param("minThreadPoolSize".to_string(), min_thread_pool_size.to_string())
            .with_query_param("maxThreadPoolSize".to_string(), max_thread_pool_size.to_string())
            .with_query_param("cq.wcm.workflow.terminate.on.activate".to_string(), cq_wcm_workflow_terminate_on_activate.to_string())
            .with_query_param("cq.wcm.worklfow.terminate.exclusion.list".to_string(), cq_wcm_worklfow_terminate_exclusion_list.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_wcm_workflow_impl_workflow_package_info_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, workflowpackageinfoprovider_filter: Vec<String>, workflowpackageinfoprovider_filter_rootpath: &str) -> Box<Future<Item = ::models::ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("workflowpackageinfoprovider.filter".to_string(), workflowpackageinfoprovider_filter.join(",").to_string())
            .with_query_param("workflowpackageinfoprovider.filter.rootpath".to_string(), workflowpackageinfoprovider_filter_rootpath.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_widget_impl_html_library_manager_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, htmllibmanager_clientmanager: &str, htmllibmanager_debug: bool, htmllibmanager_debug_console: bool, htmllibmanager_debug_init_js: &str, htmllibmanager_defaultthemename: &str, htmllibmanager_defaultuserthemename: &str, htmllibmanager_firebuglite_path: &str, htmllibmanager_force_cq_url_info: bool, htmllibmanager_gzip: bool, htmllibmanager_maxage: i32, htmllibmanager_max_data_uri_size: i32, htmllibmanager_minify: bool, htmllibmanager_path_list: Vec<String>, htmllibmanager_timing: bool) -> Box<Future<Item = ::models::ComDayCqWidgetImplHtmlLibraryManagerImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("htmllibmanager.clientmanager".to_string(), htmllibmanager_clientmanager.to_string())
            .with_query_param("htmllibmanager.debug".to_string(), htmllibmanager_debug.to_string())
            .with_query_param("htmllibmanager.debug.console".to_string(), htmllibmanager_debug_console.to_string())
            .with_query_param("htmllibmanager.debug.init.js".to_string(), htmllibmanager_debug_init_js.to_string())
            .with_query_param("htmllibmanager.defaultthemename".to_string(), htmllibmanager_defaultthemename.to_string())
            .with_query_param("htmllibmanager.defaultuserthemename".to_string(), htmllibmanager_defaultuserthemename.to_string())
            .with_query_param("htmllibmanager.firebuglite.path".to_string(), htmllibmanager_firebuglite_path.to_string())
            .with_query_param("htmllibmanager.forceCQUrlInfo".to_string(), htmllibmanager_force_cq_url_info.to_string())
            .with_query_param("htmllibmanager.gzip".to_string(), htmllibmanager_gzip.to_string())
            .with_query_param("htmllibmanager.maxage".to_string(), htmllibmanager_maxage.to_string())
            .with_query_param("htmllibmanager.maxDataUriSize".to_string(), htmllibmanager_max_data_uri_size.to_string())
            .with_query_param("htmllibmanager.minify".to_string(), htmllibmanager_minify.to_string())
            .with_query_param("htmllibmanager.path.list".to_string(), htmllibmanager_path_list.join(",").to_string())
            .with_query_param("htmllibmanager.timing".to_string(), htmllibmanager_timing.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_widget_impl_widget_extension_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, extendable_widgets: Vec<String>, widgetextensionprovider_debug: bool) -> Box<Future<Item = ::models::ComDayCqWidgetImplWidgetExtensionProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("extendable.widgets".to_string(), extendable_widgets.join(",").to_string())
            .with_query_param("widgetextensionprovider.debug".to_string(), widgetextensionprovider_debug.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_workflow_impl_email_e_mail_notification_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, from_address: &str, host_prefix: &str, notify_onabort: bool, notify_oncomplete: bool, notify_oncontainercomplete: bool, notify_useronly: bool) -> Box<Future<Item = ::models::ComDayCqWorkflowImplEmailEMailNotificationServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("from.address".to_string(), from_address.to_string())
            .with_query_param("host.prefix".to_string(), host_prefix.to_string())
            .with_query_param("notify.onabort".to_string(), notify_onabort.to_string())
            .with_query_param("notify.oncomplete".to_string(), notify_oncomplete.to_string())
            .with_query_param("notify.oncontainercomplete".to_string(), notify_oncontainercomplete.to_string())
            .with_query_param("notify.useronly".to_string(), notify_useronly.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_cq_workflow_impl_email_task_e_mail_notification_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, notify_onupdate: bool, notify_oncomplete: bool) -> Box<Future<Item = ::models::ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("notify.onupdate".to_string(), notify_onupdate.to_string())
            .with_query_param("notify.oncomplete".to_string(), notify_oncomplete.to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_crx_security_token_impl_impl_token_authentication_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, token_required_attr: &str, token_alternate_url: &str, token_encapsulated: bool, skip_token_refresh: Vec<String>) -> Box<Future<Item = ::models::ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("token.required.attr".to_string(), token_required_attr.to_string())
            .with_query_param("token.alternate.url".to_string(), token_alternate_url.to_string())
            .with_query_param("token.encapsulated".to_string(), token_encapsulated.to_string())
            .with_query_param("skip.token.refresh".to_string(), skip_token_refresh.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn com_day_crx_security_token_impl_token_cleanup_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enable_token_cleanup_task: bool, scheduler_expression: &str, batch_size: i32) -> Box<Future<Item = ::models::ComDayCrxSecurityTokenImplTokenCleanupTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enable.token.cleanup.task".to_string(), enable_token_cleanup_task.to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .with_query_param("batch.size".to_string(), batch_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn guide_localization_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, supported_locales: Vec<String>, localizable_properties: Vec<String>) -> Box<Future<Item = ::models::GuideLocalizationServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/Guide Localization Service".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("supportedLocales".to_string(), supported_locales.join(",").to_string())
            .with_query_param("Localizable Properties".to_string(), localizable_properties.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn messaging_user_component_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, priority: i32) -> Box<Future<Item = ::models::MessagingUserComponentFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/MessagingUserComponentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_aries_jmx_framework_state_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, attribute_change_notification_enabled: bool) -> Box<Future<Item = ::models::OrgApacheAriesJmxFrameworkStateConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("attributeChangeNotificationEnabled".to_string(), attribute_change_notification_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_eventadmin_impl_event_admin(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_felix_eventadmin_thread_pool_size: i32, org_apache_felix_eventadmin_async_to_sync_thread_ratio: f32, org_apache_felix_eventadmin_timeout: i32, org_apache_felix_eventadmin_require_topic: bool, org_apache_felix_eventadmin_ignore_timeout: Vec<String>, org_apache_felix_eventadmin_ignore_topic: Vec<String>) -> Box<Future<Item = ::models::OrgApacheFelixEventadminImplEventAdminInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.felix.eventadmin.ThreadPoolSize".to_string(), org_apache_felix_eventadmin_thread_pool_size.to_string())
            .with_query_param("org.apache.felix.eventadmin.AsyncToSyncThreadRatio".to_string(), org_apache_felix_eventadmin_async_to_sync_thread_ratio.to_string())
            .with_query_param("org.apache.felix.eventadmin.Timeout".to_string(), org_apache_felix_eventadmin_timeout.to_string())
            .with_query_param("org.apache.felix.eventadmin.RequireTopic".to_string(), org_apache_felix_eventadmin_require_topic.to_string())
            .with_query_param("org.apache.felix.eventadmin.IgnoreTimeout".to_string(), org_apache_felix_eventadmin_ignore_timeout.join(",").to_string())
            .with_query_param("org.apache.felix.eventadmin.IgnoreTopic".to_string(), org_apache_felix_eventadmin_ignore_topic.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_http(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_felix_http_host: &str, org_apache_felix_http_enable: bool, org_osgi_service_http_port: i32, org_apache_felix_http_timeout: i32, org_apache_felix_https_enable: bool, org_osgi_service_http_port_secure: i32, org_apache_felix_https_keystore: &str, org_apache_felix_https_keystore_password: &str, org_apache_felix_https_keystore_key_password: &str, org_apache_felix_https_truststore: &str, org_apache_felix_https_truststore_password: &str, org_apache_felix_https_clientcertificate: &str, org_apache_felix_http_context_path: &str, org_apache_felix_http_mbeans: bool, org_apache_felix_http_session_timeout: i32, org_apache_felix_http_jetty_threadpool_max: i32, org_apache_felix_http_jetty_acceptors: i32, org_apache_felix_http_jetty_selectors: i32, org_apache_felix_http_jetty_header_buffer_size: i32, org_apache_felix_http_jetty_request_buffer_size: i32, org_apache_felix_http_jetty_response_buffer_size: i32, org_apache_felix_http_jetty_max_form_size: i32, org_apache_felix_http_path_exclusions: Vec<String>, org_apache_felix_https_jetty_ciphersuites_excluded: Vec<String>, org_apache_felix_https_jetty_ciphersuites_included: Vec<String>, org_apache_felix_http_jetty_send_server_header: bool, org_apache_felix_https_jetty_protocols_included: Vec<String>, org_apache_felix_https_jetty_protocols_excluded: Vec<String>, org_apache_felix_proxy_load_balancer_connection_enable: bool, org_apache_felix_https_jetty_renegotiate_allowed: bool, org_apache_felix_https_jetty_session_cookie_http_only: bool, org_apache_felix_https_jetty_session_cookie_secure: bool, org_eclipse_jetty_servlet_session_id_path_parameter_name: &str, org_eclipse_jetty_servlet_checking_remote_session_id_encoding: bool, org_eclipse_jetty_servlet_session_cookie: &str, org_eclipse_jetty_servlet_session_domain: &str, org_eclipse_jetty_servlet_session_path: &str, org_eclipse_jetty_servlet_max_age: i32, org_apache_felix_http_name: &str, org_apache_felix_jetty_gziphandler_enable: bool, org_apache_felix_jetty_gzip_min_gzip_size: i32, org_apache_felix_jetty_gzip_compression_level: i32, org_apache_felix_jetty_gzip_inflate_buffer_size: i32, org_apache_felix_jetty_gzip_sync_flush: bool, org_apache_felix_jetty_gzip_excluded_user_agents: Vec<String>, org_apache_felix_jetty_gzip_included_methods: Vec<String>, org_apache_felix_jetty_gzip_excluded_methods: Vec<String>, org_apache_felix_jetty_gzip_included_paths: Vec<String>, org_apache_felix_jetty_gzip_excluded_paths: Vec<String>, org_apache_felix_jetty_gzip_included_mime_types: Vec<String>, org_apache_felix_jetty_gzip_excluded_mime_types: Vec<String>, org_apache_felix_http_session_invalidate: bool, org_apache_felix_http_session_uniqueid: bool) -> Box<Future<Item = ::models::OrgApacheFelixHttpInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.http".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.felix.http.host".to_string(), org_apache_felix_http_host.to_string())
            .with_query_param("org.apache.felix.http.enable".to_string(), org_apache_felix_http_enable.to_string())
            .with_query_param("org.osgi.service.http.port".to_string(), org_osgi_service_http_port.to_string())
            .with_query_param("org.apache.felix.http.timeout".to_string(), org_apache_felix_http_timeout.to_string())
            .with_query_param("org.apache.felix.https.enable".to_string(), org_apache_felix_https_enable.to_string())
            .with_query_param("org.osgi.service.http.port.secure".to_string(), org_osgi_service_http_port_secure.to_string())
            .with_query_param("org.apache.felix.https.keystore".to_string(), org_apache_felix_https_keystore.to_string())
            .with_query_param("org.apache.felix.https.keystore.password".to_string(), org_apache_felix_https_keystore_password.to_string())
            .with_query_param("org.apache.felix.https.keystore.key.password".to_string(), org_apache_felix_https_keystore_key_password.to_string())
            .with_query_param("org.apache.felix.https.truststore".to_string(), org_apache_felix_https_truststore.to_string())
            .with_query_param("org.apache.felix.https.truststore.password".to_string(), org_apache_felix_https_truststore_password.to_string())
            .with_query_param("org.apache.felix.https.clientcertificate".to_string(), org_apache_felix_https_clientcertificate.to_string())
            .with_query_param("org.apache.felix.http.context_path".to_string(), org_apache_felix_http_context_path.to_string())
            .with_query_param("org.apache.felix.http.mbeans".to_string(), org_apache_felix_http_mbeans.to_string())
            .with_query_param("org.apache.felix.http.session.timeout".to_string(), org_apache_felix_http_session_timeout.to_string())
            .with_query_param("org.apache.felix.http.jetty.threadpool.max".to_string(), org_apache_felix_http_jetty_threadpool_max.to_string())
            .with_query_param("org.apache.felix.http.jetty.acceptors".to_string(), org_apache_felix_http_jetty_acceptors.to_string())
            .with_query_param("org.apache.felix.http.jetty.selectors".to_string(), org_apache_felix_http_jetty_selectors.to_string())
            .with_query_param("org.apache.felix.http.jetty.headerBufferSize".to_string(), org_apache_felix_http_jetty_header_buffer_size.to_string())
            .with_query_param("org.apache.felix.http.jetty.requestBufferSize".to_string(), org_apache_felix_http_jetty_request_buffer_size.to_string())
            .with_query_param("org.apache.felix.http.jetty.responseBufferSize".to_string(), org_apache_felix_http_jetty_response_buffer_size.to_string())
            .with_query_param("org.apache.felix.http.jetty.maxFormSize".to_string(), org_apache_felix_http_jetty_max_form_size.to_string())
            .with_query_param("org.apache.felix.http.path_exclusions".to_string(), org_apache_felix_http_path_exclusions.join(",").to_string())
            .with_query_param("org.apache.felix.https.jetty.ciphersuites.excluded".to_string(), org_apache_felix_https_jetty_ciphersuites_excluded.join(",").to_string())
            .with_query_param("org.apache.felix.https.jetty.ciphersuites.included".to_string(), org_apache_felix_https_jetty_ciphersuites_included.join(",").to_string())
            .with_query_param("org.apache.felix.http.jetty.sendServerHeader".to_string(), org_apache_felix_http_jetty_send_server_header.to_string())
            .with_query_param("org.apache.felix.https.jetty.protocols.included".to_string(), org_apache_felix_https_jetty_protocols_included.join(",").to_string())
            .with_query_param("org.apache.felix.https.jetty.protocols.excluded".to_string(), org_apache_felix_https_jetty_protocols_excluded.join(",").to_string())
            .with_query_param("org.apache.felix.proxy.load.balancer.connection.enable".to_string(), org_apache_felix_proxy_load_balancer_connection_enable.to_string())
            .with_query_param("org.apache.felix.https.jetty.renegotiateAllowed".to_string(), org_apache_felix_https_jetty_renegotiate_allowed.to_string())
            .with_query_param("org.apache.felix.https.jetty.session.cookie.httpOnly".to_string(), org_apache_felix_https_jetty_session_cookie_http_only.to_string())
            .with_query_param("org.apache.felix.https.jetty.session.cookie.secure".to_string(), org_apache_felix_https_jetty_session_cookie_secure.to_string())
            .with_query_param("org.eclipse.jetty.servlet.SessionIdPathParameterName".to_string(), org_eclipse_jetty_servlet_session_id_path_parameter_name.to_string())
            .with_query_param("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding".to_string(), org_eclipse_jetty_servlet_checking_remote_session_id_encoding.to_string())
            .with_query_param("org.eclipse.jetty.servlet.SessionCookie".to_string(), org_eclipse_jetty_servlet_session_cookie.to_string())
            .with_query_param("org.eclipse.jetty.servlet.SessionDomain".to_string(), org_eclipse_jetty_servlet_session_domain.to_string())
            .with_query_param("org.eclipse.jetty.servlet.SessionPath".to_string(), org_eclipse_jetty_servlet_session_path.to_string())
            .with_query_param("org.eclipse.jetty.servlet.MaxAge".to_string(), org_eclipse_jetty_servlet_max_age.to_string())
            .with_query_param("org.apache.felix.http.name".to_string(), org_apache_felix_http_name.to_string())
            .with_query_param("org.apache.felix.jetty.gziphandler.enable".to_string(), org_apache_felix_jetty_gziphandler_enable.to_string())
            .with_query_param("org.apache.felix.jetty.gzip.minGzipSize".to_string(), org_apache_felix_jetty_gzip_min_gzip_size.to_string())
            .with_query_param("org.apache.felix.jetty.gzip.compressionLevel".to_string(), org_apache_felix_jetty_gzip_compression_level.to_string())
            .with_query_param("org.apache.felix.jetty.gzip.inflateBufferSize".to_string(), org_apache_felix_jetty_gzip_inflate_buffer_size.to_string())
            .with_query_param("org.apache.felix.jetty.gzip.syncFlush".to_string(), org_apache_felix_jetty_gzip_sync_flush.to_string())
            .with_query_param("org.apache.felix.jetty.gzip.excludedUserAgents".to_string(), org_apache_felix_jetty_gzip_excluded_user_agents.join(",").to_string())
            .with_query_param("org.apache.felix.jetty.gzip.includedMethods".to_string(), org_apache_felix_jetty_gzip_included_methods.join(",").to_string())
            .with_query_param("org.apache.felix.jetty.gzip.excludedMethods".to_string(), org_apache_felix_jetty_gzip_excluded_methods.join(",").to_string())
            .with_query_param("org.apache.felix.jetty.gzip.includedPaths".to_string(), org_apache_felix_jetty_gzip_included_paths.join(",").to_string())
            .with_query_param("org.apache.felix.jetty.gzip.excludedPaths".to_string(), org_apache_felix_jetty_gzip_excluded_paths.join(",").to_string())
            .with_query_param("org.apache.felix.jetty.gzip.includedMimeTypes".to_string(), org_apache_felix_jetty_gzip_included_mime_types.join(",").to_string())
            .with_query_param("org.apache.felix.jetty.gzip.excludedMimeTypes".to_string(), org_apache_felix_jetty_gzip_excluded_mime_types.join(",").to_string())
            .with_query_param("org.apache.felix.http.session.invalidate".to_string(), org_apache_felix_http_session_invalidate.to_string())
            .with_query_param("org.apache.felix.http.session.uniqueid".to_string(), org_apache_felix_http_session_uniqueid.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_http_sslfilter_ssl_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ssl_forward_header: &str, ssl_forward_value: &str, ssl_forward_cert_header: &str, rewrite_absolute_urls: bool) -> Box<Future<Item = ::models::OrgApacheFelixHttpSslfilterSslFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("ssl-forward.header".to_string(), ssl_forward_header.to_string())
            .with_query_param("ssl-forward.value".to_string(), ssl_forward_value.to_string())
            .with_query_param("ssl-forward-cert.header".to_string(), ssl_forward_cert_header.to_string())
            .with_query_param("rewrite.absolute.urls".to_string(), rewrite_absolute_urls.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_jaas_configuration_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jaas_control_flag: &str, jaas_ranking: i32, jaas_realm_name: &str, jaas_classname: &str, jaas_options: Vec<String>) -> Box<Future<Item = ::models::OrgApacheFelixJaasConfigurationFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.jaas.Configuration.factory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("jaas.controlFlag".to_string(), jaas_control_flag.to_string())
            .with_query_param("jaas.ranking".to_string(), jaas_ranking.to_string())
            .with_query_param("jaas.realmName".to_string(), jaas_realm_name.to_string())
            .with_query_param("jaas.classname".to_string(), jaas_classname.to_string())
            .with_query_param("jaas.options".to_string(), jaas_options.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_jaas_configuration_spi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jaas_default_realm_name: &str, jaas_config_provider_name: &str, jaas_global_config_policy: &str) -> Box<Future<Item = ::models::OrgApacheFelixJaasConfigurationSpiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("jaas.defaultRealmName".to_string(), jaas_default_realm_name.to_string())
            .with_query_param("jaas.configProviderName".to_string(), jaas_config_provider_name.to_string())
            .with_query_param("jaas.globalConfigPolicy".to_string(), jaas_global_config_policy.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_scr_scr_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ds_loglevel: i32, ds_factory_enabled: bool, ds_delayed_keep_instances: bool, ds_lock_timeout_milliseconds: i32, ds_stop_timeout_milliseconds: i32, ds_global_extender: bool) -> Box<Future<Item = ::models::OrgApacheFelixScrScrServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.scr.ScrService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("ds.loglevel".to_string(), ds_loglevel.to_string())
            .with_query_param("ds.factory.enabled".to_string(), ds_factory_enabled.to_string())
            .with_query_param("ds.delayed.keepInstances".to_string(), ds_delayed_keep_instances.to_string())
            .with_query_param("ds.lock.timeout.milliseconds".to_string(), ds_lock_timeout_milliseconds.to_string())
            .with_query_param("ds.stop.timeout.milliseconds".to_string(), ds_stop_timeout_milliseconds.to_string())
            .with_query_param("ds.global.extender".to_string(), ds_global_extender.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_systemready_impl_components_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, components_list: Vec<String>, _type: &str) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadyImplComponentsCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("components.list".to_string(), components_list.join(",").to_string())
            .with_query_param("type".to_string(), _type.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_systemready_impl_framework_start_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, timeout: i32, target_start_level: i32, target_start_level_prop_name: &str, _type: &str) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("timeout".to_string(), timeout.to_string())
            .with_query_param("target.start.level".to_string(), target_start_level.to_string())
            .with_query_param("target.start.level.prop.name".to_string(), target_start_level_prop_name.to_string())
            .with_query_param("type".to_string(), _type.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_systemready_impl_services_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, services_list: Vec<String>, _type: &str) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadyImplServicesCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("services.list".to_string(), services_list.join(",").to_string())
            .with_query_param("type".to_string(), _type.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_systemready_impl_servlet_system_alive_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, osgi_http_whiteboard_servlet_pattern: &str, osgi_http_whiteboard_context_select: &str) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("osgi.http.whiteboard.servlet.pattern".to_string(), osgi_http_whiteboard_servlet_pattern.to_string())
            .with_query_param("osgi.http.whiteboard.context.select".to_string(), osgi_http_whiteboard_context_select.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_systemready_impl_servlet_system_ready_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, osgi_http_whiteboard_servlet_pattern: &str, osgi_http_whiteboard_context_select: &str) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("osgi.http.whiteboard.servlet.pattern".to_string(), osgi_http_whiteboard_servlet_pattern.to_string())
            .with_query_param("osgi.http.whiteboard.context.select".to_string(), osgi_http_whiteboard_context_select.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_systemready_system_ready_monitor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, poll_interval: i32) -> Box<Future<Item = ::models::OrgApacheFelixSystemreadySystemReadyMonitorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("poll.interval".to_string(), poll_interval.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_webconsole_internal_servlet_osgi_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, manager_root: &str, http_service_filter: &str, default_render: &str, realm: &str, username: &str, password: &str, category: &str, locale: &str, loglevel: i32, plugins: &str) -> Box<Future<Item = ::models::OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("manager.root".to_string(), manager_root.to_string())
            .with_query_param("http.service.filter".to_string(), http_service_filter.to_string())
            .with_query_param("default.render".to_string(), default_render.to_string())
            .with_query_param("realm".to_string(), realm.to_string())
            .with_query_param("username".to_string(), username.to_string())
            .with_query_param("password".to_string(), password.to_string())
            .with_query_param("category".to_string(), category.to_string())
            .with_query_param("locale".to_string(), locale.to_string())
            .with_query_param("loglevel".to_string(), loglevel.to_string())
            .with_query_param("plugins".to_string(), plugins.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_size: i32) -> Box<Future<Item = ::models::OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("max.size".to_string(), max_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, felix_memoryusage_dump_threshold: i32, felix_memoryusage_dump_interval: i32, felix_memoryusage_dump_location: &str) -> Box<Future<Item = ::models::OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("felix.memoryusage.dump.threshold".to_string(), felix_memoryusage_dump_threshold.to_string())
            .with_query_param("felix.memoryusage.dump.interval".to_string(), felix_memoryusage_dump_interval.to_string())
            .with_query_param("felix.memoryusage.dump.location".to_string(), felix_memoryusage_dump_location.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_http_proxyconfigurator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, proxy_enabled: bool, proxy_host: &str, proxy_port: i32, proxy_user: &str, proxy_password: &str, proxy_exceptions: Vec<String>) -> Box<Future<Item = ::models::OrgApacheHttpProxyconfiguratorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.http.proxyconfigurator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("proxy.enabled".to_string(), proxy_enabled.to_string())
            .with_query_param("proxy.host".to_string(), proxy_host.to_string())
            .with_query_param("proxy.port".to_string(), proxy_port.to_string())
            .with_query_param("proxy.user".to_string(), proxy_user.to_string())
            .with_query_param("proxy.password".to_string(), proxy_password.to_string())
            .with_query_param("proxy.exceptions".to_string(), proxy_exceptions.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dir: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("dir".to_string(), dir.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_document_document_node_store_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mongouri: &str, db: &str, socket_keep_alive: bool, cache: i32, node_cache_percentage: i32, prev_doc_cache_percentage: i32, children_cache_percentage: i32, diff_cache_percentage: i32, cache_segment_count: i32, cache_stack_move_distance: i32, blob_cache_size: i32, persistent_cache: &str, journal_cache: &str, custom_blob_store: bool, journal_gc_interval: i32, journal_gc_max_age: i32, prefetch_external_changes: bool, role: &str, version_gc_max_age_in_secs: i32, version_gc_expression: &str, version_gc_time_limit_in_secs: i32, blob_gc_max_age_in_secs: i32, blob_track_snapshot_interval_in_secs: i32, repository_home: &str, max_replication_lag_in_secs: i32, document_store_type: &str, bundling_disabled: bool, update_limit: i32, persistent_cache_includes: Vec<String>, lease_check_mode: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("mongouri".to_string(), mongouri.to_string())
            .with_query_param("db".to_string(), db.to_string())
            .with_query_param("socketKeepAlive".to_string(), socket_keep_alive.to_string())
            .with_query_param("cache".to_string(), cache.to_string())
            .with_query_param("nodeCachePercentage".to_string(), node_cache_percentage.to_string())
            .with_query_param("prevDocCachePercentage".to_string(), prev_doc_cache_percentage.to_string())
            .with_query_param("childrenCachePercentage".to_string(), children_cache_percentage.to_string())
            .with_query_param("diffCachePercentage".to_string(), diff_cache_percentage.to_string())
            .with_query_param("cacheSegmentCount".to_string(), cache_segment_count.to_string())
            .with_query_param("cacheStackMoveDistance".to_string(), cache_stack_move_distance.to_string())
            .with_query_param("blobCacheSize".to_string(), blob_cache_size.to_string())
            .with_query_param("persistentCache".to_string(), persistent_cache.to_string())
            .with_query_param("journalCache".to_string(), journal_cache.to_string())
            .with_query_param("customBlobStore".to_string(), custom_blob_store.to_string())
            .with_query_param("journalGCInterval".to_string(), journal_gc_interval.to_string())
            .with_query_param("journalGCMaxAge".to_string(), journal_gc_max_age.to_string())
            .with_query_param("prefetchExternalChanges".to_string(), prefetch_external_changes.to_string())
            .with_query_param("role".to_string(), role.to_string())
            .with_query_param("versionGcMaxAgeInSecs".to_string(), version_gc_max_age_in_secs.to_string())
            .with_query_param("versionGCExpression".to_string(), version_gc_expression.to_string())
            .with_query_param("versionGCTimeLimitInSecs".to_string(), version_gc_time_limit_in_secs.to_string())
            .with_query_param("blobGcMaxAgeInSecs".to_string(), blob_gc_max_age_in_secs.to_string())
            .with_query_param("blobTrackSnapshotIntervalInSecs".to_string(), blob_track_snapshot_interval_in_secs.to_string())
            .with_query_param("repository.home".to_string(), repository_home.to_string())
            .with_query_param("maxReplicationLagInSecs".to_string(), max_replication_lag_in_secs.to_string())
            .with_query_param("documentStoreType".to_string(), document_store_type.to_string())
            .with_query_param("bundlingDisabled".to_string(), bundling_disabled.to_string())
            .with_query_param("updateLimit".to_string(), update_limit.to_string())
            .with_query_param("persistentCacheIncludes".to_string(), persistent_cache_includes.join(",").to_string())
            .with_query_param("leaseCheckMode".to_string(), lease_check_mode.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, persistent_cache_includes: Vec<String>) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("persistentCacheIncludes".to_string(), persistent_cache_includes.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, included_paths: Vec<String>, enable_async_observer: bool, observer_queue_size: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("includedPaths".to_string(), included_paths.join(",").to_string())
            .with_query_param("enableAsyncObserver".to_string(), enable_async_observer.to_string())
            .with_query_param("observerQueueSize".to_string(), observer_queue_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_index_async_indexer_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, async_configs: Vec<String>, lease_time_out_minutes: i32, failing_index_timeout_seconds: i32, error_warn_interval_seconds: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("asyncConfigs".to_string(), async_configs.join(",").to_string())
            .with_query_param("leaseTimeOutMinutes".to_string(), lease_time_out_minutes.to_string())
            .with_query_param("failingIndexTimeoutSeconds".to_string(), failing_index_timeout_seconds.to_string())
            .with_query_param("errorWarnIntervalSeconds".to_string(), error_warn_interval_seconds.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, disabled: bool, debug: bool, local_index_dir: &str, enable_open_index_async: bool, thread_pool_size: i32, prefetch_index_files: bool, extracted_text_cache_size_in_mb: i32, extracted_text_cache_expiry_in_secs: i32, always_use_pre_extracted_cache: bool, boolean_clause_limit: i32, enable_hybrid_indexing: bool, hybrid_queue_size: i32, disable_stored_index_definition: bool, deleted_blobs_collection_enabled: bool, prop_index_cleaner_interval_in_secs: i32, enable_single_blob_index_files: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("disabled".to_string(), disabled.to_string())
            .with_query_param("debug".to_string(), debug.to_string())
            .with_query_param("localIndexDir".to_string(), local_index_dir.to_string())
            .with_query_param("enableOpenIndexAsync".to_string(), enable_open_index_async.to_string())
            .with_query_param("threadPoolSize".to_string(), thread_pool_size.to_string())
            .with_query_param("prefetchIndexFiles".to_string(), prefetch_index_files.to_string())
            .with_query_param("extractedTextCacheSizeInMB".to_string(), extracted_text_cache_size_in_mb.to_string())
            .with_query_param("extractedTextCacheExpiryInSecs".to_string(), extracted_text_cache_expiry_in_secs.to_string())
            .with_query_param("alwaysUsePreExtractedCache".to_string(), always_use_pre_extracted_cache.to_string())
            .with_query_param("booleanClauseLimit".to_string(), boolean_clause_limit.to_string())
            .with_query_param("enableHybridIndexing".to_string(), enable_hybrid_indexing.to_string())
            .with_query_param("hybridQueueSize".to_string(), hybrid_queue_size.to_string())
            .with_query_param("disableStoredIndexDefinition".to_string(), disable_stored_index_definition.to_string())
            .with_query_param("deletedBlobsCollectionEnabled".to_string(), deleted_blobs_collection_enabled.to_string())
            .with_query_param("propIndexCleanerIntervalInSecs".to_string(), prop_index_cleaner_interval_in_secs.to_string())
            .with_query_param("enableSingleBlobIndexFiles".to_string(), enable_single_blob_index_files.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, solr_home_path: &str, solr_core_name: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("solr.home.path".to_string(), solr_home_path.to_string())
            .with_query_param("solr.core.name".to_string(), solr_core_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path_desc_field: &str, path_child_field: &str, path_parent_field: &str, path_exact_field: &str, catch_all_field: &str, collapsed_path_field: &str, path_depth_field: &str, commit_policy: &str, rows: i32, path_restrictions: bool, property_restrictions: bool, primarytypes_restrictions: bool, ignored_properties: Vec<String>, used_properties: Vec<String>, type_mappings: Vec<String>, property_mappings: Vec<String>, collapse_jcrcontent_nodes: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path.desc.field".to_string(), path_desc_field.to_string())
            .with_query_param("path.child.field".to_string(), path_child_field.to_string())
            .with_query_param("path.parent.field".to_string(), path_parent_field.to_string())
            .with_query_param("path.exact.field".to_string(), path_exact_field.to_string())
            .with_query_param("catch.all.field".to_string(), catch_all_field.to_string())
            .with_query_param("collapsed.path.field".to_string(), collapsed_path_field.to_string())
            .with_query_param("path.depth.field".to_string(), path_depth_field.to_string())
            .with_query_param("commit.policy".to_string(), commit_policy.to_string())
            .with_query_param("rows".to_string(), rows.to_string())
            .with_query_param("path.restrictions".to_string(), path_restrictions.to_string())
            .with_query_param("property.restrictions".to_string(), property_restrictions.to_string())
            .with_query_param("primarytypes.restrictions".to_string(), primarytypes_restrictions.to_string())
            .with_query_param("ignored.properties".to_string(), ignored_properties.join(",").to_string())
            .with_query_param("used.properties".to_string(), used_properties.join(",").to_string())
            .with_query_param("type.mappings".to_string(), type_mappings.join(",").to_string())
            .with_query_param("property.mappings".to_string(), property_mappings.join(",").to_string())
            .with_query_param("collapse.jcrcontent.nodes".to_string(), collapse_jcrcontent_nodes.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, solr_http_url: &str, solr_zk_host: &str, solr_collection: &str, solr_socket_timeout: i32, solr_connection_timeout: i32, solr_shards_no: i32, solr_replication_factor: i32, solr_conf_dir: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("solr.http.url".to_string(), solr_http_url.to_string())
            .with_query_param("solr.zk.host".to_string(), solr_zk_host.to_string())
            .with_query_param("solr.collection".to_string(), solr_collection.to_string())
            .with_query_param("solr.socket.timeout".to_string(), solr_socket_timeout.to_string())
            .with_query_param("solr.connection.timeout".to_string(), solr_connection_timeout.to_string())
            .with_query_param("solr.shards.no".to_string(), solr_shards_no.to_string())
            .with_query_param("solr.replication.factor".to_string(), solr_replication_factor.to_string())
            .with_query_param("solr.conf.dir".to_string(), solr_conf_dir.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, query_aggregation: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("query.aggregation".to_string(), query_aggregation.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, server_type: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("server.type".to_string(), server_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_type: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("providerType".to_string(), provider_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_items: i32, max_path_depth: i32, enabled: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("maxItems".to_string(), max_items.to_string())
            .with_query_param("maxPathDepth".to_string(), max_path_depth.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_query_query_engine_settings_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, query_limit_in_memory: i32, query_limit_reads: i32, query_fail_traversal: bool, fast_query_size: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("queryLimitInMemory".to_string(), query_limit_in_memory.to_string())
            .with_query_param("queryLimitReads".to_string(), query_limit_reads.to_string())
            .with_query_param("queryFailTraversal".to_string(), query_fail_traversal.to_string())
            .with_query_param("fastQuerySize".to_string(), fast_query_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_security_authentication_authentication_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_jackrabbit_oak_authentication_app_name: &str, org_apache_jackrabbit_oak_authentication_config_spi_name: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.jackrabbit.oak.authentication.appName".to_string(), org_apache_jackrabbit_oak_authentication_app_name.to_string())
            .with_query_param("org.apache.jackrabbit.oak.authentication.configSpiName".to_string(), org_apache_jackrabbit_oak_authentication_config_spi_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_name: &str, host_name: &str, host_port: i32, host_ssl: bool, host_tls: bool, host_no_cert_check: bool, bind_dn: &str, bind_password: &str, search_timeout: &str, admin_pool_max_active: i32, admin_pool_lookup_on_validate: bool, user_pool_max_active: i32, user_pool_lookup_on_validate: bool, user_base_dn: &str, user_objectclass: Vec<String>, user_id_attribute: &str, user_extra_filter: &str, user_make_dn_path: bool, group_base_dn: &str, group_objectclass: Vec<String>, group_name_attribute: &str, group_extra_filter: &str, group_make_dn_path: bool, group_member_attribute: &str, use_uid_for_ext_id: bool, customattributes: Vec<String>) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("provider.name".to_string(), provider_name.to_string())
            .with_query_param("host.name".to_string(), host_name.to_string())
            .with_query_param("host.port".to_string(), host_port.to_string())
            .with_query_param("host.ssl".to_string(), host_ssl.to_string())
            .with_query_param("host.tls".to_string(), host_tls.to_string())
            .with_query_param("host.noCertCheck".to_string(), host_no_cert_check.to_string())
            .with_query_param("bind.dn".to_string(), bind_dn.to_string())
            .with_query_param("bind.password".to_string(), bind_password.to_string())
            .with_query_param("searchTimeout".to_string(), search_timeout.to_string())
            .with_query_param("adminPool.maxActive".to_string(), admin_pool_max_active.to_string())
            .with_query_param("adminPool.lookupOnValidate".to_string(), admin_pool_lookup_on_validate.to_string())
            .with_query_param("userPool.maxActive".to_string(), user_pool_max_active.to_string())
            .with_query_param("userPool.lookupOnValidate".to_string(), user_pool_lookup_on_validate.to_string())
            .with_query_param("user.baseDN".to_string(), user_base_dn.to_string())
            .with_query_param("user.objectclass".to_string(), user_objectclass.join(",").to_string())
            .with_query_param("user.idAttribute".to_string(), user_id_attribute.to_string())
            .with_query_param("user.extraFilter".to_string(), user_extra_filter.to_string())
            .with_query_param("user.makeDnPath".to_string(), user_make_dn_path.to_string())
            .with_query_param("group.baseDN".to_string(), group_base_dn.to_string())
            .with_query_param("group.objectclass".to_string(), group_objectclass.join(",").to_string())
            .with_query_param("group.nameAttribute".to_string(), group_name_attribute.to_string())
            .with_query_param("group.extraFilter".to_string(), group_extra_filter.to_string())
            .with_query_param("group.makeDnPath".to_string(), group_make_dn_path.to_string())
            .with_query_param("group.memberAttribute".to_string(), group_member_attribute.to_string())
            .with_query_param("useUidForExtId".to_string(), use_uid_for_ext_id.to_string())
            .with_query_param("customattributes".to_string(), customattributes.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_security_authentication_token_token_configura(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, token_expiration: &str, token_length: &str, token_refresh: bool, token_cleanup_threshold: i32, password_hash_algorithm: &str, password_hash_iterations: i32, password_salt_size: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("tokenExpiration".to_string(), token_expiration.to_string())
            .with_query_param("tokenLength".to_string(), token_length.to_string())
            .with_query_param("tokenRefresh".to_string(), token_refresh.to_string())
            .with_query_param("tokenCleanupThreshold".to_string(), token_cleanup_threshold.to_string())
            .with_query_param("passwordHashAlgorithm".to_string(), password_hash_algorithm.to_string())
            .with_query_param("passwordHashIterations".to_string(), password_hash_iterations.to_string())
            .with_query_param("passwordSaltSize".to_string(), password_salt_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_security_authorization_authorization_configur(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, permissions_jr2: &str, import_behavior: &str, read_paths: Vec<String>, administrative_principals: Vec<String>, configuration_ranking: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("permissionsJr2".to_string(), permissions_jr2.to_string())
            .with_query_param("importBehavior".to_string(), import_behavior.to_string())
            .with_query_param("readPaths".to_string(), read_paths.join(",").to_string())
            .with_query_param("administrativePrincipals".to_string(), administrative_principals.join(",").to_string())
            .with_query_param("configurationRanking".to_string(), configuration_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_security_internal_security_provider_registrati(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, required_service_pids: Vec<String>, authorization_composition_type: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("requiredServicePids".to_string(), required_service_pids.join(",").to_string())
            .with_query_param("authorizationCompositionType".to_string(), authorization_composition_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, length: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("length".to_string(), length.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_security_user_user_configuration_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, users_path: &str, groups_path: &str, system_relative_path: &str, default_depth: i32, import_behavior: &str, password_hash_algorithm: &str, password_hash_iterations: i32, password_salt_size: i32, omit_admin_pw: bool, support_auto_save: bool, password_max_age: i32, initial_password_change: bool, password_history_size: i32, password_expiry_for_admin: bool, cache_expiration: i32, enable_rfc7613_usercase_mapped_profile: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("usersPath".to_string(), users_path.to_string())
            .with_query_param("groupsPath".to_string(), groups_path.to_string())
            .with_query_param("systemRelativePath".to_string(), system_relative_path.to_string())
            .with_query_param("defaultDepth".to_string(), default_depth.to_string())
            .with_query_param("importBehavior".to_string(), import_behavior.to_string())
            .with_query_param("passwordHashAlgorithm".to_string(), password_hash_algorithm.to_string())
            .with_query_param("passwordHashIterations".to_string(), password_hash_iterations.to_string())
            .with_query_param("passwordSaltSize".to_string(), password_salt_size.to_string())
            .with_query_param("omitAdminPw".to_string(), omit_admin_pw.to_string())
            .with_query_param("supportAutoSave".to_string(), support_auto_save.to_string())
            .with_query_param("passwordMaxAge".to_string(), password_max_age.to_string())
            .with_query_param("initialPasswordChange".to_string(), initial_password_change.to_string())
            .with_query_param("passwordHistorySize".to_string(), password_history_size.to_string())
            .with_query_param("passwordExpiryForAdmin".to_string(), password_expiry_for_admin.to_string())
            .with_query_param("cacheExpiration".to_string(), cache_expiration.to_string())
            .with_query_param("enableRFC7613UsercaseMappedProfile".to_string(), enable_rfc7613_usercase_mapped_profile.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, account_name: &str, container_name: &str, access_key: &str, root_path: &str, connection_url: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("accountName".to_string(), account_name.to_string())
            .with_query_param("containerName".to_string(), container_name.to_string())
            .with_query_param("accessKey".to_string(), access_key.to_string())
            .with_query_param("rootPath".to_string(), root_path.to_string())
            .with_query_param("connectionURL".to_string(), connection_url.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_segment_segment_node_store_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, repository_home: &str, tarmk_mode: &str, tarmk_size: i32, segment_cache_size: i32, string_cache_size: i32, template_cache_size: i32, string_deduplication_cache_size: i32, template_deduplication_cache_size: i32, node_deduplication_cache_size: i32, pause_compaction: bool, compaction_retry_count: i32, compaction_force_timeout: i32, compaction_size_delta_estimation: i32, compaction_disable_estimation: bool, compaction_retained_generations: i32, compaction_memory_threshold: i32, compaction_progress_log: i32, standby: bool, custom_blob_store: bool, custom_segment_store: bool, split_persistence: bool, repository_backup_dir: &str, blob_gc_max_age_in_secs: i32, blob_track_snapshot_interval_in_secs: i32, role: &str, register_descriptors: bool, dispatch_changes: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("repository.home".to_string(), repository_home.to_string())
            .with_query_param("tarmk.mode".to_string(), tarmk_mode.to_string())
            .with_query_param("tarmk.size".to_string(), tarmk_size.to_string())
            .with_query_param("segmentCache.size".to_string(), segment_cache_size.to_string())
            .with_query_param("stringCache.size".to_string(), string_cache_size.to_string())
            .with_query_param("templateCache.size".to_string(), template_cache_size.to_string())
            .with_query_param("stringDeduplicationCache.size".to_string(), string_deduplication_cache_size.to_string())
            .with_query_param("templateDeduplicationCache.size".to_string(), template_deduplication_cache_size.to_string())
            .with_query_param("nodeDeduplicationCache.size".to_string(), node_deduplication_cache_size.to_string())
            .with_query_param("pauseCompaction".to_string(), pause_compaction.to_string())
            .with_query_param("compaction.retryCount".to_string(), compaction_retry_count.to_string())
            .with_query_param("compaction.force.timeout".to_string(), compaction_force_timeout.to_string())
            .with_query_param("compaction.sizeDeltaEstimation".to_string(), compaction_size_delta_estimation.to_string())
            .with_query_param("compaction.disableEstimation".to_string(), compaction_disable_estimation.to_string())
            .with_query_param("compaction.retainedGenerations".to_string(), compaction_retained_generations.to_string())
            .with_query_param("compaction.memoryThreshold".to_string(), compaction_memory_threshold.to_string())
            .with_query_param("compaction.progressLog".to_string(), compaction_progress_log.to_string())
            .with_query_param("standby".to_string(), standby.to_string())
            .with_query_param("customBlobStore".to_string(), custom_blob_store.to_string())
            .with_query_param("customSegmentStore".to_string(), custom_segment_store.to_string())
            .with_query_param("splitPersistence".to_string(), split_persistence.to_string())
            .with_query_param("repository.backup.dir".to_string(), repository_backup_dir.to_string())
            .with_query_param("blobGcMaxAgeInSecs".to_string(), blob_gc_max_age_in_secs.to_string())
            .with_query_param("blobTrackSnapshotIntervalInSecs".to_string(), blob_track_snapshot_interval_in_secs.to_string())
            .with_query_param("role".to_string(), role.to_string())
            .with_query_param("registerDescriptors".to_string(), register_descriptors.to_string())
            .with_query_param("dispatchChanges".to_string(), dispatch_changes.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, commits_tracker_writer_groups: Vec<String>) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("commitsTrackerWriterGroups".to_string(), commits_tracker_writer_groups.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_segment_segment_node_store_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, repository_home: &str, tarmk_mode: &str, tarmk_size: i32, segment_cache_size: i32, string_cache_size: i32, template_cache_size: i32, string_deduplication_cache_size: i32, template_deduplication_cache_size: i32, node_deduplication_cache_size: i32, pause_compaction: bool, compaction_retry_count: i32, compaction_force_timeout: i32, compaction_size_delta_estimation: i32, compaction_disable_estimation: bool, compaction_retained_generations: i32, compaction_memory_threshold: i32, compaction_progress_log: i32, standby: bool, custom_blob_store: bool, custom_segment_store: bool, split_persistence: bool, repository_backup_dir: &str, blob_gc_max_age_in_secs: i32, blob_track_snapshot_interval_in_secs: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("repository.home".to_string(), repository_home.to_string())
            .with_query_param("tarmk.mode".to_string(), tarmk_mode.to_string())
            .with_query_param("tarmk.size".to_string(), tarmk_size.to_string())
            .with_query_param("segmentCache.size".to_string(), segment_cache_size.to_string())
            .with_query_param("stringCache.size".to_string(), string_cache_size.to_string())
            .with_query_param("templateCache.size".to_string(), template_cache_size.to_string())
            .with_query_param("stringDeduplicationCache.size".to_string(), string_deduplication_cache_size.to_string())
            .with_query_param("templateDeduplicationCache.size".to_string(), template_deduplication_cache_size.to_string())
            .with_query_param("nodeDeduplicationCache.size".to_string(), node_deduplication_cache_size.to_string())
            .with_query_param("pauseCompaction".to_string(), pause_compaction.to_string())
            .with_query_param("compaction.retryCount".to_string(), compaction_retry_count.to_string())
            .with_query_param("compaction.force.timeout".to_string(), compaction_force_timeout.to_string())
            .with_query_param("compaction.sizeDeltaEstimation".to_string(), compaction_size_delta_estimation.to_string())
            .with_query_param("compaction.disableEstimation".to_string(), compaction_disable_estimation.to_string())
            .with_query_param("compaction.retainedGenerations".to_string(), compaction_retained_generations.to_string())
            .with_query_param("compaction.memoryThreshold".to_string(), compaction_memory_threshold.to_string())
            .with_query_param("compaction.progressLog".to_string(), compaction_progress_log.to_string())
            .with_query_param("standby".to_string(), standby.to_string())
            .with_query_param("customBlobStore".to_string(), custom_blob_store.to_string())
            .with_query_param("customSegmentStore".to_string(), custom_segment_store.to_string())
            .with_query_param("splitPersistence".to_string(), split_persistence.to_string())
            .with_query_param("repository.backup.dir".to_string(), repository_backup_dir.to_string())
            .with_query_param("blobGcMaxAgeInSecs".to_string(), blob_gc_max_age_in_secs.to_string())
            .with_query_param("blobTrackSnapshotIntervalInSecs".to_string(), blob_track_snapshot_interval_in_secs.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_installer_configuration_persist: bool, mode: &str, port: i32, primary_host: &str, interval: i32, primary_allowed_client_ip_ranges: Vec<String>, secure: bool, standby_readtimeout: i32, standby_autoclean: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.sling.installer.configuration.persist".to_string(), org_apache_sling_installer_configuration_persist.to_string())
            .with_query_param("mode".to_string(), mode.to_string())
            .with_query_param("port".to_string(), port.to_string())
            .with_query_param("primary.host".to_string(), primary_host.to_string())
            .with_query_param("interval".to_string(), interval.to_string())
            .with_query_param("primary.allowed-client-ip-ranges".to_string(), primary_allowed_client_ip_ranges.join(",").to_string())
            .with_query_param("secure".to_string(), secure.to_string())
            .with_query_param("standby.readtimeout".to_string(), standby_readtimeout.to_string())
            .with_query_param("standby.autoclean".to_string(), standby_autoclean.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, handler_name: &str, user_expiration_time: &str, user_auto_membership: Vec<String>, user_property_mapping: Vec<String>, user_path_prefix: &str, user_membership_exp_time: &str, user_membership_nesting_depth: i32, user_dynamic_membership: bool, user_disable_missing: bool, group_expiration_time: &str, group_auto_membership: Vec<String>, group_property_mapping: Vec<String>, group_path_prefix: &str, enable_rfc7613_usercase_mapped_profile: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("handler.name".to_string(), handler_name.to_string())
            .with_query_param("user.expirationTime".to_string(), user_expiration_time.to_string())
            .with_query_param("user.autoMembership".to_string(), user_auto_membership.join(",").to_string())
            .with_query_param("user.propertyMapping".to_string(), user_property_mapping.join(",").to_string())
            .with_query_param("user.pathPrefix".to_string(), user_path_prefix.to_string())
            .with_query_param("user.membershipExpTime".to_string(), user_membership_exp_time.to_string())
            .with_query_param("user.membershipNestingDepth".to_string(), user_membership_nesting_depth.to_string())
            .with_query_param("user.dynamicMembership".to_string(), user_dynamic_membership.to_string())
            .with_query_param("user.disableMissing".to_string(), user_disable_missing.to_string())
            .with_query_param("group.expirationTime".to_string(), group_expiration_time.to_string())
            .with_query_param("group.autoMembership".to_string(), group_auto_membership.join(",").to_string())
            .with_query_param("group.propertyMapping".to_string(), group_property_mapping.join(",").to_string())
            .with_query_param("group.pathPrefix".to_string(), group_path_prefix.to_string())
            .with_query_param("enableRFC7613UsercaseMappedProfile".to_string(), enable_rfc7613_usercase_mapped_profile.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jaas_ranking: i32, jaas_control_flag: &str, jaas_realm_name: &str, idp_name: &str, sync_handler_name: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("jaas.ranking".to_string(), jaas_ranking.to_string())
            .with_query_param("jaas.controlFlag".to_string(), jaas_control_flag.to_string())
            .with_query_param("jaas.realmName".to_string(), jaas_realm_name.to_string())
            .with_query_param("idp.name".to_string(), idp_name.to_string())
            .with_query_param("sync.handlerName".to_string(), sync_handler_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, protect_external_id: bool) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("protectExternalId".to_string(), protect_external_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, cug_supported_paths: Vec<String>, cug_enabled: bool, configuration_ranking: i32) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("cugSupportedPaths".to_string(), cug_supported_paths.join(",").to_string())
            .with_query_param("cugEnabled".to_string(), cug_enabled.to_string())
            .with_query_param("configurationRanking".to_string(), configuration_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, principal_names: Vec<String>) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("principalNames".to_string(), principal_names.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled_actions: &str, user_privilege_names: Vec<String>, group_privilege_names: Vec<String>, constraint: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabledActions".to_string(), enabled_actions.to_string())
            .with_query_param("userPrivilegeNames".to_string(), user_privilege_names.join(",").to_string())
            .with_query_param("groupPrivilegeNames".to_string(), group_privilege_names.join(",").to_string())
            .with_query_param("constraint".to_string(), constraint.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_vault_packaging_impl_packaging_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, package_roots: Vec<String>) -> Box<Future<Item = ::models::OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("packageRoots".to_string(), package_roots.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, home_path: &str) -> Box<Future<Item = ::models::OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("homePath".to_string(), home_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_auth_core_impl_logout_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_methods: Vec<String>, sling_servlet_paths: &str) -> Box<Future<Item = ::models::OrgApacheSlingAuthCoreImplLogoutServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.methods".to_string(), sling_servlet_methods.join(",").to_string())
            .with_query_param("sling.servlet.paths".to_string(), sling_servlet_paths.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_caconfig_impl_configuration_bindings_value_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_caconfig_impl_configuration_resolver_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, config_bucket_names: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplConfigurationResolverImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("configBucketNames".to_string(), config_bucket_names.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, config_property_inheritance_property_names: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("configPropertyInheritancePropertyNames".to_string(), config_property_inheritance_property_names.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, description: &str, overrides: Vec<String>, enabled: bool, service_ranking: i32) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("description".to_string(), description.to_string())
            .with_query_param("overrides".to_string(), overrides.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_caconfig_impl_override_system_property_configuration_ove(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, service_ranking: i32) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_caconfig_management_impl_configuration_management_setti(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, ignore_property_name_regex: Vec<String>, config_collection_properties_resource_names: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("ignorePropertyNameRegex".to_string(), ignore_property_name_regex.join(",").to_string())
            .with_query_param("configCollectionPropertiesResourceNames".to_string(), config_collection_properties_resource_names.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, config_path: &str, fallback_paths: Vec<String>, config_collection_inheritance_property_names: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("configPath".to_string(), config_path.to_string())
            .with_query_param("fallbackPaths".to_string(), fallback_paths.join(",").to_string())
            .with_query_param("configCollectionInheritancePropertyNames".to_string(), config_collection_inheritance_property_names.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, enabled: bool, config_ref_resource_names: Vec<String>, config_ref_property_names: Vec<String>, service_ranking: i32) -> Box<Future<Item = ::models::OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("configRefResourceNames".to_string(), config_ref_resource_names.join(",").to_string())
            .with_query_param("configRefPropertyNames".to_string(), config_ref_property_names.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_commons_html_internal_tagsoup_html_parser(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, parser_features: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("parser.features".to_string(), parser_features.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_commons_log_log_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_commons_log_level: &str, org_apache_sling_commons_log_file: &str, org_apache_sling_commons_log_file_number: i32, org_apache_sling_commons_log_file_size: &str, org_apache_sling_commons_log_pattern: &str, org_apache_sling_commons_log_configuration_file: &str, org_apache_sling_commons_log_packaging_data_enabled: bool, org_apache_sling_commons_log_max_caller_data_depth: i32, org_apache_sling_commons_log_max_old_file_count_in_dump: i32, org_apache_sling_commons_log_num_of_lines: i32) -> Box<Future<Item = ::models::OrgApacheSlingCommonsLogLogManagerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.commons.log.LogManager".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.sling.commons.log.level".to_string(), org_apache_sling_commons_log_level.to_string())
            .with_query_param("org.apache.sling.commons.log.file".to_string(), org_apache_sling_commons_log_file.to_string())
            .with_query_param("org.apache.sling.commons.log.file.number".to_string(), org_apache_sling_commons_log_file_number.to_string())
            .with_query_param("org.apache.sling.commons.log.file.size".to_string(), org_apache_sling_commons_log_file_size.to_string())
            .with_query_param("org.apache.sling.commons.log.pattern".to_string(), org_apache_sling_commons_log_pattern.to_string())
            .with_query_param("org.apache.sling.commons.log.configurationFile".to_string(), org_apache_sling_commons_log_configuration_file.to_string())
            .with_query_param("org.apache.sling.commons.log.packagingDataEnabled".to_string(), org_apache_sling_commons_log_packaging_data_enabled.to_string())
            .with_query_param("org.apache.sling.commons.log.maxCallerDataDepth".to_string(), org_apache_sling_commons_log_max_caller_data_depth.to_string())
            .with_query_param("org.apache.sling.commons.log.maxOldFileCountInDump".to_string(), org_apache_sling_commons_log_max_old_file_count_in_dump.to_string())
            .with_query_param("org.apache.sling.commons.log.numOfLines".to_string(), org_apache_sling_commons_log_num_of_lines.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_commons_log_log_manager_factory_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_commons_log_level: &str, org_apache_sling_commons_log_file: &str, org_apache_sling_commons_log_pattern: &str, org_apache_sling_commons_log_names: Vec<String>, org_apache_sling_commons_log_additiv: bool) -> Box<Future<Item = ::models::OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.sling.commons.log.level".to_string(), org_apache_sling_commons_log_level.to_string())
            .with_query_param("org.apache.sling.commons.log.file".to_string(), org_apache_sling_commons_log_file.to_string())
            .with_query_param("org.apache.sling.commons.log.pattern".to_string(), org_apache_sling_commons_log_pattern.to_string())
            .with_query_param("org.apache.sling.commons.log.names".to_string(), org_apache_sling_commons_log_names.join(",").to_string())
            .with_query_param("org.apache.sling.commons.log.additiv".to_string(), org_apache_sling_commons_log_additiv.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_commons_log_log_manager_factory_writer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_commons_log_file: &str, org_apache_sling_commons_log_file_number: i32, org_apache_sling_commons_log_file_size: &str, org_apache_sling_commons_log_file_buffered: bool) -> Box<Future<Item = ::models::OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.sling.commons.log.file".to_string(), org_apache_sling_commons_log_file.to_string())
            .with_query_param("org.apache.sling.commons.log.file.number".to_string(), org_apache_sling_commons_log_file_number.to_string())
            .with_query_param("org.apache.sling.commons.log.file.size".to_string(), org_apache_sling_commons_log_file_size.to_string())
            .with_query_param("org.apache.sling.commons.log.file.buffered".to_string(), org_apache_sling_commons_log_file_buffered.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_commons_metrics_internal_log_reporter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, period: i32, time_unit: &str, level: &str, logger_name: &str, prefix: &str, pattern: &str, registry_name: &str) -> Box<Future<Item = ::models::OrgApacheSlingCommonsMetricsInternalLogReporterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("period".to_string(), period.to_string())
            .with_query_param("timeUnit".to_string(), time_unit.to_string())
            .with_query_param("level".to_string(), level.to_string())
            .with_query_param("loggerName".to_string(), logger_name.to_string())
            .with_query_param("prefix".to_string(), prefix.to_string())
            .with_query_param("pattern".to_string(), pattern.to_string())
            .with_query_param("registryName".to_string(), registry_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, datasources: Vec<String>, step: i32, archives: Vec<String>, path: &str) -> Box<Future<Item = ::models::OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("datasources".to_string(), datasources.join(",").to_string())
            .with_query_param("step".to_string(), step.to_string())
            .with_query_param("archives".to_string(), archives.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_commons_mime_internal_mime_type_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, mime_types: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("mime.types".to_string(), mime_types.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_commons_scheduler_impl_quartz_scheduler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, pool_name: &str, allowed_pool_names: Vec<String>, scheduler_useleaderforsingle: bool, metrics_filters: Vec<String>, slow_threshold_millis: i32) -> Box<Future<Item = ::models::OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("poolName".to_string(), pool_name.to_string())
            .with_query_param("allowedPoolNames".to_string(), allowed_pool_names.join(",").to_string())
            .with_query_param("scheduler.useleaderforsingle".to_string(), scheduler_useleaderforsingle.to_string())
            .with_query_param("metrics.filters".to_string(), metrics_filters.join(",").to_string())
            .with_query_param("slowThresholdMillis".to_string(), slow_threshold_millis.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_commons_scheduler_impl_scheduler_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_quartz_job_duration_acceptable: i32) -> Box<Future<Item = ::models::OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("max.quartzJob.duration.acceptable".to_string(), max_quartz_job_duration_acceptable.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_commons_threads_impl_default_thread_pool_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, min_pool_size: i32, max_pool_size: i32, queue_size: i32, max_thread_age: i32, keep_alive_time: i32, block_policy: &str, shutdown_graceful: bool, daemon: bool, shutdown_wait_time: i32, priority: &str) -> Box<Future<Item = ::models::OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("minPoolSize".to_string(), min_pool_size.to_string())
            .with_query_param("maxPoolSize".to_string(), max_pool_size.to_string())
            .with_query_param("queueSize".to_string(), queue_size.to_string())
            .with_query_param("maxThreadAge".to_string(), max_thread_age.to_string())
            .with_query_param("keepAliveTime".to_string(), keep_alive_time.to_string())
            .with_query_param("blockPolicy".to_string(), block_policy.to_string())
            .with_query_param("shutdownGraceful".to_string(), shutdown_graceful.to_string())
            .with_query_param("daemon".to_string(), daemon.to_string())
            .with_query_param("shutdownWaitTime".to_string(), shutdown_wait_time.to_string())
            .with_query_param("priority".to_string(), priority.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_datasource_data_source_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, datasource_name: &str, datasource_svc_prop_name: &str, driver_class_name: &str, url: &str, username: &str, password: &str, default_auto_commit: &str, default_read_only: &str, default_transaction_isolation: &str, default_catalog: &str, max_active: i32, max_idle: i32, min_idle: i32, initial_size: i32, max_wait: i32, max_age: i32, test_on_borrow: bool, test_on_return: bool, test_while_idle: bool, validation_query: &str, validation_query_timeout: i32, time_between_eviction_runs_millis: i32, min_evictable_idle_time_millis: i32, connection_properties: &str, init_sql: &str, jdbc_interceptors: &str, validation_interval: i32, log_validation_errors: bool, datasource_svc_properties: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingDatasourceDataSourceFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("datasource.name".to_string(), datasource_name.to_string())
            .with_query_param("datasource.svc.prop.name".to_string(), datasource_svc_prop_name.to_string())
            .with_query_param("driverClassName".to_string(), driver_class_name.to_string())
            .with_query_param("url".to_string(), url.to_string())
            .with_query_param("username".to_string(), username.to_string())
            .with_query_param("password".to_string(), password.to_string())
            .with_query_param("defaultAutoCommit".to_string(), default_auto_commit.to_string())
            .with_query_param("defaultReadOnly".to_string(), default_read_only.to_string())
            .with_query_param("defaultTransactionIsolation".to_string(), default_transaction_isolation.to_string())
            .with_query_param("defaultCatalog".to_string(), default_catalog.to_string())
            .with_query_param("maxActive".to_string(), max_active.to_string())
            .with_query_param("maxIdle".to_string(), max_idle.to_string())
            .with_query_param("minIdle".to_string(), min_idle.to_string())
            .with_query_param("initialSize".to_string(), initial_size.to_string())
            .with_query_param("maxWait".to_string(), max_wait.to_string())
            .with_query_param("maxAge".to_string(), max_age.to_string())
            .with_query_param("testOnBorrow".to_string(), test_on_borrow.to_string())
            .with_query_param("testOnReturn".to_string(), test_on_return.to_string())
            .with_query_param("testWhileIdle".to_string(), test_while_idle.to_string())
            .with_query_param("validationQuery".to_string(), validation_query.to_string())
            .with_query_param("validationQueryTimeout".to_string(), validation_query_timeout.to_string())
            .with_query_param("timeBetweenEvictionRunsMillis".to_string(), time_between_eviction_runs_millis.to_string())
            .with_query_param("minEvictableIdleTimeMillis".to_string(), min_evictable_idle_time_millis.to_string())
            .with_query_param("connectionProperties".to_string(), connection_properties.to_string())
            .with_query_param("initSQL".to_string(), init_sql.to_string())
            .with_query_param("jdbcInterceptors".to_string(), jdbc_interceptors.to_string())
            .with_query_param("validationInterval".to_string(), validation_interval.to_string())
            .with_query_param("logValidationErrors".to_string(), log_validation_errors.to_string())
            .with_query_param("datasource.svc.properties".to_string(), datasource_svc_properties.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_datasource_jndi_data_source_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, datasource_name: &str, datasource_svc_prop_name: &str, datasource_jndi_name: &str, jndi_properties: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingDatasourceJndiDataSourceFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("datasource.name".to_string(), datasource_name.to_string())
            .with_query_param("datasource.svc.prop.name".to_string(), datasource_svc_prop_name.to_string())
            .with_query_param("datasource.jndi.name".to_string(), datasource_jndi_name.to_string())
            .with_query_param("jndi.properties".to_string(), jndi_properties.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_discovery_oak_config(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, connector_ping_timeout: i32, connector_ping_interval: i32, discovery_lite_check_interval: i32, cluster_sync_service_timeout: i32, cluster_sync_service_interval: i32, enable_sync_token: bool, min_event_delay: i32, socket_connect_timeout: i32, so_timeout: i32, topology_connector_urls: Vec<String>, topology_connector_whitelist: Vec<String>, auto_stop_local_loop_enabled: bool, gzip_connector_requests_enabled: bool, hmac_enabled: bool, enable_encryption: bool, shared_key: &str, hmac_shared_key_ttl: i32, backoff_standby_factor: &str, backoff_stable_factor: &str) -> Box<Future<Item = ::models::OrgApacheSlingDiscoveryOakConfigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.discovery.oak.Config".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("connectorPingTimeout".to_string(), connector_ping_timeout.to_string())
            .with_query_param("connectorPingInterval".to_string(), connector_ping_interval.to_string())
            .with_query_param("discoveryLiteCheckInterval".to_string(), discovery_lite_check_interval.to_string())
            .with_query_param("clusterSyncServiceTimeout".to_string(), cluster_sync_service_timeout.to_string())
            .with_query_param("clusterSyncServiceInterval".to_string(), cluster_sync_service_interval.to_string())
            .with_query_param("enableSyncToken".to_string(), enable_sync_token.to_string())
            .with_query_param("minEventDelay".to_string(), min_event_delay.to_string())
            .with_query_param("socketConnectTimeout".to_string(), socket_connect_timeout.to_string())
            .with_query_param("soTimeout".to_string(), so_timeout.to_string())
            .with_query_param("topologyConnectorUrls".to_string(), topology_connector_urls.join(",").to_string())
            .with_query_param("topologyConnectorWhitelist".to_string(), topology_connector_whitelist.join(",").to_string())
            .with_query_param("autoStopLocalLoopEnabled".to_string(), auto_stop_local_loop_enabled.to_string())
            .with_query_param("gzipConnectorRequestsEnabled".to_string(), gzip_connector_requests_enabled.to_string())
            .with_query_param("hmacEnabled".to_string(), hmac_enabled.to_string())
            .with_query_param("enableEncryption".to_string(), enable_encryption.to_string())
            .with_query_param("sharedKey".to_string(), shared_key.to_string())
            .with_query_param("hmacSharedKeyTTL".to_string(), hmac_shared_key_ttl.to_string())
            .with_query_param("backoffStandbyFactor".to_string(), backoff_standby_factor.to_string())
            .with_query_param("backoffStableFactor".to_string(), backoff_stable_factor.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_discovery_oak_synchronized_clocks_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str) -> Box<Future<Item = ::models::OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.name".to_string(), hc_name.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("hc.mbean.name".to_string(), hc_mbean_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, title: &str, details: &str, enabled: bool, service_name: &str, log_level: &str, allowed_roots: Vec<String>, queue_processing_enabled: bool, package_importer_endpoints: Vec<String>, passive_queues: Vec<String>, priority_queues: Vec<String>, retry_strategy: &str, retry_attempts: i32, request_authorization_strategy_target: &str, transport_secret_provider_target: &str, package_builder_target: &str, triggers_target: &str, queue_provider: &str, async_delivery: bool, http_conn_timeout: i32) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("title".to_string(), title.to_string())
            .with_query_param("details".to_string(), details.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .with_query_param("log.level".to_string(), log_level.to_string())
            .with_query_param("allowed.roots".to_string(), allowed_roots.join(",").to_string())
            .with_query_param("queue.processing.enabled".to_string(), queue_processing_enabled.to_string())
            .with_query_param("packageImporter.endpoints".to_string(), package_importer_endpoints.join(",").to_string())
            .with_query_param("passiveQueues".to_string(), passive_queues.join(",").to_string())
            .with_query_param("priorityQueues".to_string(), priority_queues.join(",").to_string())
            .with_query_param("retry.strategy".to_string(), retry_strategy.to_string())
            .with_query_param("retry.attempts".to_string(), retry_attempts.to_string())
            .with_query_param("requestAuthorizationStrategy.target".to_string(), request_authorization_strategy_target.to_string())
            .with_query_param("transportSecretProvider.target".to_string(), transport_secret_provider_target.to_string())
            .with_query_param("packageBuilder.target".to_string(), package_builder_target.to_string())
            .with_query_param("triggers.target".to_string(), triggers_target.to_string())
            .with_query_param("queue.provider".to_string(), queue_provider.to_string())
            .with_query_param("async.delivery".to_string(), async_delivery.to_string())
            .with_query_param("http.conn.timeout".to_string(), http_conn_timeout.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, jcr_privilege: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("jcrPrivilege".to_string(), jcr_privilege.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, title: &str, details: &str, enabled: bool, service_name: &str, log_level: &str, allowed_roots: Vec<String>, request_authorization_strategy_target: &str, queue_provider_factory_target: &str, package_builder_target: &str, triggers_target: &str, priority_queues: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("title".to_string(), title.to_string())
            .with_query_param("details".to_string(), details.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .with_query_param("log.level".to_string(), log_level.to_string())
            .with_query_param("allowed.roots".to_string(), allowed_roots.join(",").to_string())
            .with_query_param("requestAuthorizationStrategy.target".to_string(), request_authorization_strategy_target.to_string())
            .with_query_param("queueProviderFactory.target".to_string(), queue_provider_factory_target.to_string())
            .with_query_param("packageBuilder.target".to_string(), package_builder_target.to_string())
            .with_query_param("triggers.target".to_string(), triggers_target.to_string())
            .with_query_param("priorityQueues".to_string(), priority_queues.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, title: &str, details: &str, enabled: bool, service_name: &str, log_level: &str, queue_processing_enabled: bool, package_exporter_endpoints: Vec<String>, pull_items: i32, http_conn_timeout: i32, request_authorization_strategy_target: &str, transport_secret_provider_target: &str, package_builder_target: &str, triggers_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("title".to_string(), title.to_string())
            .with_query_param("details".to_string(), details.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .with_query_param("log.level".to_string(), log_level.to_string())
            .with_query_param("queue.processing.enabled".to_string(), queue_processing_enabled.to_string())
            .with_query_param("packageExporter.endpoints".to_string(), package_exporter_endpoints.join(",").to_string())
            .with_query_param("pull.items".to_string(), pull_items.to_string())
            .with_query_param("http.conn.timeout".to_string(), http_conn_timeout.to_string())
            .with_query_param("requestAuthorizationStrategy.target".to_string(), request_authorization_strategy_target.to_string())
            .with_query_param("transportSecretProvider.target".to_string(), transport_secret_provider_target.to_string())
            .with_query_param("packageBuilder.target".to_string(), package_builder_target.to_string())
            .with_query_param("triggers.target".to_string(), triggers_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, title: &str, details: &str, enabled: bool, service_name: &str, log_level: &str, queue_processing_enabled: bool, package_exporter_target: &str, package_importer_target: &str, request_authorization_strategy_target: &str, triggers_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("title".to_string(), title.to_string())
            .with_query_param("details".to_string(), details.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .with_query_param("log.level".to_string(), log_level.to_string())
            .with_query_param("queue.processing.enabled".to_string(), queue_processing_enabled.to_string())
            .with_query_param("packageExporter.target".to_string(), package_exporter_target.to_string())
            .with_query_param("packageImporter.target".to_string(), package_importer_target.to_string())
            .with_query_param("requestAuthorizationStrategy.target".to_string(), request_authorization_strategy_target.to_string())
            .with_query_param("triggers.target".to_string(), triggers_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, title: &str, details: &str, enabled: bool, service_name: &str, log_level: &str, queue_processing_enabled: bool, passive_queues: Vec<String>, package_exporter_endpoints: Vec<String>, package_importer_endpoints: Vec<String>, retry_strategy: &str, retry_attempts: i32, pull_items: i32, http_conn_timeout: i32, request_authorization_strategy_target: &str, transport_secret_provider_target: &str, package_builder_target: &str, triggers_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("title".to_string(), title.to_string())
            .with_query_param("details".to_string(), details.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .with_query_param("log.level".to_string(), log_level.to_string())
            .with_query_param("queue.processing.enabled".to_string(), queue_processing_enabled.to_string())
            .with_query_param("passiveQueues".to_string(), passive_queues.join(",").to_string())
            .with_query_param("packageExporter.endpoints".to_string(), package_exporter_endpoints.join(",").to_string())
            .with_query_param("packageImporter.endpoints".to_string(), package_importer_endpoints.join(",").to_string())
            .with_query_param("retry.strategy".to_string(), retry_strategy.to_string())
            .with_query_param("retry.attempts".to_string(), retry_attempts.to_string())
            .with_query_param("pull.items".to_string(), pull_items.to_string())
            .with_query_param("http.conn.timeout".to_string(), http_conn_timeout.to_string())
            .with_query_param("requestAuthorizationStrategy.target".to_string(), request_authorization_strategy_target.to_string())
            .with_query_param("transportSecretProvider.target".to_string(), transport_secret_provider_target.to_string())
            .with_query_param("packageBuilder.target".to_string(), package_builder_target.to_string())
            .with_query_param("triggers.target".to_string(), triggers_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_monitor_distribution_queue_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str, number_of_retries_allowed: i32) -> Box<Future<Item = ::models::OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.name".to_string(), hc_name.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("hc.mbean.name".to_string(), hc_mbean_name.to_string())
            .with_query_param("numberOfRetriesAllowed".to_string(), number_of_retries_allowed.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, queue: &str, drop_invalid_items: bool, agent_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("queue".to_string(), queue.to_string())
            .with_query_param("drop.invalid.items".to_string(), drop_invalid_items.to_string())
            .with_query_param("agent.target".to_string(), agent_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_packaging_impl_exporter_local_distributio(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, package_builder_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("packageBuilder.target".to_string(), package_builder_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, endpoints: Vec<String>, pull_items: i32, package_builder_target: &str, transport_secret_provider_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("endpoints".to_string(), endpoints.join(",").to_string())
            .with_query_param("pull.items".to_string(), pull_items.to_string())
            .with_query_param("packageBuilder.target".to_string(), package_builder_target.to_string())
            .with_query_param("transportSecretProvider.target".to_string(), transport_secret_provider_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_packaging_impl_importer_local_distributio(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, package_builder_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("packageBuilder.target".to_string(), package_builder_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_packaging_impl_importer_remote_distributi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, endpoints: Vec<String>, transport_secret_provider_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("endpoints".to_string(), endpoints.join(",").to_string())
            .with_query_param("transportSecretProvider.target".to_string(), transport_secret_provider_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_packaging_impl_importer_repository_distri(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, service_name: &str, path: &str, privilege_name: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("service.name".to_string(), service_name.to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("privilege.name".to_string(), privilege_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_resources_impl_distribution_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_roots: &str, kind: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("provider.roots".to_string(), provider_roots.to_string())
            .with_query_param("kind".to_string(), kind.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_resources_impl_distribution_service_resour(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_roots: &str, kind: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("provider.roots".to_string(), provider_roots.to_string())
            .with_query_param("kind".to_string(), kind.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_serialization_impl_distribution_package_bu(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, _type: &str, format_target: &str, temp_fs_folder: &str, file_threshold: i32, memory_unit: &str, use_off_heap_memory: bool, digest_algorithm: &str, monitoring_queue_size: i32, cleanup_delay: i32, package_filters: Vec<String>, property_filters: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("type".to_string(), _type.to_string())
            .with_query_param("format.target".to_string(), format_target.to_string())
            .with_query_param("tempFsFolder".to_string(), temp_fs_folder.to_string())
            .with_query_param("fileThreshold".to_string(), file_threshold.to_string())
            .with_query_param("memoryUnit".to_string(), memory_unit.to_string())
            .with_query_param("useOffHeapMemory".to_string(), use_off_heap_memory.to_string())
            .with_query_param("digestAlgorithm".to_string(), digest_algorithm.to_string())
            .with_query_param("monitoringQueueSize".to_string(), monitoring_queue_size.to_string())
            .with_query_param("cleanupDelay".to_string(), cleanup_delay.to_string())
            .with_query_param("package.filters".to_string(), package_filters.join(",").to_string())
            .with_query_param("property.filters".to_string(), property_filters.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, _type: &str, import_mode: &str, acl_handling: &str, package_roots: &str, package_filters: Vec<String>, property_filters: Vec<String>, temp_fs_folder: &str, use_binary_references: bool, auto_save_threshold: i32, cleanup_delay: i32, file_threshold: i32, MEGA_BYTES: &str, use_off_heap_memory: bool, digest_algorithm: &str, monitoring_queue_size: i32, paths_mapping: Vec<String>, strict_import: bool) -> Box<Future<Item = ::models::OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("type".to_string(), _type.to_string())
            .with_query_param("importMode".to_string(), import_mode.to_string())
            .with_query_param("aclHandling".to_string(), acl_handling.to_string())
            .with_query_param("package.roots".to_string(), package_roots.to_string())
            .with_query_param("package.filters".to_string(), package_filters.join(",").to_string())
            .with_query_param("property.filters".to_string(), property_filters.join(",").to_string())
            .with_query_param("tempFsFolder".to_string(), temp_fs_folder.to_string())
            .with_query_param("useBinaryReferences".to_string(), use_binary_references.to_string())
            .with_query_param("autoSaveThreshold".to_string(), auto_save_threshold.to_string())
            .with_query_param("cleanupDelay".to_string(), cleanup_delay.to_string())
            .with_query_param("fileThreshold".to_string(), file_threshold.to_string())
            .with_query_param("MEGA_BYTES".to_string(), MEGA_BYTES.to_string())
            .with_query_param("useOffHeapMemory".to_string(), use_off_heap_memory.to_string())
            .with_query_param("digestAlgorithm".to_string(), digest_algorithm.to_string())
            .with_query_param("monitoringQueueSize".to_string(), monitoring_queue_size.to_string())
            .with_query_param("pathsMapping".to_string(), paths_mapping.join(",").to_string())
            .with_query_param("strictImport".to_string(), strict_import.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_transport_impl_user_credentials_distributi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, username: &str, password: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("username".to_string(), username.to_string())
            .with_query_param("password".to_string(), password.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_trigger_impl_distribution_event_distribute(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, path: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, path: &str, ignored_paths_patterns: Vec<String>, service_name: &str, deep: bool) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("ignoredPathsPatterns".to_string(), ignored_paths_patterns.join(",").to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .with_query_param("deep".to_string(), deep.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, path: &str, service_name: &str, nuggets_path: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .with_query_param("nuggetsPath".to_string(), nuggets_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, endpoint: &str, transport_secret_provider_target: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("endpoint".to_string(), endpoint.to_string())
            .with_query_param("transportSecretProvider.target".to_string(), transport_secret_provider_target.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, path: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, path: &str, seconds: &str, service_name: &str) -> Box<Future<Item = ::models::OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("seconds".to_string(), seconds.to_string())
            .with_query_param("serviceName".to_string(), service_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_engine_impl_auth_sling_authenticator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, osgi_http_whiteboard_context_select: &str, osgi_http_whiteboard_listener: &str, auth_sudo_cookie: &str, auth_sudo_parameter: &str, auth_annonymous: bool, sling_auth_requirements: Vec<String>, sling_auth_anonymous_user: &str, sling_auth_anonymous_password: &str, auth_http: &str, auth_http_realm: &str, auth_uri_suffix: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("osgi.http.whiteboard.context.select".to_string(), osgi_http_whiteboard_context_select.to_string())
            .with_query_param("osgi.http.whiteboard.listener".to_string(), osgi_http_whiteboard_listener.to_string())
            .with_query_param("auth.sudo.cookie".to_string(), auth_sudo_cookie.to_string())
            .with_query_param("auth.sudo.parameter".to_string(), auth_sudo_parameter.to_string())
            .with_query_param("auth.annonymous".to_string(), auth_annonymous.to_string())
            .with_query_param("sling.auth.requirements".to_string(), sling_auth_requirements.join(",").to_string())
            .with_query_param("sling.auth.anonymous.user".to_string(), sling_auth_anonymous_user.to_string())
            .with_query_param("sling.auth.anonymous.password".to_string(), sling_auth_anonymous_password.to_string())
            .with_query_param("auth.http".to_string(), auth_http.to_string())
            .with_query_param("auth.http.realm".to_string(), auth_http_realm.to_string())
            .with_query_param("auth.uri.suffix".to_string(), auth_uri_suffix.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, extensions: Vec<String>, min_duration_ms: i32, max_duration_ms: i32, compact_log_format: bool) -> Box<Future<Item = ::models::OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("extensions".to_string(), extensions.join(",").to_string())
            .with_query_param("minDurationMs".to_string(), min_duration_ms.to_string())
            .with_query_param("maxDurationMs".to_string(), max_duration_ms.to_string())
            .with_query_param("compactLogFormat".to_string(), compact_log_format.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_engine_impl_log_request_logger(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, request_log_output: &str, request_log_outputtype: i32, request_log_enabled: bool, access_log_output: &str, access_log_outputtype: i32, access_log_enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingEngineImplLogRequestLoggerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("request.log.output".to_string(), request_log_output.to_string())
            .with_query_param("request.log.outputtype".to_string(), request_log_outputtype.to_string())
            .with_query_param("request.log.enabled".to_string(), request_log_enabled.to_string())
            .with_query_param("access.log.output".to_string(), access_log_output.to_string())
            .with_query_param("access.log.outputtype".to_string(), access_log_outputtype.to_string())
            .with_query_param("access.log.enabled".to_string(), access_log_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_engine_impl_log_request_logger_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, request_log_service_format: &str, request_log_service_output: &str, request_log_service_outputtype: i32, request_log_service_onentry: bool) -> Box<Future<Item = ::models::OrgApacheSlingEngineImplLogRequestLoggerServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("request.log.service.format".to_string(), request_log_service_format.to_string())
            .with_query_param("request.log.service.output".to_string(), request_log_service_output.to_string())
            .with_query_param("request.log.service.outputtype".to_string(), request_log_service_outputtype.to_string())
            .with_query_param("request.log.service.onentry".to_string(), request_log_service_onentry.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_engine_impl_sling_main_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_max_calls: i32, sling_max_inclusions: i32, sling_trace_allow: bool, sling_max_record_requests: i32, sling_store_pattern_requests: Vec<String>, sling_serverinfo: &str, sling_additional_response_headers: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingEngineImplSlingMainServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.max.calls".to_string(), sling_max_calls.to_string())
            .with_query_param("sling.max.inclusions".to_string(), sling_max_inclusions.to_string())
            .with_query_param("sling.trace.allow".to_string(), sling_trace_allow.to_string())
            .with_query_param("sling.max.record.requests".to_string(), sling_max_record_requests.to_string())
            .with_query_param("sling.store.pattern.requests".to_string(), sling_store_pattern_requests.join(",").to_string())
            .with_query_param("sling.serverinfo".to_string(), sling_serverinfo.to_string())
            .with_query_param("sling.additional.response.headers".to_string(), sling_additional_response_headers.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_engine_parameters(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_default_parameter_encoding: &str, sling_default_max_parameters: i32, file_location: &str, file_threshold: i32, file_max: i32, request_max: i32, sling_default_parameter_check_for_additional_container_parameters: bool) -> Box<Future<Item = ::models::OrgApacheSlingEngineParametersInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.engine.parameters".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.default.parameter.encoding".to_string(), sling_default_parameter_encoding.to_string())
            .with_query_param("sling.default.max.parameters".to_string(), sling_default_max_parameters.to_string())
            .with_query_param("file.location".to_string(), file_location.to_string())
            .with_query_param("file.threshold".to_string(), file_threshold.to_string())
            .with_query_param("file.max".to_string(), file_max.to_string())
            .with_query_param("request.max".to_string(), request_max.to_string())
            .with_query_param("sling.default.parameter.checkForAdditionalContainerParameters".to_string(), sling_default_parameter_check_for_additional_container_parameters.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_event_impl_eventing_thread_pool(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, min_pool_size: i32) -> Box<Future<Item = ::models::OrgApacheSlingEventImplEventingThreadPoolInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("minPoolSize".to_string(), min_pool_size.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_event_impl_jobs_default_job_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, queue_priority: &str, queue_retries: i32, queue_retrydelay: i32, queue_maxparallel: i32) -> Box<Future<Item = ::models::OrgApacheSlingEventImplJobsDefaultJobManagerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("queue.priority".to_string(), queue_priority.to_string())
            .with_query_param("queue.retries".to_string(), queue_retries.to_string())
            .with_query_param("queue.retrydelay".to_string(), queue_retrydelay.to_string())
            .with_query_param("queue.maxparallel".to_string(), queue_maxparallel.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_event_impl_jobs_jcr_persistence_handler(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, job_consumermanager_disable_distribution: bool, startup_delay: i32, cleanup_period: i32) -> Box<Future<Item = ::models::OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("job.consumermanager.disableDistribution".to_string(), job_consumermanager_disable_distribution.to_string())
            .with_query_param("startup.delay".to_string(), startup_delay.to_string())
            .with_query_param("cleanup.period".to_string(), cleanup_period.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_event_impl_jobs_job_consumer_manager(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_installer_configuration_persist: bool, job_consumermanager_whitelist: Vec<String>, job_consumermanager_blacklist: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingEventImplJobsJobConsumerManagerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.sling.installer.configuration.persist".to_string(), org_apache_sling_installer_configuration_persist.to_string())
            .with_query_param("job.consumermanager.whitelist".to_string(), job_consumermanager_whitelist.join(",").to_string())
            .with_query_param("job.consumermanager.blacklist".to_string(), job_consumermanager_blacklist.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_event_jobs_queue_configuration(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, queue_name: &str, queue_topics: Vec<String>, queue_type: &str, queue_priority: &str, queue_retries: i32, queue_retrydelay: i32, queue_maxparallel: f32, queue_keep_jobs: bool, queue_prefer_run_on_creation_instance: bool, queue_thread_pool_size: i32, service_ranking: i32) -> Box<Future<Item = ::models::OrgApacheSlingEventJobsQueueConfigurationInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("queue.name".to_string(), queue_name.to_string())
            .with_query_param("queue.topics".to_string(), queue_topics.join(",").to_string())
            .with_query_param("queue.type".to_string(), queue_type.to_string())
            .with_query_param("queue.priority".to_string(), queue_priority.to_string())
            .with_query_param("queue.retries".to_string(), queue_retries.to_string())
            .with_query_param("queue.retrydelay".to_string(), queue_retrydelay.to_string())
            .with_query_param("queue.maxparallel".to_string(), queue_maxparallel.to_string())
            .with_query_param("queue.keepJobs".to_string(), queue_keep_jobs.to_string())
            .with_query_param("queue.preferRunOnCreationInstance".to_string(), queue_prefer_run_on_creation_instance.to_string())
            .with_query_param("queue.threadPoolSize".to_string(), queue_thread_pool_size.to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, users: Vec<String>, groups: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("users".to_string(), users.join(",").to_string())
            .with_query_param("groups".to_string(), groups.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_featureflags_feature(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, description: &str, enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingFeatureflagsFeatureInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.featureflags.Feature".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("description".to_string(), description.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_featureflags_impl_configured_feature(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, name: &str, description: &str, enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("name".to_string(), name.to_string())
            .with_query_param("description".to_string(), description.to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_hapi_impl_h_api_util_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_hapi_tools_resourcetype: &str, org_apache_sling_hapi_tools_collectionresourcetype: &str, org_apache_sling_hapi_tools_searchpaths: Vec<String>, org_apache_sling_hapi_tools_externalurl: &str, org_apache_sling_hapi_tools_enabled: bool) -> Box<Future<Item = ::models::OrgApacheSlingHapiImplHApiUtilImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.sling.hapi.tools.resourcetype".to_string(), org_apache_sling_hapi_tools_resourcetype.to_string())
            .with_query_param("org.apache.sling.hapi.tools.collectionresourcetype".to_string(), org_apache_sling_hapi_tools_collectionresourcetype.to_string())
            .with_query_param("org.apache.sling.hapi.tools.searchpaths".to_string(), org_apache_sling_hapi_tools_searchpaths.join(",").to_string())
            .with_query_param("org.apache.sling.hapi.tools.externalurl".to_string(), org_apache_sling_hapi_tools_externalurl.to_string())
            .with_query_param("org.apache.sling.hapi.tools.enabled".to_string(), org_apache_sling_hapi_tools_enabled.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_hc_core_impl_composite_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str, filter_tags: Vec<String>, filter_combine_tags_with_or: bool) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplCompositeHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.name".to_string(), hc_name.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("hc.mbean.name".to_string(), hc_mbean_name.to_string())
            .with_query_param("filter.tags".to_string(), filter_tags.join(",").to_string())
            .with_query_param("filter.combineTagsWithOr".to_string(), filter_combine_tags_with_or.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_hc_core_impl_executor_health_check_executor_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, timeout_in_ms: i32, long_running_future_threshold_for_critical_ms: i32, result_cache_ttl_in_ms: i32) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("timeoutInMs".to_string(), timeout_in_ms.to_string())
            .with_query_param("longRunningFutureThresholdForCriticalMs".to_string(), long_running_future_threshold_for_critical_ms.to_string())
            .with_query_param("resultCacheTtlInMs".to_string(), result_cache_ttl_in_ms.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_hc_core_impl_jmx_attribute_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str, mbean_name: &str, attribute_name: &str, attribute_value_constraint: &str) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.name".to_string(), hc_name.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("hc.mbean.name".to_string(), hc_mbean_name.to_string())
            .with_query_param("mbean.name".to_string(), mbean_name.to_string())
            .with_query_param("attribute.name".to_string(), attribute_name.to_string())
            .with_query_param("attribute.value.constraint".to_string(), attribute_value_constraint.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_hc_core_impl_scriptable_health_check(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, hc_name: &str, hc_tags: Vec<String>, hc_mbean_name: &str, expression: &str, language_extension: &str) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplScriptableHealthCheckInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("hc.name".to_string(), hc_name.to_string())
            .with_query_param("hc.tags".to_string(), hc_tags.join(",").to_string())
            .with_query_param("hc.mbean.name".to_string(), hc_mbean_name.to_string())
            .with_query_param("expression".to_string(), expression.to_string())
            .with_query_param("language.extension".to_string(), language_extension.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, servlet_path: &str, disabled: bool, cors_access_control_allow_origin: &str) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("servletPath".to_string(), servlet_path.to_string())
            .with_query_param("disabled".to_string(), disabled.to_string())
            .with_query_param("cors.accessControlAllowOrigin".to_string(), cors_access_control_allow_origin.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, total_width: i32, col_width_name: i32, col_width_result: i32, col_width_timing: i32) -> Box<Future<Item = ::models::OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("totalWidth".to_string(), total_width.to_string())
            .with_query_param("colWidthName".to_string(), col_width_name.to_string())
            .with_query_param("colWidthResult".to_string(), col_width_result.to_string())
            .with_query_param("colWidthTiming".to_string(), col_width_timing.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_i18n_impl_i18_n_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, sling_filter_scope: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingI18nImplI18NFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("sling.filter.scope".to_string(), sling_filter_scope.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_i18n_impl_jcr_resource_bundle_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, locale_default: &str, preload_bundles: bool, invalidation_delay: i32) -> Box<Future<Item = ::models::OrgApacheSlingI18nImplJcrResourceBundleProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("locale.default".to_string(), locale_default.to_string())
            .with_query_param("preload.bundles".to_string(), preload_bundles.to_string())
            .with_query_param("invalidation.delay".to_string(), invalidation_delay.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_installer_provider_jcr_impl_jcr_installer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, handler_schemes: Vec<String>, sling_jcrinstall_folder_name_regexp: &str, sling_jcrinstall_folder_max_depth: i32, sling_jcrinstall_search_path: Vec<String>, sling_jcrinstall_new_config_path: &str, sling_jcrinstall_signal_path: &str, sling_jcrinstall_enable_writeback: bool) -> Box<Future<Item = ::models::OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("handler.schemes".to_string(), handler_schemes.join(",").to_string())
            .with_query_param("sling.jcrinstall.folder.name.regexp".to_string(), sling_jcrinstall_folder_name_regexp.to_string())
            .with_query_param("sling.jcrinstall.folder.max.depth".to_string(), sling_jcrinstall_folder_max_depth.to_string())
            .with_query_param("sling.jcrinstall.search.path".to_string(), sling_jcrinstall_search_path.join(",").to_string())
            .with_query_param("sling.jcrinstall.new.config.path".to_string(), sling_jcrinstall_new_config_path.to_string())
            .with_query_param("sling.jcrinstall.signal.path".to_string(), sling_jcrinstall_signal_path.to_string())
            .with_query_param("sling.jcrinstall.enable.writeback".to_string(), sling_jcrinstall_enable_writeback.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_base_internal_login_admin_whitelist(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, whitelist_bypass: bool, whitelist_bundles_regexp: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("whitelist.bypass".to_string(), whitelist_bypass.to_string())
            .with_query_param("whitelist.bundles.regexp".to_string(), whitelist_bundles_regexp.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, whitelist_name: &str, whitelist_bundles: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("whitelist.name".to_string(), whitelist_name.to_string())
            .with_query_param("whitelist.bundles".to_string(), whitelist_bundles.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, alias: &str, dav_create_absolute_uri: bool, dav_protectedhandlers: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("alias".to_string(), alias.to_string())
            .with_query_param("dav.create-absolute-uri".to_string(), dav_create_absolute_uri.to_string())
            .with_query_param("dav.protectedhandlers".to_string(), dav_protectedhandlers.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, java_naming_factory_initial: &str, java_naming_provider_url: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("java.naming.factory.initial".to_string(), java_naming_factory_initial.to_string())
            .with_query_param("java.naming.provider.url".to_string(), java_naming_provider_url.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, port: i32) -> Box<Future<Item = ::models::OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("port".to_string(), port.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_repoinit_impl_repository_initializer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, references: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("references".to_string(), references.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_repoinit_repository_initializer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, references: Vec<String>, scripts: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingJcrRepoinitRepositoryInitializerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("references".to_string(), references.join(",").to_string())
            .with_query_param("scripts".to_string(), scripts.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, resource_resolver_searchpath: Vec<String>, resource_resolver_manglenamespaces: bool, resource_resolver_allow_direct: bool, resource_resolver_required_providers: Vec<String>, resource_resolver_required_providernames: Vec<String>, resource_resolver_virtual: Vec<String>, resource_resolver_mapping: Vec<String>, resource_resolver_map_location: &str, resource_resolver_map_observation: Vec<String>, resource_resolver_default_vanity_redirect_status: i32, resource_resolver_enable_vanitypath: bool, resource_resolver_vanitypath_max_entries: i32, resource_resolver_vanitypath_max_entries_startup: bool, resource_resolver_vanitypath_bloomfilter_max_bytes: i32, resource_resolver_optimize_alias_resolution: bool, resource_resolver_vanitypath_whitelist: Vec<String>, resource_resolver_vanitypath_blacklist: Vec<String>, resource_resolver_vanity_precedence: bool, resource_resolver_providerhandling_paranoid: bool, resource_resolver_log_closing: bool, resource_resolver_log_unclosed: bool) -> Box<Future<Item = ::models::OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("resource.resolver.searchpath".to_string(), resource_resolver_searchpath.join(",").to_string())
            .with_query_param("resource.resolver.manglenamespaces".to_string(), resource_resolver_manglenamespaces.to_string())
            .with_query_param("resource.resolver.allowDirect".to_string(), resource_resolver_allow_direct.to_string())
            .with_query_param("resource.resolver.required.providers".to_string(), resource_resolver_required_providers.join(",").to_string())
            .with_query_param("resource.resolver.required.providernames".to_string(), resource_resolver_required_providernames.join(",").to_string())
            .with_query_param("resource.resolver.virtual".to_string(), resource_resolver_virtual.join(",").to_string())
            .with_query_param("resource.resolver.mapping".to_string(), resource_resolver_mapping.join(",").to_string())
            .with_query_param("resource.resolver.map.location".to_string(), resource_resolver_map_location.to_string())
            .with_query_param("resource.resolver.map.observation".to_string(), resource_resolver_map_observation.join(",").to_string())
            .with_query_param("resource.resolver.default.vanity.redirect.status".to_string(), resource_resolver_default_vanity_redirect_status.to_string())
            .with_query_param("resource.resolver.enable.vanitypath".to_string(), resource_resolver_enable_vanitypath.to_string())
            .with_query_param("resource.resolver.vanitypath.maxEntries".to_string(), resource_resolver_vanitypath_max_entries.to_string())
            .with_query_param("resource.resolver.vanitypath.maxEntries.startup".to_string(), resource_resolver_vanitypath_max_entries_startup.to_string())
            .with_query_param("resource.resolver.vanitypath.bloomfilter.maxBytes".to_string(), resource_resolver_vanitypath_bloomfilter_max_bytes.to_string())
            .with_query_param("resource.resolver.optimize.alias.resolution".to_string(), resource_resolver_optimize_alias_resolution.to_string())
            .with_query_param("resource.resolver.vanitypath.whitelist".to_string(), resource_resolver_vanitypath_whitelist.join(",").to_string())
            .with_query_param("resource.resolver.vanitypath.blacklist".to_string(), resource_resolver_vanitypath_blacklist.join(",").to_string())
            .with_query_param("resource.resolver.vanity.precedence".to_string(), resource_resolver_vanity_precedence.to_string())
            .with_query_param("resource.resolver.providerhandling.paranoid".to_string(), resource_resolver_providerhandling_paranoid.to_string())
            .with_query_param("resource.resolver.log.closing".to_string(), resource_resolver_log_closing.to_string())
            .with_query_param("resource.resolver.log.unclosed".to_string(), resource_resolver_log_unclosed.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_resource_internal_jcr_system_user_validator(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, allow_only_system_user: bool) -> Box<Future<Item = ::models::OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("allow.only.system.user".to_string(), allow_only_system_user.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, path: &str, checkpath_prefix: &str, jcr_path: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("checkpath.prefix".to_string(), checkpath_prefix.to_string())
            .with_query_param("jcrPath".to_string(), jcr_path.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_webdav_impl_handler_default_handler_service(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, type_collections: &str, type_noncollections: &str, type_content: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("type.collections".to_string(), type_collections.to_string())
            .with_query_param("type.noncollections".to_string(), type_noncollections.to_string())
            .with_query_param("type.content".to_string(), type_content.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32) -> Box<Future<Item = ::models::OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, dav_root: &str, dav_create_absolute_uri: bool, dav_realm: &str, collection_types: Vec<String>, filter_prefixes: Vec<String>, filter_types: &str, filter_uris: &str, type_collections: &str, type_noncollections: &str, type_content: &str) -> Box<Future<Item = ::models::OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("dav.root".to_string(), dav_root.to_string())
            .with_query_param("dav.create-absolute-uri".to_string(), dav_create_absolute_uri.to_string())
            .with_query_param("dav.realm".to_string(), dav_realm.to_string())
            .with_query_param("collection.types".to_string(), collection_types.join(",").to_string())
            .with_query_param("filter.prefixes".to_string(), filter_prefixes.join(",").to_string())
            .with_query_param("filter.types".to_string(), filter_types.to_string())
            .with_query_param("filter.uris".to_string(), filter_uris.to_string())
            .with_query_param("type.collections".to_string(), type_collections.to_string())
            .with_query_param("type.noncollections".to_string(), type_noncollections.to_string())
            .with_query_param("type.content".to_string(), type_content.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_jmx_provider_impl_jmx_resource_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, provider_roots: &str) -> Box<Future<Item = ::models::OrgApacheSlingJmxProviderImplJmxResourceProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("provider.roots".to_string(), provider_roots.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_models_impl_model_adapter_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, osgi_http_whiteboard_listener: &str, osgi_http_whiteboard_context_select: &str, max_recursion_depth: i32, cleanup_job_period: i32) -> Box<Future<Item = ::models::OrgApacheSlingModelsImplModelAdapterFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("osgi.http.whiteboard.listener".to_string(), osgi_http_whiteboard_listener.to_string())
            .with_query_param("osgi.http.whiteboard.context.select".to_string(), osgi_http_whiteboard_context_select.to_string())
            .with_query_param("max.recursion.depth".to_string(), max_recursion_depth.to_string())
            .with_query_param("cleanup.job.period".to_string(), cleanup_job_period.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_models_jacksonexporter_impl_resource_module_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, max_recursion_levels: i32) -> Box<Future<Item = ::models::OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("max.recursion.levels".to_string(), max_recursion_levels.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, felix_inventory_printer_name: &str, felix_inventory_printer_title: &str, path: &str) -> Box<Future<Item = ::models::OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("felix.inventory.printer.name".to_string(), felix_inventory_printer_name.to_string())
            .with_query_param("felix.inventory.printer.title".to_string(), felix_inventory_printer_title.to_string())
            .with_query_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, merge_root: &str, merge_read_only: bool) -> Box<Future<Item = ::models::OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("merge.root".to_string(), merge_root.to_string())
            .with_query_param("merge.readOnly".to_string(), merge_read_only.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_resourcemerger_picker_overriding(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, merge_root: &str, merge_read_only: bool) -> Box<Future<Item = ::models::OrgApacheSlingResourcemergerPickerOverridingInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("merge.root".to_string(), merge_root.to_string())
            .with_query_param("merge.readOnly".to_string(), merge_read_only.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_scripting_core_impl_script_cache_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_scripting_cache_size: i32, org_apache_sling_scripting_cache_additional_extensions: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingScriptingCoreImplScriptCacheImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.sling.scripting.cache.size".to_string(), org_apache_sling_scripting_cache_size.to_string())
            .with_query_param("org.apache.sling.scripting.cache.additional_extensions".to_string(), org_apache_sling_scripting_cache_additional_extensions.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, log_stacktrace_onclose: bool) -> Box<Future<Item = ::models::OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("log.stacktrace.onclose".to_string(), log_stacktrace_onclose.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_scripting_java_impl_java_script_engine_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, java_classdebuginfo: bool, java_java_encoding: &str, java_compiler_source_vm: &str, java_compiler_target_vm: &str) -> Box<Future<Item = ::models::OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("java.classdebuginfo".to_string(), java_classdebuginfo.to_string())
            .with_query_param("java.javaEncoding".to_string(), java_java_encoding.to_string())
            .with_query_param("java.compilerSourceVM".to_string(), java_compiler_source_vm.to_string())
            .with_query_param("java.compilerTargetVM".to_string(), java_compiler_target_vm.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_scripting_javascript_rhino_opt_level: i32) -> Box<Future<Item = ::models::OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.sling.scripting.javascript.rhino.optLevel".to_string(), org_apache_sling_scripting_javascript_rhino_opt_level.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_scripting_jsp_jsp_script_engine_factory(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, jasper_compiler_target_vm: &str, jasper_compiler_source_vm: &str, jasper_classdebuginfo: bool, jasper_enable_pooling: bool, jasper_ie_class_id: &str, jasper_gen_string_as_char_array: bool, jasper_keepgenerated: bool, jasper_mappedfile: bool, jasper_trim_spaces: bool, jasper_display_source_fragments: bool, default_is_session: bool) -> Box<Future<Item = ::models::OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("jasper.compilerTargetVM".to_string(), jasper_compiler_target_vm.to_string())
            .with_query_param("jasper.compilerSourceVM".to_string(), jasper_compiler_source_vm.to_string())
            .with_query_param("jasper.classdebuginfo".to_string(), jasper_classdebuginfo.to_string())
            .with_query_param("jasper.enablePooling".to_string(), jasper_enable_pooling.to_string())
            .with_query_param("jasper.ieClassId".to_string(), jasper_ie_class_id.to_string())
            .with_query_param("jasper.genStringAsCharArray".to_string(), jasper_gen_string_as_char_array.to_string())
            .with_query_param("jasper.keepgenerated".to_string(), jasper_keepgenerated.to_string())
            .with_query_param("jasper.mappedfile".to_string(), jasper_mappedfile.to_string())
            .with_query_param("jasper.trimSpaces".to_string(), jasper_trim_spaces.to_string())
            .with_query_param("jasper.displaySourceFragments".to_string(), jasper_display_source_fragments.to_string())
            .with_query_param("default.is.session".to_string(), default_is_session.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, org_apache_sling_scripting_sightly_js_bindings: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("org.apache.sling.scripting.sightly.js.bindings".to_string(), org_apache_sling_scripting_sightly_js_bindings.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_security_impl_content_disposition_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_content_disposition_paths: Vec<String>, sling_content_disposition_excluded_paths: Vec<String>, sling_content_disposition_all_paths: bool) -> Box<Future<Item = ::models::OrgApacheSlingSecurityImplContentDispositionFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.content.disposition.paths".to_string(), sling_content_disposition_paths.join(",").to_string())
            .with_query_param("sling.content.disposition.excluded.paths".to_string(), sling_content_disposition_excluded_paths.join(",").to_string())
            .with_query_param("sling.content.disposition.all.paths".to_string(), sling_content_disposition_all_paths.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_security_impl_referrer_filter(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, allow_empty: bool, allow_hosts: Vec<String>, allow_hosts_regexp: Vec<String>, filter_methods: Vec<String>, exclude_agents_regexp: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingSecurityImplReferrerFilterInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("allow.empty".to_string(), allow_empty.to_string())
            .with_query_param("allow.hosts".to_string(), allow_hosts.join(",").to_string())
            .with_query_param("allow.hosts.regexp".to_string(), allow_hosts_regexp.join(",").to_string())
            .with_query_param("filter.methods".to_string(), filter_methods.join(",").to_string())
            .with_query_param("exclude.agents.regexp".to_string(), exclude_agents_regexp.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, user_mapping: Vec<String>, user_default: &str, user_enable_default_mapping: bool, require_validation: bool) -> Box<Future<Item = ::models::OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("user.mapping".to_string(), user_mapping.join(",").to_string())
            .with_query_param("user.default".to_string(), user_default.to_string())
            .with_query_param("user.enable.default.mapping".to_string(), user_enable_default_mapping.to_string())
            .with_query_param("require.validation".to_string(), require_validation.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, service_ranking: i32, user_mapping: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("user.mapping".to_string(), user_mapping.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_servlets_get_default_get_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, aliases: Vec<String>, index: bool, index_files: Vec<String>, enable_html: bool, enable_json: bool, enable_txt: bool, enable_xml: bool, json_maximumresults: i32, ecma_suport: bool) -> Box<Future<Item = ::models::OrgApacheSlingServletsGetDefaultGetServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("aliases".to_string(), aliases.join(",").to_string())
            .with_query_param("index".to_string(), index.to_string())
            .with_query_param("index.files".to_string(), index_files.join(",").to_string())
            .with_query_param("enable.html".to_string(), enable_html.to_string())
            .with_query_param("enable.json".to_string(), enable_json.to_string())
            .with_query_param("enable.txt".to_string(), enable_txt.to_string())
            .with_query_param("enable.xml".to_string(), enable_xml.to_string())
            .with_query_param("json.maximumresults".to_string(), json_maximumresults.to_string())
            .with_query_param("ecmaSuport".to_string(), ecma_suport.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_servlets_get_impl_version_version_info_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_servlet_selectors: Vec<String>, ecma_suport: bool) -> Box<Future<Item = ::models::OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.servlet.selectors".to_string(), sling_servlet_selectors.join(",").to_string())
            .with_query_param("ecmaSuport".to_string(), ecma_suport.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, scheduler_expression: &str, scheduler_concurrent: bool, chunk_cleanup_age: i32) -> Box<Future<Item = ::models::OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("scheduler.expression".to_string(), scheduler_expression.to_string())
            .with_query_param("scheduler.concurrent".to_string(), scheduler_concurrent.to_string())
            .with_query_param("chunk.cleanup.age".to_string(), chunk_cleanup_age.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_servlets_post_impl_sling_post_servlet(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, servlet_post_date_formats: Vec<String>, servlet_post_node_name_hints: Vec<String>, servlet_post_node_name_max_length: i32, servlet_post_checkin_new_versionable_nodes: bool, servlet_post_auto_checkout: bool, servlet_post_auto_checkin: bool, servlet_post_ignore_pattern: &str) -> Box<Future<Item = ::models::OrgApacheSlingServletsPostImplSlingPostServletInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("servlet.post.dateFormats".to_string(), servlet_post_date_formats.join(",").to_string())
            .with_query_param("servlet.post.nodeNameHints".to_string(), servlet_post_node_name_hints.join(",").to_string())
            .with_query_param("servlet.post.nodeNameMaxLength".to_string(), servlet_post_node_name_max_length.to_string())
            .with_query_param("servlet.post.checkinNewVersionableNodes".to_string(), servlet_post_checkin_new_versionable_nodes.to_string())
            .with_query_param("servlet.post.autoCheckout".to_string(), servlet_post_auto_checkout.to_string())
            .with_query_param("servlet.post.autoCheckin".to_string(), servlet_post_auto_checkin.to_string())
            .with_query_param("servlet.post.ignorePattern".to_string(), servlet_post_ignore_pattern.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_servlets_resolver_sling_servlet_resolver(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, servletresolver_servlet_root: &str, servletresolver_cache_size: i32, servletresolver_paths: Vec<String>, servletresolver_default_extensions: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingServletsResolverSlingServletResolverInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("servletresolver.servletRoot".to_string(), servletresolver_servlet_root.to_string())
            .with_query_param("servletresolver.cacheSize".to_string(), servletresolver_cache_size.to_string())
            .with_query_param("servletresolver.paths".to_string(), servletresolver_paths.join(",").to_string())
            .with_query_param("servletresolver.defaultExtensions".to_string(), servletresolver_default_extensions.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_settings_impl_sling_settings_service_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, sling_name: &str, sling_description: &str) -> Box<Future<Item = ::models::OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("sling.name".to_string(), sling_name.to_string())
            .with_query_param("sling.description".to_string(), sling_description.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_startupfilter_impl_startup_filter_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, active_by_default: bool, default_message: &str) -> Box<Future<Item = ::models::OrgApacheSlingStartupfilterImplStartupFilterImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("active.by.default".to_string(), active_by_default.to_string())
            .with_query_param("default.message".to_string(), default_message.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_tenant_internal_tenant_provider_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, tenant_root: &str, tenant_path_matcher: Vec<String>) -> Box<Future<Item = ::models::OrgApacheSlingTenantInternalTenantProviderImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("tenant.root".to_string(), tenant_root.to_string())
            .with_query_param("tenant.path.matcher".to_string(), tenant_path_matcher.join(",").to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_tracer_internal_log_tracer(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, tracer_sets: Vec<String>, enabled: bool, servlet_enabled: bool, recording_cache_size_in_mb: i32, recording_cache_duration_in_secs: i32, recording_compression_enabled: bool, gzip_response: bool) -> Box<Future<Item = ::models::OrgApacheSlingTracerInternalLogTracerInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("tracerSets".to_string(), tracer_sets.join(",").to_string())
            .with_query_param("enabled".to_string(), enabled.to_string())
            .with_query_param("servletEnabled".to_string(), servlet_enabled.to_string())
            .with_query_param("recordingCacheSizeInMB".to_string(), recording_cache_size_in_mb.to_string())
            .with_query_param("recordingCacheDurationInSecs".to_string(), recording_cache_duration_in_secs.to_string())
            .with_query_param("recordingCompressionEnabled".to_string(), recording_compression_enabled.to_string())
            .with_query_param("gzipResponse".to_string(), gzip_response.to_string())
            .execute(self.configuration.borrow())
    }

    fn org_apache_sling_xss_impl_xss_filter_impl(&self, post: bool, apply: bool, delete: bool, action: &str, location: &str, propertylist: Vec<String>, policy_path: &str) -> Box<Future<Item = ::models::OrgApacheSlingXssImplXssFilterImplInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("post".to_string(), post.to_string())
            .with_query_param("apply".to_string(), apply.to_string())
            .with_query_param("delete".to_string(), delete.to_string())
            .with_query_param("action".to_string(), action.to_string())
            .with_query_param("$location".to_string(), location.to_string())
            .with_query_param("propertylist".to_string(), propertylist.join(",").to_string())
            .with_query_param("policyPath".to_string(), policy_path.to_string())
            .execute(self.configuration.borrow())
    }

}
