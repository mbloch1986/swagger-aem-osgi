/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties()
{
    m_Portal_outboxesIsSet = false;
    m_Draft_data_serviceIsSet = false;
    m_Draft_metadata_serviceIsSet = false;
    m_Submit_data_serviceIsSet = false;
    m_Submit_metadata_serviceIsSet = false;
    m_PendingSign_data_serviceIsSet = false;
    m_PendingSign_metadata_serviceIsSet = false;
    
}

ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::~ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties()
{
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Portal_outboxesIsSet)
    {
        val["portal.outboxes"] = ModelBase::toJson(m_Portal_outboxes);
    }
    if(m_Draft_data_serviceIsSet)
    {
        val["draft.data.service"] = ModelBase::toJson(m_Draft_data_service);
    }
    if(m_Draft_metadata_serviceIsSet)
    {
        val["draft.metadata.service"] = ModelBase::toJson(m_Draft_metadata_service);
    }
    if(m_Submit_data_serviceIsSet)
    {
        val["submit.data.service"] = ModelBase::toJson(m_Submit_data_service);
    }
    if(m_Submit_metadata_serviceIsSet)
    {
        val["submit.metadata.service"] = ModelBase::toJson(m_Submit_metadata_service);
    }
    if(m_PendingSign_data_serviceIsSet)
    {
        val["pendingSign.data.service"] = ModelBase::toJson(m_PendingSign_data_service);
    }
    if(m_PendingSign_metadata_serviceIsSet)
    {
        val["pendingSign.metadata.service"] = ModelBase::toJson(m_PendingSign_metadata_service);
    }
    

    return val;
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::fromJson(nlohmann::json& val)
{
    if(val.find("portal.outboxes") != val.end())
    {
        if(!val["portal.outboxes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["portal.outboxes"]);
            setPortalOutboxes( newItem );
        }
        
    }
    if(val.find("draft.data.service") != val.end())
    {
        if(!val["draft.data.service"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["draft.data.service"]);
            setDraftDataService( newItem );
        }
        
    }
    if(val.find("draft.metadata.service") != val.end())
    {
        if(!val["draft.metadata.service"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["draft.metadata.service"]);
            setDraftMetadataService( newItem );
        }
        
    }
    if(val.find("submit.data.service") != val.end())
    {
        if(!val["submit.data.service"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["submit.data.service"]);
            setSubmitDataService( newItem );
        }
        
    }
    if(val.find("submit.metadata.service") != val.end())
    {
        if(!val["submit.metadata.service"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["submit.metadata.service"]);
            setSubmitMetadataService( newItem );
        }
        
    }
    if(val.find("pendingSign.data.service") != val.end())
    {
        if(!val["pendingSign.data.service"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pendingSign.data.service"]);
            setPendingSignDataService( newItem );
        }
        
    }
    if(val.find("pendingSign.metadata.service") != val.end())
    {
        if(!val["pendingSign.metadata.service"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pendingSign.metadata.service"]);
            setPendingSignMetadataService( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPortalOutboxes() const
{
    return m_Portal_outboxes;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPortalOutboxes(ConfigNodePropertyArray const& value)
{
    m_Portal_outboxes = value;
    m_Portal_outboxesIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::portalOutboxesIsSet() const
{
    return m_Portal_outboxesIsSet;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetPortal_outboxes()
{
    m_Portal_outboxesIsSet = false;
}
ConfigNodePropertyString ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getDraftDataService() const
{
    return m_Draft_data_service;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setDraftDataService(ConfigNodePropertyString const& value)
{
    m_Draft_data_service = value;
    m_Draft_data_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::draftDataServiceIsSet() const
{
    return m_Draft_data_serviceIsSet;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetDraft_data_service()
{
    m_Draft_data_serviceIsSet = false;
}
ConfigNodePropertyString ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getDraftMetadataService() const
{
    return m_Draft_metadata_service;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setDraftMetadataService(ConfigNodePropertyString const& value)
{
    m_Draft_metadata_service = value;
    m_Draft_metadata_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::draftMetadataServiceIsSet() const
{
    return m_Draft_metadata_serviceIsSet;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetDraft_metadata_service()
{
    m_Draft_metadata_serviceIsSet = false;
}
ConfigNodePropertyString ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getSubmitDataService() const
{
    return m_Submit_data_service;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setSubmitDataService(ConfigNodePropertyString const& value)
{
    m_Submit_data_service = value;
    m_Submit_data_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::submitDataServiceIsSet() const
{
    return m_Submit_data_serviceIsSet;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetSubmit_data_service()
{
    m_Submit_data_serviceIsSet = false;
}
ConfigNodePropertyString ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getSubmitMetadataService() const
{
    return m_Submit_metadata_service;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setSubmitMetadataService(ConfigNodePropertyString const& value)
{
    m_Submit_metadata_service = value;
    m_Submit_metadata_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::submitMetadataServiceIsSet() const
{
    return m_Submit_metadata_serviceIsSet;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetSubmit_metadata_service()
{
    m_Submit_metadata_serviceIsSet = false;
}
ConfigNodePropertyString ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPendingSignDataService() const
{
    return m_PendingSign_data_service;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPendingSignDataService(ConfigNodePropertyString const& value)
{
    m_PendingSign_data_service = value;
    m_PendingSign_data_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::pendingSignDataServiceIsSet() const
{
    return m_PendingSign_data_serviceIsSet;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetPendingSign_data_service()
{
    m_PendingSign_data_serviceIsSet = false;
}
ConfigNodePropertyString ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPendingSignMetadataService() const
{
    return m_PendingSign_metadata_service;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPendingSignMetadataService(ConfigNodePropertyString const& value)
{
    m_PendingSign_metadata_service = value;
    m_PendingSign_metadata_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::pendingSignMetadataServiceIsSet() const
{
    return m_PendingSign_metadata_serviceIsSet;
}
void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetPendingSign_metadata_service()
{
    m_PendingSign_metadata_serviceIsSet = false;
}

}
}
}
}

