<?php
/**
 * OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingDistributionSerializationImplDistributionPackageBuProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'type' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'format_target' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'temp_fs_folder' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'file_threshold' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'memory_unit' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'use_off_heap_memory' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'digest_algorithm' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'monitoring_queue_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cleanup_delay' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'package_filters' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'property_filters' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'type' => null,
        'format_target' => null,
        'temp_fs_folder' => null,
        'file_threshold' => null,
        'memory_unit' => null,
        'use_off_heap_memory' => null,
        'digest_algorithm' => null,
        'monitoring_queue_size' => null,
        'cleanup_delay' => null,
        'package_filters' => null,
        'property_filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'format_target' => 'format.target',
        'temp_fs_folder' => 'tempFsFolder',
        'file_threshold' => 'fileThreshold',
        'memory_unit' => 'memoryUnit',
        'use_off_heap_memory' => 'useOffHeapMemory',
        'digest_algorithm' => 'digestAlgorithm',
        'monitoring_queue_size' => 'monitoringQueueSize',
        'cleanup_delay' => 'cleanupDelay',
        'package_filters' => 'package.filters',
        'property_filters' => 'property.filters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'format_target' => 'setFormatTarget',
        'temp_fs_folder' => 'setTempFsFolder',
        'file_threshold' => 'setFileThreshold',
        'memory_unit' => 'setMemoryUnit',
        'use_off_heap_memory' => 'setUseOffHeapMemory',
        'digest_algorithm' => 'setDigestAlgorithm',
        'monitoring_queue_size' => 'setMonitoringQueueSize',
        'cleanup_delay' => 'setCleanupDelay',
        'package_filters' => 'setPackageFilters',
        'property_filters' => 'setPropertyFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'format_target' => 'getFormatTarget',
        'temp_fs_folder' => 'getTempFsFolder',
        'file_threshold' => 'getFileThreshold',
        'memory_unit' => 'getMemoryUnit',
        'use_off_heap_memory' => 'getUseOffHeapMemory',
        'digest_algorithm' => 'getDigestAlgorithm',
        'monitoring_queue_size' => 'getMonitoringQueueSize',
        'cleanup_delay' => 'getCleanupDelay',
        'package_filters' => 'getPackageFilters',
        'property_filters' => 'getPropertyFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['format_target'] = isset($data['format_target']) ? $data['format_target'] : null;
        $this->container['temp_fs_folder'] = isset($data['temp_fs_folder']) ? $data['temp_fs_folder'] : null;
        $this->container['file_threshold'] = isset($data['file_threshold']) ? $data['file_threshold'] : null;
        $this->container['memory_unit'] = isset($data['memory_unit']) ? $data['memory_unit'] : null;
        $this->container['use_off_heap_memory'] = isset($data['use_off_heap_memory']) ? $data['use_off_heap_memory'] : null;
        $this->container['digest_algorithm'] = isset($data['digest_algorithm']) ? $data['digest_algorithm'] : null;
        $this->container['monitoring_queue_size'] = isset($data['monitoring_queue_size']) ? $data['monitoring_queue_size'] : null;
        $this->container['cleanup_delay'] = isset($data['cleanup_delay']) ? $data['cleanup_delay'] : null;
        $this->container['package_filters'] = isset($data['package_filters']) ? $data['package_filters'] : null;
        $this->container['property_filters'] = isset($data['property_filters']) ? $data['property_filters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets format_target
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getFormatTarget()
    {
        return $this->container['format_target'];
    }

    /**
     * Sets format_target
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $format_target format_target
     *
     * @return $this
     */
    public function setFormatTarget($format_target)
    {
        $this->container['format_target'] = $format_target;

        return $this;
    }

    /**
     * Gets temp_fs_folder
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTempFsFolder()
    {
        return $this->container['temp_fs_folder'];
    }

    /**
     * Sets temp_fs_folder
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $temp_fs_folder temp_fs_folder
     *
     * @return $this
     */
    public function setTempFsFolder($temp_fs_folder)
    {
        $this->container['temp_fs_folder'] = $temp_fs_folder;

        return $this;
    }

    /**
     * Gets file_threshold
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getFileThreshold()
    {
        return $this->container['file_threshold'];
    }

    /**
     * Sets file_threshold
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $file_threshold file_threshold
     *
     * @return $this
     */
    public function setFileThreshold($file_threshold)
    {
        $this->container['file_threshold'] = $file_threshold;

        return $this;
    }

    /**
     * Gets memory_unit
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getMemoryUnit()
    {
        return $this->container['memory_unit'];
    }

    /**
     * Sets memory_unit
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $memory_unit memory_unit
     *
     * @return $this
     */
    public function setMemoryUnit($memory_unit)
    {
        $this->container['memory_unit'] = $memory_unit;

        return $this;
    }

    /**
     * Gets use_off_heap_memory
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getUseOffHeapMemory()
    {
        return $this->container['use_off_heap_memory'];
    }

    /**
     * Sets use_off_heap_memory
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $use_off_heap_memory use_off_heap_memory
     *
     * @return $this
     */
    public function setUseOffHeapMemory($use_off_heap_memory)
    {
        $this->container['use_off_heap_memory'] = $use_off_heap_memory;

        return $this;
    }

    /**
     * Gets digest_algorithm
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getDigestAlgorithm()
    {
        return $this->container['digest_algorithm'];
    }

    /**
     * Sets digest_algorithm
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $digest_algorithm digest_algorithm
     *
     * @return $this
     */
    public function setDigestAlgorithm($digest_algorithm)
    {
        $this->container['digest_algorithm'] = $digest_algorithm;

        return $this;
    }

    /**
     * Gets monitoring_queue_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMonitoringQueueSize()
    {
        return $this->container['monitoring_queue_size'];
    }

    /**
     * Sets monitoring_queue_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $monitoring_queue_size monitoring_queue_size
     *
     * @return $this
     */
    public function setMonitoringQueueSize($monitoring_queue_size)
    {
        $this->container['monitoring_queue_size'] = $monitoring_queue_size;

        return $this;
    }

    /**
     * Gets cleanup_delay
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getCleanupDelay()
    {
        return $this->container['cleanup_delay'];
    }

    /**
     * Sets cleanup_delay
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cleanup_delay cleanup_delay
     *
     * @return $this
     */
    public function setCleanupDelay($cleanup_delay)
    {
        $this->container['cleanup_delay'] = $cleanup_delay;

        return $this;
    }

    /**
     * Gets package_filters
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getPackageFilters()
    {
        return $this->container['package_filters'];
    }

    /**
     * Sets package_filters
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $package_filters package_filters
     *
     * @return $this
     */
    public function setPackageFilters($package_filters)
    {
        $this->container['package_filters'] = $package_filters;

        return $this;
    }

    /**
     * Gets property_filters
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getPropertyFilters()
    {
        return $this->container['property_filters'];
    }

    /**
     * Sets property_filters
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $property_filters property_filters
     *
     * @return $this
     */
    public function setPropertyFilters($property_filters)
    {
        $this->container['property_filters'] = $property_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


