/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties()
{
    m_AccountNameIsSet = false;
    m_ContainerNameIsSet = false;
    m_AccessKeyIsSet = false;
    m_RootPathIsSet = false;
    m_ConnectionURLIsSet = false;
    
}

OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::~OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties()
{
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_AccountNameIsSet)
    {
        val["accountName"] = ModelBase::toJson(m_AccountName);
    }
    if(m_ContainerNameIsSet)
    {
        val["containerName"] = ModelBase::toJson(m_ContainerName);
    }
    if(m_AccessKeyIsSet)
    {
        val["accessKey"] = ModelBase::toJson(m_AccessKey);
    }
    if(m_RootPathIsSet)
    {
        val["rootPath"] = ModelBase::toJson(m_RootPath);
    }
    if(m_ConnectionURLIsSet)
    {
        val["connectionURL"] = ModelBase::toJson(m_ConnectionURL);
    }
    

    return val;
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::fromJson(nlohmann::json& val)
{
    if(val.find("accountName") != val.end())
    {
        if(!val["accountName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["accountName"]);
            setAccountName( newItem );
        }
        
    }
    if(val.find("containerName") != val.end())
    {
        if(!val["containerName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["containerName"]);
            setContainerName( newItem );
        }
        
    }
    if(val.find("accessKey") != val.end())
    {
        if(!val["accessKey"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["accessKey"]);
            setAccessKey( newItem );
        }
        
    }
    if(val.find("rootPath") != val.end())
    {
        if(!val["rootPath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["rootPath"]);
            setRootPath( newItem );
        }
        
    }
    if(val.find("connectionURL") != val.end())
    {
        if(!val["connectionURL"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["connectionURL"]);
            setConnectionURL( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getAccountName() const
{
    return m_AccountName;
}
void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setAccountName(ConfigNodePropertyString const& value)
{
    m_AccountName = value;
    m_AccountNameIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::accountNameIsSet() const
{
    return m_AccountNameIsSet;
}
void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::unsetAccountName()
{
    m_AccountNameIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getContainerName() const
{
    return m_ContainerName;
}
void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setContainerName(ConfigNodePropertyString const& value)
{
    m_ContainerName = value;
    m_ContainerNameIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::containerNameIsSet() const
{
    return m_ContainerNameIsSet;
}
void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::unsetContainerName()
{
    m_ContainerNameIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getAccessKey() const
{
    return m_AccessKey;
}
void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setAccessKey(ConfigNodePropertyString const& value)
{
    m_AccessKey = value;
    m_AccessKeyIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::accessKeyIsSet() const
{
    return m_AccessKeyIsSet;
}
void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::unsetAccessKey()
{
    m_AccessKeyIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getRootPath() const
{
    return m_RootPath;
}
void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setRootPath(ConfigNodePropertyString const& value)
{
    m_RootPath = value;
    m_RootPathIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::rootPathIsSet() const
{
    return m_RootPathIsSet;
}
void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::unsetRootPath()
{
    m_RootPathIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getConnectionURL() const
{
    return m_ConnectionURL;
}
void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setConnectionURL(ConfigNodePropertyString const& value)
{
    m_ConnectionURL = value;
    m_ConnectionURLIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::connectionURLIsSet() const
{
    return m_ConnectionURLIsSet;
}
void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::unsetConnectionURL()
{
    m_ConnectionURLIsSet = false;
}

}
}
}
}

