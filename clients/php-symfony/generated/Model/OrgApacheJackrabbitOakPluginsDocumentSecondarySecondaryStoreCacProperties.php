<?php
/**
 * OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("includedPaths")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $includedPaths;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("enableAsyncObserver")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $enableAsyncObserver;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("observerQueueSize")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $observerQueueSize;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->includedPaths = isset($data['includedPaths']) ? $data['includedPaths'] : null;
        $this->enableAsyncObserver = isset($data['enableAsyncObserver']) ? $data['enableAsyncObserver'] : null;
        $this->observerQueueSize = isset($data['observerQueueSize']) ? $data['observerQueueSize'] : null;
    }

    /**
     * Gets includedPaths.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getIncludedPaths()
    {
        return $this->includedPaths;
    }

    /**
     * Sets includedPaths.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $includedPaths
     *
     * @return $this
     */
    public function setIncludedPaths(ConfigNodePropertyArray $includedPaths = null)
    {
        $this->includedPaths = $includedPaths;

        return $this;
    }

    /**
     * Gets enableAsyncObserver.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnableAsyncObserver()
    {
        return $this->enableAsyncObserver;
    }

    /**
     * Sets enableAsyncObserver.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $enableAsyncObserver
     *
     * @return $this
     */
    public function setEnableAsyncObserver(ConfigNodePropertyBoolean $enableAsyncObserver = null)
    {
        $this->enableAsyncObserver = $enableAsyncObserver;

        return $this;
    }

    /**
     * Gets observerQueueSize.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getObserverQueueSize()
    {
        return $this->observerQueueSize;
    }

    /**
     * Sets observerQueueSize.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $observerQueueSize
     *
     * @return $this
     */
    public function setObserverQueueSize(ConfigNodePropertyInteger $observerQueueSize = null)
    {
        $this->observerQueueSize = $observerQueueSize;

        return $this;
    }
}


