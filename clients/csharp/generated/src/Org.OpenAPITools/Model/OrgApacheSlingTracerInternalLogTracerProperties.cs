/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingTracerInternalLogTracerProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingTracerInternalLogTracerProperties :  IEquatable<OrgApacheSlingTracerInternalLogTracerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingTracerInternalLogTracerProperties" /> class.
        /// </summary>
        /// <param name="tracerSets">tracerSets.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="servletEnabled">servletEnabled.</param>
        /// <param name="recordingCacheSizeInMB">recordingCacheSizeInMB.</param>
        /// <param name="recordingCacheDurationInSecs">recordingCacheDurationInSecs.</param>
        /// <param name="recordingCompressionEnabled">recordingCompressionEnabled.</param>
        /// <param name="gzipResponse">gzipResponse.</param>
        public OrgApacheSlingTracerInternalLogTracerProperties(ConfigNodePropertyArray tracerSets = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean enabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean servletEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger recordingCacheSizeInMB = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger recordingCacheDurationInSecs = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean recordingCompressionEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean gzipResponse = default(ConfigNodePropertyBoolean))
        {
            this.TracerSets = tracerSets;
            this.Enabled = enabled;
            this.ServletEnabled = servletEnabled;
            this.RecordingCacheSizeInMB = recordingCacheSizeInMB;
            this.RecordingCacheDurationInSecs = recordingCacheDurationInSecs;
            this.RecordingCompressionEnabled = recordingCompressionEnabled;
            this.GzipResponse = gzipResponse;
        }
        
        /// <summary>
        /// Gets or Sets TracerSets
        /// </summary>
        [DataMember(Name="tracerSets", EmitDefaultValue=false)]
        public ConfigNodePropertyArray TracerSets { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Enabled { get; set; }

        /// <summary>
        /// Gets or Sets ServletEnabled
        /// </summary>
        [DataMember(Name="servletEnabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ServletEnabled { get; set; }

        /// <summary>
        /// Gets or Sets RecordingCacheSizeInMB
        /// </summary>
        [DataMember(Name="recordingCacheSizeInMB", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RecordingCacheSizeInMB { get; set; }

        /// <summary>
        /// Gets or Sets RecordingCacheDurationInSecs
        /// </summary>
        [DataMember(Name="recordingCacheDurationInSecs", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RecordingCacheDurationInSecs { get; set; }

        /// <summary>
        /// Gets or Sets RecordingCompressionEnabled
        /// </summary>
        [DataMember(Name="recordingCompressionEnabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean RecordingCompressionEnabled { get; set; }

        /// <summary>
        /// Gets or Sets GzipResponse
        /// </summary>
        [DataMember(Name="gzipResponse", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean GzipResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingTracerInternalLogTracerProperties {\n");
            sb.Append("  TracerSets: ").Append(TracerSets).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ServletEnabled: ").Append(ServletEnabled).Append("\n");
            sb.Append("  RecordingCacheSizeInMB: ").Append(RecordingCacheSizeInMB).Append("\n");
            sb.Append("  RecordingCacheDurationInSecs: ").Append(RecordingCacheDurationInSecs).Append("\n");
            sb.Append("  RecordingCompressionEnabled: ").Append(RecordingCompressionEnabled).Append("\n");
            sb.Append("  GzipResponse: ").Append(GzipResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingTracerInternalLogTracerProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingTracerInternalLogTracerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingTracerInternalLogTracerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingTracerInternalLogTracerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TracerSets == input.TracerSets ||
                    (this.TracerSets != null &&
                    this.TracerSets.Equals(input.TracerSets))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.ServletEnabled == input.ServletEnabled ||
                    (this.ServletEnabled != null &&
                    this.ServletEnabled.Equals(input.ServletEnabled))
                ) && 
                (
                    this.RecordingCacheSizeInMB == input.RecordingCacheSizeInMB ||
                    (this.RecordingCacheSizeInMB != null &&
                    this.RecordingCacheSizeInMB.Equals(input.RecordingCacheSizeInMB))
                ) && 
                (
                    this.RecordingCacheDurationInSecs == input.RecordingCacheDurationInSecs ||
                    (this.RecordingCacheDurationInSecs != null &&
                    this.RecordingCacheDurationInSecs.Equals(input.RecordingCacheDurationInSecs))
                ) && 
                (
                    this.RecordingCompressionEnabled == input.RecordingCompressionEnabled ||
                    (this.RecordingCompressionEnabled != null &&
                    this.RecordingCompressionEnabled.Equals(input.RecordingCompressionEnabled))
                ) && 
                (
                    this.GzipResponse == input.GzipResponse ||
                    (this.GzipResponse != null &&
                    this.GzipResponse.Equals(input.GzipResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TracerSets != null)
                    hashCode = hashCode * 59 + this.TracerSets.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.ServletEnabled != null)
                    hashCode = hashCode * 59 + this.ServletEnabled.GetHashCode();
                if (this.RecordingCacheSizeInMB != null)
                    hashCode = hashCode * 59 + this.RecordingCacheSizeInMB.GetHashCode();
                if (this.RecordingCacheDurationInSecs != null)
                    hashCode = hashCode * 59 + this.RecordingCacheDurationInSecs.GetHashCode();
                if (this.RecordingCompressionEnabled != null)
                    hashCode = hashCode * 59 + this.RecordingCompressionEnabled.GetHashCode();
                if (this.GzipResponse != null)
                    hashCode = hashCode * 59 + this.GzipResponse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
