/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties()
{
    m_Path_desc_fieldIsSet = false;
    m_Path_child_fieldIsSet = false;
    m_Path_parent_fieldIsSet = false;
    m_Path_exact_fieldIsSet = false;
    m_Catch_all_fieldIsSet = false;
    m_Collapsed_path_fieldIsSet = false;
    m_Path_depth_fieldIsSet = false;
    m_Commit_policyIsSet = false;
    m_RowsIsSet = false;
    m_Path_restrictionsIsSet = false;
    m_Property_restrictionsIsSet = false;
    m_Primarytypes_restrictionsIsSet = false;
    m_Ignored_propertiesIsSet = false;
    m_Used_propertiesIsSet = false;
    m_Type_mappingsIsSet = false;
    m_Property_mappingsIsSet = false;
    m_Collapse_jcrcontent_nodesIsSet = false;
    
}

OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::~OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties()
{
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Path_desc_fieldIsSet)
    {
        val["path.desc.field"] = ModelBase::toJson(m_Path_desc_field);
    }
    if(m_Path_child_fieldIsSet)
    {
        val["path.child.field"] = ModelBase::toJson(m_Path_child_field);
    }
    if(m_Path_parent_fieldIsSet)
    {
        val["path.parent.field"] = ModelBase::toJson(m_Path_parent_field);
    }
    if(m_Path_exact_fieldIsSet)
    {
        val["path.exact.field"] = ModelBase::toJson(m_Path_exact_field);
    }
    if(m_Catch_all_fieldIsSet)
    {
        val["catch.all.field"] = ModelBase::toJson(m_Catch_all_field);
    }
    if(m_Collapsed_path_fieldIsSet)
    {
        val["collapsed.path.field"] = ModelBase::toJson(m_Collapsed_path_field);
    }
    if(m_Path_depth_fieldIsSet)
    {
        val["path.depth.field"] = ModelBase::toJson(m_Path_depth_field);
    }
    if(m_Commit_policyIsSet)
    {
        val["commit.policy"] = ModelBase::toJson(m_Commit_policy);
    }
    if(m_RowsIsSet)
    {
        val["rows"] = ModelBase::toJson(m_Rows);
    }
    if(m_Path_restrictionsIsSet)
    {
        val["path.restrictions"] = ModelBase::toJson(m_Path_restrictions);
    }
    if(m_Property_restrictionsIsSet)
    {
        val["property.restrictions"] = ModelBase::toJson(m_Property_restrictions);
    }
    if(m_Primarytypes_restrictionsIsSet)
    {
        val["primarytypes.restrictions"] = ModelBase::toJson(m_Primarytypes_restrictions);
    }
    if(m_Ignored_propertiesIsSet)
    {
        val["ignored.properties"] = ModelBase::toJson(m_Ignored_properties);
    }
    if(m_Used_propertiesIsSet)
    {
        val["used.properties"] = ModelBase::toJson(m_Used_properties);
    }
    if(m_Type_mappingsIsSet)
    {
        val["type.mappings"] = ModelBase::toJson(m_Type_mappings);
    }
    if(m_Property_mappingsIsSet)
    {
        val["property.mappings"] = ModelBase::toJson(m_Property_mappings);
    }
    if(m_Collapse_jcrcontent_nodesIsSet)
    {
        val["collapse.jcrcontent.nodes"] = ModelBase::toJson(m_Collapse_jcrcontent_nodes);
    }
    

    return val;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::fromJson(nlohmann::json& val)
{
    if(val.find("path.desc.field") != val.end())
    {
        if(!val["path.desc.field"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path.desc.field"]);
            setPathDescField( newItem );
        }
        
    }
    if(val.find("path.child.field") != val.end())
    {
        if(!val["path.child.field"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path.child.field"]);
            setPathChildField( newItem );
        }
        
    }
    if(val.find("path.parent.field") != val.end())
    {
        if(!val["path.parent.field"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path.parent.field"]);
            setPathParentField( newItem );
        }
        
    }
    if(val.find("path.exact.field") != val.end())
    {
        if(!val["path.exact.field"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path.exact.field"]);
            setPathExactField( newItem );
        }
        
    }
    if(val.find("catch.all.field") != val.end())
    {
        if(!val["catch.all.field"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["catch.all.field"]);
            setCatchAllField( newItem );
        }
        
    }
    if(val.find("collapsed.path.field") != val.end())
    {
        if(!val["collapsed.path.field"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["collapsed.path.field"]);
            setCollapsedPathField( newItem );
        }
        
    }
    if(val.find("path.depth.field") != val.end())
    {
        if(!val["path.depth.field"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path.depth.field"]);
            setPathDepthField( newItem );
        }
        
    }
    if(val.find("commit.policy") != val.end())
    {
        if(!val["commit.policy"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["commit.policy"]);
            setCommitPolicy( newItem );
        }
        
    }
    if(val.find("rows") != val.end())
    {
        if(!val["rows"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["rows"]);
            setRows( newItem );
        }
        
    }
    if(val.find("path.restrictions") != val.end())
    {
        if(!val["path.restrictions"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["path.restrictions"]);
            setPathRestrictions( newItem );
        }
        
    }
    if(val.find("property.restrictions") != val.end())
    {
        if(!val["property.restrictions"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["property.restrictions"]);
            setPropertyRestrictions( newItem );
        }
        
    }
    if(val.find("primarytypes.restrictions") != val.end())
    {
        if(!val["primarytypes.restrictions"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["primarytypes.restrictions"]);
            setPrimarytypesRestrictions( newItem );
        }
        
    }
    if(val.find("ignored.properties") != val.end())
    {
        if(!val["ignored.properties"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["ignored.properties"]);
            setIgnoredProperties( newItem );
        }
        
    }
    if(val.find("used.properties") != val.end())
    {
        if(!val["used.properties"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["used.properties"]);
            setUsedProperties( newItem );
        }
        
    }
    if(val.find("type.mappings") != val.end())
    {
        if(!val["type.mappings"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["type.mappings"]);
            setTypeMappings( newItem );
        }
        
    }
    if(val.find("property.mappings") != val.end())
    {
        if(!val["property.mappings"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["property.mappings"]);
            setPropertyMappings( newItem );
        }
        
    }
    if(val.find("collapse.jcrcontent.nodes") != val.end())
    {
        if(!val["collapse.jcrcontent.nodes"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["collapse.jcrcontent.nodes"]);
            setCollapseJcrcontentNodes( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathDescField() const
{
    return m_Path_desc_field;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathDescField(ConfigNodePropertyString const& value)
{
    m_Path_desc_field = value;
    m_Path_desc_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathDescFieldIsSet() const
{
    return m_Path_desc_fieldIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_desc_field()
{
    m_Path_desc_fieldIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathChildField() const
{
    return m_Path_child_field;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathChildField(ConfigNodePropertyString const& value)
{
    m_Path_child_field = value;
    m_Path_child_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathChildFieldIsSet() const
{
    return m_Path_child_fieldIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_child_field()
{
    m_Path_child_fieldIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathParentField() const
{
    return m_Path_parent_field;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathParentField(ConfigNodePropertyString const& value)
{
    m_Path_parent_field = value;
    m_Path_parent_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathParentFieldIsSet() const
{
    return m_Path_parent_fieldIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_parent_field()
{
    m_Path_parent_fieldIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathExactField() const
{
    return m_Path_exact_field;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathExactField(ConfigNodePropertyString const& value)
{
    m_Path_exact_field = value;
    m_Path_exact_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathExactFieldIsSet() const
{
    return m_Path_exact_fieldIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_exact_field()
{
    m_Path_exact_fieldIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCatchAllField() const
{
    return m_Catch_all_field;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCatchAllField(ConfigNodePropertyString const& value)
{
    m_Catch_all_field = value;
    m_Catch_all_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::catchAllFieldIsSet() const
{
    return m_Catch_all_fieldIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetCatch_all_field()
{
    m_Catch_all_fieldIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCollapsedPathField() const
{
    return m_Collapsed_path_field;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCollapsedPathField(ConfigNodePropertyString const& value)
{
    m_Collapsed_path_field = value;
    m_Collapsed_path_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::collapsedPathFieldIsSet() const
{
    return m_Collapsed_path_fieldIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetCollapsed_path_field()
{
    m_Collapsed_path_fieldIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathDepthField() const
{
    return m_Path_depth_field;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathDepthField(ConfigNodePropertyString const& value)
{
    m_Path_depth_field = value;
    m_Path_depth_fieldIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathDepthFieldIsSet() const
{
    return m_Path_depth_fieldIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_depth_field()
{
    m_Path_depth_fieldIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCommitPolicy() const
{
    return m_Commit_policy;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCommitPolicy(ConfigNodePropertyDropDown const& value)
{
    m_Commit_policy = value;
    m_Commit_policyIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::commitPolicyIsSet() const
{
    return m_Commit_policyIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetCommit_policy()
{
    m_Commit_policyIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getRows() const
{
    return m_Rows;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setRows(ConfigNodePropertyInteger const& value)
{
    m_Rows = value;
    m_RowsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::rowsIsSet() const
{
    return m_RowsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetRows()
{
    m_RowsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathRestrictions() const
{
    return m_Path_restrictions;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathRestrictions(ConfigNodePropertyBoolean const& value)
{
    m_Path_restrictions = value;
    m_Path_restrictionsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::pathRestrictionsIsSet() const
{
    return m_Path_restrictionsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPath_restrictions()
{
    m_Path_restrictionsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPropertyRestrictions() const
{
    return m_Property_restrictions;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPropertyRestrictions(ConfigNodePropertyBoolean const& value)
{
    m_Property_restrictions = value;
    m_Property_restrictionsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::propertyRestrictionsIsSet() const
{
    return m_Property_restrictionsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetProperty_restrictions()
{
    m_Property_restrictionsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPrimarytypesRestrictions() const
{
    return m_Primarytypes_restrictions;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPrimarytypesRestrictions(ConfigNodePropertyBoolean const& value)
{
    m_Primarytypes_restrictions = value;
    m_Primarytypes_restrictionsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::primarytypesRestrictionsIsSet() const
{
    return m_Primarytypes_restrictionsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetPrimarytypes_restrictions()
{
    m_Primarytypes_restrictionsIsSet = false;
}
ConfigNodePropertyArray OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getIgnoredProperties() const
{
    return m_Ignored_properties;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setIgnoredProperties(ConfigNodePropertyArray const& value)
{
    m_Ignored_properties = value;
    m_Ignored_propertiesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::ignoredPropertiesIsSet() const
{
    return m_Ignored_propertiesIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetIgnored_properties()
{
    m_Ignored_propertiesIsSet = false;
}
ConfigNodePropertyArray OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getUsedProperties() const
{
    return m_Used_properties;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setUsedProperties(ConfigNodePropertyArray const& value)
{
    m_Used_properties = value;
    m_Used_propertiesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::usedPropertiesIsSet() const
{
    return m_Used_propertiesIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetUsed_properties()
{
    m_Used_propertiesIsSet = false;
}
ConfigNodePropertyArray OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getTypeMappings() const
{
    return m_Type_mappings;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setTypeMappings(ConfigNodePropertyArray const& value)
{
    m_Type_mappings = value;
    m_Type_mappingsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::typeMappingsIsSet() const
{
    return m_Type_mappingsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetType_mappings()
{
    m_Type_mappingsIsSet = false;
}
ConfigNodePropertyArray OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPropertyMappings() const
{
    return m_Property_mappings;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPropertyMappings(ConfigNodePropertyArray const& value)
{
    m_Property_mappings = value;
    m_Property_mappingsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::propertyMappingsIsSet() const
{
    return m_Property_mappingsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetProperty_mappings()
{
    m_Property_mappingsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCollapseJcrcontentNodes() const
{
    return m_Collapse_jcrcontent_nodes;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCollapseJcrcontentNodes(ConfigNodePropertyBoolean const& value)
{
    m_Collapse_jcrcontent_nodes = value;
    m_Collapse_jcrcontent_nodesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::collapseJcrcontentNodesIsSet() const
{
    return m_Collapse_jcrcontent_nodesIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::unsetCollapse_jcrcontent_nodes()
{
    m_Collapse_jcrcontent_nodesIsSet = false;
}

}
}
}
}

