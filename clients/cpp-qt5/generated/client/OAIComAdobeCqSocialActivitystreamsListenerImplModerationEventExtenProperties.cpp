/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties() {
    init();
}

OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::~OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::init() {
    accepted = new OAIConfigNodePropertyBoolean();
    m_accepted_isSet = false;
    ranked = new OAIConfigNodePropertyInteger();
    m_ranked_isSet = false;
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::cleanup() {
    if(accepted != nullptr) { 
        delete accepted;
    }
    if(ranked != nullptr) { 
        delete ranked;
    }
}

OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties*
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&accepted, pJson["accepted"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&ranked, pJson["ranked"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::asJsonObject() {
    QJsonObject obj;
    if((accepted != nullptr) && (accepted->isSet())){
        toJsonValue(QString("accepted"), accepted, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((ranked != nullptr) && (ranked->isSet())){
        toJsonValue(QString("ranked"), ranked, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::getAccepted() {
    return accepted;
}
void
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::setAccepted(OAIConfigNodePropertyBoolean* accepted) {
    this->accepted = accepted;
    this->m_accepted_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::getRanked() {
    return ranked;
}
void
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::setRanked(OAIConfigNodePropertyInteger* ranked) {
    this->ranked = ranked;
    this->m_ranked_isSet = true;
}


bool
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(accepted != nullptr && accepted->isSet()){ isObjectUpdated = true; break;}
        if(ranked != nullptr && ranked->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

