note
 description:"[
		Adobe Experience Manager OSGI config (AEM) API
 		Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
  		OpenAPI spec version: 1.0.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class COM_DAY_CQ_DAM_IDS_IMPL_IDS_JOB_PROCESSOR_PROPERTIES 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    enable_multisession: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    ids_cc_enable: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    enable_retry: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    enable_retry_scripterror: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    externalizer_domain_cqhost: detachable CONFIG_NODE_PROPERTY_STRING 
      
    externalizer_domain_http: detachable CONFIG_NODE_PROPERTY_STRING 
      

feature -- Change Element  
 
    set_enable_multisession (a_name: like enable_multisession)
        -- Set 'enable_multisession' with 'a_name'.
      do
        enable_multisession := a_name
      ensure
        enable_multisession_set: enable_multisession = a_name		
      end

    set_ids_cc_enable (a_name: like ids_cc_enable)
        -- Set 'ids_cc_enable' with 'a_name'.
      do
        ids_cc_enable := a_name
      ensure
        ids_cc_enable_set: ids_cc_enable = a_name		
      end

    set_enable_retry (a_name: like enable_retry)
        -- Set 'enable_retry' with 'a_name'.
      do
        enable_retry := a_name
      ensure
        enable_retry_set: enable_retry = a_name		
      end

    set_enable_retry_scripterror (a_name: like enable_retry_scripterror)
        -- Set 'enable_retry_scripterror' with 'a_name'.
      do
        enable_retry_scripterror := a_name
      ensure
        enable_retry_scripterror_set: enable_retry_scripterror = a_name		
      end

    set_externalizer_domain_cqhost (a_name: like externalizer_domain_cqhost)
        -- Set 'externalizer_domain_cqhost' with 'a_name'.
      do
        externalizer_domain_cqhost := a_name
      ensure
        externalizer_domain_cqhost_set: externalizer_domain_cqhost = a_name		
      end

    set_externalizer_domain_http (a_name: like externalizer_domain_http)
        -- Set 'externalizer_domain_http' with 'a_name'.
      do
        externalizer_domain_http := a_name
      ensure
        externalizer_domain_http_set: externalizer_domain_http = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass COM_DAY_CQ_DAM_IDS_IMPL_IDS_JOB_PROCESSOR_PROPERTIES%N")
        if attached enable_multisession as l_enable_multisession then
          Result.append ("%Nenable_multisession:")
          Result.append (l_enable_multisession.out)
          Result.append ("%N")    
        end  
        if attached ids_cc_enable as l_ids_cc_enable then
          Result.append ("%Nids_cc_enable:")
          Result.append (l_ids_cc_enable.out)
          Result.append ("%N")    
        end  
        if attached enable_retry as l_enable_retry then
          Result.append ("%Nenable_retry:")
          Result.append (l_enable_retry.out)
          Result.append ("%N")    
        end  
        if attached enable_retry_scripterror as l_enable_retry_scripterror then
          Result.append ("%Nenable_retry_scripterror:")
          Result.append (l_enable_retry_scripterror.out)
          Result.append ("%N")    
        end  
        if attached externalizer_domain_cqhost as l_externalizer_domain_cqhost then
          Result.append ("%Nexternalizer_domain_cqhost:")
          Result.append (l_externalizer_domain_cqhost.out)
          Result.append ("%N")    
        end  
        if attached externalizer_domain_http as l_externalizer_domain_http then
          Result.append ("%Nexternalizer_domain_http:")
          Result.append (l_externalizer_domain_http.out)
          Result.append ("%N")    
        end  
      end
end


