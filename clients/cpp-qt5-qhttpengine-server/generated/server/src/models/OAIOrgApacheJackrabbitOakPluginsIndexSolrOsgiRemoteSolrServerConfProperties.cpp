/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties() {
    this->init();
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::~OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties() {
    
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::init() {
    m_solr_http_url_isSet = false;
    m_solr_zk_host_isSet = false;
    m_solr_collection_isSet = false;
    m_solr_socket_timeout_isSet = false;
    m_solr_connection_timeout_isSet = false;
    m_solr_shards_no_isSet = false;
    m_solr_replication_factor_isSet = false;
    m_solr_conf_dir_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(solr_http_url, json[QString("solr.http.url")]);
    
    ::OpenAPI::fromJsonValue(solr_zk_host, json[QString("solr.zk.host")]);
    
    ::OpenAPI::fromJsonValue(solr_collection, json[QString("solr.collection")]);
    
    ::OpenAPI::fromJsonValue(solr_socket_timeout, json[QString("solr.socket.timeout")]);
    
    ::OpenAPI::fromJsonValue(solr_connection_timeout, json[QString("solr.connection.timeout")]);
    
    ::OpenAPI::fromJsonValue(solr_shards_no, json[QString("solr.shards.no")]);
    
    ::OpenAPI::fromJsonValue(solr_replication_factor, json[QString("solr.replication.factor")]);
    
    ::OpenAPI::fromJsonValue(solr_conf_dir, json[QString("solr.conf.dir")]);
    
}

QString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::asJsonObject() const {
    QJsonObject obj;
	if(solr_http_url.isSet()){
        obj.insert(QString("solr.http.url"), ::OpenAPI::toJsonValue(solr_http_url));
    }
	if(solr_zk_host.isSet()){
        obj.insert(QString("solr.zk.host"), ::OpenAPI::toJsonValue(solr_zk_host));
    }
	if(solr_collection.isSet()){
        obj.insert(QString("solr.collection"), ::OpenAPI::toJsonValue(solr_collection));
    }
	if(solr_socket_timeout.isSet()){
        obj.insert(QString("solr.socket.timeout"), ::OpenAPI::toJsonValue(solr_socket_timeout));
    }
	if(solr_connection_timeout.isSet()){
        obj.insert(QString("solr.connection.timeout"), ::OpenAPI::toJsonValue(solr_connection_timeout));
    }
	if(solr_shards_no.isSet()){
        obj.insert(QString("solr.shards.no"), ::OpenAPI::toJsonValue(solr_shards_no));
    }
	if(solr_replication_factor.isSet()){
        obj.insert(QString("solr.replication.factor"), ::OpenAPI::toJsonValue(solr_replication_factor));
    }
	if(solr_conf_dir.isSet()){
        obj.insert(QString("solr.conf.dir"), ::OpenAPI::toJsonValue(solr_conf_dir));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrHttpUrl() const {
    return solr_http_url;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrHttpUrl(const OAIConfigNodePropertyString &solr_http_url) {
    this->solr_http_url = solr_http_url;
    this->m_solr_http_url_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrZkHost() const {
    return solr_zk_host;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrZkHost(const OAIConfigNodePropertyString &solr_zk_host) {
    this->solr_zk_host = solr_zk_host;
    this->m_solr_zk_host_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrCollection() const {
    return solr_collection;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrCollection(const OAIConfigNodePropertyString &solr_collection) {
    this->solr_collection = solr_collection;
    this->m_solr_collection_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrSocketTimeout() const {
    return solr_socket_timeout;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrSocketTimeout(const OAIConfigNodePropertyInteger &solr_socket_timeout) {
    this->solr_socket_timeout = solr_socket_timeout;
    this->m_solr_socket_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrConnectionTimeout() const {
    return solr_connection_timeout;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrConnectionTimeout(const OAIConfigNodePropertyInteger &solr_connection_timeout) {
    this->solr_connection_timeout = solr_connection_timeout;
    this->m_solr_connection_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrShardsNo() const {
    return solr_shards_no;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrShardsNo(const OAIConfigNodePropertyInteger &solr_shards_no) {
    this->solr_shards_no = solr_shards_no;
    this->m_solr_shards_no_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrReplicationFactor() const {
    return solr_replication_factor;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrReplicationFactor(const OAIConfigNodePropertyInteger &solr_replication_factor) {
    this->solr_replication_factor = solr_replication_factor;
    this->m_solr_replication_factor_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrConfDir() const {
    return solr_conf_dir;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrConfDir(const OAIConfigNodePropertyString &solr_conf_dir) {
    this->solr_conf_dir = solr_conf_dir;
    this->m_solr_conf_dir_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(solr_http_url.isSet()){ isObjectUpdated = true; break;}
    
        if(solr_zk_host.isSet()){ isObjectUpdated = true; break;}
    
        if(solr_collection.isSet()){ isObjectUpdated = true; break;}
    
        if(solr_socket_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(solr_connection_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(solr_shards_no.isSet()){ isObjectUpdated = true; break;}
    
        if(solr_replication_factor.isSet()){ isObjectUpdated = true; break;}
    
        if(solr_conf_dir.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

