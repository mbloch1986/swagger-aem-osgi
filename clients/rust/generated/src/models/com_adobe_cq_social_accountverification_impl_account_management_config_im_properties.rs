/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
  #[serde(rename = "enable")]
  enable: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "ttl1")]
  ttl1: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "ttl2")]
  ttl2: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
  pub fn new() -> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
    ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
      enable: None,
      ttl1: None,
      ttl2: None
    }
  }

  pub fn set_enable(&mut self, enable: ::models::ConfigNodePropertyBoolean) {
    self.enable = Some(enable);
  }

  pub fn with_enable(mut self, enable: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
    self.enable = Some(enable);
    self
  }

  pub fn enable(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable.as_ref()
  }

  pub fn reset_enable(&mut self) {
    self.enable = None;
  }

  pub fn set_ttl1(&mut self, ttl1: ::models::ConfigNodePropertyInteger) {
    self.ttl1 = Some(ttl1);
  }

  pub fn with_ttl1(mut self, ttl1: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
    self.ttl1 = Some(ttl1);
    self
  }

  pub fn ttl1(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.ttl1.as_ref()
  }

  pub fn reset_ttl1(&mut self) {
    self.ttl1 = None;
  }

  pub fn set_ttl2(&mut self, ttl2: ::models::ConfigNodePropertyInteger) {
    self.ttl2 = Some(ttl2);
  }

  pub fn with_ttl2(mut self, ttl2: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
    self.ttl2 = Some(ttl2);
    self
  }

  pub fn ttl2(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.ttl2.as_ref()
  }

  pub fn reset_ttl2(&mut self) {
    self.ttl2 = None;
  }

}



