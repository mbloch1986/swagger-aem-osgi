/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties() {
    init();
}

OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::~OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::init() {
    service_ranking = new OAIConfigNodePropertyInteger();
    m_service_ranking_isSet = false;
    type_collections = new OAIConfigNodePropertyString();
    m_type_collections_isSet = false;
    type_noncollections = new OAIConfigNodePropertyString();
    m_type_noncollections_isSet = false;
    type_content = new OAIConfigNodePropertyString();
    m_type_content_isSet = false;
}

void
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::cleanup() {
    if(service_ranking != nullptr) { 
        delete service_ranking;
    }
    if(type_collections != nullptr) { 
        delete type_collections;
    }
    if(type_noncollections != nullptr) { 
        delete type_noncollections;
    }
    if(type_content != nullptr) { 
        delete type_content;
    }
}

OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties*
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&service_ranking, pJson["service.ranking"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&type_collections, pJson["type.collections"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&type_noncollections, pJson["type.noncollections"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&type_content, pJson["type.content"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((service_ranking != nullptr) && (service_ranking->isSet())){
        toJsonValue(QString("service.ranking"), service_ranking, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((type_collections != nullptr) && (type_collections->isSet())){
        toJsonValue(QString("type.collections"), type_collections, obj, QString("OAIConfigNodePropertyString"));
    }
    if((type_noncollections != nullptr) && (type_noncollections->isSet())){
        toJsonValue(QString("type.noncollections"), type_noncollections, obj, QString("OAIConfigNodePropertyString"));
    }
    if((type_content != nullptr) && (type_content->isSet())){
        toJsonValue(QString("type.content"), type_content, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::getServiceRanking() {
    return service_ranking;
}
void
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::setServiceRanking(OAIConfigNodePropertyInteger* service_ranking) {
    this->service_ranking = service_ranking;
    this->m_service_ranking_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::getTypeCollections() {
    return type_collections;
}
void
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::setTypeCollections(OAIConfigNodePropertyString* type_collections) {
    this->type_collections = type_collections;
    this->m_type_collections_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::getTypeNoncollections() {
    return type_noncollections;
}
void
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::setTypeNoncollections(OAIConfigNodePropertyString* type_noncollections) {
    this->type_noncollections = type_noncollections;
    this->m_type_noncollections_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::getTypeContent() {
    return type_content;
}
void
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::setTypeContent(OAIConfigNodePropertyString* type_content) {
    this->type_content = type_content;
    this->m_type_content_isSet = true;
}


bool
OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(service_ranking != nullptr && service_ranking->isSet()){ isObjectUpdated = true; break;}
        if(type_collections != nullptr && type_collections->isSet()){ isObjectUpdated = true; break;}
        if(type_noncollections != nullptr && type_noncollections->isSet()){ isObjectUpdated = true; break;}
        if(type_content != nullptr && type_content->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

