/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties() {
    this->init();
}

OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::~OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties() {
    
}

void
OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::init() {
    m_automoderation_sequence_isSet = false;
    m_automoderation_onfailurestop_isSet = false;
}

void
OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(automoderation_sequence, json[QString("automoderation.sequence")]);
    
    ::OpenAPI::fromJsonValue(automoderation_onfailurestop, json[QString("automoderation.onfailurestop")]);
    
}

QString
OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(automoderation_sequence.isSet()){
        obj.insert(QString("automoderation.sequence"), ::OpenAPI::toJsonValue(automoderation_sequence));
    }
	if(automoderation_onfailurestop.isSet()){
        obj.insert(QString("automoderation.onfailurestop"), ::OpenAPI::toJsonValue(automoderation_onfailurestop));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::getAutomoderationSequence() const {
    return automoderation_sequence;
}
void
OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::setAutomoderationSequence(const OAIConfigNodePropertyArray &automoderation_sequence) {
    this->automoderation_sequence = automoderation_sequence;
    this->m_automoderation_sequence_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::getAutomoderationOnfailurestop() const {
    return automoderation_onfailurestop;
}
void
OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::setAutomoderationOnfailurestop(const OAIConfigNodePropertyBoolean &automoderation_onfailurestop) {
    this->automoderation_onfailurestop = automoderation_onfailurestop;
    this->m_automoderation_onfailurestop_isSet = true;
}


bool
OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(automoderation_sequence.isSet()){ isObjectUpdated = true; break;}
    
        if(automoderation_onfailurestop.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

