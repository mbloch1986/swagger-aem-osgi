/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties() {
    this->init();
}

OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::~OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties() {
    
}

void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::init() {
    m_users_path_isSet = false;
    m_groups_path_isSet = false;
    m_system_relative_path_isSet = false;
    m_default_depth_isSet = false;
    m_import_behavior_isSet = false;
    m_password_hash_algorithm_isSet = false;
    m_password_hash_iterations_isSet = false;
    m_password_salt_size_isSet = false;
    m_omit_admin_pw_isSet = false;
    m_support_auto_save_isSet = false;
    m_password_max_age_isSet = false;
    m_initial_password_change_isSet = false;
    m_password_history_size_isSet = false;
    m_password_expiry_for_admin_isSet = false;
    m_cache_expiration_isSet = false;
    m_enable_rfc7613_usercase_mapped_profile_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(users_path, json[QString("usersPath")]);
    
    ::OpenAPI::fromJsonValue(groups_path, json[QString("groupsPath")]);
    
    ::OpenAPI::fromJsonValue(system_relative_path, json[QString("systemRelativePath")]);
    
    ::OpenAPI::fromJsonValue(default_depth, json[QString("defaultDepth")]);
    
    ::OpenAPI::fromJsonValue(import_behavior, json[QString("importBehavior")]);
    
    ::OpenAPI::fromJsonValue(password_hash_algorithm, json[QString("passwordHashAlgorithm")]);
    
    ::OpenAPI::fromJsonValue(password_hash_iterations, json[QString("passwordHashIterations")]);
    
    ::OpenAPI::fromJsonValue(password_salt_size, json[QString("passwordSaltSize")]);
    
    ::OpenAPI::fromJsonValue(omit_admin_pw, json[QString("omitAdminPw")]);
    
    ::OpenAPI::fromJsonValue(support_auto_save, json[QString("supportAutoSave")]);
    
    ::OpenAPI::fromJsonValue(password_max_age, json[QString("passwordMaxAge")]);
    
    ::OpenAPI::fromJsonValue(initial_password_change, json[QString("initialPasswordChange")]);
    
    ::OpenAPI::fromJsonValue(password_history_size, json[QString("passwordHistorySize")]);
    
    ::OpenAPI::fromJsonValue(password_expiry_for_admin, json[QString("passwordExpiryForAdmin")]);
    
    ::OpenAPI::fromJsonValue(cache_expiration, json[QString("cacheExpiration")]);
    
    ::OpenAPI::fromJsonValue(enable_rfc7613_usercase_mapped_profile, json[QString("enableRFC7613UsercaseMappedProfile")]);
    
}

QString
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(users_path.isSet()){
        obj.insert(QString("usersPath"), ::OpenAPI::toJsonValue(users_path));
    }
	if(groups_path.isSet()){
        obj.insert(QString("groupsPath"), ::OpenAPI::toJsonValue(groups_path));
    }
	if(system_relative_path.isSet()){
        obj.insert(QString("systemRelativePath"), ::OpenAPI::toJsonValue(system_relative_path));
    }
	if(default_depth.isSet()){
        obj.insert(QString("defaultDepth"), ::OpenAPI::toJsonValue(default_depth));
    }
	if(import_behavior.isSet()){
        obj.insert(QString("importBehavior"), ::OpenAPI::toJsonValue(import_behavior));
    }
	if(password_hash_algorithm.isSet()){
        obj.insert(QString("passwordHashAlgorithm"), ::OpenAPI::toJsonValue(password_hash_algorithm));
    }
	if(password_hash_iterations.isSet()){
        obj.insert(QString("passwordHashIterations"), ::OpenAPI::toJsonValue(password_hash_iterations));
    }
	if(password_salt_size.isSet()){
        obj.insert(QString("passwordSaltSize"), ::OpenAPI::toJsonValue(password_salt_size));
    }
	if(omit_admin_pw.isSet()){
        obj.insert(QString("omitAdminPw"), ::OpenAPI::toJsonValue(omit_admin_pw));
    }
	if(support_auto_save.isSet()){
        obj.insert(QString("supportAutoSave"), ::OpenAPI::toJsonValue(support_auto_save));
    }
	if(password_max_age.isSet()){
        obj.insert(QString("passwordMaxAge"), ::OpenAPI::toJsonValue(password_max_age));
    }
	if(initial_password_change.isSet()){
        obj.insert(QString("initialPasswordChange"), ::OpenAPI::toJsonValue(initial_password_change));
    }
	if(password_history_size.isSet()){
        obj.insert(QString("passwordHistorySize"), ::OpenAPI::toJsonValue(password_history_size));
    }
	if(password_expiry_for_admin.isSet()){
        obj.insert(QString("passwordExpiryForAdmin"), ::OpenAPI::toJsonValue(password_expiry_for_admin));
    }
	if(cache_expiration.isSet()){
        obj.insert(QString("cacheExpiration"), ::OpenAPI::toJsonValue(cache_expiration));
    }
	if(enable_rfc7613_usercase_mapped_profile.isSet()){
        obj.insert(QString("enableRFC7613UsercaseMappedProfile"), ::OpenAPI::toJsonValue(enable_rfc7613_usercase_mapped_profile));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getUsersPath() const {
    return users_path;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setUsersPath(const OAIConfigNodePropertyString &users_path) {
    this->users_path = users_path;
    this->m_users_path_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getGroupsPath() const {
    return groups_path;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setGroupsPath(const OAIConfigNodePropertyString &groups_path) {
    this->groups_path = groups_path;
    this->m_groups_path_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getSystemRelativePath() const {
    return system_relative_path;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setSystemRelativePath(const OAIConfigNodePropertyString &system_relative_path) {
    this->system_relative_path = system_relative_path;
    this->m_system_relative_path_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getDefaultDepth() const {
    return default_depth;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setDefaultDepth(const OAIConfigNodePropertyInteger &default_depth) {
    this->default_depth = default_depth;
    this->m_default_depth_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getImportBehavior() const {
    return import_behavior;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setImportBehavior(const OAIConfigNodePropertyDropDown &import_behavior) {
    this->import_behavior = import_behavior;
    this->m_import_behavior_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHashAlgorithm() const {
    return password_hash_algorithm;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHashAlgorithm(const OAIConfigNodePropertyString &password_hash_algorithm) {
    this->password_hash_algorithm = password_hash_algorithm;
    this->m_password_hash_algorithm_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHashIterations() const {
    return password_hash_iterations;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHashIterations(const OAIConfigNodePropertyInteger &password_hash_iterations) {
    this->password_hash_iterations = password_hash_iterations;
    this->m_password_hash_iterations_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordSaltSize() const {
    return password_salt_size;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordSaltSize(const OAIConfigNodePropertyInteger &password_salt_size) {
    this->password_salt_size = password_salt_size;
    this->m_password_salt_size_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getOmitAdminPw() const {
    return omit_admin_pw;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setOmitAdminPw(const OAIConfigNodePropertyBoolean &omit_admin_pw) {
    this->omit_admin_pw = omit_admin_pw;
    this->m_omit_admin_pw_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getSupportAutoSave() const {
    return support_auto_save;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setSupportAutoSave(const OAIConfigNodePropertyBoolean &support_auto_save) {
    this->support_auto_save = support_auto_save;
    this->m_support_auto_save_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordMaxAge() const {
    return password_max_age;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordMaxAge(const OAIConfigNodePropertyInteger &password_max_age) {
    this->password_max_age = password_max_age;
    this->m_password_max_age_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getInitialPasswordChange() const {
    return initial_password_change;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setInitialPasswordChange(const OAIConfigNodePropertyBoolean &initial_password_change) {
    this->initial_password_change = initial_password_change;
    this->m_initial_password_change_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHistorySize() const {
    return password_history_size;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHistorySize(const OAIConfigNodePropertyInteger &password_history_size) {
    this->password_history_size = password_history_size;
    this->m_password_history_size_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordExpiryForAdmin() const {
    return password_expiry_for_admin;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordExpiryForAdmin(const OAIConfigNodePropertyBoolean &password_expiry_for_admin) {
    this->password_expiry_for_admin = password_expiry_for_admin;
    this->m_password_expiry_for_admin_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getCacheExpiration() const {
    return cache_expiration;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setCacheExpiration(const OAIConfigNodePropertyInteger &cache_expiration) {
    this->cache_expiration = cache_expiration;
    this->m_cache_expiration_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getEnableRfc7613UsercaseMappedProfile() const {
    return enable_rfc7613_usercase_mapped_profile;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setEnableRfc7613UsercaseMappedProfile(const OAIConfigNodePropertyBoolean &enable_rfc7613_usercase_mapped_profile) {
    this->enable_rfc7613_usercase_mapped_profile = enable_rfc7613_usercase_mapped_profile;
    this->m_enable_rfc7613_usercase_mapped_profile_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(users_path.isSet()){ isObjectUpdated = true; break;}
    
        if(groups_path.isSet()){ isObjectUpdated = true; break;}
    
        if(system_relative_path.isSet()){ isObjectUpdated = true; break;}
    
        if(default_depth.isSet()){ isObjectUpdated = true; break;}
    
        if(import_behavior.isSet()){ isObjectUpdated = true; break;}
    
        if(password_hash_algorithm.isSet()){ isObjectUpdated = true; break;}
    
        if(password_hash_iterations.isSet()){ isObjectUpdated = true; break;}
    
        if(password_salt_size.isSet()){ isObjectUpdated = true; break;}
    
        if(omit_admin_pw.isSet()){ isObjectUpdated = true; break;}
    
        if(support_auto_save.isSet()){ isObjectUpdated = true; break;}
    
        if(password_max_age.isSet()){ isObjectUpdated = true; break;}
    
        if(initial_password_change.isSet()){ isObjectUpdated = true; break;}
    
        if(password_history_size.isSet()){ isObjectUpdated = true; break;}
    
        if(password_expiry_for_admin.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_expiration.isSet()){ isObjectUpdated = true; break;}
    
        if(enable_rfc7613_usercase_mapped_profile.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

