/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCommonsHttpclientProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCommonsHttpclientProperties::OAIComDayCommonsHttpclientProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCommonsHttpclientProperties::OAIComDayCommonsHttpclientProperties() {
    this->init();
}

OAIComDayCommonsHttpclientProperties::~OAIComDayCommonsHttpclientProperties() {
    
}

void
OAIComDayCommonsHttpclientProperties::init() {
    m_proxy_enabled_isSet = false;
    m_proxy_host_isSet = false;
    m_proxy_user_isSet = false;
    m_proxy_password_isSet = false;
    m_proxy_ntlm_host_isSet = false;
    m_proxy_ntlm_domain_isSet = false;
    m_proxy_exceptions_isSet = false;
}

void
OAIComDayCommonsHttpclientProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCommonsHttpclientProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(proxy_enabled, json[QString("proxy.enabled")]);
    
    ::OpenAPI::fromJsonValue(proxy_host, json[QString("proxy.host")]);
    
    ::OpenAPI::fromJsonValue(proxy_user, json[QString("proxy.user")]);
    
    ::OpenAPI::fromJsonValue(proxy_password, json[QString("proxy.password")]);
    
    ::OpenAPI::fromJsonValue(proxy_ntlm_host, json[QString("proxy.ntlm.host")]);
    
    ::OpenAPI::fromJsonValue(proxy_ntlm_domain, json[QString("proxy.ntlm.domain")]);
    
    ::OpenAPI::fromJsonValue(proxy_exceptions, json[QString("proxy.exceptions")]);
    
}

QString
OAIComDayCommonsHttpclientProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCommonsHttpclientProperties::asJsonObject() const {
    QJsonObject obj;
	if(proxy_enabled.isSet()){
        obj.insert(QString("proxy.enabled"), ::OpenAPI::toJsonValue(proxy_enabled));
    }
	if(proxy_host.isSet()){
        obj.insert(QString("proxy.host"), ::OpenAPI::toJsonValue(proxy_host));
    }
	if(proxy_user.isSet()){
        obj.insert(QString("proxy.user"), ::OpenAPI::toJsonValue(proxy_user));
    }
	if(proxy_password.isSet()){
        obj.insert(QString("proxy.password"), ::OpenAPI::toJsonValue(proxy_password));
    }
	if(proxy_ntlm_host.isSet()){
        obj.insert(QString("proxy.ntlm.host"), ::OpenAPI::toJsonValue(proxy_ntlm_host));
    }
	if(proxy_ntlm_domain.isSet()){
        obj.insert(QString("proxy.ntlm.domain"), ::OpenAPI::toJsonValue(proxy_ntlm_domain));
    }
	if(proxy_exceptions.isSet()){
        obj.insert(QString("proxy.exceptions"), ::OpenAPI::toJsonValue(proxy_exceptions));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComDayCommonsHttpclientProperties::getProxyEnabled() const {
    return proxy_enabled;
}
void
OAIComDayCommonsHttpclientProperties::setProxyEnabled(const OAIConfigNodePropertyBoolean &proxy_enabled) {
    this->proxy_enabled = proxy_enabled;
    this->m_proxy_enabled_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCommonsHttpclientProperties::getProxyHost() const {
    return proxy_host;
}
void
OAIComDayCommonsHttpclientProperties::setProxyHost(const OAIConfigNodePropertyString &proxy_host) {
    this->proxy_host = proxy_host;
    this->m_proxy_host_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCommonsHttpclientProperties::getProxyUser() const {
    return proxy_user;
}
void
OAIComDayCommonsHttpclientProperties::setProxyUser(const OAIConfigNodePropertyString &proxy_user) {
    this->proxy_user = proxy_user;
    this->m_proxy_user_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCommonsHttpclientProperties::getProxyPassword() const {
    return proxy_password;
}
void
OAIComDayCommonsHttpclientProperties::setProxyPassword(const OAIConfigNodePropertyString &proxy_password) {
    this->proxy_password = proxy_password;
    this->m_proxy_password_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCommonsHttpclientProperties::getProxyNtlmHost() const {
    return proxy_ntlm_host;
}
void
OAIComDayCommonsHttpclientProperties::setProxyNtlmHost(const OAIConfigNodePropertyString &proxy_ntlm_host) {
    this->proxy_ntlm_host = proxy_ntlm_host;
    this->m_proxy_ntlm_host_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCommonsHttpclientProperties::getProxyNtlmDomain() const {
    return proxy_ntlm_domain;
}
void
OAIComDayCommonsHttpclientProperties::setProxyNtlmDomain(const OAIConfigNodePropertyString &proxy_ntlm_domain) {
    this->proxy_ntlm_domain = proxy_ntlm_domain;
    this->m_proxy_ntlm_domain_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCommonsHttpclientProperties::getProxyExceptions() const {
    return proxy_exceptions;
}
void
OAIComDayCommonsHttpclientProperties::setProxyExceptions(const OAIConfigNodePropertyArray &proxy_exceptions) {
    this->proxy_exceptions = proxy_exceptions;
    this->m_proxy_exceptions_isSet = true;
}


bool
OAIComDayCommonsHttpclientProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(proxy_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(proxy_host.isSet()){ isObjectUpdated = true; break;}
    
        if(proxy_user.isSet()){ isObjectUpdated = true; break;}
    
        if(proxy_password.isSet()){ isObjectUpdated = true; break;}
    
        if(proxy_ntlm_host.isSet()){ isObjectUpdated = true; break;}
    
        if(proxy_ntlm_domain.isSet()){ isObjectUpdated = true; break;}
    
        if(proxy_exceptions.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

