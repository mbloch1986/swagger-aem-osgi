/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheFelixHttpSslfilterSslFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheFelixHttpSslfilterSslFilterProperties::OAIOrgApacheFelixHttpSslfilterSslFilterProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheFelixHttpSslfilterSslFilterProperties::OAIOrgApacheFelixHttpSslfilterSslFilterProperties() {
    this->init();
}

OAIOrgApacheFelixHttpSslfilterSslFilterProperties::~OAIOrgApacheFelixHttpSslfilterSslFilterProperties() {
    
}

void
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::init() {
    m_ssl_forward_header_isSet = false;
    m_ssl_forward_value_isSet = false;
    m_ssl_forward_cert_header_isSet = false;
    m_rewrite_absolute_urls_isSet = false;
}

void
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(ssl_forward_header, json[QString("ssl-forward.header")]);
    
    ::OpenAPI::fromJsonValue(ssl_forward_value, json[QString("ssl-forward.value")]);
    
    ::OpenAPI::fromJsonValue(ssl_forward_cert_header, json[QString("ssl-forward-cert.header")]);
    
    ::OpenAPI::fromJsonValue(rewrite_absolute_urls, json[QString("rewrite.absolute.urls")]);
    
}

QString
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::asJsonObject() const {
    QJsonObject obj;
	if(ssl_forward_header.isSet()){
        obj.insert(QString("ssl-forward.header"), ::OpenAPI::toJsonValue(ssl_forward_header));
    }
	if(ssl_forward_value.isSet()){
        obj.insert(QString("ssl-forward.value"), ::OpenAPI::toJsonValue(ssl_forward_value));
    }
	if(ssl_forward_cert_header.isSet()){
        obj.insert(QString("ssl-forward-cert.header"), ::OpenAPI::toJsonValue(ssl_forward_cert_header));
    }
	if(rewrite_absolute_urls.isSet()){
        obj.insert(QString("rewrite.absolute.urls"), ::OpenAPI::toJsonValue(rewrite_absolute_urls));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::getSslForwardHeader() const {
    return ssl_forward_header;
}
void
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::setSslForwardHeader(const OAIConfigNodePropertyString &ssl_forward_header) {
    this->ssl_forward_header = ssl_forward_header;
    this->m_ssl_forward_header_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::getSslForwardValue() const {
    return ssl_forward_value;
}
void
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::setSslForwardValue(const OAIConfigNodePropertyString &ssl_forward_value) {
    this->ssl_forward_value = ssl_forward_value;
    this->m_ssl_forward_value_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::getSslForwardCertHeader() const {
    return ssl_forward_cert_header;
}
void
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::setSslForwardCertHeader(const OAIConfigNodePropertyString &ssl_forward_cert_header) {
    this->ssl_forward_cert_header = ssl_forward_cert_header;
    this->m_ssl_forward_cert_header_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::getRewriteAbsoluteUrls() const {
    return rewrite_absolute_urls;
}
void
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::setRewriteAbsoluteUrls(const OAIConfigNodePropertyBoolean &rewrite_absolute_urls) {
    this->rewrite_absolute_urls = rewrite_absolute_urls;
    this->m_rewrite_absolute_urls_isSet = true;
}


bool
OAIOrgApacheFelixHttpSslfilterSslFilterProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(ssl_forward_header.isSet()){ isObjectUpdated = true; break;}
    
        if(ssl_forward_value.isSet()){ isObjectUpdated = true; break;}
    
        if(ssl_forward_cert_header.isSet()){ isObjectUpdated = true; break;}
    
        if(rewrite_absolute_urls.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

