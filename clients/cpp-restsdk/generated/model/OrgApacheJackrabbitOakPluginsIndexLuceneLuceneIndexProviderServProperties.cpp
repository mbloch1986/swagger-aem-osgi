/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties()
{
    m_DisabledIsSet = false;
    m_DebugIsSet = false;
    m_LocalIndexDirIsSet = false;
    m_EnableOpenIndexAsyncIsSet = false;
    m_ThreadPoolSizeIsSet = false;
    m_PrefetchIndexFilesIsSet = false;
    m_ExtractedTextCacheSizeInMBIsSet = false;
    m_ExtractedTextCacheExpiryInSecsIsSet = false;
    m_AlwaysUsePreExtractedCacheIsSet = false;
    m_BooleanClauseLimitIsSet = false;
    m_EnableHybridIndexingIsSet = false;
    m_HybridQueueSizeIsSet = false;
    m_DisableStoredIndexDefinitionIsSet = false;
    m_DeletedBlobsCollectionEnabledIsSet = false;
    m_PropIndexCleanerIntervalInSecsIsSet = false;
    m_EnableSingleBlobIndexFilesIsSet = false;
}

OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::~OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties()
{
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DisabledIsSet)
    {
        val[utility::conversions::to_string_t("disabled")] = ModelBase::toJson(m_Disabled);
    }
    if(m_DebugIsSet)
    {
        val[utility::conversions::to_string_t("debug")] = ModelBase::toJson(m_Debug);
    }
    if(m_LocalIndexDirIsSet)
    {
        val[utility::conversions::to_string_t("localIndexDir")] = ModelBase::toJson(m_LocalIndexDir);
    }
    if(m_EnableOpenIndexAsyncIsSet)
    {
        val[utility::conversions::to_string_t("enableOpenIndexAsync")] = ModelBase::toJson(m_EnableOpenIndexAsync);
    }
    if(m_ThreadPoolSizeIsSet)
    {
        val[utility::conversions::to_string_t("threadPoolSize")] = ModelBase::toJson(m_ThreadPoolSize);
    }
    if(m_PrefetchIndexFilesIsSet)
    {
        val[utility::conversions::to_string_t("prefetchIndexFiles")] = ModelBase::toJson(m_PrefetchIndexFiles);
    }
    if(m_ExtractedTextCacheSizeInMBIsSet)
    {
        val[utility::conversions::to_string_t("extractedTextCacheSizeInMB")] = ModelBase::toJson(m_ExtractedTextCacheSizeInMB);
    }
    if(m_ExtractedTextCacheExpiryInSecsIsSet)
    {
        val[utility::conversions::to_string_t("extractedTextCacheExpiryInSecs")] = ModelBase::toJson(m_ExtractedTextCacheExpiryInSecs);
    }
    if(m_AlwaysUsePreExtractedCacheIsSet)
    {
        val[utility::conversions::to_string_t("alwaysUsePreExtractedCache")] = ModelBase::toJson(m_AlwaysUsePreExtractedCache);
    }
    if(m_BooleanClauseLimitIsSet)
    {
        val[utility::conversions::to_string_t("booleanClauseLimit")] = ModelBase::toJson(m_BooleanClauseLimit);
    }
    if(m_EnableHybridIndexingIsSet)
    {
        val[utility::conversions::to_string_t("enableHybridIndexing")] = ModelBase::toJson(m_EnableHybridIndexing);
    }
    if(m_HybridQueueSizeIsSet)
    {
        val[utility::conversions::to_string_t("hybridQueueSize")] = ModelBase::toJson(m_HybridQueueSize);
    }
    if(m_DisableStoredIndexDefinitionIsSet)
    {
        val[utility::conversions::to_string_t("disableStoredIndexDefinition")] = ModelBase::toJson(m_DisableStoredIndexDefinition);
    }
    if(m_DeletedBlobsCollectionEnabledIsSet)
    {
        val[utility::conversions::to_string_t("deletedBlobsCollectionEnabled")] = ModelBase::toJson(m_DeletedBlobsCollectionEnabled);
    }
    if(m_PropIndexCleanerIntervalInSecsIsSet)
    {
        val[utility::conversions::to_string_t("propIndexCleanerIntervalInSecs")] = ModelBase::toJson(m_PropIndexCleanerIntervalInSecs);
    }
    if(m_EnableSingleBlobIndexFilesIsSet)
    {
        val[utility::conversions::to_string_t("enableSingleBlobIndexFiles")] = ModelBase::toJson(m_EnableSingleBlobIndexFiles);
    }

    return val;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("disabled")))
    {
        if(!val[utility::conversions::to_string_t("disabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("disabled")]);
            setDisabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("debug")))
    {
        if(!val[utility::conversions::to_string_t("debug")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("debug")]);
            setDebug( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localIndexDir")))
    {
        if(!val[utility::conversions::to_string_t("localIndexDir")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("localIndexDir")]);
            setLocalIndexDir( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enableOpenIndexAsync")))
    {
        if(!val[utility::conversions::to_string_t("enableOpenIndexAsync")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableOpenIndexAsync")]);
            setEnableOpenIndexAsync( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("threadPoolSize")))
    {
        if(!val[utility::conversions::to_string_t("threadPoolSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("threadPoolSize")]);
            setThreadPoolSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prefetchIndexFiles")))
    {
        if(!val[utility::conversions::to_string_t("prefetchIndexFiles")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("prefetchIndexFiles")]);
            setPrefetchIndexFiles( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("extractedTextCacheSizeInMB")))
    {
        if(!val[utility::conversions::to_string_t("extractedTextCacheSizeInMB")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("extractedTextCacheSizeInMB")]);
            setExtractedTextCacheSizeInMB( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("extractedTextCacheExpiryInSecs")))
    {
        if(!val[utility::conversions::to_string_t("extractedTextCacheExpiryInSecs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("extractedTextCacheExpiryInSecs")]);
            setExtractedTextCacheExpiryInSecs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alwaysUsePreExtractedCache")))
    {
        if(!val[utility::conversions::to_string_t("alwaysUsePreExtractedCache")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("alwaysUsePreExtractedCache")]);
            setAlwaysUsePreExtractedCache( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("booleanClauseLimit")))
    {
        if(!val[utility::conversions::to_string_t("booleanClauseLimit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("booleanClauseLimit")]);
            setBooleanClauseLimit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enableHybridIndexing")))
    {
        if(!val[utility::conversions::to_string_t("enableHybridIndexing")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableHybridIndexing")]);
            setEnableHybridIndexing( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hybridQueueSize")))
    {
        if(!val[utility::conversions::to_string_t("hybridQueueSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("hybridQueueSize")]);
            setHybridQueueSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("disableStoredIndexDefinition")))
    {
        if(!val[utility::conversions::to_string_t("disableStoredIndexDefinition")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("disableStoredIndexDefinition")]);
            setDisableStoredIndexDefinition( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deletedBlobsCollectionEnabled")))
    {
        if(!val[utility::conversions::to_string_t("deletedBlobsCollectionEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("deletedBlobsCollectionEnabled")]);
            setDeletedBlobsCollectionEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("propIndexCleanerIntervalInSecs")))
    {
        if(!val[utility::conversions::to_string_t("propIndexCleanerIntervalInSecs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("propIndexCleanerIntervalInSecs")]);
            setPropIndexCleanerIntervalInSecs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enableSingleBlobIndexFiles")))
    {
        if(!val[utility::conversions::to_string_t("enableSingleBlobIndexFiles")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableSingleBlobIndexFiles")]);
            setEnableSingleBlobIndexFiles( newItem );
        }
    }
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_DisabledIsSet)
    {
        if (m_Disabled.get())
        {
            m_Disabled->toMultipart(multipart, utility::conversions::to_string_t("disabled."));
        }
    }
    if(m_DebugIsSet)
    {
        if (m_Debug.get())
        {
            m_Debug->toMultipart(multipart, utility::conversions::to_string_t("debug."));
        }
    }
    if(m_LocalIndexDirIsSet)
    {
        if (m_LocalIndexDir.get())
        {
            m_LocalIndexDir->toMultipart(multipart, utility::conversions::to_string_t("localIndexDir."));
        }
    }
    if(m_EnableOpenIndexAsyncIsSet)
    {
        if (m_EnableOpenIndexAsync.get())
        {
            m_EnableOpenIndexAsync->toMultipart(multipart, utility::conversions::to_string_t("enableOpenIndexAsync."));
        }
    }
    if(m_ThreadPoolSizeIsSet)
    {
        if (m_ThreadPoolSize.get())
        {
            m_ThreadPoolSize->toMultipart(multipart, utility::conversions::to_string_t("threadPoolSize."));
        }
    }
    if(m_PrefetchIndexFilesIsSet)
    {
        if (m_PrefetchIndexFiles.get())
        {
            m_PrefetchIndexFiles->toMultipart(multipart, utility::conversions::to_string_t("prefetchIndexFiles."));
        }
    }
    if(m_ExtractedTextCacheSizeInMBIsSet)
    {
        if (m_ExtractedTextCacheSizeInMB.get())
        {
            m_ExtractedTextCacheSizeInMB->toMultipart(multipart, utility::conversions::to_string_t("extractedTextCacheSizeInMB."));
        }
    }
    if(m_ExtractedTextCacheExpiryInSecsIsSet)
    {
        if (m_ExtractedTextCacheExpiryInSecs.get())
        {
            m_ExtractedTextCacheExpiryInSecs->toMultipart(multipart, utility::conversions::to_string_t("extractedTextCacheExpiryInSecs."));
        }
    }
    if(m_AlwaysUsePreExtractedCacheIsSet)
    {
        if (m_AlwaysUsePreExtractedCache.get())
        {
            m_AlwaysUsePreExtractedCache->toMultipart(multipart, utility::conversions::to_string_t("alwaysUsePreExtractedCache."));
        }
    }
    if(m_BooleanClauseLimitIsSet)
    {
        if (m_BooleanClauseLimit.get())
        {
            m_BooleanClauseLimit->toMultipart(multipart, utility::conversions::to_string_t("booleanClauseLimit."));
        }
    }
    if(m_EnableHybridIndexingIsSet)
    {
        if (m_EnableHybridIndexing.get())
        {
            m_EnableHybridIndexing->toMultipart(multipart, utility::conversions::to_string_t("enableHybridIndexing."));
        }
    }
    if(m_HybridQueueSizeIsSet)
    {
        if (m_HybridQueueSize.get())
        {
            m_HybridQueueSize->toMultipart(multipart, utility::conversions::to_string_t("hybridQueueSize."));
        }
    }
    if(m_DisableStoredIndexDefinitionIsSet)
    {
        if (m_DisableStoredIndexDefinition.get())
        {
            m_DisableStoredIndexDefinition->toMultipart(multipart, utility::conversions::to_string_t("disableStoredIndexDefinition."));
        }
    }
    if(m_DeletedBlobsCollectionEnabledIsSet)
    {
        if (m_DeletedBlobsCollectionEnabled.get())
        {
            m_DeletedBlobsCollectionEnabled->toMultipart(multipart, utility::conversions::to_string_t("deletedBlobsCollectionEnabled."));
        }
    }
    if(m_PropIndexCleanerIntervalInSecsIsSet)
    {
        if (m_PropIndexCleanerIntervalInSecs.get())
        {
            m_PropIndexCleanerIntervalInSecs->toMultipart(multipart, utility::conversions::to_string_t("propIndexCleanerIntervalInSecs."));
        }
    }
    if(m_EnableSingleBlobIndexFilesIsSet)
    {
        if (m_EnableSingleBlobIndexFiles.get())
        {
            m_EnableSingleBlobIndexFiles->toMultipart(multipart, utility::conversions::to_string_t("enableSingleBlobIndexFiles."));
        }
    }
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("disabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("disabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("disabled."));
            setDisabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("debug")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("debug")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("debug."));
            setDebug( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localIndexDir")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("localIndexDir")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("localIndexDir."));
            setLocalIndexDir( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enableOpenIndexAsync")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableOpenIndexAsync")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableOpenIndexAsync."));
            setEnableOpenIndexAsync( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("threadPoolSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("threadPoolSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("threadPoolSize."));
            setThreadPoolSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prefetchIndexFiles")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("prefetchIndexFiles")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("prefetchIndexFiles."));
            setPrefetchIndexFiles( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("extractedTextCacheSizeInMB")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("extractedTextCacheSizeInMB")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("extractedTextCacheSizeInMB."));
            setExtractedTextCacheSizeInMB( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("extractedTextCacheExpiryInSecs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("extractedTextCacheExpiryInSecs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("extractedTextCacheExpiryInSecs."));
            setExtractedTextCacheExpiryInSecs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("alwaysUsePreExtractedCache")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("alwaysUsePreExtractedCache")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("alwaysUsePreExtractedCache."));
            setAlwaysUsePreExtractedCache( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("booleanClauseLimit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("booleanClauseLimit")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("booleanClauseLimit."));
            setBooleanClauseLimit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enableHybridIndexing")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableHybridIndexing")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableHybridIndexing."));
            setEnableHybridIndexing( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hybridQueueSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("hybridQueueSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("hybridQueueSize."));
            setHybridQueueSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("disableStoredIndexDefinition")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("disableStoredIndexDefinition")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("disableStoredIndexDefinition."));
            setDisableStoredIndexDefinition( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deletedBlobsCollectionEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("deletedBlobsCollectionEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("deletedBlobsCollectionEnabled."));
            setDeletedBlobsCollectionEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("propIndexCleanerIntervalInSecs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("propIndexCleanerIntervalInSecs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("propIndexCleanerIntervalInSecs."));
            setPropIndexCleanerIntervalInSecs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enableSingleBlobIndexFiles")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableSingleBlobIndexFiles")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableSingleBlobIndexFiles."));
            setEnableSingleBlobIndexFiles( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDisabled() const
{
    return m_Disabled;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDisabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::disabledIsSet() const
{
    return m_DisabledIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetDisabled()
{
    m_DisabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDebug() const
{
    return m_Debug;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDebug(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Debug = value;
    m_DebugIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::debugIsSet() const
{
    return m_DebugIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetDebug()
{
    m_DebugIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getLocalIndexDir() const
{
    return m_LocalIndexDir;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setLocalIndexDir(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_LocalIndexDir = value;
    m_LocalIndexDirIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::localIndexDirIsSet() const
{
    return m_LocalIndexDirIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetLocalIndexDir()
{
    m_LocalIndexDirIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableOpenIndexAsync() const
{
    return m_EnableOpenIndexAsync;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableOpenIndexAsync(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableOpenIndexAsync = value;
    m_EnableOpenIndexAsyncIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::enableOpenIndexAsyncIsSet() const
{
    return m_EnableOpenIndexAsyncIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetEnableOpenIndexAsync()
{
    m_EnableOpenIndexAsyncIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getThreadPoolSize() const
{
    return m_ThreadPoolSize;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setThreadPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ThreadPoolSize = value;
    m_ThreadPoolSizeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::threadPoolSizeIsSet() const
{
    return m_ThreadPoolSizeIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetThreadPoolSize()
{
    m_ThreadPoolSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getPrefetchIndexFiles() const
{
    return m_PrefetchIndexFiles;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setPrefetchIndexFiles(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_PrefetchIndexFiles = value;
    m_PrefetchIndexFilesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::prefetchIndexFilesIsSet() const
{
    return m_PrefetchIndexFilesIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetPrefetchIndexFiles()
{
    m_PrefetchIndexFilesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getExtractedTextCacheSizeInMB() const
{
    return m_ExtractedTextCacheSizeInMB;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setExtractedTextCacheSizeInMB(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ExtractedTextCacheSizeInMB = value;
    m_ExtractedTextCacheSizeInMBIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::extractedTextCacheSizeInMBIsSet() const
{
    return m_ExtractedTextCacheSizeInMBIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetExtractedTextCacheSizeInMB()
{
    m_ExtractedTextCacheSizeInMBIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getExtractedTextCacheExpiryInSecs() const
{
    return m_ExtractedTextCacheExpiryInSecs;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setExtractedTextCacheExpiryInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ExtractedTextCacheExpiryInSecs = value;
    m_ExtractedTextCacheExpiryInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::extractedTextCacheExpiryInSecsIsSet() const
{
    return m_ExtractedTextCacheExpiryInSecsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetExtractedTextCacheExpiryInSecs()
{
    m_ExtractedTextCacheExpiryInSecsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getAlwaysUsePreExtractedCache() const
{
    return m_AlwaysUsePreExtractedCache;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setAlwaysUsePreExtractedCache(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_AlwaysUsePreExtractedCache = value;
    m_AlwaysUsePreExtractedCacheIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::alwaysUsePreExtractedCacheIsSet() const
{
    return m_AlwaysUsePreExtractedCacheIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetAlwaysUsePreExtractedCache()
{
    m_AlwaysUsePreExtractedCacheIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getBooleanClauseLimit() const
{
    return m_BooleanClauseLimit;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setBooleanClauseLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BooleanClauseLimit = value;
    m_BooleanClauseLimitIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::booleanClauseLimitIsSet() const
{
    return m_BooleanClauseLimitIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetBooleanClauseLimit()
{
    m_BooleanClauseLimitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableHybridIndexing() const
{
    return m_EnableHybridIndexing;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableHybridIndexing(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableHybridIndexing = value;
    m_EnableHybridIndexingIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::enableHybridIndexingIsSet() const
{
    return m_EnableHybridIndexingIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetEnableHybridIndexing()
{
    m_EnableHybridIndexingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getHybridQueueSize() const
{
    return m_HybridQueueSize;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setHybridQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_HybridQueueSize = value;
    m_HybridQueueSizeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::hybridQueueSizeIsSet() const
{
    return m_HybridQueueSizeIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetHybridQueueSize()
{
    m_HybridQueueSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDisableStoredIndexDefinition() const
{
    return m_DisableStoredIndexDefinition;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDisableStoredIndexDefinition(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_DisableStoredIndexDefinition = value;
    m_DisableStoredIndexDefinitionIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::disableStoredIndexDefinitionIsSet() const
{
    return m_DisableStoredIndexDefinitionIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetDisableStoredIndexDefinition()
{
    m_DisableStoredIndexDefinitionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDeletedBlobsCollectionEnabled() const
{
    return m_DeletedBlobsCollectionEnabled;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDeletedBlobsCollectionEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_DeletedBlobsCollectionEnabled = value;
    m_DeletedBlobsCollectionEnabledIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::deletedBlobsCollectionEnabledIsSet() const
{
    return m_DeletedBlobsCollectionEnabledIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetDeletedBlobsCollectionEnabled()
{
    m_DeletedBlobsCollectionEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getPropIndexCleanerIntervalInSecs() const
{
    return m_PropIndexCleanerIntervalInSecs;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setPropIndexCleanerIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PropIndexCleanerIntervalInSecs = value;
    m_PropIndexCleanerIntervalInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::propIndexCleanerIntervalInSecsIsSet() const
{
    return m_PropIndexCleanerIntervalInSecsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetPropIndexCleanerIntervalInSecs()
{
    m_PropIndexCleanerIntervalInSecsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableSingleBlobIndexFiles() const
{
    return m_EnableSingleBlobIndexFiles;
}


void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableSingleBlobIndexFiles(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableSingleBlobIndexFiles = value;
    m_EnableSingleBlobIndexFilesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::enableSingleBlobIndexFilesIsSet() const
{
    return m_EnableSingleBlobIndexFilesIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetEnableSingleBlobIndexFiles()
{
    m_EnableSingleBlobIndexFilesIsSet = false;
}

}
}
}
}

