#ifndef _ConfigmgrManager_H_
#define _ConfigmgrManager_H_

#include <string>
#include <cstring>
#include <list>
#include <glib.h>
#include "AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.h"
#include "AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.h"
#include "AnalyticsComponentQueryCacheServiceInfo.h"
#include "ApacheSlingHealthCheckResultHTMLSerializerInfo.h"
#include "ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.h"
#include "ComAdobeAemTransactionCoreImplTransactionRecorderInfo.h"
#include "ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.h"
#include "ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.h"
#include "ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.h"
#include "ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.h"
#include "ComAdobeCqAccountApiAccountManagementServiceInfo.h"
#include "ComAdobeCqAccountImplAccountManagementServletInfo.h"
#include "ComAdobeCqAddressImplLocationLocationListServletInfo.h"
#include "ComAdobeCqAuditPurgeDamInfo.h"
#include "ComAdobeCqAuditPurgePagesInfo.h"
#include "ComAdobeCqAuditPurgeReplicationInfo.h"
#include "ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.h"
#include "ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.h"
#include "ComAdobeCqCdnRewriterImplCDNRewriterInfo.h"
#include "ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.h"
#include "ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.h"
#include "ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.h"
#include "ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.h"
#include "ComAdobeCqCommerceImplAssetVideoHandlerInfo.h"
#include "ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.h"
#include "ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.h"
#include "ComAdobeCqCommercePimImplPageEventListenerInfo.h"
#include "ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.h"
#include "ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.h"
#include "ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.h"
#include "ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.h"
#include "ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.h"
#include "ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.h"
#include "ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.h"
#include "ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.h"
#include "ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.h"
#include "ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.h"
#include "ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.h"
#include "ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.h"
#include "ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.h"
#include "ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.h"
#include "ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.h"
#include "ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.h"
#include "ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.h"
#include "ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.h"
#include "ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.h"
#include "ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.h"
#include "ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.h"
#include "ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.h"
#include "ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.h"
#include "ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.h"
#include "ComAdobeCqHcContentPackagesHealthCheckInfo.h"
#include "ComAdobeCqHistoryImplHistoryRequestFilterInfo.h"
#include "ComAdobeCqHistoryImplHistoryServiceImplInfo.h"
#include "ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.h"
#include "ComAdobeCqProjectsImplServletProjectImageServletInfo.h"
#include "ComAdobeCqProjectsPurgeSchedulerInfo.h"
#include "ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.h"
#include "ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.h"
#include "ComAdobeCqScreensDeviceImplDeviceServiceInfo.h"
#include "ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.h"
#include "ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.h"
#include "ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.h"
#include "ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.h"
#include "ComAdobeCqScreensImplScreensChannelPostProcessorInfo.h"
#include "ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.h"
#include "ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.h"
#include "ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.h"
#include "ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.h"
#include "ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.h"
#include "ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.h"
#include "ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.h"
#include "ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.h"
#include "ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.h"
#include "ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.h"
#include "ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.h"
#include "ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.h"
#include "ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.h"
#include "ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.h"
#include "ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.h"
#include "ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.h"
#include "ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.h"
#include "ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.h"
#include "ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.h"
#include "ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.h"
#include "ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.h"
#include "ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.h"
#include "ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.h"
#include "ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.h"
#include "ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.h"
#include "ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.h"
#include "ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.h"
#include "ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.h"
#include "ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.h"
#include "ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.h"
#include "ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.h"
#include "ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.h"
#include "ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.h"
#include "ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.h"
#include "ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.h"
#include "ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.h"
#include "ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.h"
#include "ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.h"
#include "ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.h"
#include "ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.h"
#include "ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.h"
#include "ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.h"
#include "ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.h"
#include "ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.h"
#include "ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.h"
#include "ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.h"
#include "ComAdobeCqSocialGroupImplGroupServiceImplInfo.h"
#include "ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.h"
#include "ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.h"
#include "ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.h"
#include "ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.h"
#include "ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.h"
#include "ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.h"
#include "ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.h"
#include "ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.h"
#include "ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.h"
#include "ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.h"
#include "ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.h"
#include "ComAdobeCqSocialNotificationsImplMentionsRouterInfo.h"
#include "ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.h"
#include "ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.h"
#include "ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.h"
#include "ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.h"
#include "ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.h"
#include "ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.h"
#include "ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.h"
#include "ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.h"
#include "ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.h"
#include "ComAdobeCqSocialScoringImplScoringEventListenerInfo.h"
#include "ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.h"
#include "ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.h"
#include "ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.h"
#include "ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.h"
#include "ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.h"
#include "ComAdobeCqSocialSyncImplDiffChangesObserverInfo.h"
#include "ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.h"
#include "ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.h"
#include "ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.h"
#include "ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.h"
#include "ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.h"
#include "ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.h"
#include "ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.h"
#include "ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.h"
#include "ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.h"
#include "ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.h"
#include "ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.h"
#include "ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.h"
#include "ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.h"
#include "ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.h"
#include "ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.h"
#include "ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.h"
#include "ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.h"
#include "ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.h"
#include "ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.h"
#include "ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.h"
#include "ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.h"
#include "ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.h"
#include "ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.h"
#include "ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.h"
#include "ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.h"
#include "ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.h"
#include "ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.h"
#include "ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.h"
#include "ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.h"
#include "ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.h"
#include "ComAdobeFormsCommonServletTempCleanUpTaskInfo.h"
#include "ComAdobeGraniteAcpPlatformPlatformServletInfo.h"
#include "ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.h"
#include "ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.h"
#include "ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.h"
#include "ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.h"
#include "ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.h"
#include "ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.h"
#include "ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.h"
#include "ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.h"
#include "ComAdobeGraniteAuthImsImplIMSProviderImplInfo.h"
#include "ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.h"
#include "ComAdobeGraniteAuthImsInfo.h"
#include "ComAdobeGraniteAuthOauthAccesstokenProviderInfo.h"
#include "ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.h"
#include "ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.h"
#include "ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.h"
#include "ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.h"
#include "ComAdobeGraniteAuthOauthImplGraniteProviderInfo.h"
#include "ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.h"
#include "ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.h"
#include "ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.h"
#include "ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.h"
#include "ComAdobeGraniteAuthOauthProviderInfo.h"
#include "ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.h"
#include "ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.h"
#include "ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.h"
#include "ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.h"
#include "ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.h"
#include "ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.h"
#include "ComAdobeGraniteCompatrouterImplRoutingConfigInfo.h"
#include "ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.h"
#include "ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.h"
#include "ComAdobeGraniteContexthubImplContextHubImplInfo.h"
#include "ComAdobeGraniteCorsImplCORSPolicyImplInfo.h"
#include "ComAdobeGraniteCsrfImplCSRFFilterInfo.h"
#include "ComAdobeGraniteCsrfImplCSRFServletInfo.h"
#include "ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.h"
#include "ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.h"
#include "ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.h"
#include "ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.h"
#include "ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.h"
#include "ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.h"
#include "ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.h"
#include "ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.h"
#include "ComAdobeGraniteFragsImplRandomFeatureInfo.h"
#include "ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.h"
#include "ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.h"
#include "ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.h"
#include "ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.h"
#include "ComAdobeGraniteInfocollectorInfoCollectorInfo.h"
#include "ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.h"
#include "ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.h"
#include "ComAdobeGraniteLoggingImplLogAnalyserImplInfo.h"
#include "ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.h"
#include "ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.h"
#include "ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.h"
#include "ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.h"
#include "ComAdobeGraniteMonitoringImplScriptConfigImplInfo.h"
#include "ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.h"
#include "ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.h"
#include "ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.h"
#include "ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.h"
#include "ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.h"
#include "ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.h"
#include "ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.h"
#include "ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.h"
#include "ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.h"
#include "ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.h"
#include "ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.h"
#include "ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.h"
#include "ComAdobeGraniteOptoutImplOptOutServiceImplInfo.h"
#include "ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.h"
#include "ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.h"
#include "ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.h"
#include "ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.h"
#include "ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.h"
#include "ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.h"
#include "ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.h"
#include "ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.h"
#include "ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.h"
#include "ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.h"
#include "ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.h"
#include "ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.h"
#include "ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.h"
#include "ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.h"
#include "ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.h"
#include "ComAdobeGraniteRepositoryServiceUserConfigurationInfo.h"
#include "ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.h"
#include "ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.h"
#include "ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.h"
#include "ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.h"
#include "ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.h"
#include "ComAdobeGraniteRestImplServletDefaultGETServletInfo.h"
#include "ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.h"
#include "ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.h"
#include "ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.h"
#include "ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.h"
#include "ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.h"
#include "ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.h"
#include "ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.h"
#include "ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.h"
#include "ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.h"
#include "ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.h"
#include "ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.h"
#include "ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.h"
#include "ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.h"
#include "ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.h"
#include "ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.h"
#include "ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.h"
#include "ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.h"
#include "ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.h"
#include "ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.h"
#include "ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.h"
#include "ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.h"
#include "ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.h"
#include "ComAdobeGraniteWorkflowPurgeSchedulerInfo.h"
#include "ComAdobeOctopusNcommBootstrapInfo.h"
#include "ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.h"
#include "ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.h"
#include "ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.h"
#include "ComDayCommonsHttpclientInfo.h"
#include "ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.h"
#include "ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.h"
#include "ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.h"
#include "ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.h"
#include "ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.h"
#include "ComDayCqAuthImplCugCugSupportImplInfo.h"
#include "ComDayCqAuthImplLoginSelectorHandlerInfo.h"
#include "ComDayCqCommonsImplExternalizerImplInfo.h"
#include "ComDayCqCommonsServletsRootMappingServletInfo.h"
#include "ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.h"
#include "ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.h"
#include "ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.h"
#include "ComDayCqContentsyncImplContentSyncManagerImplInfo.h"
#include "ComDayCqDamCommonsHandlerStandardImageHandlerInfo.h"
#include "ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.h"
#include "ComDayCqDamCommonsUtilImplAssetCacheImplInfo.h"
#include "ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.h"
#include "ComDayCqDamCoreImplAssetMoveListenerInfo.h"
#include "ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.h"
#include "ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.h"
#include "ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.h"
#include "ComDayCqDamCoreImplDamChangeEventListenerInfo.h"
#include "ComDayCqDamCoreImplDamEventPurgeServiceInfo.h"
#include "ComDayCqDamCoreImplDamEventRecorderImplInfo.h"
#include "ComDayCqDamCoreImplEventDamEventAuditListenerInfo.h"
#include "ComDayCqDamCoreImplExpiryNotificationJobImplInfo.h"
#include "ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.h"
#include "ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.h"
#include "ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.h"
#include "ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.h"
#include "ComDayCqDamCoreImplHandlerJpegHandlerInfo.h"
#include "ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.h"
#include "ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.h"
#include "ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.h"
#include "ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.h"
#include "ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.h"
#include "ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.h"
#include "ComDayCqDamCoreImplLightboxLightboxServletInfo.h"
#include "ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.h"
#include "ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.h"
#include "ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.h"
#include "ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.h"
#include "ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.h"
#include "ComDayCqDamCoreImplProcessTextExtractionProcessInfo.h"
#include "ComDayCqDamCoreImplRenditionMakerImplInfo.h"
#include "ComDayCqDamCoreImplReportsReportExportServiceInfo.h"
#include "ComDayCqDamCoreImplReportsReportPurgeServiceInfo.h"
#include "ComDayCqDamCoreImplServletAssetDownloadServletInfo.h"
#include "ComDayCqDamCoreImplServletAssetStatusServletInfo.h"
#include "ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.h"
#include "ComDayCqDamCoreImplServletBatchMetadataServletInfo.h"
#include "ComDayCqDamCoreImplServletBinaryProviderServletInfo.h"
#include "ComDayCqDamCoreImplServletCollectionServletInfo.h"
#include "ComDayCqDamCoreImplServletCollectionsServletInfo.h"
#include "ComDayCqDamCoreImplServletCompanionServletInfo.h"
#include "ComDayCqDamCoreImplServletCreateAssetServletInfo.h"
#include "ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.h"
#include "ComDayCqDamCoreImplServletGuidLookupFilterInfo.h"
#include "ComDayCqDamCoreImplServletHealthCheckServletInfo.h"
#include "ComDayCqDamCoreImplServletMetadataGetServletInfo.h"
#include "ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.h"
#include "ComDayCqDamCoreImplServletResourceCollectionServletInfo.h"
#include "ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.h"
#include "ComDayCqDamCoreImplUnzipUnzipConfigInfo.h"
#include "ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.h"
#include "ComDayCqDamCoreProcessExtractMetadataProcessInfo.h"
#include "ComDayCqDamCoreProcessMetadataProcessorProcessInfo.h"
#include "ComDayCqDamHandlerFfmpegLocatorImplInfo.h"
#include "ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.h"
#include "ComDayCqDamHandlerStandardPdfPdfHandlerInfo.h"
#include "ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.h"
#include "ComDayCqDamHandlerStandardPsdPsdHandlerInfo.h"
#include "ComDayCqDamIdsImplIDSJobProcessorInfo.h"
#include "ComDayCqDamIdsImplIDSPoolManagerImplInfo.h"
#include "ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.h"
#include "ComDayCqDamInddImplServletSnippetCreationServletInfo.h"
#include "ComDayCqDamInddProcessINDDMediaExtractProcessInfo.h"
#include "ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.h"
#include "ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.h"
#include "ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.h"
#include "ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.h"
#include "ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.h"
#include "ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.h"
#include "ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.h"
#include "ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.h"
#include "ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.h"
#include "ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.h"
#include "ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.h"
#include "ComDayCqDamScene7ImplScene7APIClientImplInfo.h"
#include "ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.h"
#include "ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.h"
#include "ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.h"
#include "ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.h"
#include "ComDayCqDamScene7ImplScene7UploadServiceImplInfo.h"
#include "ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.h"
#include "ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.h"
#include "ComDayCqDamVideoImplServletVideoTestServletInfo.h"
#include "ComDayCqExtwidgetServletsImageSpriteServletInfo.h"
#include "ComDayCqImageInternalFontFontHelperInfo.h"
#include "ComDayCqJcrclustersupportClusterStartLevelControllerInfo.h"
#include "ComDayCqMailerDefaultMailServiceInfo.h"
#include "ComDayCqMailerImplCqMailingServiceInfo.h"
#include "ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.h"
#include "ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.h"
#include "ComDayCqMcmCampaignImplIntegrationConfigImplInfo.h"
#include "ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.h"
#include "ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.h"
#include "ComDayCqMcmImplMCMConfigurationInfo.h"
#include "ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.h"
#include "ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.h"
#include "ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.h"
#include "ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.h"
#include "ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.h"
#include "ComDayCqNotificationImplNotificationServiceImplInfo.h"
#include "ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.h"
#include "ComDayCqPollingImporterImplManagedPollConfigImplInfo.h"
#include "ComDayCqPollingImporterImplManagedPollingImporterImplInfo.h"
#include "ComDayCqPollingImporterImplPollingImporterImplInfo.h"
#include "ComDayCqReplicationAuditReplicationEventListenerInfo.h"
#include "ComDayCqReplicationContentStaticContentBuilderInfo.h"
#include "ComDayCqReplicationImplAgentManagerImplInfo.h"
#include "ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.h"
#include "ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.h"
#include "ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.h"
#include "ComDayCqReplicationImplReplicationReceiverImplInfo.h"
#include "ComDayCqReplicationImplReplicatorImplInfo.h"
#include "ComDayCqReplicationImplReverseReplicatorInfo.h"
#include "ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.h"
#include "ComDayCqReplicationImplTransportHttpInfo.h"
#include "ComDayCqReportingImplCacheCacheImplInfo.h"
#include "ComDayCqReportingImplConfigServiceImplInfo.h"
#include "ComDayCqReportingImplRLogAnalyzerInfo.h"
#include "ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.h"
#include "ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.h"
#include "ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.h"
#include "ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.h"
#include "ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.h"
#include "ComDayCqSearchImplBuilderQueryBuilderImplInfo.h"
#include "ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.h"
#include "ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.h"
#include "ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.h"
#include "ComDayCqSecurityACLSetupInfo.h"
#include "ComDayCqStatisticsImplStatisticsServiceImplInfo.h"
#include "ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.h"
#include "ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.h"
#include "ComDayCqTaggingImplTagGarbageCollectorInfo.h"
#include "ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.h"
#include "ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.h"
#include "ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.h"
#include "ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.h"
#include "ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.h"
#include "ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.h"
#include "ComDayCqWcmCoreImplEventPagePostProcessorInfo.h"
#include "ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.h"
#include "ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.h"
#include "ComDayCqWcmCoreImplLanguageManagerImplInfo.h"
#include "ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.h"
#include "ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.h"
#include "ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.h"
#include "ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.h"
#include "ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.h"
#include "ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.h"
#include "ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.h"
#include "ComDayCqWcmCoreImplServletsFindReplaceServletInfo.h"
#include "ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.h"
#include "ComDayCqWcmCoreImplServletsThumbnailServletInfo.h"
#include "ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.h"
#include "ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.h"
#include "ComDayCqWcmCoreImplVersionManagerImplInfo.h"
#include "ComDayCqWcmCoreImplVersionPurgeTaskInfo.h"
#include "ComDayCqWcmCoreImplWCMDebugFilterInfo.h"
#include "ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.h"
#include "ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.h"
#include "ComDayCqWcmCoreMvtMVTStatisticsImplInfo.h"
#include "ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.h"
#include "ComDayCqWcmCoreWCMRequestFilterInfo.h"
#include "ComDayCqWcmDesignimporterDesignPackageImporterInfo.h"
#include "ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.h"
#include "ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.h"
#include "ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.h"
#include "ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.h"
#include "ComDayCqWcmFoundationFormsImplFormChooserServletInfo.h"
#include "ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.h"
#include "ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.h"
#include "ComDayCqWcmFoundationFormsImplMailServletInfo.h"
#include "ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.h"
#include "ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.h"
#include "ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.h"
#include "ComDayCqWcmFoundationImplPageRedirectServletInfo.h"
#include "ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.h"
#include "ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.h"
#include "ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.h"
#include "ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.h"
#include "ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.h"
#include "ComDayCqWcmMsmImplRolloutManagerImplInfo.h"
#include "ComDayCqWcmMsmImplServletsAuditLogServletInfo.h"
#include "ComDayCqWcmNotificationEmailImplEmailChannelInfo.h"
#include "ComDayCqWcmNotificationImplNotificationManagerImplInfo.h"
#include "ComDayCqWcmScriptingImplBVPManagerInfo.h"
#include "ComDayCqWcmUndoUndoConfigInfo.h"
#include "ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.h"
#include "ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.h"
#include "ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.h"
#include "ComDayCqWidgetImplHtmlLibraryManagerImplInfo.h"
#include "ComDayCqWidgetImplWidgetExtensionProviderImplInfo.h"
#include "ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.h"
#include "ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.h"
#include "ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.h"
#include "ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.h"
#include "GuideLocalizationServiceInfo.h"
#include "MessagingUserComponentFactoryInfo.h"
#include "OrgApacheAriesJmxFrameworkStateConfigInfo.h"
#include "OrgApacheFelixEventadminImplEventAdminInfo.h"
#include "OrgApacheFelixHttpInfo.h"
#include "OrgApacheFelixHttpSslfilterSslFilterInfo.h"
#include "OrgApacheFelixJaasConfigurationFactoryInfo.h"
#include "OrgApacheFelixJaasConfigurationSpiInfo.h"
#include "OrgApacheFelixScrScrServiceInfo.h"
#include "OrgApacheFelixSystemreadyImplComponentsCheckInfo.h"
#include "OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.h"
#include "OrgApacheFelixSystemreadyImplServicesCheckInfo.h"
#include "OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.h"
#include "OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.h"
#include "OrgApacheFelixSystemreadySystemReadyMonitorInfo.h"
#include "OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.h"
#include "OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.h"
#include "OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.h"
#include "OrgApacheHttpProxyconfiguratorInfo.h"
#include "OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.h"
#include "OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.h"
#include "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.h"
#include "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.h"
#include "OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.h"
#include "OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.h"
#include "OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.h"
#include "OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.h"
#include "OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.h"
#include "OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.h"
#include "OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.h"
#include "OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.h"
#include "OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.h"
#include "OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.h"
#include "OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.h"
#include "OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.h"
#include "OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.h"
#include "OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.h"
#include "OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.h"
#include "OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.h"
#include "OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.h"
#include "OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.h"
#include "OrgApacheSlingAuthCoreImplLogoutServletInfo.h"
#include "OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.h"
#include "OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.h"
#include "OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.h"
#include "OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.h"
#include "OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.h"
#include "OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.h"
#include "OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.h"
#include "OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.h"
#include "OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.h"
#include "OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.h"
#include "OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.h"
#include "OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.h"
#include "OrgApacheSlingCommonsLogLogManagerInfo.h"
#include "OrgApacheSlingCommonsMetricsInternalLogReporterInfo.h"
#include "OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.h"
#include "OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.h"
#include "OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.h"
#include "OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.h"
#include "OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.h"
#include "OrgApacheSlingDatasourceDataSourceFactoryInfo.h"
#include "OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.h"
#include "OrgApacheSlingDiscoveryOakConfigInfo.h"
#include "OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.h"
#include "OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.h"
#include "OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.h"
#include "OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.h"
#include "OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.h"
#include "OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.h"
#include "OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.h"
#include "OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.h"
#include "OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.h"
#include "OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.h"
#include "OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.h"
#include "OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.h"
#include "OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.h"
#include "OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.h"
#include "OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.h"
#include "OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.h"
#include "OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.h"
#include "OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.h"
#include "OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.h"
#include "OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.h"
#include "OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.h"
#include "OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.h"
#include "OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.h"
#include "OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.h"
#include "OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.h"
#include "OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.h"
#include "OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.h"
#include "OrgApacheSlingEngineImplLogRequestLoggerInfo.h"
#include "OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.h"
#include "OrgApacheSlingEngineImplSlingMainServletInfo.h"
#include "OrgApacheSlingEngineParametersInfo.h"
#include "OrgApacheSlingEventImplEventingThreadPoolInfo.h"
#include "OrgApacheSlingEventImplJobsDefaultJobManagerInfo.h"
#include "OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.h"
#include "OrgApacheSlingEventImplJobsJobConsumerManagerInfo.h"
#include "OrgApacheSlingEventJobsQueueConfigurationInfo.h"
#include "OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.h"
#include "OrgApacheSlingFeatureflagsFeatureInfo.h"
#include "OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.h"
#include "OrgApacheSlingHapiImplHApiUtilImplInfo.h"
#include "OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.h"
#include "OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.h"
#include "OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.h"
#include "OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.h"
#include "OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.h"
#include "OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.h"
#include "OrgApacheSlingI18nImplI18NFilterInfo.h"
#include "OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.h"
#include "OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.h"
#include "OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.h"
#include "OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.h"
#include "OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.h"
#include "OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.h"
#include "OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.h"
#include "OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.h"
#include "OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.h"
#include "OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.h"
#include "OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.h"
#include "OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.h"
#include "OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.h"
#include "OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.h"
#include "OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.h"
#include "OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.h"
#include "OrgApacheSlingModelsImplModelAdapterFactoryInfo.h"
#include "OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.h"
#include "OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.h"
#include "OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.h"
#include "OrgApacheSlingResourcemergerPickerOverridingInfo.h"
#include "OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.h"
#include "OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.h"
#include "OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.h"
#include "OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.h"
#include "OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.h"
#include "OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.h"
#include "OrgApacheSlingSecurityImplContentDispositionFilterInfo.h"
#include "OrgApacheSlingSecurityImplReferrerFilterInfo.h"
#include "OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.h"
#include "OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.h"
#include "OrgApacheSlingServletsGetDefaultGetServletInfo.h"
#include "OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.h"
#include "OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.h"
#include "OrgApacheSlingServletsPostImplSlingPostServletInfo.h"
#include "OrgApacheSlingServletsResolverSlingServletResolverInfo.h"
#include "OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.h"
#include "OrgApacheSlingStartupfilterImplStartupFilterImplInfo.h"
#include "OrgApacheSlingTenantInternalTenantProviderImplInfo.h"
#include "OrgApacheSlingTracerInternalLogTracerInfo.h"
#include "OrgApacheSlingXssImplXSSFilterImplInfo.h"
#include "Error.h"

/** \defgroup Operations API Endpoints
 *  Classes containing all the functions for calling API endpoints
 *
 */

namespace Tizen{
namespace ArtikCloud {
/** \addtogroup Configmgr Configmgr
 * \ingroup Operations
 *  @{
 */
class ConfigmgrManager {
public:
	ConfigmgrManager();
	virtual ~ConfigmgrManager();

/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param showPlaceholder 
 * \param maximumCacheEntries 
 * \param afPeriodscriptingPeriodcompatversion 
 * \param makeFileNameUnique 
 * \param generatingCompliantData 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool adaptiveFormAndInteractiveCommunicationWebChannelConfigurationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool showPlaceholder, int maximumCacheEntries, std::string afPeriodscriptingPeriodcompatversion, bool makeFileNameUnique, bool generatingCompliantData, 
	void(* handler)(AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param showPlaceholder 
 * \param maximumCacheEntries 
 * \param afPeriodscriptingPeriodcompatversion 
 * \param makeFileNameUnique 
 * \param generatingCompliantData 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool adaptiveFormAndInteractiveCommunicationWebChannelConfigurationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool showPlaceholder, int maximumCacheEntries, std::string afPeriodscriptingPeriodcompatversion, bool makeFileNameUnique, bool generatingCompliantData, 
	void(* handler)(AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fontList 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fontList, 
	void(* handler)(AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fontList 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fontList, 
	void(* handler)(AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool analyticsComponentQueryCacheServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize, 
	void(* handler)(AnalyticsComponentQueryCacheServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool analyticsComponentQueryCacheServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize, 
	void(* handler)(AnalyticsComponentQueryCacheServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param styleString 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool apacheSlingHealthCheckResultHTMLSerializerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string styleString, 
	void(* handler)(ApacheSlingHealthCheckResultHTMLSerializerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param styleString 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool apacheSlingHealthCheckResultHTMLSerializerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string styleString, 
	void(* handler)(ApacheSlingHealthCheckResultHTMLSerializerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param formsManagerConfigPeriodincludeOOTBTemplates 
 * \param formsManagerConfigPeriodincludeDeprecatedTemplates 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool formsManagerConfigPeriodincludeOOTBTemplates, bool formsManagerConfigPeriodincludeDeprecatedTemplates, 
	void(* handler)(ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param formsManagerConfigPeriodincludeOOTBTemplates 
 * \param formsManagerConfigPeriodincludeDeprecatedTemplates 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool formsManagerConfigPeriodincludeOOTBTemplates, bool formsManagerConfigPeriodincludeDeprecatedTemplates, 
	void(* handler)(ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isTransactionRecordingEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemTransactionCoreImplTransactionRecorderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isTransactionRecordingEnabled, 
	void(* handler)(ComAdobeAemTransactionCoreImplTransactionRecorderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isTransactionRecordingEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemTransactionCoreImplTransactionRecorderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isTransactionRecordingEnabled, 
	void(* handler)(ComAdobeAemTransactionCoreImplTransactionRecorderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, 
	void(* handler)(ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, 
	void(* handler)(ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, 
	void(* handler)(ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, 
	void(* handler)(ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param preUpgradePeriodmaintenancePeriodtasks 
 * \param preUpgradePeriodhcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> preUpgradePeriodmaintenancePeriodtasks, std::list<std::string> preUpgradePeriodhcPeriodtags, 
	void(* handler)(ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param preUpgradePeriodmaintenancePeriodtasks 
 * \param preUpgradePeriodhcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> preUpgradePeriodmaintenancePeriodtasks, std::list<std::string> preUpgradePeriodhcPeriodtags, 
	void(* handler)(ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param rootPeriodpath 
 * \param fixPeriodinconsistencies 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string rootPeriodpath, bool fixPeriodinconsistencies, 
	void(* handler)(ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param rootPeriodpath 
 * \param fixPeriodinconsistencies 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string rootPeriodpath, bool fixPeriodinconsistencies, 
	void(* handler)(ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod 
 * \param cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail 
 * \param cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAccountApiAccountManagementServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod, std::string cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail, std::string cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail, 
	void(* handler)(ComAdobeCqAccountApiAccountManagementServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod 
 * \param cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail 
 * \param cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAccountApiAccountManagementServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod, std::string cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail, std::string cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail, 
	void(* handler)(ComAdobeCqAccountApiAccountManagementServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail 
 * \param cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAccountImplAccountManagementServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail, std::string cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail, 
	void(* handler)(ComAdobeCqAccountImplAccountManagementServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail 
 * \param cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAccountImplAccountManagementServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail, std::string cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail, 
	void(* handler)(ComAdobeCqAccountImplAccountManagementServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAddressImplLocationLocationListServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults, 
	void(* handler)(ComAdobeCqAddressImplLocationLocationListServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAddressImplLocationLocationListServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults, 
	void(* handler)(ComAdobeCqAddressImplLocationLocationListServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param auditlogPeriodrulePeriodname 
 * \param auditlogPeriodrulePeriodcontentpath 
 * \param auditlogPeriodrulePeriodminimumage 
 * \param auditlogPeriodrulePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAuditPurgeDamSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string auditlogPeriodrulePeriodname, std::string auditlogPeriodrulePeriodcontentpath, int auditlogPeriodrulePeriodminimumage, std::string auditlogPeriodrulePeriodtypes, 
	void(* handler)(ComAdobeCqAuditPurgeDamInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param auditlogPeriodrulePeriodname 
 * \param auditlogPeriodrulePeriodcontentpath 
 * \param auditlogPeriodrulePeriodminimumage 
 * \param auditlogPeriodrulePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAuditPurgeDamAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string auditlogPeriodrulePeriodname, std::string auditlogPeriodrulePeriodcontentpath, int auditlogPeriodrulePeriodminimumage, std::string auditlogPeriodrulePeriodtypes, 
	void(* handler)(ComAdobeCqAuditPurgeDamInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param auditlogPeriodrulePeriodname 
 * \param auditlogPeriodrulePeriodcontentpath 
 * \param auditlogPeriodrulePeriodminimumage 
 * \param auditlogPeriodrulePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAuditPurgePagesSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string auditlogPeriodrulePeriodname, std::string auditlogPeriodrulePeriodcontentpath, int auditlogPeriodrulePeriodminimumage, std::string auditlogPeriodrulePeriodtypes, 
	void(* handler)(ComAdobeCqAuditPurgePagesInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param auditlogPeriodrulePeriodname 
 * \param auditlogPeriodrulePeriodcontentpath 
 * \param auditlogPeriodrulePeriodminimumage 
 * \param auditlogPeriodrulePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAuditPurgePagesAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string auditlogPeriodrulePeriodname, std::string auditlogPeriodrulePeriodcontentpath, int auditlogPeriodrulePeriodminimumage, std::string auditlogPeriodrulePeriodtypes, 
	void(* handler)(ComAdobeCqAuditPurgePagesInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param auditlogPeriodrulePeriodname 
 * \param auditlogPeriodrulePeriodcontentpath 
 * \param auditlogPeriodrulePeriodminimumage 
 * \param auditlogPeriodrulePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAuditPurgeReplicationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string auditlogPeriodrulePeriodname, std::string auditlogPeriodrulePeriodcontentpath, int auditlogPeriodrulePeriodminimumage, std::string auditlogPeriodrulePeriodtypes, 
	void(* handler)(ComAdobeCqAuditPurgeReplicationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param auditlogPeriodrulePeriodname 
 * \param auditlogPeriodrulePeriodcontentpath 
 * \param auditlogPeriodrulePeriodminimumage 
 * \param auditlogPeriodrulePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqAuditPurgeReplicationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string auditlogPeriodrulePeriodname, std::string auditlogPeriodrulePeriodcontentpath, int auditlogPeriodrulePeriodminimumage, std::string auditlogPeriodrulePeriodtypes, 
	void(* handler)(ComAdobeCqAuditPurgeReplicationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param keypairPeriodid 
 * \param keypairPeriodalias 
 * \param cdnrewriterPeriodattributes 
 * \param cdnPeriodrewriterPerioddistributionPerioddomain 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCdnRewriterImplAWSCloudFrontRewriterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string keypairPeriodid, std::string keypairPeriodalias, std::list<std::string> cdnrewriterPeriodattributes, std::string cdnPeriodrewriterPerioddistributionPerioddomain, 
	void(* handler)(ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param keypairPeriodid 
 * \param keypairPeriodalias 
 * \param cdnrewriterPeriodattributes 
 * \param cdnPeriodrewriterPerioddistributionPerioddomain 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCdnRewriterImplAWSCloudFrontRewriterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string keypairPeriodid, std::string keypairPeriodalias, std::list<std::string> cdnrewriterPeriodattributes, std::string cdnPeriodrewriterPerioddistributionPerioddomain, 
	void(* handler)(ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cdnPeriodconfigPerioddistributionPerioddomain 
 * \param cdnPeriodconfigPeriodenablePeriodrewriting 
 * \param cdnPeriodconfigPeriodpathPeriodprefixes 
 * \param cdnPeriodconfigPeriodcdnttl 
 * \param cdnPeriodconfigPeriodapplicationPeriodprotocol 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCdnRewriterImplCDNConfigServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cdnPeriodconfigPerioddistributionPerioddomain, bool cdnPeriodconfigPeriodenablePeriodrewriting, std::list<std::string> cdnPeriodconfigPeriodpathPeriodprefixes, int cdnPeriodconfigPeriodcdnttl, std::string cdnPeriodconfigPeriodapplicationPeriodprotocol, 
	void(* handler)(ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cdnPeriodconfigPerioddistributionPerioddomain 
 * \param cdnPeriodconfigPeriodenablePeriodrewriting 
 * \param cdnPeriodconfigPeriodpathPeriodprefixes 
 * \param cdnPeriodconfigPeriodcdnttl 
 * \param cdnPeriodconfigPeriodapplicationPeriodprotocol 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCdnRewriterImplCDNConfigServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cdnPeriodconfigPerioddistributionPerioddomain, bool cdnPeriodconfigPeriodenablePeriodrewriting, std::list<std::string> cdnPeriodconfigPeriodpathPeriodprefixes, int cdnPeriodconfigPeriodcdnttl, std::string cdnPeriodconfigPeriodapplicationPeriodprotocol, 
	void(* handler)(ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param cdnrewriterPeriodattributes 
 * \param cdnPeriodrewriterPerioddistributionPerioddomain 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCdnRewriterImplCDNRewriterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::list<std::string> cdnrewriterPeriodattributes, std::string cdnPeriodrewriterPerioddistributionPerioddomain, 
	void(* handler)(ComAdobeCqCdnRewriterImplCDNRewriterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param cdnrewriterPeriodattributes 
 * \param cdnPeriodrewriterPerioddistributionPerioddomain 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCdnRewriterImplCDNRewriterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::list<std::string> cdnrewriterPeriodattributes, std::string cdnPeriodrewriterPerioddistributionPerioddomain, 
	void(* handler)(ComAdobeCqCdnRewriterImplCDNRewriterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param flushPeriodagents 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> flushPeriodagents, 
	void(* handler)(ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param flushPeriodagents 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> flushPeriodagents, 
	void(* handler)(ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodactive 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommerceImplAssetDynamicImageHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodname, 
	void(* handler)(ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodactive 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommerceImplAssetDynamicImageHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodname, 
	void(* handler)(ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback, 
	void(* handler)(ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback, 
	void(* handler)(ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodactive 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommerceImplAssetStaticImageHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodname, 
	void(* handler)(ComAdobeCqCommerceImplAssetStaticImageHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodactive 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommerceImplAssetStaticImageHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodname, 
	void(* handler)(ComAdobeCqCommerceImplAssetStaticImageHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodactive 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommerceImplAssetVideoHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodname, 
	void(* handler)(ComAdobeCqCommerceImplAssetVideoHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodactive 
 * \param cqPeriodcommercePeriodassetPeriodhandlerPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommerceImplAssetVideoHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodname, 
	void(* handler)(ComAdobeCqCommerceImplAssetVideoHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodpromotionPeriodroot 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommerceImplPromotionPromotionManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPeriodcommercePeriodpromotionPeriodroot, 
	void(* handler)(ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodpromotionPeriodroot 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommerceImplPromotionPromotionManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPeriodcommercePeriodpromotionPeriodroot, 
	void(* handler)(ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize 
 * \param cqPeriodcommercePeriodcataloggeneratorPeriodbucketname 
 * \param cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize, std::string cqPeriodcommercePeriodcataloggeneratorPeriodbucketname, std::list<std::string> cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties, 
	void(* handler)(ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize 
 * \param cqPeriodcommercePeriodcataloggeneratorPeriodbucketname 
 * \param cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize, std::string cqPeriodcommercePeriodcataloggeneratorPeriodbucketname, std::list<std::string> cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties, 
	void(* handler)(ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodpageeventlistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommercePimImplPageEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodcommercePeriodpageeventlistenerPeriodenabled, 
	void(* handler)(ComAdobeCqCommercePimImplPageEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcommercePeriodpageeventlistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommercePimImplPageEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodcommercePeriodpageeventlistenerPeriodenabled, 
	void(* handler)(ComAdobeCqCommercePimImplPageEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param feed_generator_algorithm 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommercePimImplProductfeedProductFeedServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string feed_generator_algorithm, 
	void(* handler)(ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param feed_generator_algorithm 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqCommercePimImplProductfeedProductFeedServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string feed_generator_algorithm, 
	void(* handler)(ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param reportingservicesPeriodurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqContentinsightImplReportingServicesSettingsProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string reportingservicesPeriodurl, 
	void(* handler)(ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param reportingservicesPeriodurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqContentinsightImplReportingServicesSettingsProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string reportingservicesPeriodurl, 
	void(* handler)(ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param brightedgePeriodurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqContentinsightImplServletsBrightEdgeProxyServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string brightedgePeriodurl, 
	void(* handler)(ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param brightedgePeriodurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqContentinsightImplServletsBrightEdgeProxyServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string brightedgePeriodurl, 
	void(* handler)(ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param reportingservicesPeriodproxyPeriodwhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqContentinsightImplServletsReportingServicesProxyServleSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> reportingservicesPeriodproxyPeriodwhitelist, 
	void(* handler)(ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param reportingservicesPeriodproxyPeriodwhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqContentinsightImplServletsReportingServicesProxyServleAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> reportingservicesPeriodproxyPeriodwhitelist, 
	void(* handler)(ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param damPeriodcfmPeriodcomponentPeriodresourceType 
 * \param damPeriodcfmPeriodcomponentPeriodfileReferenceProp 
 * \param damPeriodcfmPeriodcomponentPeriodelementsProp 
 * \param damPeriodcfmPeriodcomponentPeriodvariationProp 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamCfmImplComponentComponentConfigImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string damPeriodcfmPeriodcomponentPeriodresourceType, std::string damPeriodcfmPeriodcomponentPeriodfileReferenceProp, std::string damPeriodcfmPeriodcomponentPeriodelementsProp, std::string damPeriodcfmPeriodcomponentPeriodvariationProp, 
	void(* handler)(ComAdobeCqDamCfmImplComponentComponentConfigImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param damPeriodcfmPeriodcomponentPeriodresourceType 
 * \param damPeriodcfmPeriodcomponentPeriodfileReferenceProp 
 * \param damPeriodcfmPeriodcomponentPeriodelementsProp 
 * \param damPeriodcfmPeriodcomponentPeriodvariationProp 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamCfmImplComponentComponentConfigImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string damPeriodcfmPeriodcomponentPeriodresourceType, std::string damPeriodcfmPeriodcomponentPeriodfileReferenceProp, std::string damPeriodcfmPeriodcomponentPeriodelementsProp, std::string damPeriodcfmPeriodcomponentPeriodvariationProp, 
	void(* handler)(ComAdobeCqDamCfmImplComponentComponentConfigImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param damPeriodcfmPeriodresourceTypes 
 * \param damPeriodcfmPeriodreferenceProperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamCfmImplConfFeatureConfigImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> damPeriodcfmPeriodresourceTypes, std::list<std::string> damPeriodcfmPeriodreferenceProperties, 
	void(* handler)(ComAdobeCqDamCfmImplConfFeatureConfigImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param damPeriodcfmPeriodresourceTypes 
 * \param damPeriodcfmPeriodreferenceProperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamCfmImplConfFeatureConfigImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> damPeriodcfmPeriodresourceTypes, std::list<std::string> damPeriodcfmPeriodreferenceProperties, 
	void(* handler)(ComAdobeCqDamCfmImplConfFeatureConfigImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pipelinePeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamCfmImplContentRewriterAssetProcessorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pipelinePeriodtype, 
	void(* handler)(ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pipelinePeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamCfmImplContentRewriterAssetProcessorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pipelinePeriodtype, 
	void(* handler)(ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pipelinePeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamCfmImplContentRewriterParRangeFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pipelinePeriodtype, 
	void(* handler)(ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pipelinePeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamCfmImplContentRewriterParRangeFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pipelinePeriodtype, 
	void(* handler)(ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pipelinePeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamCfmImplContentRewriterPayloadFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pipelinePeriodtype, 
	void(* handler)(ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pipelinePeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamCfmImplContentRewriterPayloadFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pipelinePeriodtype, 
	void(* handler)(ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxMemory 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamDmProcessImagePTiffManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxMemory, 
	void(* handler)(ComAdobeCqDamDmProcessImagePTiffManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxMemory 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamDmProcessImagePTiffManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxMemory, 
	void(* handler)(ComAdobeCqDamDmProcessImagePTiffManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param dmreplicateonmodifyPeriodenabled 
 * \param dmreplicateonmodifyPeriodforcesyncdeletes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool dmreplicateonmodifyPeriodenabled, bool dmreplicateonmodifyPeriodforcesyncdeletes, 
	void(* handler)(ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param dmreplicateonmodifyPeriodenabled 
 * \param dmreplicateonmodifyPeriodforcesyncdeletes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool dmreplicateonmodifyPeriodenabled, bool dmreplicateonmodifyPeriodforcesyncdeletes, 
	void(* handler)(ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamMacSyncHelperImplMACSyncClientImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout, 
	void(* handler)(ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamMacSyncHelperImplMACSyncClientImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout, 
	void(* handler)(ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths 
 * \param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions 
 * \param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms 
 * \param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamMacSyncImplDAMSyncServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths, bool comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions, int comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms, std::string comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform, 
	void(* handler)(ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths 
 * \param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions 
 * \param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms 
 * \param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamMacSyncImplDAMSyncServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths, bool comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions, int comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms, std::string comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform, 
	void(* handler)(ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param nuiEnabled 
 * \param nuiServiceUrl 
 * \param nuiApiKey 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamProcessorNuiImplNuiAssetProcessorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool nuiEnabled, std::string nuiServiceUrl, std::string nuiApiKey, 
	void(* handler)(ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param nuiEnabled 
 * \param nuiServiceUrl 
 * \param nuiApiKey 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamProcessorNuiImplNuiAssetProcessorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool nuiEnabled, std::string nuiServiceUrl, std::string nuiApiKey, 
	void(* handler)(ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param tcpPort 
 * \param allowRemoteAccess 
 * \param maxRenderRgnPixels 
 * \param maxMessageSize 
 * \param randomAccessUrlTimeout 
 * \param workerThreads 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamS7imagingImplIsImageServerComponentSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string tcpPort, bool allowRemoteAccess, std::string maxRenderRgnPixels, std::string maxMessageSize, int randomAccessUrlTimeout, int workerThreads, 
	void(* handler)(ComAdobeCqDamS7imagingImplIsImageServerComponentInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param tcpPort 
 * \param allowRemoteAccess 
 * \param maxRenderRgnPixels 
 * \param maxMessageSize 
 * \param randomAccessUrlTimeout 
 * \param workerThreads 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamS7imagingImplIsImageServerComponentAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string tcpPort, bool allowRemoteAccess, std::string maxRenderRgnPixels, std::string maxMessageSize, int randomAccessUrlTimeout, int workerThreads, 
	void(* handler)(ComAdobeCqDamS7imagingImplIsImageServerComponentInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cachePeriodenable 
 * \param cachePeriodrootPaths 
 * \param cachePeriodmaxSize 
 * \param cachePeriodmaxEntries 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamS7imagingImplPsPlatformServerServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cachePeriodenable, std::list<std::string> cachePeriodrootPaths, int cachePeriodmaxSize, int cachePeriodmaxEntries, 
	void(* handler)(ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cachePeriodenable 
 * \param cachePeriodrootPaths 
 * \param cachePeriodmaxSize 
 * \param cachePeriodmaxEntries 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamS7imagingImplPsPlatformServerServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cachePeriodenable, std::list<std::string> cachePeriodrootPaths, int cachePeriodmaxSize, int cachePeriodmaxEntries, 
	void(* handler)(ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param pathPrefix 
 * \param createVersion 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamWebdavImplIoAssetIOHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string pathPrefix, bool createVersion, 
	void(* handler)(ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param pathPrefix 
 * \param createVersion 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamWebdavImplIoAssetIOHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string pathPrefix, bool createVersion, 
	void(* handler)(ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable 
 * \param cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod 
 * \param cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable, int cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod, int cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout, 
	void(* handler)(ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable 
 * \param cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod 
 * \param cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable, int cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod, int cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout, 
	void(* handler)(ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamWebdavImplIoSpecialFilesHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters, 
	void(* handler)(ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDamWebdavImplIoSpecialFilesHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters, 
	void(* handler)(ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param firewallPerioddeserializationPeriodwhitelist 
 * \param firewallPerioddeserializationPeriodblacklist 
 * \param firewallPerioddeserializationPerioddiagnostics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDeserfwImplDeserializationFirewallImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> firewallPerioddeserializationPeriodwhitelist, std::list<std::string> firewallPerioddeserializationPeriodblacklist, std::string firewallPerioddeserializationPerioddiagnostics, 
	void(* handler)(ComAdobeCqDeserfwImplDeserializationFirewallImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param firewallPerioddeserializationPeriodwhitelist 
 * \param firewallPerioddeserializationPeriodblacklist 
 * \param firewallPerioddeserializationPerioddiagnostics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDeserfwImplDeserializationFirewallImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> firewallPerioddeserializationPeriodwhitelist, std::list<std::string> firewallPerioddeserializationPeriodblacklist, std::string firewallPerioddeserializationPerioddiagnostics, 
	void(* handler)(ComAdobeCqDeserfwImplDeserializationFirewallImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param connectionPeriodtimeout 
 * \param socketPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDtmImplServiceDTMWebServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int connectionPeriodtimeout, int socketPeriodtimeout, 
	void(* handler)(ComAdobeCqDtmImplServiceDTMWebServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param connectionPeriodtimeout 
 * \param socketPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDtmImplServiceDTMWebServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int connectionPeriodtimeout, int socketPeriodtimeout, 
	void(* handler)(ComAdobeCqDtmImplServiceDTMWebServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param dtmPeriodstagingPeriodipPeriodwhitelist 
 * \param dtmPeriodproductionPeriodipPeriodwhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDtmImplServletsDTMDeployHookServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> dtmPeriodstagingPeriodipPeriodwhitelist, std::list<std::string> dtmPeriodproductionPeriodipPeriodwhitelist, 
	void(* handler)(ComAdobeCqDtmImplServletsDTMDeployHookServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param dtmPeriodstagingPeriodipPeriodwhitelist 
 * \param dtmPeriodproductionPeriodipPeriodwhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDtmImplServletsDTMDeployHookServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> dtmPeriodstagingPeriodipPeriodwhitelist, std::list<std::string> dtmPeriodproductionPeriodipPeriodwhitelist, 
	void(* handler)(ComAdobeCqDtmImplServletsDTMDeployHookServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param endpointUri 
 * \param connectionTimeout 
 * \param socketTimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDtmReactorImplServiceWebServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string endpointUri, int connectionTimeout, int socketTimeout, 
	void(* handler)(ComAdobeCqDtmReactorImplServiceWebServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param endpointUri 
 * \param connectionTimeout 
 * \param socketTimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqDtmReactorImplServiceWebServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string endpointUri, int connectionTimeout, int socketTimeout, 
	void(* handler)(ComAdobeCqDtmReactorImplServiceWebServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param disabledForGroups 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqExperiencelogImplExperienceLogConfigServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::list<std::string> disabledForGroups, 
	void(* handler)(ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param disabledForGroups 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqExperiencelogImplExperienceLogConfigServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::list<std::string> disabledForGroups, 
	void(* handler)(ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param packagePeriodnames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqHcContentPackagesHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, std::list<std::string> packagePeriodnames, 
	void(* handler)(ComAdobeCqHcContentPackagesHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param packagePeriodnames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqHcContentPackagesHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, std::list<std::string> packagePeriodnames, 
	void(* handler)(ComAdobeCqHcContentPackagesHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param historyPeriodrequestFilterPeriodexcludedSelectors 
 * \param historyPeriodrequestFilterPeriodexcludedExtensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqHistoryImplHistoryRequestFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> historyPeriodrequestFilterPeriodexcludedSelectors, std::list<std::string> historyPeriodrequestFilterPeriodexcludedExtensions, 
	void(* handler)(ComAdobeCqHistoryImplHistoryRequestFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param historyPeriodrequestFilterPeriodexcludedSelectors 
 * \param historyPeriodrequestFilterPeriodexcludedExtensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqHistoryImplHistoryRequestFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> historyPeriodrequestFilterPeriodexcludedSelectors, std::list<std::string> historyPeriodrequestFilterPeriodexcludedExtensions, 
	void(* handler)(ComAdobeCqHistoryImplHistoryRequestFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param historyPeriodservicePeriodresourceTypes 
 * \param historyPeriodservicePeriodpathFilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqHistoryImplHistoryServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> historyPeriodservicePeriodresourceTypes, std::list<std::string> historyPeriodservicePeriodpathFilter, 
	void(* handler)(ComAdobeCqHistoryImplHistoryServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param historyPeriodservicePeriodresourceTypes 
 * \param historyPeriodservicePeriodpathFilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqHistoryImplHistoryServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> historyPeriodservicePeriodresourceTypes, std::list<std::string> historyPeriodservicePeriodpathFilter, 
	void(* handler)(ComAdobeCqHistoryImplHistoryServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param inboxPeriodimplPeriodtypeproviderPeriodregistrypaths 
 * \param inboxPeriodimplPeriodtypeproviderPeriodlegacypaths 
 * \param inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem 
 * \param inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem 
 * \param inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqInboxImplTypeproviderItemTypeProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> inboxPeriodimplPeriodtypeproviderPeriodregistrypaths, std::list<std::string> inboxPeriodimplPeriodtypeproviderPeriodlegacypaths, std::string inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem, std::string inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem, std::string inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask, 
	void(* handler)(ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param inboxPeriodimplPeriodtypeproviderPeriodregistrypaths 
 * \param inboxPeriodimplPeriodtypeproviderPeriodlegacypaths 
 * \param inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem 
 * \param inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem 
 * \param inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqInboxImplTypeproviderItemTypeProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> inboxPeriodimplPeriodtypeproviderPeriodregistrypaths, std::list<std::string> inboxPeriodimplPeriodtypeproviderPeriodlegacypaths, std::string inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem, std::string inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem, std::string inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask, 
	void(* handler)(ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param imagePeriodquality 
 * \param imagePeriodsupportedPeriodresolutions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqProjectsImplServletProjectImageServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string imagePeriodquality, std::string imagePeriodsupportedPeriodresolutions, 
	void(* handler)(ComAdobeCqProjectsImplServletProjectImageServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param imagePeriodquality 
 * \param imagePeriodsupportedPeriodresolutions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqProjectsImplServletProjectImageServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string imagePeriodquality, std::string imagePeriodsupportedPeriodresolutions, 
	void(* handler)(ComAdobeCqProjectsImplServletProjectImageServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param scheduledpurgePeriodname 
 * \param scheduledpurgePeriodpurgeActive 
 * \param scheduledpurgePeriodtemplates 
 * \param scheduledpurgePeriodpurgeGroups 
 * \param scheduledpurgePeriodpurgeAssets 
 * \param scheduledpurgePeriodterminateRunningWorkflows 
 * \param scheduledpurgePerioddaysold 
 * \param scheduledpurgePeriodsaveThreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqProjectsPurgeSchedulerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string scheduledpurgePeriodname, bool scheduledpurgePeriodpurgeActive, std::list<std::string> scheduledpurgePeriodtemplates, bool scheduledpurgePeriodpurgeGroups, bool scheduledpurgePeriodpurgeAssets, bool scheduledpurgePeriodterminateRunningWorkflows, int scheduledpurgePerioddaysold, int scheduledpurgePeriodsaveThreshold, 
	void(* handler)(ComAdobeCqProjectsPurgeSchedulerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param scheduledpurgePeriodname 
 * \param scheduledpurgePeriodpurgeActive 
 * \param scheduledpurgePeriodtemplates 
 * \param scheduledpurgePeriodpurgeGroups 
 * \param scheduledpurgePeriodpurgeAssets 
 * \param scheduledpurgePeriodterminateRunningWorkflows 
 * \param scheduledpurgePerioddaysold 
 * \param scheduledpurgePeriodsaveThreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqProjectsPurgeSchedulerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string scheduledpurgePeriodname, bool scheduledpurgePeriodpurgeActive, std::list<std::string> scheduledpurgePeriodtemplates, bool scheduledpurgePeriodpurgeGroups, bool scheduledpurgePeriodpurgeAssets, bool scheduledpurgePeriodterminateRunningWorkflows, int scheduledpurgePerioddaysold, int scheduledpurgePeriodsaveThreshold, 
	void(* handler)(ComAdobeCqProjectsPurgeSchedulerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param includePeriodpaths 
 * \param exporterPerioduser 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScheduledExporterImplScheduledExporterImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> includePeriodpaths, std::string exporterPerioduser, 
	void(* handler)(ComAdobeCqScheduledExporterImplScheduledExporterImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param includePeriodpaths 
 * \param exporterPerioduser 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScheduledExporterImplScheduledExporterImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> includePeriodpaths, std::string exporterPerioduser, 
	void(* handler)(ComAdobeCqScheduledExporterImplScheduledExporterImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl, std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey, std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject, std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment, int comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency, 
	void(* handler)(ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl, std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey, std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject, std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment, int comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency, 
	void(* handler)(ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensDeviceImplDeviceServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency, std::string comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars, int comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars, int comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars, int comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars, int comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars, int comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength, 
	void(* handler)(ComAdobeCqScreensDeviceImplDeviceServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars 
 * \param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensDeviceImplDeviceServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency, std::string comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars, int comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars, int comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars, int comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars, int comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars, int comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength, 
	void(* handler)(ComAdobeCqScreensDeviceImplDeviceServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param deviceRegistrationTimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int deviceRegistrationTimeout, 
	void(* handler)(ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param deviceRegistrationTimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int deviceRegistrationTimeout, 
	void(* handler)(ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodpagesupdatehandlerPeriodimageresourcetypes 
 * \param cqPeriodpagesupdatehandlerPeriodproductresourcetypes 
 * \param cqPeriodpagesupdatehandlerPeriodvideoresourcetypes 
 * \param cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes 
 * \param cqPeriodpagesupdatehandlerPeriodpreviewmodepaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensImplHandlerChannelsUpdateHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodpagesupdatehandlerPeriodimageresourcetypes, std::list<std::string> cqPeriodpagesupdatehandlerPeriodproductresourcetypes, std::list<std::string> cqPeriodpagesupdatehandlerPeriodvideoresourcetypes, std::list<std::string> cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes, std::list<std::string> cqPeriodpagesupdatehandlerPeriodpreviewmodepaths, 
	void(* handler)(ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodpagesupdatehandlerPeriodimageresourcetypes 
 * \param cqPeriodpagesupdatehandlerPeriodproductresourcetypes 
 * \param cqPeriodpagesupdatehandlerPeriodvideoresourcetypes 
 * \param cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes 
 * \param cqPeriodpagesupdatehandlerPeriodpreviewmodepaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensImplHandlerChannelsUpdateHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodpagesupdatehandlerPeriodimageresourcetypes, std::list<std::string> cqPeriodpagesupdatehandlerPeriodproductresourcetypes, std::list<std::string> cqPeriodpagesupdatehandlerPeriodvideoresourcetypes, std::list<std::string> cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes, std::list<std::string> cqPeriodpagesupdatehandlerPeriodpreviewmodepaths, 
	void(* handler)(ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, 
	void(* handler)(ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, 
	void(* handler)(ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensImplRemoteImplDistributedHttpClientImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout, 
	void(* handler)(ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensImplRemoteImplDistributedHttpClientImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout, 
	void(* handler)(ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensImplScreensChannelPostProcessorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove, 
	void(* handler)(ComAdobeCqScreensImplScreensChannelPostProcessorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensImplScreensChannelPostProcessorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove, 
	void(* handler)(ComAdobeCqScreensImplScreensChannelPostProcessorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath, std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency, int comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout, std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients, std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver, int comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport, bool comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls, std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername, std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword, 
	void(* handler)(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath, std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency, int comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout, std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients, std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver, int comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport, bool comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls, std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername, std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword, 
	void(* handler)(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param globalPeriodsize 
 * \param maxPerioddiskPeriodusage 
 * \param persistencePeriodenabled 
 * \param threadPeriodpoolPeriodmaxPeriodsize 
 * \param scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize 
 * \param gracefulPeriodshutdownPeriodtimeout 
 * \param queues 
 * \param topics 
 * \param addressesPeriodmaxPerioddeliveryPeriodattempts 
 * \param addressesPeriodexpiryPerioddelay 
 * \param addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy 
 * \param addressesPeriodmaxPeriodsizePeriodbytes 
 * \param addressesPeriodpagePeriodsizePeriodbytes 
 * \param addressesPeriodpagePeriodcachePeriodmaxPeriodsize 
 * \param clusterPerioduser 
 * \param clusterPeriodpassword 
 * \param clusterPeriodcallPeriodtimeout 
 * \param clusterPeriodcallPeriodfailoverPeriodtimeout 
 * \param clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod 
 * \param clusterPeriodnotificationPeriodattempts 
 * \param clusterPeriodnotificationPeriodinterval 
 * \param idPeriodcachePeriodsize 
 * \param clusterPeriodconfirmationPeriodwindowPeriodsize 
 * \param clusterPeriodconnectionPeriodttl 
 * \param clusterPeriodduplicatePerioddetection 
 * \param clusterPeriodinitialPeriodconnectPeriodattempts 
 * \param clusterPeriodmaxPeriodretryPeriodinterval 
 * \param clusterPeriodminPeriodlargePeriodmessagePeriodsize 
 * \param clusterPeriodproducerPeriodwindowPeriodsize 
 * \param clusterPeriodreconnectPeriodattempts 
 * \param clusterPeriodretryPeriodinterval 
 * \param clusterPeriodretryPeriodintervalPeriodmultiplier 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensMqActivemqImplArtemisJMSProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, int globalPeriodsize, int maxPerioddiskPeriodusage, bool persistencePeriodenabled, int threadPeriodpoolPeriodmaxPeriodsize, int scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize, int gracefulPeriodshutdownPeriodtimeout, std::list<std::string> queues, std::list<std::string> topics, int addressesPeriodmaxPerioddeliveryPeriodattempts, int addressesPeriodexpiryPerioddelay, std::string addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy, int addressesPeriodmaxPeriodsizePeriodbytes, int addressesPeriodpagePeriodsizePeriodbytes, int addressesPeriodpagePeriodcachePeriodmaxPeriodsize, std::string clusterPerioduser, std::string clusterPeriodpassword, int clusterPeriodcallPeriodtimeout, int clusterPeriodcallPeriodfailoverPeriodtimeout, int clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod, int clusterPeriodnotificationPeriodattempts, int clusterPeriodnotificationPeriodinterval, int idPeriodcachePeriodsize, int clusterPeriodconfirmationPeriodwindowPeriodsize, int clusterPeriodconnectionPeriodttl, bool clusterPeriodduplicatePerioddetection, int clusterPeriodinitialPeriodconnectPeriodattempts, int clusterPeriodmaxPeriodretryPeriodinterval, int clusterPeriodminPeriodlargePeriodmessagePeriodsize, int clusterPeriodproducerPeriodwindowPeriodsize, int clusterPeriodreconnectPeriodattempts, int clusterPeriodretryPeriodinterval, long long clusterPeriodretryPeriodintervalPeriodmultiplier, 
	void(* handler)(ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param globalPeriodsize 
 * \param maxPerioddiskPeriodusage 
 * \param persistencePeriodenabled 
 * \param threadPeriodpoolPeriodmaxPeriodsize 
 * \param scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize 
 * \param gracefulPeriodshutdownPeriodtimeout 
 * \param queues 
 * \param topics 
 * \param addressesPeriodmaxPerioddeliveryPeriodattempts 
 * \param addressesPeriodexpiryPerioddelay 
 * \param addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy 
 * \param addressesPeriodmaxPeriodsizePeriodbytes 
 * \param addressesPeriodpagePeriodsizePeriodbytes 
 * \param addressesPeriodpagePeriodcachePeriodmaxPeriodsize 
 * \param clusterPerioduser 
 * \param clusterPeriodpassword 
 * \param clusterPeriodcallPeriodtimeout 
 * \param clusterPeriodcallPeriodfailoverPeriodtimeout 
 * \param clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod 
 * \param clusterPeriodnotificationPeriodattempts 
 * \param clusterPeriodnotificationPeriodinterval 
 * \param idPeriodcachePeriodsize 
 * \param clusterPeriodconfirmationPeriodwindowPeriodsize 
 * \param clusterPeriodconnectionPeriodttl 
 * \param clusterPeriodduplicatePerioddetection 
 * \param clusterPeriodinitialPeriodconnectPeriodattempts 
 * \param clusterPeriodmaxPeriodretryPeriodinterval 
 * \param clusterPeriodminPeriodlargePeriodmessagePeriodsize 
 * \param clusterPeriodproducerPeriodwindowPeriodsize 
 * \param clusterPeriodreconnectPeriodattempts 
 * \param clusterPeriodretryPeriodinterval 
 * \param clusterPeriodretryPeriodintervalPeriodmultiplier 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensMqActivemqImplArtemisJMSProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, int globalPeriodsize, int maxPerioddiskPeriodusage, bool persistencePeriodenabled, int threadPeriodpoolPeriodmaxPeriodsize, int scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize, int gracefulPeriodshutdownPeriodtimeout, std::list<std::string> queues, std::list<std::string> topics, int addressesPeriodmaxPerioddeliveryPeriodattempts, int addressesPeriodexpiryPerioddelay, std::string addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy, int addressesPeriodmaxPeriodsizePeriodbytes, int addressesPeriodpagePeriodsizePeriodbytes, int addressesPeriodpagePeriodcachePeriodmaxPeriodsize, std::string clusterPerioduser, std::string clusterPeriodpassword, int clusterPeriodcallPeriodtimeout, int clusterPeriodcallPeriodfailoverPeriodtimeout, int clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod, int clusterPeriodnotificationPeriodattempts, int clusterPeriodnotificationPeriodinterval, int idPeriodcachePeriodsize, int clusterPeriodconfirmationPeriodwindowPeriodsize, int clusterPeriodconnectionPeriodttl, bool clusterPeriodduplicatePerioddetection, int clusterPeriodinitialPeriodconnectPeriodattempts, int clusterPeriodmaxPeriodretryPeriodinterval, int clusterPeriodminPeriodlargePeriodmessagePeriodsize, int clusterPeriodproducerPeriodwindowPeriodsize, int clusterPeriodreconnectPeriodattempts, int clusterPeriodretryPeriodinterval, long long clusterPeriodretryPeriodintervalPeriodmultiplier, 
	void(* handler)(ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath, std::string comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency, 
	void(* handler)(ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath, std::string comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency, 
	void(* handler)(ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disableSmartSync 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool disableSmartSync, 
	void(* handler)(ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disableSmartSync 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool disableSmartSync, 
	void(* handler)(ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enableDataTriggeredContent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensSegmentationImplSegmentationFeatureFlagSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enableDataTriggeredContent, 
	void(* handler)(ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enableDataTriggeredContent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqScreensSegmentationImplSegmentationFeatureFlagAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enableDataTriggeredContent, 
	void(* handler)(ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param dispatcherPeriodaddress 
 * \param dispatcherPeriodfilterPeriodallowed 
 * \param dispatcherPeriodfilterPeriodblocked 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, std::string dispatcherPeriodaddress, std::list<std::string> dispatcherPeriodfilterPeriodallowed, std::list<std::string> dispatcherPeriodfilterPeriodblocked, 
	void(* handler)(ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param dispatcherPeriodaddress 
 * \param dispatcherPeriodfilterPeriodallowed 
 * \param dispatcherPeriodfilterPeriodblocked 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, std::string dispatcherPeriodaddress, std::list<std::string> dispatcherPeriodfilterPeriodallowed, std::list<std::string> dispatcherPeriodfilterPeriodblocked, 
	void(* handler)(ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param webserverPeriodaddress 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, std::string webserverPeriodaddress, 
	void(* handler)(ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param webserverPeriodaddress 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, std::string webserverPeriodaddress, 
	void(* handler)(ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enable 
 * \param ttl1 
 * \param ttl2 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialAccountverificationImplAccountManagementConfigImSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enable, int ttl1, int ttl2, 
	void(* handler)(ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enable 
 * \param ttl1 
 * \param ttl2 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialAccountverificationImplAccountManagementConfigImAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enable, int ttl1, int ttl2, 
	void(* handler)(ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priority, 
	void(* handler)(ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priority, 
	void(* handler)(ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priority, 
	void(* handler)(ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priority, 
	void(* handler)(ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, 
	void(* handler)(ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, 
	void(* handler)(ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param accepted 
 * \param ranked 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool accepted, int ranked, 
	void(* handler)(ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param accepted 
 * \param ranked 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool accepted, int ranked, 
	void(* handler)(ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param ranking 
 * \param enable 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int ranking, bool enable, 
	void(* handler)(ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param ranking 
 * \param enable 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int ranking, bool enable, 
	void(* handler)(ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param streamPath 
 * \param streamName 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string streamPath, std::string streamName, 
	void(* handler)(ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param streamPath 
 * \param streamName 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string streamPath, std::string streamName, 
	void(* handler)(ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxRetry 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsISync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxRetry, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxRetry 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxRetry, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param attachmentTypeBlacklist 
 * \param extensionPeriodorder 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string attachmentTypeBlacklist, int extensionPeriodorder, 
	void(* handler)(ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param attachmentTypeBlacklist 
 * \param extensionPeriodorder 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string attachmentTypeBlacklist, int extensionPeriodorder, 
	void(* handler)(ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param timezonesPeriodexpirytime 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCalendarServletsTimeZoneServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int timezonesPeriodexpirytime, 
	void(* handler)(ComAdobeCqSocialCalendarServletsTimeZoneServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param timezonesPeriodexpirytime 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCalendarServletsTimeZoneServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int timezonesPeriodexpirytime, 
	void(* handler)(ComAdobeCqSocialCalendarServletsTimeZoneServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param ranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int ranking, 
	void(* handler)(ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param ranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int ranking, 
	void(* handler)(ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param numUserLimit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int numUserLimit, 
	void(* handler)(ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param numUserLimit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int numUserLimit, 
	void(* handler)(ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enableScheduledPostsSearch 
 * \param numberOfMinutes 
 * \param maxSearchLimit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enableScheduledPostsSearch, int numberOfMinutes, int maxSearchLimit, 
	void(* handler)(ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enableScheduledPostsSearch 
 * \param numberOfMinutes 
 * \param maxSearchLimit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enableScheduledPostsSearch, int numberOfMinutes, int maxSearchLimit, 
	void(* handler)(ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param corsPeriodenabling 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCorsCORSAuthenticationFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool corsPeriodenabling, 
	void(* handler)(ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param corsPeriodenabling 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsCorsCORSAuthenticationFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool corsPeriodenabling, 
	void(* handler)(ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param contextPeriodpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string contextPeriodpath, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param contextPeriodpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string contextPeriodpath, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param patternPeriodtime 
 * \param patternPeriodnewline 
 * \param patternPerioddayOfMonth 
 * \param patternPeriodmonth 
 * \param patternPeriodyear 
 * \param patternPerioddate 
 * \param patternPerioddateTime 
 * \param patternPeriodemail 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string patternPeriodtime, std::string patternPeriodnewline, std::string patternPerioddayOfMonth, std::string patternPeriodmonth, std::string patternPeriodyear, std::string patternPerioddate, std::string patternPerioddateTime, std::string patternPeriodemail, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param patternPeriodtime 
 * \param patternPeriodnewline 
 * \param patternPerioddayOfMonth 
 * \param patternPeriodmonth 
 * \param patternPeriodyear 
 * \param patternPerioddate 
 * \param patternPerioddateTime 
 * \param patternPeriodemail 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string patternPeriodtime, std::string patternPeriodnewline, std::string patternPerioddayOfMonth, std::string patternPeriodmonth, std::string patternPeriodyear, std::string patternPerioddate, std::string patternPerioddateTime, std::string patternPeriodemail, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param emailPeriodname 
 * \param emailPeriodcreatePostFromReply 
 * \param emailPeriodaddCommentIdTo 
 * \param emailPeriodsubjectMaximumLength 
 * \param emailPeriodreplyToAddress 
 * \param emailPeriodreplyToDelimiter 
 * \param emailPeriodtrackerIdPrefixInSubject 
 * \param emailPeriodtrackerIdPrefixInBody 
 * \param emailPeriodasHTML 
 * \param emailPerioddefaultUserName 
 * \param emailPeriodtemplatesPeriodrootPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string emailPeriodname, bool emailPeriodcreatePostFromReply, std::string emailPeriodaddCommentIdTo, int emailPeriodsubjectMaximumLength, std::string emailPeriodreplyToAddress, std::string emailPeriodreplyToDelimiter, std::string emailPeriodtrackerIdPrefixInSubject, std::string emailPeriodtrackerIdPrefixInBody, bool emailPeriodasHTML, std::string emailPerioddefaultUserName, std::string emailPeriodtemplatesPeriodrootPath, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param emailPeriodname 
 * \param emailPeriodcreatePostFromReply 
 * \param emailPeriodaddCommentIdTo 
 * \param emailPeriodsubjectMaximumLength 
 * \param emailPeriodreplyToAddress 
 * \param emailPeriodreplyToDelimiter 
 * \param emailPeriodtrackerIdPrefixInSubject 
 * \param emailPeriodtrackerIdPrefixInBody 
 * \param emailPeriodasHTML 
 * \param emailPerioddefaultUserName 
 * \param emailPeriodtemplatesPeriodrootPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string emailPeriodname, bool emailPeriodcreatePostFromReply, std::string emailPeriodaddCommentIdTo, int emailPeriodsubjectMaximumLength, std::string emailPeriodreplyToAddress, std::string emailPeriodreplyToDelimiter, std::string emailPeriodtrackerIdPrefixInSubject, std::string emailPeriodtrackerIdPrefixInBody, bool emailPeriodasHTML, std::string emailPerioddefaultUserName, std::string emailPeriodtemplatesPeriodrootPath, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param connectProtocol 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string connectProtocol, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param connectProtocol 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string connectProtocol, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param replyEmailPatterns 
 * \param priorityOrder 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> replyEmailPatterns, int priorityOrder, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param replyEmailPatterns 
 * \param priorityOrder 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> replyEmailPatterns, int priorityOrder, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priorityOrder 
 * \param replyEmailPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priorityOrder, std::list<std::string> replyEmailPatterns, 
	void(* handler)(ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param numberOfDays 
 * \param ageOfFile 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int numberOfDays, int ageOfFile, 
	void(* handler)(ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param numberOfDays 
 * \param ageOfFile 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int numberOfDays, int ageOfFile, 
	void(* handler)(ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param verbs 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, std::list<std::string> verbs, 
	void(* handler)(ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param verbs 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, std::list<std::string> verbs, 
	void(* handler)(ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enable 
 * \param uGCLimit 
 * \param ugcLimitDuration 
 * \param domains 
 * \param toList 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enable, int uGCLimit, int ugcLimitDuration, std::list<std::string> domains, std::list<std::string> toList, 
	void(* handler)(ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enable 
 * \param uGCLimit 
 * \param ugcLimitDuration 
 * \param domains 
 * \param toList 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enable, int uGCLimit, int ugcLimitDuration, std::list<std::string> domains, std::list<std::string> toList, 
	void(* handler)(ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param oauthPeriodcloudPeriodconfigPeriodroot 
 * \param providerPeriodconfigPeriodroot 
 * \param providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled 
 * \param providerPeriodconfigPerioduserPeriodfolder 
 * \param providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields 
 * \param providerPeriodconfigPeriodfacebookPeriodfields 
 * \param providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialConnectOauthImplFacebookProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, std::string oauthPeriodcloudPeriodconfigPeriodroot, std::string providerPeriodconfigPeriodroot, bool providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled, std::string providerPeriodconfigPerioduserPeriodfolder, bool providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields, std::list<std::string> providerPeriodconfigPeriodfacebookPeriodfields, bool providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled, 
	void(* handler)(ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param oauthPeriodcloudPeriodconfigPeriodroot 
 * \param providerPeriodconfigPeriodroot 
 * \param providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled 
 * \param providerPeriodconfigPerioduserPeriodfolder 
 * \param providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields 
 * \param providerPeriodconfigPeriodfacebookPeriodfields 
 * \param providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialConnectOauthImplFacebookProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, std::string oauthPeriodcloudPeriodconfigPeriodroot, std::string providerPeriodconfigPeriodroot, bool providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled, std::string providerPeriodconfigPerioduserPeriodfolder, bool providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields, std::list<std::string> providerPeriodconfigPeriodfacebookPeriodfields, bool providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled, 
	void(* handler)(ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> path, int servicePeriodranking, 
	void(* handler)(ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> path, int servicePeriodranking, 
	void(* handler)(ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param facebook 
 * \param twitter 
 * \param providerPeriodconfigPerioduserPeriodfolder 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> facebook, std::list<std::string> twitter, std::string providerPeriodconfigPerioduserPeriodfolder, 
	void(* handler)(ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param facebook 
 * \param twitter 
 * \param providerPeriodconfigPerioduserPeriodfolder 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> facebook, std::list<std::string> twitter, std::string providerPeriodconfigPerioduserPeriodfolder, 
	void(* handler)(ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param oauthPeriodcloudPeriodconfigPeriodroot 
 * \param providerPeriodconfigPeriodroot 
 * \param providerPeriodconfigPerioduserPeriodfolder 
 * \param providerPeriodconfigPeriodtwitterPeriodenablePeriodparams 
 * \param providerPeriodconfigPeriodtwitterPeriodparams 
 * \param providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialConnectOauthImplTwitterProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, std::string oauthPeriodcloudPeriodconfigPeriodroot, std::string providerPeriodconfigPeriodroot, std::string providerPeriodconfigPerioduserPeriodfolder, bool providerPeriodconfigPeriodtwitterPeriodenablePeriodparams, std::list<std::string> providerPeriodconfigPeriodtwitterPeriodparams, bool providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled, 
	void(* handler)(ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param oauthPeriodcloudPeriodconfigPeriodroot 
 * \param providerPeriodconfigPeriodroot 
 * \param providerPeriodconfigPerioduserPeriodfolder 
 * \param providerPeriodconfigPeriodtwitterPeriodenablePeriodparams 
 * \param providerPeriodconfigPeriodtwitterPeriodparams 
 * \param providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialConnectOauthImplTwitterProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, std::string oauthPeriodcloudPeriodconfigPeriodroot, std::string providerPeriodconfigPeriodroot, std::string providerPeriodconfigPerioduserPeriodfolder, bool providerPeriodconfigPeriodtwitterPeriodenablePeriodparams, std::list<std::string> providerPeriodconfigPeriodtwitterPeriodparams, bool providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled, 
	void(* handler)(ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled 
 * \param cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled, int cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds, 
	void(* handler)(ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled 
 * \param cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled, int cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds, 
	void(* handler)(ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param versionPeriodid 
 * \param cachePeriodon 
 * \param concurrencyPeriodlevel 
 * \param cachePeriodstartPeriodsize 
 * \param cachePeriodttl 
 * \param cachePeriodsize 
 * \param timePeriodlimit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialDatastoreAsImplASResourceProviderFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string versionPeriodid, bool cachePeriodon, int concurrencyPeriodlevel, int cachePeriodstartPeriodsize, int cachePeriodttl, int cachePeriodsize, int timePeriodlimit, 
	void(* handler)(ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param versionPeriodid 
 * \param cachePeriodon 
 * \param concurrencyPeriodlevel 
 * \param cachePeriodstartPeriodsize 
 * \param cachePeriodttl 
 * \param cachePeriodsize 
 * \param timePeriodlimit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string versionPeriodid, bool cachePeriodon, int concurrencyPeriodlevel, int cachePeriodstartPeriodsize, int cachePeriodttl, int cachePeriodsize, int timePeriodlimit, 
	void(* handler)(ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param solrPeriodzkPeriodtimeout 
 * \param solrPeriodcommit 
 * \param cachePeriodon 
 * \param concurrencyPeriodlevel 
 * \param cachePeriodstartPeriodsize 
 * \param cachePeriodttl 
 * \param cachePeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string solrPeriodzkPeriodtimeout, std::string solrPeriodcommit, bool cachePeriodon, int concurrencyPeriodlevel, int cachePeriodstartPeriodsize, int cachePeriodttl, int cachePeriodsize, 
	void(* handler)(ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param solrPeriodzkPeriodtimeout 
 * \param solrPeriodcommit 
 * \param cachePeriodon 
 * \param concurrencyPeriodlevel 
 * \param cachePeriodstartPeriodsize 
 * \param cachePeriodttl 
 * \param cachePeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string solrPeriodzkPeriodtimeout, std::string solrPeriodcommit, bool cachePeriodon, int concurrencyPeriodlevel, int cachePeriodstartPeriodsize, int cachePeriodttl, int cachePeriodsize, 
	void(* handler)(ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param solrPeriodzkPeriodtimeout 
 * \param solrPeriodcommit 
 * \param cachePeriodon 
 * \param concurrencyPeriodlevel 
 * \param cachePeriodstartPeriodsize 
 * \param cachePeriodttl 
 * \param cachePeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string solrPeriodzkPeriodtimeout, std::string solrPeriodcommit, bool cachePeriodon, int concurrencyPeriodlevel, int cachePeriodstartPeriodsize, int cachePeriodttl, int cachePeriodsize, 
	void(* handler)(ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param solrPeriodzkPeriodtimeout 
 * \param solrPeriodcommit 
 * \param cachePeriodon 
 * \param concurrencyPeriodlevel 
 * \param cachePeriodstartPeriodsize 
 * \param cachePeriodttl 
 * \param cachePeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string solrPeriodzkPeriodtimeout, std::string solrPeriodcommit, bool cachePeriodon, int concurrencyPeriodlevel, int cachePeriodstartPeriodsize, int cachePeriodttl, int cachePeriodsize, 
	void(* handler)(ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isMemberCheck 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isMemberCheck, 
	void(* handler)(ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isMemberCheck 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isMemberCheck, 
	void(* handler)(ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isMemberCheck 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isMemberCheck, 
	void(* handler)(ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isMemberCheck 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isMemberCheck, 
	void(* handler)(ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, 
	void(* handler)(ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, 
	void(* handler)(ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, 
	void(* handler)(ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, 
	void(* handler)(ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialEnablementServicesImplAuthorMarkerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, 
	void(* handler)(ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialEnablementServicesImplAuthorMarkerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, 
	void(* handler)(ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodselectors 
 * \param slingPeriodservletPeriodextensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodselectors, std::string slingPeriodservletPeriodextensions, 
	void(* handler)(ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodselectors 
 * \param slingPeriodservletPeriodextensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodselectors, std::string slingPeriodservletPeriodextensions, 
	void(* handler)(ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param extensionPeriodorder 
 * \param flushPeriodforumontopic 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialForumDispatcherImplFlushOperationsSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int extensionPeriodorder, bool flushPeriodforumontopic, 
	void(* handler)(ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param extensionPeriodorder 
 * \param flushPeriodforumontopic 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialForumDispatcherImplFlushOperationsAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int extensionPeriodorder, bool flushPeriodforumontopic, 
	void(* handler)(ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param groupPeriodlistingPeriodpaginationPeriodenable 
 * \param groupPeriodlistingPeriodlazyloadingPeriodenable 
 * \param pagePeriodsize 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool groupPeriodlistingPeriodpaginationPeriodenable, bool groupPeriodlistingPeriodlazyloadingPeriodenable, int pagePeriodsize, int priority, 
	void(* handler)(ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param groupPeriodlistingPeriodpaginationPeriodenable 
 * \param groupPeriodlistingPeriodlazyloadingPeriodenable 
 * \param pagePeriodsize 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool groupPeriodlistingPeriodpaginationPeriodenable, bool groupPeriodlistingPeriodlazyloadingPeriodenable, int pagePeriodsize, int priority, 
	void(* handler)(ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxWaitTime 
 * \param minWaitBetweenRetries 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialGroupImplGroupServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxWaitTime, int minWaitBetweenRetries, 
	void(* handler)(ComAdobeCqSocialGroupImplGroupServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxWaitTime 
 * \param minWaitBetweenRetries 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialGroupImplGroupServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxWaitTime, int minWaitBetweenRetries, 
	void(* handler)(ComAdobeCqSocialGroupImplGroupServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param parameterPeriodguavaPeriodcachePeriodenabled 
 * \param parameterPeriodguavaPeriodcachePeriodparams 
 * \param parameterPeriodguavaPeriodcachePeriodreload 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialHandlebarsGuavaTemplateCacheImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool parameterPeriodguavaPeriodcachePeriodenabled, std::string parameterPeriodguavaPeriodcachePeriodparams, bool parameterPeriodguavaPeriodcachePeriodreload, int servicePeriodranking, 
	void(* handler)(ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param parameterPeriodguavaPeriodcachePeriodenabled 
 * \param parameterPeriodguavaPeriodcachePeriodparams 
 * \param parameterPeriodguavaPeriodcachePeriodreload 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialHandlebarsGuavaTemplateCacheImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool parameterPeriodguavaPeriodcachePeriodenabled, std::string parameterPeriodguavaPeriodcachePeriodparams, bool parameterPeriodguavaPeriodcachePeriodreload, int servicePeriodranking, 
	void(* handler)(ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, 
	void(* handler)(ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, 
	void(* handler)(ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, 
	void(* handler)(ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, 
	void(* handler)(ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param everyoneLimit 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int everyoneLimit, int priority, 
	void(* handler)(ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param everyoneLimit 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int everyoneLimit, int priority, 
	void(* handler)(ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param messagePeriodproperties 
 * \param messageBoxSizeLimit 
 * \param messageCountLimit 
 * \param notifyFailure 
 * \param failureMessageFrom 
 * \param failureTemplatePath 
 * \param maxRetries 
 * \param minWaitBetweenRetries 
 * \param countUpdatePoolSize 
 * \param inboxPeriodpath 
 * \param sentitemsPeriodpath 
 * \param supportAttachments 
 * \param supportGroupMessaging 
 * \param maxTotalRecipients 
 * \param batchSize 
 * \param maxTotalAttachmentSize 
 * \param attachmentTypeBlacklist 
 * \param allowedAttachmentTypes 
 * \param serviceSelector 
 * \param fieldWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> messagePeriodproperties, int messageBoxSizeLimit, int messageCountLimit, bool notifyFailure, std::string failureMessageFrom, std::string failureTemplatePath, int maxRetries, int minWaitBetweenRetries, int countUpdatePoolSize, std::string inboxPeriodpath, std::string sentitemsPeriodpath, bool supportAttachments, bool supportGroupMessaging, int maxTotalRecipients, int batchSize, int maxTotalAttachmentSize, std::list<std::string> attachmentTypeBlacklist, std::list<std::string> allowedAttachmentTypes, std::string serviceSelector, std::list<std::string> fieldWhitelist, 
	void(* handler)(ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param messagePeriodproperties 
 * \param messageBoxSizeLimit 
 * \param messageCountLimit 
 * \param notifyFailure 
 * \param failureMessageFrom 
 * \param failureTemplatePath 
 * \param maxRetries 
 * \param minWaitBetweenRetries 
 * \param countUpdatePoolSize 
 * \param inboxPeriodpath 
 * \param sentitemsPeriodpath 
 * \param supportAttachments 
 * \param supportGroupMessaging 
 * \param maxTotalRecipients 
 * \param batchSize 
 * \param maxTotalAttachmentSize 
 * \param attachmentTypeBlacklist 
 * \param allowedAttachmentTypes 
 * \param serviceSelector 
 * \param fieldWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> messagePeriodproperties, int messageBoxSizeLimit, int messageCountLimit, bool notifyFailure, std::string failureMessageFrom, std::string failureTemplatePath, int maxRetries, int minWaitBetweenRetries, int countUpdatePoolSize, std::string inboxPeriodpath, std::string sentitemsPeriodpath, bool supportAttachments, bool supportGroupMessaging, int maxTotalRecipients, int batchSize, int maxTotalAttachmentSize, std::list<std::string> attachmentTypeBlacklist, std::list<std::string> allowedAttachmentTypes, std::string serviceSelector, std::list<std::string> fieldWhitelist, 
	void(* handler)(ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param resourceTypePeriodfilters 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> resourceTypePeriodfilters, int priority, 
	void(* handler)(ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param resourceTypePeriodfilters 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> resourceTypePeriodfilters, int priority, 
	void(* handler)(ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialModerationDashboardApiModerationDashboardSocialSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priority, 
	void(* handler)(ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialModerationDashboardApiModerationDashboardSocialAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priority, 
	void(* handler)(ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priority, 
	void(* handler)(ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priority, 
	void(* handler)(ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param resourceTypePeriodfilters 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> resourceTypePeriodfilters, int priority, 
	void(* handler)(ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param resourceTypePeriodfilters 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> resourceTypePeriodfilters, int priority, 
	void(* handler)(ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialNotificationsImplMentionsRouterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, 
	void(* handler)(ComAdobeCqSocialNotificationsImplMentionsRouterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialNotificationsImplMentionsRouterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, 
	void(* handler)(ComAdobeCqSocialNotificationsImplMentionsRouterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPeriodunreadPeriodnotificationPeriodcount 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialNotificationsImplNotificationManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxPeriodunreadPeriodnotificationPeriodcount, 
	void(* handler)(ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPeriodunreadPeriodnotificationPeriodcount 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialNotificationsImplNotificationManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxPeriodunreadPeriodnotificationPeriodcount, 
	void(* handler)(ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialNotificationsImplNotificationsRouterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, 
	void(* handler)(ComAdobeCqSocialNotificationsImplNotificationsRouterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialNotificationsImplNotificationsRouterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, 
	void(* handler)(ComAdobeCqSocialNotificationsImplNotificationsRouterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval 
 * \param cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportISync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval, int cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize, 
	void(* handler)(ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval 
 * \param cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval, int cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize, 
	void(* handler)(ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param reportPeriodfetchPerioddelay 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int reportPeriodfetchPerioddelay, 
	void(* handler)(ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param reportPeriodfetchPerioddelay 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int reportPeriodfetchPerioddelay, 
	void(* handler)(ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping, int priority, 
	void(* handler)(ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping, int priority, 
	void(* handler)(ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param attachmentTypeBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> attachmentTypeBlacklist, 
	void(* handler)(ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodselectors 
 * \param slingPeriodservletPeriodextensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodselectors, std::string slingPeriodservletPeriodextensions, 
	void(* handler)(ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodselectors 
 * \param slingPeriodservletPeriodextensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodselectors, std::string slingPeriodservletPeriodextensions, 
	void(* handler)(ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodselectors 
 * \param slingPeriodservletPeriodextensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodservletPeriodselectors, std::string slingPeriodservletPeriodextensions, 
	void(* handler)(ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodselectors 
 * \param slingPeriodservletPeriodextensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodservletPeriodselectors, std::string slingPeriodservletPeriodextensions, 
	void(* handler)(ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialScoringImplScoringEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, 
	void(* handler)(ComAdobeCqSocialScoringImplScoringEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialScoringImplScoringEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, 
	void(* handler)(ComAdobeCqSocialScoringImplScoringEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enableFallback 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enableFallback, 
	void(* handler)(ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enableFallback 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enableFallback, 
	void(* handler)(ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param sitePathFilters 
 * \param sitePackageGroup 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSiteEndpointsImplSiteOperationServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> sitePathFilters, std::string sitePackageGroup, 
	void(* handler)(ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fieldWhitelist 
 * \param sitePathFilters 
 * \param sitePackageGroup 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSiteEndpointsImplSiteOperationServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fieldWhitelist, std::list<std::string> sitePathFilters, std::string sitePackageGroup, 
	void(* handler)(ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents, 
	void(* handler)(ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents, 
	void(* handler)(ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param componentsUsingTags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSiteImplSiteConfiguratorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> componentsUsingTags, 
	void(* handler)(ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param componentsUsingTags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSiteImplSiteConfiguratorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> componentsUsingTags, 
	void(* handler)(ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param srpPeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSrpImplSocialSolrConnectorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string srpPeriodtype, 
	void(* handler)(ComAdobeCqSocialSrpImplSocialSolrConnectorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param srpPeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSrpImplSocialSolrConnectorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string srpPeriodtype, 
	void(* handler)(ComAdobeCqSocialSrpImplSocialSolrConnectorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param agentName 
 * \param diffPath 
 * \param propertyNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSyncImplDiffChangesObserverSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::string agentName, std::string diffPath, std::string propertyNames, 
	void(* handler)(ComAdobeCqSocialSyncImplDiffChangesObserverInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param agentName 
 * \param diffPath 
 * \param propertyNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSyncImplDiffChangesObserverAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::string agentName, std::string diffPath, std::string propertyNames, 
	void(* handler)(ComAdobeCqSocialSyncImplDiffChangesObserverInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param nodetypes 
 * \param ignorableprops 
 * \param ignorablenodes 
 * \param enabled 
 * \param distfolders 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSyncImplGroupSyncListenerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> nodetypes, std::list<std::string> ignorableprops, std::string ignorablenodes, bool enabled, std::string distfolders, 
	void(* handler)(ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param nodetypes 
 * \param ignorableprops 
 * \param ignorablenodes 
 * \param enabled 
 * \param distfolders 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSyncImplGroupSyncListenerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> nodetypes, std::list<std::string> ignorableprops, std::string ignorablenodes, bool enabled, std::string distfolders, 
	void(* handler)(ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param activeRunModes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSyncImplPublisherSyncServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> activeRunModes, 
	void(* handler)(ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param activeRunModes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSyncImplPublisherSyncServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> activeRunModes, 
	void(* handler)(ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param nodetypes 
 * \param ignorableprops 
 * \param ignorablenodes 
 * \param enabled 
 * \param distfolders 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSyncImplUserSyncListenerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> nodetypes, std::list<std::string> ignorableprops, std::list<std::string> ignorablenodes, bool enabled, std::list<std::string> distfolders, 
	void(* handler)(ComAdobeCqSocialSyncImplUserSyncListenerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param nodetypes 
 * \param ignorableprops 
 * \param ignorablenodes 
 * \param enabled 
 * \param distfolders 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialSyncImplUserSyncListenerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> nodetypes, std::list<std::string> ignorableprops, std::list<std::string> ignorablenodes, bool enabled, std::list<std::string> distfolders, 
	void(* handler)(ComAdobeCqSocialSyncImplUserSyncListenerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param translatePeriodlanguage 
 * \param translatePerioddisplay 
 * \param translatePeriodattribution 
 * \param translatePeriodcaching 
 * \param translatePeriodsmartPeriodrendering 
 * \param translatePeriodcachingPeriodduration 
 * \param translatePeriodsessionPeriodsavePeriodinterval 
 * \param translatePeriodsessionPeriodsavePeriodbatchLimit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialTranslationImplTranslationServiceConfigManagerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string translatePeriodlanguage, std::string translatePerioddisplay, bool translatePeriodattribution, std::string translatePeriodcaching, std::string translatePeriodsmartPeriodrendering, std::string translatePeriodcachingPeriodduration, std::string translatePeriodsessionPeriodsavePeriodinterval, std::string translatePeriodsessionPeriodsavePeriodbatchLimit, 
	void(* handler)(ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param translatePeriodlanguage 
 * \param translatePerioddisplay 
 * \param translatePeriodattribution 
 * \param translatePeriodcaching 
 * \param translatePeriodsmartPeriodrendering 
 * \param translatePeriodcachingPeriodduration 
 * \param translatePeriodsessionPeriodsavePeriodinterval 
 * \param translatePeriodsessionPeriodsavePeriodbatchLimit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialTranslationImplTranslationServiceConfigManagerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string translatePeriodlanguage, std::string translatePerioddisplay, bool translatePeriodattribution, std::string translatePeriodcaching, std::string translatePeriodsmartPeriodrendering, std::string translatePeriodcachingPeriodduration, std::string translatePeriodsessionPeriodsavePeriodinterval, std::string translatePeriodsessionPeriodsavePeriodbatchLimit, 
	void(* handler)(ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param translatePeriodlistenerPeriodtype 
 * \param translatePeriodpropertyPeriodlist 
 * \param poolSize 
 * \param maxPoolSize 
 * \param queueSize 
 * \param keepAliveTime 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialTranslationImplUGCLanguageDetectorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, std::list<std::string> translatePeriodlistenerPeriodtype, std::list<std::string> translatePeriodpropertyPeriodlist, int poolSize, int maxPoolSize, int queueSize, int keepAliveTime, 
	void(* handler)(ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param eventPeriodfilter 
 * \param translatePeriodlistenerPeriodtype 
 * \param translatePeriodpropertyPeriodlist 
 * \param poolSize 
 * \param maxPoolSize 
 * \param queueSize 
 * \param keepAliveTime 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialTranslationImplUGCLanguageDetectorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodtopics, std::string eventPeriodfilter, std::list<std::string> translatePeriodlistenerPeriodtype, std::list<std::string> translatePeriodpropertyPeriodlist, int poolSize, int maxPoolSize, int queueSize, int keepAliveTime, 
	void(* handler)(ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param threadPoolSize 
 * \param delayTime 
 * \param workerSleepTime 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int threadPoolSize, int delayTime, int workerSleepTime, 
	void(* handler)(ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param threadPoolSize 
 * \param delayTime 
 * \param workerSleepTime 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int threadPoolSize, int delayTime, int workerSleepTime, 
	void(* handler)(ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param poolSize 
 * \param maxPoolSize 
 * \param queueSize 
 * \param keepAliveTime 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int poolSize, int maxPoolSize, int queueSize, int keepAliveTime, 
	void(* handler)(ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param poolSize 
 * \param maxPoolSize 
 * \param queueSize 
 * \param keepAliveTime 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int poolSize, int maxPoolSize, int queueSize, int keepAliveTime, 
	void(* handler)(ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isPrimaryPublisher 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseImplPublisherConfigurationImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isPrimaryPublisher, 
	void(* handler)(ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isPrimaryPublisher 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseImplPublisherConfigurationImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isPrimaryPublisher, 
	void(* handler)(ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param legacyCloudUGCPathMapping 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseImplSocialUtilsImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool legacyCloudUGCPathMapping, 
	void(* handler)(ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param legacyCloudUGCPathMapping 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseImplSocialUtilsImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool legacyCloudUGCPathMapping, 
	void(* handler)(ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param automoderationPeriodsequence 
 * \param automoderationPeriodonfailurestop 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseModerationImplAutoModerationImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> automoderationPeriodsequence, bool automoderationPeriodonfailurestop, 
	void(* handler)(ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param automoderationPeriodsequence 
 * \param automoderationPeriodonfailurestop 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseModerationImplAutoModerationImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> automoderationPeriodsequence, bool automoderationPeriodonfailurestop, 
	void(* handler)(ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param watchwordsPeriodpositive 
 * \param watchwordsPeriodnegative 
 * \param watchwordsPeriodpath 
 * \param sentimentPeriodpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseModerationImplSentimentProcessSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> watchwordsPeriodpositive, std::list<std::string> watchwordsPeriodnegative, std::string watchwordsPeriodpath, std::string sentimentPeriodpath, 
	void(* handler)(ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param watchwordsPeriodpositive 
 * \param watchwordsPeriodnegative 
 * \param watchwordsPeriodpath 
 * \param sentimentPeriodpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseModerationImplSentimentProcessAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> watchwordsPeriodpositive, std::list<std::string> watchwordsPeriodnegative, std::string watchwordsPeriodpath, std::string sentimentPeriodpath, 
	void(* handler)(ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodattachmentPeriodtypePeriodblacklist 
 * \param baselinePeriodattachmentPeriodtypePeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> defaultPeriodattachmentPeriodtypePeriodblacklist, std::list<std::string> baselinePeriodattachmentPeriodtypePeriodblacklist, 
	void(* handler)(ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodattachmentPeriodtypePeriodblacklist 
 * \param baselinePeriodattachmentPeriodtypePeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> defaultPeriodattachmentPeriodtypePeriodblacklist, std::list<std::string> baselinePeriodattachmentPeriodtypePeriodblacklist, 
	void(* handler)(ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param parameterPeriodwhitelist 
 * \param parameterPeriodwhitelistPeriodprefixes 
 * \param binaryPeriodparameterPeriodwhitelist 
 * \param modifierPeriodwhitelist 
 * \param operationPeriodwhitelist 
 * \param operationPeriodwhitelistPeriodprefixes 
 * \param typehintPeriodwhitelist 
 * \param resourcetypePeriodwhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> parameterPeriodwhitelist, std::list<std::string> parameterPeriodwhitelistPeriodprefixes, std::list<std::string> binaryPeriodparameterPeriodwhitelist, std::list<std::string> modifierPeriodwhitelist, std::list<std::string> operationPeriodwhitelist, std::list<std::string> operationPeriodwhitelistPeriodprefixes, std::list<std::string> typehintPeriodwhitelist, std::list<std::string> resourcetypePeriodwhitelist, 
	void(* handler)(ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param parameterPeriodwhitelist 
 * \param parameterPeriodwhitelistPeriodprefixes 
 * \param binaryPeriodparameterPeriodwhitelist 
 * \param modifierPeriodwhitelist 
 * \param operationPeriodwhitelist 
 * \param operationPeriodwhitelistPeriodprefixes 
 * \param typehintPeriodwhitelist 
 * \param resourcetypePeriodwhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> parameterPeriodwhitelist, std::list<std::string> parameterPeriodwhitelistPeriodprefixes, std::list<std::string> binaryPeriodparameterPeriodwhitelist, std::list<std::string> modifierPeriodwhitelist, std::list<std::string> operationPeriodwhitelist, std::list<std::string> operationPeriodwhitelistPeriodprefixes, std::list<std::string> typehintPeriodwhitelist, std::list<std::string> resourcetypePeriodwhitelist, 
	void(* handler)(ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodextensions 
 * \param slingPeriodservletPeriodpaths 
 * \param slingPeriodservletPeriodmethods 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodextensions, std::string slingPeriodservletPeriodpaths, std::string slingPeriodservletPeriodmethods, 
	void(* handler)(ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodextensions 
 * \param slingPeriodservletPeriodpaths 
 * \param slingPeriodservletPeriodmethods 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodextensions, std::string slingPeriodservletPeriodpaths, std::string slingPeriodservletPeriodmethods, 
	void(* handler)(ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enable 
 * \param agentPeriodconfiguration 
 * \param contextPeriodpath 
 * \param disabledPeriodcipherPeriodsuites 
 * \param enabledPeriodcipherPeriodsuites 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUserImplTransportHttpToPublisherSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enable, std::list<std::string> agentPeriodconfiguration, std::string contextPeriodpath, std::list<std::string> disabledPeriodcipherPeriodsuites, std::list<std::string> enabledPeriodcipherPeriodsuites, 
	void(* handler)(ComAdobeCqSocialUserImplTransportHttpToPublisherInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enable 
 * \param agentPeriodconfiguration 
 * \param contextPeriodpath 
 * \param disabledPeriodcipherPeriodsuites 
 * \param enabledPeriodcipherPeriodsuites 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqSocialUserImplTransportHttpToPublisherAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enable, std::list<std::string> agentPeriodconfiguration, std::string contextPeriodpath, std::list<std::string> disabledPeriodcipherPeriodsuites, std::list<std::string> enabledPeriodcipherPeriodsuites, 
	void(* handler)(ComAdobeCqSocialUserImplTransportHttpToPublisherInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param resourcePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> resourcePeriodtypes, 
	void(* handler)(ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param resourcePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> resourcePeriodtypes, 
	void(* handler)(ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param deletePeriodpathPeriodregexps 
 * \param deletePeriodsql2Periodquery 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqUpgradesCleanupImplUpgradeContentCleanupSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> deletePeriodpathPeriodregexps, std::string deletePeriodsql2Periodquery, 
	void(* handler)(ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param deletePeriodpathPeriodregexps 
 * \param deletePeriodsql2Periodquery 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqUpgradesCleanupImplUpgradeContentCleanupAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> deletePeriodpathPeriodregexps, std::string deletePeriodsql2Periodquery, 
	void(* handler)(ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param deletePeriodnamePeriodregexps 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> deletePeriodnamePeriodregexps, 
	void(* handler)(ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param deletePeriodnamePeriodregexps 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> deletePeriodnamePeriodregexps, 
	void(* handler)(ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param threshold 
 * \param jobTopicName 
 * \param emailEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int threshold, std::string jobTopicName, bool emailEnabled, 
	void(* handler)(ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param threshold 
 * \param jobTopicName 
 * \param emailEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int threshold, std::string jobTopicName, bool emailEnabled, 
	void(* handler)(ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param jobPeriodpurgePeriodthreshold 
 * \param jobPeriodpurgePeriodmaxPeriodjobs 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, int jobPeriodpurgePeriodthreshold, int jobPeriodpurgePeriodmaxPeriodjobs, 
	void(* handler)(ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param jobPeriodpurgePeriodthreshold 
 * \param jobPeriodpurgePeriodmaxPeriodjobs 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, int jobPeriodpurgePeriodthreshold, int jobPeriodpurgePeriodmaxPeriodjobs, 
	void(* handler)(ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param threshold 
 * \param jobTopicName 
 * \param emailEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int threshold, std::string jobTopicName, bool emailEnabled, 
	void(* handler)(ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param threshold 
 * \param jobTopicName 
 * \param emailEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int threshold, std::string jobTopicName, bool emailEnabled, 
	void(* handler)(ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param threshold 
 * \param jobTopicName 
 * \param emailEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int threshold, std::string jobTopicName, bool emailEnabled, 
	void(* handler)(ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param threshold 
 * \param jobTopicName 
 * \param emailEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int threshold, std::string jobTopicName, bool emailEnabled, 
	void(* handler)(ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize 
 * \param launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority 
 * \param launchesPeriodeventhandlerPeriodupdatelastmodification 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmLaunchesImplLaunchesEventHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, int launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize, std::string launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority, bool launchesPeriodeventhandlerPeriodupdatelastmodification, 
	void(* handler)(ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize 
 * \param launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority 
 * \param launchesPeriodeventhandlerPeriodupdatelastmodification 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmLaunchesImplLaunchesEventHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, int launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize, std::string launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority, bool launchesPeriodeventhandlerPeriodupdatelastmodification, 
	void(* handler)(ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist, 
	void(* handler)(ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist, 
	void(* handler)(ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param size 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int size, 
	void(* handler)(ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param size 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int size, 
	void(* handler)(ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param syncTranslationStatePeriodschedulingFormat 
 * \param schedulingRepeatTranslationPeriodschedulingFormat 
 * \param syncTranslationStatePeriodlockTimeoutInMinutes 
 * \param exportPeriodformat 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string syncTranslationStatePeriodschedulingFormat, std::string schedulingRepeatTranslationPeriodschedulingFormat, std::string syncTranslationStatePeriodlockTimeoutInMinutes, std::string exportPeriodformat, 
	void(* handler)(ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param syncTranslationStatePeriodschedulingFormat 
 * \param schedulingRepeatTranslationPeriodschedulingFormat 
 * \param syncTranslationStatePeriodlockTimeoutInMinutes 
 * \param exportPeriodformat 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string syncTranslationStatePeriodschedulingFormat, std::string schedulingRepeatTranslationPeriodschedulingFormat, std::string syncTranslationStatePeriodlockTimeoutInMinutes, std::string exportPeriodformat, 
	void(* handler)(ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param portalPeriodoutboxes 
 * \param draftPerioddataPeriodservice 
 * \param draftPeriodmetadataPeriodservice 
 * \param submitPerioddataPeriodservice 
 * \param submitPeriodmetadataPeriodservice 
 * \param pendingSignPerioddataPeriodservice 
 * \param pendingSignPeriodmetadataPeriodservice 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> portalPeriodoutboxes, std::string draftPerioddataPeriodservice, std::string draftPeriodmetadataPeriodservice, std::string submitPerioddataPeriodservice, std::string submitPeriodmetadataPeriodservice, std::string pendingSignPerioddataPeriodservice, std::string pendingSignPeriodmetadataPeriodservice, 
	void(* handler)(ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param portalPeriodoutboxes 
 * \param draftPerioddataPeriodservice 
 * \param draftPeriodmetadataPeriodservice 
 * \param submitPerioddataPeriodservice 
 * \param submitPeriodmetadataPeriodservice 
 * \param pendingSignPerioddataPeriodservice 
 * \param pendingSignPeriodmetadataPeriodservice 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> portalPeriodoutboxes, std::string draftPerioddataPeriodservice, std::string draftPeriodmetadataPeriodservice, std::string submitPerioddataPeriodservice, std::string submitPeriodmetadataPeriodservice, std::string pendingSignPerioddataPeriodservice, std::string pendingSignPeriodmetadataPeriodservice, 
	void(* handler)(ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param formportalPeriodinterval 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeFdFpConfigFormsPortalSchedulerServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string formportalPeriodinterval, 
	void(* handler)(ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param formportalPeriodinterval 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeFdFpConfigFormsPortalSchedulerServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string formportalPeriodinterval, 
	void(* handler)(ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param alloweddataFileLocations 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeFormsCommonServiceImplDefaultDataProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> alloweddataFileLocations, 
	void(* handler)(ComAdobeFormsCommonServiceImplDefaultDataProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param alloweddataFileLocations 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeFormsCommonServiceImplDefaultDataProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> alloweddataFileLocations, 
	void(* handler)(ComAdobeFormsCommonServiceImplDefaultDataProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param tempStorageConfig 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string tempStorageConfig, 
	void(* handler)(ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param tempStorageConfig 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string tempStorageConfig, 
	void(* handler)(ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param duration_for_Temporary_Storage 
 * \param duration_for_Anonymous_Storage 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeFormsCommonServletTempCleanUpTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, std::string duration_for_Temporary_Storage, std::string duration_for_Anonymous_Storage, 
	void(* handler)(ComAdobeFormsCommonServletTempCleanUpTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param duration_for_Temporary_Storage 
 * \param duration_for_Anonymous_Storage 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeFormsCommonServletTempCleanUpTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, std::string duration_for_Temporary_Storage, std::string duration_for_Anonymous_Storage, 
	void(* handler)(ComAdobeFormsCommonServletTempCleanUpTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queryPeriodlimit 
 * \param filePeriodtypePeriodextensionPeriodmap 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAcpPlatformPlatformServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int queryPeriodlimit, std::list<std::string> filePeriodtypePeriodextensionPeriodmap, 
	void(* handler)(ComAdobeGraniteAcpPlatformPlatformServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queryPeriodlimit 
 * \param filePeriodtypePeriodextensionPeriodmap 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAcpPlatformPlatformServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int queryPeriodlimit, std::list<std::string> filePeriodtypePeriodextensionPeriodmap, 
	void(* handler)(ComAdobeGraniteAcpPlatformPlatformServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param aggregatePeriodrelationships 
 * \param aggregatePerioddescendPeriodvirtual 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteActivitystreamsImplActivityManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> aggregatePeriodrelationships, bool aggregatePerioddescendPeriodvirtual, 
	void(* handler)(ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param aggregatePeriodrelationships 
 * \param aggregatePerioddescendPeriodvirtual 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteActivitystreamsImplActivityManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> aggregatePeriodrelationships, bool aggregatePerioddescendPeriodvirtual, 
	void(* handler)(ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAnalyzerBaseSystemStatusServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool disabled, 
	void(* handler)(ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAnalyzerBaseSystemStatusServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool disabled, 
	void(* handler)(ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool disabled, 
	void(* handler)(ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool disabled, 
	void(* handler)(ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter 
 * \param comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents 
 * \param comPeriodadobePeriodcqPeriodcloudConfigPeriodcore 
 * \param comPeriodadobePeriodcqPeriodcloudConfigPeriodui 
 * \param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor 
 * \param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore 
 * \param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore 
 * \param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons 
 * \param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle 
 * \param comPeriodadobePeriodcqPeriodcqActivitymapIntegration 
 * \param comPeriodadobePeriodcqPeriodcqContexthubCommons 
 * \param comPeriodadobePeriodcqPeriodcqDtm 
 * \param comPeriodadobePeriodcqPeriodcqHealthcheck 
 * \param comPeriodadobePeriodcqPeriodcqMultisiteTargeting 
 * \param comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup 
 * \param comPeriodadobePeriodcqPeriodcqProductInfoProvider 
 * \param comPeriodadobePeriodcqPeriodcqRestSites 
 * \param comPeriodadobePeriodcqPeriodcqSecurityHc 
 * \param comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler 
 * \param comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging 
 * \param comPeriodadobePeriodcqPerioddtmReactorPeriodcore 
 * \param comPeriodadobePeriodcqPerioddtmReactorPeriodui 
 * \param comPeriodadobePeriodcqPeriodexpJspelResolver 
 * \param comPeriodadobePeriodcqPeriodinboxPeriodcqInbox 
 * \param comPeriodadobePeriodcqPeriodjsonSchemaParser 
 * \param comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore 
 * \param comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas 
 * \param comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder 
 * \param comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild 
 * \param comPeriodadobePeriodcqPeriodmyspell 
 * \param comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl 
 * \param comPeriodadobePerioddamPeriodcqDamCfmImpl 
 * \param comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase 
 * \param comPeriodadobePeriodgranitePeriodapicontroller 
 * \param comPeriodadobePeriodgranitePeriodassetPeriodcore 
 * \param comPeriodadobePeriodgranitePeriodauthPeriodsso 
 * \param comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl 
 * \param comPeriodadobePeriodgranitePeriodcompatRouter 
 * \param comPeriodadobePeriodgranitePeriodconf 
 * \param comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore 
 * \param comPeriodadobePeriodgranitePeriodcors 
 * \param comPeriodadobePeriodgranitePeriodcrxExplorer 
 * \param comPeriodadobePeriodgranitePeriodcrxdeLite 
 * \param comPeriodadobePeriodgranitePeriodcryptoPeriodconfig 
 * \param comPeriodadobePeriodgranitePeriodcryptoPeriodextension 
 * \param comPeriodadobePeriodgranitePeriodcryptoPeriodfile 
 * \param comPeriodadobePeriodgranitePeriodcryptoPeriodjcr 
 * \param comPeriodadobePeriodgranitePeriodcsrf 
 * \param comPeriodadobePeriodgranitePerioddistributionPeriodcore 
 * \param comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics 
 * \param comPeriodadobePeriodgranitePeriodfragsPeriodimpl 
 * \param comPeriodadobePeriodgranitePeriodgibson 
 * \param comPeriodadobePeriodgranitePeriodinfocollector 
 * \param comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodssl 
 * \param comPeriodadobePeriodgranitePeriodjobsPeriodasync 
 * \param comPeriodadobePeriodgranitePeriodmaintenancePeriodoak 
 * \param comPeriodadobePeriodgranitePeriodmonitoringPeriodcore 
 * \param comPeriodadobePeriodgranitePeriodqueries 
 * \param comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl 
 * \param comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker 
 * \param comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl 
 * \param comPeriodadobePeriodgranitePeriodrestPeriodassets 
 * \param comPeriodadobePeriodgranitePeriodsecurityPeriodui 
 * \param comPeriodadobePeriodgranitePeriodstartup 
 * \param comPeriodadobePeriodgranitePeriodtagsoup 
 * \param comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore 
 * \param comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow 
 * \param comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless 
 * \param comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc 
 * \param comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins 
 * \param comPeriodadobePeriodgranitePeriodworkflowPeriodconsole 
 * \param comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux 
 * \param comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx 
 * \param comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin 
 * \param comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi 
 * \param comPerioddayPeriodcqPeriodcqAuthhandler 
 * \param comPerioddayPeriodcqPeriodcqCompatConfigupdate 
 * \param comPerioddayPeriodcqPeriodcqLicensebranding 
 * \param comPerioddayPeriodcqPeriodcqNotifcationImpl 
 * \param comPerioddayPeriodcqPeriodcqReplicationAudit 
 * \param comPerioddayPeriodcqPeriodcqSearchExt 
 * \param comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint 
 * \param comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage 
 * \param comPerioddayPeriodcqPerioddamPeriodcqDamS7dam 
 * \param comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch 
 * \param comPerioddayPeriodcqPerioddamPerioddamWebdavSupport 
 * \param comPerioddayPeriodcqPeriodpreUpgradeTasks 
 * \param comPerioddayPeriodcqPeriodreplicationPeriodextensions 
 * \param comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore 
 * \param comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation 
 * \param dayCommonsJrawio 
 * \param orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter 
 * \param orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump 
 * \param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds 
 * \param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent 
 * \param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage 
 * \param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin 
 * \param orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap 
 * \param orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar 
 * \param orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi 
 * \param orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole 
 * \param orgPeriodapachePeriodslingPerioddatasource 
 * \param orgPeriodapachePeriodslingPerioddiscoveryPeriodbase 
 * \param orgPeriodapachePeriodslingPerioddiscoveryPeriodoak 
 * \param orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport 
 * \param orgPeriodapachePeriodslingPerioddistributionPeriodapi 
 * \param orgPeriodapachePeriodslingPerioddistributionPeriodcore 
 * \param orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider 
 * \param orgPeriodapachePeriodslingPeriodhcPeriodwebconsole 
 * \param orgPeriodapachePeriodslingPeriodinstallerPeriodconsole 
 * \param orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile 
 * \param orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr 
 * \param orgPeriodapachePeriodslingPeriodjcrPerioddavex 
 * \param orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity 
 * \param orgPeriodapachePeriodslingPeriodjmxPeriodprovider 
 * \param orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller 
 * \param orgPeriodapachePeriodslingPeriodmodelsPeriodimpl 
 * \param orgPeriodapachePeriodslingPeriodrepoinitPeriodparser 
 * \param orgPeriodapachePeriodslingPeriodresourcePeriodinventory 
 * \param orgPeriodapachePeriodslingPeriodresourceresolver 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodjst 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider 
 * \param orgPeriodapachePeriodslingPeriodsecurity 
 * \param orgPeriodapachePeriodslingPeriodservletsPeriodcompat 
 * \param orgPeriodapachePeriodslingPeriodservletsPeriodget 
 * \param orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler 
 * \param orgPeriodapachePeriodslingPeriodtracer 
 * \param wePeriodretailPeriodclientPeriodappPeriodcore 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteApicontrollerFilterResolverHookFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter, std::string comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents, std::string comPeriodadobePeriodcqPeriodcloudConfigPeriodcore, std::string comPeriodadobePeriodcqPeriodcloudConfigPeriodui, std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor, std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore, std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore, std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons, std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle, std::string comPeriodadobePeriodcqPeriodcqActivitymapIntegration, std::string comPeriodadobePeriodcqPeriodcqContexthubCommons, std::string comPeriodadobePeriodcqPeriodcqDtm, std::string comPeriodadobePeriodcqPeriodcqHealthcheck, std::string comPeriodadobePeriodcqPeriodcqMultisiteTargeting, std::string comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup, std::string comPeriodadobePeriodcqPeriodcqProductInfoProvider, std::string comPeriodadobePeriodcqPeriodcqRestSites, std::string comPeriodadobePeriodcqPeriodcqSecurityHc, std::string comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler, std::string comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging, std::string comPeriodadobePeriodcqPerioddtmReactorPeriodcore, std::string comPeriodadobePeriodcqPerioddtmReactorPeriodui, std::string comPeriodadobePeriodcqPeriodexpJspelResolver, std::string comPeriodadobePeriodcqPeriodinboxPeriodcqInbox, std::string comPeriodadobePeriodcqPeriodjsonSchemaParser, std::string comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore, std::string comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas, std::string comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder, std::string comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild, std::string comPeriodadobePeriodcqPeriodmyspell, std::string comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore, std::string comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc, std::string comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl, std::string comPeriodadobePerioddamPeriodcqDamCfmImpl, std::string comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase, std::string comPeriodadobePeriodgranitePeriodapicontroller, std::string comPeriodadobePeriodgranitePeriodassetPeriodcore, std::string comPeriodadobePeriodgranitePeriodauthPeriodsso, std::string comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl, std::string comPeriodadobePeriodgranitePeriodcompatRouter, std::string comPeriodadobePeriodgranitePeriodconf, std::string comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore, std::string comPeriodadobePeriodgranitePeriodcors, std::string comPeriodadobePeriodgranitePeriodcrxExplorer, std::string comPeriodadobePeriodgranitePeriodcrxdeLite, std::string comPeriodadobePeriodgranitePeriodcryptoPeriodconfig, std::string comPeriodadobePeriodgranitePeriodcryptoPeriodextension, std::string comPeriodadobePeriodgranitePeriodcryptoPeriodfile, std::string comPeriodadobePeriodgranitePeriodcryptoPeriodjcr, std::string comPeriodadobePeriodgranitePeriodcsrf, std::string comPeriodadobePeriodgranitePerioddistributionPeriodcore, std::string comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics, std::string comPeriodadobePeriodgranitePeriodfragsPeriodimpl, std::string comPeriodadobePeriodgranitePeriodgibson, std::string comPeriodadobePeriodgranitePeriodinfocollector, std::string comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages, std::string comPeriodadobePeriodgranitePeriodjettyPeriodssl, std::string comPeriodadobePeriodgranitePeriodjobsPeriodasync, std::string comPeriodadobePeriodgranitePeriodmaintenancePeriodoak, std::string comPeriodadobePeriodgranitePeriodmonitoringPeriodcore, std::string comPeriodadobePeriodgranitePeriodqueries, std::string comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl, std::string comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker, std::string comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl, std::string comPeriodadobePeriodgranitePeriodrestPeriodassets, std::string comPeriodadobePeriodgranitePeriodsecurityPeriodui, std::string comPeriodadobePeriodgranitePeriodstartup, std::string comPeriodadobePeriodgranitePeriodtagsoup, std::string comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore, std::string comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow, std::string comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless, std::string comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc, std::string comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins, std::string comPeriodadobePeriodgranitePeriodworkflowPeriodconsole, std::string comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux, std::string comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx, std::string comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin, std::string comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi, std::string comPerioddayPeriodcqPeriodcqAuthhandler, std::string comPerioddayPeriodcqPeriodcqCompatConfigupdate, std::string comPerioddayPeriodcqPeriodcqLicensebranding, std::string comPerioddayPeriodcqPeriodcqNotifcationImpl, std::string comPerioddayPeriodcqPeriodcqReplicationAudit, std::string comPerioddayPeriodcqPeriodcqSearchExt, std::string comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint, std::string comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage, std::string comPerioddayPeriodcqPerioddamPeriodcqDamS7dam, std::string comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch, std::string comPerioddayPeriodcqPerioddamPerioddamWebdavSupport, std::string comPerioddayPeriodcqPeriodpreUpgradeTasks, std::string comPerioddayPeriodcqPeriodreplicationPeriodextensions, std::string comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore, std::string comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation, std::string dayCommonsJrawio, std::string orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard, std::string orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter, std::string orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump, std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds, std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent, std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage, std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin, std::string orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap, std::string orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar, std::string orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi, std::string orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole, std::string orgPeriodapachePeriodslingPerioddatasource, std::string orgPeriodapachePeriodslingPerioddiscoveryPeriodbase, std::string orgPeriodapachePeriodslingPerioddiscoveryPeriodoak, std::string orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport, std::string orgPeriodapachePeriodslingPerioddistributionPeriodapi, std::string orgPeriodapachePeriodslingPerioddistributionPeriodcore, std::string orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider, std::string orgPeriodapachePeriodslingPeriodhcPeriodwebconsole, std::string orgPeriodapachePeriodslingPeriodinstallerPeriodconsole, std::string orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile, std::string orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr, std::string orgPeriodapachePeriodslingPeriodjcrPerioddavex, std::string orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity, std::string orgPeriodapachePeriodslingPeriodjmxPeriodprovider, std::string orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller, std::string orgPeriodapachePeriodslingPeriodmodelsPeriodimpl, std::string orgPeriodapachePeriodslingPeriodrepoinitPeriodparser, std::string orgPeriodapachePeriodslingPeriodresourcePeriodinventory, std::string orgPeriodapachePeriodslingPeriodresourceresolver, std::string orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript, std::string orgPeriodapachePeriodslingPeriodscriptingPeriodjst, std::string orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider, std::string orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider, std::string orgPeriodapachePeriodslingPeriodsecurity, std::string orgPeriodapachePeriodslingPeriodservletsPeriodcompat, std::string orgPeriodapachePeriodslingPeriodservletsPeriodget, std::string orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler, std::string orgPeriodapachePeriodslingPeriodtracer, std::string wePeriodretailPeriodclientPeriodappPeriodcore, 
	void(* handler)(ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter 
 * \param comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents 
 * \param comPeriodadobePeriodcqPeriodcloudConfigPeriodcore 
 * \param comPeriodadobePeriodcqPeriodcloudConfigPeriodui 
 * \param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor 
 * \param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore 
 * \param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore 
 * \param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons 
 * \param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle 
 * \param comPeriodadobePeriodcqPeriodcqActivitymapIntegration 
 * \param comPeriodadobePeriodcqPeriodcqContexthubCommons 
 * \param comPeriodadobePeriodcqPeriodcqDtm 
 * \param comPeriodadobePeriodcqPeriodcqHealthcheck 
 * \param comPeriodadobePeriodcqPeriodcqMultisiteTargeting 
 * \param comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup 
 * \param comPeriodadobePeriodcqPeriodcqProductInfoProvider 
 * \param comPeriodadobePeriodcqPeriodcqRestSites 
 * \param comPeriodadobePeriodcqPeriodcqSecurityHc 
 * \param comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler 
 * \param comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging 
 * \param comPeriodadobePeriodcqPerioddtmReactorPeriodcore 
 * \param comPeriodadobePeriodcqPerioddtmReactorPeriodui 
 * \param comPeriodadobePeriodcqPeriodexpJspelResolver 
 * \param comPeriodadobePeriodcqPeriodinboxPeriodcqInbox 
 * \param comPeriodadobePeriodcqPeriodjsonSchemaParser 
 * \param comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore 
 * \param comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas 
 * \param comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder 
 * \param comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild 
 * \param comPeriodadobePeriodcqPeriodmyspell 
 * \param comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc 
 * \param comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl 
 * \param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl 
 * \param comPeriodadobePerioddamPeriodcqDamCfmImpl 
 * \param comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase 
 * \param comPeriodadobePeriodgranitePeriodapicontroller 
 * \param comPeriodadobePeriodgranitePeriodassetPeriodcore 
 * \param comPeriodadobePeriodgranitePeriodauthPeriodsso 
 * \param comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl 
 * \param comPeriodadobePeriodgranitePeriodcompatRouter 
 * \param comPeriodadobePeriodgranitePeriodconf 
 * \param comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore 
 * \param comPeriodadobePeriodgranitePeriodcors 
 * \param comPeriodadobePeriodgranitePeriodcrxExplorer 
 * \param comPeriodadobePeriodgranitePeriodcrxdeLite 
 * \param comPeriodadobePeriodgranitePeriodcryptoPeriodconfig 
 * \param comPeriodadobePeriodgranitePeriodcryptoPeriodextension 
 * \param comPeriodadobePeriodgranitePeriodcryptoPeriodfile 
 * \param comPeriodadobePeriodgranitePeriodcryptoPeriodjcr 
 * \param comPeriodadobePeriodgranitePeriodcsrf 
 * \param comPeriodadobePeriodgranitePerioddistributionPeriodcore 
 * \param comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics 
 * \param comPeriodadobePeriodgranitePeriodfragsPeriodimpl 
 * \param comPeriodadobePeriodgranitePeriodgibson 
 * \param comPeriodadobePeriodgranitePeriodinfocollector 
 * \param comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodssl 
 * \param comPeriodadobePeriodgranitePeriodjobsPeriodasync 
 * \param comPeriodadobePeriodgranitePeriodmaintenancePeriodoak 
 * \param comPeriodadobePeriodgranitePeriodmonitoringPeriodcore 
 * \param comPeriodadobePeriodgranitePeriodqueries 
 * \param comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl 
 * \param comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker 
 * \param comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl 
 * \param comPeriodadobePeriodgranitePeriodrestPeriodassets 
 * \param comPeriodadobePeriodgranitePeriodsecurityPeriodui 
 * \param comPeriodadobePeriodgranitePeriodstartup 
 * \param comPeriodadobePeriodgranitePeriodtagsoup 
 * \param comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore 
 * \param comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow 
 * \param comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless 
 * \param comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc 
 * \param comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins 
 * \param comPeriodadobePeriodgranitePeriodworkflowPeriodconsole 
 * \param comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux 
 * \param comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx 
 * \param comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin 
 * \param comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi 
 * \param comPerioddayPeriodcqPeriodcqAuthhandler 
 * \param comPerioddayPeriodcqPeriodcqCompatConfigupdate 
 * \param comPerioddayPeriodcqPeriodcqLicensebranding 
 * \param comPerioddayPeriodcqPeriodcqNotifcationImpl 
 * \param comPerioddayPeriodcqPeriodcqReplicationAudit 
 * \param comPerioddayPeriodcqPeriodcqSearchExt 
 * \param comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint 
 * \param comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage 
 * \param comPerioddayPeriodcqPerioddamPeriodcqDamS7dam 
 * \param comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch 
 * \param comPerioddayPeriodcqPerioddamPerioddamWebdavSupport 
 * \param comPerioddayPeriodcqPeriodpreUpgradeTasks 
 * \param comPerioddayPeriodcqPeriodreplicationPeriodextensions 
 * \param comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore 
 * \param comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation 
 * \param dayCommonsJrawio 
 * \param orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter 
 * \param orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump 
 * \param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds 
 * \param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent 
 * \param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage 
 * \param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin 
 * \param orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap 
 * \param orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar 
 * \param orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi 
 * \param orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole 
 * \param orgPeriodapachePeriodslingPerioddatasource 
 * \param orgPeriodapachePeriodslingPerioddiscoveryPeriodbase 
 * \param orgPeriodapachePeriodslingPerioddiscoveryPeriodoak 
 * \param orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport 
 * \param orgPeriodapachePeriodslingPerioddistributionPeriodapi 
 * \param orgPeriodapachePeriodslingPerioddistributionPeriodcore 
 * \param orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider 
 * \param orgPeriodapachePeriodslingPeriodhcPeriodwebconsole 
 * \param orgPeriodapachePeriodslingPeriodinstallerPeriodconsole 
 * \param orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile 
 * \param orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr 
 * \param orgPeriodapachePeriodslingPeriodjcrPerioddavex 
 * \param orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity 
 * \param orgPeriodapachePeriodslingPeriodjmxPeriodprovider 
 * \param orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller 
 * \param orgPeriodapachePeriodslingPeriodmodelsPeriodimpl 
 * \param orgPeriodapachePeriodslingPeriodrepoinitPeriodparser 
 * \param orgPeriodapachePeriodslingPeriodresourcePeriodinventory 
 * \param orgPeriodapachePeriodslingPeriodresourceresolver 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodjst 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider 
 * \param orgPeriodapachePeriodslingPeriodsecurity 
 * \param orgPeriodapachePeriodslingPeriodservletsPeriodcompat 
 * \param orgPeriodapachePeriodslingPeriodservletsPeriodget 
 * \param orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler 
 * \param orgPeriodapachePeriodslingPeriodtracer 
 * \param wePeriodretailPeriodclientPeriodappPeriodcore 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteApicontrollerFilterResolverHookFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter, std::string comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents, std::string comPeriodadobePeriodcqPeriodcloudConfigPeriodcore, std::string comPeriodadobePeriodcqPeriodcloudConfigPeriodui, std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor, std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore, std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore, std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons, std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle, std::string comPeriodadobePeriodcqPeriodcqActivitymapIntegration, std::string comPeriodadobePeriodcqPeriodcqContexthubCommons, std::string comPeriodadobePeriodcqPeriodcqDtm, std::string comPeriodadobePeriodcqPeriodcqHealthcheck, std::string comPeriodadobePeriodcqPeriodcqMultisiteTargeting, std::string comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup, std::string comPeriodadobePeriodcqPeriodcqProductInfoProvider, std::string comPeriodadobePeriodcqPeriodcqRestSites, std::string comPeriodadobePeriodcqPeriodcqSecurityHc, std::string comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler, std::string comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging, std::string comPeriodadobePeriodcqPerioddtmReactorPeriodcore, std::string comPeriodadobePeriodcqPerioddtmReactorPeriodui, std::string comPeriodadobePeriodcqPeriodexpJspelResolver, std::string comPeriodadobePeriodcqPeriodinboxPeriodcqInbox, std::string comPeriodadobePeriodcqPeriodjsonSchemaParser, std::string comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore, std::string comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas, std::string comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder, std::string comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild, std::string comPeriodadobePeriodcqPeriodmyspell, std::string comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore, std::string comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc, std::string comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl, std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl, std::string comPeriodadobePerioddamPeriodcqDamCfmImpl, std::string comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase, std::string comPeriodadobePeriodgranitePeriodapicontroller, std::string comPeriodadobePeriodgranitePeriodassetPeriodcore, std::string comPeriodadobePeriodgranitePeriodauthPeriodsso, std::string comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl, std::string comPeriodadobePeriodgranitePeriodcompatRouter, std::string comPeriodadobePeriodgranitePeriodconf, std::string comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore, std::string comPeriodadobePeriodgranitePeriodcors, std::string comPeriodadobePeriodgranitePeriodcrxExplorer, std::string comPeriodadobePeriodgranitePeriodcrxdeLite, std::string comPeriodadobePeriodgranitePeriodcryptoPeriodconfig, std::string comPeriodadobePeriodgranitePeriodcryptoPeriodextension, std::string comPeriodadobePeriodgranitePeriodcryptoPeriodfile, std::string comPeriodadobePeriodgranitePeriodcryptoPeriodjcr, std::string comPeriodadobePeriodgranitePeriodcsrf, std::string comPeriodadobePeriodgranitePerioddistributionPeriodcore, std::string comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics, std::string comPeriodadobePeriodgranitePeriodfragsPeriodimpl, std::string comPeriodadobePeriodgranitePeriodgibson, std::string comPeriodadobePeriodgranitePeriodinfocollector, std::string comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages, std::string comPeriodadobePeriodgranitePeriodjettyPeriodssl, std::string comPeriodadobePeriodgranitePeriodjobsPeriodasync, std::string comPeriodadobePeriodgranitePeriodmaintenancePeriodoak, std::string comPeriodadobePeriodgranitePeriodmonitoringPeriodcore, std::string comPeriodadobePeriodgranitePeriodqueries, std::string comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl, std::string comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker, std::string comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl, std::string comPeriodadobePeriodgranitePeriodrestPeriodassets, std::string comPeriodadobePeriodgranitePeriodsecurityPeriodui, std::string comPeriodadobePeriodgranitePeriodstartup, std::string comPeriodadobePeriodgranitePeriodtagsoup, std::string comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore, std::string comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow, std::string comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless, std::string comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc, std::string comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins, std::string comPeriodadobePeriodgranitePeriodworkflowPeriodconsole, std::string comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux, std::string comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx, std::string comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin, std::string comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi, std::string comPerioddayPeriodcqPeriodcqAuthhandler, std::string comPerioddayPeriodcqPeriodcqCompatConfigupdate, std::string comPerioddayPeriodcqPeriodcqLicensebranding, std::string comPerioddayPeriodcqPeriodcqNotifcationImpl, std::string comPerioddayPeriodcqPeriodcqReplicationAudit, std::string comPerioddayPeriodcqPeriodcqSearchExt, std::string comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint, std::string comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage, std::string comPerioddayPeriodcqPerioddamPeriodcqDamS7dam, std::string comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch, std::string comPerioddayPeriodcqPerioddamPerioddamWebdavSupport, std::string comPerioddayPeriodcqPeriodpreUpgradeTasks, std::string comPerioddayPeriodcqPeriodreplicationPeriodextensions, std::string comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore, std::string comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation, std::string dayCommonsJrawio, std::string orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard, std::string orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter, std::string orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump, std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds, std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent, std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage, std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin, std::string orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap, std::string orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar, std::string orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi, std::string orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole, std::string orgPeriodapachePeriodslingPerioddatasource, std::string orgPeriodapachePeriodslingPerioddiscoveryPeriodbase, std::string orgPeriodapachePeriodslingPerioddiscoveryPeriodoak, std::string orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport, std::string orgPeriodapachePeriodslingPerioddistributionPeriodapi, std::string orgPeriodapachePeriodslingPerioddistributionPeriodcore, std::string orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider, std::string orgPeriodapachePeriodslingPeriodhcPeriodwebconsole, std::string orgPeriodapachePeriodslingPeriodinstallerPeriodconsole, std::string orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile, std::string orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr, std::string orgPeriodapachePeriodslingPeriodjcrPerioddavex, std::string orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity, std::string orgPeriodapachePeriodslingPeriodjmxPeriodprovider, std::string orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller, std::string orgPeriodapachePeriodslingPeriodmodelsPeriodimpl, std::string orgPeriodapachePeriodslingPeriodrepoinitPeriodparser, std::string orgPeriodapachePeriodslingPeriodresourcePeriodinventory, std::string orgPeriodapachePeriodslingPeriodresourceresolver, std::string orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript, std::string orgPeriodapachePeriodslingPeriodscriptingPeriodjst, std::string orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider, std::string orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider, std::string orgPeriodapachePeriodslingPeriodsecurity, std::string orgPeriodapachePeriodslingPeriodservletsPeriodcompat, std::string orgPeriodapachePeriodslingPeriodservletsPeriodget, std::string orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler, std::string orgPeriodapachePeriodslingPeriodtracer, std::string wePeriodretailPeriodclientPeriodappPeriodcore, 
	void(* handler)(ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthCertImplClientCertAuthHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, int servicePeriodranking, 
	void(* handler)(ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthCertImplClientCertAuthHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, int servicePeriodranking, 
	void(* handler)(ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param configid 
 * \param scope 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string configid, std::string scope, 
	void(* handler)(ComAdobeGraniteAuthImsInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param configid 
 * \param scope 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string configid, std::string scope, 
	void(* handler)(ComAdobeGraniteAuthImsInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, 
	void(* handler)(ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, 
	void(* handler)(ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param authPeriodimsPeriodclientPeriodsecret 
 * \param customizerPeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string authPeriodimsPeriodclientPeriodsecret, std::string customizerPeriodtype, 
	void(* handler)(ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param authPeriodimsPeriodclientPeriodsecret 
 * \param customizerPeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string authPeriodimsPeriodclientPeriodsecret, std::string customizerPeriodtype, 
	void(* handler)(ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, 
	void(* handler)(ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, 
	void(* handler)(ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl 
 * \param oauthPeriodproviderPeriodimsPeriodtokenPeriodurl 
 * \param oauthPeriodproviderPeriodimsPeriodprofilePeriodurl 
 * \param oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls 
 * \param oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl 
 * \param oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty 
 * \param oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid 
 * \param oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret 
 * \param oauthPeriodproviderPeriodimsPeriodservicePeriodtoken 
 * \param imsPeriodorgPeriodref 
 * \param imsPeriodgroupPeriodmapping 
 * \param oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsImplIMSProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, std::string oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl, std::string oauthPeriodproviderPeriodimsPeriodtokenPeriodurl, std::string oauthPeriodproviderPeriodimsPeriodprofilePeriodurl, std::list<std::string> oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls, std::string oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl, std::string oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty, std::string oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid, std::string oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret, std::string oauthPeriodproviderPeriodimsPeriodservicePeriodtoken, std::string imsPeriodorgPeriodref, std::list<std::string> imsPeriodgroupPeriodmapping, bool oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup, 
	void(* handler)(ComAdobeGraniteAuthImsImplIMSProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl 
 * \param oauthPeriodproviderPeriodimsPeriodtokenPeriodurl 
 * \param oauthPeriodproviderPeriodimsPeriodprofilePeriodurl 
 * \param oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls 
 * \param oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl 
 * \param oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty 
 * \param oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid 
 * \param oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret 
 * \param oauthPeriodproviderPeriodimsPeriodservicePeriodtoken 
 * \param imsPeriodorgPeriodref 
 * \param imsPeriodgroupPeriodmapping 
 * \param oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsImplIMSProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, std::string oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl, std::string oauthPeriodproviderPeriodimsPeriodtokenPeriodurl, std::string oauthPeriodproviderPeriodimsPeriodprofilePeriodurl, std::list<std::string> oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls, std::string oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl, std::string oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty, std::string oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid, std::string oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret, std::string oauthPeriodproviderPeriodimsPeriodservicePeriodtoken, std::string imsPeriodorgPeriodref, std::list<std::string> imsPeriodgroupPeriodmapping, bool oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup, 
	void(* handler)(ComAdobeGraniteAuthImsImplIMSProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodconfigmanagerPeriodimsPeriodconfigid 
 * \param imsPeriodowningEntity 
 * \param aemPeriodinstanceId 
 * \param imsPeriodserviceCode 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsImplImsConfigProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodconfigmanagerPeriodimsPeriodconfigid, std::string imsPeriodowningEntity, std::string aemPeriodinstanceId, std::string imsPeriodserviceCode, 
	void(* handler)(ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodconfigmanagerPeriodimsPeriodconfigid 
 * \param imsPeriodowningEntity 
 * \param aemPeriodinstanceId 
 * \param imsPeriodserviceCode 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthImsImplImsConfigProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodconfigmanagerPeriodimsPeriodconfigid, std::string imsPeriodowningEntity, std::string aemPeriodinstanceId, std::string imsPeriodserviceCode, 
	void(* handler)(ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param authPeriodtokenPeriodproviderPeriodtitle 
 * \param authPeriodtokenPeriodproviderPerioddefaultPeriodclaims 
 * \param authPeriodtokenPeriodproviderPeriodendpoint 
 * \param authPeriodaccessPeriodtokenPeriodrequest 
 * \param authPeriodtokenPeriodproviderPeriodkeypairPeriodalias 
 * \param authPeriodtokenPeriodproviderPeriodconnPeriodtimeout 
 * \param authPeriodtokenPeriodproviderPeriodsoPeriodtimeout 
 * \param authPeriodtokenPeriodproviderPeriodclientPeriodid 
 * \param authPeriodtokenPeriodproviderPeriodscope 
 * \param authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken 
 * \param authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl 
 * \param tokenPeriodrequestPeriodcustomizerPeriodtype 
 * \param authPeriodtokenPeriodvalidatorPeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthAccesstokenProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string authPeriodtokenPeriodproviderPeriodtitle, std::list<std::string> authPeriodtokenPeriodproviderPerioddefaultPeriodclaims, std::string authPeriodtokenPeriodproviderPeriodendpoint, std::string authPeriodaccessPeriodtokenPeriodrequest, std::string authPeriodtokenPeriodproviderPeriodkeypairPeriodalias, int authPeriodtokenPeriodproviderPeriodconnPeriodtimeout, int authPeriodtokenPeriodproviderPeriodsoPeriodtimeout, std::string authPeriodtokenPeriodproviderPeriodclientPeriodid, std::string authPeriodtokenPeriodproviderPeriodscope, bool authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken, bool authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl, std::string tokenPeriodrequestPeriodcustomizerPeriodtype, std::string authPeriodtokenPeriodvalidatorPeriodtype, 
	void(* handler)(ComAdobeGraniteAuthOauthAccesstokenProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param authPeriodtokenPeriodproviderPeriodtitle 
 * \param authPeriodtokenPeriodproviderPerioddefaultPeriodclaims 
 * \param authPeriodtokenPeriodproviderPeriodendpoint 
 * \param authPeriodaccessPeriodtokenPeriodrequest 
 * \param authPeriodtokenPeriodproviderPeriodkeypairPeriodalias 
 * \param authPeriodtokenPeriodproviderPeriodconnPeriodtimeout 
 * \param authPeriodtokenPeriodproviderPeriodsoPeriodtimeout 
 * \param authPeriodtokenPeriodproviderPeriodclientPeriodid 
 * \param authPeriodtokenPeriodproviderPeriodscope 
 * \param authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken 
 * \param authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl 
 * \param tokenPeriodrequestPeriodcustomizerPeriodtype 
 * \param authPeriodtokenPeriodvalidatorPeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthAccesstokenProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string authPeriodtokenPeriodproviderPeriodtitle, std::list<std::string> authPeriodtokenPeriodproviderPerioddefaultPeriodclaims, std::string authPeriodtokenPeriodproviderPeriodendpoint, std::string authPeriodaccessPeriodtokenPeriodrequest, std::string authPeriodtokenPeriodproviderPeriodkeypairPeriodalias, int authPeriodtokenPeriodproviderPeriodconnPeriodtimeout, int authPeriodtokenPeriodproviderPeriodsoPeriodtimeout, std::string authPeriodtokenPeriodproviderPeriodclientPeriodid, std::string authPeriodtokenPeriodproviderPeriodscope, bool authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken, bool authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl, std::string tokenPeriodrequestPeriodcustomizerPeriodtype, std::string authPeriodtokenPeriodvalidatorPeriodtype, 
	void(* handler)(ComAdobeGraniteAuthOauthAccesstokenProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param oauthPeriodclientIdsPeriodallowed 
 * \param authPeriodbearerPeriodsyncPeriodims 
 * \param authPeriodtokenRequestParameter 
 * \param oauthPeriodbearerPeriodconfigid 
 * \param oauthPeriodjwtPeriodsupport 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, std::list<std::string> oauthPeriodclientIdsPeriodallowed, bool authPeriodbearerPeriodsyncPeriodims, std::string authPeriodtokenRequestParameter, std::string oauthPeriodbearerPeriodconfigid, bool oauthPeriodjwtPeriodsupport, 
	void(* handler)(ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param oauthPeriodclientIdsPeriodallowed 
 * \param authPeriodbearerPeriodsyncPeriodims 
 * \param authPeriodtokenRequestParameter 
 * \param oauthPeriodbearerPeriodconfigid 
 * \param oauthPeriodjwtPeriodsupport 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, std::list<std::string> oauthPeriodclientIdsPeriodallowed, bool authPeriodbearerPeriodsyncPeriodims, std::string authPeriodtokenRequestParameter, std::string oauthPeriodbearerPeriodconfigid, bool oauthPeriodjwtPeriodsupport, 
	void(* handler)(ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param authPeriodtokenPeriodvalidatorPeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string authPeriodtokenPeriodvalidatorPeriodtype, 
	void(* handler)(ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param authPeriodtokenPeriodvalidatorPeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string authPeriodtokenPeriodvalidatorPeriodtype, 
	void(* handler)(ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplFacebookProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, 
	void(* handler)(ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplFacebookProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, 
	void(* handler)(ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl 
 * \param oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl 
 * \param oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplGithubProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, std::string oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl, std::string oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl, std::string oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl, 
	void(* handler)(ComAdobeGraniteAuthOauthImplGithubProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl 
 * \param oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl 
 * \param oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplGithubProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, std::string oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl, std::string oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl, std::string oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl, 
	void(* handler)(ComAdobeGraniteAuthOauthImplGithubProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl 
 * \param oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl 
 * \param oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl 
 * \param oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplGraniteProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, std::string oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl, std::string oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl, std::string oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl, std::string oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls, 
	void(* handler)(ComAdobeGraniteAuthOauthImplGraniteProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl 
 * \param oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl 
 * \param oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl 
 * \param oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplGraniteProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, std::string oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl, std::string oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl, std::string oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl, std::string oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls, 
	void(* handler)(ComAdobeGraniteAuthOauthImplGraniteProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodcookiePeriodloginPeriodtimeout 
 * \param oauthPeriodcookiePeriodmaxPeriodage 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplHelperProviderConfigManagerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodcookiePeriodloginPeriodtimeout, std::string oauthPeriodcookiePeriodmaxPeriodage, 
	void(* handler)(ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodcookiePeriodloginPeriodtimeout 
 * \param oauthPeriodcookiePeriodmaxPeriodage 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplHelperProviderConfigManagerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodcookiePeriodloginPeriodtimeout, std::string oauthPeriodcookiePeriodmaxPeriodage, 
	void(* handler)(ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodcookiePeriodloginPeriodtimeout 
 * \param oauthPeriodcookiePeriodmaxPeriodage 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodcookiePeriodloginPeriodtimeout, std::string oauthPeriodcookiePeriodmaxPeriodage, 
	void(* handler)(ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodcookiePeriodloginPeriodtimeout 
 * \param oauthPeriodcookiePeriodmaxPeriodage 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodcookiePeriodloginPeriodtimeout, std::string oauthPeriodcookiePeriodmaxPeriodage, 
	void(* handler)(ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, 
	void(* handler)(ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, 
	void(* handler)(ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplTwitterProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, 
	void(* handler)(ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodproviderPeriodid 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthImplTwitterProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodproviderPeriodid, 
	void(* handler)(ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodconfigPeriodid 
 * \param oauthPeriodclientPeriodid 
 * \param oauthPeriodclientPeriodsecret 
 * \param oauthPeriodscope 
 * \param oauthPeriodconfigPeriodproviderPeriodid 
 * \param oauthPeriodcreatePeriodusers 
 * \param oauthPerioduseridPeriodproperty 
 * \param forcePeriodstrictPeriodusernamePeriodmatching 
 * \param oauthPeriodencodePerioduserids 
 * \param oauthPeriodhashPerioduserids 
 * \param oauthPeriodcallBackUrl 
 * \param oauthPeriodaccessPeriodtokenPeriodpersist 
 * \param oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie 
 * \param oauthPeriodcsrfPeriodstatePeriodprotection 
 * \param oauthPeriodredirectPeriodrequestPeriodparams 
 * \param oauthPeriodconfigPeriodsiblingsPeriodallow 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodconfigPeriodid, std::string oauthPeriodclientPeriodid, std::string oauthPeriodclientPeriodsecret, std::list<std::string> oauthPeriodscope, std::string oauthPeriodconfigPeriodproviderPeriodid, bool oauthPeriodcreatePeriodusers, std::string oauthPerioduseridPeriodproperty, bool forcePeriodstrictPeriodusernamePeriodmatching, bool oauthPeriodencodePerioduserids, bool oauthPeriodhashPerioduserids, std::string oauthPeriodcallBackUrl, bool oauthPeriodaccessPeriodtokenPeriodpersist, bool oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie, bool oauthPeriodcsrfPeriodstatePeriodprotection, bool oauthPeriodredirectPeriodrequestPeriodparams, bool oauthPeriodconfigPeriodsiblingsPeriodallow, 
	void(* handler)(ComAdobeGraniteAuthOauthProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodconfigPeriodid 
 * \param oauthPeriodclientPeriodid 
 * \param oauthPeriodclientPeriodsecret 
 * \param oauthPeriodscope 
 * \param oauthPeriodconfigPeriodproviderPeriodid 
 * \param oauthPeriodcreatePeriodusers 
 * \param oauthPerioduseridPeriodproperty 
 * \param forcePeriodstrictPeriodusernamePeriodmatching 
 * \param oauthPeriodencodePerioduserids 
 * \param oauthPeriodhashPerioduserids 
 * \param oauthPeriodcallBackUrl 
 * \param oauthPeriodaccessPeriodtokenPeriodpersist 
 * \param oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie 
 * \param oauthPeriodcsrfPeriodstatePeriodprotection 
 * \param oauthPeriodredirectPeriodrequestPeriodparams 
 * \param oauthPeriodconfigPeriodsiblingsPeriodallow 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthOauthProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodconfigPeriodid, std::string oauthPeriodclientPeriodid, std::string oauthPeriodclientPeriodsecret, std::list<std::string> oauthPeriodscope, std::string oauthPeriodconfigPeriodproviderPeriodid, bool oauthPeriodcreatePeriodusers, std::string oauthPerioduseridPeriodproperty, bool forcePeriodstrictPeriodusernamePeriodmatching, bool oauthPeriodencodePerioduserids, bool oauthPeriodhashPerioduserids, std::string oauthPeriodcallBackUrl, bool oauthPeriodaccessPeriodtokenPeriodpersist, bool oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie, bool oauthPeriodcsrfPeriodstatePeriodprotection, bool oauthPeriodredirectPeriodrequestPeriodparams, bool oauthPeriodconfigPeriodsiblingsPeriodallow, 
	void(* handler)(ComAdobeGraniteAuthOauthProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param supportedPaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> supportedPaths, 
	void(* handler)(ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param supportedPaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> supportedPaths, 
	void(* handler)(ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param servicePeriodranking 
 * \param idpUrl 
 * \param idpCertAlias 
 * \param idpHttpRedirect 
 * \param serviceProviderEntityId 
 * \param assertionConsumerServiceURL 
 * \param spPrivateKeyAlias 
 * \param keyStorePassword 
 * \param defaultRedirectUrl 
 * \param userIDAttribute 
 * \param useEncryption 
 * \param createUser 
 * \param userIntermediatePath 
 * \param addGroupMemberships 
 * \param groupMembershipAttribute 
 * \param defaultGroups 
 * \param nameIdFormat 
 * \param synchronizeAttributes 
 * \param handleLogout 
 * \param logoutUrl 
 * \param clockTolerance 
 * \param digestMethod 
 * \param signatureMethod 
 * \param identitySyncType 
 * \param idpIdentifier 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthSamlSamlAuthenticationHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> path, int servicePeriodranking, std::string idpUrl, std::string idpCertAlias, bool idpHttpRedirect, std::string serviceProviderEntityId, std::string assertionConsumerServiceURL, std::string spPrivateKeyAlias, std::string keyStorePassword, std::string defaultRedirectUrl, std::string userIDAttribute, bool useEncryption, bool createUser, std::string userIntermediatePath, bool addGroupMemberships, std::string groupMembershipAttribute, std::list<std::string> defaultGroups, std::string nameIdFormat, std::list<std::string> synchronizeAttributes, bool handleLogout, std::string logoutUrl, int clockTolerance, std::string digestMethod, std::string signatureMethod, std::string identitySyncType, std::string idpIdentifier, 
	void(* handler)(ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param servicePeriodranking 
 * \param idpUrl 
 * \param idpCertAlias 
 * \param idpHttpRedirect 
 * \param serviceProviderEntityId 
 * \param assertionConsumerServiceURL 
 * \param spPrivateKeyAlias 
 * \param keyStorePassword 
 * \param defaultRedirectUrl 
 * \param userIDAttribute 
 * \param useEncryption 
 * \param createUser 
 * \param userIntermediatePath 
 * \param addGroupMemberships 
 * \param groupMembershipAttribute 
 * \param defaultGroups 
 * \param nameIdFormat 
 * \param synchronizeAttributes 
 * \param handleLogout 
 * \param logoutUrl 
 * \param clockTolerance 
 * \param digestMethod 
 * \param signatureMethod 
 * \param identitySyncType 
 * \param idpIdentifier 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthSamlSamlAuthenticationHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> path, int servicePeriodranking, std::string idpUrl, std::string idpCertAlias, bool idpHttpRedirect, std::string serviceProviderEntityId, std::string assertionConsumerServiceURL, std::string spPrivateKeyAlias, std::string keyStorePassword, std::string defaultRedirectUrl, std::string userIDAttribute, bool useEncryption, bool createUser, std::string userIntermediatePath, bool addGroupMemberships, std::string groupMembershipAttribute, std::list<std::string> defaultGroups, std::string nameIdFormat, std::list<std::string> synchronizeAttributes, bool handleLogout, std::string logoutUrl, int clockTolerance, std::string digestMethod, std::string signatureMethod, std::string identitySyncType, std::string idpIdentifier, 
	void(* handler)(ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param servicePeriodranking 
 * \param jaasPeriodcontrolFlag 
 * \param jaasPeriodrealmName 
 * \param jaasPeriodranking 
 * \param headers 
 * \param cookies 
 * \param parameters 
 * \param usermap 
 * \param format 
 * \param trustedCredentialsAttribute 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, int servicePeriodranking, std::string jaasPeriodcontrolFlag, std::string jaasPeriodrealmName, int jaasPeriodranking, std::list<std::string> headers, std::list<std::string> cookies, std::list<std::string> parameters, std::list<std::string> usermap, std::string format, std::string trustedCredentialsAttribute, 
	void(* handler)(ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param servicePeriodranking 
 * \param jaasPeriodcontrolFlag 
 * \param jaasPeriodrealmName 
 * \param jaasPeriodranking 
 * \param headers 
 * \param cookies 
 * \param parameters 
 * \param usermap 
 * \param format 
 * \param trustedCredentialsAttribute 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, int servicePeriodranking, std::string jaasPeriodcontrolFlag, std::string jaasPeriodrealmName, int jaasPeriodranking, std::list<std::string> headers, std::list<std::string> cookies, std::list<std::string> parameters, std::list<std::string> usermap, std::string format, std::string trustedCredentialsAttribute, 
	void(* handler)(ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param minimumPeriodcodePeriodcachePeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplCodeCacheHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, int minimumPeriodcodePeriodcachePeriodsize, 
	void(* handler)(ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param minimumPeriodcodePeriodcachePeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplCodeCacheHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, int minimumPeriodcodePeriodcachePeriodsize, 
	void(* handler)(ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplDavExBundleHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplDavExBundleHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param ignoredPeriodbundles 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, std::list<std::string> ignoredPeriodbundles, 
	void(* handler)(ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param ignoredPeriodbundles 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, std::list<std::string> ignoredPeriodbundles, 
	void(* handler)(ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param maxPeriodqueuedPeriodjobs 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplJobsHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, int maxPeriodqueuedPeriodjobs, 
	void(* handler)(ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param maxPeriodqueuedPeriodjobs 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplJobsHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, int maxPeriodqueuedPeriodjobs, 
	void(* handler)(ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param replicatePeriodcommentPeriodresourceTypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> replicatePeriodcommentPeriodresourceTypes, 
	void(* handler)(ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param replicatePeriodcommentPeriodresourceTypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> replicatePeriodcommentPeriodresourceTypes, 
	void(* handler)(ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param compatgroups 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> compatgroups, bool enabled, 
	void(* handler)(ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param compatgroups 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> compatgroups, bool enabled, 
	void(* handler)(ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param id 
 * \param compatPath 
 * \param newPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCompatrouterImplRoutingConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string id, std::string compatPath, std::string newPath, 
	void(* handler)(ComAdobeGraniteCompatrouterImplRoutingConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param id 
 * \param compatPath 
 * \param newPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCompatrouterImplRoutingConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string id, std::string compatPath, std::string newPath, 
	void(* handler)(ComAdobeGraniteCompatrouterImplRoutingConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param group 
 * \param ids 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCompatrouterImplSwitchMappingConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string group, std::list<std::string> ids, 
	void(* handler)(ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param group 
 * \param ids 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCompatrouterImplSwitchMappingConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string group, std::list<std::string> ids, 
	void(* handler)(ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param fallbackPaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::list<std::string> fallbackPaths, 
	void(* handler)(ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param fallbackPaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::list<std::string> fallbackPaths, 
	void(* handler)(ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode 
 * \param comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteContexthubImplContextHubImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode, bool comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi, 
	void(* handler)(ComAdobeGraniteContexthubImplContextHubImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode 
 * \param comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteContexthubImplContextHubImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode, bool comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi, 
	void(* handler)(ComAdobeGraniteContexthubImplContextHubImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param alloworigin 
 * \param alloworiginregexp 
 * \param allowedpaths 
 * \param exposedheaders 
 * \param maxage 
 * \param supportedheaders 
 * \param supportedmethods 
 * \param supportscredentials 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCorsImplCORSPolicyImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> alloworigin, std::list<std::string> alloworiginregexp, std::list<std::string> allowedpaths, std::list<std::string> exposedheaders, int maxage, std::list<std::string> supportedheaders, std::list<std::string> supportedmethods, bool supportscredentials, 
	void(* handler)(ComAdobeGraniteCorsImplCORSPolicyImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param alloworigin 
 * \param alloworiginregexp 
 * \param allowedpaths 
 * \param exposedheaders 
 * \param maxage 
 * \param supportedheaders 
 * \param supportedmethods 
 * \param supportscredentials 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCorsImplCORSPolicyImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> alloworigin, std::list<std::string> alloworiginregexp, std::list<std::string> allowedpaths, std::list<std::string> exposedheaders, int maxage, std::list<std::string> supportedheaders, std::list<std::string> supportedmethods, bool supportscredentials, 
	void(* handler)(ComAdobeGraniteCorsImplCORSPolicyImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param filterPeriodmethods 
 * \param filterPeriodenablePeriodsafePerioduserPeriodagents 
 * \param filterPeriodsafePerioduserPeriodagents 
 * \param filterPeriodexcludedPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCsrfImplCSRFFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> filterPeriodmethods, bool filterPeriodenablePeriodsafePerioduserPeriodagents, std::list<std::string> filterPeriodsafePerioduserPeriodagents, std::list<std::string> filterPeriodexcludedPeriodpaths, 
	void(* handler)(ComAdobeGraniteCsrfImplCSRFFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param filterPeriodmethods 
 * \param filterPeriodenablePeriodsafePerioduserPeriodagents 
 * \param filterPeriodsafePerioduserPeriodagents 
 * \param filterPeriodexcludedPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCsrfImplCSRFFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> filterPeriodmethods, bool filterPeriodenablePeriodsafePerioduserPeriodagents, std::list<std::string> filterPeriodsafePerioduserPeriodagents, std::list<std::string> filterPeriodexcludedPeriodpaths, 
	void(* handler)(ComAdobeGraniteCsrfImplCSRFFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param csrfPeriodtokenPeriodexpiresPeriodin 
 * \param slingPeriodauthPeriodrequirements 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCsrfImplCSRFServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int csrfPeriodtokenPeriodexpiresPeriodin, std::string slingPeriodauthPeriodrequirements, 
	void(* handler)(ComAdobeGraniteCsrfImplCSRFServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param csrfPeriodtokenPeriodexpiresPeriodin 
 * \param slingPeriodauthPeriodrequirements 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteCsrfImplCSRFServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int csrfPeriodtokenPeriodexpiresPeriodin, std::string slingPeriodauthPeriodrequirements, 
	void(* handler)(ComAdobeGraniteCsrfImplCSRFServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param username 
 * \param encryptedPassword 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string username, std::string encryptedPassword, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param username 
 * \param encryptedPassword 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string username, std::string encryptedPassword, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param agentName 
 * \param diffPath 
 * \param observedPath 
 * \param serviceName 
 * \param propertyNames 
 * \param distributionDelay 
 * \param serviceUserPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::string agentName, std::string diffPath, std::string observedPath, std::string serviceName, std::string propertyNames, int distributionDelay, std::string serviceUserPeriodtarget, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param agentName 
 * \param diffPath 
 * \param observedPath 
 * \param serviceName 
 * \param propertyNames 
 * \param distributionDelay 
 * \param serviceUserPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::string agentName, std::string diffPath, std::string observedPath, std::string serviceName, std::string propertyNames, int distributionDelay, std::string serviceUserPeriodtarget, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param diffPath 
 * \param serviceName 
 * \param serviceUserPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplDiffDiffEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string diffPath, std::string serviceName, std::string serviceUserPeriodtarget, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param diffPath 
 * \param serviceName 
 * \param serviceUserPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplDiffDiffEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string diffPath, std::string serviceName, std::string serviceUserPeriodtarget, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param importerPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> importerPeriodname, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param importerPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> importerPeriodname, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerName 
 * \param forwardPeriodrequests 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerName, bool forwardPeriodrequests, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerName 
 * \param forwardPeriodrequests 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerName, bool forwardPeriodrequests, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param forwardPeriodrequests 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplReplicationDistributionTransSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool forwardPeriodrequests, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param forwardPeriodrequests 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplReplicationDistributionTransAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool forwardPeriodrequests, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param serviceName 
 * \param userId 
 * \param accessTokenProviderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string serviceName, std::string userId, std::string accessTokenProviderPeriodtarget, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param serviceName 
 * \param userId 
 * \param accessTokenProviderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string serviceName, std::string userId, std::string accessTokenProviderPeriodtarget, 
	void(* handler)(ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param featurePeriodname 
 * \param featurePerioddescription 
 * \param httpPeriodheaderPeriodname 
 * \param httpPeriodheaderPeriodvaluepattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteFragsImplCheckHttpHeaderFlagSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string featurePeriodname, std::string featurePerioddescription, std::string httpPeriodheaderPeriodname, std::string httpPeriodheaderPeriodvaluepattern, 
	void(* handler)(ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param featurePeriodname 
 * \param featurePerioddescription 
 * \param httpPeriodheaderPeriodname 
 * \param httpPeriodheaderPeriodvaluepattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteFragsImplCheckHttpHeaderFlagAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string featurePeriodname, std::string featurePerioddescription, std::string httpPeriodheaderPeriodname, std::string httpPeriodheaderPeriodvaluepattern, 
	void(* handler)(ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param featurePeriodname 
 * \param featurePerioddescription 
 * \param activePeriodpercentage 
 * \param cookiePeriodname 
 * \param cookiePeriodmaxAge 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteFragsImplRandomFeatureSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string featurePeriodname, std::string featurePerioddescription, std::string activePeriodpercentage, std::string cookiePeriodname, int cookiePeriodmaxAge, 
	void(* handler)(ComAdobeGraniteFragsImplRandomFeatureInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param featurePeriodname 
 * \param featurePerioddescription 
 * \param activePeriodpercentage 
 * \param cookiePeriodname 
 * \param cookiePeriodmaxAge 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteFragsImplRandomFeatureAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string featurePeriodname, std::string featurePerioddescription, std::string activePeriodpercentage, std::string cookiePeriodname, int cookiePeriodmaxAge, 
	void(* handler)(ComAdobeGraniteFragsImplRandomFeatureInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot 
 * \param comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteHttpcacheFileFileCacheStoreSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot, std::string comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost, 
	void(* handler)(ComAdobeGraniteHttpcacheFileFileCacheStoreInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot 
 * \param comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteHttpcacheFileFileCacheStoreAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot, std::string comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost, 
	void(* handler)(ComAdobeGraniteHttpcacheFileFileCacheStoreInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteHttpcacheImplOuterCacheFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths, 
	void(* handler)(ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteHttpcacheImplOuterCacheFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths, 
	void(* handler)(ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pseudoPeriodpatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteI18nImplBundlePseudoTranslationsSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> pseudoPeriodpatterns, 
	void(* handler)(ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pseudoPeriodpatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteI18nImplBundlePseudoTranslationsAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> pseudoPeriodpatterns, 
	void(* handler)(ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param securityPeriodpreferencesPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteI18nImplPreferencesLocaleResolverServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string securityPeriodpreferencesPeriodname, 
	void(* handler)(ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param securityPeriodpreferencesPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteI18nImplPreferencesLocaleResolverServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string securityPeriodpreferencesPeriodname, 
	void(* handler)(ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param granitePeriodinfocollectorPeriodincludeThreadDumps 
 * \param granitePeriodinfocollectorPeriodincludeHeapDump 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteInfocollectorInfoCollectorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool granitePeriodinfocollectorPeriodincludeThreadDumps, bool granitePeriodinfocollectorPeriodincludeHeapDump, 
	void(* handler)(ComAdobeGraniteInfocollectorInfoCollectorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param granitePeriodinfocollectorPeriodincludeThreadDumps 
 * \param granitePeriodinfocollectorPeriodincludeHeapDump 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteInfocollectorInfoCollectorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool granitePeriodinfocollectorPeriodincludeThreadDumps, bool granitePeriodinfocollectorPeriodincludeHeapDump, 
	void(* handler)(ComAdobeGraniteInfocollectorInfoCollectorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteJettySslInternalGraniteSslConnectorFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport, std::string comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser, std::string comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword, std::list<std::string> comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded, std::list<std::string> comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded, std::string comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate, 
	void(* handler)(ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded 
 * \param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport, std::string comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser, std::string comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword, std::list<std::string> comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded, std::list<std::string> comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded, std::string comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate, 
	void(* handler)(ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param checkInternval 
 * \param excludeIds 
 * \param encryptPing 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteLicenseImplLicenseCheckFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int checkInternval, std::list<std::string> excludeIds, bool encryptPing, 
	void(* handler)(ComAdobeGraniteLicenseImplLicenseCheckFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param checkInternval 
 * \param excludeIds 
 * \param encryptPing 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteLicenseImplLicenseCheckFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int checkInternval, std::list<std::string> excludeIds, bool encryptPing, 
	void(* handler)(ComAdobeGraniteLicenseImplLicenseCheckFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param messagesPeriodqueuePeriodsize 
 * \param loggerPeriodconfig 
 * \param messagesPeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteLoggingImplLogAnalyserImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int messagesPeriodqueuePeriodsize, std::list<std::string> loggerPeriodconfig, int messagesPeriodsize, 
	void(* handler)(ComAdobeGraniteLoggingImplLogAnalyserImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param messagesPeriodqueuePeriodsize 
 * \param loggerPeriodconfig 
 * \param messagesPeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteLoggingImplLogAnalyserImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int messagesPeriodqueuePeriodsize, std::list<std::string> loggerPeriodconfig, int messagesPeriodsize, 
	void(* handler)(ComAdobeGraniteLoggingImplLogAnalyserImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteLoggingImplLogErrorHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteLoggingImplLogErrorHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param granitePeriodmaintenancePeriodmandatory 
 * \param jobPeriodtopics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool granitePeriodmaintenancePeriodmandatory, std::string jobPeriodtopics, 
	void(* handler)(ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param granitePeriodmaintenancePeriodmandatory 
 * \param jobPeriodtopics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool granitePeriodmaintenancePeriodmandatory, std::string jobPeriodtopics, 
	void(* handler)(ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jobPeriodtopics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jobPeriodtopics, 
	void(* handler)(ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jobPeriodtopics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jobPeriodtopics, 
	void(* handler)(ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fullPeriodgcPerioddays 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fullPeriodgcPerioddays, 
	void(* handler)(ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fullPeriodgcPerioddays 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fullPeriodgcPerioddays, 
	void(* handler)(ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param scriptPeriodfilename 
 * \param scriptPerioddisplay 
 * \param scriptPeriodpath 
 * \param scriptPeriodplatform 
 * \param interval 
 * \param jmxdomain 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteMonitoringImplScriptConfigImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string scriptPeriodfilename, std::string scriptPerioddisplay, std::string scriptPeriodpath, std::list<std::string> scriptPeriodplatform, int interval, std::string jmxdomain, 
	void(* handler)(ComAdobeGraniteMonitoringImplScriptConfigImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param scriptPeriodfilename 
 * \param scriptPerioddisplay 
 * \param scriptPeriodpath 
 * \param scriptPeriodplatform 
 * \param interval 
 * \param jmxdomain 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteMonitoringImplScriptConfigImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string scriptPeriodfilename, std::string scriptPerioddisplay, std::string scriptPeriodpath, std::list<std::string> scriptPeriodplatform, int interval, std::string jmxdomain, 
	void(* handler)(ComAdobeGraniteMonitoringImplScriptConfigImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param jaasPeriodcontrolFlag 
 * \param jaasPeriodrealmName 
 * \param jaasPeriodranking 
 * \param oauthPeriodofflinePeriodvalidation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, std::string jaasPeriodcontrolFlag, std::string jaasPeriodrealmName, int jaasPeriodranking, bool oauthPeriodofflinePeriodvalidation, 
	void(* handler)(ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param jaasPeriodcontrolFlag 
 * \param jaasPeriodrealmName 
 * \param jaasPeriodranking 
 * \param oauthPeriodofflinePeriodvalidation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, std::string jaasPeriodcontrolFlag, std::string jaasPeriodrealmName, int jaasPeriodranking, bool oauthPeriodofflinePeriodvalidation, 
	void(* handler)(ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerImplAccessTokenCleanupTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, 
	void(* handler)(ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerImplAccessTokenCleanupTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, 
	void(* handler)(ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodclientPeriodrevocationPeriodactive 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool oauthPeriodclientPeriodrevocationPeriodactive, 
	void(* handler)(ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodclientPeriodrevocationPeriodactive 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool oauthPeriodclientPeriodrevocationPeriodactive, 
	void(* handler)(ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodpaths 
 * \param oauthPeriodrevocationPeriodactive 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodpaths, bool oauthPeriodrevocationPeriodactive, 
	void(* handler)(ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodpaths 
 * \param oauthPeriodrevocationPeriodactive 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodpaths, bool oauthPeriodrevocationPeriodactive, 
	void(* handler)(ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodissuer 
 * \param oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodissuer, std::string oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin, std::string osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, 
	void(* handler)(ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodissuer 
 * \param oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string oauthPeriodissuer, std::string oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin, std::string osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, 
	void(* handler)(ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodtokenPeriodrevocationPeriodactive 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool oauthPeriodtokenPeriodrevocationPeriodactive, 
	void(* handler)(ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param oauthPeriodtokenPeriodrevocationPeriodactive 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool oauthPeriodtokenPeriodrevocationPeriodactive, 
	void(* handler)(ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param offloadingPeriodtransporter 
 * \param offloadingPeriodcleanupPeriodpayload 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOffloadingImplOffloadingConfiguratorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string offloadingPeriodtransporter, bool offloadingPeriodcleanupPeriodpayload, 
	void(* handler)(ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param offloadingPeriodtransporter 
 * \param offloadingPeriodcleanupPeriodpayload 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOffloadingImplOffloadingConfiguratorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string offloadingPeriodtransporter, bool offloadingPeriodcleanupPeriodpayload, 
	void(* handler)(ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param offloadingPeriodjobclonerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOffloadingImplOffloadingJobClonerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool offloadingPeriodjobclonerPeriodenabled, 
	void(* handler)(ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param offloadingPeriodjobclonerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOffloadingImplOffloadingJobClonerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool offloadingPeriodjobclonerPeriodenabled, 
	void(* handler)(ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param offloadingPeriodoffloaderPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOffloadingImplOffloadingJobOffloaderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool offloadingPeriodoffloaderPeriodenabled, 
	void(* handler)(ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param offloadingPeriodoffloaderPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOffloadingImplOffloadingJobOffloaderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool offloadingPeriodoffloaderPeriodenabled, 
	void(* handler)(ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param offloadingPeriodagentmanagerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool offloadingPeriodagentmanagerPeriodenabled, 
	void(* handler)(ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param offloadingPeriodagentmanagerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool offloadingPeriodagentmanagerPeriodenabled, 
	void(* handler)(ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodtransportPeriodagentToWorkerPeriodprefix 
 * \param defaultPeriodtransportPeriodagentToMasterPeriodprefix 
 * \param defaultPeriodtransportPeriodinputPeriodpackage 
 * \param defaultPeriodtransportPeriodoutputPeriodpackage 
 * \param defaultPeriodtransportPeriodreplicationPeriodsynchronous 
 * \param defaultPeriodtransportPeriodcontentpackage 
 * \param offloadingPeriodtransporterPerioddefaultPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string defaultPeriodtransportPeriodagentToWorkerPeriodprefix, std::string defaultPeriodtransportPeriodagentToMasterPeriodprefix, std::string defaultPeriodtransportPeriodinputPeriodpackage, std::string defaultPeriodtransportPeriodoutputPeriodpackage, bool defaultPeriodtransportPeriodreplicationPeriodsynchronous, bool defaultPeriodtransportPeriodcontentpackage, bool offloadingPeriodtransporterPerioddefaultPeriodenabled, 
	void(* handler)(ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodtransportPeriodagentToWorkerPeriodprefix 
 * \param defaultPeriodtransportPeriodagentToMasterPeriodprefix 
 * \param defaultPeriodtransportPeriodinputPeriodpackage 
 * \param defaultPeriodtransportPeriodoutputPeriodpackage 
 * \param defaultPeriodtransportPeriodreplicationPeriodsynchronous 
 * \param defaultPeriodtransportPeriodcontentpackage 
 * \param offloadingPeriodtransporterPerioddefaultPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string defaultPeriodtransportPeriodagentToWorkerPeriodprefix, std::string defaultPeriodtransportPeriodagentToMasterPeriodprefix, std::string defaultPeriodtransportPeriodinputPeriodpackage, std::string defaultPeriodtransportPeriodoutputPeriodpackage, bool defaultPeriodtransportPeriodreplicationPeriodsynchronous, bool defaultPeriodtransportPeriodcontentpackage, bool offloadingPeriodtransporterPerioddefaultPeriodenabled, 
	void(* handler)(ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param omnisearchPeriodsuggestionPeriodrequiretextPeriodmin 
 * \param omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int omnisearchPeriodsuggestionPeriodrequiretextPeriodmin, bool omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire, 
	void(* handler)(ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param omnisearchPeriodsuggestionPeriodrequiretextPeriodmin 
 * \param omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int omnisearchPeriodsuggestionPeriodrequiretextPeriodmin, bool omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire, 
	void(* handler)(ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param optoutPeriodcookies 
 * \param optoutPeriodheaders 
 * \param optoutPeriodwhitelistPeriodcookies 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOptoutImplOptOutServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> optoutPeriodcookies, std::list<std::string> optoutPeriodheaders, std::list<std::string> optoutPeriodwhitelistPeriodcookies, 
	void(* handler)(ComAdobeGraniteOptoutImplOptOutServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param optoutPeriodcookies 
 * \param optoutPeriodheaders 
 * \param optoutPeriodwhitelistPeriodcookies 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteOptoutImplOptOutServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> optoutPeriodcookies, std::list<std::string> optoutPeriodheaders, std::list<std::string> optoutPeriodwhitelistPeriodcookies, 
	void(* handler)(ComAdobeGraniteOptoutImplOptOutServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param indexingPeriodcriticalPeriodthreshold 
 * \param indexingPeriodwarnPeriodthreshold 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int indexingPeriodcriticalPeriodthreshold, int indexingPeriodwarnPeriodthreshold, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param indexingPeriodcriticalPeriodthreshold 
 * \param indexingPeriodwarnPeriodthreshold 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int indexingPeriodcriticalPeriodthreshold, int indexingPeriodwarnPeriodthreshold, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param largePeriodindexPeriodcriticalPeriodthreshold 
 * \param largePeriodindexPeriodwarnPeriodthreshold 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteQueriesImplHcLargeIndexHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int largePeriodindexPeriodcriticalPeriodthreshold, int largePeriodindexPeriodwarnPeriodthreshold, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param largePeriodindexPeriodcriticalPeriodthreshold 
 * \param largePeriodindexPeriodwarnPeriodthreshold 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteQueriesImplHcLargeIndexHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int largePeriodindexPeriodcriticalPeriodthreshold, int largePeriodindexPeriodwarnPeriodthreshold, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param getPeriod 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int getPeriod, 
	void(* handler)(ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param getPeriod 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int getPeriod, 
	void(* handler)(ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param numberPeriodofPeriodretriesPeriodallowed 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int numberPeriodofPeriodretriesPeriodallowed, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param numberPeriodofPeriodretriesPeriodallowed 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int numberPeriodofPeriodretriesPeriodallowed, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param excludePeriodsearchPeriodpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, std::list<std::string> excludePeriodsearchPeriodpath, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param excludePeriodsearchPeriodpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, std::list<std::string> excludePeriodsearchPeriodpath, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param accountPeriodlogins 
 * \param consolePeriodlogins 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, std::list<std::string> accountPeriodlogins, std::list<std::string> consolePeriodlogins, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param accountPeriodlogins 
 * \param consolePeriodlogins 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, std::list<std::string> accountPeriodlogins, std::list<std::string> consolePeriodlogins, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param diskPeriodspacePeriodwarnPeriodthreshold 
 * \param diskPeriodspacePerioderrorPeriodthreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, int diskPeriodspacePeriodwarnPeriodthreshold, int diskPeriodspacePerioderrorPeriodthreshold, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param diskPeriodspacePeriodwarnPeriodthreshold 
 * \param diskPeriodspacePerioderrorPeriodthreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, int diskPeriodspacePeriodwarnPeriodthreshold, int diskPeriodspacePerioderrorPeriodthreshold, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param intervalSeconds 
 * \param commitsPerIntervalThreshold 
 * \param maxLocationLength 
 * \param maxDetailsShown 
 * \param minDetailsPercentage 
 * \param threadMatchers 
 * \param maxGreedyDepth 
 * \param greedyStackMatchers 
 * \param stackFilters 
 * \param stackMatchers 
 * \param stackCategorizers 
 * \param stackShorteners 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryImplCommitStatsConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, int intervalSeconds, int commitsPerIntervalThreshold, int maxLocationLength, int maxDetailsShown, int minDetailsPercentage, std::list<std::string> threadMatchers, int maxGreedyDepth, std::string greedyStackMatchers, std::list<std::string> stackFilters, std::list<std::string> stackMatchers, std::list<std::string> stackCategorizers, std::list<std::string> stackShorteners, 
	void(* handler)(ComAdobeGraniteRepositoryImplCommitStatsConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param intervalSeconds 
 * \param commitsPerIntervalThreshold 
 * \param maxLocationLength 
 * \param maxDetailsShown 
 * \param minDetailsPercentage 
 * \param threadMatchers 
 * \param maxGreedyDepth 
 * \param greedyStackMatchers 
 * \param stackFilters 
 * \param stackMatchers 
 * \param stackCategorizers 
 * \param stackShorteners 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryImplCommitStatsConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, int intervalSeconds, int commitsPerIntervalThreshold, int maxLocationLength, int maxDetailsShown, int minDetailsPercentage, std::list<std::string> threadMatchers, int maxGreedyDepth, std::string greedyStackMatchers, std::list<std::string> stackFilters, std::list<std::string> stackMatchers, std::list<std::string> stackCategorizers, std::list<std::string> stackShorteners, 
	void(* handler)(ComAdobeGraniteRepositoryImplCommitStatsConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param serviceusersPeriodsimpleSubjectPopulation 
 * \param serviceusersPeriodlist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryServiceUserConfigurationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, bool serviceusersPeriodsimpleSubjectPopulation, std::list<std::string> serviceusersPeriodlist, 
	void(* handler)(ComAdobeGraniteRepositoryServiceUserConfigurationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param serviceusersPeriodsimpleSubjectPopulation 
 * \param serviceusersPeriodlist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRepositoryServiceUserConfigurationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, bool serviceusersPeriodsimpleSubjectPopulation, std::list<std::string> serviceusersPeriodlist, 
	void(* handler)(ComAdobeGraniteRepositoryServiceUserConfigurationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param types 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteResourcestatusImplCompositeStatusTypeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::list<std::string> types, 
	void(* handler)(ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param types 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteResourcestatusImplCompositeStatusTypeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::list<std::string> types, 
	void(* handler)(ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodroot 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteResourcestatusImplStatusResourceProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodroot, 
	void(* handler)(ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodroot 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteResourcestatusImplStatusResourceProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodroot, 
	void(* handler)(ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mimePeriodallowEmpty 
 * \param mimePeriodallowed 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRestAssetsImplAssetContentDispositionFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool mimePeriodallowEmpty, std::list<std::string> mimePeriodallowed, 
	void(* handler)(ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mimePeriodallowEmpty 
 * \param mimePeriodallowed 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRestAssetsImplAssetContentDispositionFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool mimePeriodallowEmpty, std::list<std::string> mimePeriodallowed, 
	void(* handler)(ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodroots 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodroots, 
	void(* handler)(ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodroots 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodroots, 
	void(* handler)(ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodlimit 
 * \param usePeriodabsolutePerioduri 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRestImplServletDefaultGETServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int defaultPeriodlimit, bool usePeriodabsolutePerioduri, 
	void(* handler)(ComAdobeGraniteRestImplServletDefaultGETServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodlimit 
 * \param usePeriodabsolutePerioduri 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteRestImplServletDefaultGETServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int defaultPeriodlimit, bool usePeriodabsolutePerioduri, 
	void(* handler)(ComAdobeGraniteRestImplServletDefaultGETServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodtags 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> hcPeriodtags, 
	void(* handler)(ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param adapterPeriodcondition 
 * \param granitePerioduserpropertiesPeriodnodetypes 
 * \param granitePerioduserpropertiesPeriodresourcetypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteSecurityUserUserPropertiesServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string adapterPeriodcondition, std::list<std::string> granitePerioduserpropertiesPeriodnodetypes, std::list<std::string> granitePerioduserpropertiesPeriodresourcetypes, 
	void(* handler)(ComAdobeGraniteSecurityUserUserPropertiesServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param adapterPeriodcondition 
 * \param granitePerioduserpropertiesPeriodnodetypes 
 * \param granitePerioduserpropertiesPeriodresourcetypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteSecurityUserUserPropertiesServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string adapterPeriodcondition, std::list<std::string> granitePerioduserpropertiesPeriodnodetypes, std::list<std::string> granitePerioduserpropertiesPeriodresourcetypes, 
	void(* handler)(ComAdobeGraniteSecurityUserUserPropertiesServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param group2memberPeriodrelationshipPeriodoutgoing 
 * \param group2memberPeriodexcludedPeriodoutgoing 
 * \param group2memberPeriodrelationshipPeriodincoming 
 * \param group2memberPeriodexcludedPeriodincoming 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteSocialgraphImplSocialGraphFactoryImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string group2memberPeriodrelationshipPeriodoutgoing, std::list<std::string> group2memberPeriodexcludedPeriodoutgoing, std::string group2memberPeriodrelationshipPeriodincoming, std::list<std::string> group2memberPeriodexcludedPeriodincoming, 
	void(* handler)(ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param group2memberPeriodrelationshipPeriodoutgoing 
 * \param group2memberPeriodexcludedPeriodoutgoing 
 * \param group2memberPeriodrelationshipPeriodincoming 
 * \param group2memberPeriodexcludedPeriodincoming 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteSocialgraphImplSocialGraphFactoryImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string group2memberPeriodrelationshipPeriodoutgoing, std::list<std::string> group2memberPeriodexcludedPeriodoutgoing, std::string group2memberPeriodrelationshipPeriodincoming, std::list<std::string> group2memberPeriodexcludedPeriodincoming, 
	void(* handler)(ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param jmxPeriodobjectname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, std::string jmxPeriodobjectname, 
	void(* handler)(ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param jmxPeriodobjectname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, std::string jmxPeriodobjectname, 
	void(* handler)(ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param adapterPeriodcondition 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string adapterPeriodcondition, 
	void(* handler)(ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param adapterPeriodcondition 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string adapterPeriodcondition, 
	void(* handler)(ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param archivingPeriodenabled 
 * \param schedulerPeriodexpression 
 * \param archivePeriodsincePerioddaysPeriodcompleted 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool archivingPeriodenabled, std::string schedulerPeriodexpression, int archivePeriodsincePerioddaysPeriodcompleted, 
	void(* handler)(ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param archivingPeriodenabled 
 * \param schedulerPeriodexpression 
 * \param archivePeriodsincePerioddaysPeriodcompleted 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool archivingPeriodenabled, std::string schedulerPeriodexpression, int archivePeriodsincePerioddaysPeriodcompleted, 
	void(* handler)(ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param purgeCompleted 
 * \param completedAge 
 * \param purgeActive 
 * \param activeAge 
 * \param saveThreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool purgeCompleted, int completedAge, bool purgeActive, int activeAge, int saveThreshold, 
	void(* handler)(ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param purgeCompleted 
 * \param completedAge 
 * \param purgeActive 
 * \param activeAge 
 * \param saveThreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool purgeCompleted, int completedAge, bool purgeActive, int activeAge, int saveThreshold, 
	void(* handler)(ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param adapterPeriodcondition 
 * \param taskmanagerPeriodadmingroups 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string adapterPeriodcondition, std::list<std::string> taskmanagerPeriodadmingroups, 
	void(* handler)(ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param adapterPeriodcondition 
 * \param taskmanagerPeriodadmingroups 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string adapterPeriodcondition, std::list<std::string> taskmanagerPeriodadmingroups, 
	void(* handler)(ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodperiod 
 * \param schedulerPeriodrunOn 
 * \param granitePeriodthreaddumpPeriodenabled 
 * \param granitePeriodthreaddumpPerioddumpsPerFile 
 * \param granitePeriodthreaddumpPeriodenableGzipCompression 
 * \param granitePeriodthreaddumpPeriodenableDirectoriesCompression 
 * \param granitePeriodthreaddumpPeriodenableJStack 
 * \param granitePeriodthreaddumpPeriodmaxBackupDays 
 * \param granitePeriodthreaddumpPeriodbackupCleanTrigger 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteThreaddumpThreadDumpCollectorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int schedulerPeriodperiod, std::string schedulerPeriodrunOn, bool granitePeriodthreaddumpPeriodenabled, int granitePeriodthreaddumpPerioddumpsPerFile, bool granitePeriodthreaddumpPeriodenableGzipCompression, bool granitePeriodthreaddumpPeriodenableDirectoriesCompression, bool granitePeriodthreaddumpPeriodenableJStack, int granitePeriodthreaddumpPeriodmaxBackupDays, std::string granitePeriodthreaddumpPeriodbackupCleanTrigger, 
	void(* handler)(ComAdobeGraniteThreaddumpThreadDumpCollectorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodperiod 
 * \param schedulerPeriodrunOn 
 * \param granitePeriodthreaddumpPeriodenabled 
 * \param granitePeriodthreaddumpPerioddumpsPerFile 
 * \param granitePeriodthreaddumpPeriodenableGzipCompression 
 * \param granitePeriodthreaddumpPeriodenableDirectoriesCompression 
 * \param granitePeriodthreaddumpPeriodenableJStack 
 * \param granitePeriodthreaddumpPeriodmaxBackupDays 
 * \param granitePeriodthreaddumpPeriodbackupCleanTrigger 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteThreaddumpThreadDumpCollectorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int schedulerPeriodperiod, std::string schedulerPeriodrunOn, bool granitePeriodthreaddumpPeriodenabled, int granitePeriodthreaddumpPerioddumpsPerFile, bool granitePeriodthreaddumpPeriodenableGzipCompression, bool granitePeriodthreaddumpPeriodenableDirectoriesCompression, bool granitePeriodthreaddumpPeriodenableJStack, int granitePeriodthreaddumpPeriodmaxBackupDays, std::string granitePeriodthreaddumpPeriodbackupCleanTrigger, 
	void(* handler)(ComAdobeGraniteThreaddumpThreadDumpCollectorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param translationFactory 
 * \param defaultConnectorLabel 
 * \param defaultConnectorAttribution 
 * \param defaultConnectorWorkspaceId 
 * \param defaultConnectorSubscriptionKey 
 * \param languageMapLocation 
 * \param categoryMapLocation 
 * \param retryAttempts 
 * \param timeoutCount 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string translationFactory, std::string defaultConnectorLabel, std::string defaultConnectorAttribution, std::string defaultConnectorWorkspaceId, std::string defaultConnectorSubscriptionKey, std::string languageMapLocation, std::string categoryMapLocation, int retryAttempts, int timeoutCount, 
	void(* handler)(ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param translationFactory 
 * \param defaultConnectorLabel 
 * \param defaultConnectorAttribution 
 * \param defaultConnectorWorkspaceId 
 * \param defaultConnectorSubscriptionKey 
 * \param languageMapLocation 
 * \param categoryMapLocation 
 * \param retryAttempts 
 * \param timeoutCount 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string translationFactory, std::string defaultConnectorLabel, std::string defaultConnectorAttribution, std::string defaultConnectorWorkspaceId, std::string defaultConnectorSubscriptionKey, std::string languageMapLocation, std::string categoryMapLocation, int retryAttempts, int timeoutCount, 
	void(* handler)(ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultConnectorName 
 * \param defaultCategory 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTranslationCoreImplTranslationManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string defaultConnectorName, std::string defaultCategory, 
	void(* handler)(ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultConnectorName 
 * \param defaultCategory 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteTranslationCoreImplTranslationManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string defaultConnectorName, std::string defaultCategory, 
	void(* handler)(ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param htmllibmanagerPeriodtiming 
 * \param htmllibmanagerPerioddebugPeriodinitPeriodjs 
 * \param htmllibmanagerPeriodminify 
 * \param htmllibmanagerPerioddebug 
 * \param htmllibmanagerPeriodgzip 
 * \param htmllibmanagerPeriodmaxDataUriSize 
 * \param htmllibmanagerPeriodmaxage 
 * \param htmllibmanagerPeriodforceCQUrlInfo 
 * \param htmllibmanagerPerioddefaultthemename 
 * \param htmllibmanagerPerioddefaultuserthemename 
 * \param htmllibmanagerPeriodclientmanager 
 * \param htmllibmanagerPeriodpathPeriodlist 
 * \param htmllibmanagerPeriodexcludedPeriodpathPeriodlist 
 * \param htmllibmanagerPeriodprocessorPeriodjs 
 * \param htmllibmanagerPeriodprocessorPeriodcss 
 * \param htmllibmanagerPeriodlongcachePeriodpatterns 
 * \param htmllibmanagerPeriodlongcachePeriodformat 
 * \param htmllibmanagerPerioduseFileSystemOutputCache 
 * \param htmllibmanagerPeriodfileSystemOutputCacheLocation 
 * \param htmllibmanagerPerioddisablePeriodreplacement 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool htmllibmanagerPeriodtiming, std::string htmllibmanagerPerioddebugPeriodinitPeriodjs, bool htmllibmanagerPeriodminify, bool htmllibmanagerPerioddebug, bool htmllibmanagerPeriodgzip, int htmllibmanagerPeriodmaxDataUriSize, int htmllibmanagerPeriodmaxage, bool htmllibmanagerPeriodforceCQUrlInfo, std::string htmllibmanagerPerioddefaultthemename, std::string htmllibmanagerPerioddefaultuserthemename, std::string htmllibmanagerPeriodclientmanager, std::list<std::string> htmllibmanagerPeriodpathPeriodlist, std::list<std::string> htmllibmanagerPeriodexcludedPeriodpathPeriodlist, std::list<std::string> htmllibmanagerPeriodprocessorPeriodjs, std::list<std::string> htmllibmanagerPeriodprocessorPeriodcss, std::list<std::string> htmllibmanagerPeriodlongcachePeriodpatterns, std::string htmllibmanagerPeriodlongcachePeriodformat, bool htmllibmanagerPerioduseFileSystemOutputCache, std::string htmllibmanagerPeriodfileSystemOutputCacheLocation, std::list<std::string> htmllibmanagerPerioddisablePeriodreplacement, 
	void(* handler)(ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param htmllibmanagerPeriodtiming 
 * \param htmllibmanagerPerioddebugPeriodinitPeriodjs 
 * \param htmllibmanagerPeriodminify 
 * \param htmllibmanagerPerioddebug 
 * \param htmllibmanagerPeriodgzip 
 * \param htmllibmanagerPeriodmaxDataUriSize 
 * \param htmllibmanagerPeriodmaxage 
 * \param htmllibmanagerPeriodforceCQUrlInfo 
 * \param htmllibmanagerPerioddefaultthemename 
 * \param htmllibmanagerPerioddefaultuserthemename 
 * \param htmllibmanagerPeriodclientmanager 
 * \param htmllibmanagerPeriodpathPeriodlist 
 * \param htmllibmanagerPeriodexcludedPeriodpathPeriodlist 
 * \param htmllibmanagerPeriodprocessorPeriodjs 
 * \param htmllibmanagerPeriodprocessorPeriodcss 
 * \param htmllibmanagerPeriodlongcachePeriodpatterns 
 * \param htmllibmanagerPeriodlongcachePeriodformat 
 * \param htmllibmanagerPerioduseFileSystemOutputCache 
 * \param htmllibmanagerPeriodfileSystemOutputCacheLocation 
 * \param htmllibmanagerPerioddisablePeriodreplacement 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool htmllibmanagerPeriodtiming, std::string htmllibmanagerPerioddebugPeriodinitPeriodjs, bool htmllibmanagerPeriodminify, bool htmllibmanagerPerioddebug, bool htmllibmanagerPeriodgzip, int htmllibmanagerPeriodmaxDataUriSize, int htmllibmanagerPeriodmaxage, bool htmllibmanagerPeriodforceCQUrlInfo, std::string htmllibmanagerPerioddefaultthemename, std::string htmllibmanagerPerioddefaultuserthemename, std::string htmllibmanagerPeriodclientmanager, std::list<std::string> htmllibmanagerPeriodpathPeriodlist, std::list<std::string> htmllibmanagerPeriodexcludedPeriodpathPeriodlist, std::list<std::string> htmllibmanagerPeriodprocessorPeriodjs, std::list<std::string> htmllibmanagerPeriodprocessorPeriodcss, std::list<std::string> htmllibmanagerPeriodlongcachePeriodpatterns, std::string htmllibmanagerPeriodlongcachePeriodformat, bool htmllibmanagerPerioduseFileSystemOutputCache, std::string htmllibmanagerPeriodfileSystemOutputCacheLocation, std::list<std::string> htmllibmanagerPerioddisablePeriodreplacement, 
	void(* handler)(ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled, 
	void(* handler)(ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled, 
	void(* handler)(ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param bucketSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int bucketSize, 
	void(* handler)(ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param bucketSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int bucketSize, 
	void(* handler)(ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodtimeout 
 * \param maxPeriodtimeout 
 * \param defaultPeriodperiod 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int defaultPeriodtimeout, int maxPeriodtimeout, int defaultPeriodperiod, 
	void(* handler)(ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodtimeout 
 * \param maxPeriodtimeout 
 * \param defaultPeriodperiod 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int defaultPeriodtimeout, int maxPeriodtimeout, int defaultPeriodperiod, 
	void(* handler)(ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jobPeriodtopics 
 * \param allowPeriodselfPeriodprocessPeriodtermination 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreJobJobHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> jobPeriodtopics, bool allowPeriodselfPeriodprocessPeriodtermination, 
	void(* handler)(ComAdobeGraniteWorkflowCoreJobJobHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jobPeriodtopics 
 * \param allowPeriodselfPeriodprocessPeriodtermination 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreJobJobHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> jobPeriodtopics, bool allowPeriodselfPeriodprocessPeriodtermination, 
	void(* handler)(ComAdobeGraniteWorkflowCoreJobJobHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jobPeriodtopics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jobPeriodtopics, 
	void(* handler)(ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jobPeriodtopics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jobPeriodtopics, 
	void(* handler)(ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param getSystemWorkflowModels 
 * \param getPackageRootPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCorePayloadMapCacheSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> getSystemWorkflowModels, std::string getPackageRootPath, 
	void(* handler)(ComAdobeGraniteWorkflowCorePayloadMapCacheInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param getSystemWorkflowModels 
 * \param getPackageRootPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCorePayloadMapCacheAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> getSystemWorkflowModels, std::string getPackageRootPath, 
	void(* handler)(ComAdobeGraniteWorkflowCorePayloadMapCacheInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param payloadPeriodmovePeriodwhitePeriodlist 
 * \param payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> payloadPeriodmovePeriodwhitePeriodlist, bool payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess, 
	void(* handler)(ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param payloadPeriodmovePeriodwhitePeriodlist 
 * \param payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> payloadPeriodmovePeriodwhitePeriodlist, bool payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess, 
	void(* handler)(ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath 
 * \param cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode 
 * \param cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreWorkflowConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath, bool cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode, bool cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking, 
	void(* handler)(ComAdobeGraniteWorkflowCoreWorkflowConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath 
 * \param cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode 
 * \param cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreWorkflowConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath, bool cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode, bool cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking, 
	void(* handler)(ComAdobeGraniteWorkflowCoreWorkflowConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param granitePeriodworkflowinboxPeriodsortPeriodpropertyName 
 * \param granitePeriodworkflowinboxPeriodsortPeriodorder 
 * \param cqPeriodworkflowPeriodjobPeriodretry 
 * \param cqPeriodworkflowPeriodsuperuser 
 * \param granitePeriodworkflowPeriodinboxQuerySize 
 * \param granitePeriodworkflowPeriodadminUserGroupFilter 
 * \param granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions 
 * \param granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions 
 * \param granitePeriodworkflowPeriodinjectTenantIdInJobTopics 
 * \param granitePeriodworkflowPeriodmaxPurgeSaveThreshold 
 * \param granitePeriodworkflowPeriodmaxPurgeQueryCount 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreWorkflowSessionFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string granitePeriodworkflowinboxPeriodsortPeriodpropertyName, std::string granitePeriodworkflowinboxPeriodsortPeriodorder, int cqPeriodworkflowPeriodjobPeriodretry, std::list<std::string> cqPeriodworkflowPeriodsuperuser, int granitePeriodworkflowPeriodinboxQuerySize, bool granitePeriodworkflowPeriodadminUserGroupFilter, bool granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions, bool granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions, bool granitePeriodworkflowPeriodinjectTenantIdInJobTopics, int granitePeriodworkflowPeriodmaxPurgeSaveThreshold, int granitePeriodworkflowPeriodmaxPurgeQueryCount, 
	void(* handler)(ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param granitePeriodworkflowinboxPeriodsortPeriodpropertyName 
 * \param granitePeriodworkflowinboxPeriodsortPeriodorder 
 * \param cqPeriodworkflowPeriodjobPeriodretry 
 * \param cqPeriodworkflowPeriodsuperuser 
 * \param granitePeriodworkflowPeriodinboxQuerySize 
 * \param granitePeriodworkflowPeriodadminUserGroupFilter 
 * \param granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions 
 * \param granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions 
 * \param granitePeriodworkflowPeriodinjectTenantIdInJobTopics 
 * \param granitePeriodworkflowPeriodmaxPurgeSaveThreshold 
 * \param granitePeriodworkflowPeriodmaxPurgeQueryCount 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowCoreWorkflowSessionFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string granitePeriodworkflowinboxPeriodsortPeriodpropertyName, std::string granitePeriodworkflowinboxPeriodsortPeriodorder, int cqPeriodworkflowPeriodjobPeriodretry, std::list<std::string> cqPeriodworkflowPeriodsuperuser, int granitePeriodworkflowPeriodinboxQuerySize, bool granitePeriodworkflowPeriodadminUserGroupFilter, bool granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions, bool granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions, bool granitePeriodworkflowPeriodinjectTenantIdInJobTopics, int granitePeriodworkflowPeriodmaxPurgeSaveThreshold, int granitePeriodworkflowPeriodmaxPurgeQueryCount, 
	void(* handler)(ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param scheduledpurgePeriodname 
 * \param scheduledpurgePeriodworkflowStatus 
 * \param scheduledpurgePeriodmodelIds 
 * \param scheduledpurgePerioddaysold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowPurgeSchedulerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string scheduledpurgePeriodname, std::string scheduledpurgePeriodworkflowStatus, std::list<std::string> scheduledpurgePeriodmodelIds, int scheduledpurgePerioddaysold, 
	void(* handler)(ComAdobeGraniteWorkflowPurgeSchedulerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param scheduledpurgePeriodname 
 * \param scheduledpurgePeriodworkflowStatus 
 * \param scheduledpurgePeriodmodelIds 
 * \param scheduledpurgePerioddaysold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeGraniteWorkflowPurgeSchedulerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string scheduledpurgePeriodname, std::string scheduledpurgePeriodworkflowStatus, std::list<std::string> scheduledpurgePeriodmodelIds, int scheduledpurgePerioddaysold, 
	void(* handler)(ComAdobeGraniteWorkflowPurgeSchedulerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxConnections 
 * \param maxRequests 
 * \param requestTimeout 
 * \param requestRetries 
 * \param launchTimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeOctopusNcommBootstrapSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxConnections, int maxRequests, int requestTimeout, int requestRetries, int launchTimeout, 
	void(* handler)(ComAdobeOctopusNcommBootstrapInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxConnections 
 * \param maxRequests 
 * \param requestTimeout 
 * \param requestRetries 
 * \param launchTimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeOctopusNcommBootstrapAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxConnections, int maxRequests, int requestTimeout, int requestRetries, int launchTimeout, 
	void(* handler)(ComAdobeOctopusNcommBootstrapInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter, 
	void(* handler)(ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter, 
	void(* handler)(ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxConnections 
 * \param maxRequests 
 * \param requestTimeout 
 * \param logDir 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeXmpWorkerFilesNcommXMPFilesNCommSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string maxConnections, std::string maxRequests, std::string requestTimeout, std::string logDir, 
	void(* handler)(ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxConnections 
 * \param maxRequests 
 * \param requestTimeout 
 * \param logDir 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comAdobeXmpWorkerFilesNcommXMPFilesNCommAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string maxConnections, std::string maxRequests, std::string requestTimeout, std::string logDir, 
	void(* handler)(ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jdbcPerioddriverPeriodclass 
 * \param jdbcPeriodconnectionPerioduri 
 * \param jdbcPeriodusername 
 * \param jdbcPeriodpassword 
 * \param jdbcPeriodvalidationPeriodquery 
 * \param defaultPeriodreadonly 
 * \param defaultPeriodautocommit 
 * \param poolPeriodsize 
 * \param poolPeriodmaxPeriodwaitPeriodmsec 
 * \param datasourcePeriodname 
 * \param datasourcePeriodsvcPeriodproperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCommonsDatasourceJdbcpoolJdbcPoolServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jdbcPerioddriverPeriodclass, std::string jdbcPeriodconnectionPerioduri, std::string jdbcPeriodusername, std::string jdbcPeriodpassword, std::string jdbcPeriodvalidationPeriodquery, bool defaultPeriodreadonly, bool defaultPeriodautocommit, int poolPeriodsize, int poolPeriodmaxPeriodwaitPeriodmsec, std::string datasourcePeriodname, std::list<std::string> datasourcePeriodsvcPeriodproperties, 
	void(* handler)(ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jdbcPerioddriverPeriodclass 
 * \param jdbcPeriodconnectionPerioduri 
 * \param jdbcPeriodusername 
 * \param jdbcPeriodpassword 
 * \param jdbcPeriodvalidationPeriodquery 
 * \param defaultPeriodreadonly 
 * \param defaultPeriodautocommit 
 * \param poolPeriodsize 
 * \param poolPeriodmaxPeriodwaitPeriodmsec 
 * \param datasourcePeriodname 
 * \param datasourcePeriodsvcPeriodproperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCommonsDatasourceJdbcpoolJdbcPoolServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jdbcPerioddriverPeriodclass, std::string jdbcPeriodconnectionPerioduri, std::string jdbcPeriodusername, std::string jdbcPeriodpassword, std::string jdbcPeriodvalidationPeriodquery, bool defaultPeriodreadonly, bool defaultPeriodautocommit, int poolPeriodsize, int poolPeriodmaxPeriodwaitPeriodmsec, std::string datasourcePeriodname, std::list<std::string> datasourcePeriodsvcPeriodproperties, 
	void(* handler)(ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param proxyPeriodenabled 
 * \param proxyPeriodhost 
 * \param proxyPerioduser 
 * \param proxyPeriodpassword 
 * \param proxyPeriodntlmPeriodhost 
 * \param proxyPeriodntlmPerioddomain 
 * \param proxyPeriodexceptions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCommonsHttpclientSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool proxyPeriodenabled, std::string proxyPeriodhost, std::string proxyPerioduser, std::string proxyPeriodpassword, std::string proxyPeriodntlmPeriodhost, std::string proxyPeriodntlmPerioddomain, std::list<std::string> proxyPeriodexceptions, 
	void(* handler)(ComDayCommonsHttpclientInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param proxyPeriodenabled 
 * \param proxyPeriodhost 
 * \param proxyPerioduser 
 * \param proxyPeriodpassword 
 * \param proxyPeriodntlmPeriodhost 
 * \param proxyPeriodntlmPerioddomain 
 * \param proxyPeriodexceptions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCommonsHttpclientAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool proxyPeriodenabled, std::string proxyPeriodhost, std::string proxyPerioduser, std::string proxyPeriodpassword, std::string proxyPeriodntlmPeriodhost, std::string proxyPeriodntlmPerioddomain, std::list<std::string> proxyPeriodexceptions, 
	void(* handler)(ComDayCommonsHttpclientInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodstorePeriodlistenerPeriodadditionalStorePaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsImplStorePropertiesChangeListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodstorePeriodlistenerPeriodadditionalStorePaths, 
	void(* handler)(ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodstorePeriodlistenerPeriodadditionalStorePaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsImplStorePropertiesChangeListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodstorePeriodlistenerPeriodadditionalStorePaths, 
	void(* handler)(ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param allowedPeriodpaths 
 * \param cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> allowedPeriodpaths, int cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize, 
	void(* handler)(ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param allowedPeriodpaths 
 * \param cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> allowedPeriodpaths, int cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize, 
	void(* handler)(ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param reportPeriodfetchPeriodattempts 
 * \param reportPeriodfetchPerioddelay 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsSitecatalystImplImporterReportImporterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int reportPeriodfetchPeriodattempts, int reportPeriodfetchPerioddelay, 
	void(* handler)(ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param reportPeriodfetchPeriodattempts 
 * \param reportPeriodfetchPerioddelay 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsSitecatalystImplImporterReportImporterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int reportPeriodfetchPeriodattempts, int reportPeriodfetchPerioddelay, 
	void(* handler)(ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores, 
	void(* handler)(ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores, 
	void(* handler)(ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl 
 * \param devhostnamepatterns 
 * \param connectionPeriodtimeout 
 * \param socketPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl, std::list<std::string> devhostnamepatterns, int connectionPeriodtimeout, int socketPeriodtimeout, 
	void(* handler)(ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl 
 * \param devhostnamepatterns 
 * \param connectionPeriodtimeout 
 * \param socketPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl, std::list<std::string> devhostnamepatterns, int connectionPeriodtimeout, int socketPeriodtimeout, 
	void(* handler)(ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplSegmentImporterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplSegmentImporterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param endpointUri 
 * \param connectionTimeout 
 * \param socketTimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplServiceWebServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string endpointUri, int connectionTimeout, int socketTimeout, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param endpointUri 
 * \param connectionTimeout 
 * \param socketTimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplServiceWebServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string endpointUri, int connectionTimeout, int socketTimeout, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param testandtargetPeriodendpointPeriodurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplServletsAdminServerServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string testandtargetPeriodendpointPeriodurl, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param testandtargetPeriodendpointPeriodurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplServletsAdminServerServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string testandtargetPeriodendpointPeriodurl, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodtimeout 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl, int cqPeriodanalyticsPeriodtestandtargetPeriodtimeout, int cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout, std::string cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace, std::string cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodtimeout 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace 
 * \param cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl, int cqPeriodanalyticsPeriodtestandtargetPeriodtimeout, int cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout, std::string cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace, std::string cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith, 
	void(* handler)(ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cugPeriodexemptedPeriodprincipals 
 * \param cugPeriodenabled 
 * \param cugPeriodprincipalsPeriodregex 
 * \param cugPeriodprincipalsPeriodreplacement 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAuthImplCugCugSupportImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cugPeriodexemptedPeriodprincipals, bool cugPeriodenabled, std::string cugPeriodprincipalsPeriodregex, std::string cugPeriodprincipalsPeriodreplacement, 
	void(* handler)(ComDayCqAuthImplCugCugSupportImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cugPeriodexemptedPeriodprincipals 
 * \param cugPeriodenabled 
 * \param cugPeriodprincipalsPeriodregex 
 * \param cugPeriodprincipalsPeriodreplacement 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAuthImplCugCugSupportImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cugPeriodexemptedPeriodprincipals, bool cugPeriodenabled, std::string cugPeriodprincipalsPeriodregex, std::string cugPeriodprincipalsPeriodreplacement, 
	void(* handler)(ComDayCqAuthImplCugCugSupportImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param servicePeriodranking 
 * \param authPeriodloginselectorPeriodmappings 
 * \param authPeriodloginselectorPeriodchangepwPeriodmappings 
 * \param authPeriodloginselectorPerioddefaultloginpage 
 * \param authPeriodloginselectorPerioddefaultchangepwpage 
 * \param authPeriodloginselectorPeriodhandle 
 * \param authPeriodloginselectorPeriodhandlePeriodallPeriodextensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAuthImplLoginSelectorHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, int servicePeriodranking, std::list<std::string> authPeriodloginselectorPeriodmappings, std::list<std::string> authPeriodloginselectorPeriodchangepwPeriodmappings, std::string authPeriodloginselectorPerioddefaultloginpage, std::string authPeriodloginselectorPerioddefaultchangepwpage, std::list<std::string> authPeriodloginselectorPeriodhandle, bool authPeriodloginselectorPeriodhandlePeriodallPeriodextensions, 
	void(* handler)(ComDayCqAuthImplLoginSelectorHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param servicePeriodranking 
 * \param authPeriodloginselectorPeriodmappings 
 * \param authPeriodloginselectorPeriodchangepwPeriodmappings 
 * \param authPeriodloginselectorPerioddefaultloginpage 
 * \param authPeriodloginselectorPerioddefaultchangepwpage 
 * \param authPeriodloginselectorPeriodhandle 
 * \param authPeriodloginselectorPeriodhandlePeriodallPeriodextensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqAuthImplLoginSelectorHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, int servicePeriodranking, std::list<std::string> authPeriodloginselectorPeriodmappings, std::list<std::string> authPeriodloginselectorPeriodchangepwPeriodmappings, std::string authPeriodloginselectorPerioddefaultloginpage, std::string authPeriodloginselectorPerioddefaultchangepwpage, std::list<std::string> authPeriodloginselectorPeriodhandle, bool authPeriodloginselectorPeriodhandlePeriodallPeriodextensions, 
	void(* handler)(ComDayCqAuthImplLoginSelectorHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param externalizerPerioddomains 
 * \param externalizerPeriodhost 
 * \param externalizerPeriodcontextpath 
 * \param externalizerPeriodencodedpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqCommonsImplExternalizerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> externalizerPerioddomains, std::string externalizerPeriodhost, std::string externalizerPeriodcontextpath, bool externalizerPeriodencodedpath, 
	void(* handler)(ComDayCqCommonsImplExternalizerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param externalizerPerioddomains 
 * \param externalizerPeriodhost 
 * \param externalizerPeriodcontextpath 
 * \param externalizerPeriodencodedpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqCommonsImplExternalizerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> externalizerPerioddomains, std::string externalizerPeriodhost, std::string externalizerPeriodcontextpath, bool externalizerPeriodencodedpath, 
	void(* handler)(ComDayCqCommonsImplExternalizerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param rootmappingPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqCommonsServletsRootMappingServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string rootmappingPeriodtarget, 
	void(* handler)(ComDayCqCommonsServletsRootMappingServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param rootmappingPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqCommonsServletsRootMappingServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string rootmappingPeriodtarget, 
	void(* handler)(ComDayCqCommonsServletsRootMappingServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param codeupgradetasks 
 * \param codeupgradetaskfilters 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> codeupgradetasks, std::list<std::string> codeupgradetaskfilters, 
	void(* handler)(ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param codeupgradetasks 
 * \param codeupgradetaskfilters 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> codeupgradetasks, std::list<std::string> codeupgradetaskfilters, 
	void(* handler)(ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param upgradeTaskIgnoreList 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> upgradeTaskIgnoreList, 
	void(* handler)(ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param upgradeTaskIgnoreList 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> upgradeTaskIgnoreList, 
	void(* handler)(ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param effectiveBundleListPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string effectiveBundleListPath, 
	void(* handler)(ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param effectiveBundleListPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string effectiveBundleListPath, 
	void(* handler)(ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param contentsyncPeriodfallbackPeriodauthorizable 
 * \param contentsyncPeriodfallbackPeriodupdateuser 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqContentsyncImplContentSyncManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string contentsyncPeriodfallbackPeriodauthorizable, std::string contentsyncPeriodfallbackPeriodupdateuser, 
	void(* handler)(ComDayCqContentsyncImplContentSyncManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param contentsyncPeriodfallbackPeriodauthorizable 
 * \param contentsyncPeriodfallbackPeriodupdateuser 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqContentsyncImplContentSyncManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string contentsyncPeriodfallbackPeriodauthorizable, std::string contentsyncPeriodfallbackPeriodupdateuser, 
	void(* handler)(ComDayCqContentsyncImplContentSyncManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param largeFileThreshold 
 * \param largeCommentThreshold 
 * \param cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCommonsHandlerStandardImageHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int largeFileThreshold, int largeCommentThreshold, bool cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction, 
	void(* handler)(ComDayCqDamCommonsHandlerStandardImageHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param largeFileThreshold 
 * \param largeCommentThreshold 
 * \param cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCommonsHandlerStandardImageHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int largeFileThreshold, int largeCommentThreshold, bool cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction, 
	void(* handler)(ComDayCqDamCommonsHandlerStandardImageHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param xmpPeriodfilterPeriodapplyWhitelist 
 * \param xmpPeriodfilterPeriodwhitelist 
 * \param xmpPeriodfilterPeriodapplyBlacklist 
 * \param xmpPeriodfilterPeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCommonsMetadataXmpFilterBlackWhiteSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool xmpPeriodfilterPeriodapplyWhitelist, std::list<std::string> xmpPeriodfilterPeriodwhitelist, bool xmpPeriodfilterPeriodapplyBlacklist, std::list<std::string> xmpPeriodfilterPeriodblacklist, 
	void(* handler)(ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param xmpPeriodfilterPeriodapplyWhitelist 
 * \param xmpPeriodfilterPeriodwhitelist 
 * \param xmpPeriodfilterPeriodapplyBlacklist 
 * \param xmpPeriodfilterPeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCommonsMetadataXmpFilterBlackWhiteAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool xmpPeriodfilterPeriodapplyWhitelist, std::list<std::string> xmpPeriodfilterPeriodwhitelist, bool xmpPeriodfilterPeriodapplyBlacklist, std::list<std::string> xmpPeriodfilterPeriodblacklist, 
	void(* handler)(ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param largePeriodfilePeriodmin 
 * \param cachePeriodapply 
 * \param mimePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCommonsUtilImplAssetCacheImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int largePeriodfilePeriodmin, bool cachePeriodapply, std::list<std::string> mimePeriodtypes, 
	void(* handler)(ComDayCqDamCommonsUtilImplAssetCacheImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param largePeriodfilePeriodmin 
 * \param cachePeriodapply 
 * \param mimePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCommonsUtilImplAssetCacheImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int largePeriodfilePeriodmin, bool cachePeriodapply, std::list<std::string> mimePeriodtypes, 
	void(* handler)(ComDayCqDamCommonsUtilImplAssetCacheImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight, 
	void(* handler)(ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth 
 * \param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected, std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth, int cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight, 
	void(* handler)(ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplAssetMoveListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(ComDayCqDamCoreImplAssetMoveListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplAssetMoveListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(ComDayCqDamCoreImplAssetMoveListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplAssethomeAssetHomePageConfigurationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isEnabled, 
	void(* handler)(ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplAssethomeAssetHomePageConfigurationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isEnabled, 
	void(* handler)(ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize, 
	void(* handler)(ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize, 
	void(* handler)(ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory 
 * \param cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage 
 * \param cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplCacheCQBufferedImageCacheSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory, int cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage, std::string cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension, 
	void(* handler)(ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory 
 * \param cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage 
 * \param cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplCacheCQBufferedImageCacheAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory, int cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage, std::string cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension, 
	void(* handler)(ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param changeeventlistenerPeriodobservedPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplDamChangeEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> changeeventlistenerPeriodobservedPeriodpaths, 
	void(* handler)(ComDayCqDamCoreImplDamChangeEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param changeeventlistenerPeriodobservedPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplDamChangeEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> changeeventlistenerPeriodobservedPeriodpaths, 
	void(* handler)(ComDayCqDamCoreImplDamChangeEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param maxSavedActivities 
 * \param saveInterval 
 * \param enableActivityPurge 
 * \param eventTypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplDamEventPurgeServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, int maxSavedActivities, int saveInterval, bool enableActivityPurge, std::string eventTypes, 
	void(* handler)(ComDayCqDamCoreImplDamEventPurgeServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param maxSavedActivities 
 * \param saveInterval 
 * \param enableActivityPurge 
 * \param eventTypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplDamEventPurgeServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, int maxSavedActivities, int saveInterval, bool enableActivityPurge, std::string eventTypes, 
	void(* handler)(ComDayCqDamCoreImplDamEventPurgeServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param eventPeriodqueuePeriodlength 
 * \param eventrecorderPeriodenabled 
 * \param eventrecorderPeriodblacklist 
 * \param eventrecorderPeriodeventtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplDamEventRecorderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, int eventPeriodqueuePeriodlength, bool eventrecorderPeriodenabled, std::list<std::string> eventrecorderPeriodblacklist, std::string eventrecorderPeriodeventtypes, 
	void(* handler)(ComDayCqDamCoreImplDamEventRecorderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param eventPeriodqueuePeriodlength 
 * \param eventrecorderPeriodenabled 
 * \param eventrecorderPeriodblacklist 
 * \param eventrecorderPeriodeventtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplDamEventRecorderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, int eventPeriodqueuePeriodlength, bool eventrecorderPeriodenabled, std::list<std::string> eventrecorderPeriodblacklist, std::string eventrecorderPeriodeventtypes, 
	void(* handler)(ComDayCqDamCoreImplDamEventRecorderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplEventDamEventAuditListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, bool enabled, 
	void(* handler)(ComDayCqDamCoreImplEventDamEventAuditListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplEventDamEventAuditListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, bool enabled, 
	void(* handler)(ComDayCqDamCoreImplEventDamEventAuditListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased 
 * \param cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule 
 * \param cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule 
 * \param sendEmail 
 * \param assetExpiredLimit 
 * \param priorNotificationSeconds 
 * \param cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplExpiryNotificationJobImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased, std::string cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule, int cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule, bool sendEmail, int assetExpiredLimit, int priorNotificationSeconds, std::string cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol, 
	void(* handler)(ComDayCqDamCoreImplExpiryNotificationJobImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased 
 * \param cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule 
 * \param cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule 
 * \param sendEmail 
 * \param assetExpiredLimit 
 * \param priorNotificationSeconds 
 * \param cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplExpiryNotificationJobImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased, std::string cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule, int cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule, bool sendEmail, int assetExpiredLimit, int priorNotificationSeconds, std::string cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol, 
	void(* handler)(ComDayCqDamCoreImplExpiryNotificationJobImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isEnabled, 
	void(* handler)(ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param isEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool isEnabled, 
	void(* handler)(ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param skipPeriodbufferedcache 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplGfxCommonsGfxRendererSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool skipPeriodbufferedcache, 
	void(* handler)(ComDayCqDamCoreImplGfxCommonsGfxRendererInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param skipPeriodbufferedcache 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplGfxCommonsGfxRendererAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool skipPeriodbufferedcache, 
	void(* handler)(ComDayCqDamCoreImplGfxCommonsGfxRendererInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mimetype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplHandlerEPSFormatHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mimetype, 
	void(* handler)(ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mimetype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplHandlerEPSFormatHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mimetype, 
	void(* handler)(ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mimetype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplHandlerIndesignFormatHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> mimetype, 
	void(* handler)(ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mimetype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplHandlerIndesignFormatHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> mimetype, 
	void(* handler)(ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction 
 * \param largeFileThreshold 
 * \param largeCommentThreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplHandlerJpegHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction, int largeFileThreshold, int largeCommentThreshold, 
	void(* handler)(ComDayCqDamCoreImplHandlerJpegHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction 
 * \param largeFileThreshold 
 * \param largeCommentThreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplHandlerJpegHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction, int largeFileThreshold, int largeCommentThreshold, 
	void(* handler)(ComDayCqDamCoreImplHandlerJpegHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param xmphandlerPeriodcqPeriodformats 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplHandlerXmpNCommXMPHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> xmphandlerPeriodcqPeriodformats, 
	void(* handler)(ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param xmphandlerPeriodcqPeriodformats 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplHandlerXmpNCommXMPHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> xmphandlerPeriodcqPeriodformats, 
	void(* handler)(ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jmxPeriodobjectname 
 * \param propertyPeriodmeasurePeriodenabled 
 * \param propertyPeriodname 
 * \param propertyPeriodmaxPeriodwaitPeriodms 
 * \param propertyPeriodmaxPeriodrate 
 * \param fulltextPeriodmeasurePeriodenabled 
 * \param fulltextPeriodname 
 * \param fulltextPeriodmaxPeriodwaitPeriodms 
 * \param fulltextPeriodmaxPeriodrate 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplJmxAssetIndexUpdateMonitorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jmxPeriodobjectname, bool propertyPeriodmeasurePeriodenabled, std::string propertyPeriodname, int propertyPeriodmaxPeriodwaitPeriodms, long long propertyPeriodmaxPeriodrate, bool fulltextPeriodmeasurePeriodenabled, std::string fulltextPeriodname, int fulltextPeriodmaxPeriodwaitPeriodms, long long fulltextPeriodmaxPeriodrate, 
	void(* handler)(ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jmxPeriodobjectname 
 * \param propertyPeriodmeasurePeriodenabled 
 * \param propertyPeriodname 
 * \param propertyPeriodmaxPeriodwaitPeriodms 
 * \param propertyPeriodmaxPeriodrate 
 * \param fulltextPeriodmeasurePeriodenabled 
 * \param fulltextPeriodname 
 * \param fulltextPeriodmaxPeriodwaitPeriodms 
 * \param fulltextPeriodmaxPeriodrate 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplJmxAssetIndexUpdateMonitorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jmxPeriodobjectname, bool propertyPeriodmeasurePeriodenabled, std::string propertyPeriodname, int propertyPeriodmaxPeriodwaitPeriodms, long long propertyPeriodmaxPeriodrate, bool fulltextPeriodmeasurePeriodenabled, std::string fulltextPeriodname, int fulltextPeriodmaxPeriodwaitPeriodms, long long fulltextPeriodmaxPeriodrate, 
	void(* handler)(ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jmxPeriodobjectname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplJmxAssetMigrationMBeanImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jmxPeriodobjectname, 
	void(* handler)(ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jmxPeriodobjectname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplJmxAssetMigrationMBeanImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jmxPeriodobjectname, 
	void(* handler)(ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jmxPeriodobjectname 
 * \param active 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplJmxAssetUpdateMonitorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jmxPeriodobjectname, bool active, 
	void(* handler)(ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jmxPeriodobjectname 
 * \param active 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplJmxAssetUpdateMonitorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jmxPeriodobjectname, bool active, 
	void(* handler)(ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param operation 
 * \param emailEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string operation, bool emailEnabled, 
	void(* handler)(ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param operation 
 * \param emailEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string operation, bool emailEnabled, 
	void(* handler)(ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param operation 
 * \param operationIcon 
 * \param topicName 
 * \param emailEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string operation, std::string operationIcon, std::string topicName, bool emailEnabled, 
	void(* handler)(ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param operation 
 * \param operationIcon 
 * \param topicName 
 * \param emailEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string operation, std::string operationIcon, std::string topicName, bool emailEnabled, 
	void(* handler)(ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodpaths 
 * \param slingPeriodservletPeriodmethods 
 * \param cqPerioddamPeriodenablePeriodanonymous 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplLightboxLightboxServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodpaths, std::list<std::string> slingPeriodservletPeriodmethods, bool cqPerioddamPeriodenablePeriodanonymous, 
	void(* handler)(ComDayCqDamCoreImplLightboxLightboxServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodpaths 
 * \param slingPeriodservletPeriodmethods 
 * \param cqPerioddamPeriodenablePeriodanonymous 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplLightboxLightboxServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodpaths, std::list<std::string> slingPeriodservletPeriodmethods, bool cqPerioddamPeriodenablePeriodanonymous, 
	void(* handler)(ComDayCqDamCoreImplLightboxLightboxServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param graniteData 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplMetadataEditorSelectComponentHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> graniteData, 
	void(* handler)(ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param graniteData 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplMetadataEditorSelectComponentHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> graniteData, 
	void(* handler)(ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodallowPeriodallPeriodmime 
 * \param cqPerioddamPeriodallowedPeriodassetPeriodmimes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodallowPeriodallPeriodmime, std::list<std::string> cqPerioddamPeriodallowedPeriodassetPeriodmimes, 
	void(* handler)(ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodallowPeriodallPeriodmime 
 * \param cqPerioddamPeriodallowedPeriodassetPeriodmimes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodallowPeriodallPeriodmime, std::list<std::string> cqPerioddamPeriodallowedPeriodassetPeriodmimes, 
	void(* handler)(ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent, 
	void(* handler)(ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent, 
	void(* handler)(ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased 
 * \param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule 
 * \param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule 
 * \param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplMissingMetadataNotificationJobSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased, std::string cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule, int cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule, std::string cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient, 
	void(* handler)(ComDayCqDamCoreImplMissingMetadataNotificationJobInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased 
 * \param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule 
 * \param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule 
 * \param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplMissingMetadataNotificationJobAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased, std::string cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule, int cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule, std::string cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient, 
	void(* handler)(ComDayCqDamCoreImplMissingMetadataNotificationJobInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param notify_on_Complete 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, bool notify_on_Complete, 
	void(* handler)(ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param notify_on_Complete 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, bool notify_on_Complete, 
	void(* handler)(ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mimeTypes 
 * \param maxExtract 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplProcessTextExtractionProcessSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> mimeTypes, int maxExtract, 
	void(* handler)(ComDayCqDamCoreImplProcessTextExtractionProcessInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mimeTypes 
 * \param maxExtract 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplProcessTextExtractionProcessAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> mimeTypes, int maxExtract, 
	void(* handler)(ComDayCqDamCoreImplProcessTextExtractionProcessInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param xmpPeriodpropagate 
 * \param xmpPeriodexcludes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplRenditionMakerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool xmpPeriodpropagate, std::list<std::string> xmpPeriodexcludes, 
	void(* handler)(ComDayCqDamCoreImplRenditionMakerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param xmpPeriodpropagate 
 * \param xmpPeriodexcludes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplRenditionMakerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool xmpPeriodpropagate, std::list<std::string> xmpPeriodexcludes, 
	void(* handler)(ComDayCqDamCoreImplRenditionMakerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queryBatchSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplReportsReportExportServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int queryBatchSize, 
	void(* handler)(ComDayCqDamCoreImplReportsReportExportServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queryBatchSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplReportsReportExportServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int queryBatchSize, 
	void(* handler)(ComDayCqDamCoreImplReportsReportExportServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param maxSavedReports 
 * \param timeDuration 
 * \param enableReportPurge 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplReportsReportPurgeServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, int maxSavedReports, int timeDuration, bool enableReportPurge, 
	void(* handler)(ComDayCqDamCoreImplReportsReportPurgeServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param maxSavedReports 
 * \param timeDuration 
 * \param enableReportPurge 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplReportsReportPurgeServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, int maxSavedReports, int timeDuration, bool enableReportPurge, 
	void(* handler)(ComDayCqDamCoreImplReportsReportPurgeServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletAssetDownloadServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(ComDayCqDamCoreImplServletAssetDownloadServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletAssetDownloadServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(ComDayCqDamCoreImplServletAssetDownloadServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletAssetStatusServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets, 
	void(* handler)(ComDayCqDamCoreImplServletAssetStatusServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletAssetStatusServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets, 
	void(* handler)(ComDayCqDamCoreImplServletAssetStatusServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletAssetXMPSearchServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets, 
	void(* handler)(ComDayCqDamCoreImplServletAssetXMPSearchServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletAssetXMPSearchServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets, 
	void(* handler)(ComDayCqDamCoreImplServletAssetXMPSearchServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault 
 * \param cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault 
 * \param cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletBatchMetadataServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault, std::list<std::string> cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault, int cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources, 
	void(* handler)(ComDayCqDamCoreImplServletBatchMetadataServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault 
 * \param cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault 
 * \param cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletBatchMetadataServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault, std::list<std::string> cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault, int cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources, 
	void(* handler)(ComDayCqDamCoreImplServletBatchMetadataServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodresourceTypes 
 * \param slingPeriodservletPeriodmethods 
 * \param cqPerioddamPerioddrmPeriodenable 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletBinaryProviderServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodservletPeriodresourceTypes, std::list<std::string> slingPeriodservletPeriodmethods, bool cqPerioddamPerioddrmPeriodenable, 
	void(* handler)(ComDayCqDamCoreImplServletBinaryProviderServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodresourceTypes 
 * \param slingPeriodservletPeriodmethods 
 * \param cqPerioddamPerioddrmPeriodenable 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletBinaryProviderServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodservletPeriodresourceTypes, std::list<std::string> slingPeriodservletPeriodmethods, bool cqPerioddamPerioddrmPeriodenable, 
	void(* handler)(ComDayCqDamCoreImplServletBinaryProviderServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodbatchPeriodcollectionPeriodproperties 
 * \param cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletCollectionServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPerioddamPeriodbatchPeriodcollectionPeriodproperties, int cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections, 
	void(* handler)(ComDayCqDamCoreImplServletCollectionServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodbatchPeriodcollectionPeriodproperties 
 * \param cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletCollectionServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPerioddamPeriodbatchPeriodcollectionPeriodproperties, int cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections, 
	void(* handler)(ComDayCqDamCoreImplServletCollectionServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties 
 * \param cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletCollectionsServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties, int cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit, 
	void(* handler)(ComDayCqDamCoreImplServletCollectionsServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties 
 * \param cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletCollectionsServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties, int cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit, 
	void(* handler)(ComDayCqDamCoreImplServletCollectionsServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param more_Info 
 * \param SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletCompanionServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string more_Info, std::string SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket, 
	void(* handler)(ComDayCqDamCoreImplServletCompanionServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param more_Info 
 * \param SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletCompanionServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string more_Info, std::string SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket, 
	void(* handler)(ComDayCqDamCoreImplServletCompanionServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param detectDuplicate 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletCreateAssetServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool detectDuplicate, 
	void(* handler)(ComDayCqDamCoreImplServletCreateAssetServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param detectDuplicate 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletCreateAssetServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool detectDuplicate, 
	void(* handler)(ComDayCqDamCoreImplServletCreateAssetServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodmimePeriodtypePeriodblacklist 
 * \param cqPerioddamPeriodemptyPeriodmime 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletDamContentDispositionFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodmimePeriodtypePeriodblacklist, bool cqPerioddamPeriodemptyPeriodmime, 
	void(* handler)(ComDayCqDamCoreImplServletDamContentDispositionFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodmimePeriodtypePeriodblacklist 
 * \param cqPerioddamPeriodemptyPeriodmime 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletDamContentDispositionFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodmimePeriodtypePeriodblacklist, bool cqPerioddamPeriodemptyPeriodmime, 
	void(* handler)(ComDayCqDamCoreImplServletDamContentDispositionFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletGuidLookupFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled, 
	void(* handler)(ComDayCqDamCoreImplServletGuidLookupFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletGuidLookupFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled, 
	void(* handler)(ComDayCqDamCoreImplServletGuidLookupFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodsyncPeriodworkflowPeriodid 
 * \param cqPerioddamPeriodsyncPeriodfolderPeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletHealthCheckServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPerioddamPeriodsyncPeriodworkflowPeriodid, std::list<std::string> cqPerioddamPeriodsyncPeriodfolderPeriodtypes, 
	void(* handler)(ComDayCqDamCoreImplServletHealthCheckServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodsyncPeriodworkflowPeriodid 
 * \param cqPerioddamPeriodsyncPeriodfolderPeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletHealthCheckServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPerioddamPeriodsyncPeriodworkflowPeriodid, std::list<std::string> cqPerioddamPeriodsyncPeriodfolderPeriodtypes, 
	void(* handler)(ComDayCqDamCoreImplServletHealthCheckServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodresourceTypes 
 * \param slingPeriodservletPeriodmethods 
 * \param slingPeriodservletPeriodextensions 
 * \param slingPeriodservletPeriodselectors 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletMetadataGetServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodresourceTypes, std::string slingPeriodservletPeriodmethods, std::string slingPeriodservletPeriodextensions, std::string slingPeriodservletPeriodselectors, 
	void(* handler)(ComDayCqDamCoreImplServletMetadataGetServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodresourceTypes 
 * \param slingPeriodservletPeriodmethods 
 * \param slingPeriodservletPeriodextensions 
 * \param slingPeriodservletPeriodselectors 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletMetadataGetServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodresourceTypes, std::string slingPeriodservletPeriodmethods, std::string slingPeriodservletPeriodextensions, std::string slingPeriodservletPeriodselectors, 
	void(* handler)(ComDayCqDamCoreImplServletMetadataGetServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPerioddrmPeriodenable 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletMultipleLicenseAcceptServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPerioddrmPeriodenable, 
	void(* handler)(ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPerioddrmPeriodenable 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletMultipleLicenseAcceptServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPerioddrmPeriodenable, 
	void(* handler)(ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodresourceTypes 
 * \param slingPeriodservletPeriodmethods 
 * \param slingPeriodservletPeriodselectors 
 * \param downloadPeriodconfig 
 * \param viewPeriodselector 
 * \param sendEmail 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletResourceCollectionServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodservletPeriodresourceTypes, std::string slingPeriodservletPeriodmethods, std::string slingPeriodservletPeriodselectors, std::string downloadPeriodconfig, std::string viewPeriodselector, bool sendEmail, 
	void(* handler)(ComDayCqDamCoreImplServletResourceCollectionServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodresourceTypes 
 * \param slingPeriodservletPeriodmethods 
 * \param slingPeriodservletPeriodselectors 
 * \param downloadPeriodconfig 
 * \param viewPeriodselector 
 * \param sendEmail 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplServletResourceCollectionServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodservletPeriodresourceTypes, std::string slingPeriodservletPeriodmethods, std::string slingPeriodservletPeriodselectors, std::string downloadPeriodconfig, std::string viewPeriodselector, bool sendEmail, 
	void(* handler)(ComDayCqDamCoreImplServletResourceCollectionServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param createPreviewEnabled 
 * \param updatePreviewEnabled 
 * \param queueSize 
 * \param folderPreviewRenditionRegex 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool createPreviewEnabled, bool updatePreviewEnabled, int queueSize, std::string folderPreviewRenditionRegex, 
	void(* handler)(ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param createPreviewEnabled 
 * \param updatePreviewEnabled 
 * \param queueSize 
 * \param folderPreviewRenditionRegex 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool createPreviewEnabled, bool updatePreviewEnabled, int queueSize, std::string folderPreviewRenditionRegex, 
	void(* handler)(ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize 
 * \param cqPerioddamPeriodconfigPeriodunzipPeriodencoding 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplUnzipUnzipConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize, std::string cqPerioddamPeriodconfigPeriodunzipPeriodencoding, 
	void(* handler)(ComDayCqDamCoreImplUnzipUnzipConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize 
 * \param cqPerioddamPeriodconfigPeriodunzipPeriodencoding 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreImplUnzipUnzipConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize, std::string cqPerioddamPeriodconfigPeriodunzipPeriodencoding, 
	void(* handler)(ComDayCqDamCoreImplUnzipUnzipConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param cqPerioddamPeriodenablePeriodsha1 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreProcessExifToolExtractMetadataProcessSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, bool cqPerioddamPeriodenablePeriodsha1, 
	void(* handler)(ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param cqPerioddamPeriodenablePeriodsha1 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreProcessExifToolExtractMetadataProcessAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, bool cqPerioddamPeriodenablePeriodsha1, 
	void(* handler)(ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param cqPerioddamPeriodenablePeriodsha1 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreProcessExtractMetadataProcessSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, bool cqPerioddamPeriodenablePeriodsha1, 
	void(* handler)(ComDayCqDamCoreProcessExtractMetadataProcessInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param cqPerioddamPeriodenablePeriodsha1 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreProcessExtractMetadataProcessAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, bool cqPerioddamPeriodenablePeriodsha1, 
	void(* handler)(ComDayCqDamCoreProcessExtractMetadataProcessInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param cqPerioddamPeriodenablePeriodsha1 
 * \param cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreProcessMetadataProcessorProcessSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, bool cqPerioddamPeriodenablePeriodsha1, std::list<std::string> cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties, 
	void(* handler)(ComDayCqDamCoreProcessMetadataProcessorProcessInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param cqPerioddamPeriodenablePeriodsha1 
 * \param cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamCoreProcessMetadataProcessorProcessAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, bool cqPerioddamPeriodenablePeriodsha1, std::list<std::string> cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties, 
	void(* handler)(ComDayCqDamCoreProcessMetadataProcessorProcessInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param executablePeriodsearchpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamHandlerFfmpegLocatorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> executablePeriodsearchpath, 
	void(* handler)(ComDayCqDamHandlerFfmpegLocatorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param executablePeriodsearchpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamHandlerFfmpegLocatorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> executablePeriodsearchpath, 
	void(* handler)(ComDayCqDamHandlerFfmpegLocatorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param fontmgrPeriodsystemPeriodfontPerioddir 
 * \param fontmgrPeriodadobePeriodfontPerioddir 
 * \param fontmgrPeriodcustomerPeriodfontPerioddir 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, std::list<std::string> fontmgrPeriodsystemPeriodfontPerioddir, std::string fontmgrPeriodadobePeriodfontPerioddir, std::string fontmgrPeriodcustomerPeriodfontPerioddir, 
	void(* handler)(ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param fontmgrPeriodsystemPeriodfontPerioddir 
 * \param fontmgrPeriodadobePeriodfontPerioddir 
 * \param fontmgrPeriodcustomerPeriodfontPerioddir 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, std::list<std::string> fontmgrPeriodsystemPeriodfontPerioddir, std::string fontmgrPeriodadobePeriodfontPerioddir, std::string fontmgrPeriodcustomerPeriodfontPerioddir, 
	void(* handler)(ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param rasterPeriodannotation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamHandlerStandardPdfPdfHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool rasterPeriodannotation, 
	void(* handler)(ComDayCqDamHandlerStandardPdfPdfHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param rasterPeriodannotation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamHandlerStandardPdfPdfHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool rasterPeriodannotation, 
	void(* handler)(ComDayCqDamHandlerStandardPdfPdfHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param rasterPeriodannotation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamHandlerStandardPsPostScriptHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool rasterPeriodannotation, 
	void(* handler)(ComDayCqDamHandlerStandardPsPostScriptHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param rasterPeriodannotation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamHandlerStandardPsPostScriptHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool rasterPeriodannotation, 
	void(* handler)(ComDayCqDamHandlerStandardPsPostScriptHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param largeFileThreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamHandlerStandardPsdPsdHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int largeFileThreshold, 
	void(* handler)(ComDayCqDamHandlerStandardPsdPsdHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param largeFileThreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamHandlerStandardPsdPsdHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int largeFileThreshold, 
	void(* handler)(ComDayCqDamHandlerStandardPsdPsdHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enablePeriodmultisession 
 * \param idsPeriodccPeriodenable 
 * \param enablePeriodretry 
 * \param enablePeriodretryPeriodscripterror 
 * \param externalizerPerioddomainPeriodcqhost 
 * \param externalizerPerioddomainPeriodhttp 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamIdsImplIDSJobProcessorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enablePeriodmultisession, bool idsPeriodccPeriodenable, bool enablePeriodretry, bool enablePeriodretryPeriodscripterror, std::string externalizerPerioddomainPeriodcqhost, std::string externalizerPerioddomainPeriodhttp, 
	void(* handler)(ComDayCqDamIdsImplIDSJobProcessorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enablePeriodmultisession 
 * \param idsPeriodccPeriodenable 
 * \param enablePeriodretry 
 * \param enablePeriodretryPeriodscripterror 
 * \param externalizerPerioddomainPeriodcqhost 
 * \param externalizerPerioddomainPeriodhttp 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamIdsImplIDSJobProcessorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enablePeriodmultisession, bool idsPeriodccPeriodenable, bool enablePeriodretry, bool enablePeriodretryPeriodscripterror, std::string externalizerPerioddomainPeriodcqhost, std::string externalizerPerioddomainPeriodhttp, 
	void(* handler)(ComDayCqDamIdsImplIDSJobProcessorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPerioderrorsPeriodtoPeriodblacklist 
 * \param retryPeriodintervalPeriodtoPeriodwhitelist 
 * \param connectPeriodtimeout 
 * \param socketPeriodtimeout 
 * \param processPeriodlabel 
 * \param connectionPeriodusePeriodmax 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamIdsImplIDSPoolManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxPerioderrorsPeriodtoPeriodblacklist, int retryPeriodintervalPeriodtoPeriodwhitelist, int connectPeriodtimeout, int socketPeriodtimeout, std::string processPeriodlabel, int connectionPeriodusePeriodmax, 
	void(* handler)(ComDayCqDamIdsImplIDSPoolManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPerioderrorsPeriodtoPeriodblacklist 
 * \param retryPeriodintervalPeriodtoPeriodwhitelist 
 * \param connectPeriodtimeout 
 * \param socketPeriodtimeout 
 * \param processPeriodlabel 
 * \param connectionPeriodusePeriodmax 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamIdsImplIDSPoolManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxPerioderrorsPeriodtoPeriodblacklist, int retryPeriodintervalPeriodtoPeriodwhitelist, int connectPeriodtimeout, int socketPeriodtimeout, std::string processPeriodlabel, int connectionPeriodusePeriodmax, 
	void(* handler)(ComDayCqDamIdsImplIDSPoolManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param extractPeriodpages 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamInddImplHandlerIndesignXMPHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, bool extractPeriodpages, 
	void(* handler)(ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param extractPeriodpages 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamInddImplHandlerIndesignXMPHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, bool extractPeriodpages, 
	void(* handler)(ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param snippetcreationPeriodmaxcollections 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamInddImplServletSnippetCreationServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int snippetcreationPeriodmaxcollections, 
	void(* handler)(ComDayCqDamInddImplServletSnippetCreationServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param snippetcreationPeriodmaxcollections 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamInddImplServletSnippetCreationServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int snippetcreationPeriodmaxcollections, 
	void(* handler)(ComDayCqDamInddImplServletSnippetCreationServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param cqPerioddamPeriodinddPeriodpagesPeriodregex 
 * \param idsPeriodjobPerioddecoupled 
 * \param idsPeriodjobPeriodworkflowPeriodmodel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamInddProcessINDDMediaExtractProcessSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, std::string cqPerioddamPeriodinddPeriodpagesPeriodregex, bool idsPeriodjobPerioddecoupled, std::string idsPeriodjobPeriodworkflowPeriodmodel, 
	void(* handler)(ComDayCqDamInddProcessINDDMediaExtractProcessInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param cqPerioddamPeriodinddPeriodpagesPeriodregex 
 * \param idsPeriodjobPerioddecoupled 
 * \param idsPeriodjobPeriodworkflowPeriodmodel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamInddProcessINDDMediaExtractProcessAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, std::string cqPerioddamPeriodinddPeriodpagesPeriodregex, bool idsPeriodjobPerioddecoupled, std::string idsPeriodjobPeriodworkflowPeriodmodel, 
	void(* handler)(ComDayCqDamInddProcessINDDMediaExtractProcessInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param batchPeriodcommitPeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int batchPeriodcommitPeriodsize, 
	void(* handler)(ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param batchPeriodcommitPeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int batchPeriodcommitPeriodsize, 
	void(* handler)(ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, 
	void(* handler)(ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, 
	void(* handler)(ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param deletePeriodzipPeriodfile 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool deletePeriodzipPeriodfile, 
	void(* handler)(ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param deletePeriodzipPeriodfile 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool deletePeriodzipPeriodfile, 
	void(* handler)(ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled, 
	void(* handler)(ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled, 
	void(* handler)(ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param schedulerPeriodconcurrent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, bool schedulerPeriodconcurrent, 
	void(* handler)(ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param schedulerPeriodconcurrent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, bool schedulerPeriodconcurrent, 
	void(* handler)(ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodpostPeriodoperation 
 * \param slingPeriodservletPeriodmethods 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonPostServletsSetCreateHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodpostPeriodoperation, std::string slingPeriodservletPeriodmethods, 
	void(* handler)(ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodpostPeriodoperation 
 * \param slingPeriodservletPeriodmethods 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonPostServletsSetCreateHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodpostPeriodoperation, std::string slingPeriodservletPeriodmethods, 
	void(* handler)(ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodpostPeriodoperation 
 * \param slingPeriodservletPeriodmethods 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonPostServletsSetModifyHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodpostPeriodoperation, std::string slingPeriodservletPeriodmethods, 
	void(* handler)(ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodpostPeriodoperation 
 * \param slingPeriodservletPeriodmethods 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonPostServletsSetModifyHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodpostPeriodoperation, std::string slingPeriodservletPeriodmethods, 
	void(* handler)(ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, 
	void(* handler)(ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param processPeriodlabel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string processPeriodlabel, 
	void(* handler)(ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonS7damDamChangeEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled, 
	void(* handler)(ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonS7damDamChangeEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled, 
	void(* handler)(ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodpaths 
 * \param slingPeriodservletPeriodmethods 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonServletsS7damProductInfoServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodpaths, std::string slingPeriodservletPeriodmethods, 
	void(* handler)(ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodpaths 
 * \param slingPeriodservletPeriodmethods 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonServletsS7damProductInfoServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodpaths, std::string slingPeriodservletPeriodmethods, 
	void(* handler)(ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname, 
	void(* handler)(ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname 
 * \param cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname, int cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname, 
	void(* handler)(ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname 
 * \param cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7APIClientImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname, int cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname, 
	void(* handler)(ComDayCqDamScene7ImplScene7APIClientImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname 
 * \param cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7APIClientImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname, int cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname, 
	void(* handler)(ComDayCqDamScene7ImplScene7APIClientImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping, 
	void(* handler)(ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping, 
	void(* handler)(ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7ConfigurationEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled, 
	void(* handler)(ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7ConfigurationEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled, 
	void(* handler)(ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled 
 * \param cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7DamChangeEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled, std::list<std::string> cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths, 
	void(* handler)(ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled 
 * \param cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7DamChangeEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled, std::list<std::string> cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths, 
	void(* handler)(ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param scene7FlashTemplatesPeriodrti 
 * \param scene7FlashTemplatesPeriodrsi 
 * \param scene7FlashTemplatesPeriodrb 
 * \param scene7FlashTemplatesPeriodrurl 
 * \param scene7FlashTemplatePeriodurlFormatParameter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7FlashTemplatesServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string scene7FlashTemplatesPeriodrti, std::string scene7FlashTemplatesPeriodrsi, std::string scene7FlashTemplatesPeriodrb, std::string scene7FlashTemplatesPeriodrurl, std::string scene7FlashTemplatePeriodurlFormatParameter, 
	void(* handler)(ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param scene7FlashTemplatesPeriodrti 
 * \param scene7FlashTemplatesPeriodrsi 
 * \param scene7FlashTemplatesPeriodrb 
 * \param scene7FlashTemplatesPeriodrurl 
 * \param scene7FlashTemplatePeriodurlFormatParameter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7FlashTemplatesServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string scene7FlashTemplatesPeriodrti, std::string scene7FlashTemplatesPeriodrsi, std::string scene7FlashTemplatesPeriodrb, std::string scene7FlashTemplatesPeriodrurl, std::string scene7FlashTemplatePeriodurlFormatParameter, 
	void(* handler)(ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel 
 * \param cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7UploadServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel, int cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel, 
	void(* handler)(ComDayCqDamScene7ImplScene7UploadServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel 
 * \param cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamScene7ImplScene7UploadServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel, int cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel, 
	void(* handler)(ComDayCqDamScene7ImplScene7UploadServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param getCacheExpirationUnit 
 * \param getCacheExpirationValue 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string getCacheExpirationUnit, int getCacheExpirationValue, 
	void(* handler)(ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param getCacheExpirationUnit 
 * \param getCacheExpirationValue 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string getCacheExpirationUnit, int getCacheExpirationValue, 
	void(* handler)(ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param locale 
 * \param imsConfig 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamStockIntegrationImplConfigurationStockConfigurationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string locale, std::string imsConfig, 
	void(* handler)(ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param locale 
 * \param imsConfig 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamStockIntegrationImplConfigurationStockConfigurationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string locale, std::string imsConfig, 
	void(* handler)(ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamVideoImplServletVideoTestServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(ComDayCqDamVideoImplServletVideoTestServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqDamVideoImplServletVideoTestServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(ComDayCqDamVideoImplServletVideoTestServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxWidth 
 * \param maxHeight 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqExtwidgetServletsImageSpriteServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxWidth, int maxHeight, 
	void(* handler)(ComDayCqExtwidgetServletsImageSpriteServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxWidth 
 * \param maxHeight 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqExtwidgetServletsImageSpriteServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxWidth, int maxHeight, 
	void(* handler)(ComDayCqExtwidgetServletsImageSpriteServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fontpath 
 * \param oversamplingFactor 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqImageInternalFontFontHelperSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fontpath, int oversamplingFactor, 
	void(* handler)(ComDayCqImageInternalFontFontHelperInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fontpath 
 * \param oversamplingFactor 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqImageInternalFontFontHelperAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> fontpath, int oversamplingFactor, 
	void(* handler)(ComDayCqImageInternalFontFontHelperInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param clusterPeriodlevelPeriodenable 
 * \param clusterPeriodmasterPeriodlevel 
 * \param clusterPeriodslavePeriodlevel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqJcrclustersupportClusterStartLevelControllerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool clusterPeriodlevelPeriodenable, int clusterPeriodmasterPeriodlevel, int clusterPeriodslavePeriodlevel, 
	void(* handler)(ComDayCqJcrclustersupportClusterStartLevelControllerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param clusterPeriodlevelPeriodenable 
 * \param clusterPeriodmasterPeriodlevel 
 * \param clusterPeriodslavePeriodlevel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqJcrclustersupportClusterStartLevelControllerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool clusterPeriodlevelPeriodenable, int clusterPeriodmasterPeriodlevel, int clusterPeriodslavePeriodlevel, 
	void(* handler)(ComDayCqJcrclustersupportClusterStartLevelControllerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param smtpPeriodhost 
 * \param smtpPeriodport 
 * \param smtpPerioduser 
 * \param smtpPeriodpassword 
 * \param fromPeriodaddress 
 * \param smtpPeriodssl 
 * \param smtpPeriodstarttls 
 * \param debugPeriodemail 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMailerDefaultMailServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string smtpPeriodhost, int smtpPeriodport, std::string smtpPerioduser, std::string smtpPeriodpassword, std::string fromPeriodaddress, bool smtpPeriodssl, bool smtpPeriodstarttls, bool debugPeriodemail, 
	void(* handler)(ComDayCqMailerDefaultMailServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param smtpPeriodhost 
 * \param smtpPeriodport 
 * \param smtpPerioduser 
 * \param smtpPeriodpassword 
 * \param fromPeriodaddress 
 * \param smtpPeriodssl 
 * \param smtpPeriodstarttls 
 * \param debugPeriodemail 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMailerDefaultMailServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string smtpPeriodhost, int smtpPeriodport, std::string smtpPerioduser, std::string smtpPeriodpassword, std::string fromPeriodaddress, bool smtpPeriodssl, bool smtpPeriodstarttls, bool debugPeriodemail, 
	void(* handler)(ComDayCqMailerDefaultMailServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPeriodrecipientPeriodcount 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMailerImplCqMailingServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string maxPeriodrecipientPeriodcount, 
	void(* handler)(ComDayCqMailerImplCqMailingServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPeriodrecipientPeriodcount 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMailerImplCqMailingServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string maxPeriodrecipientPeriodcount, 
	void(* handler)(ComDayCqMailerImplCqMailingServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mailerPeriodemailPeriodcharset 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMailerImplEmailCqEmailTemplateFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mailerPeriodemailPeriodcharset, 
	void(* handler)(ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mailerPeriodemailPeriodcharset 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMailerImplEmailCqEmailTemplateFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mailerPeriodemailPeriodcharset, 
	void(* handler)(ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mailerPeriodemailPeriodembed 
 * \param mailerPeriodemailPeriodcharset 
 * \param mailerPeriodemailPeriodretrieverUserID 
 * \param mailerPeriodemailPeriodretrieverUserPWD 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMailerImplEmailCqRetrieverTemplateFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool mailerPeriodemailPeriodembed, std::string mailerPeriodemailPeriodcharset, std::string mailerPeriodemailPeriodretrieverUserID, std::string mailerPeriodemailPeriodretrieverUserPWD, 
	void(* handler)(ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mailerPeriodemailPeriodembed 
 * \param mailerPeriodemailPeriodcharset 
 * \param mailerPeriodemailPeriodretrieverUserID 
 * \param mailerPeriodemailPeriodretrieverUserPWD 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMailerImplEmailCqRetrieverTemplateFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool mailerPeriodemailPeriodembed, std::string mailerPeriodemailPeriodcharset, std::string mailerPeriodemailPeriodretrieverUserID, std::string mailerPeriodemailPeriodretrieverUserPWD, 
	void(* handler)(ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param aemPeriodmcmPeriodcampaignPeriodformConstraints 
 * \param aemPeriodmcmPeriodcampaignPeriodpublicUrl 
 * \param aemPeriodmcmPeriodcampaignPeriodrelaxedSSL 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmCampaignImplIntegrationConfigImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> aemPeriodmcmPeriodcampaignPeriodformConstraints, std::string aemPeriodmcmPeriodcampaignPeriodpublicUrl, bool aemPeriodmcmPeriodcampaignPeriodrelaxedSSL, 
	void(* handler)(ComDayCqMcmCampaignImplIntegrationConfigImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param aemPeriodmcmPeriodcampaignPeriodformConstraints 
 * \param aemPeriodmcmPeriodcampaignPeriodpublicUrl 
 * \param aemPeriodmcmPeriodcampaignPeriodrelaxedSSL 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmCampaignImplIntegrationConfigImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> aemPeriodmcmPeriodcampaignPeriodformConstraints, std::string aemPeriodmcmPeriodcampaignPeriodpublicUrl, bool aemPeriodmcmPeriodcampaignPeriodrelaxedSSL, 
	void(* handler)(ComDayCqMcmCampaignImplIntegrationConfigImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmCampaignImporterPersonalizedTextHandlerFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fromPeriodaddress 
 * \param senderPeriodhost 
 * \param maxPeriodbouncePeriodcount 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmCoreNewsletterNewsletterEmailServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string fromPeriodaddress, std::string senderPeriodhost, std::string maxPeriodbouncePeriodcount, 
	void(* handler)(ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fromPeriodaddress 
 * \param senderPeriodhost 
 * \param maxPeriodbouncePeriodcount 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmCoreNewsletterNewsletterEmailServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string fromPeriodaddress, std::string senderPeriodhost, std::string maxPeriodbouncePeriodcount, 
	void(* handler)(ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param experiencePeriodindirection 
 * \param touchpointPeriodindirection 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmImplMCMConfigurationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> experiencePeriodindirection, std::list<std::string> touchpointPeriodindirection, 
	void(* handler)(ComDayCqMcmImplMCMConfigurationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param experiencePeriodindirection 
 * \param touchpointPeriodindirection 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmImplMCMConfigurationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> experiencePeriodindirection, std::list<std::string> touchpointPeriodindirection, 
	void(* handler)(ComDayCqMcmImplMCMConfigurationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqNotificationImplNotificationServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, 
	void(* handler)(ComDayCqNotificationImplNotificationServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqNotificationImplNotificationServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, 
	void(* handler)(ComDayCqNotificationImplNotificationServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param forcelocation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqPersonalizationImplServletsTargetingConfigurationServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool forcelocation, 
	void(* handler)(ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param forcelocation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqPersonalizationImplServletsTargetingConfigurationServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool forcelocation, 
	void(* handler)(ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param id 
 * \param enabled 
 * \param reference 
 * \param interval 
 * \param expression 
 * \param source 
 * \param target 
 * \param login 
 * \param password 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqPollingImporterImplManagedPollConfigImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string id, bool enabled, bool reference, int interval, std::string expression, std::string source, std::string target, std::string login, std::string password, 
	void(* handler)(ComDayCqPollingImporterImplManagedPollConfigImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param id 
 * \param enabled 
 * \param reference 
 * \param interval 
 * \param expression 
 * \param source 
 * \param target 
 * \param login 
 * \param password 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqPollingImporterImplManagedPollConfigImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string id, bool enabled, bool reference, int interval, std::string expression, std::string source, std::string target, std::string login, std::string password, 
	void(* handler)(ComDayCqPollingImporterImplManagedPollConfigImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param importerPerioduser 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqPollingImporterImplManagedPollingImporterImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string importerPerioduser, 
	void(* handler)(ComDayCqPollingImporterImplManagedPollingImporterImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param importerPerioduser 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqPollingImporterImplManagedPollingImporterImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string importerPerioduser, 
	void(* handler)(ComDayCqPollingImporterImplManagedPollingImporterImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param importerPeriodminPeriodinterval 
 * \param importerPerioduser 
 * \param excludePeriodpaths 
 * \param includePeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqPollingImporterImplPollingImporterImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int importerPeriodminPeriodinterval, std::string importerPerioduser, std::list<std::string> excludePeriodpaths, std::list<std::string> includePeriodpaths, 
	void(* handler)(ComDayCqPollingImporterImplPollingImporterImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param importerPeriodminPeriodinterval 
 * \param importerPerioduser 
 * \param excludePeriodpaths 
 * \param includePeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqPollingImporterImplPollingImporterImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int importerPeriodminPeriodinterval, std::string importerPerioduser, std::list<std::string> excludePeriodpaths, std::list<std::string> includePeriodpaths, 
	void(* handler)(ComDayCqPollingImporterImplPollingImporterImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationAuditReplicationEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, 
	void(* handler)(ComDayCqReplicationAuditReplicationEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationAuditReplicationEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, 
	void(* handler)(ComDayCqReplicationAuditReplicationEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param host 
 * \param port 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationContentStaticContentBuilderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string host, int port, 
	void(* handler)(ComDayCqReplicationContentStaticContentBuilderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param host 
 * \param port 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationContentStaticContentBuilderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string host, int port, 
	void(* handler)(ComDayCqReplicationContentStaticContentBuilderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jobPeriodtopics 
 * \param serviceUserPeriodtarget 
 * \param agentProviderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplAgentManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jobPeriodtopics, std::string serviceUserPeriodtarget, std::string agentProviderPeriodtarget, 
	void(* handler)(ComDayCqReplicationImplAgentManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jobPeriodtopics 
 * \param serviceUserPeriodtarget 
 * \param agentProviderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplAgentManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jobPeriodtopics, std::string serviceUserPeriodtarget, std::string agentProviderPeriodtarget, 
	void(* handler)(ComDayCqReplicationImplAgentManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param binaryPeriodthreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplContentDurboBinaryLessContentBuilderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int binaryPeriodthreshold, 
	void(* handler)(ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param binaryPeriodthreshold 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplContentDurboBinaryLessContentBuilderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int binaryPeriodthreshold, 
	void(* handler)(ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param preservePeriodhierarchyPeriodnodes 
 * \param ignorePeriodversioning 
 * \param importPeriodacl 
 * \param savePeriodthreshold 
 * \param preservePerioduserPeriodpaths 
 * \param preservePerioduuid 
 * \param preservePerioduuidPeriodnodetypes 
 * \param preservePerioduuidPeriodsubtrees 
 * \param autoPeriodcommit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplContentDurboDurboImportConfigurationProvSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool preservePeriodhierarchyPeriodnodes, bool ignorePeriodversioning, bool importPeriodacl, int savePeriodthreshold, bool preservePerioduserPeriodpaths, bool preservePerioduuid, std::list<std::string> preservePerioduuidPeriodnodetypes, std::list<std::string> preservePerioduuidPeriodsubtrees, bool autoPeriodcommit, 
	void(* handler)(ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param preservePeriodhierarchyPeriodnodes 
 * \param ignorePeriodversioning 
 * \param importPeriodacl 
 * \param savePeriodthreshold 
 * \param preservePerioduserPeriodpaths 
 * \param preservePerioduuid 
 * \param preservePerioduuidPeriodnodetypes 
 * \param preservePerioduuidPeriodsubtrees 
 * \param autoPeriodcommit 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplContentDurboDurboImportConfigurationProvAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool preservePeriodhierarchyPeriodnodes, bool ignorePeriodversioning, bool importPeriodacl, int savePeriodthreshold, bool preservePerioduserPeriodpaths, bool preservePerioduuid, std::list<std::string> preservePerioduuidPeriodnodetypes, std::list<std::string> preservePerioduuidPeriodsubtrees, bool autoPeriodcommit, 
	void(* handler)(ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param replicationPeriodcontentPerioduseFileStorage 
 * \param replicationPeriodcontentPeriodmaxCommitAttempts 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplReplicationContentFactoryProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool replicationPeriodcontentPerioduseFileStorage, int replicationPeriodcontentPeriodmaxCommitAttempts, 
	void(* handler)(ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param replicationPeriodcontentPerioduseFileStorage 
 * \param replicationPeriodcontentPeriodmaxCommitAttempts 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplReplicationContentFactoryProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool replicationPeriodcontentPerioduseFileStorage, int replicationPeriodcontentPeriodmaxCommitAttempts, 
	void(* handler)(ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param receiverPeriodtmpfilePeriodthreshold 
 * \param receiverPeriodpackagesPeriodusePeriodinstall 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplReplicationReceiverImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int receiverPeriodtmpfilePeriodthreshold, bool receiverPeriodpackagesPeriodusePeriodinstall, 
	void(* handler)(ComDayCqReplicationImplReplicationReceiverImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param receiverPeriodtmpfilePeriodthreshold 
 * \param receiverPeriodpackagesPeriodusePeriodinstall 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplReplicationReceiverImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int receiverPeriodtmpfilePeriodthreshold, bool receiverPeriodpackagesPeriodusePeriodinstall, 
	void(* handler)(ComDayCqReplicationImplReplicationReceiverImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param distributeEvents 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplReplicatorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool distributeEvents, 
	void(* handler)(ComDayCqReplicationImplReplicatorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param distributeEvents 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplReplicatorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool distributeEvents, 
	void(* handler)(ComDayCqReplicationImplReplicatorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodperiod 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplReverseReplicatorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int schedulerPeriodperiod, 
	void(* handler)(ComDayCqReplicationImplReverseReplicatorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodperiod 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplReverseReplicatorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int schedulerPeriodperiod, 
	void(* handler)(ComDayCqReplicationImplReverseReplicatorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disabledPeriodcipherPeriodsuites 
 * \param enabledPeriodcipherPeriodsuites 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplTransportBinaryLessTransportHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> disabledPeriodcipherPeriodsuites, std::list<std::string> enabledPeriodcipherPeriodsuites, 
	void(* handler)(ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disabledPeriodcipherPeriodsuites 
 * \param enabledPeriodcipherPeriodsuites 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplTransportBinaryLessTransportHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> disabledPeriodcipherPeriodsuites, std::list<std::string> enabledPeriodcipherPeriodsuites, 
	void(* handler)(ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disabledPeriodcipherPeriodsuites 
 * \param enabledPeriodcipherPeriodsuites 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplTransportHttpSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> disabledPeriodcipherPeriodsuites, std::list<std::string> enabledPeriodcipherPeriodsuites, 
	void(* handler)(ComDayCqReplicationImplTransportHttpInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disabledPeriodcipherPeriodsuites 
 * \param enabledPeriodcipherPeriodsuites 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReplicationImplTransportHttpAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> disabledPeriodcipherPeriodsuites, std::list<std::string> enabledPeriodcipherPeriodsuites, 
	void(* handler)(ComDayCqReplicationImplTransportHttpInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param repcachePeriodenable 
 * \param repcachePeriodttl 
 * \param repcachePeriodmax 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReportingImplCacheCacheImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool repcachePeriodenable, int repcachePeriodttl, int repcachePeriodmax, 
	void(* handler)(ComDayCqReportingImplCacheCacheImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param repcachePeriodenable 
 * \param repcachePeriodttl 
 * \param repcachePeriodmax 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReportingImplCacheCacheImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool repcachePeriodenable, int repcachePeriodttl, int repcachePeriodmax, 
	void(* handler)(ComDayCqReportingImplCacheCacheImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param repconfPeriodtimezone 
 * \param repconfPeriodlocale 
 * \param repconfPeriodsnapshots 
 * \param repconfPeriodrepdir 
 * \param repconfPeriodhourofday 
 * \param repconfPeriodminofhour 
 * \param repconfPeriodmaxrows 
 * \param repconfPeriodfakedata 
 * \param repconfPeriodsnapshotuser 
 * \param repconfPeriodenforcesnapshotuser 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReportingImplConfigServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string repconfPeriodtimezone, std::string repconfPeriodlocale, std::string repconfPeriodsnapshots, std::string repconfPeriodrepdir, int repconfPeriodhourofday, int repconfPeriodminofhour, int repconfPeriodmaxrows, bool repconfPeriodfakedata, std::string repconfPeriodsnapshotuser, bool repconfPeriodenforcesnapshotuser, 
	void(* handler)(ComDayCqReportingImplConfigServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param repconfPeriodtimezone 
 * \param repconfPeriodlocale 
 * \param repconfPeriodsnapshots 
 * \param repconfPeriodrepdir 
 * \param repconfPeriodhourofday 
 * \param repconfPeriodminofhour 
 * \param repconfPeriodmaxrows 
 * \param repconfPeriodfakedata 
 * \param repconfPeriodsnapshotuser 
 * \param repconfPeriodenforcesnapshotuser 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReportingImplConfigServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string repconfPeriodtimezone, std::string repconfPeriodlocale, std::string repconfPeriodsnapshots, std::string repconfPeriodrepdir, int repconfPeriodhourofday, int repconfPeriodminofhour, int repconfPeriodmaxrows, bool repconfPeriodfakedata, std::string repconfPeriodsnapshotuser, bool repconfPeriodenforcesnapshotuser, 
	void(* handler)(ComDayCqReportingImplConfigServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param requestPeriodlogPeriodoutput 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReportingImplRLogAnalyzerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string requestPeriodlogPeriodoutput, 
	void(* handler)(ComDayCqReportingImplRLogAnalyzerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param requestPeriodlogPeriodoutput 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqReportingImplRLogAnalyzerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string requestPeriodlogPeriodoutput, 
	void(* handler)(ComDayCqReportingImplRLogAnalyzerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodperiod 
 * \param schedulerPeriodconcurrent 
 * \param servicePeriodbadLinkToleranceInterval 
 * \param servicePeriodcheckOverridePatterns 
 * \param servicePeriodcacheBrokenInternalLinks 
 * \param servicePeriodspecialLinkPrefix 
 * \param servicePeriodspecialLinkPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqRewriterLinkcheckerImplLinkCheckerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int schedulerPeriodperiod, bool schedulerPeriodconcurrent, int servicePeriodbadLinkToleranceInterval, std::list<std::string> servicePeriodcheckOverridePatterns, bool servicePeriodcacheBrokenInternalLinks, std::list<std::string> servicePeriodspecialLinkPrefix, std::list<std::string> servicePeriodspecialLinkPatterns, 
	void(* handler)(ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodperiod 
 * \param schedulerPeriodconcurrent 
 * \param servicePeriodbadLinkToleranceInterval 
 * \param servicePeriodcheckOverridePatterns 
 * \param servicePeriodcacheBrokenInternalLinks 
 * \param servicePeriodspecialLinkPrefix 
 * \param servicePeriodspecialLinkPatterns 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqRewriterLinkcheckerImplLinkCheckerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int schedulerPeriodperiod, bool schedulerPeriodconcurrent, int servicePeriodbadLinkToleranceInterval, std::list<std::string> servicePeriodcheckOverridePatterns, bool servicePeriodcacheBrokenInternalLinks, std::list<std::string> servicePeriodspecialLinkPrefix, std::list<std::string> servicePeriodspecialLinkPatterns, 
	void(* handler)(ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodperiod 
 * \param schedulerPeriodconcurrent 
 * \param goodLinkTestInterval 
 * \param badLinkTestInterval 
 * \param linkUnusedInterval 
 * \param connectionPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqRewriterLinkcheckerImplLinkCheckerTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int schedulerPeriodperiod, bool schedulerPeriodconcurrent, int goodLinkTestInterval, int badLinkTestInterval, int linkUnusedInterval, int connectionPeriodtimeout, 
	void(* handler)(ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodperiod 
 * \param schedulerPeriodconcurrent 
 * \param goodLinkTestInterval 
 * \param badLinkTestInterval 
 * \param linkUnusedInterval 
 * \param connectionPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqRewriterLinkcheckerImplLinkCheckerTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int schedulerPeriodperiod, bool schedulerPeriodconcurrent, int goodLinkTestInterval, int badLinkTestInterval, int linkUnusedInterval, int connectionPeriodtimeout, 
	void(* handler)(ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param linkcheckertransformerPerioddisableRewriting 
 * \param linkcheckertransformerPerioddisableChecking 
 * \param linkcheckertransformerPeriodmapCacheSize 
 * \param linkcheckertransformerPeriodstrictExtensionCheck 
 * \param linkcheckertransformerPeriodstripHtmltExtension 
 * \param linkcheckertransformerPeriodrewriteElements 
 * \param linkcheckertransformerPeriodstripExtensionPathBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool linkcheckertransformerPerioddisableRewriting, bool linkcheckertransformerPerioddisableChecking, int linkcheckertransformerPeriodmapCacheSize, bool linkcheckertransformerPeriodstrictExtensionCheck, bool linkcheckertransformerPeriodstripHtmltExtension, std::list<std::string> linkcheckertransformerPeriodrewriteElements, std::list<std::string> linkcheckertransformerPeriodstripExtensionPathBlacklist, 
	void(* handler)(ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param linkcheckertransformerPerioddisableRewriting 
 * \param linkcheckertransformerPerioddisableChecking 
 * \param linkcheckertransformerPeriodmapCacheSize 
 * \param linkcheckertransformerPeriodstrictExtensionCheck 
 * \param linkcheckertransformerPeriodstripHtmltExtension 
 * \param linkcheckertransformerPeriodrewriteElements 
 * \param linkcheckertransformerPeriodstripExtensionPathBlacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool linkcheckertransformerPerioddisableRewriting, bool linkcheckertransformerPerioddisableChecking, int linkcheckertransformerPeriodmapCacheSize, bool linkcheckertransformerPeriodstrictExtensionCheck, bool linkcheckertransformerPeriodstripHtmltExtension, std::list<std::string> linkcheckertransformerPeriodrewriteElements, std::list<std::string> linkcheckertransformerPeriodstripExtensionPathBlacklist, 
	void(* handler)(ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodmaxLinksPerHost 
 * \param servicePeriodsaveExternalLinkReferences 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqRewriterLinkcheckerImplLinkInfoStorageImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodmaxLinksPerHost, bool servicePeriodsaveExternalLinkReferences, 
	void(* handler)(ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodmaxLinksPerHost 
 * \param servicePeriodsaveExternalLinkReferences 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqRewriterLinkcheckerImplLinkInfoStorageImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodmaxLinksPerHost, bool servicePeriodsaveExternalLinkReferences, 
	void(* handler)(ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param htmlparserPeriodprocessTags 
 * \param htmlparserPeriodpreserveCamelCase 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqRewriterProcessorImplHtmlParserFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> htmlparserPeriodprocessTags, bool htmlparserPeriodpreserveCamelCase, 
	void(* handler)(ComDayCqRewriterProcessorImplHtmlParserFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param htmlparserPeriodprocessTags 
 * \param htmlparserPeriodpreserveCamelCase 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqRewriterProcessorImplHtmlParserFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> htmlparserPeriodprocessTags, bool htmlparserPeriodpreserveCamelCase, 
	void(* handler)(ComDayCqRewriterProcessorImplHtmlParserFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param excerptPeriodproperties 
 * \param cachePeriodmaxPeriodentries 
 * \param cachePeriodentryPeriodlifetime 
 * \param xpathPeriodunion 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqSearchImplBuilderQueryBuilderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> excerptPeriodproperties, int cachePeriodmaxPeriodentries, int cachePeriodentryPeriodlifetime, bool xpathPeriodunion, 
	void(* handler)(ComDayCqSearchImplBuilderQueryBuilderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param excerptPeriodproperties 
 * \param cachePeriodmaxPeriodentries 
 * \param cachePeriodentryPeriodlifetime 
 * \param xpathPeriodunion 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqSearchImplBuilderQueryBuilderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> excerptPeriodproperties, int cachePeriodmaxPeriodentries, int cachePeriodentryPeriodlifetime, bool xpathPeriodunion, 
	void(* handler)(ComDayCqSearchImplBuilderQueryBuilderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pathBuilderPeriodtarget 
 * \param suggestPeriodbasepath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqSearchSuggestImplSuggestionIndexManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pathBuilderPeriodtarget, std::string suggestPeriodbasepath, 
	void(* handler)(ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pathBuilderPeriodtarget 
 * \param suggestPeriodbasepath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqSearchSuggestImplSuggestionIndexManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pathBuilderPeriodtarget, std::string suggestPeriodbasepath, 
	void(* handler)(ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsearchpromotePeriodconfighandlerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodsearchpromotePeriodconfighandlerPeriodenabled, 
	void(* handler)(ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsearchpromotePeriodconfighandlerPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodsearchpromotePeriodconfighandlerPeriodenabled, 
	void(* handler)(ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri 
 * \param cqPeriodsearchpromotePeriodconfigurationPeriodenvironment 
 * \param connectionPeriodtimeout 
 * \param socketPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqSearchpromoteImplSearchPromoteServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri, std::string cqPeriodsearchpromotePeriodconfigurationPeriodenvironment, int connectionPeriodtimeout, int socketPeriodtimeout, 
	void(* handler)(ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri 
 * \param cqPeriodsearchpromotePeriodconfigurationPeriodenvironment 
 * \param connectionPeriodtimeout 
 * \param socketPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqSearchpromoteImplSearchPromoteServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri, std::string cqPeriodsearchpromotePeriodconfigurationPeriodenvironment, int connectionPeriodtimeout, int socketPeriodtimeout, 
	void(* handler)(ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodaclsetupPeriodrules 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqSecurityACLSetupSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodaclsetupPeriodrules, 
	void(* handler)(ComDayCqSecurityACLSetupInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodaclsetupPeriodrules 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqSecurityACLSetupAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodaclsetupPeriodrules, 
	void(* handler)(ComDayCqSecurityACLSetupInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodperiod 
 * \param schedulerPeriodconcurrent 
 * \param path 
 * \param workspace 
 * \param keywordsPath 
 * \param asyncEntries 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqStatisticsImplStatisticsServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int schedulerPeriodperiod, bool schedulerPeriodconcurrent, std::string path, std::string workspace, std::string keywordsPath, bool asyncEntries, 
	void(* handler)(ComDayCqStatisticsImplStatisticsServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodperiod 
 * \param schedulerPeriodconcurrent 
 * \param path 
 * \param workspace 
 * \param keywordsPath 
 * \param asyncEntries 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqStatisticsImplStatisticsServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int schedulerPeriodperiod, bool schedulerPeriodconcurrent, std::string path, std::string workspace, std::string keywordsPath, bool asyncEntries, 
	void(* handler)(ComDayCqStatisticsImplStatisticsServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param validationPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqTaggingImplJcrTagManagerFactoryImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool validationPeriodenabled, 
	void(* handler)(ComDayCqTaggingImplJcrTagManagerFactoryImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param validationPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqTaggingImplJcrTagManagerFactoryImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool validationPeriodenabled, 
	void(* handler)(ComDayCqTaggingImplJcrTagManagerFactoryImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param ignorePath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqTaggingImplSearchTagPredicateEvaluatorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool ignorePath, 
	void(* handler)(ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param ignorePath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqTaggingImplSearchTagPredicateEvaluatorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool ignorePath, 
	void(* handler)(ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqTaggingImplTagGarbageCollectorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, 
	void(* handler)(ComDayCqTaggingImplTagGarbageCollectorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqTaggingImplTagGarbageCollectorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, 
	void(* handler)(ComDayCqTaggingImplTagGarbageCollectorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodpagesupdatehandlerPeriodimageresourcetypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodpagesupdatehandlerPeriodimageresourcetypes, 
	void(* handler)(ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodpagesupdatehandlerPeriodimageresourcetypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodpagesupdatehandlerPeriodimageresourcetypes, 
	void(* handler)(ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks, std::list<std::string> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs, std::list<std::string> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages, std::string cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern, std::string cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern, std::string cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace, 
	void(* handler)(ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern 
 * \param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks, std::list<std::string> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs, std::list<std::string> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages, std::string cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern, std::string cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern, std::string cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace, 
	void(* handler)(ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param authoringUIModeServicePerioddefault 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplAuthoringUIModeServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string authoringUIModeServicePerioddefault, 
	void(* handler)(ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param authoringUIModeServicePerioddefault 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplAuthoringUIModeServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string authoringUIModeServicePerioddefault, 
	void(* handler)(ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param wcmcommandservletPerioddeleteWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplCommandsWCMCommandServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> wcmcommandservletPerioddeleteWhitelist, 
	void(* handler)(ComDayCqWcmCoreImplCommandsWCMCommandServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param wcmcommandservletPerioddeleteWhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplCommandsWCMCommandServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> wcmcommandservletPerioddeleteWhitelist, 
	void(* handler)(ComDayCqWcmCoreImplCommandsWCMCommandServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param dimPerioddefaultPeriodmode 
 * \param dimPeriodappcachePeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string dimPerioddefaultPeriodmode, bool dimPeriodappcachePeriodenabled, 
	void(* handler)(ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param dimPerioddefaultPeriodmode 
 * \param dimPeriodappcachePeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string dimPerioddefaultPeriodmode, bool dimPeriodappcachePeriodenabled, 
	void(* handler)(ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param configured 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplEventPageEventAuditListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string configured, 
	void(* handler)(ComDayCqWcmCoreImplEventPageEventAuditListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param configured 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplEventPageEventAuditListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string configured, 
	void(* handler)(ComDayCqWcmCoreImplEventPageEventAuditListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param paths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplEventPagePostProcessorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> paths, 
	void(* handler)(ComDayCqWcmCoreImplEventPagePostProcessorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param paths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplEventPagePostProcessorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> paths, 
	void(* handler)(ComDayCqWcmCoreImplEventPagePostProcessorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param paths 
 * \param excludedPaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplEventRepositoryChangeEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> paths, std::list<std::string> excludedPaths, 
	void(* handler)(ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param paths 
 * \param excludedPaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplEventRepositoryChangeEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> paths, std::list<std::string> excludedPaths, 
	void(* handler)(ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param paths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplEventTemplatePostProcessorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string paths, 
	void(* handler)(ComDayCqWcmCoreImplEventTemplatePostProcessorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param paths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplEventTemplatePostProcessorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string paths, 
	void(* handler)(ComDayCqWcmCoreImplEventTemplatePostProcessorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param langmgrPeriodlistPeriodpath 
 * \param langmgrPeriodcountryPerioddefault 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplLanguageManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string langmgrPeriodlistPeriodpath, std::list<std::string> langmgrPeriodcountryPerioddefault, 
	void(* handler)(ComDayCqWcmCoreImplLanguageManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param langmgrPeriodlistPeriodpath 
 * \param langmgrPeriodcountryPerioddefault 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplLanguageManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string langmgrPeriodlistPeriodpath, std::list<std::string> langmgrPeriodcountryPerioddefault, 
	void(* handler)(ComDayCqWcmCoreImplLanguageManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param linkPeriodexpiredPeriodprefix 
 * \param linkPeriodexpiredPeriodremove 
 * \param linkPeriodexpiredPeriodsuffix 
 * \param linkPeriodinvalidPeriodprefix 
 * \param linkPeriodinvalidPeriodremove 
 * \param linkPeriodinvalidPeriodsuffix 
 * \param linkPeriodpredatedPeriodprefix 
 * \param linkPeriodpredatedPeriodremove 
 * \param linkPeriodpredatedPeriodsuffix 
 * \param linkPeriodwcmmodes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string linkPeriodexpiredPeriodprefix, bool linkPeriodexpiredPeriodremove, std::string linkPeriodexpiredPeriodsuffix, std::string linkPeriodinvalidPeriodprefix, bool linkPeriodinvalidPeriodremove, std::string linkPeriodinvalidPeriodsuffix, std::string linkPeriodpredatedPeriodprefix, bool linkPeriodpredatedPeriodremove, std::string linkPeriodpredatedPeriodsuffix, std::list<std::string> linkPeriodwcmmodes, 
	void(* handler)(ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param linkPeriodexpiredPeriodprefix 
 * \param linkPeriodexpiredPeriodremove 
 * \param linkPeriodexpiredPeriodsuffix 
 * \param linkPeriodinvalidPeriodprefix 
 * \param linkPeriodinvalidPeriodremove 
 * \param linkPeriodinvalidPeriodsuffix 
 * \param linkPeriodpredatedPeriodprefix 
 * \param linkPeriodpredatedPeriodremove 
 * \param linkPeriodpredatedPeriodsuffix 
 * \param linkPeriodwcmmodes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string linkPeriodexpiredPeriodprefix, bool linkPeriodexpiredPeriodremove, std::string linkPeriodexpiredPeriodsuffix, std::string linkPeriodinvalidPeriodprefix, bool linkPeriodinvalidPeriodremove, std::string linkPeriodinvalidPeriodsuffix, std::string linkPeriodpredatedPeriodprefix, bool linkPeriodpredatedPeriodremove, std::string linkPeriodpredatedPeriodsuffix, std::list<std::string> linkPeriodwcmmodes, 
	void(* handler)(ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault 
 * \param pagePeriodinfoPeriodproviderPeriodpropertyPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplPagePageInfoAggregatorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault, std::string pagePeriodinfoPeriodproviderPeriodpropertyPeriodname, 
	void(* handler)(ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault 
 * \param pagePeriodinfoPeriodproviderPeriodpropertyPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplPagePageInfoAggregatorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault, std::string pagePeriodinfoPeriodproviderPeriodpropertyPeriodname, 
	void(* handler)(ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param illegalCharMapping 
 * \param pageSubTreeActivationCheck 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplPagePageManagerFactoryImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string illegalCharMapping, bool pageSubTreeActivationCheck, 
	void(* handler)(ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param illegalCharMapping 
 * \param pageSubTreeActivationCheck 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplPagePageManagerFactoryImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string illegalCharMapping, bool pageSubTreeActivationCheck, 
	void(* handler)(ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param contentReferenceConfigPeriodresourceTypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplReferencesContentContentReferenceConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> contentReferenceConfigPeriodresourceTypes, 
	void(* handler)(ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param contentReferenceConfigPeriodresourceTypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplReferencesContentContentReferenceConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> contentReferenceConfigPeriodresourceTypes, 
	void(* handler)(ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param damPeriodshowexpired 
 * \param damPeriodshowhidden 
 * \param tagTitleSearch 
 * \param guessTotal 
 * \param damPeriodexpiryProperty 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool damPeriodshowexpired, bool damPeriodshowhidden, bool tagTitleSearch, std::string guessTotal, std::string damPeriodexpiryProperty, 
	void(* handler)(ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param damPeriodshowexpired 
 * \param damPeriodshowhidden 
 * \param tagTitleSearch 
 * \param guessTotal 
 * \param damPeriodexpiryProperty 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool damPeriodshowexpired, bool damPeriodshowhidden, bool tagTitleSearch, std::string guessTotal, std::string damPeriodexpiryProperty, 
	void(* handler)(ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param itemPeriodresourcePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> itemPeriodresourcePeriodtypes, 
	void(* handler)(ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param itemPeriodresourcePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> itemPeriodresourcePeriodtypes, 
	void(* handler)(ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param guessTotal 
 * \param tagTitleSearch 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsContentfinderPageViewHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string guessTotal, bool tagTitleSearch, 
	void(* handler)(ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param guessTotal 
 * \param tagTitleSearch 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsContentfinderPageViewHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string guessTotal, bool tagTitleSearch, 
	void(* handler)(ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param scope 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsFindReplaceServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> scope, 
	void(* handler)(ComDayCqWcmCoreImplServletsFindReplaceServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param scope 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsFindReplaceServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> scope, 
	void(* handler)(ComDayCqWcmCoreImplServletsFindReplaceServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param referencesearchservletPeriodmaxReferencesPerPage 
 * \param referencesearchservletPeriodmaxPages 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsReferenceSearchServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int referencesearchservletPeriodmaxReferencesPerPage, int referencesearchservletPeriodmaxPages, 
	void(* handler)(ComDayCqWcmCoreImplServletsReferenceSearchServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param referencesearchservletPeriodmaxReferencesPerPage 
 * \param referencesearchservletPeriodmaxPages 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsReferenceSearchServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int referencesearchservletPeriodmaxReferencesPerPage, int referencesearchservletPeriodmaxPages, 
	void(* handler)(ComDayCqWcmCoreImplServletsReferenceSearchServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param workspace 
 * \param dimensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsThumbnailServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string workspace, std::list<std::string> dimensions, 
	void(* handler)(ComDayCqWcmCoreImplServletsThumbnailServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param workspace 
 * \param dimensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplServletsThumbnailServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string workspace, std::list<std::string> dimensions, 
	void(* handler)(ComDayCqWcmCoreImplServletsThumbnailServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param nonValidChars 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplUtilsDefaultPageNameValidatorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string nonValidChars, 
	void(* handler)(ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param nonValidChars 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplUtilsDefaultPageNameValidatorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string nonValidChars, 
	void(* handler)(ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodexternalizerPerioddomain 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplVariantsPageVariantsProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string defaultPeriodexternalizerPerioddomain, 
	void(* handler)(ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodexternalizerPerioddomain 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplVariantsPageVariantsProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string defaultPeriodexternalizerPerioddomain, 
	void(* handler)(ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param versionmanagerPeriodcreateVersionOnActivation 
 * \param versionmanagerPeriodpurgingEnabled 
 * \param versionmanagerPeriodpurgePaths 
 * \param versionmanagerPeriodivPaths 
 * \param versionmanagerPeriodmaxAgeDays 
 * \param versionmanagerPeriodmaxNumberVersions 
 * \param versionmanagerPeriodminNumberVersions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplVersionManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool versionmanagerPeriodcreateVersionOnActivation, bool versionmanagerPeriodpurgingEnabled, std::list<std::string> versionmanagerPeriodpurgePaths, std::list<std::string> versionmanagerPeriodivPaths, int versionmanagerPeriodmaxAgeDays, int versionmanagerPeriodmaxNumberVersions, int versionmanagerPeriodminNumberVersions, 
	void(* handler)(ComDayCqWcmCoreImplVersionManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param versionmanagerPeriodcreateVersionOnActivation 
 * \param versionmanagerPeriodpurgingEnabled 
 * \param versionmanagerPeriodpurgePaths 
 * \param versionmanagerPeriodivPaths 
 * \param versionmanagerPeriodmaxAgeDays 
 * \param versionmanagerPeriodmaxNumberVersions 
 * \param versionmanagerPeriodminNumberVersions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplVersionManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool versionmanagerPeriodcreateVersionOnActivation, bool versionmanagerPeriodpurgingEnabled, std::list<std::string> versionmanagerPeriodpurgePaths, std::list<std::string> versionmanagerPeriodivPaths, int versionmanagerPeriodmaxAgeDays, int versionmanagerPeriodmaxNumberVersions, int versionmanagerPeriodminNumberVersions, 
	void(* handler)(ComDayCqWcmCoreImplVersionManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param versionpurgePeriodpaths 
 * \param versionpurgePeriodrecursive 
 * \param versionpurgePeriodmaxVersions 
 * \param versionpurgePeriodminVersions 
 * \param versionpurgePeriodmaxAgeDays 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplVersionPurgeTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> versionpurgePeriodpaths, bool versionpurgePeriodrecursive, int versionpurgePeriodmaxVersions, int versionpurgePeriodminVersions, int versionpurgePeriodmaxAgeDays, 
	void(* handler)(ComDayCqWcmCoreImplVersionPurgeTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param versionpurgePeriodpaths 
 * \param versionpurgePeriodrecursive 
 * \param versionpurgePeriodmaxVersions 
 * \param versionpurgePeriodminVersions 
 * \param versionpurgePeriodmaxAgeDays 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplVersionPurgeTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> versionpurgePeriodpaths, bool versionpurgePeriodrecursive, int versionpurgePeriodmaxVersions, int versionpurgePeriodminVersions, int versionpurgePeriodmaxAgeDays, 
	void(* handler)(ComDayCqWcmCoreImplVersionPurgeTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param wcmdbgfilterPeriodenabled 
 * \param wcmdbgfilterPeriodjspDebug 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplWCMDebugFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool wcmdbgfilterPeriodenabled, bool wcmdbgfilterPeriodjspDebug, 
	void(* handler)(ComDayCqWcmCoreImplWCMDebugFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param wcmdbgfilterPeriodenabled 
 * \param wcmdbgfilterPeriodjspDebug 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplWCMDebugFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool wcmdbgfilterPeriodenabled, bool wcmdbgfilterPeriodjspDebug, 
	void(* handler)(ComDayCqWcmCoreImplWCMDebugFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param wcmdevmodefilterPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplWCMDeveloperModeFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool wcmdevmodefilterPeriodenabled, 
	void(* handler)(ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param wcmdevmodefilterPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplWCMDeveloperModeFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool wcmdevmodefilterPeriodenabled, 
	void(* handler)(ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param filterPeriodorder 
 * \param filterPeriodscope 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplWarpTimeWarpFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string filterPeriodorder, std::string filterPeriodscope, 
	void(* handler)(ComDayCqWcmCoreImplWarpTimeWarpFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param filterPeriodorder 
 * \param filterPeriodscope 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreImplWarpTimeWarpFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string filterPeriodorder, std::string filterPeriodscope, 
	void(* handler)(ComDayCqWcmCoreImplWarpTimeWarpFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mvtstatisticsPeriodtrackingurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreMvtMVTStatisticsImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mvtstatisticsPeriodtrackingurl, 
	void(* handler)(ComDayCqWcmCoreMvtMVTStatisticsImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mvtstatisticsPeriodtrackingurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreMvtMVTStatisticsImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mvtstatisticsPeriodtrackingurl, 
	void(* handler)(ComDayCqWcmCoreMvtMVTStatisticsImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pageviewstatisticsPeriodtrackingurl 
 * \param pageviewstatisticsPeriodtrackingscriptPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreStatsPageViewStatisticsImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pageviewstatisticsPeriodtrackingurl, std::string pageviewstatisticsPeriodtrackingscriptPeriodenabled, 
	void(* handler)(ComDayCqWcmCoreStatsPageViewStatisticsImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pageviewstatisticsPeriodtrackingurl 
 * \param pageviewstatisticsPeriodtrackingscriptPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreStatsPageViewStatisticsImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pageviewstatisticsPeriodtrackingurl, std::string pageviewstatisticsPeriodtrackingscriptPeriodenabled, 
	void(* handler)(ComDayCqWcmCoreStatsPageViewStatisticsImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param wcmfilterPeriodmode 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreWCMRequestFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string wcmfilterPeriodmode, 
	void(* handler)(ComDayCqWcmCoreWCMRequestFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param wcmfilterPeriodmode 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmCoreWCMRequestFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string wcmfilterPeriodmode, 
	void(* handler)(ComDayCqWcmCoreWCMRequestFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param extractPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterDesignPackageImporterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> extractPeriodfilter, 
	void(* handler)(ComDayCqWcmDesignimporterDesignPackageImporterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param extractPeriodfilter 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterDesignPackageImporterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> extractPeriodfilter, 
	void(* handler)(ComDayCqWcmDesignimporterDesignPackageImporterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param filepattern 
 * \param buildPeriodpagePeriodnodes 
 * \param buildPeriodclientPeriodlibs 
 * \param buildPeriodcanvasPeriodcomponent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterImplCanvasBuilderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string filepattern, bool buildPeriodpagePeriodnodes, bool buildPeriodclientPeriodlibs, bool buildPeriodcanvasPeriodcomponent, 
	void(* handler)(ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param filepattern 
 * \param buildPeriodpagePeriodnodes 
 * \param buildPeriodclientPeriodlibs 
 * \param buildPeriodcanvasPeriodcomponent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterImplCanvasBuilderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string filepattern, bool buildPeriodpagePeriodnodes, bool buildPeriodclientPeriodlibs, bool buildPeriodcanvasPeriodcomponent, 
	void(* handler)(ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param minThreadPoolSize 
 * \param maxThreadPoolSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int minThreadPoolSize, int maxThreadPoolSize, 
	void(* handler)(ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param minThreadPoolSize 
 * \param maxThreadPoolSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int minThreadPoolSize, int maxThreadPoolSize, 
	void(* handler)(ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param searchPeriodpattern 
 * \param replacePeriodpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterImplEntryPreprocessorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string searchPeriodpattern, std::string replacePeriodpattern, 
	void(* handler)(ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param searchPeriodpattern 
 * \param replacePeriodpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterImplEntryPreprocessorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string searchPeriodpattern, std::string replacePeriodpattern, 
	void(* handler)(ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param filepattern 
 * \param devicePeriodgroups 
 * \param buildPeriodpagePeriodnodes 
 * \param buildPeriodclientPeriodlibs 
 * \param buildPeriodcanvasPeriodcomponent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterImplMobileCanvasBuilderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string filepattern, std::list<std::string> devicePeriodgroups, bool buildPeriodpagePeriodnodes, bool buildPeriodclientPeriodlibs, bool buildPeriodcanvasPeriodcomponent, 
	void(* handler)(ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param filepattern 
 * \param devicePeriodgroups 
 * \param buildPeriodpagePeriodnodes 
 * \param buildPeriodclientPeriodlibs 
 * \param buildPeriodcanvasPeriodcomponent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterImplMobileCanvasBuilderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string filepattern, std::list<std::string> devicePeriodgroups, bool buildPeriodpagePeriodnodes, bool buildPeriodclientPeriodlibs, bool buildPeriodcanvasPeriodcomponent, 
	void(* handler)(ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param componentPeriodresourceType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, std::string componentPeriodresourceType, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param tagpattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string tagpattern, 
	void(* handler)(ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodname 
 * \param slingPeriodservletPeriodresourceTypes 
 * \param slingPeriodservletPeriodselectors 
 * \param slingPeriodservletPeriodmethods 
 * \param formsPeriodformchooserservletPeriodadvansesearchPeriodrequire 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationFormsImplFormChooserServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string servicePeriodname, std::string slingPeriodservletPeriodresourceTypes, std::string slingPeriodservletPeriodselectors, std::list<std::string> slingPeriodservletPeriodmethods, bool formsPeriodformchooserservletPeriodadvansesearchPeriodrequire, 
	void(* handler)(ComDayCqWcmFoundationFormsImplFormChooserServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodname 
 * \param slingPeriodservletPeriodresourceTypes 
 * \param slingPeriodservletPeriodselectors 
 * \param slingPeriodservletPeriodmethods 
 * \param formsPeriodformchooserservletPeriodadvansesearchPeriodrequire 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationFormsImplFormChooserServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string servicePeriodname, std::string slingPeriodservletPeriodresourceTypes, std::string slingPeriodservletPeriodselectors, std::list<std::string> slingPeriodservletPeriodmethods, bool formsPeriodformchooserservletPeriodadvansesearchPeriodrequire, 
	void(* handler)(ComDayCqWcmFoundationFormsImplFormChooserServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param formsPeriodformparagraphpostprocessorPeriodenabled 
 * \param formsPeriodformparagraphpostprocessorPeriodformresourcetypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationFormsImplFormParagraphPostProcessorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool formsPeriodformparagraphpostprocessorPeriodenabled, std::list<std::string> formsPeriodformparagraphpostprocessorPeriodformresourcetypes, 
	void(* handler)(ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param formsPeriodformparagraphpostprocessorPeriodenabled 
 * \param formsPeriodformparagraphpostprocessorPeriodformresourcetypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationFormsImplFormParagraphPostProcessorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool formsPeriodformparagraphpostprocessorPeriodenabled, std::list<std::string> formsPeriodformparagraphpostprocessorPeriodformresourcetypes, 
	void(* handler)(ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param namePeriodwhitelist 
 * \param allowPeriodexpressions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationFormsImplFormsHandlingServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string namePeriodwhitelist, bool allowPeriodexpressions, 
	void(* handler)(ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param namePeriodwhitelist 
 * \param allowPeriodexpressions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationFormsImplFormsHandlingServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string namePeriodwhitelist, bool allowPeriodexpressions, 
	void(* handler)(ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodresourceTypes 
 * \param slingPeriodservletPeriodselectors 
 * \param resourcePeriodwhitelist 
 * \param resourcePeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationFormsImplMailServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodresourceTypes, std::string slingPeriodservletPeriodselectors, std::list<std::string> resourcePeriodwhitelist, std::string resourcePeriodblacklist, 
	void(* handler)(ComDayCqWcmFoundationFormsImplMailServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodresourceTypes 
 * \param slingPeriodservletPeriodselectors 
 * \param resourcePeriodwhitelist 
 * \param resourcePeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationFormsImplMailServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodservletPeriodresourceTypes, std::string slingPeriodservletPeriodselectors, std::list<std::string> resourcePeriodwhitelist, std::string resourcePeriodblacklist, 
	void(* handler)(ComDayCqWcmFoundationFormsImplMailServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param adaptPeriodsupportedPeriodwidths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationImplAdaptiveImageComponentServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> adaptPeriodsupportedPeriodwidths, 
	void(* handler)(ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param adaptPeriodsupportedPeriodwidths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationImplAdaptiveImageComponentServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> adaptPeriodsupportedPeriodwidths, 
	void(* handler)(ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param authPeriodhttpPeriodnologin 
 * \param authPeriodhttpPeriodrealm 
 * \param authPerioddefaultPeriodloginpage 
 * \param authPeriodcredPeriodform 
 * \param authPeriodcredPeriodutf8 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationImplHTTPAuthHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, bool authPeriodhttpPeriodnologin, std::string authPeriodhttpPeriodrealm, std::string authPerioddefaultPeriodloginpage, std::list<std::string> authPeriodcredPeriodform, std::list<std::string> authPeriodcredPeriodutf8, 
	void(* handler)(ComDayCqWcmFoundationImplHTTPAuthHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param authPeriodhttpPeriodnologin 
 * \param authPeriodhttpPeriodrealm 
 * \param authPerioddefaultPeriodloginpage 
 * \param authPeriodcredPeriodform 
 * \param authPeriodcredPeriodutf8 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationImplHTTPAuthHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, bool authPeriodhttpPeriodnologin, std::string authPeriodhttpPeriodrealm, std::string authPerioddefaultPeriodloginpage, std::list<std::string> authPeriodcredPeriodform, std::list<std::string> authPeriodcredPeriodutf8, 
	void(* handler)(ComDayCqWcmFoundationImplHTTPAuthHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodauthPeriodrequirements 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationImplPageImpressionsTrackerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodauthPeriodrequirements, 
	void(* handler)(ComDayCqWcmFoundationImplPageImpressionsTrackerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodauthPeriodrequirements 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationImplPageImpressionsTrackerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodauthPeriodrequirements, 
	void(* handler)(ComDayCqWcmFoundationImplPageImpressionsTrackerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param excludedPeriodresourcePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationImplPageRedirectServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> excludedPeriodresourcePeriodtypes, 
	void(* handler)(ComDayCqWcmFoundationImplPageRedirectServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param excludedPeriodresourcePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationImplPageRedirectServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> excludedPeriodresourcePeriodtypes, 
	void(* handler)(ComDayCqWcmFoundationImplPageRedirectServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodattachmentPeriodtypePeriodblacklist 
 * \param baselinePeriodattachmentPeriodtypePeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> defaultPeriodattachmentPeriodtypePeriodblacklist, std::list<std::string> baselinePeriodattachmentPeriodtypePeriodblacklist, 
	void(* handler)(ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param defaultPeriodattachmentPeriodtypePeriodblacklist 
 * \param baselinePeriodattachmentPeriodtypePeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> defaultPeriodattachmentPeriodtypePeriodblacklist, std::list<std::string> baselinePeriodattachmentPeriodtypePeriodblacklist, 
	void(* handler)(ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param parameterPeriodwhitelist 
 * \param parameterPeriodwhitelistPeriodprefixes 
 * \param binaryPeriodparameterPeriodwhitelist 
 * \param modifierPeriodwhitelist 
 * \param operationPeriodwhitelist 
 * \param operationPeriodwhitelistPeriodprefixes 
 * \param typehintPeriodwhitelist 
 * \param resourcetypePeriodwhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> parameterPeriodwhitelist, std::list<std::string> parameterPeriodwhitelistPeriodprefixes, std::list<std::string> binaryPeriodparameterPeriodwhitelist, std::list<std::string> modifierPeriodwhitelist, std::list<std::string> operationPeriodwhitelist, std::list<std::string> operationPeriodwhitelistPeriodprefixes, std::list<std::string> typehintPeriodwhitelist, std::list<std::string> resourcetypePeriodwhitelist, 
	void(* handler)(ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param parameterPeriodwhitelist 
 * \param parameterPeriodwhitelistPeriodprefixes 
 * \param binaryPeriodparameterPeriodwhitelist 
 * \param modifierPeriodwhitelist 
 * \param operationPeriodwhitelist 
 * \param operationPeriodwhitelistPeriodprefixes 
 * \param typehintPeriodwhitelist 
 * \param resourcetypePeriodwhitelist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> parameterPeriodwhitelist, std::list<std::string> parameterPeriodwhitelistPeriodprefixes, std::list<std::string> binaryPeriodparameterPeriodwhitelist, std::list<std::string> modifierPeriodwhitelist, std::list<std::string> operationPeriodwhitelist, std::list<std::string> operationPeriodwhitelistPeriodprefixes, std::list<std::string> typehintPeriodwhitelist, std::list<std::string> resourcetypePeriodwhitelist, 
	void(* handler)(ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param devicePeriodinfoPeriodtransformerPeriodenabled 
 * \param devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool devicePeriodinfoPeriodtransformerPeriodenabled, std::string devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle, 
	void(* handler)(ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param devicePeriodinfoPeriodtransformerPeriodenabled 
 * \param devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool devicePeriodinfoPeriodtransformerPeriodenabled, std::string devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle, 
	void(* handler)(ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param redirectPeriodenabled 
 * \param redirectPeriodstatsPeriodenabled 
 * \param redirectPeriodextensions 
 * \param redirectPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMobileCoreImplRedirectRedirectFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool redirectPeriodenabled, bool redirectPeriodstatsPeriodenabled, std::list<std::string> redirectPeriodextensions, std::list<std::string> redirectPeriodpaths, 
	void(* handler)(ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param redirectPeriodenabled 
 * \param redirectPeriodstatsPeriodenabled 
 * \param redirectPeriodextensions 
 * \param redirectPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMobileCoreImplRedirectRedirectFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool redirectPeriodenabled, bool redirectPeriodstatsPeriodenabled, std::list<std::string> redirectPeriodextensions, std::list<std::string> redirectPeriodpaths, 
	void(* handler)(ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param contentcopyactionPeriodorderPeriodstyle 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsContentCopyActionFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, std::string contentcopyactionPeriodorderPeriodstyle, 
	void(* handler)(ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param contentcopyactionPeriodorderPeriodstyle 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsContentCopyActionFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, std::string contentcopyactionPeriodorderPeriodstyle, 
	void(* handler)(ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsContentDeleteActionFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, 
	void(* handler)(ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsContentDeleteActionFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, 
	void(* handler)(ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsContentUpdateActionFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin, 
	void(* handler)(ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsContentUpdateActionFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin, 
	void(* handler)(ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsOrderChildrenActionFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, 
	void(* handler)(ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsOrderChildrenActionFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, 
	void(* handler)(ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsPageMoveActionFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, bool cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate, 
	void(* handler)(ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsPageMoveActionFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, bool cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate, 
	void(* handler)(ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsReferencesUpdateActionFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, bool cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested, 
	void(* handler)(ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, bool cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested, 
	void(* handler)(ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsVersionCopyActionFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, 
	void(* handler)(ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems 
 * \param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplActionsVersionCopyActionFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, std::list<std::string> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, 
	void(* handler)(ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param liverelationshipmgrPeriodrelationsconfigPerioddefault 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplLiveRelationshipManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string liverelationshipmgrPeriodrelationsconfigPerioddefault, 
	void(* handler)(ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param liverelationshipmgrPeriodrelationsconfigPerioddefault 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplLiveRelationshipManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string liverelationshipmgrPeriodrelationsconfigPerioddefault, 
	void(* handler)(ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param rolloutmgrPeriodexcludedpropsPerioddefault 
 * \param rolloutmgrPeriodexcludedparagraphpropsPerioddefault 
 * \param rolloutmgrPeriodexcludednodetypesPerioddefault 
 * \param rolloutmgrPeriodthreadpoolPeriodmaxsize 
 * \param rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime 
 * \param rolloutmgrPeriodthreadpoolPeriodpriority 
 * \param rolloutmgrPeriodcommitPeriodsize 
 * \param rolloutmgrPeriodconflicthandlingPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplRolloutManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, std::list<std::string> rolloutmgrPeriodexcludedpropsPerioddefault, std::list<std::string> rolloutmgrPeriodexcludedparagraphpropsPerioddefault, std::list<std::string> rolloutmgrPeriodexcludednodetypesPerioddefault, int rolloutmgrPeriodthreadpoolPeriodmaxsize, int rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime, std::string rolloutmgrPeriodthreadpoolPeriodpriority, int rolloutmgrPeriodcommitPeriodsize, bool rolloutmgrPeriodconflicthandlingPeriodenabled, 
	void(* handler)(ComDayCqWcmMsmImplRolloutManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param rolloutmgrPeriodexcludedpropsPerioddefault 
 * \param rolloutmgrPeriodexcludedparagraphpropsPerioddefault 
 * \param rolloutmgrPeriodexcludednodetypesPerioddefault 
 * \param rolloutmgrPeriodthreadpoolPeriodmaxsize 
 * \param rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime 
 * \param rolloutmgrPeriodthreadpoolPeriodpriority 
 * \param rolloutmgrPeriodcommitPeriodsize 
 * \param rolloutmgrPeriodconflicthandlingPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplRolloutManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, std::list<std::string> rolloutmgrPeriodexcludedpropsPerioddefault, std::list<std::string> rolloutmgrPeriodexcludedparagraphpropsPerioddefault, std::list<std::string> rolloutmgrPeriodexcludednodetypesPerioddefault, int rolloutmgrPeriodthreadpoolPeriodmaxsize, int rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime, std::string rolloutmgrPeriodthreadpoolPeriodpriority, int rolloutmgrPeriodcommitPeriodsize, bool rolloutmgrPeriodconflicthandlingPeriodenabled, 
	void(* handler)(ComDayCqWcmMsmImplRolloutManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param auditlogservletPerioddefaultPeriodeventsPeriodcount 
 * \param auditlogservletPerioddefaultPeriodpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplServletsAuditLogServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int auditlogservletPerioddefaultPeriodeventsPeriodcount, std::string auditlogservletPerioddefaultPeriodpath, 
	void(* handler)(ComDayCqWcmMsmImplServletsAuditLogServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param auditlogservletPerioddefaultPeriodeventsPeriodcount 
 * \param auditlogservletPerioddefaultPeriodpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmMsmImplServletsAuditLogServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int auditlogservletPerioddefaultPeriodeventsPeriodcount, std::string auditlogservletPerioddefaultPeriodpath, 
	void(* handler)(ComDayCqWcmMsmImplServletsAuditLogServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param emailPeriodfrom 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmNotificationEmailImplEmailChannelSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string emailPeriodfrom, 
	void(* handler)(ComDayCqWcmNotificationEmailImplEmailChannelInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param emailPeriodfrom 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmNotificationEmailImplEmailChannelAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string emailPeriodfrom, 
	void(* handler)(ComDayCqWcmNotificationEmailImplEmailChannelInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmNotificationImplNotificationManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> eventPeriodtopics, 
	void(* handler)(ComDayCqWcmNotificationImplNotificationManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodtopics 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmNotificationImplNotificationManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> eventPeriodtopics, 
	void(* handler)(ComDayCqWcmNotificationImplNotificationManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmScriptingImplBVPManagerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines, 
	void(* handler)(ComDayCqWcmScriptingImplBVPManagerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmScriptingImplBVPManagerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines, 
	void(* handler)(ComDayCqWcmScriptingImplBVPManagerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodundoPeriodenabled 
 * \param cqPeriodwcmPeriodundoPeriodpath 
 * \param cqPeriodwcmPeriodundoPeriodvalidity 
 * \param cqPeriodwcmPeriodundoPeriodsteps 
 * \param cqPeriodwcmPeriodundoPeriodpersistence 
 * \param cqPeriodwcmPeriodundoPeriodpersistencePeriodmode 
 * \param cqPeriodwcmPeriodundoPeriodmarkermode 
 * \param cqPeriodwcmPeriodundoPeriodwhitelist 
 * \param cqPeriodwcmPeriodundoPeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmUndoUndoConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodwcmPeriodundoPeriodenabled, std::string cqPeriodwcmPeriodundoPeriodpath, int cqPeriodwcmPeriodundoPeriodvalidity, int cqPeriodwcmPeriodundoPeriodsteps, std::string cqPeriodwcmPeriodundoPeriodpersistence, bool cqPeriodwcmPeriodundoPeriodpersistencePeriodmode, std::string cqPeriodwcmPeriodundoPeriodmarkermode, std::list<std::string> cqPeriodwcmPeriodundoPeriodwhitelist, std::list<std::string> cqPeriodwcmPeriodundoPeriodblacklist, 
	void(* handler)(ComDayCqWcmUndoUndoConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cqPeriodwcmPeriodundoPeriodenabled 
 * \param cqPeriodwcmPeriodundoPeriodpath 
 * \param cqPeriodwcmPeriodundoPeriodvalidity 
 * \param cqPeriodwcmPeriodundoPeriodsteps 
 * \param cqPeriodwcmPeriodundoPeriodpersistence 
 * \param cqPeriodwcmPeriodundoPeriodpersistencePeriodmode 
 * \param cqPeriodwcmPeriodundoPeriodmarkermode 
 * \param cqPeriodwcmPeriodundoPeriodwhitelist 
 * \param cqPeriodwcmPeriodundoPeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmUndoUndoConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool cqPeriodwcmPeriodundoPeriodenabled, std::string cqPeriodwcmPeriodundoPeriodpath, int cqPeriodwcmPeriodundoPeriodvalidity, int cqPeriodwcmPeriodundoPeriodsteps, std::string cqPeriodwcmPeriodundoPeriodpersistence, bool cqPeriodwcmPeriodundoPeriodpersistencePeriodmode, std::string cqPeriodwcmPeriodundoPeriodmarkermode, std::list<std::string> cqPeriodwcmPeriodundoPeriodwhitelist, std::list<std::string> cqPeriodwcmPeriodundoPeriodblacklist, 
	void(* handler)(ComDayCqWcmUndoUndoConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param flush_agents 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmWebservicesupportImplReplicationEventListenerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> flush_agents, 
	void(* handler)(ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param flush_agents 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmWebservicesupportImplReplicationEventListenerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> flush_agents, 
	void(* handler)(ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param minThreadPoolSize 
 * \param maxThreadPoolSize 
 * \param cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate 
 * \param cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmWorkflowImplWcmWorkflowServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, int minThreadPoolSize, int maxThreadPoolSize, bool cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate, std::list<std::string> cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist, 
	void(* handler)(ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param eventPeriodfilter 
 * \param minThreadPoolSize 
 * \param maxThreadPoolSize 
 * \param cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate 
 * \param cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmWorkflowImplWcmWorkflowServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string eventPeriodfilter, int minThreadPoolSize, int maxThreadPoolSize, bool cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate, std::list<std::string> cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist, 
	void(* handler)(ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param workflowpackageinfoproviderPeriodfilter 
 * \param workflowpackageinfoproviderPeriodfilterPeriodrootpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmWorkflowImplWorkflowPackageInfoProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> workflowpackageinfoproviderPeriodfilter, std::string workflowpackageinfoproviderPeriodfilterPeriodrootpath, 
	void(* handler)(ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param workflowpackageinfoproviderPeriodfilter 
 * \param workflowpackageinfoproviderPeriodfilterPeriodrootpath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWcmWorkflowImplWorkflowPackageInfoProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> workflowpackageinfoproviderPeriodfilter, std::string workflowpackageinfoproviderPeriodfilterPeriodrootpath, 
	void(* handler)(ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param htmllibmanagerPeriodclientmanager 
 * \param htmllibmanagerPerioddebug 
 * \param htmllibmanagerPerioddebugPeriodconsole 
 * \param htmllibmanagerPerioddebugPeriodinitPeriodjs 
 * \param htmllibmanagerPerioddefaultthemename 
 * \param htmllibmanagerPerioddefaultuserthemename 
 * \param htmllibmanagerPeriodfirebuglitePeriodpath 
 * \param htmllibmanagerPeriodforceCQUrlInfo 
 * \param htmllibmanagerPeriodgzip 
 * \param htmllibmanagerPeriodmaxage 
 * \param htmllibmanagerPeriodmaxDataUriSize 
 * \param htmllibmanagerPeriodminify 
 * \param htmllibmanagerPeriodpathPeriodlist 
 * \param htmllibmanagerPeriodtiming 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWidgetImplHtmlLibraryManagerImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string htmllibmanagerPeriodclientmanager, bool htmllibmanagerPerioddebug, bool htmllibmanagerPerioddebugPeriodconsole, std::string htmllibmanagerPerioddebugPeriodinitPeriodjs, std::string htmllibmanagerPerioddefaultthemename, std::string htmllibmanagerPerioddefaultuserthemename, std::string htmllibmanagerPeriodfirebuglitePeriodpath, bool htmllibmanagerPeriodforceCQUrlInfo, bool htmllibmanagerPeriodgzip, int htmllibmanagerPeriodmaxage, int htmllibmanagerPeriodmaxDataUriSize, bool htmllibmanagerPeriodminify, std::list<std::string> htmllibmanagerPeriodpathPeriodlist, bool htmllibmanagerPeriodtiming, 
	void(* handler)(ComDayCqWidgetImplHtmlLibraryManagerImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param htmllibmanagerPeriodclientmanager 
 * \param htmllibmanagerPerioddebug 
 * \param htmllibmanagerPerioddebugPeriodconsole 
 * \param htmllibmanagerPerioddebugPeriodinitPeriodjs 
 * \param htmllibmanagerPerioddefaultthemename 
 * \param htmllibmanagerPerioddefaultuserthemename 
 * \param htmllibmanagerPeriodfirebuglitePeriodpath 
 * \param htmllibmanagerPeriodforceCQUrlInfo 
 * \param htmllibmanagerPeriodgzip 
 * \param htmllibmanagerPeriodmaxage 
 * \param htmllibmanagerPeriodmaxDataUriSize 
 * \param htmllibmanagerPeriodminify 
 * \param htmllibmanagerPeriodpathPeriodlist 
 * \param htmllibmanagerPeriodtiming 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWidgetImplHtmlLibraryManagerImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string htmllibmanagerPeriodclientmanager, bool htmllibmanagerPerioddebug, bool htmllibmanagerPerioddebugPeriodconsole, std::string htmllibmanagerPerioddebugPeriodinitPeriodjs, std::string htmllibmanagerPerioddefaultthemename, std::string htmllibmanagerPerioddefaultuserthemename, std::string htmllibmanagerPeriodfirebuglitePeriodpath, bool htmllibmanagerPeriodforceCQUrlInfo, bool htmllibmanagerPeriodgzip, int htmllibmanagerPeriodmaxage, int htmllibmanagerPeriodmaxDataUriSize, bool htmllibmanagerPeriodminify, std::list<std::string> htmllibmanagerPeriodpathPeriodlist, bool htmllibmanagerPeriodtiming, 
	void(* handler)(ComDayCqWidgetImplHtmlLibraryManagerImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param extendablePeriodwidgets 
 * \param widgetextensionproviderPerioddebug 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWidgetImplWidgetExtensionProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> extendablePeriodwidgets, bool widgetextensionproviderPerioddebug, 
	void(* handler)(ComDayCqWidgetImplWidgetExtensionProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param extendablePeriodwidgets 
 * \param widgetextensionproviderPerioddebug 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWidgetImplWidgetExtensionProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> extendablePeriodwidgets, bool widgetextensionproviderPerioddebug, 
	void(* handler)(ComDayCqWidgetImplWidgetExtensionProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fromPeriodaddress 
 * \param hostPeriodprefix 
 * \param notifyPeriodonabort 
 * \param notifyPeriodoncomplete 
 * \param notifyPeriodoncontainercomplete 
 * \param notifyPerioduseronly 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWorkflowImplEmailEMailNotificationServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string fromPeriodaddress, std::string hostPeriodprefix, bool notifyPeriodonabort, bool notifyPeriodoncomplete, bool notifyPeriodoncontainercomplete, bool notifyPerioduseronly, 
	void(* handler)(ComDayCqWorkflowImplEmailEMailNotificationServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param fromPeriodaddress 
 * \param hostPeriodprefix 
 * \param notifyPeriodonabort 
 * \param notifyPeriodoncomplete 
 * \param notifyPeriodoncontainercomplete 
 * \param notifyPerioduseronly 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWorkflowImplEmailEMailNotificationServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string fromPeriodaddress, std::string hostPeriodprefix, bool notifyPeriodonabort, bool notifyPeriodoncomplete, bool notifyPeriodoncontainercomplete, bool notifyPerioduseronly, 
	void(* handler)(ComDayCqWorkflowImplEmailEMailNotificationServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param notifyPeriodonupdate 
 * \param notifyPeriodoncomplete 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWorkflowImplEmailTaskEMailNotificationServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool notifyPeriodonupdate, bool notifyPeriodoncomplete, 
	void(* handler)(ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param notifyPeriodonupdate 
 * \param notifyPeriodoncomplete 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCqWorkflowImplEmailTaskEMailNotificationServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool notifyPeriodonupdate, bool notifyPeriodoncomplete, 
	void(* handler)(ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param tokenPeriodrequiredPeriodattr 
 * \param tokenPeriodalternatePeriodurl 
 * \param tokenPeriodencapsulated 
 * \param skipPeriodtokenPeriodrefresh 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, std::string tokenPeriodrequiredPeriodattr, std::string tokenPeriodalternatePeriodurl, bool tokenPeriodencapsulated, std::list<std::string> skipPeriodtokenPeriodrefresh, 
	void(* handler)(ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param tokenPeriodrequiredPeriodattr 
 * \param tokenPeriodalternatePeriodurl 
 * \param tokenPeriodencapsulated 
 * \param skipPeriodtokenPeriodrefresh 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, std::string tokenPeriodrequiredPeriodattr, std::string tokenPeriodalternatePeriodurl, bool tokenPeriodencapsulated, std::list<std::string> skipPeriodtokenPeriodrefresh, 
	void(* handler)(ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enablePeriodtokenPeriodcleanupPeriodtask 
 * \param schedulerPeriodexpression 
 * \param batchPeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCrxSecurityTokenImplTokenCleanupTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enablePeriodtokenPeriodcleanupPeriodtask, std::string schedulerPeriodexpression, int batchPeriodsize, 
	void(* handler)(ComDayCrxSecurityTokenImplTokenCleanupTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enablePeriodtokenPeriodcleanupPeriodtask 
 * \param schedulerPeriodexpression 
 * \param batchPeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool comDayCrxSecurityTokenImplTokenCleanupTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enablePeriodtokenPeriodcleanupPeriodtask, std::string schedulerPeriodexpression, int batchPeriodsize, 
	void(* handler)(ComDayCrxSecurityTokenImplTokenCleanupTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param supportedLocales 
 * \param localizable_Properties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool guideLocalizationServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> supportedLocales, std::list<std::string> localizable_Properties, 
	void(* handler)(GuideLocalizationServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param supportedLocales 
 * \param localizable_Properties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool guideLocalizationServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> supportedLocales, std::list<std::string> localizable_Properties, 
	void(* handler)(GuideLocalizationServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool messagingUserComponentFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priority, 
	void(* handler)(MessagingUserComponentFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool messagingUserComponentFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int priority, 
	void(* handler)(MessagingUserComponentFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param attributeChangeNotificationEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheAriesJmxFrameworkStateConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool attributeChangeNotificationEnabled, 
	void(* handler)(OrgApacheAriesJmxFrameworkStateConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param attributeChangeNotificationEnabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheAriesJmxFrameworkStateConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool attributeChangeNotificationEnabled, 
	void(* handler)(OrgApacheAriesJmxFrameworkStateConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixEventadminImplEventAdminSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize, long long orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio, int orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout, bool orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic, std::list<std::string> orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout, std::list<std::string> orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic, 
	void(* handler)(OrgApacheFelixEventadminImplEventAdminInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout 
 * \param orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixEventadminImplEventAdminAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize, long long orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio, int orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout, bool orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic, std::list<std::string> orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout, std::list<std::string> orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic, 
	void(* handler)(OrgApacheFelixEventadminImplEventAdminInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodhost 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodenable 
 * \param orgPeriodosgiPeriodservicePeriodhttpPeriodport 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodenable 
 * \param orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded 
 * \param orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodname 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixHttpSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodfelixPeriodhttpPeriodhost, bool orgPeriodapachePeriodfelixPeriodhttpPeriodenable, int orgPeriodosgiPeriodservicePeriodhttpPeriodport, int orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout, bool orgPeriodapachePeriodfelixPeriodhttpsPeriodenable, int orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate, std::string orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath, bool orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans, int orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize, std::list<std::string> orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions, std::list<std::string> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded, std::list<std::string> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded, bool orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader, std::list<std::string> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded, std::list<std::string> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded, bool orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable, bool orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed, bool orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly, bool orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure, std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName, bool orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding, std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie, std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain, std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath, int orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge, std::string orgPeriodapachePeriodfelixPeriodhttpPeriodname, bool orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable, int orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize, int orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel, int orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize, bool orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes, bool orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate, bool orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid, 
	void(* handler)(OrgApacheFelixHttpInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodhost 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodenable 
 * \param orgPeriodosgiPeriodservicePeriodhttpPeriodport 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodenable 
 * \param orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded 
 * \param orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly 
 * \param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath 
 * \param orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodname 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes 
 * \param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate 
 * \param orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixHttpAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodfelixPeriodhttpPeriodhost, bool orgPeriodapachePeriodfelixPeriodhttpPeriodenable, int orgPeriodosgiPeriodservicePeriodhttpPeriodport, int orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout, bool orgPeriodapachePeriodfelixPeriodhttpsPeriodenable, int orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword, std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate, std::string orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath, bool orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans, int orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize, int orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize, std::list<std::string> orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions, std::list<std::string> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded, std::list<std::string> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded, bool orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader, std::list<std::string> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded, std::list<std::string> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded, bool orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable, bool orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed, bool orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly, bool orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure, std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName, bool orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding, std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie, std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain, std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath, int orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge, std::string orgPeriodapachePeriodfelixPeriodhttpPeriodname, bool orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable, int orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize, int orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel, int orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize, bool orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes, std::list<std::string> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes, bool orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate, bool orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid, 
	void(* handler)(OrgApacheFelixHttpInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param sslForwardPeriodheader 
 * \param sslForwardPeriodvalue 
 * \param sslForwardCertPeriodheader 
 * \param rewritePeriodabsolutePeriodurls 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixHttpSslfilterSslFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string sslForwardPeriodheader, std::string sslForwardPeriodvalue, std::string sslForwardCertPeriodheader, bool rewritePeriodabsolutePeriodurls, 
	void(* handler)(OrgApacheFelixHttpSslfilterSslFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param sslForwardPeriodheader 
 * \param sslForwardPeriodvalue 
 * \param sslForwardCertPeriodheader 
 * \param rewritePeriodabsolutePeriodurls 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixHttpSslfilterSslFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string sslForwardPeriodheader, std::string sslForwardPeriodvalue, std::string sslForwardCertPeriodheader, bool rewritePeriodabsolutePeriodurls, 
	void(* handler)(OrgApacheFelixHttpSslfilterSslFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jaasPeriodcontrolFlag 
 * \param jaasPeriodranking 
 * \param jaasPeriodrealmName 
 * \param jaasPeriodclassname 
 * \param jaasPeriodoptions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixJaasConfigurationFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jaasPeriodcontrolFlag, int jaasPeriodranking, std::string jaasPeriodrealmName, std::string jaasPeriodclassname, std::list<std::string> jaasPeriodoptions, 
	void(* handler)(OrgApacheFelixJaasConfigurationFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jaasPeriodcontrolFlag 
 * \param jaasPeriodranking 
 * \param jaasPeriodrealmName 
 * \param jaasPeriodclassname 
 * \param jaasPeriodoptions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixJaasConfigurationFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jaasPeriodcontrolFlag, int jaasPeriodranking, std::string jaasPeriodrealmName, std::string jaasPeriodclassname, std::list<std::string> jaasPeriodoptions, 
	void(* handler)(OrgApacheFelixJaasConfigurationFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jaasPerioddefaultRealmName 
 * \param jaasPeriodconfigProviderName 
 * \param jaasPeriodglobalConfigPolicy 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixJaasConfigurationSpiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jaasPerioddefaultRealmName, std::string jaasPeriodconfigProviderName, std::string jaasPeriodglobalConfigPolicy, 
	void(* handler)(OrgApacheFelixJaasConfigurationSpiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jaasPerioddefaultRealmName 
 * \param jaasPeriodconfigProviderName 
 * \param jaasPeriodglobalConfigPolicy 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixJaasConfigurationSpiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jaasPerioddefaultRealmName, std::string jaasPeriodconfigProviderName, std::string jaasPeriodglobalConfigPolicy, 
	void(* handler)(OrgApacheFelixJaasConfigurationSpiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param dsPeriodloglevel 
 * \param dsPeriodfactoryPeriodenabled 
 * \param dsPerioddelayedPeriodkeepInstances 
 * \param dsPeriodlockPeriodtimeoutPeriodmilliseconds 
 * \param dsPeriodstopPeriodtimeoutPeriodmilliseconds 
 * \param dsPeriodglobalPeriodextender 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixScrScrServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int dsPeriodloglevel, bool dsPeriodfactoryPeriodenabled, bool dsPerioddelayedPeriodkeepInstances, int dsPeriodlockPeriodtimeoutPeriodmilliseconds, int dsPeriodstopPeriodtimeoutPeriodmilliseconds, bool dsPeriodglobalPeriodextender, 
	void(* handler)(OrgApacheFelixScrScrServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param dsPeriodloglevel 
 * \param dsPeriodfactoryPeriodenabled 
 * \param dsPerioddelayedPeriodkeepInstances 
 * \param dsPeriodlockPeriodtimeoutPeriodmilliseconds 
 * \param dsPeriodstopPeriodtimeoutPeriodmilliseconds 
 * \param dsPeriodglobalPeriodextender 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixScrScrServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int dsPeriodloglevel, bool dsPeriodfactoryPeriodenabled, bool dsPerioddelayedPeriodkeepInstances, int dsPeriodlockPeriodtimeoutPeriodmilliseconds, int dsPeriodstopPeriodtimeoutPeriodmilliseconds, bool dsPeriodglobalPeriodextender, 
	void(* handler)(OrgApacheFelixScrScrServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param componentsPeriodlist 
 * \param type 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadyImplComponentsCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> componentsPeriodlist, std::string type, 
	void(* handler)(OrgApacheFelixSystemreadyImplComponentsCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param componentsPeriodlist 
 * \param type 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadyImplComponentsCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> componentsPeriodlist, std::string type, 
	void(* handler)(OrgApacheFelixSystemreadyImplComponentsCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param timeout 
 * \param targetPeriodstartPeriodlevel 
 * \param targetPeriodstartPeriodlevelPeriodpropPeriodname 
 * \param type 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadyImplFrameworkStartCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int timeout, int targetPeriodstartPeriodlevel, std::string targetPeriodstartPeriodlevelPeriodpropPeriodname, std::string type, 
	void(* handler)(OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param timeout 
 * \param targetPeriodstartPeriodlevel 
 * \param targetPeriodstartPeriodlevelPeriodpropPeriodname 
 * \param type 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadyImplFrameworkStartCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int timeout, int targetPeriodstartPeriodlevel, std::string targetPeriodstartPeriodlevelPeriodpropPeriodname, std::string type, 
	void(* handler)(OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicesPeriodlist 
 * \param type 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadyImplServicesCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> servicesPeriodlist, std::string type, 
	void(* handler)(OrgApacheFelixSystemreadyImplServicesCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicesPeriodlist 
 * \param type 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadyImplServicesCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> servicesPeriodlist, std::string type, 
	void(* handler)(OrgApacheFelixSystemreadyImplServicesCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadyImplServletSystemAliveServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, 
	void(* handler)(OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadyImplServletSystemAliveServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, 
	void(* handler)(OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadyImplServletSystemReadyServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, 
	void(* handler)(OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadyImplServletSystemReadyServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, 
	void(* handler)(OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pollPeriodinterval 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadySystemReadyMonitorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int pollPeriodinterval, 
	void(* handler)(OrgApacheFelixSystemreadySystemReadyMonitorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pollPeriodinterval 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixSystemreadySystemReadyMonitorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int pollPeriodinterval, 
	void(* handler)(OrgApacheFelixSystemreadySystemReadyMonitorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param managerPeriodroot 
 * \param httpPeriodservicePeriodfilter 
 * \param defaultPeriodrender 
 * \param realm 
 * \param username 
 * \param password 
 * \param category 
 * \param locale 
 * \param loglevel 
 * \param plugins 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixWebconsoleInternalServletOsgiManagerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string managerPeriodroot, std::string httpPeriodservicePeriodfilter, std::string defaultPeriodrender, std::string realm, std::string username, std::string password, std::string category, std::string locale, int loglevel, std::string plugins, 
	void(* handler)(OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param managerPeriodroot 
 * \param httpPeriodservicePeriodfilter 
 * \param defaultPeriodrender 
 * \param realm 
 * \param username 
 * \param password 
 * \param category 
 * \param locale 
 * \param loglevel 
 * \param plugins 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixWebconsoleInternalServletOsgiManagerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string managerPeriodroot, std::string httpPeriodservicePeriodfilter, std::string defaultPeriodrender, std::string realm, std::string username, std::string password, std::string category, std::string locale, int loglevel, std::string plugins, 
	void(* handler)(OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixWebconsolePluginsEventInternalPluginServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxPeriodsize, 
	void(* handler)(OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPeriodsize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixWebconsolePluginsEventInternalPluginServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxPeriodsize, 
	void(* handler)(OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param felixPeriodmemoryusagePerioddumpPeriodthreshold 
 * \param felixPeriodmemoryusagePerioddumpPeriodinterval 
 * \param felixPeriodmemoryusagePerioddumpPeriodlocation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int felixPeriodmemoryusagePerioddumpPeriodthreshold, int felixPeriodmemoryusagePerioddumpPeriodinterval, std::string felixPeriodmemoryusagePerioddumpPeriodlocation, 
	void(* handler)(OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param felixPeriodmemoryusagePerioddumpPeriodthreshold 
 * \param felixPeriodmemoryusagePerioddumpPeriodinterval 
 * \param felixPeriodmemoryusagePerioddumpPeriodlocation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int felixPeriodmemoryusagePerioddumpPeriodthreshold, int felixPeriodmemoryusagePerioddumpPeriodinterval, std::string felixPeriodmemoryusagePerioddumpPeriodlocation, 
	void(* handler)(OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param proxyPeriodenabled 
 * \param proxyPeriodhost 
 * \param proxyPeriodport 
 * \param proxyPerioduser 
 * \param proxyPeriodpassword 
 * \param proxyPeriodexceptions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheHttpProxyconfiguratorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool proxyPeriodenabled, std::string proxyPeriodhost, int proxyPeriodport, std::string proxyPerioduser, std::string proxyPeriodpassword, std::list<std::string> proxyPeriodexceptions, 
	void(* handler)(OrgApacheHttpProxyconfiguratorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param proxyPeriodenabled 
 * \param proxyPeriodhost 
 * \param proxyPeriodport 
 * \param proxyPerioduser 
 * \param proxyPeriodpassword 
 * \param proxyPeriodexceptions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheHttpProxyconfiguratorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool proxyPeriodenabled, std::string proxyPeriodhost, int proxyPeriodport, std::string proxyPerioduser, std::string proxyPeriodpassword, std::list<std::string> proxyPeriodexceptions, 
	void(* handler)(OrgApacheHttpProxyconfiguratorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param dir 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string dir, 
	void(* handler)(OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param dir 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string dir, 
	void(* handler)(OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, 
	void(* handler)(OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, 
	void(* handler)(OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mongouri 
 * \param db 
 * \param socketKeepAlive 
 * \param cache 
 * \param nodeCachePercentage 
 * \param prevDocCachePercentage 
 * \param childrenCachePercentage 
 * \param diffCachePercentage 
 * \param cacheSegmentCount 
 * \param cacheStackMoveDistance 
 * \param blobCacheSize 
 * \param persistentCache 
 * \param journalCache 
 * \param customBlobStore 
 * \param journalGCInterval 
 * \param journalGCMaxAge 
 * \param prefetchExternalChanges 
 * \param role 
 * \param versionGcMaxAgeInSecs 
 * \param versionGCExpression 
 * \param versionGCTimeLimitInSecs 
 * \param blobGcMaxAgeInSecs 
 * \param blobTrackSnapshotIntervalInSecs 
 * \param repositoryPeriodhome 
 * \param maxReplicationLagInSecs 
 * \param documentStoreType 
 * \param bundlingDisabled 
 * \param updateLimit 
 * \param persistentCacheIncludes 
 * \param leaseCheckMode 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mongouri, std::string db, bool socketKeepAlive, int cache, int nodeCachePercentage, int prevDocCachePercentage, int childrenCachePercentage, int diffCachePercentage, int cacheSegmentCount, int cacheStackMoveDistance, int blobCacheSize, std::string persistentCache, std::string journalCache, bool customBlobStore, int journalGCInterval, int journalGCMaxAge, bool prefetchExternalChanges, std::string role, int versionGcMaxAgeInSecs, std::string versionGCExpression, int versionGCTimeLimitInSecs, int blobGcMaxAgeInSecs, int blobTrackSnapshotIntervalInSecs, std::string repositoryPeriodhome, int maxReplicationLagInSecs, std::string documentStoreType, bool bundlingDisabled, int updateLimit, std::list<std::string> persistentCacheIncludes, std::string leaseCheckMode, 
	void(* handler)(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mongouri 
 * \param db 
 * \param socketKeepAlive 
 * \param cache 
 * \param nodeCachePercentage 
 * \param prevDocCachePercentage 
 * \param childrenCachePercentage 
 * \param diffCachePercentage 
 * \param cacheSegmentCount 
 * \param cacheStackMoveDistance 
 * \param blobCacheSize 
 * \param persistentCache 
 * \param journalCache 
 * \param customBlobStore 
 * \param journalGCInterval 
 * \param journalGCMaxAge 
 * \param prefetchExternalChanges 
 * \param role 
 * \param versionGcMaxAgeInSecs 
 * \param versionGCExpression 
 * \param versionGCTimeLimitInSecs 
 * \param blobGcMaxAgeInSecs 
 * \param blobTrackSnapshotIntervalInSecs 
 * \param repositoryPeriodhome 
 * \param maxReplicationLagInSecs 
 * \param documentStoreType 
 * \param bundlingDisabled 
 * \param updateLimit 
 * \param persistentCacheIncludes 
 * \param leaseCheckMode 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mongouri, std::string db, bool socketKeepAlive, int cache, int nodeCachePercentage, int prevDocCachePercentage, int childrenCachePercentage, int diffCachePercentage, int cacheSegmentCount, int cacheStackMoveDistance, int blobCacheSize, std::string persistentCache, std::string journalCache, bool customBlobStore, int journalGCInterval, int journalGCMaxAge, bool prefetchExternalChanges, std::string role, int versionGcMaxAgeInSecs, std::string versionGCExpression, int versionGCTimeLimitInSecs, int blobGcMaxAgeInSecs, int blobTrackSnapshotIntervalInSecs, std::string repositoryPeriodhome, int maxReplicationLagInSecs, std::string documentStoreType, bool bundlingDisabled, int updateLimit, std::list<std::string> persistentCacheIncludes, std::string leaseCheckMode, 
	void(* handler)(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param persistentCacheIncludes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> persistentCacheIncludes, 
	void(* handler)(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param persistentCacheIncludes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> persistentCacheIncludes, 
	void(* handler)(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param includedPaths 
 * \param enableAsyncObserver 
 * \param observerQueueSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> includedPaths, bool enableAsyncObserver, int observerQueueSize, 
	void(* handler)(OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param includedPaths 
 * \param enableAsyncObserver 
 * \param observerQueueSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> includedPaths, bool enableAsyncObserver, int observerQueueSize, 
	void(* handler)(OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param asyncConfigs 
 * \param leaseTimeOutMinutes 
 * \param failingIndexTimeoutSeconds 
 * \param errorWarnIntervalSeconds 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> asyncConfigs, int leaseTimeOutMinutes, int failingIndexTimeoutSeconds, int errorWarnIntervalSeconds, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param asyncConfigs 
 * \param leaseTimeOutMinutes 
 * \param failingIndexTimeoutSeconds 
 * \param errorWarnIntervalSeconds 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> asyncConfigs, int leaseTimeOutMinutes, int failingIndexTimeoutSeconds, int errorWarnIntervalSeconds, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disabled 
 * \param debug 
 * \param localIndexDir 
 * \param enableOpenIndexAsync 
 * \param threadPoolSize 
 * \param prefetchIndexFiles 
 * \param extractedTextCacheSizeInMB 
 * \param extractedTextCacheExpiryInSecs 
 * \param alwaysUsePreExtractedCache 
 * \param booleanClauseLimit 
 * \param enableHybridIndexing 
 * \param hybridQueueSize 
 * \param disableStoredIndexDefinition 
 * \param deletedBlobsCollectionEnabled 
 * \param propIndexCleanerIntervalInSecs 
 * \param enableSingleBlobIndexFiles 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool disabled, bool debug, std::string localIndexDir, bool enableOpenIndexAsync, int threadPoolSize, bool prefetchIndexFiles, int extractedTextCacheSizeInMB, int extractedTextCacheExpiryInSecs, bool alwaysUsePreExtractedCache, int booleanClauseLimit, bool enableHybridIndexing, int hybridQueueSize, bool disableStoredIndexDefinition, bool deletedBlobsCollectionEnabled, int propIndexCleanerIntervalInSecs, bool enableSingleBlobIndexFiles, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param disabled 
 * \param debug 
 * \param localIndexDir 
 * \param enableOpenIndexAsync 
 * \param threadPoolSize 
 * \param prefetchIndexFiles 
 * \param extractedTextCacheSizeInMB 
 * \param extractedTextCacheExpiryInSecs 
 * \param alwaysUsePreExtractedCache 
 * \param booleanClauseLimit 
 * \param enableHybridIndexing 
 * \param hybridQueueSize 
 * \param disableStoredIndexDefinition 
 * \param deletedBlobsCollectionEnabled 
 * \param propIndexCleanerIntervalInSecs 
 * \param enableSingleBlobIndexFiles 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool disabled, bool debug, std::string localIndexDir, bool enableOpenIndexAsync, int threadPoolSize, bool prefetchIndexFiles, int extractedTextCacheSizeInMB, int extractedTextCacheExpiryInSecs, bool alwaysUsePreExtractedCache, int booleanClauseLimit, bool enableHybridIndexing, int hybridQueueSize, bool disableStoredIndexDefinition, bool deletedBlobsCollectionEnabled, int propIndexCleanerIntervalInSecs, bool enableSingleBlobIndexFiles, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param solrPeriodhomePeriodpath 
 * \param solrPeriodcorePeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string solrPeriodhomePeriodpath, std::string solrPeriodcorePeriodname, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param solrPeriodhomePeriodpath 
 * \param solrPeriodcorePeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string solrPeriodhomePeriodpath, std::string solrPeriodcorePeriodname, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pathPerioddescPeriodfield 
 * \param pathPeriodchildPeriodfield 
 * \param pathPeriodparentPeriodfield 
 * \param pathPeriodexactPeriodfield 
 * \param catchPeriodallPeriodfield 
 * \param collapsedPeriodpathPeriodfield 
 * \param pathPerioddepthPeriodfield 
 * \param commitPeriodpolicy 
 * \param rows 
 * \param pathPeriodrestrictions 
 * \param propertyPeriodrestrictions 
 * \param primarytypesPeriodrestrictions 
 * \param ignoredPeriodproperties 
 * \param usedPeriodproperties 
 * \param typePeriodmappings 
 * \param propertyPeriodmappings 
 * \param collapsePeriodjcrcontentPeriodnodes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pathPerioddescPeriodfield, std::string pathPeriodchildPeriodfield, std::string pathPeriodparentPeriodfield, std::string pathPeriodexactPeriodfield, std::string catchPeriodallPeriodfield, std::string collapsedPeriodpathPeriodfield, std::string pathPerioddepthPeriodfield, std::string commitPeriodpolicy, int rows, bool pathPeriodrestrictions, bool propertyPeriodrestrictions, bool primarytypesPeriodrestrictions, std::list<std::string> ignoredPeriodproperties, std::list<std::string> usedPeriodproperties, std::list<std::string> typePeriodmappings, std::list<std::string> propertyPeriodmappings, bool collapsePeriodjcrcontentPeriodnodes, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param pathPerioddescPeriodfield 
 * \param pathPeriodchildPeriodfield 
 * \param pathPeriodparentPeriodfield 
 * \param pathPeriodexactPeriodfield 
 * \param catchPeriodallPeriodfield 
 * \param collapsedPeriodpathPeriodfield 
 * \param pathPerioddepthPeriodfield 
 * \param commitPeriodpolicy 
 * \param rows 
 * \param pathPeriodrestrictions 
 * \param propertyPeriodrestrictions 
 * \param primarytypesPeriodrestrictions 
 * \param ignoredPeriodproperties 
 * \param usedPeriodproperties 
 * \param typePeriodmappings 
 * \param propertyPeriodmappings 
 * \param collapsePeriodjcrcontentPeriodnodes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string pathPerioddescPeriodfield, std::string pathPeriodchildPeriodfield, std::string pathPeriodparentPeriodfield, std::string pathPeriodexactPeriodfield, std::string catchPeriodallPeriodfield, std::string collapsedPeriodpathPeriodfield, std::string pathPerioddepthPeriodfield, std::string commitPeriodpolicy, int rows, bool pathPeriodrestrictions, bool propertyPeriodrestrictions, bool primarytypesPeriodrestrictions, std::list<std::string> ignoredPeriodproperties, std::list<std::string> usedPeriodproperties, std::list<std::string> typePeriodmappings, std::list<std::string> propertyPeriodmappings, bool collapsePeriodjcrcontentPeriodnodes, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param solrPeriodhttpPeriodurl 
 * \param solrPeriodzkPeriodhost 
 * \param solrPeriodcollection 
 * \param solrPeriodsocketPeriodtimeout 
 * \param solrPeriodconnectionPeriodtimeout 
 * \param solrPeriodshardsPeriodno 
 * \param solrPeriodreplicationPeriodfactor 
 * \param solrPeriodconfPerioddir 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string solrPeriodhttpPeriodurl, std::string solrPeriodzkPeriodhost, std::string solrPeriodcollection, int solrPeriodsocketPeriodtimeout, int solrPeriodconnectionPeriodtimeout, int solrPeriodshardsPeriodno, int solrPeriodreplicationPeriodfactor, std::string solrPeriodconfPerioddir, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param solrPeriodhttpPeriodurl 
 * \param solrPeriodzkPeriodhost 
 * \param solrPeriodcollection 
 * \param solrPeriodsocketPeriodtimeout 
 * \param solrPeriodconnectionPeriodtimeout 
 * \param solrPeriodshardsPeriodno 
 * \param solrPeriodreplicationPeriodfactor 
 * \param solrPeriodconfPerioddir 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string solrPeriodhttpPeriodurl, std::string solrPeriodzkPeriodhost, std::string solrPeriodcollection, int solrPeriodsocketPeriodtimeout, int solrPeriodconnectionPeriodtimeout, int solrPeriodshardsPeriodno, int solrPeriodreplicationPeriodfactor, std::string solrPeriodconfPerioddir, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queryPeriodaggregation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool queryPeriodaggregation, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queryPeriodaggregation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool queryPeriodaggregation, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param serverPeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string serverPeriodtype, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param serverPeriodtype 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string serverPeriodtype, 
	void(* handler)(OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerType, 
	void(* handler)(OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerType, 
	void(* handler)(OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxItems 
 * \param maxPathDepth 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxItems, int maxPathDepth, bool enabled, 
	void(* handler)(OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxItems 
 * \param maxPathDepth 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxItems, int maxPathDepth, bool enabled, 
	void(* handler)(OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queryLimitInMemory 
 * \param queryLimitReads 
 * \param queryFailTraversal 
 * \param fastQuerySize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakQueryQueryEngineSettingsServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int queryLimitInMemory, int queryLimitReads, bool queryFailTraversal, bool fastQuerySize, 
	void(* handler)(OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queryLimitInMemory 
 * \param queryLimitReads 
 * \param queryFailTraversal 
 * \param fastQuerySize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakQueryQueryEngineSettingsServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int queryLimitInMemory, int queryLimitReads, bool queryFailTraversal, bool fastQuerySize, 
	void(* handler)(OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName 
 * \param orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName, std::string orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName, 
	void(* handler)(OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName 
 * \param orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName, std::string orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName, 
	void(* handler)(OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodname 
 * \param hostPeriodname 
 * \param hostPeriodport 
 * \param hostPeriodssl 
 * \param hostPeriodtls 
 * \param hostPeriodnoCertCheck 
 * \param bindPerioddn 
 * \param bindPeriodpassword 
 * \param searchTimeout 
 * \param adminPoolPeriodmaxActive 
 * \param adminPoolPeriodlookupOnValidate 
 * \param userPoolPeriodmaxActive 
 * \param userPoolPeriodlookupOnValidate 
 * \param userPeriodbaseDN 
 * \param userPeriodobjectclass 
 * \param userPeriodidAttribute 
 * \param userPeriodextraFilter 
 * \param userPeriodmakeDnPath 
 * \param groupPeriodbaseDN 
 * \param groupPeriodobjectclass 
 * \param groupPeriodnameAttribute 
 * \param groupPeriodextraFilter 
 * \param groupPeriodmakeDnPath 
 * \param groupPeriodmemberAttribute 
 * \param useUidForExtId 
 * \param customattributes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodname, std::string hostPeriodname, int hostPeriodport, bool hostPeriodssl, bool hostPeriodtls, bool hostPeriodnoCertCheck, std::string bindPerioddn, std::string bindPeriodpassword, std::string searchTimeout, int adminPoolPeriodmaxActive, bool adminPoolPeriodlookupOnValidate, int userPoolPeriodmaxActive, bool userPoolPeriodlookupOnValidate, std::string userPeriodbaseDN, std::list<std::string> userPeriodobjectclass, std::string userPeriodidAttribute, std::string userPeriodextraFilter, bool userPeriodmakeDnPath, std::string groupPeriodbaseDN, std::list<std::string> groupPeriodobjectclass, std::string groupPeriodnameAttribute, std::string groupPeriodextraFilter, bool groupPeriodmakeDnPath, std::string groupPeriodmemberAttribute, bool useUidForExtId, std::list<std::string> customattributes, 
	void(* handler)(OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodname 
 * \param hostPeriodname 
 * \param hostPeriodport 
 * \param hostPeriodssl 
 * \param hostPeriodtls 
 * \param hostPeriodnoCertCheck 
 * \param bindPerioddn 
 * \param bindPeriodpassword 
 * \param searchTimeout 
 * \param adminPoolPeriodmaxActive 
 * \param adminPoolPeriodlookupOnValidate 
 * \param userPoolPeriodmaxActive 
 * \param userPoolPeriodlookupOnValidate 
 * \param userPeriodbaseDN 
 * \param userPeriodobjectclass 
 * \param userPeriodidAttribute 
 * \param userPeriodextraFilter 
 * \param userPeriodmakeDnPath 
 * \param groupPeriodbaseDN 
 * \param groupPeriodobjectclass 
 * \param groupPeriodnameAttribute 
 * \param groupPeriodextraFilter 
 * \param groupPeriodmakeDnPath 
 * \param groupPeriodmemberAttribute 
 * \param useUidForExtId 
 * \param customattributes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodname, std::string hostPeriodname, int hostPeriodport, bool hostPeriodssl, bool hostPeriodtls, bool hostPeriodnoCertCheck, std::string bindPerioddn, std::string bindPeriodpassword, std::string searchTimeout, int adminPoolPeriodmaxActive, bool adminPoolPeriodlookupOnValidate, int userPoolPeriodmaxActive, bool userPoolPeriodlookupOnValidate, std::string userPeriodbaseDN, std::list<std::string> userPeriodobjectclass, std::string userPeriodidAttribute, std::string userPeriodextraFilter, bool userPeriodmakeDnPath, std::string groupPeriodbaseDN, std::list<std::string> groupPeriodobjectclass, std::string groupPeriodnameAttribute, std::string groupPeriodextraFilter, bool groupPeriodmakeDnPath, std::string groupPeriodmemberAttribute, bool useUidForExtId, std::list<std::string> customattributes, 
	void(* handler)(OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param tokenExpiration 
 * \param tokenLength 
 * \param tokenRefresh 
 * \param tokenCleanupThreshold 
 * \param passwordHashAlgorithm 
 * \param passwordHashIterations 
 * \param passwordSaltSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string tokenExpiration, std::string tokenLength, bool tokenRefresh, int tokenCleanupThreshold, std::string passwordHashAlgorithm, int passwordHashIterations, int passwordSaltSize, 
	void(* handler)(OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param tokenExpiration 
 * \param tokenLength 
 * \param tokenRefresh 
 * \param tokenCleanupThreshold 
 * \param passwordHashAlgorithm 
 * \param passwordHashIterations 
 * \param passwordSaltSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string tokenExpiration, std::string tokenLength, bool tokenRefresh, int tokenCleanupThreshold, std::string passwordHashAlgorithm, int passwordHashIterations, int passwordSaltSize, 
	void(* handler)(OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param permissionsJr2 
 * \param importBehavior 
 * \param readPaths 
 * \param administrativePrincipals 
 * \param configurationRanking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string permissionsJr2, std::string importBehavior, std::list<std::string> readPaths, std::list<std::string> administrativePrincipals, int configurationRanking, 
	void(* handler)(OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param permissionsJr2 
 * \param importBehavior 
 * \param readPaths 
 * \param administrativePrincipals 
 * \param configurationRanking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string permissionsJr2, std::string importBehavior, std::list<std::string> readPaths, std::list<std::string> administrativePrincipals, int configurationRanking, 
	void(* handler)(OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param requiredServicePids 
 * \param authorizationCompositionType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> requiredServicePids, std::string authorizationCompositionType, 
	void(* handler)(OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param requiredServicePids 
 * \param authorizationCompositionType 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> requiredServicePids, std::string authorizationCompositionType, 
	void(* handler)(OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param length 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int length, 
	void(* handler)(OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param length 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int length, 
	void(* handler)(OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param usersPath 
 * \param groupsPath 
 * \param systemRelativePath 
 * \param defaultDepth 
 * \param importBehavior 
 * \param passwordHashAlgorithm 
 * \param passwordHashIterations 
 * \param passwordSaltSize 
 * \param omitAdminPw 
 * \param supportAutoSave 
 * \param passwordMaxAge 
 * \param initialPasswordChange 
 * \param passwordHistorySize 
 * \param passwordExpiryForAdmin 
 * \param cacheExpiration 
 * \param enableRFC7613UsercaseMappedProfile 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityUserUserConfigurationImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string usersPath, std::string groupsPath, std::string systemRelativePath, int defaultDepth, std::string importBehavior, std::string passwordHashAlgorithm, int passwordHashIterations, int passwordSaltSize, bool omitAdminPw, bool supportAutoSave, int passwordMaxAge, bool initialPasswordChange, int passwordHistorySize, bool passwordExpiryForAdmin, int cacheExpiration, bool enableRFC7613UsercaseMappedProfile, 
	void(* handler)(OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param usersPath 
 * \param groupsPath 
 * \param systemRelativePath 
 * \param defaultDepth 
 * \param importBehavior 
 * \param passwordHashAlgorithm 
 * \param passwordHashIterations 
 * \param passwordSaltSize 
 * \param omitAdminPw 
 * \param supportAutoSave 
 * \param passwordMaxAge 
 * \param initialPasswordChange 
 * \param passwordHistorySize 
 * \param passwordExpiryForAdmin 
 * \param cacheExpiration 
 * \param enableRFC7613UsercaseMappedProfile 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSecurityUserUserConfigurationImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string usersPath, std::string groupsPath, std::string systemRelativePath, int defaultDepth, std::string importBehavior, std::string passwordHashAlgorithm, int passwordHashIterations, int passwordSaltSize, bool omitAdminPw, bool supportAutoSave, int passwordMaxAge, bool initialPasswordChange, int passwordHistorySize, bool passwordExpiryForAdmin, int cacheExpiration, bool enableRFC7613UsercaseMappedProfile, 
	void(* handler)(OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param accountName 
 * \param containerName 
 * \param accessKey 
 * \param rootPath 
 * \param connectionURL 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string accountName, std::string containerName, std::string accessKey, std::string rootPath, std::string connectionURL, 
	void(* handler)(OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param accountName 
 * \param containerName 
 * \param accessKey 
 * \param rootPath 
 * \param connectionURL 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string accountName, std::string containerName, std::string accessKey, std::string rootPath, std::string connectionURL, 
	void(* handler)(OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param repositoryPeriodhome 
 * \param tarmkPeriodmode 
 * \param tarmkPeriodsize 
 * \param segmentCachePeriodsize 
 * \param stringCachePeriodsize 
 * \param templateCachePeriodsize 
 * \param stringDeduplicationCachePeriodsize 
 * \param templateDeduplicationCachePeriodsize 
 * \param nodeDeduplicationCachePeriodsize 
 * \param pauseCompaction 
 * \param compactionPeriodretryCount 
 * \param compactionPeriodforcePeriodtimeout 
 * \param compactionPeriodsizeDeltaEstimation 
 * \param compactionPerioddisableEstimation 
 * \param compactionPeriodretainedGenerations 
 * \param compactionPeriodmemoryThreshold 
 * \param compactionPeriodprogressLog 
 * \param standby 
 * \param customBlobStore 
 * \param customSegmentStore 
 * \param splitPersistence 
 * \param repositoryPeriodbackupPerioddir 
 * \param blobGcMaxAgeInSecs 
 * \param blobTrackSnapshotIntervalInSecs 
 * \param role 
 * \param registerDescriptors 
 * \param dispatchChanges 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSegmentSegmentNodeStoreFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string repositoryPeriodhome, std::string tarmkPeriodmode, int tarmkPeriodsize, int segmentCachePeriodsize, int stringCachePeriodsize, int templateCachePeriodsize, int stringDeduplicationCachePeriodsize, int templateDeduplicationCachePeriodsize, int nodeDeduplicationCachePeriodsize, bool pauseCompaction, int compactionPeriodretryCount, int compactionPeriodforcePeriodtimeout, int compactionPeriodsizeDeltaEstimation, bool compactionPerioddisableEstimation, int compactionPeriodretainedGenerations, int compactionPeriodmemoryThreshold, int compactionPeriodprogressLog, bool standby, bool customBlobStore, bool customSegmentStore, bool splitPersistence, std::string repositoryPeriodbackupPerioddir, int blobGcMaxAgeInSecs, int blobTrackSnapshotIntervalInSecs, std::string role, bool registerDescriptors, bool dispatchChanges, 
	void(* handler)(OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param repositoryPeriodhome 
 * \param tarmkPeriodmode 
 * \param tarmkPeriodsize 
 * \param segmentCachePeriodsize 
 * \param stringCachePeriodsize 
 * \param templateCachePeriodsize 
 * \param stringDeduplicationCachePeriodsize 
 * \param templateDeduplicationCachePeriodsize 
 * \param nodeDeduplicationCachePeriodsize 
 * \param pauseCompaction 
 * \param compactionPeriodretryCount 
 * \param compactionPeriodforcePeriodtimeout 
 * \param compactionPeriodsizeDeltaEstimation 
 * \param compactionPerioddisableEstimation 
 * \param compactionPeriodretainedGenerations 
 * \param compactionPeriodmemoryThreshold 
 * \param compactionPeriodprogressLog 
 * \param standby 
 * \param customBlobStore 
 * \param customSegmentStore 
 * \param splitPersistence 
 * \param repositoryPeriodbackupPerioddir 
 * \param blobGcMaxAgeInSecs 
 * \param blobTrackSnapshotIntervalInSecs 
 * \param role 
 * \param registerDescriptors 
 * \param dispatchChanges 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string repositoryPeriodhome, std::string tarmkPeriodmode, int tarmkPeriodsize, int segmentCachePeriodsize, int stringCachePeriodsize, int templateCachePeriodsize, int stringDeduplicationCachePeriodsize, int templateDeduplicationCachePeriodsize, int nodeDeduplicationCachePeriodsize, bool pauseCompaction, int compactionPeriodretryCount, int compactionPeriodforcePeriodtimeout, int compactionPeriodsizeDeltaEstimation, bool compactionPerioddisableEstimation, int compactionPeriodretainedGenerations, int compactionPeriodmemoryThreshold, int compactionPeriodprogressLog, bool standby, bool customBlobStore, bool customSegmentStore, bool splitPersistence, std::string repositoryPeriodbackupPerioddir, int blobGcMaxAgeInSecs, int blobTrackSnapshotIntervalInSecs, std::string role, bool registerDescriptors, bool dispatchChanges, 
	void(* handler)(OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param commitsTrackerWriterGroups 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> commitsTrackerWriterGroups, 
	void(* handler)(OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param commitsTrackerWriterGroups 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> commitsTrackerWriterGroups, 
	void(* handler)(OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param repositoryPeriodhome 
 * \param tarmkPeriodmode 
 * \param tarmkPeriodsize 
 * \param segmentCachePeriodsize 
 * \param stringCachePeriodsize 
 * \param templateCachePeriodsize 
 * \param stringDeduplicationCachePeriodsize 
 * \param templateDeduplicationCachePeriodsize 
 * \param nodeDeduplicationCachePeriodsize 
 * \param pauseCompaction 
 * \param compactionPeriodretryCount 
 * \param compactionPeriodforcePeriodtimeout 
 * \param compactionPeriodsizeDeltaEstimation 
 * \param compactionPerioddisableEstimation 
 * \param compactionPeriodretainedGenerations 
 * \param compactionPeriodmemoryThreshold 
 * \param compactionPeriodprogressLog 
 * \param standby 
 * \param customBlobStore 
 * \param customSegmentStore 
 * \param splitPersistence 
 * \param repositoryPeriodbackupPerioddir 
 * \param blobGcMaxAgeInSecs 
 * \param blobTrackSnapshotIntervalInSecs 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string repositoryPeriodhome, std::string tarmkPeriodmode, int tarmkPeriodsize, int segmentCachePeriodsize, int stringCachePeriodsize, int templateCachePeriodsize, int stringDeduplicationCachePeriodsize, int templateDeduplicationCachePeriodsize, int nodeDeduplicationCachePeriodsize, bool pauseCompaction, int compactionPeriodretryCount, int compactionPeriodforcePeriodtimeout, int compactionPeriodsizeDeltaEstimation, bool compactionPerioddisableEstimation, int compactionPeriodretainedGenerations, int compactionPeriodmemoryThreshold, int compactionPeriodprogressLog, bool standby, bool customBlobStore, bool customSegmentStore, bool splitPersistence, std::string repositoryPeriodbackupPerioddir, int blobGcMaxAgeInSecs, int blobTrackSnapshotIntervalInSecs, 
	void(* handler)(OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param repositoryPeriodhome 
 * \param tarmkPeriodmode 
 * \param tarmkPeriodsize 
 * \param segmentCachePeriodsize 
 * \param stringCachePeriodsize 
 * \param templateCachePeriodsize 
 * \param stringDeduplicationCachePeriodsize 
 * \param templateDeduplicationCachePeriodsize 
 * \param nodeDeduplicationCachePeriodsize 
 * \param pauseCompaction 
 * \param compactionPeriodretryCount 
 * \param compactionPeriodforcePeriodtimeout 
 * \param compactionPeriodsizeDeltaEstimation 
 * \param compactionPerioddisableEstimation 
 * \param compactionPeriodretainedGenerations 
 * \param compactionPeriodmemoryThreshold 
 * \param compactionPeriodprogressLog 
 * \param standby 
 * \param customBlobStore 
 * \param customSegmentStore 
 * \param splitPersistence 
 * \param repositoryPeriodbackupPerioddir 
 * \param blobGcMaxAgeInSecs 
 * \param blobTrackSnapshotIntervalInSecs 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string repositoryPeriodhome, std::string tarmkPeriodmode, int tarmkPeriodsize, int segmentCachePeriodsize, int stringCachePeriodsize, int templateCachePeriodsize, int stringDeduplicationCachePeriodsize, int templateDeduplicationCachePeriodsize, int nodeDeduplicationCachePeriodsize, bool pauseCompaction, int compactionPeriodretryCount, int compactionPeriodforcePeriodtimeout, int compactionPeriodsizeDeltaEstimation, bool compactionPerioddisableEstimation, int compactionPeriodretainedGenerations, int compactionPeriodmemoryThreshold, int compactionPeriodprogressLog, bool standby, bool customBlobStore, bool customSegmentStore, bool splitPersistence, std::string repositoryPeriodbackupPerioddir, int blobGcMaxAgeInSecs, int blobTrackSnapshotIntervalInSecs, 
	void(* handler)(OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist 
 * \param mode 
 * \param port 
 * \param primaryPeriodhost 
 * \param interval 
 * \param primaryPeriodallowedClientIpRanges 
 * \param secure 
 * \param standbyPeriodreadtimeout 
 * \param standbyPeriodautoclean 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist, std::string mode, int port, std::string primaryPeriodhost, int interval, std::list<std::string> primaryPeriodallowedClientIpRanges, bool secure, int standbyPeriodreadtimeout, bool standbyPeriodautoclean, 
	void(* handler)(OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist 
 * \param mode 
 * \param port 
 * \param primaryPeriodhost 
 * \param interval 
 * \param primaryPeriodallowedClientIpRanges 
 * \param secure 
 * \param standbyPeriodreadtimeout 
 * \param standbyPeriodautoclean 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist, std::string mode, int port, std::string primaryPeriodhost, int interval, std::list<std::string> primaryPeriodallowedClientIpRanges, bool secure, int standbyPeriodreadtimeout, bool standbyPeriodautoclean, 
	void(* handler)(OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param handlerPeriodname 
 * \param userPeriodexpirationTime 
 * \param userPeriodautoMembership 
 * \param userPeriodpropertyMapping 
 * \param userPeriodpathPrefix 
 * \param userPeriodmembershipExpTime 
 * \param userPeriodmembershipNestingDepth 
 * \param userPerioddynamicMembership 
 * \param userPerioddisableMissing 
 * \param groupPeriodexpirationTime 
 * \param groupPeriodautoMembership 
 * \param groupPeriodpropertyMapping 
 * \param groupPeriodpathPrefix 
 * \param enableRFC7613UsercaseMappedProfile 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string handlerPeriodname, std::string userPeriodexpirationTime, std::list<std::string> userPeriodautoMembership, std::list<std::string> userPeriodpropertyMapping, std::string userPeriodpathPrefix, std::string userPeriodmembershipExpTime, int userPeriodmembershipNestingDepth, bool userPerioddynamicMembership, bool userPerioddisableMissing, std::string groupPeriodexpirationTime, std::list<std::string> groupPeriodautoMembership, std::list<std::string> groupPeriodpropertyMapping, std::string groupPeriodpathPrefix, bool enableRFC7613UsercaseMappedProfile, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param handlerPeriodname 
 * \param userPeriodexpirationTime 
 * \param userPeriodautoMembership 
 * \param userPeriodpropertyMapping 
 * \param userPeriodpathPrefix 
 * \param userPeriodmembershipExpTime 
 * \param userPeriodmembershipNestingDepth 
 * \param userPerioddynamicMembership 
 * \param userPerioddisableMissing 
 * \param groupPeriodexpirationTime 
 * \param groupPeriodautoMembership 
 * \param groupPeriodpropertyMapping 
 * \param groupPeriodpathPrefix 
 * \param enableRFC7613UsercaseMappedProfile 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string handlerPeriodname, std::string userPeriodexpirationTime, std::list<std::string> userPeriodautoMembership, std::list<std::string> userPeriodpropertyMapping, std::string userPeriodpathPrefix, std::string userPeriodmembershipExpTime, int userPeriodmembershipNestingDepth, bool userPerioddynamicMembership, bool userPerioddisableMissing, std::string groupPeriodexpirationTime, std::list<std::string> groupPeriodautoMembership, std::list<std::string> groupPeriodpropertyMapping, std::string groupPeriodpathPrefix, bool enableRFC7613UsercaseMappedProfile, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jaasPeriodranking 
 * \param jaasPeriodcontrolFlag 
 * \param jaasPeriodrealmName 
 * \param idpPeriodname 
 * \param syncPeriodhandlerName 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int jaasPeriodranking, std::string jaasPeriodcontrolFlag, std::string jaasPeriodrealmName, std::string idpPeriodname, std::string syncPeriodhandlerName, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jaasPeriodranking 
 * \param jaasPeriodcontrolFlag 
 * \param jaasPeriodrealmName 
 * \param idpPeriodname 
 * \param syncPeriodhandlerName 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int jaasPeriodranking, std::string jaasPeriodcontrolFlag, std::string jaasPeriodrealmName, std::string idpPeriodname, std::string syncPeriodhandlerName, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param protectExternalId 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool protectExternalId, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param protectExternalId 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool protectExternalId, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cugSupportedPaths 
 * \param cugEnabled 
 * \param configurationRanking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cugSupportedPaths, bool cugEnabled, int configurationRanking, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param cugSupportedPaths 
 * \param cugEnabled 
 * \param configurationRanking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> cugSupportedPaths, bool cugEnabled, int configurationRanking, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param principalNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> principalNames, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param principalNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> principalNames, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabledActions 
 * \param userPrivilegeNames 
 * \param groupPrivilegeNames 
 * \param constraint 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string enabledActions, std::list<std::string> userPrivilegeNames, std::list<std::string> groupPrivilegeNames, std::string constraint, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabledActions 
 * \param userPrivilegeNames 
 * \param groupPrivilegeNames 
 * \param constraint 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string enabledActions, std::list<std::string> userPrivilegeNames, std::list<std::string> groupPrivilegeNames, std::string constraint, 
	void(* handler)(OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param packageRoots 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitVaultPackagingImplPackagingImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> packageRoots, 
	void(* handler)(OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param packageRoots 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitVaultPackagingImplPackagingImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> packageRoots, 
	void(* handler)(OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param homePath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistrySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string homePath, 
	void(* handler)(OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param homePath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string homePath, 
	void(* handler)(OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodmethods 
 * \param slingPeriodservletPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingAuthCoreImplLogoutServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodservletPeriodmethods, std::string slingPeriodservletPeriodpaths, 
	void(* handler)(OrgApacheSlingAuthCoreImplLogoutServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodmethods 
 * \param slingPeriodservletPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingAuthCoreImplLogoutServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodservletPeriodmethods, std::string slingPeriodservletPeriodpaths, 
	void(* handler)(OrgApacheSlingAuthCoreImplLogoutServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplConfigurationBindingsValueProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplConfigurationBindingsValueProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param configBucketNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplConfigurationResolverImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> configBucketNames, 
	void(* handler)(OrgApacheSlingCaconfigImplConfigurationResolverImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param configBucketNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplConfigurationResolverImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> configBucketNames, 
	void(* handler)(OrgApacheSlingCaconfigImplConfigurationResolverImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param configPropertyInheritancePropertyNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::list<std::string> configPropertyInheritancePropertyNames, 
	void(* handler)(OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param configPropertyInheritancePropertyNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::list<std::string> configPropertyInheritancePropertyNames, 
	void(* handler)(OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, 
	void(* handler)(OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param description 
 * \param overrides 
 * \param enabled 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string description, std::list<std::string> overrides, bool enabled, int servicePeriodranking, 
	void(* handler)(OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param description 
 * \param overrides 
 * \param enabled 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string description, std::list<std::string> overrides, bool enabled, int servicePeriodranking, 
	void(* handler)(OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, int servicePeriodranking, 
	void(* handler)(OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, int servicePeriodranking, 
	void(* handler)(OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param ignorePropertyNameRegex 
 * \param configCollectionPropertiesResourceNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigManagementImplConfigurationManagementSettiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> ignorePropertyNameRegex, std::list<std::string> configCollectionPropertiesResourceNames, 
	void(* handler)(OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param ignorePropertyNameRegex 
 * \param configCollectionPropertiesResourceNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigManagementImplConfigurationManagementSettiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> ignorePropertyNameRegex, std::list<std::string> configCollectionPropertiesResourceNames, 
	void(* handler)(OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param configPath 
 * \param fallbackPaths 
 * \param configCollectionInheritancePropertyNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::string configPath, std::list<std::string> fallbackPaths, std::list<std::string> configCollectionInheritancePropertyNames, 
	void(* handler)(OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param configPath 
 * \param fallbackPaths 
 * \param configCollectionInheritancePropertyNames 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::string configPath, std::list<std::string> fallbackPaths, std::list<std::string> configCollectionInheritancePropertyNames, 
	void(* handler)(OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param configRefResourceNames 
 * \param configRefPropertyNames 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::list<std::string> configRefResourceNames, std::list<std::string> configRefPropertyNames, int servicePeriodranking, 
	void(* handler)(OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param enabled 
 * \param configRefResourceNames 
 * \param configRefPropertyNames 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool enabled, std::list<std::string> configRefResourceNames, std::list<std::string> configRefPropertyNames, int servicePeriodranking, 
	void(* handler)(OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param parserPeriodfeatures 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> parserPeriodfeatures, 
	void(* handler)(OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param parserPeriodfeatures 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> parserPeriodfeatures, 
	void(* handler)(OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsLogLogManagerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, int orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile, bool orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled, int orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth, int orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump, int orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines, 
	void(* handler)(OrgApacheSlingCommonsLogLogManagerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsLogLogManagerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, int orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile, bool orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled, int orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth, int orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump, int orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines, 
	void(* handler)(OrgApacheSlingCommonsLogLogManagerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsLogLogManagerFactoryConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern, std::list<std::string> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames, bool orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv, 
	void(* handler)(OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsLogLogManagerFactoryConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern, std::list<std::string> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames, bool orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv, 
	void(* handler)(OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsLogLogManagerFactoryWriterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, int orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize, bool orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered, 
	void(* handler)(OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize 
 * \param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsLogLogManagerFactoryWriterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, int orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber, std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize, bool orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered, 
	void(* handler)(OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param period 
 * \param timeUnit 
 * \param level 
 * \param loggerName 
 * \param prefix 
 * \param pattern 
 * \param registryName 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsMetricsInternalLogReporterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int period, std::string timeUnit, std::string level, std::string loggerName, std::string prefix, std::string pattern, std::string registryName, 
	void(* handler)(OrgApacheSlingCommonsMetricsInternalLogReporterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param period 
 * \param timeUnit 
 * \param level 
 * \param loggerName 
 * \param prefix 
 * \param pattern 
 * \param registryName 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsMetricsInternalLogReporterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int period, std::string timeUnit, std::string level, std::string loggerName, std::string prefix, std::string pattern, std::string registryName, 
	void(* handler)(OrgApacheSlingCommonsMetricsInternalLogReporterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param datasources 
 * \param step 
 * \param archives 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> datasources, int step, std::list<std::string> archives, std::string path, 
	void(* handler)(OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param datasources 
 * \param step 
 * \param archives 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> datasources, int step, std::list<std::string> archives, std::string path, 
	void(* handler)(OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mimePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsMimeInternalMimeTypeServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> mimePeriodtypes, 
	void(* handler)(OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mimePeriodtypes 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsMimeInternalMimeTypeServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> mimePeriodtypes, 
	void(* handler)(OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param poolName 
 * \param allowedPoolNames 
 * \param schedulerPerioduseleaderforsingle 
 * \param metricsPeriodfilters 
 * \param slowThresholdMillis 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsSchedulerImplQuartzSchedulerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string poolName, std::list<std::string> allowedPoolNames, bool schedulerPerioduseleaderforsingle, std::list<std::string> metricsPeriodfilters, int slowThresholdMillis, 
	void(* handler)(OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param poolName 
 * \param allowedPoolNames 
 * \param schedulerPerioduseleaderforsingle 
 * \param metricsPeriodfilters 
 * \param slowThresholdMillis 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsSchedulerImplQuartzSchedulerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string poolName, std::list<std::string> allowedPoolNames, bool schedulerPerioduseleaderforsingle, std::list<std::string> metricsPeriodfilters, int slowThresholdMillis, 
	void(* handler)(OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPeriodquartzJobPerioddurationPeriodacceptable 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxPeriodquartzJobPerioddurationPeriodacceptable, 
	void(* handler)(OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPeriodquartzJobPerioddurationPeriodacceptable 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxPeriodquartzJobPerioddurationPeriodacceptable, 
	void(* handler)(OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param minPoolSize 
 * \param maxPoolSize 
 * \param queueSize 
 * \param maxThreadAge 
 * \param keepAliveTime 
 * \param blockPolicy 
 * \param shutdownGraceful 
 * \param daemon 
 * \param shutdownWaitTime 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, int minPoolSize, int maxPoolSize, int queueSize, int maxThreadAge, int keepAliveTime, std::string blockPolicy, bool shutdownGraceful, bool daemon, int shutdownWaitTime, std::string priority, 
	void(* handler)(OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param minPoolSize 
 * \param maxPoolSize 
 * \param queueSize 
 * \param maxThreadAge 
 * \param keepAliveTime 
 * \param blockPolicy 
 * \param shutdownGraceful 
 * \param daemon 
 * \param shutdownWaitTime 
 * \param priority 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, int minPoolSize, int maxPoolSize, int queueSize, int maxThreadAge, int keepAliveTime, std::string blockPolicy, bool shutdownGraceful, bool daemon, int shutdownWaitTime, std::string priority, 
	void(* handler)(OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param datasourcePeriodname 
 * \param datasourcePeriodsvcPeriodpropPeriodname 
 * \param driverClassName 
 * \param url 
 * \param username 
 * \param password 
 * \param defaultAutoCommit 
 * \param defaultReadOnly 
 * \param defaultTransactionIsolation 
 * \param defaultCatalog 
 * \param maxActive 
 * \param maxIdle 
 * \param minIdle 
 * \param initialSize 
 * \param maxWait 
 * \param maxAge 
 * \param testOnBorrow 
 * \param testOnReturn 
 * \param testWhileIdle 
 * \param validationQuery 
 * \param validationQueryTimeout 
 * \param timeBetweenEvictionRunsMillis 
 * \param minEvictableIdleTimeMillis 
 * \param connectionProperties 
 * \param initSQL 
 * \param jdbcInterceptors 
 * \param validationInterval 
 * \param logValidationErrors 
 * \param datasourcePeriodsvcPeriodproperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDatasourceDataSourceFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string datasourcePeriodname, std::string datasourcePeriodsvcPeriodpropPeriodname, std::string driverClassName, std::string url, std::string username, std::string password, std::string defaultAutoCommit, std::string defaultReadOnly, std::string defaultTransactionIsolation, std::string defaultCatalog, int maxActive, int maxIdle, int minIdle, int initialSize, int maxWait, int maxAge, bool testOnBorrow, bool testOnReturn, bool testWhileIdle, std::string validationQuery, int validationQueryTimeout, int timeBetweenEvictionRunsMillis, int minEvictableIdleTimeMillis, std::string connectionProperties, std::string initSQL, std::string jdbcInterceptors, int validationInterval, bool logValidationErrors, std::list<std::string> datasourcePeriodsvcPeriodproperties, 
	void(* handler)(OrgApacheSlingDatasourceDataSourceFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param datasourcePeriodname 
 * \param datasourcePeriodsvcPeriodpropPeriodname 
 * \param driverClassName 
 * \param url 
 * \param username 
 * \param password 
 * \param defaultAutoCommit 
 * \param defaultReadOnly 
 * \param defaultTransactionIsolation 
 * \param defaultCatalog 
 * \param maxActive 
 * \param maxIdle 
 * \param minIdle 
 * \param initialSize 
 * \param maxWait 
 * \param maxAge 
 * \param testOnBorrow 
 * \param testOnReturn 
 * \param testWhileIdle 
 * \param validationQuery 
 * \param validationQueryTimeout 
 * \param timeBetweenEvictionRunsMillis 
 * \param minEvictableIdleTimeMillis 
 * \param connectionProperties 
 * \param initSQL 
 * \param jdbcInterceptors 
 * \param validationInterval 
 * \param logValidationErrors 
 * \param datasourcePeriodsvcPeriodproperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDatasourceDataSourceFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string datasourcePeriodname, std::string datasourcePeriodsvcPeriodpropPeriodname, std::string driverClassName, std::string url, std::string username, std::string password, std::string defaultAutoCommit, std::string defaultReadOnly, std::string defaultTransactionIsolation, std::string defaultCatalog, int maxActive, int maxIdle, int minIdle, int initialSize, int maxWait, int maxAge, bool testOnBorrow, bool testOnReturn, bool testWhileIdle, std::string validationQuery, int validationQueryTimeout, int timeBetweenEvictionRunsMillis, int minEvictableIdleTimeMillis, std::string connectionProperties, std::string initSQL, std::string jdbcInterceptors, int validationInterval, bool logValidationErrors, std::list<std::string> datasourcePeriodsvcPeriodproperties, 
	void(* handler)(OrgApacheSlingDatasourceDataSourceFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param datasourcePeriodname 
 * \param datasourcePeriodsvcPeriodpropPeriodname 
 * \param datasourcePeriodjndiPeriodname 
 * \param jndiPeriodproperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDatasourceJNDIDataSourceFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string datasourcePeriodname, std::string datasourcePeriodsvcPeriodpropPeriodname, std::string datasourcePeriodjndiPeriodname, std::list<std::string> jndiPeriodproperties, 
	void(* handler)(OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param datasourcePeriodname 
 * \param datasourcePeriodsvcPeriodpropPeriodname 
 * \param datasourcePeriodjndiPeriodname 
 * \param jndiPeriodproperties 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDatasourceJNDIDataSourceFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string datasourcePeriodname, std::string datasourcePeriodsvcPeriodpropPeriodname, std::string datasourcePeriodjndiPeriodname, std::list<std::string> jndiPeriodproperties, 
	void(* handler)(OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param connectorPingTimeout 
 * \param connectorPingInterval 
 * \param discoveryLiteCheckInterval 
 * \param clusterSyncServiceTimeout 
 * \param clusterSyncServiceInterval 
 * \param enableSyncToken 
 * \param minEventDelay 
 * \param socketConnectTimeout 
 * \param soTimeout 
 * \param topologyConnectorUrls 
 * \param topologyConnectorWhitelist 
 * \param autoStopLocalLoopEnabled 
 * \param gzipConnectorRequestsEnabled 
 * \param hmacEnabled 
 * \param enableEncryption 
 * \param sharedKey 
 * \param hmacSharedKeyTTL 
 * \param backoffStandbyFactor 
 * \param backoffStableFactor 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDiscoveryOakConfigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int connectorPingTimeout, int connectorPingInterval, int discoveryLiteCheckInterval, int clusterSyncServiceTimeout, int clusterSyncServiceInterval, bool enableSyncToken, int minEventDelay, int socketConnectTimeout, int soTimeout, std::list<std::string> topologyConnectorUrls, std::list<std::string> topologyConnectorWhitelist, bool autoStopLocalLoopEnabled, bool gzipConnectorRequestsEnabled, bool hmacEnabled, bool enableEncryption, std::string sharedKey, int hmacSharedKeyTTL, std::string backoffStandbyFactor, std::string backoffStableFactor, 
	void(* handler)(OrgApacheSlingDiscoveryOakConfigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param connectorPingTimeout 
 * \param connectorPingInterval 
 * \param discoveryLiteCheckInterval 
 * \param clusterSyncServiceTimeout 
 * \param clusterSyncServiceInterval 
 * \param enableSyncToken 
 * \param minEventDelay 
 * \param socketConnectTimeout 
 * \param soTimeout 
 * \param topologyConnectorUrls 
 * \param topologyConnectorWhitelist 
 * \param autoStopLocalLoopEnabled 
 * \param gzipConnectorRequestsEnabled 
 * \param hmacEnabled 
 * \param enableEncryption 
 * \param sharedKey 
 * \param hmacSharedKeyTTL 
 * \param backoffStandbyFactor 
 * \param backoffStableFactor 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDiscoveryOakConfigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int connectorPingTimeout, int connectorPingInterval, int discoveryLiteCheckInterval, int clusterSyncServiceTimeout, int clusterSyncServiceInterval, bool enableSyncToken, int minEventDelay, int socketConnectTimeout, int soTimeout, std::list<std::string> topologyConnectorUrls, std::list<std::string> topologyConnectorWhitelist, bool autoStopLocalLoopEnabled, bool gzipConnectorRequestsEnabled, bool hmacEnabled, bool enableEncryption, std::string sharedKey, int hmacSharedKeyTTL, std::string backoffStandbyFactor, std::string backoffStableFactor, 
	void(* handler)(OrgApacheSlingDiscoveryOakConfigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, 
	void(* handler)(OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, 
	void(* handler)(OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param title 
 * \param details 
 * \param enabled 
 * \param serviceName 
 * \param logPeriodlevel 
 * \param allowedPeriodroots 
 * \param queuePeriodprocessingPeriodenabled 
 * \param packageImporterPeriodendpoints 
 * \param passiveQueues 
 * \param priorityQueues 
 * \param retryPeriodstrategy 
 * \param retryPeriodattempts 
 * \param requestAuthorizationStrategyPeriodtarget 
 * \param transportSecretProviderPeriodtarget 
 * \param packageBuilderPeriodtarget 
 * \param triggersPeriodtarget 
 * \param queuePeriodprovider 
 * \param asyncPerioddelivery 
 * \param httpPeriodconnPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string title, std::string details, bool enabled, std::string serviceName, std::string logPeriodlevel, std::list<std::string> allowedPeriodroots, bool queuePeriodprocessingPeriodenabled, std::list<std::string> packageImporterPeriodendpoints, std::list<std::string> passiveQueues, std::list<std::string> priorityQueues, std::string retryPeriodstrategy, int retryPeriodattempts, std::string requestAuthorizationStrategyPeriodtarget, std::string transportSecretProviderPeriodtarget, std::string packageBuilderPeriodtarget, std::string triggersPeriodtarget, std::string queuePeriodprovider, bool asyncPerioddelivery, int httpPeriodconnPeriodtimeout, 
	void(* handler)(OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param title 
 * \param details 
 * \param enabled 
 * \param serviceName 
 * \param logPeriodlevel 
 * \param allowedPeriodroots 
 * \param queuePeriodprocessingPeriodenabled 
 * \param packageImporterPeriodendpoints 
 * \param passiveQueues 
 * \param priorityQueues 
 * \param retryPeriodstrategy 
 * \param retryPeriodattempts 
 * \param requestAuthorizationStrategyPeriodtarget 
 * \param transportSecretProviderPeriodtarget 
 * \param packageBuilderPeriodtarget 
 * \param triggersPeriodtarget 
 * \param queuePeriodprovider 
 * \param asyncPerioddelivery 
 * \param httpPeriodconnPeriodtimeout 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string title, std::string details, bool enabled, std::string serviceName, std::string logPeriodlevel, std::list<std::string> allowedPeriodroots, bool queuePeriodprocessingPeriodenabled, std::list<std::string> packageImporterPeriodendpoints, std::list<std::string> passiveQueues, std::list<std::string> priorityQueues, std::string retryPeriodstrategy, int retryPeriodattempts, std::string requestAuthorizationStrategyPeriodtarget, std::string transportSecretProviderPeriodtarget, std::string packageBuilderPeriodtarget, std::string triggersPeriodtarget, std::string queuePeriodprovider, bool asyncPerioddelivery, int httpPeriodconnPeriodtimeout, 
	void(* handler)(OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param jcrPrivilege 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestASync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string jcrPrivilege, 
	void(* handler)(OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param jcrPrivilege 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string jcrPrivilege, 
	void(* handler)(OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param title 
 * \param details 
 * \param enabled 
 * \param serviceName 
 * \param logPeriodlevel 
 * \param allowedPeriodroots 
 * \param requestAuthorizationStrategyPeriodtarget 
 * \param queueProviderFactoryPeriodtarget 
 * \param packageBuilderPeriodtarget 
 * \param triggersPeriodtarget 
 * \param priorityQueues 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplQueueDistributionAgentFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string title, std::string details, bool enabled, std::string serviceName, std::string logPeriodlevel, std::list<std::string> allowedPeriodroots, std::string requestAuthorizationStrategyPeriodtarget, std::string queueProviderFactoryPeriodtarget, std::string packageBuilderPeriodtarget, std::string triggersPeriodtarget, std::list<std::string> priorityQueues, 
	void(* handler)(OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param title 
 * \param details 
 * \param enabled 
 * \param serviceName 
 * \param logPeriodlevel 
 * \param allowedPeriodroots 
 * \param requestAuthorizationStrategyPeriodtarget 
 * \param queueProviderFactoryPeriodtarget 
 * \param packageBuilderPeriodtarget 
 * \param triggersPeriodtarget 
 * \param priorityQueues 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string title, std::string details, bool enabled, std::string serviceName, std::string logPeriodlevel, std::list<std::string> allowedPeriodroots, std::string requestAuthorizationStrategyPeriodtarget, std::string queueProviderFactoryPeriodtarget, std::string packageBuilderPeriodtarget, std::string triggersPeriodtarget, std::list<std::string> priorityQueues, 
	void(* handler)(OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param title 
 * \param details 
 * \param enabled 
 * \param serviceName 
 * \param logPeriodlevel 
 * \param queuePeriodprocessingPeriodenabled 
 * \param packageExporterPeriodendpoints 
 * \param pullPerioditems 
 * \param httpPeriodconnPeriodtimeout 
 * \param requestAuthorizationStrategyPeriodtarget 
 * \param transportSecretProviderPeriodtarget 
 * \param packageBuilderPeriodtarget 
 * \param triggersPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string title, std::string details, bool enabled, std::string serviceName, std::string logPeriodlevel, bool queuePeriodprocessingPeriodenabled, std::list<std::string> packageExporterPeriodendpoints, int pullPerioditems, int httpPeriodconnPeriodtimeout, std::string requestAuthorizationStrategyPeriodtarget, std::string transportSecretProviderPeriodtarget, std::string packageBuilderPeriodtarget, std::string triggersPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param title 
 * \param details 
 * \param enabled 
 * \param serviceName 
 * \param logPeriodlevel 
 * \param queuePeriodprocessingPeriodenabled 
 * \param packageExporterPeriodendpoints 
 * \param pullPerioditems 
 * \param httpPeriodconnPeriodtimeout 
 * \param requestAuthorizationStrategyPeriodtarget 
 * \param transportSecretProviderPeriodtarget 
 * \param packageBuilderPeriodtarget 
 * \param triggersPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string title, std::string details, bool enabled, std::string serviceName, std::string logPeriodlevel, bool queuePeriodprocessingPeriodenabled, std::list<std::string> packageExporterPeriodendpoints, int pullPerioditems, int httpPeriodconnPeriodtimeout, std::string requestAuthorizationStrategyPeriodtarget, std::string transportSecretProviderPeriodtarget, std::string packageBuilderPeriodtarget, std::string triggersPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param title 
 * \param details 
 * \param enabled 
 * \param serviceName 
 * \param logPeriodlevel 
 * \param queuePeriodprocessingPeriodenabled 
 * \param packageExporterPeriodtarget 
 * \param packageImporterPeriodtarget 
 * \param requestAuthorizationStrategyPeriodtarget 
 * \param triggersPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string title, std::string details, bool enabled, std::string serviceName, std::string logPeriodlevel, bool queuePeriodprocessingPeriodenabled, std::string packageExporterPeriodtarget, std::string packageImporterPeriodtarget, std::string requestAuthorizationStrategyPeriodtarget, std::string triggersPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param title 
 * \param details 
 * \param enabled 
 * \param serviceName 
 * \param logPeriodlevel 
 * \param queuePeriodprocessingPeriodenabled 
 * \param packageExporterPeriodtarget 
 * \param packageImporterPeriodtarget 
 * \param requestAuthorizationStrategyPeriodtarget 
 * \param triggersPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string title, std::string details, bool enabled, std::string serviceName, std::string logPeriodlevel, bool queuePeriodprocessingPeriodenabled, std::string packageExporterPeriodtarget, std::string packageImporterPeriodtarget, std::string requestAuthorizationStrategyPeriodtarget, std::string triggersPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param title 
 * \param details 
 * \param enabled 
 * \param serviceName 
 * \param logPeriodlevel 
 * \param queuePeriodprocessingPeriodenabled 
 * \param passiveQueues 
 * \param packageExporterPeriodendpoints 
 * \param packageImporterPeriodendpoints 
 * \param retryPeriodstrategy 
 * \param retryPeriodattempts 
 * \param pullPerioditems 
 * \param httpPeriodconnPeriodtimeout 
 * \param requestAuthorizationStrategyPeriodtarget 
 * \param transportSecretProviderPeriodtarget 
 * \param packageBuilderPeriodtarget 
 * \param triggersPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplSyncDistributionAgentFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string title, std::string details, bool enabled, std::string serviceName, std::string logPeriodlevel, bool queuePeriodprocessingPeriodenabled, std::list<std::string> passiveQueues, std::list<std::string> packageExporterPeriodendpoints, std::list<std::string> packageImporterPeriodendpoints, std::string retryPeriodstrategy, int retryPeriodattempts, int pullPerioditems, int httpPeriodconnPeriodtimeout, std::string requestAuthorizationStrategyPeriodtarget, std::string transportSecretProviderPeriodtarget, std::string packageBuilderPeriodtarget, std::string triggersPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param title 
 * \param details 
 * \param enabled 
 * \param serviceName 
 * \param logPeriodlevel 
 * \param queuePeriodprocessingPeriodenabled 
 * \param passiveQueues 
 * \param packageExporterPeriodendpoints 
 * \param packageImporterPeriodendpoints 
 * \param retryPeriodstrategy 
 * \param retryPeriodattempts 
 * \param pullPerioditems 
 * \param httpPeriodconnPeriodtimeout 
 * \param requestAuthorizationStrategyPeriodtarget 
 * \param transportSecretProviderPeriodtarget 
 * \param packageBuilderPeriodtarget 
 * \param triggersPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string title, std::string details, bool enabled, std::string serviceName, std::string logPeriodlevel, bool queuePeriodprocessingPeriodenabled, std::list<std::string> passiveQueues, std::list<std::string> packageExporterPeriodendpoints, std::list<std::string> packageImporterPeriodendpoints, std::string retryPeriodstrategy, int retryPeriodattempts, int pullPerioditems, int httpPeriodconnPeriodtimeout, std::string requestAuthorizationStrategyPeriodtarget, std::string transportSecretProviderPeriodtarget, std::string packageBuilderPeriodtarget, std::string triggersPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param numberOfRetriesAllowed 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionMonitorDistributionQueueHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, int numberOfRetriesAllowed, 
	void(* handler)(OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param numberOfRetriesAllowed 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionMonitorDistributionQueueHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, int numberOfRetriesAllowed, 
	void(* handler)(OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param queue 
 * \param dropPeriodinvalidPerioditems 
 * \param agentPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplExporterAgentDistributioSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string queue, bool dropPeriodinvalidPerioditems, std::string agentPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param queue 
 * \param dropPeriodinvalidPerioditems 
 * \param agentPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplExporterAgentDistributioAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string queue, bool dropPeriodinvalidPerioditems, std::string agentPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param packageBuilderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplExporterLocalDistributioSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string packageBuilderPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param packageBuilderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplExporterLocalDistributioAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string packageBuilderPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param endpoints 
 * \param pullPerioditems 
 * \param packageBuilderPeriodtarget 
 * \param transportSecretProviderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplExporterRemoteDistributiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::list<std::string> endpoints, int pullPerioditems, std::string packageBuilderPeriodtarget, std::string transportSecretProviderPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param endpoints 
 * \param pullPerioditems 
 * \param packageBuilderPeriodtarget 
 * \param transportSecretProviderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplExporterRemoteDistributiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::list<std::string> endpoints, int pullPerioditems, std::string packageBuilderPeriodtarget, std::string transportSecretProviderPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param packageBuilderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplImporterLocalDistributioSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string packageBuilderPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param packageBuilderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplImporterLocalDistributioAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string packageBuilderPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param endpoints 
 * \param transportSecretProviderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplImporterRemoteDistributiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::list<std::string> endpoints, std::string transportSecretProviderPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param endpoints 
 * \param transportSecretProviderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplImporterRemoteDistributiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::list<std::string> endpoints, std::string transportSecretProviderPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param servicePeriodname 
 * \param path 
 * \param privilegePeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplImporterRepositoryDistriSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string servicePeriodname, std::string path, std::string privilegePeriodname, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param servicePeriodname 
 * \param path 
 * \param privilegePeriodname 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionPackagingImplImporterRepositoryDistriAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string servicePeriodname, std::string path, std::string privilegePeriodname, 
	void(* handler)(OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodroots 
 * \param kind 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionResourcesImplDistributionConfigurationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodroots, std::string kind, 
	void(* handler)(OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodroots 
 * \param kind 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionResourcesImplDistributionConfigurationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodroots, std::string kind, 
	void(* handler)(OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodroots 
 * \param kind 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionResourcesImplDistributionServiceResourSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodroots, std::string kind, 
	void(* handler)(OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodroots 
 * \param kind 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionResourcesImplDistributionServiceResourAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodroots, std::string kind, 
	void(* handler)(OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param type 
 * \param formatPeriodtarget 
 * \param tempFsFolder 
 * \param fileThreshold 
 * \param memoryUnit 
 * \param useOffHeapMemory 
 * \param digestAlgorithm 
 * \param monitoringQueueSize 
 * \param cleanupDelay 
 * \param packagePeriodfilters 
 * \param propertyPeriodfilters 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionSerializationImplDistributionPackageBuSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string type, std::string formatPeriodtarget, std::string tempFsFolder, int fileThreshold, std::string memoryUnit, bool useOffHeapMemory, std::string digestAlgorithm, int monitoringQueueSize, int cleanupDelay, std::list<std::string> packagePeriodfilters, std::list<std::string> propertyPeriodfilters, 
	void(* handler)(OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param type 
 * \param formatPeriodtarget 
 * \param tempFsFolder 
 * \param fileThreshold 
 * \param memoryUnit 
 * \param useOffHeapMemory 
 * \param digestAlgorithm 
 * \param monitoringQueueSize 
 * \param cleanupDelay 
 * \param packagePeriodfilters 
 * \param propertyPeriodfilters 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionSerializationImplDistributionPackageBuAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string type, std::string formatPeriodtarget, std::string tempFsFolder, int fileThreshold, std::string memoryUnit, bool useOffHeapMemory, std::string digestAlgorithm, int monitoringQueueSize, int cleanupDelay, std::list<std::string> packagePeriodfilters, std::list<std::string> propertyPeriodfilters, 
	void(* handler)(OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param type 
 * \param importMode 
 * \param aclHandling 
 * \param packagePeriodroots 
 * \param packagePeriodfilters 
 * \param propertyPeriodfilters 
 * \param tempFsFolder 
 * \param useBinaryReferences 
 * \param autoSaveThreshold 
 * \param cleanupDelay 
 * \param fileThreshold 
 * \param mEGABYTES 
 * \param useOffHeapMemory 
 * \param digestAlgorithm 
 * \param monitoringQueueSize 
 * \param pathsMapping 
 * \param strictImport 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionSerializationImplVltVaultDistributionSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string type, std::string importMode, std::string aclHandling, std::string packagePeriodroots, std::list<std::string> packagePeriodfilters, std::list<std::string> propertyPeriodfilters, std::string tempFsFolder, bool useBinaryReferences, int autoSaveThreshold, int cleanupDelay, int fileThreshold, std::string mEGABYTES, bool useOffHeapMemory, std::string digestAlgorithm, int monitoringQueueSize, std::list<std::string> pathsMapping, bool strictImport, 
	void(* handler)(OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param type 
 * \param importMode 
 * \param aclHandling 
 * \param packagePeriodroots 
 * \param packagePeriodfilters 
 * \param propertyPeriodfilters 
 * \param tempFsFolder 
 * \param useBinaryReferences 
 * \param autoSaveThreshold 
 * \param cleanupDelay 
 * \param fileThreshold 
 * \param mEGABYTES 
 * \param useOffHeapMemory 
 * \param digestAlgorithm 
 * \param monitoringQueueSize 
 * \param pathsMapping 
 * \param strictImport 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionSerializationImplVltVaultDistributionAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string type, std::string importMode, std::string aclHandling, std::string packagePeriodroots, std::list<std::string> packagePeriodfilters, std::list<std::string> propertyPeriodfilters, std::string tempFsFolder, bool useBinaryReferences, int autoSaveThreshold, int cleanupDelay, int fileThreshold, std::string mEGABYTES, bool useOffHeapMemory, std::string digestAlgorithm, int monitoringQueueSize, std::list<std::string> pathsMapping, bool strictImport, 
	void(* handler)(OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param username 
 * \param password 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTransportImplUserCredentialsDistributiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string username, std::string password, 
	void(* handler)(OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param username 
 * \param password 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTransportImplUserCredentialsDistributiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string username, std::string password, 
	void(* handler)(OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplDistributionEventDistributeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string path, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplDistributionEventDistributeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string path, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param path 
 * \param ignoredPathsPatterns 
 * \param serviceName 
 * \param deep 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string path, std::list<std::string> ignoredPathsPatterns, std::string serviceName, bool deep, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param path 
 * \param ignoredPathsPatterns 
 * \param serviceName 
 * \param deep 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string path, std::list<std::string> ignoredPathsPatterns, std::string serviceName, bool deep, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param path 
 * \param serviceName 
 * \param nuggetsPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string path, std::string serviceName, std::string nuggetsPath, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param path 
 * \param serviceName 
 * \param nuggetsPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string path, std::string serviceName, std::string nuggetsPath, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param endpoint 
 * \param transportSecretProviderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string endpoint, std::string transportSecretProviderPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param endpoint 
 * \param transportSecretProviderPeriodtarget 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string endpoint, std::string transportSecretProviderPeriodtarget, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplResourceEventDistributionTrSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string path, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplResourceEventDistributionTrAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string path, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param path 
 * \param seconds 
 * \param serviceName 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string path, std::string seconds, std::string serviceName, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param path 
 * \param seconds 
 * \param serviceName 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string path, std::string seconds, std::string serviceName, 
	void(* handler)(OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodlistener 
 * \param authPeriodsudoPeriodcookie 
 * \param authPeriodsudoPeriodparameter 
 * \param authPeriodannonymous 
 * \param slingPeriodauthPeriodrequirements 
 * \param slingPeriodauthPeriodanonymousPerioduser 
 * \param slingPeriodauthPeriodanonymousPeriodpassword 
 * \param authPeriodhttp 
 * \param authPeriodhttpPeriodrealm 
 * \param authPerioduriPeriodsuffix 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineImplAuthSlingAuthenticatorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, std::string osgiPeriodhttpPeriodwhiteboardPeriodlistener, std::string authPeriodsudoPeriodcookie, std::string authPeriodsudoPeriodparameter, bool authPeriodannonymous, std::list<std::string> slingPeriodauthPeriodrequirements, std::string slingPeriodauthPeriodanonymousPerioduser, std::string slingPeriodauthPeriodanonymousPeriodpassword, std::string authPeriodhttp, std::string authPeriodhttpPeriodrealm, std::list<std::string> authPerioduriPeriodsuffix, 
	void(* handler)(OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodlistener 
 * \param authPeriodsudoPeriodcookie 
 * \param authPeriodsudoPeriodparameter 
 * \param authPeriodannonymous 
 * \param slingPeriodauthPeriodrequirements 
 * \param slingPeriodauthPeriodanonymousPerioduser 
 * \param slingPeriodauthPeriodanonymousPeriodpassword 
 * \param authPeriodhttp 
 * \param authPeriodhttpPeriodrealm 
 * \param authPerioduriPeriodsuffix 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineImplAuthSlingAuthenticatorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, std::string osgiPeriodhttpPeriodwhiteboardPeriodlistener, std::string authPeriodsudoPeriodcookie, std::string authPeriodsudoPeriodparameter, bool authPeriodannonymous, std::list<std::string> slingPeriodauthPeriodrequirements, std::string slingPeriodauthPeriodanonymousPerioduser, std::string slingPeriodauthPeriodanonymousPeriodpassword, std::string authPeriodhttp, std::string authPeriodhttpPeriodrealm, std::list<std::string> authPerioduriPeriodsuffix, 
	void(* handler)(OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param extensions 
 * \param minDurationMs 
 * \param maxDurationMs 
 * \param compactLogFormat 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> extensions, int minDurationMs, int maxDurationMs, bool compactLogFormat, 
	void(* handler)(OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param extensions 
 * \param minDurationMs 
 * \param maxDurationMs 
 * \param compactLogFormat 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> extensions, int minDurationMs, int maxDurationMs, bool compactLogFormat, 
	void(* handler)(OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param requestPeriodlogPeriodoutput 
 * \param requestPeriodlogPeriodoutputtype 
 * \param requestPeriodlogPeriodenabled 
 * \param accessPeriodlogPeriodoutput 
 * \param accessPeriodlogPeriodoutputtype 
 * \param accessPeriodlogPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineImplLogRequestLoggerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string requestPeriodlogPeriodoutput, int requestPeriodlogPeriodoutputtype, bool requestPeriodlogPeriodenabled, std::string accessPeriodlogPeriodoutput, int accessPeriodlogPeriodoutputtype, bool accessPeriodlogPeriodenabled, 
	void(* handler)(OrgApacheSlingEngineImplLogRequestLoggerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param requestPeriodlogPeriodoutput 
 * \param requestPeriodlogPeriodoutputtype 
 * \param requestPeriodlogPeriodenabled 
 * \param accessPeriodlogPeriodoutput 
 * \param accessPeriodlogPeriodoutputtype 
 * \param accessPeriodlogPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineImplLogRequestLoggerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string requestPeriodlogPeriodoutput, int requestPeriodlogPeriodoutputtype, bool requestPeriodlogPeriodenabled, std::string accessPeriodlogPeriodoutput, int accessPeriodlogPeriodoutputtype, bool accessPeriodlogPeriodenabled, 
	void(* handler)(OrgApacheSlingEngineImplLogRequestLoggerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param requestPeriodlogPeriodservicePeriodformat 
 * \param requestPeriodlogPeriodservicePeriodoutput 
 * \param requestPeriodlogPeriodservicePeriodoutputtype 
 * \param requestPeriodlogPeriodservicePeriodonentry 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineImplLogRequestLoggerServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string requestPeriodlogPeriodservicePeriodformat, std::string requestPeriodlogPeriodservicePeriodoutput, int requestPeriodlogPeriodservicePeriodoutputtype, bool requestPeriodlogPeriodservicePeriodonentry, 
	void(* handler)(OrgApacheSlingEngineImplLogRequestLoggerServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param requestPeriodlogPeriodservicePeriodformat 
 * \param requestPeriodlogPeriodservicePeriodoutput 
 * \param requestPeriodlogPeriodservicePeriodoutputtype 
 * \param requestPeriodlogPeriodservicePeriodonentry 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineImplLogRequestLoggerServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string requestPeriodlogPeriodservicePeriodformat, std::string requestPeriodlogPeriodservicePeriodoutput, int requestPeriodlogPeriodservicePeriodoutputtype, bool requestPeriodlogPeriodservicePeriodonentry, 
	void(* handler)(OrgApacheSlingEngineImplLogRequestLoggerServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodmaxPeriodcalls 
 * \param slingPeriodmaxPeriodinclusions 
 * \param slingPeriodtracePeriodallow 
 * \param slingPeriodmaxPeriodrecordPeriodrequests 
 * \param slingPeriodstorePeriodpatternPeriodrequests 
 * \param slingPeriodserverinfo 
 * \param slingPeriodadditionalPeriodresponsePeriodheaders 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineImplSlingMainServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int slingPeriodmaxPeriodcalls, int slingPeriodmaxPeriodinclusions, bool slingPeriodtracePeriodallow, int slingPeriodmaxPeriodrecordPeriodrequests, std::list<std::string> slingPeriodstorePeriodpatternPeriodrequests, std::string slingPeriodserverinfo, std::list<std::string> slingPeriodadditionalPeriodresponsePeriodheaders, 
	void(* handler)(OrgApacheSlingEngineImplSlingMainServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodmaxPeriodcalls 
 * \param slingPeriodmaxPeriodinclusions 
 * \param slingPeriodtracePeriodallow 
 * \param slingPeriodmaxPeriodrecordPeriodrequests 
 * \param slingPeriodstorePeriodpatternPeriodrequests 
 * \param slingPeriodserverinfo 
 * \param slingPeriodadditionalPeriodresponsePeriodheaders 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineImplSlingMainServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int slingPeriodmaxPeriodcalls, int slingPeriodmaxPeriodinclusions, bool slingPeriodtracePeriodallow, int slingPeriodmaxPeriodrecordPeriodrequests, std::list<std::string> slingPeriodstorePeriodpatternPeriodrequests, std::string slingPeriodserverinfo, std::list<std::string> slingPeriodadditionalPeriodresponsePeriodheaders, 
	void(* handler)(OrgApacheSlingEngineImplSlingMainServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPerioddefaultPeriodparameterPeriodencoding 
 * \param slingPerioddefaultPeriodmaxPeriodparameters 
 * \param filePeriodlocation 
 * \param filePeriodthreshold 
 * \param filePeriodmax 
 * \param requestPeriodmax 
 * \param slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineParametersSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPerioddefaultPeriodparameterPeriodencoding, int slingPerioddefaultPeriodmaxPeriodparameters, std::string filePeriodlocation, int filePeriodthreshold, int filePeriodmax, int requestPeriodmax, bool slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters, 
	void(* handler)(OrgApacheSlingEngineParametersInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPerioddefaultPeriodparameterPeriodencoding 
 * \param slingPerioddefaultPeriodmaxPeriodparameters 
 * \param filePeriodlocation 
 * \param filePeriodthreshold 
 * \param filePeriodmax 
 * \param requestPeriodmax 
 * \param slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEngineParametersAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPerioddefaultPeriodparameterPeriodencoding, int slingPerioddefaultPeriodmaxPeriodparameters, std::string filePeriodlocation, int filePeriodthreshold, int filePeriodmax, int requestPeriodmax, bool slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters, 
	void(* handler)(OrgApacheSlingEngineParametersInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param minPoolSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEventImplEventingThreadPoolSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int minPoolSize, 
	void(* handler)(OrgApacheSlingEventImplEventingThreadPoolInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param minPoolSize 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEventImplEventingThreadPoolAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int minPoolSize, 
	void(* handler)(OrgApacheSlingEventImplEventingThreadPoolInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queuePeriodpriority 
 * \param queuePeriodretries 
 * \param queuePeriodretrydelay 
 * \param queuePeriodmaxparallel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEventImplJobsDefaultJobManagerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string queuePeriodpriority, int queuePeriodretries, int queuePeriodretrydelay, int queuePeriodmaxparallel, 
	void(* handler)(OrgApacheSlingEventImplJobsDefaultJobManagerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queuePeriodpriority 
 * \param queuePeriodretries 
 * \param queuePeriodretrydelay 
 * \param queuePeriodmaxparallel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEventImplJobsDefaultJobManagerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string queuePeriodpriority, int queuePeriodretries, int queuePeriodretrydelay, int queuePeriodmaxparallel, 
	void(* handler)(OrgApacheSlingEventImplJobsDefaultJobManagerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jobPeriodconsumermanagerPerioddisableDistribution 
 * \param startupPerioddelay 
 * \param cleanupPeriodperiod 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEventImplJobsJcrPersistenceHandlerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool jobPeriodconsumermanagerPerioddisableDistribution, int startupPerioddelay, int cleanupPeriodperiod, 
	void(* handler)(OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jobPeriodconsumermanagerPerioddisableDistribution 
 * \param startupPerioddelay 
 * \param cleanupPeriodperiod 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEventImplJobsJcrPersistenceHandlerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool jobPeriodconsumermanagerPerioddisableDistribution, int startupPerioddelay, int cleanupPeriodperiod, 
	void(* handler)(OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist 
 * \param jobPeriodconsumermanagerPeriodwhitelist 
 * \param jobPeriodconsumermanagerPeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEventImplJobsJobConsumerManagerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist, std::list<std::string> jobPeriodconsumermanagerPeriodwhitelist, std::list<std::string> jobPeriodconsumermanagerPeriodblacklist, 
	void(* handler)(OrgApacheSlingEventImplJobsJobConsumerManagerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist 
 * \param jobPeriodconsumermanagerPeriodwhitelist 
 * \param jobPeriodconsumermanagerPeriodblacklist 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEventImplJobsJobConsumerManagerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist, std::list<std::string> jobPeriodconsumermanagerPeriodwhitelist, std::list<std::string> jobPeriodconsumermanagerPeriodblacklist, 
	void(* handler)(OrgApacheSlingEventImplJobsJobConsumerManagerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queuePeriodname 
 * \param queuePeriodtopics 
 * \param queuePeriodtype 
 * \param queuePeriodpriority 
 * \param queuePeriodretries 
 * \param queuePeriodretrydelay 
 * \param queuePeriodmaxparallel 
 * \param queuePeriodkeepJobs 
 * \param queuePeriodpreferRunOnCreationInstance 
 * \param queuePeriodthreadPoolSize 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEventJobsQueueConfigurationSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string queuePeriodname, std::list<std::string> queuePeriodtopics, std::string queuePeriodtype, std::string queuePeriodpriority, int queuePeriodretries, int queuePeriodretrydelay, long long queuePeriodmaxparallel, bool queuePeriodkeepJobs, bool queuePeriodpreferRunOnCreationInstance, int queuePeriodthreadPoolSize, int servicePeriodranking, 
	void(* handler)(OrgApacheSlingEventJobsQueueConfigurationInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param queuePeriodname 
 * \param queuePeriodtopics 
 * \param queuePeriodtype 
 * \param queuePeriodpriority 
 * \param queuePeriodretries 
 * \param queuePeriodretrydelay 
 * \param queuePeriodmaxparallel 
 * \param queuePeriodkeepJobs 
 * \param queuePeriodpreferRunOnCreationInstance 
 * \param queuePeriodthreadPoolSize 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingEventJobsQueueConfigurationAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string queuePeriodname, std::list<std::string> queuePeriodtopics, std::string queuePeriodtype, std::string queuePeriodpriority, int queuePeriodretries, int queuePeriodretrydelay, long long queuePeriodmaxparallel, bool queuePeriodkeepJobs, bool queuePeriodpreferRunOnCreationInstance, int queuePeriodthreadPoolSize, int servicePeriodranking, 
	void(* handler)(OrgApacheSlingEventJobsQueueConfigurationInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param users 
 * \param groups 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> users, std::list<std::string> groups, 
	void(* handler)(OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param users 
 * \param groups 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> users, std::list<std::string> groups, 
	void(* handler)(OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param description 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingFeatureflagsFeatureSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string description, bool enabled, 
	void(* handler)(OrgApacheSlingFeatureflagsFeatureInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param description 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingFeatureflagsFeatureAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string description, bool enabled, 
	void(* handler)(OrgApacheSlingFeatureflagsFeatureInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param description 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingFeatureflagsImplConfiguredFeatureSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string description, bool enabled, 
	void(* handler)(OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param name 
 * \param description 
 * \param enabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingFeatureflagsImplConfiguredFeatureAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string name, std::string description, bool enabled, 
	void(* handler)(OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype 
 * \param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype 
 * \param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths 
 * \param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl 
 * \param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHapiImplHApiUtilImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype, std::string orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype, std::list<std::string> orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths, std::string orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl, bool orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled, 
	void(* handler)(OrgApacheSlingHapiImplHApiUtilImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype 
 * \param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype 
 * \param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths 
 * \param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl 
 * \param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHapiImplHApiUtilImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype, std::string orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype, std::list<std::string> orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths, std::string orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl, bool orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled, 
	void(* handler)(OrgApacheSlingHapiImplHApiUtilImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param filterPeriodtags 
 * \param filterPeriodcombineTagsWithOr 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplCompositeHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, std::list<std::string> filterPeriodtags, bool filterPeriodcombineTagsWithOr, 
	void(* handler)(OrgApacheSlingHcCoreImplCompositeHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param filterPeriodtags 
 * \param filterPeriodcombineTagsWithOr 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplCompositeHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, std::list<std::string> filterPeriodtags, bool filterPeriodcombineTagsWithOr, 
	void(* handler)(OrgApacheSlingHcCoreImplCompositeHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param timeoutInMs 
 * \param longRunningFutureThresholdForCriticalMs 
 * \param resultCacheTtlInMs 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int timeoutInMs, int longRunningFutureThresholdForCriticalMs, int resultCacheTtlInMs, 
	void(* handler)(OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param timeoutInMs 
 * \param longRunningFutureThresholdForCriticalMs 
 * \param resultCacheTtlInMs 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int timeoutInMs, int longRunningFutureThresholdForCriticalMs, int resultCacheTtlInMs, 
	void(* handler)(OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param mbeanPeriodname 
 * \param attributePeriodname 
 * \param attributePeriodvaluePeriodconstraint 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplJmxAttributeHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, std::string mbeanPeriodname, std::string attributePeriodname, std::string attributePeriodvaluePeriodconstraint, 
	void(* handler)(OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param mbeanPeriodname 
 * \param attributePeriodname 
 * \param attributePeriodvaluePeriodconstraint 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplJmxAttributeHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, std::string mbeanPeriodname, std::string attributePeriodname, std::string attributePeriodvaluePeriodconstraint, 
	void(* handler)(OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param expression 
 * \param languagePeriodextension 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplScriptableHealthCheckSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, std::string expression, std::string languagePeriodextension, 
	void(* handler)(OrgApacheSlingHcCoreImplScriptableHealthCheckInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param hcPeriodname 
 * \param hcPeriodtags 
 * \param hcPeriodmbeanPeriodname 
 * \param expression 
 * \param languagePeriodextension 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplScriptableHealthCheckAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string hcPeriodname, std::list<std::string> hcPeriodtags, std::string hcPeriodmbeanPeriodname, std::string expression, std::string languagePeriodextension, 
	void(* handler)(OrgApacheSlingHcCoreImplScriptableHealthCheckInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servletPath 
 * \param disabled 
 * \param corsPeriodaccessControlAllowOrigin 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplServletHealthCheckExecutorServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string servletPath, bool disabled, std::string corsPeriodaccessControlAllowOrigin, 
	void(* handler)(OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servletPath 
 * \param disabled 
 * \param corsPeriodaccessControlAllowOrigin 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplServletHealthCheckExecutorServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string servletPath, bool disabled, std::string corsPeriodaccessControlAllowOrigin, 
	void(* handler)(OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param totalWidth 
 * \param colWidthName 
 * \param colWidthResult 
 * \param colWidthTiming 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int totalWidth, int colWidthName, int colWidthResult, int colWidthTiming, 
	void(* handler)(OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param totalWidth 
 * \param colWidthName 
 * \param colWidthResult 
 * \param colWidthTiming 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int totalWidth, int colWidthName, int colWidthResult, int colWidthTiming, 
	void(* handler)(OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param slingPeriodfilterPeriodscope 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingI18nImplI18NFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::list<std::string> slingPeriodfilterPeriodscope, 
	void(* handler)(OrgApacheSlingI18nImplI18NFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param slingPeriodfilterPeriodscope 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingI18nImplI18NFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::list<std::string> slingPeriodfilterPeriodscope, 
	void(* handler)(OrgApacheSlingI18nImplI18NFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param localePerioddefault 
 * \param preloadPeriodbundles 
 * \param invalidationPerioddelay 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingI18nImplJcrResourceBundleProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string localePerioddefault, bool preloadPeriodbundles, int invalidationPerioddelay, 
	void(* handler)(OrgApacheSlingI18nImplJcrResourceBundleProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param localePerioddefault 
 * \param preloadPeriodbundles 
 * \param invalidationPerioddelay 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingI18nImplJcrResourceBundleProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string localePerioddefault, bool preloadPeriodbundles, int invalidationPerioddelay, 
	void(* handler)(OrgApacheSlingI18nImplJcrResourceBundleProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param handlerPeriodschemes 
 * \param slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp 
 * \param slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth 
 * \param slingPeriodjcrinstallPeriodsearchPeriodpath 
 * \param slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath 
 * \param slingPeriodjcrinstallPeriodsignalPeriodpath 
 * \param slingPeriodjcrinstallPeriodenablePeriodwriteback 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingInstallerProviderJcrImplJcrInstallerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> handlerPeriodschemes, std::string slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp, int slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth, std::list<std::string> slingPeriodjcrinstallPeriodsearchPeriodpath, std::string slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath, std::string slingPeriodjcrinstallPeriodsignalPeriodpath, bool slingPeriodjcrinstallPeriodenablePeriodwriteback, 
	void(* handler)(OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param handlerPeriodschemes 
 * \param slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp 
 * \param slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth 
 * \param slingPeriodjcrinstallPeriodsearchPeriodpath 
 * \param slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath 
 * \param slingPeriodjcrinstallPeriodsignalPeriodpath 
 * \param slingPeriodjcrinstallPeriodenablePeriodwriteback 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingInstallerProviderJcrImplJcrInstallerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> handlerPeriodschemes, std::string slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp, int slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth, std::list<std::string> slingPeriodjcrinstallPeriodsearchPeriodpath, std::string slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath, std::string slingPeriodjcrinstallPeriodsignalPeriodpath, bool slingPeriodjcrinstallPeriodenablePeriodwriteback, 
	void(* handler)(OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param whitelistPeriodbypass 
 * \param whitelistPeriodbundlesPeriodregexp 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrBaseInternalLoginAdminWhitelistSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool whitelistPeriodbypass, std::string whitelistPeriodbundlesPeriodregexp, 
	void(* handler)(OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param whitelistPeriodbypass 
 * \param whitelistPeriodbundlesPeriodregexp 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrBaseInternalLoginAdminWhitelistAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool whitelistPeriodbypass, std::string whitelistPeriodbundlesPeriodregexp, 
	void(* handler)(OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param whitelistPeriodname 
 * \param whitelistPeriodbundles 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string whitelistPeriodname, std::list<std::string> whitelistPeriodbundles, 
	void(* handler)(OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param whitelistPeriodname 
 * \param whitelistPeriodbundles 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string whitelistPeriodname, std::list<std::string> whitelistPeriodbundles, 
	void(* handler)(OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param alias 
 * \param davPeriodcreateAbsoluteUri 
 * \param davPeriodprotectedhandlers 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrDavexImplServletsSlingDavExServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string alias, bool davPeriodcreateAbsoluteUri, std::string davPeriodprotectedhandlers, 
	void(* handler)(OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param alias 
 * \param davPeriodcreateAbsoluteUri 
 * \param davPeriodprotectedhandlers 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrDavexImplServletsSlingDavExServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string alias, bool davPeriodcreateAbsoluteUri, std::string davPeriodprotectedhandlers, 
	void(* handler)(OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param javaPeriodnamingPeriodfactoryPeriodinitial 
 * \param javaPeriodnamingPeriodproviderPeriodurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string javaPeriodnamingPeriodfactoryPeriodinitial, std::string javaPeriodnamingPeriodproviderPeriodurl, 
	void(* handler)(OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param javaPeriodnamingPeriodfactoryPeriodinitial 
 * \param javaPeriodnamingPeriodproviderPeriodurl 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string javaPeriodnamingPeriodfactoryPeriodinitial, std::string javaPeriodnamingPeriodproviderPeriodurl, 
	void(* handler)(OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param port 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int port, 
	void(* handler)(OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param port 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int port, 
	void(* handler)(OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param references 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrRepoinitImplRepositoryInitializerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> references, 
	void(* handler)(OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param references 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrRepoinitImplRepositoryInitializerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> references, 
	void(* handler)(OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param references 
 * \param scripts 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrRepoinitRepositoryInitializerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> references, std::list<std::string> scripts, 
	void(* handler)(OrgApacheSlingJcrRepoinitRepositoryInitializerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param references 
 * \param scripts 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrRepoinitRepositoryInitializerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> references, std::list<std::string> scripts, 
	void(* handler)(OrgApacheSlingJcrRepoinitRepositoryInitializerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param resourcePeriodresolverPeriodsearchpath 
 * \param resourcePeriodresolverPeriodmanglenamespaces 
 * \param resourcePeriodresolverPeriodallowDirect 
 * \param resourcePeriodresolverPeriodrequiredPeriodproviders 
 * \param resourcePeriodresolverPeriodrequiredPeriodprovidernames 
 * \param resourcePeriodresolverPeriodvirtual 
 * \param resourcePeriodresolverPeriodmapping 
 * \param resourcePeriodresolverPeriodmapPeriodlocation 
 * \param resourcePeriodresolverPeriodmapPeriodobservation 
 * \param resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus 
 * \param resourcePeriodresolverPeriodenablePeriodvanitypath 
 * \param resourcePeriodresolverPeriodvanitypathPeriodmaxEntries 
 * \param resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup 
 * \param resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes 
 * \param resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution 
 * \param resourcePeriodresolverPeriodvanitypathPeriodwhitelist 
 * \param resourcePeriodresolverPeriodvanitypathPeriodblacklist 
 * \param resourcePeriodresolverPeriodvanityPeriodprecedence 
 * \param resourcePeriodresolverPeriodproviderhandlingPeriodparanoid 
 * \param resourcePeriodresolverPeriodlogPeriodclosing 
 * \param resourcePeriodresolverPeriodlogPeriodunclosed 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> resourcePeriodresolverPeriodsearchpath, bool resourcePeriodresolverPeriodmanglenamespaces, bool resourcePeriodresolverPeriodallowDirect, std::list<std::string> resourcePeriodresolverPeriodrequiredPeriodproviders, std::list<std::string> resourcePeriodresolverPeriodrequiredPeriodprovidernames, std::list<std::string> resourcePeriodresolverPeriodvirtual, std::list<std::string> resourcePeriodresolverPeriodmapping, std::string resourcePeriodresolverPeriodmapPeriodlocation, std::list<std::string> resourcePeriodresolverPeriodmapPeriodobservation, int resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus, bool resourcePeriodresolverPeriodenablePeriodvanitypath, int resourcePeriodresolverPeriodvanitypathPeriodmaxEntries, bool resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup, int resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes, bool resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution, std::list<std::string> resourcePeriodresolverPeriodvanitypathPeriodwhitelist, std::list<std::string> resourcePeriodresolverPeriodvanitypathPeriodblacklist, bool resourcePeriodresolverPeriodvanityPeriodprecedence, bool resourcePeriodresolverPeriodproviderhandlingPeriodparanoid, bool resourcePeriodresolverPeriodlogPeriodclosing, bool resourcePeriodresolverPeriodlogPeriodunclosed, 
	void(* handler)(OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param resourcePeriodresolverPeriodsearchpath 
 * \param resourcePeriodresolverPeriodmanglenamespaces 
 * \param resourcePeriodresolverPeriodallowDirect 
 * \param resourcePeriodresolverPeriodrequiredPeriodproviders 
 * \param resourcePeriodresolverPeriodrequiredPeriodprovidernames 
 * \param resourcePeriodresolverPeriodvirtual 
 * \param resourcePeriodresolverPeriodmapping 
 * \param resourcePeriodresolverPeriodmapPeriodlocation 
 * \param resourcePeriodresolverPeriodmapPeriodobservation 
 * \param resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus 
 * \param resourcePeriodresolverPeriodenablePeriodvanitypath 
 * \param resourcePeriodresolverPeriodvanitypathPeriodmaxEntries 
 * \param resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup 
 * \param resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes 
 * \param resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution 
 * \param resourcePeriodresolverPeriodvanitypathPeriodwhitelist 
 * \param resourcePeriodresolverPeriodvanitypathPeriodblacklist 
 * \param resourcePeriodresolverPeriodvanityPeriodprecedence 
 * \param resourcePeriodresolverPeriodproviderhandlingPeriodparanoid 
 * \param resourcePeriodresolverPeriodlogPeriodclosing 
 * \param resourcePeriodresolverPeriodlogPeriodunclosed 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> resourcePeriodresolverPeriodsearchpath, bool resourcePeriodresolverPeriodmanglenamespaces, bool resourcePeriodresolverPeriodallowDirect, std::list<std::string> resourcePeriodresolverPeriodrequiredPeriodproviders, std::list<std::string> resourcePeriodresolverPeriodrequiredPeriodprovidernames, std::list<std::string> resourcePeriodresolverPeriodvirtual, std::list<std::string> resourcePeriodresolverPeriodmapping, std::string resourcePeriodresolverPeriodmapPeriodlocation, std::list<std::string> resourcePeriodresolverPeriodmapPeriodobservation, int resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus, bool resourcePeriodresolverPeriodenablePeriodvanitypath, int resourcePeriodresolverPeriodvanitypathPeriodmaxEntries, bool resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup, int resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes, bool resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution, std::list<std::string> resourcePeriodresolverPeriodvanitypathPeriodwhitelist, std::list<std::string> resourcePeriodresolverPeriodvanitypathPeriodblacklist, bool resourcePeriodresolverPeriodvanityPeriodprecedence, bool resourcePeriodresolverPeriodproviderhandlingPeriodparanoid, bool resourcePeriodresolverPeriodlogPeriodclosing, bool resourcePeriodresolverPeriodlogPeriodunclosed, 
	void(* handler)(OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param allowPeriodonlyPeriodsystemPerioduser 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrResourceInternalJcrSystemUserValidatorSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool allowPeriodonlyPeriodsystemPerioduser, 
	void(* handler)(OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param allowPeriodonlyPeriodsystemPerioduser 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrResourceInternalJcrSystemUserValidatorAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool allowPeriodonlyPeriodsystemPerioduser, 
	void(* handler)(OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param checkpathPeriodprefix 
 * \param jcrPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, std::string checkpathPeriodprefix, std::string jcrPath, 
	void(* handler)(OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param path 
 * \param checkpathPeriodprefix 
 * \param jcrPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string path, std::string checkpathPeriodprefix, std::string jcrPath, 
	void(* handler)(OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param typePeriodcollections 
 * \param typePeriodnoncollections 
 * \param typePeriodcontent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string typePeriodcollections, std::string typePeriodnoncollections, std::string typePeriodcontent, 
	void(* handler)(OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param typePeriodcollections 
 * \param typePeriodnoncollections 
 * \param typePeriodcontent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::string typePeriodcollections, std::string typePeriodnoncollections, std::string typePeriodcontent, 
	void(* handler)(OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, 
	void(* handler)(OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, 
	void(* handler)(OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param davPeriodroot 
 * \param davPeriodcreateAbsoluteUri 
 * \param davPeriodrealm 
 * \param collectionPeriodtypes 
 * \param filterPeriodprefixes 
 * \param filterPeriodtypes 
 * \param filterPerioduris 
 * \param typePeriodcollections 
 * \param typePeriodnoncollections 
 * \param typePeriodcontent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string davPeriodroot, bool davPeriodcreateAbsoluteUri, std::string davPeriodrealm, std::list<std::string> collectionPeriodtypes, std::list<std::string> filterPeriodprefixes, std::string filterPeriodtypes, std::string filterPerioduris, std::string typePeriodcollections, std::string typePeriodnoncollections, std::string typePeriodcontent, 
	void(* handler)(OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param davPeriodroot 
 * \param davPeriodcreateAbsoluteUri 
 * \param davPeriodrealm 
 * \param collectionPeriodtypes 
 * \param filterPeriodprefixes 
 * \param filterPeriodtypes 
 * \param filterPerioduris 
 * \param typePeriodcollections 
 * \param typePeriodnoncollections 
 * \param typePeriodcontent 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string davPeriodroot, bool davPeriodcreateAbsoluteUri, std::string davPeriodrealm, std::list<std::string> collectionPeriodtypes, std::list<std::string> filterPeriodprefixes, std::string filterPeriodtypes, std::string filterPerioduris, std::string typePeriodcollections, std::string typePeriodnoncollections, std::string typePeriodcontent, 
	void(* handler)(OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodroots 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJmxProviderImplJMXResourceProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodroots, 
	void(* handler)(OrgApacheSlingJmxProviderImplJMXResourceProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param providerPeriodroots 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingJmxProviderImplJMXResourceProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string providerPeriodroots, 
	void(* handler)(OrgApacheSlingJmxProviderImplJMXResourceProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodlistener 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect 
 * \param maxPeriodrecursionPerioddepth 
 * \param cleanupPeriodjobPeriodperiod 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingModelsImplModelAdapterFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string osgiPeriodhttpPeriodwhiteboardPeriodlistener, std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, int maxPeriodrecursionPerioddepth, int cleanupPeriodjobPeriodperiod, 
	void(* handler)(OrgApacheSlingModelsImplModelAdapterFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodlistener 
 * \param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect 
 * \param maxPeriodrecursionPerioddepth 
 * \param cleanupPeriodjobPeriodperiod 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingModelsImplModelAdapterFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string osgiPeriodhttpPeriodwhiteboardPeriodlistener, std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, int maxPeriodrecursionPerioddepth, int cleanupPeriodjobPeriodperiod, 
	void(* handler)(OrgApacheSlingModelsImplModelAdapterFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPeriodrecursionPeriodlevels 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingModelsJacksonexporterImplResourceModuleProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxPeriodrecursionPeriodlevels, 
	void(* handler)(OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param maxPeriodrecursionPeriodlevels 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingModelsJacksonexporterImplResourceModuleProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int maxPeriodrecursionPeriodlevels, 
	void(* handler)(OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param felixPeriodinventoryPeriodprinterPeriodname 
 * \param felixPeriodinventoryPeriodprinterPeriodtitle 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string felixPeriodinventoryPeriodprinterPeriodname, std::string felixPeriodinventoryPeriodprinterPeriodtitle, std::string path, 
	void(* handler)(OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param felixPeriodinventoryPeriodprinterPeriodname 
 * \param felixPeriodinventoryPeriodprinterPeriodtitle 
 * \param path 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string felixPeriodinventoryPeriodprinterPeriodname, std::string felixPeriodinventoryPeriodprinterPeriodtitle, std::string path, 
	void(* handler)(OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mergePeriodroot 
 * \param mergePeriodreadOnly 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingResourcemergerImplMergedResourceProviderFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mergePeriodroot, bool mergePeriodreadOnly, 
	void(* handler)(OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mergePeriodroot 
 * \param mergePeriodreadOnly 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingResourcemergerImplMergedResourceProviderFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mergePeriodroot, bool mergePeriodreadOnly, 
	void(* handler)(OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mergePeriodroot 
 * \param mergePeriodreadOnly 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingResourcemergerPickerOverridingSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mergePeriodroot, bool mergePeriodreadOnly, 
	void(* handler)(OrgApacheSlingResourcemergerPickerOverridingInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param mergePeriodroot 
 * \param mergePeriodreadOnly 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingResourcemergerPickerOverridingAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string mergePeriodroot, bool mergePeriodreadOnly, 
	void(* handler)(OrgApacheSlingResourcemergerPickerOverridingInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingCoreImplScriptCacheImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize, std::list<std::string> orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions, 
	void(* handler)(OrgApacheSlingScriptingCoreImplScriptCacheImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingCoreImplScriptCacheImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize, std::list<std::string> orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions, 
	void(* handler)(OrgApacheSlingScriptingCoreImplScriptCacheImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param logPeriodstacktracePeriodonclose 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool logPeriodstacktracePeriodonclose, 
	void(* handler)(OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param logPeriodstacktracePeriodonclose 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool logPeriodstacktracePeriodonclose, 
	void(* handler)(OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param javaPeriodclassdebuginfo 
 * \param javaPeriodjavaEncoding 
 * \param javaPeriodcompilerSourceVM 
 * \param javaPeriodcompilerTargetVM 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingJavaImplJavaScriptEngineFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool javaPeriodclassdebuginfo, std::string javaPeriodjavaEncoding, std::string javaPeriodcompilerSourceVM, std::string javaPeriodcompilerTargetVM, 
	void(* handler)(OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param javaPeriodclassdebuginfo 
 * \param javaPeriodjavaEncoding 
 * \param javaPeriodcompilerSourceVM 
 * \param javaPeriodcompilerTargetVM 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool javaPeriodclassdebuginfo, std::string javaPeriodjavaEncoding, std::string javaPeriodcompilerSourceVM, std::string javaPeriodcompilerTargetVM, 
	void(* handler)(OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel, 
	void(* handler)(OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel, 
	void(* handler)(OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jasperPeriodcompilerTargetVM 
 * \param jasperPeriodcompilerSourceVM 
 * \param jasperPeriodclassdebuginfo 
 * \param jasperPeriodenablePooling 
 * \param jasperPeriodieClassId 
 * \param jasperPeriodgenStringAsCharArray 
 * \param jasperPeriodkeepgenerated 
 * \param jasperPeriodmappedfile 
 * \param jasperPeriodtrimSpaces 
 * \param jasperPerioddisplaySourceFragments 
 * \param defaultPeriodisPeriodsession 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingJspJspScriptEngineFactorySync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jasperPeriodcompilerTargetVM, std::string jasperPeriodcompilerSourceVM, bool jasperPeriodclassdebuginfo, bool jasperPeriodenablePooling, std::string jasperPeriodieClassId, bool jasperPeriodgenStringAsCharArray, bool jasperPeriodkeepgenerated, bool jasperPeriodmappedfile, bool jasperPeriodtrimSpaces, bool jasperPerioddisplaySourceFragments, bool defaultPeriodisPeriodsession, 
	void(* handler)(OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param jasperPeriodcompilerTargetVM 
 * \param jasperPeriodcompilerSourceVM 
 * \param jasperPeriodclassdebuginfo 
 * \param jasperPeriodenablePooling 
 * \param jasperPeriodieClassId 
 * \param jasperPeriodgenStringAsCharArray 
 * \param jasperPeriodkeepgenerated 
 * \param jasperPeriodmappedfile 
 * \param jasperPeriodtrimSpaces 
 * \param jasperPerioddisplaySourceFragments 
 * \param defaultPeriodisPeriodsession 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingJspJspScriptEngineFactoryAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string jasperPeriodcompilerTargetVM, std::string jasperPeriodcompilerSourceVM, bool jasperPeriodclassdebuginfo, bool jasperPeriodenablePooling, std::string jasperPeriodieClassId, bool jasperPeriodgenStringAsCharArray, bool jasperPeriodkeepgenerated, bool jasperPeriodmappedfile, bool jasperPeriodtrimSpaces, bool jasperPerioddisplaySourceFragments, bool defaultPeriodisPeriodsession, 
	void(* handler)(OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings, 
	void(* handler)(OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings, 
	void(* handler)(OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodcontentPerioddispositionPeriodpaths 
 * \param slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths 
 * \param slingPeriodcontentPerioddispositionPeriodallPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingSecurityImplContentDispositionFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodcontentPerioddispositionPeriodpaths, std::list<std::string> slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths, bool slingPeriodcontentPerioddispositionPeriodallPeriodpaths, 
	void(* handler)(OrgApacheSlingSecurityImplContentDispositionFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodcontentPerioddispositionPeriodpaths 
 * \param slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths 
 * \param slingPeriodcontentPerioddispositionPeriodallPeriodpaths 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingSecurityImplContentDispositionFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodcontentPerioddispositionPeriodpaths, std::list<std::string> slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths, bool slingPeriodcontentPerioddispositionPeriodallPeriodpaths, 
	void(* handler)(OrgApacheSlingSecurityImplContentDispositionFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param allowPeriodempty 
 * \param allowPeriodhosts 
 * \param allowPeriodhostsPeriodregexp 
 * \param filterPeriodmethods 
 * \param excludePeriodagentsPeriodregexp 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingSecurityImplReferrerFilterSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool allowPeriodempty, std::list<std::string> allowPeriodhosts, std::list<std::string> allowPeriodhostsPeriodregexp, std::list<std::string> filterPeriodmethods, std::list<std::string> excludePeriodagentsPeriodregexp, 
	void(* handler)(OrgApacheSlingSecurityImplReferrerFilterInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param allowPeriodempty 
 * \param allowPeriodhosts 
 * \param allowPeriodhostsPeriodregexp 
 * \param filterPeriodmethods 
 * \param excludePeriodagentsPeriodregexp 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingSecurityImplReferrerFilterAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool allowPeriodempty, std::list<std::string> allowPeriodhosts, std::list<std::string> allowPeriodhostsPeriodregexp, std::list<std::string> filterPeriodmethods, std::list<std::string> excludePeriodagentsPeriodregexp, 
	void(* handler)(OrgApacheSlingSecurityImplReferrerFilterInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param userPeriodmapping 
 * \param userPerioddefault 
 * \param userPeriodenablePerioddefaultPeriodmapping 
 * \param requirePeriodvalidation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServiceusermappingImplServiceUserMapperImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> userPeriodmapping, std::string userPerioddefault, bool userPeriodenablePerioddefaultPeriodmapping, bool requirePeriodvalidation, 
	void(* handler)(OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param userPeriodmapping 
 * \param userPerioddefault 
 * \param userPeriodenablePerioddefaultPeriodmapping 
 * \param requirePeriodvalidation 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServiceusermappingImplServiceUserMapperImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> userPeriodmapping, std::string userPerioddefault, bool userPeriodenablePerioddefaultPeriodmapping, bool requirePeriodvalidation, 
	void(* handler)(OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param userPeriodmapping 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::list<std::string> userPeriodmapping, 
	void(* handler)(OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servicePeriodranking 
 * \param userPeriodmapping 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, int servicePeriodranking, std::list<std::string> userPeriodmapping, 
	void(* handler)(OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param aliases 
 * \param index 
 * \param indexPeriodfiles 
 * \param enablePeriodhtml 
 * \param enablePeriodjson 
 * \param enablePeriodtxt 
 * \param enablePeriodxml 
 * \param jsonPeriodmaximumresults 
 * \param ecmaSuport 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServletsGetDefaultGetServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> aliases, bool index, std::list<std::string> indexPeriodfiles, bool enablePeriodhtml, bool enablePeriodjson, bool enablePeriodtxt, bool enablePeriodxml, int jsonPeriodmaximumresults, bool ecmaSuport, 
	void(* handler)(OrgApacheSlingServletsGetDefaultGetServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param aliases 
 * \param index 
 * \param indexPeriodfiles 
 * \param enablePeriodhtml 
 * \param enablePeriodjson 
 * \param enablePeriodtxt 
 * \param enablePeriodxml 
 * \param jsonPeriodmaximumresults 
 * \param ecmaSuport 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServletsGetDefaultGetServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> aliases, bool index, std::list<std::string> indexPeriodfiles, bool enablePeriodhtml, bool enablePeriodjson, bool enablePeriodtxt, bool enablePeriodxml, int jsonPeriodmaximumresults, bool ecmaSuport, 
	void(* handler)(OrgApacheSlingServletsGetDefaultGetServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodselectors 
 * \param ecmaSuport 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServletsGetImplVersionVersionInfoServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodservletPeriodselectors, bool ecmaSuport, 
	void(* handler)(OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodservletPeriodselectors 
 * \param ecmaSuport 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServletsGetImplVersionVersionInfoServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> slingPeriodservletPeriodselectors, bool ecmaSuport, 
	void(* handler)(OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param schedulerPeriodconcurrent 
 * \param chunkPeriodcleanupPeriodage 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServletsPostImplHelperChunkCleanUpTaskSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, bool schedulerPeriodconcurrent, int chunkPeriodcleanupPeriodage, 
	void(* handler)(OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param schedulerPeriodexpression 
 * \param schedulerPeriodconcurrent 
 * \param chunkPeriodcleanupPeriodage 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServletsPostImplHelperChunkCleanUpTaskAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string schedulerPeriodexpression, bool schedulerPeriodconcurrent, int chunkPeriodcleanupPeriodage, 
	void(* handler)(OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servletPeriodpostPerioddateFormats 
 * \param servletPeriodpostPeriodnodeNameHints 
 * \param servletPeriodpostPeriodnodeNameMaxLength 
 * \param servletPeriodpostPeriodcheckinNewVersionableNodes 
 * \param servletPeriodpostPeriodautoCheckout 
 * \param servletPeriodpostPeriodautoCheckin 
 * \param servletPeriodpostPeriodignorePattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServletsPostImplSlingPostServletSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> servletPeriodpostPerioddateFormats, std::list<std::string> servletPeriodpostPeriodnodeNameHints, int servletPeriodpostPeriodnodeNameMaxLength, bool servletPeriodpostPeriodcheckinNewVersionableNodes, bool servletPeriodpostPeriodautoCheckout, bool servletPeriodpostPeriodautoCheckin, std::string servletPeriodpostPeriodignorePattern, 
	void(* handler)(OrgApacheSlingServletsPostImplSlingPostServletInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servletPeriodpostPerioddateFormats 
 * \param servletPeriodpostPeriodnodeNameHints 
 * \param servletPeriodpostPeriodnodeNameMaxLength 
 * \param servletPeriodpostPeriodcheckinNewVersionableNodes 
 * \param servletPeriodpostPeriodautoCheckout 
 * \param servletPeriodpostPeriodautoCheckin 
 * \param servletPeriodpostPeriodignorePattern 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServletsPostImplSlingPostServletAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> servletPeriodpostPerioddateFormats, std::list<std::string> servletPeriodpostPeriodnodeNameHints, int servletPeriodpostPeriodnodeNameMaxLength, bool servletPeriodpostPeriodcheckinNewVersionableNodes, bool servletPeriodpostPeriodautoCheckout, bool servletPeriodpostPeriodautoCheckin, std::string servletPeriodpostPeriodignorePattern, 
	void(* handler)(OrgApacheSlingServletsPostImplSlingPostServletInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servletresolverPeriodservletRoot 
 * \param servletresolverPeriodcacheSize 
 * \param servletresolverPeriodpaths 
 * \param servletresolverPerioddefaultExtensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServletsResolverSlingServletResolverSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string servletresolverPeriodservletRoot, int servletresolverPeriodcacheSize, std::list<std::string> servletresolverPeriodpaths, std::list<std::string> servletresolverPerioddefaultExtensions, 
	void(* handler)(OrgApacheSlingServletsResolverSlingServletResolverInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param servletresolverPeriodservletRoot 
 * \param servletresolverPeriodcacheSize 
 * \param servletresolverPeriodpaths 
 * \param servletresolverPerioddefaultExtensions 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingServletsResolverSlingServletResolverAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string servletresolverPeriodservletRoot, int servletresolverPeriodcacheSize, std::list<std::string> servletresolverPeriodpaths, std::list<std::string> servletresolverPerioddefaultExtensions, 
	void(* handler)(OrgApacheSlingServletsResolverSlingServletResolverInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodname 
 * \param slingPerioddescription 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingSettingsImplSlingSettingsServiceImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodname, std::string slingPerioddescription, 
	void(* handler)(OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param slingPeriodname 
 * \param slingPerioddescription 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingSettingsImplSlingSettingsServiceImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string slingPeriodname, std::string slingPerioddescription, 
	void(* handler)(OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param activePeriodbyPerioddefault 
 * \param defaultPeriodmessage 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingStartupfilterImplStartupFilterImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool activePeriodbyPerioddefault, std::string defaultPeriodmessage, 
	void(* handler)(OrgApacheSlingStartupfilterImplStartupFilterImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param activePeriodbyPerioddefault 
 * \param defaultPeriodmessage 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingStartupfilterImplStartupFilterImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, bool activePeriodbyPerioddefault, std::string defaultPeriodmessage, 
	void(* handler)(OrgApacheSlingStartupfilterImplStartupFilterImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param tenantPeriodroot 
 * \param tenantPeriodpathPeriodmatcher 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingTenantInternalTenantProviderImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string tenantPeriodroot, std::list<std::string> tenantPeriodpathPeriodmatcher, 
	void(* handler)(OrgApacheSlingTenantInternalTenantProviderImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param tenantPeriodroot 
 * \param tenantPeriodpathPeriodmatcher 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingTenantInternalTenantProviderImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string tenantPeriodroot, std::list<std::string> tenantPeriodpathPeriodmatcher, 
	void(* handler)(OrgApacheSlingTenantInternalTenantProviderImplInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param tracerSets 
 * \param enabled 
 * \param servletEnabled 
 * \param recordingCacheSizeInMB 
 * \param recordingCacheDurationInSecs 
 * \param recordingCompressionEnabled 
 * \param gzipResponse 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingTracerInternalLogTracerSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> tracerSets, bool enabled, bool servletEnabled, int recordingCacheSizeInMB, int recordingCacheDurationInSecs, bool recordingCompressionEnabled, bool gzipResponse, 
	void(* handler)(OrgApacheSlingTracerInternalLogTracerInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param tracerSets 
 * \param enabled 
 * \param servletEnabled 
 * \param recordingCacheSizeInMB 
 * \param recordingCacheDurationInSecs 
 * \param recordingCompressionEnabled 
 * \param gzipResponse 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingTracerInternalLogTracerAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::list<std::string> tracerSets, bool enabled, bool servletEnabled, int recordingCacheSizeInMB, int recordingCacheDurationInSecs, bool recordingCompressionEnabled, bool gzipResponse, 
	void(* handler)(OrgApacheSlingTracerInternalLogTracerInfo, Error, void* )
	, void* userData);


/*! \brief . *Synchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param policyPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingXssImplXSSFilterImplSync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string policyPath, 
	void(* handler)(OrgApacheSlingXssImplXSSFilterImplInfo, Error, void* )
	, void* userData);

/*! \brief . *Asynchronous*
 *
 * 
 * \param post 
 * \param apply 
 * \param _delete 
 * \param action 
 * \param Dollarlocation 
 * \param propertylist 
 * \param policyPath 
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool orgApacheSlingXssImplXSSFilterImplAsync(char * accessToken,
	bool post, bool apply, bool _delete, std::string action, std::string Dollarlocation, std::list<std::string> propertylist, std::string policyPath, 
	void(* handler)(OrgApacheSlingXssImplXSSFilterImplInfo, Error, void* )
	, void* userData);



	static std::string getBasePath()
	{
		return "http://localhost";
	}
};
/** @}*/

}
}
#endif /* ConfigmgrManager_H_ */
