/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties() {
    init();
}

OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::~OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::init() {
    translate_language = new OAIConfigNodePropertyDropDown();
    m_translate_language_isSet = false;
    translate_display = new OAIConfigNodePropertyDropDown();
    m_translate_display_isSet = false;
    translate_attribution = new OAIConfigNodePropertyBoolean();
    m_translate_attribution_isSet = false;
    translate_caching = new OAIConfigNodePropertyDropDown();
    m_translate_caching_isSet = false;
    translate_smart_rendering = new OAIConfigNodePropertyDropDown();
    m_translate_smart_rendering_isSet = false;
    translate_caching_duration = new OAIConfigNodePropertyString();
    m_translate_caching_duration_isSet = false;
    translate_session_save_interval = new OAIConfigNodePropertyString();
    m_translate_session_save_interval_isSet = false;
    translate_session_save_batch_limit = new OAIConfigNodePropertyString();
    m_translate_session_save_batch_limit_isSet = false;
}

void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::cleanup() {
    if(translate_language != nullptr) { 
        delete translate_language;
    }
    if(translate_display != nullptr) { 
        delete translate_display;
    }
    if(translate_attribution != nullptr) { 
        delete translate_attribution;
    }
    if(translate_caching != nullptr) { 
        delete translate_caching;
    }
    if(translate_smart_rendering != nullptr) { 
        delete translate_smart_rendering;
    }
    if(translate_caching_duration != nullptr) { 
        delete translate_caching_duration;
    }
    if(translate_session_save_interval != nullptr) { 
        delete translate_session_save_interval;
    }
    if(translate_session_save_batch_limit != nullptr) { 
        delete translate_session_save_batch_limit;
    }
}

OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties*
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&translate_language, pJson["translate.language"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&translate_display, pJson["translate.display"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&translate_attribution, pJson["translate.attribution"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&translate_caching, pJson["translate.caching"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&translate_smart_rendering, pJson["translate.smart.rendering"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&translate_caching_duration, pJson["translate.caching.duration"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&translate_session_save_interval, pJson["translate.session.save.interval"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&translate_session_save_batch_limit, pJson["translate.session.save.batchLimit"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::asJsonObject() {
    QJsonObject obj;
    if((translate_language != nullptr) && (translate_language->isSet())){
        toJsonValue(QString("translate.language"), translate_language, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((translate_display != nullptr) && (translate_display->isSet())){
        toJsonValue(QString("translate.display"), translate_display, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((translate_attribution != nullptr) && (translate_attribution->isSet())){
        toJsonValue(QString("translate.attribution"), translate_attribution, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((translate_caching != nullptr) && (translate_caching->isSet())){
        toJsonValue(QString("translate.caching"), translate_caching, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((translate_smart_rendering != nullptr) && (translate_smart_rendering->isSet())){
        toJsonValue(QString("translate.smart.rendering"), translate_smart_rendering, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((translate_caching_duration != nullptr) && (translate_caching_duration->isSet())){
        toJsonValue(QString("translate.caching.duration"), translate_caching_duration, obj, QString("OAIConfigNodePropertyString"));
    }
    if((translate_session_save_interval != nullptr) && (translate_session_save_interval->isSet())){
        toJsonValue(QString("translate.session.save.interval"), translate_session_save_interval, obj, QString("OAIConfigNodePropertyString"));
    }
    if((translate_session_save_batch_limit != nullptr) && (translate_session_save_batch_limit->isSet())){
        toJsonValue(QString("translate.session.save.batchLimit"), translate_session_save_batch_limit, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateLanguage() {
    return translate_language;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateLanguage(OAIConfigNodePropertyDropDown* translate_language) {
    this->translate_language = translate_language;
    this->m_translate_language_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateDisplay() {
    return translate_display;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateDisplay(OAIConfigNodePropertyDropDown* translate_display) {
    this->translate_display = translate_display;
    this->m_translate_display_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateAttribution() {
    return translate_attribution;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateAttribution(OAIConfigNodePropertyBoolean* translate_attribution) {
    this->translate_attribution = translate_attribution;
    this->m_translate_attribution_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateCaching() {
    return translate_caching;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateCaching(OAIConfigNodePropertyDropDown* translate_caching) {
    this->translate_caching = translate_caching;
    this->m_translate_caching_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSmartRendering() {
    return translate_smart_rendering;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSmartRendering(OAIConfigNodePropertyDropDown* translate_smart_rendering) {
    this->translate_smart_rendering = translate_smart_rendering;
    this->m_translate_smart_rendering_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateCachingDuration() {
    return translate_caching_duration;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateCachingDuration(OAIConfigNodePropertyString* translate_caching_duration) {
    this->translate_caching_duration = translate_caching_duration;
    this->m_translate_caching_duration_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSessionSaveInterval() {
    return translate_session_save_interval;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSessionSaveInterval(OAIConfigNodePropertyString* translate_session_save_interval) {
    this->translate_session_save_interval = translate_session_save_interval;
    this->m_translate_session_save_interval_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSessionSaveBatchLimit() {
    return translate_session_save_batch_limit;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSessionSaveBatchLimit(OAIConfigNodePropertyString* translate_session_save_batch_limit) {
    this->translate_session_save_batch_limit = translate_session_save_batch_limit;
    this->m_translate_session_save_batch_limit_isSet = true;
}


bool
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(translate_language != nullptr && translate_language->isSet()){ isObjectUpdated = true; break;}
        if(translate_display != nullptr && translate_display->isSet()){ isObjectUpdated = true; break;}
        if(translate_attribution != nullptr && translate_attribution->isSet()){ isObjectUpdated = true; break;}
        if(translate_caching != nullptr && translate_caching->isSet()){ isObjectUpdated = true; break;}
        if(translate_smart_rendering != nullptr && translate_smart_rendering->isSet()){ isObjectUpdated = true; break;}
        if(translate_caching_duration != nullptr && translate_caching_duration->isSet()){ isObjectUpdated = true; break;}
        if(translate_session_save_interval != nullptr && translate_session_save_interval->isSet()){ isObjectUpdated = true; break;}
        if(translate_session_save_batch_limit != nullptr && translate_session_save_batch_limit->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

