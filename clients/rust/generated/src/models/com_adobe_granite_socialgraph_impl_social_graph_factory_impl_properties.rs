/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
  #[serde(rename = "group2member.relationship.outgoing")]
  group2member_relationship_outgoing: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "group2member.excluded.outgoing")]
  group2member_excluded_outgoing: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "group2member.relationship.incoming")]
  group2member_relationship_incoming: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "group2member.excluded.incoming")]
  group2member_excluded_incoming: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
  pub fn new() -> ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
    ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
      group2member_relationship_outgoing: None,
      group2member_excluded_outgoing: None,
      group2member_relationship_incoming: None,
      group2member_excluded_incoming: None
    }
  }

  pub fn set_group2member_relationship_outgoing(&mut self, group2member_relationship_outgoing: ::models::ConfigNodePropertyString) {
    self.group2member_relationship_outgoing = Some(group2member_relationship_outgoing);
  }

  pub fn with_group2member_relationship_outgoing(mut self, group2member_relationship_outgoing: ::models::ConfigNodePropertyString) -> ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
    self.group2member_relationship_outgoing = Some(group2member_relationship_outgoing);
    self
  }

  pub fn group2member_relationship_outgoing(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.group2member_relationship_outgoing.as_ref()
  }

  pub fn reset_group2member_relationship_outgoing(&mut self) {
    self.group2member_relationship_outgoing = None;
  }

  pub fn set_group2member_excluded_outgoing(&mut self, group2member_excluded_outgoing: ::models::ConfigNodePropertyArray) {
    self.group2member_excluded_outgoing = Some(group2member_excluded_outgoing);
  }

  pub fn with_group2member_excluded_outgoing(mut self, group2member_excluded_outgoing: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
    self.group2member_excluded_outgoing = Some(group2member_excluded_outgoing);
    self
  }

  pub fn group2member_excluded_outgoing(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.group2member_excluded_outgoing.as_ref()
  }

  pub fn reset_group2member_excluded_outgoing(&mut self) {
    self.group2member_excluded_outgoing = None;
  }

  pub fn set_group2member_relationship_incoming(&mut self, group2member_relationship_incoming: ::models::ConfigNodePropertyString) {
    self.group2member_relationship_incoming = Some(group2member_relationship_incoming);
  }

  pub fn with_group2member_relationship_incoming(mut self, group2member_relationship_incoming: ::models::ConfigNodePropertyString) -> ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
    self.group2member_relationship_incoming = Some(group2member_relationship_incoming);
    self
  }

  pub fn group2member_relationship_incoming(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.group2member_relationship_incoming.as_ref()
  }

  pub fn reset_group2member_relationship_incoming(&mut self) {
    self.group2member_relationship_incoming = None;
  }

  pub fn set_group2member_excluded_incoming(&mut self, group2member_excluded_incoming: ::models::ConfigNodePropertyArray) {
    self.group2member_excluded_incoming = Some(group2member_excluded_incoming);
  }

  pub fn with_group2member_excluded_incoming(mut self, group2member_excluded_incoming: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
    self.group2member_excluded_incoming = Some(group2member_excluded_incoming);
    self
  }

  pub fn group2member_excluded_incoming(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.group2member_excluded_incoming.as_ref()
  }

  pub fn reset_group2member_excluded_incoming(&mut self) {
    self.group2member_excluded_incoming = None;
  }

}



