/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties_H_
#define OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties
{
public:
    OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties();
    virtual ~OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getName() const;
    void setName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getType() const;
    void setType(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getImportMode() const;
    void setImportMode(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAclHandling() const;
    void setAclHandling(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPackageRoots() const;
    void setPackageRoots(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPackageFilters() const;
    void setPackageFilters(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPropertyFilters() const;
    void setPropertyFilters(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTempFsFolder() const;
    void setTempFsFolder(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUseBinaryReferences() const;
    void setUseBinaryReferences(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAutoSaveThreshold() const;
    void setAutoSaveThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCleanupDelay() const;
    void setCleanupDelay(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getFileThreshold() const;
    void setFileThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getMEGABYTES() const;
    void setMEGABYTES(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUseOffHeapMemory() const;
    void setUseOffHeapMemory(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDigestAlgorithm() const;
    void setDigestAlgorithm(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMonitoringQueueSize() const;
    void setMonitoringQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPathsMapping() const;
    void setPathsMapping(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getStrictImport() const;
    void setStrictImport(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Name;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Type;
    std::shared_ptr<ConfigNodePropertyString> m_ImportMode;
    std::shared_ptr<ConfigNodePropertyString> m_AclHandling;
    std::shared_ptr<ConfigNodePropertyString> m_Package_roots;
    std::shared_ptr<ConfigNodePropertyArray> m_Package_filters;
    std::shared_ptr<ConfigNodePropertyArray> m_Property_filters;
    std::shared_ptr<ConfigNodePropertyString> m_TempFsFolder;
    std::shared_ptr<ConfigNodePropertyBoolean> m_UseBinaryReferences;
    std::shared_ptr<ConfigNodePropertyInteger> m_AutoSaveThreshold;
    std::shared_ptr<ConfigNodePropertyInteger> m_CleanupDelay;
    std::shared_ptr<ConfigNodePropertyInteger> m_FileThreshold;
    std::shared_ptr<ConfigNodePropertyDropDown> m_MEGA_BYTES;
    std::shared_ptr<ConfigNodePropertyBoolean> m_UseOffHeapMemory;
    std::shared_ptr<ConfigNodePropertyDropDown> m_DigestAlgorithm;
    std::shared_ptr<ConfigNodePropertyInteger> m_MonitoringQueueSize;
    std::shared_ptr<ConfigNodePropertyArray> m_PathsMapping;
    std::shared_ptr<ConfigNodePropertyBoolean> m_StrictImport;
};

}
}
}
}

#endif /* OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties_H_ */
