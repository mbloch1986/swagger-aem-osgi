/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteAuthOauthImplGraniteProviderProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteAuthOauthImplGraniteProviderProperties::ComAdobeGraniteAuthOauthImplGraniteProviderProperties()
{
    m_Oauth_provider_idIsSet = false;
    m_Oauth_provider_granite_authorization_urlIsSet = false;
    m_Oauth_provider_granite_token_urlIsSet = false;
    m_Oauth_provider_granite_profile_urlIsSet = false;
    m_Oauth_provider_granite_extended_details_urlsIsSet = false;
}

ComAdobeGraniteAuthOauthImplGraniteProviderProperties::~ComAdobeGraniteAuthOauthImplGraniteProviderProperties()
{
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteAuthOauthImplGraniteProviderProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Oauth_provider_idIsSet)
    {
        val[utility::conversions::to_string_t("oauth.provider.id")] = ModelBase::toJson(m_Oauth_provider_id);
    }
    if(m_Oauth_provider_granite_authorization_urlIsSet)
    {
        val[utility::conversions::to_string_t("oauth.provider.granite.authorization.url")] = ModelBase::toJson(m_Oauth_provider_granite_authorization_url);
    }
    if(m_Oauth_provider_granite_token_urlIsSet)
    {
        val[utility::conversions::to_string_t("oauth.provider.granite.token.url")] = ModelBase::toJson(m_Oauth_provider_granite_token_url);
    }
    if(m_Oauth_provider_granite_profile_urlIsSet)
    {
        val[utility::conversions::to_string_t("oauth.provider.granite.profile.url")] = ModelBase::toJson(m_Oauth_provider_granite_profile_url);
    }
    if(m_Oauth_provider_granite_extended_details_urlsIsSet)
    {
        val[utility::conversions::to_string_t("oauth.provider.granite.extended.details.urls")] = ModelBase::toJson(m_Oauth_provider_granite_extended_details_urls);
    }

    return val;
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("oauth.provider.id")))
    {
        if(!val[utility::conversions::to_string_t("oauth.provider.id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.provider.id")]);
            setOauthProviderId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.provider.granite.authorization.url")))
    {
        if(!val[utility::conversions::to_string_t("oauth.provider.granite.authorization.url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.provider.granite.authorization.url")]);
            setOauthProviderGraniteAuthorizationUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.provider.granite.token.url")))
    {
        if(!val[utility::conversions::to_string_t("oauth.provider.granite.token.url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.provider.granite.token.url")]);
            setOauthProviderGraniteTokenUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.provider.granite.profile.url")))
    {
        if(!val[utility::conversions::to_string_t("oauth.provider.granite.profile.url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.provider.granite.profile.url")]);
            setOauthProviderGraniteProfileUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.provider.granite.extended.details.urls")))
    {
        if(!val[utility::conversions::to_string_t("oauth.provider.granite.extended.details.urls")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.provider.granite.extended.details.urls")]);
            setOauthProviderGraniteExtendedDetailsUrls( newItem );
        }
    }
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Oauth_provider_idIsSet)
    {
        if (m_Oauth_provider_id.get())
        {
            m_Oauth_provider_id->toMultipart(multipart, utility::conversions::to_string_t("oauth.provider.id."));
        }
    }
    if(m_Oauth_provider_granite_authorization_urlIsSet)
    {
        if (m_Oauth_provider_granite_authorization_url.get())
        {
            m_Oauth_provider_granite_authorization_url->toMultipart(multipart, utility::conversions::to_string_t("oauth.provider.granite.authorization.url."));
        }
    }
    if(m_Oauth_provider_granite_token_urlIsSet)
    {
        if (m_Oauth_provider_granite_token_url.get())
        {
            m_Oauth_provider_granite_token_url->toMultipart(multipart, utility::conversions::to_string_t("oauth.provider.granite.token.url."));
        }
    }
    if(m_Oauth_provider_granite_profile_urlIsSet)
    {
        if (m_Oauth_provider_granite_profile_url.get())
        {
            m_Oauth_provider_granite_profile_url->toMultipart(multipart, utility::conversions::to_string_t("oauth.provider.granite.profile.url."));
        }
    }
    if(m_Oauth_provider_granite_extended_details_urlsIsSet)
    {
        if (m_Oauth_provider_granite_extended_details_urls.get())
        {
            m_Oauth_provider_granite_extended_details_urls->toMultipart(multipart, utility::conversions::to_string_t("oauth.provider.granite.extended.details.urls."));
        }
    }
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.provider.id."));
            setOauthProviderId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.granite.authorization.url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.granite.authorization.url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.provider.granite.authorization.url."));
            setOauthProviderGraniteAuthorizationUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.granite.token.url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.granite.token.url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.provider.granite.token.url."));
            setOauthProviderGraniteTokenUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.granite.profile.url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.granite.profile.url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.provider.granite.profile.url."));
            setOauthProviderGraniteProfileUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.granite.extended.details.urls")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.granite.extended.details.urls")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.provider.granite.extended.details.urls."));
            setOauthProviderGraniteExtendedDetailsUrls( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderId() const
{
    return m_Oauth_provider_id;
}


void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_provider_id = value;
    m_Oauth_provider_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGraniteProviderProperties::oauthProviderIdIsSet() const
{
    return m_Oauth_provider_idIsSet;
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::unsetOauth_provider_id()
{
    m_Oauth_provider_idIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteAuthorizationUrl() const
{
    return m_Oauth_provider_granite_authorization_url;
}


void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteAuthorizationUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_provider_granite_authorization_url = value;
    m_Oauth_provider_granite_authorization_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGraniteProviderProperties::oauthProviderGraniteAuthorizationUrlIsSet() const
{
    return m_Oauth_provider_granite_authorization_urlIsSet;
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::unsetOauth_provider_granite_authorization_url()
{
    m_Oauth_provider_granite_authorization_urlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteTokenUrl() const
{
    return m_Oauth_provider_granite_token_url;
}


void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteTokenUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_provider_granite_token_url = value;
    m_Oauth_provider_granite_token_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGraniteProviderProperties::oauthProviderGraniteTokenUrlIsSet() const
{
    return m_Oauth_provider_granite_token_urlIsSet;
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::unsetOauth_provider_granite_token_url()
{
    m_Oauth_provider_granite_token_urlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteProfileUrl() const
{
    return m_Oauth_provider_granite_profile_url;
}


void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteProfileUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_provider_granite_profile_url = value;
    m_Oauth_provider_granite_profile_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGraniteProviderProperties::oauthProviderGraniteProfileUrlIsSet() const
{
    return m_Oauth_provider_granite_profile_urlIsSet;
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::unsetOauth_provider_granite_profile_url()
{
    m_Oauth_provider_granite_profile_urlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteExtendedDetailsUrls() const
{
    return m_Oauth_provider_granite_extended_details_urls;
}


void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteExtendedDetailsUrls(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_provider_granite_extended_details_urls = value;
    m_Oauth_provider_granite_extended_details_urlsIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGraniteProviderProperties::oauthProviderGraniteExtendedDetailsUrlsIsSet() const
{
    return m_Oauth_provider_granite_extended_details_urlsIsSet;
}

void ComAdobeGraniteAuthOauthImplGraniteProviderProperties::unsetOauth_provider_granite_extended_details_urls()
{
    m_Oauth_provider_granite_extended_details_urlsIsSet = false;
}

}
}
}
}

