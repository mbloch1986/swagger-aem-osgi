/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties : IEquatable<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties>
    { 
        /// <summary>
        /// Gets or Sets ComAdobeCqScreensAnalyticsImplUrl
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.analytics.impl.url")]
        public ConfigNodePropertyString ComAdobeCqScreensAnalyticsImplUrl { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensAnalyticsImplApikey
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.analytics.impl.apikey")]
        public ConfigNodePropertyString ComAdobeCqScreensAnalyticsImplApikey { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensAnalyticsImplProject
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.analytics.impl.project")]
        public ConfigNodePropertyString ComAdobeCqScreensAnalyticsImplProject { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensAnalyticsImplEnvironment
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.analytics.impl.environment")]
        public ConfigNodePropertyDropDown ComAdobeCqScreensAnalyticsImplEnvironment { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensAnalyticsImplSendFrequency
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.analytics.impl.sendFrequency")]
        public ConfigNodePropertyInteger ComAdobeCqScreensAnalyticsImplSendFrequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {\n");
            sb.Append("  ComAdobeCqScreensAnalyticsImplUrl: ").Append(ComAdobeCqScreensAnalyticsImplUrl).Append("\n");
            sb.Append("  ComAdobeCqScreensAnalyticsImplApikey: ").Append(ComAdobeCqScreensAnalyticsImplApikey).Append("\n");
            sb.Append("  ComAdobeCqScreensAnalyticsImplProject: ").Append(ComAdobeCqScreensAnalyticsImplProject).Append("\n");
            sb.Append("  ComAdobeCqScreensAnalyticsImplEnvironment: ").Append(ComAdobeCqScreensAnalyticsImplEnvironment).Append("\n");
            sb.Append("  ComAdobeCqScreensAnalyticsImplSendFrequency: ").Append(ComAdobeCqScreensAnalyticsImplSendFrequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ComAdobeCqScreensAnalyticsImplUrl == other.ComAdobeCqScreensAnalyticsImplUrl ||
                    ComAdobeCqScreensAnalyticsImplUrl != null &&
                    ComAdobeCqScreensAnalyticsImplUrl.Equals(other.ComAdobeCqScreensAnalyticsImplUrl)
                ) && 
                (
                    ComAdobeCqScreensAnalyticsImplApikey == other.ComAdobeCqScreensAnalyticsImplApikey ||
                    ComAdobeCqScreensAnalyticsImplApikey != null &&
                    ComAdobeCqScreensAnalyticsImplApikey.Equals(other.ComAdobeCqScreensAnalyticsImplApikey)
                ) && 
                (
                    ComAdobeCqScreensAnalyticsImplProject == other.ComAdobeCqScreensAnalyticsImplProject ||
                    ComAdobeCqScreensAnalyticsImplProject != null &&
                    ComAdobeCqScreensAnalyticsImplProject.Equals(other.ComAdobeCqScreensAnalyticsImplProject)
                ) && 
                (
                    ComAdobeCqScreensAnalyticsImplEnvironment == other.ComAdobeCqScreensAnalyticsImplEnvironment ||
                    ComAdobeCqScreensAnalyticsImplEnvironment != null &&
                    ComAdobeCqScreensAnalyticsImplEnvironment.Equals(other.ComAdobeCqScreensAnalyticsImplEnvironment)
                ) && 
                (
                    ComAdobeCqScreensAnalyticsImplSendFrequency == other.ComAdobeCqScreensAnalyticsImplSendFrequency ||
                    ComAdobeCqScreensAnalyticsImplSendFrequency != null &&
                    ComAdobeCqScreensAnalyticsImplSendFrequency.Equals(other.ComAdobeCqScreensAnalyticsImplSendFrequency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ComAdobeCqScreensAnalyticsImplUrl != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensAnalyticsImplUrl.GetHashCode();
                    if (ComAdobeCqScreensAnalyticsImplApikey != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensAnalyticsImplApikey.GetHashCode();
                    if (ComAdobeCqScreensAnalyticsImplProject != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensAnalyticsImplProject.GetHashCode();
                    if (ComAdobeCqScreensAnalyticsImplEnvironment != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensAnalyticsImplEnvironment.GetHashCode();
                    if (ComAdobeCqScreensAnalyticsImplSendFrequency != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensAnalyticsImplSendFrequency.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties left, ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties left, ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
