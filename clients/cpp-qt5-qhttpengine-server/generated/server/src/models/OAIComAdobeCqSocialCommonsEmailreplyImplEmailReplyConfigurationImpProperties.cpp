/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties() {
    this->init();
}

OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::~OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties() {
    
}

void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::init() {
    m_email_name_isSet = false;
    m_email_create_post_from_reply_isSet = false;
    m_email_add_comment_id_to_isSet = false;
    m_email_subject_maximum_length_isSet = false;
    m_email_reply_to_address_isSet = false;
    m_email_reply_to_delimiter_isSet = false;
    m_email_tracker_id_prefix_in_subject_isSet = false;
    m_email_tracker_id_prefix_in_body_isSet = false;
    m_email_as_html_isSet = false;
    m_email_default_user_name_isSet = false;
    m_email_templates_root_path_isSet = false;
}

void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(email_name, json[QString("email.name")]);
    
    ::OpenAPI::fromJsonValue(email_create_post_from_reply, json[QString("email.createPostFromReply")]);
    
    ::OpenAPI::fromJsonValue(email_add_comment_id_to, json[QString("email.addCommentIdTo")]);
    
    ::OpenAPI::fromJsonValue(email_subject_maximum_length, json[QString("email.subjectMaximumLength")]);
    
    ::OpenAPI::fromJsonValue(email_reply_to_address, json[QString("email.replyToAddress")]);
    
    ::OpenAPI::fromJsonValue(email_reply_to_delimiter, json[QString("email.replyToDelimiter")]);
    
    ::OpenAPI::fromJsonValue(email_tracker_id_prefix_in_subject, json[QString("email.trackerIdPrefixInSubject")]);
    
    ::OpenAPI::fromJsonValue(email_tracker_id_prefix_in_body, json[QString("email.trackerIdPrefixInBody")]);
    
    ::OpenAPI::fromJsonValue(email_as_html, json[QString("email.asHTML")]);
    
    ::OpenAPI::fromJsonValue(email_default_user_name, json[QString("email.defaultUserName")]);
    
    ::OpenAPI::fromJsonValue(email_templates_root_path, json[QString("email.templates.rootPath")]);
    
}

QString
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::asJsonObject() const {
    QJsonObject obj;
	if(email_name.isSet()){
        obj.insert(QString("email.name"), ::OpenAPI::toJsonValue(email_name));
    }
	if(email_create_post_from_reply.isSet()){
        obj.insert(QString("email.createPostFromReply"), ::OpenAPI::toJsonValue(email_create_post_from_reply));
    }
	if(email_add_comment_id_to.isSet()){
        obj.insert(QString("email.addCommentIdTo"), ::OpenAPI::toJsonValue(email_add_comment_id_to));
    }
	if(email_subject_maximum_length.isSet()){
        obj.insert(QString("email.subjectMaximumLength"), ::OpenAPI::toJsonValue(email_subject_maximum_length));
    }
	if(email_reply_to_address.isSet()){
        obj.insert(QString("email.replyToAddress"), ::OpenAPI::toJsonValue(email_reply_to_address));
    }
	if(email_reply_to_delimiter.isSet()){
        obj.insert(QString("email.replyToDelimiter"), ::OpenAPI::toJsonValue(email_reply_to_delimiter));
    }
	if(email_tracker_id_prefix_in_subject.isSet()){
        obj.insert(QString("email.trackerIdPrefixInSubject"), ::OpenAPI::toJsonValue(email_tracker_id_prefix_in_subject));
    }
	if(email_tracker_id_prefix_in_body.isSet()){
        obj.insert(QString("email.trackerIdPrefixInBody"), ::OpenAPI::toJsonValue(email_tracker_id_prefix_in_body));
    }
	if(email_as_html.isSet()){
        obj.insert(QString("email.asHTML"), ::OpenAPI::toJsonValue(email_as_html));
    }
	if(email_default_user_name.isSet()){
        obj.insert(QString("email.defaultUserName"), ::OpenAPI::toJsonValue(email_default_user_name));
    }
	if(email_templates_root_path.isSet()){
        obj.insert(QString("email.templates.rootPath"), ::OpenAPI::toJsonValue(email_templates_root_path));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailName() const {
    return email_name;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailName(const OAIConfigNodePropertyString &email_name) {
    this->email_name = email_name;
    this->m_email_name_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailCreatePostFromReply() const {
    return email_create_post_from_reply;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailCreatePostFromReply(const OAIConfigNodePropertyBoolean &email_create_post_from_reply) {
    this->email_create_post_from_reply = email_create_post_from_reply;
    this->m_email_create_post_from_reply_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailAddCommentIdTo() const {
    return email_add_comment_id_to;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailAddCommentIdTo(const OAIConfigNodePropertyDropDown &email_add_comment_id_to) {
    this->email_add_comment_id_to = email_add_comment_id_to;
    this->m_email_add_comment_id_to_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailSubjectMaximumLength() const {
    return email_subject_maximum_length;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailSubjectMaximumLength(const OAIConfigNodePropertyInteger &email_subject_maximum_length) {
    this->email_subject_maximum_length = email_subject_maximum_length;
    this->m_email_subject_maximum_length_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailReplyToAddress() const {
    return email_reply_to_address;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailReplyToAddress(const OAIConfigNodePropertyString &email_reply_to_address) {
    this->email_reply_to_address = email_reply_to_address;
    this->m_email_reply_to_address_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailReplyToDelimiter() const {
    return email_reply_to_delimiter;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailReplyToDelimiter(const OAIConfigNodePropertyString &email_reply_to_delimiter) {
    this->email_reply_to_delimiter = email_reply_to_delimiter;
    this->m_email_reply_to_delimiter_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailTrackerIdPrefixInSubject() const {
    return email_tracker_id_prefix_in_subject;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailTrackerIdPrefixInSubject(const OAIConfigNodePropertyString &email_tracker_id_prefix_in_subject) {
    this->email_tracker_id_prefix_in_subject = email_tracker_id_prefix_in_subject;
    this->m_email_tracker_id_prefix_in_subject_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailTrackerIdPrefixInBody() const {
    return email_tracker_id_prefix_in_body;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailTrackerIdPrefixInBody(const OAIConfigNodePropertyString &email_tracker_id_prefix_in_body) {
    this->email_tracker_id_prefix_in_body = email_tracker_id_prefix_in_body;
    this->m_email_tracker_id_prefix_in_body_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailAsHtml() const {
    return email_as_html;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailAsHtml(const OAIConfigNodePropertyBoolean &email_as_html) {
    this->email_as_html = email_as_html;
    this->m_email_as_html_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailDefaultUserName() const {
    return email_default_user_name;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailDefaultUserName(const OAIConfigNodePropertyString &email_default_user_name) {
    this->email_default_user_name = email_default_user_name;
    this->m_email_default_user_name_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailTemplatesRootPath() const {
    return email_templates_root_path;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailTemplatesRootPath(const OAIConfigNodePropertyString &email_templates_root_path) {
    this->email_templates_root_path = email_templates_root_path;
    this->m_email_templates_root_path_isSet = true;
}


bool
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(email_name.isSet()){ isObjectUpdated = true; break;}
    
        if(email_create_post_from_reply.isSet()){ isObjectUpdated = true; break;}
    
        if(email_add_comment_id_to.isSet()){ isObjectUpdated = true; break;}
    
        if(email_subject_maximum_length.isSet()){ isObjectUpdated = true; break;}
    
        if(email_reply_to_address.isSet()){ isObjectUpdated = true; break;}
    
        if(email_reply_to_delimiter.isSet()){ isObjectUpdated = true; break;}
    
        if(email_tracker_id_prefix_in_subject.isSet()){ isObjectUpdated = true; break;}
    
        if(email_tracker_id_prefix_in_body.isSet()){ isObjectUpdated = true; break;}
    
        if(email_as_html.isSet()){ isObjectUpdated = true; break;}
    
        if(email_default_user_name.isSet()){ isObjectUpdated = true; break;}
    
        if(email_templates_root_path.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

