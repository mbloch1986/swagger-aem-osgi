/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.h
 *
 * 
 */

#ifndef ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties_H_
#define ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties
    : public ModelBase
{
public:
    ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties();
    virtual ~ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getCdnConfigDistributionDomain() const;
    void setCdnConfigDistributionDomain(ConfigNodePropertyString const& value);
    bool cdnConfigDistributionDomainIsSet() const;
    void unsetCdn_config_distribution_domain();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getCdnConfigEnableRewriting() const;
    void setCdnConfigEnableRewriting(ConfigNodePropertyBoolean const& value);
    bool cdnConfigEnableRewritingIsSet() const;
    void unsetCdn_config_enable_rewriting();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getCdnConfigPathPrefixes() const;
    void setCdnConfigPathPrefixes(ConfigNodePropertyArray const& value);
    bool cdnConfigPathPrefixesIsSet() const;
    void unsetCdn_config_path_prefixes();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCdnConfigCdnttl() const;
    void setCdnConfigCdnttl(ConfigNodePropertyInteger const& value);
    bool cdnConfigCdnttlIsSet() const;
    void unsetCdn_config_cdnttl();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getCdnConfigApplicationProtocol() const;
    void setCdnConfigApplicationProtocol(ConfigNodePropertyString const& value);
    bool cdnConfigApplicationProtocolIsSet() const;
    void unsetCdn_config_application_protocol();

protected:
    ConfigNodePropertyString m_Cdn_config_distribution_domain;
    bool m_Cdn_config_distribution_domainIsSet;
    ConfigNodePropertyBoolean m_Cdn_config_enable_rewriting;
    bool m_Cdn_config_enable_rewritingIsSet;
    ConfigNodePropertyArray m_Cdn_config_path_prefixes;
    bool m_Cdn_config_path_prefixesIsSet;
    ConfigNodePropertyInteger m_Cdn_config_cdnttl;
    bool m_Cdn_config_cdnttlIsSet;
    ConfigNodePropertyString m_Cdn_config_application_protocol;
    bool m_Cdn_config_application_protocolIsSet;
};

}
}
}
}

#endif /* ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties_H_ */
