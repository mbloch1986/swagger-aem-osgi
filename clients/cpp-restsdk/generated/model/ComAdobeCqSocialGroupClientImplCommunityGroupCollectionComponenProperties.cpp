/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties()
{
    m_Group_listing_pagination_enableIsSet = false;
    m_Group_listing_lazyloading_enableIsSet = false;
    m_Page_sizeIsSet = false;
    m_PriorityIsSet = false;
}

ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::~ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties()
{
}

void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Group_listing_pagination_enableIsSet)
    {
        val[utility::conversions::to_string_t("group.listing.pagination.enable")] = ModelBase::toJson(m_Group_listing_pagination_enable);
    }
    if(m_Group_listing_lazyloading_enableIsSet)
    {
        val[utility::conversions::to_string_t("group.listing.lazyloading.enable")] = ModelBase::toJson(m_Group_listing_lazyloading_enable);
    }
    if(m_Page_sizeIsSet)
    {
        val[utility::conversions::to_string_t("page.size")] = ModelBase::toJson(m_Page_size);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t("priority")] = ModelBase::toJson(m_Priority);
    }

    return val;
}

void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("group.listing.pagination.enable")))
    {
        if(!val[utility::conversions::to_string_t("group.listing.pagination.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("group.listing.pagination.enable")]);
            setGroupListingPaginationEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.listing.lazyloading.enable")))
    {
        if(!val[utility::conversions::to_string_t("group.listing.lazyloading.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("group.listing.lazyloading.enable")]);
            setGroupListingLazyloadingEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("page.size")))
    {
        if(!val[utility::conversions::to_string_t("page.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("page.size")]);
            setPageSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("priority")))
    {
        if(!val[utility::conversions::to_string_t("priority")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("priority")]);
            setPriority( newItem );
        }
    }
}

void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Group_listing_pagination_enableIsSet)
    {
        if (m_Group_listing_pagination_enable.get())
        {
            m_Group_listing_pagination_enable->toMultipart(multipart, utility::conversions::to_string_t("group.listing.pagination.enable."));
        }
    }
    if(m_Group_listing_lazyloading_enableIsSet)
    {
        if (m_Group_listing_lazyloading_enable.get())
        {
            m_Group_listing_lazyloading_enable->toMultipart(multipart, utility::conversions::to_string_t("group.listing.lazyloading.enable."));
        }
    }
    if(m_Page_sizeIsSet)
    {
        if (m_Page_size.get())
        {
            m_Page_size->toMultipart(multipart, utility::conversions::to_string_t("page.size."));
        }
    }
    if(m_PriorityIsSet)
    {
        if (m_Priority.get())
        {
            m_Priority->toMultipart(multipart, utility::conversions::to_string_t("priority."));
        }
    }
}

void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("group.listing.pagination.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.listing.pagination.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.listing.pagination.enable."));
            setGroupListingPaginationEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.listing.lazyloading.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.listing.lazyloading.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.listing.lazyloading.enable."));
            setGroupListingLazyloadingEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("page.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("page.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("page.size."));
            setPageSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("priority")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("priority")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("priority."));
            setPriority( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getGroupListingPaginationEnable() const
{
    return m_Group_listing_pagination_enable;
}


void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setGroupListingPaginationEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Group_listing_pagination_enable = value;
    m_Group_listing_pagination_enableIsSet = true;
}
bool ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::groupListingPaginationEnableIsSet() const
{
    return m_Group_listing_pagination_enableIsSet;
}

void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::unsetGroup_listing_pagination_enable()
{
    m_Group_listing_pagination_enableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getGroupListingLazyloadingEnable() const
{
    return m_Group_listing_lazyloading_enable;
}


void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setGroupListingLazyloadingEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Group_listing_lazyloading_enable = value;
    m_Group_listing_lazyloading_enableIsSet = true;
}
bool ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::groupListingLazyloadingEnableIsSet() const
{
    return m_Group_listing_lazyloading_enableIsSet;
}

void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::unsetGroup_listing_lazyloading_enable()
{
    m_Group_listing_lazyloading_enableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getPageSize() const
{
    return m_Page_size;
}


void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setPageSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Page_size = value;
    m_Page_sizeIsSet = true;
}
bool ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::pageSizeIsSet() const
{
    return m_Page_sizeIsSet;
}

void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::unsetPage_size()
{
    m_Page_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getPriority() const
{
    return m_Priority;
}


void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setPriority(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}
bool ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::unsetPriority()
{
    m_PriorityIsSet = false;
}

}
}
}
}

