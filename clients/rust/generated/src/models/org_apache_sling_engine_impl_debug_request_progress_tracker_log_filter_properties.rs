/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
  #[serde(rename = "extensions")]
  extensions: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "minDurationMs")]
  min_duration_ms: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "maxDurationMs")]
  max_duration_ms: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "compactLogFormat")]
  compact_log_format: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
  pub fn new() -> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
    OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
      extensions: None,
      min_duration_ms: None,
      max_duration_ms: None,
      compact_log_format: None
    }
  }

  pub fn set_extensions(&mut self, extensions: ::models::ConfigNodePropertyArray) {
    self.extensions = Some(extensions);
  }

  pub fn with_extensions(mut self, extensions: ::models::ConfigNodePropertyArray) -> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
    self.extensions = Some(extensions);
    self
  }

  pub fn extensions(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.extensions.as_ref()
  }

  pub fn reset_extensions(&mut self) {
    self.extensions = None;
  }

  pub fn set_min_duration_ms(&mut self, min_duration_ms: ::models::ConfigNodePropertyInteger) {
    self.min_duration_ms = Some(min_duration_ms);
  }

  pub fn with_min_duration_ms(mut self, min_duration_ms: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
    self.min_duration_ms = Some(min_duration_ms);
    self
  }

  pub fn min_duration_ms(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.min_duration_ms.as_ref()
  }

  pub fn reset_min_duration_ms(&mut self) {
    self.min_duration_ms = None;
  }

  pub fn set_max_duration_ms(&mut self, max_duration_ms: ::models::ConfigNodePropertyInteger) {
    self.max_duration_ms = Some(max_duration_ms);
  }

  pub fn with_max_duration_ms(mut self, max_duration_ms: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
    self.max_duration_ms = Some(max_duration_ms);
    self
  }

  pub fn max_duration_ms(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_duration_ms.as_ref()
  }

  pub fn reset_max_duration_ms(&mut self) {
    self.max_duration_ms = None;
  }

  pub fn set_compact_log_format(&mut self, compact_log_format: ::models::ConfigNodePropertyBoolean) {
    self.compact_log_format = Some(compact_log_format);
  }

  pub fn with_compact_log_format(mut self, compact_log_format: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
    self.compact_log_format = Some(compact_log_format);
    self
  }

  pub fn compact_log_format(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.compact_log_format.as_ref()
  }

  pub fn reset_compact_log_format(&mut self) {
    self.compact_log_format = None;
  }

}



