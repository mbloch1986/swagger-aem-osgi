/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqAuthImplLoginSelectorHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqAuthImplLoginSelectorHandlerProperties::OAIComDayCqAuthImplLoginSelectorHandlerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqAuthImplLoginSelectorHandlerProperties::OAIComDayCqAuthImplLoginSelectorHandlerProperties() {
    init();
}

OAIComDayCqAuthImplLoginSelectorHandlerProperties::~OAIComDayCqAuthImplLoginSelectorHandlerProperties() {
    this->cleanup();
}

void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::init() {
    path = new OAIConfigNodePropertyString();
    m_path_isSet = false;
    service_ranking = new OAIConfigNodePropertyInteger();
    m_service_ranking_isSet = false;
    auth_loginselector_mappings = new OAIConfigNodePropertyArray();
    m_auth_loginselector_mappings_isSet = false;
    auth_loginselector_changepw_mappings = new OAIConfigNodePropertyArray();
    m_auth_loginselector_changepw_mappings_isSet = false;
    auth_loginselector_defaultloginpage = new OAIConfigNodePropertyString();
    m_auth_loginselector_defaultloginpage_isSet = false;
    auth_loginselector_defaultchangepwpage = new OAIConfigNodePropertyString();
    m_auth_loginselector_defaultchangepwpage_isSet = false;
    auth_loginselector_handle = new OAIConfigNodePropertyArray();
    m_auth_loginselector_handle_isSet = false;
    auth_loginselector_handle_all_extensions = new OAIConfigNodePropertyBoolean();
    m_auth_loginselector_handle_all_extensions_isSet = false;
}

void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::cleanup() {
    if(path != nullptr) { 
        delete path;
    }
    if(service_ranking != nullptr) { 
        delete service_ranking;
    }
    if(auth_loginselector_mappings != nullptr) { 
        delete auth_loginselector_mappings;
    }
    if(auth_loginselector_changepw_mappings != nullptr) { 
        delete auth_loginselector_changepw_mappings;
    }
    if(auth_loginselector_defaultloginpage != nullptr) { 
        delete auth_loginselector_defaultloginpage;
    }
    if(auth_loginselector_defaultchangepwpage != nullptr) { 
        delete auth_loginselector_defaultchangepwpage;
    }
    if(auth_loginselector_handle != nullptr) { 
        delete auth_loginselector_handle;
    }
    if(auth_loginselector_handle_all_extensions != nullptr) { 
        delete auth_loginselector_handle_all_extensions;
    }
}

OAIComDayCqAuthImplLoginSelectorHandlerProperties*
OAIComDayCqAuthImplLoginSelectorHandlerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&path, pJson["path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&service_ranking, pJson["service.ranking"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&auth_loginselector_mappings, pJson["auth.loginselector.mappings"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&auth_loginselector_changepw_mappings, pJson["auth.loginselector.changepw.mappings"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&auth_loginselector_defaultloginpage, pJson["auth.loginselector.defaultloginpage"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_loginselector_defaultchangepwpage, pJson["auth.loginselector.defaultchangepwpage"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_loginselector_handle, pJson["auth.loginselector.handle"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&auth_loginselector_handle_all_extensions, pJson["auth.loginselector.handle.all.extensions"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqAuthImplLoginSelectorHandlerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqAuthImplLoginSelectorHandlerProperties::asJsonObject() {
    QJsonObject obj;
    if((path != nullptr) && (path->isSet())){
        toJsonValue(QString("path"), path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((service_ranking != nullptr) && (service_ranking->isSet())){
        toJsonValue(QString("service.ranking"), service_ranking, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((auth_loginselector_mappings != nullptr) && (auth_loginselector_mappings->isSet())){
        toJsonValue(QString("auth.loginselector.mappings"), auth_loginselector_mappings, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((auth_loginselector_changepw_mappings != nullptr) && (auth_loginselector_changepw_mappings->isSet())){
        toJsonValue(QString("auth.loginselector.changepw.mappings"), auth_loginselector_changepw_mappings, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((auth_loginselector_defaultloginpage != nullptr) && (auth_loginselector_defaultloginpage->isSet())){
        toJsonValue(QString("auth.loginselector.defaultloginpage"), auth_loginselector_defaultloginpage, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_loginselector_defaultchangepwpage != nullptr) && (auth_loginselector_defaultchangepwpage->isSet())){
        toJsonValue(QString("auth.loginselector.defaultchangepwpage"), auth_loginselector_defaultchangepwpage, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_loginselector_handle != nullptr) && (auth_loginselector_handle->isSet())){
        toJsonValue(QString("auth.loginselector.handle"), auth_loginselector_handle, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((auth_loginselector_handle_all_extensions != nullptr) && (auth_loginselector_handle_all_extensions->isSet())){
        toJsonValue(QString("auth.loginselector.handle.all.extensions"), auth_loginselector_handle_all_extensions, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getPath() {
    return path;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setPath(OAIConfigNodePropertyString* path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getServiceRanking() {
    return service_ranking;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setServiceRanking(OAIConfigNodePropertyInteger* service_ranking) {
    this->service_ranking = service_ranking;
    this->m_service_ranking_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorMappings() {
    return auth_loginselector_mappings;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorMappings(OAIConfigNodePropertyArray* auth_loginselector_mappings) {
    this->auth_loginselector_mappings = auth_loginselector_mappings;
    this->m_auth_loginselector_mappings_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorChangepwMappings() {
    return auth_loginselector_changepw_mappings;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorChangepwMappings(OAIConfigNodePropertyArray* auth_loginselector_changepw_mappings) {
    this->auth_loginselector_changepw_mappings = auth_loginselector_changepw_mappings;
    this->m_auth_loginselector_changepw_mappings_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorDefaultloginpage() {
    return auth_loginselector_defaultloginpage;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorDefaultloginpage(OAIConfigNodePropertyString* auth_loginselector_defaultloginpage) {
    this->auth_loginselector_defaultloginpage = auth_loginselector_defaultloginpage;
    this->m_auth_loginselector_defaultloginpage_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorDefaultchangepwpage() {
    return auth_loginselector_defaultchangepwpage;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorDefaultchangepwpage(OAIConfigNodePropertyString* auth_loginselector_defaultchangepwpage) {
    this->auth_loginselector_defaultchangepwpage = auth_loginselector_defaultchangepwpage;
    this->m_auth_loginselector_defaultchangepwpage_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorHandle() {
    return auth_loginselector_handle;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorHandle(OAIConfigNodePropertyArray* auth_loginselector_handle) {
    this->auth_loginselector_handle = auth_loginselector_handle;
    this->m_auth_loginselector_handle_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorHandleAllExtensions() {
    return auth_loginselector_handle_all_extensions;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorHandleAllExtensions(OAIConfigNodePropertyBoolean* auth_loginselector_handle_all_extensions) {
    this->auth_loginselector_handle_all_extensions = auth_loginselector_handle_all_extensions;
    this->m_auth_loginselector_handle_all_extensions_isSet = true;
}


bool
OAIComDayCqAuthImplLoginSelectorHandlerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(path != nullptr && path->isSet()){ isObjectUpdated = true; break;}
        if(service_ranking != nullptr && service_ranking->isSet()){ isObjectUpdated = true; break;}
        if(auth_loginselector_mappings != nullptr && auth_loginselector_mappings->isSet()){ isObjectUpdated = true; break;}
        if(auth_loginselector_changepw_mappings != nullptr && auth_loginselector_changepw_mappings->isSet()){ isObjectUpdated = true; break;}
        if(auth_loginselector_defaultloginpage != nullptr && auth_loginselector_defaultloginpage->isSet()){ isObjectUpdated = true; break;}
        if(auth_loginselector_defaultchangepwpage != nullptr && auth_loginselector_defaultchangepwpage->isSet()){ isObjectUpdated = true; break;}
        if(auth_loginselector_handle != nullptr && auth_loginselector_handle->isSet()){ isObjectUpdated = true; break;}
        if(auth_loginselector_handle_all_extensions != nullptr && auth_loginselector_handle_all_extensions->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

