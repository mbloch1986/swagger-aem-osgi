/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties()
{
    m_UsersPathIsSet = false;
    m_GroupsPathIsSet = false;
    m_SystemRelativePathIsSet = false;
    m_DefaultDepthIsSet = false;
    m_ImportBehaviorIsSet = false;
    m_PasswordHashAlgorithmIsSet = false;
    m_PasswordHashIterationsIsSet = false;
    m_PasswordSaltSizeIsSet = false;
    m_OmitAdminPwIsSet = false;
    m_SupportAutoSaveIsSet = false;
    m_PasswordMaxAgeIsSet = false;
    m_InitialPasswordChangeIsSet = false;
    m_PasswordHistorySizeIsSet = false;
    m_PasswordExpiryForAdminIsSet = false;
    m_CacheExpirationIsSet = false;
    m_EnableRFC7613UsercaseMappedProfileIsSet = false;
    
}

OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::~OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties()
{
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_UsersPathIsSet)
    {
        val["usersPath"] = ModelBase::toJson(m_UsersPath);
    }
    if(m_GroupsPathIsSet)
    {
        val["groupsPath"] = ModelBase::toJson(m_GroupsPath);
    }
    if(m_SystemRelativePathIsSet)
    {
        val["systemRelativePath"] = ModelBase::toJson(m_SystemRelativePath);
    }
    if(m_DefaultDepthIsSet)
    {
        val["defaultDepth"] = ModelBase::toJson(m_DefaultDepth);
    }
    if(m_ImportBehaviorIsSet)
    {
        val["importBehavior"] = ModelBase::toJson(m_ImportBehavior);
    }
    if(m_PasswordHashAlgorithmIsSet)
    {
        val["passwordHashAlgorithm"] = ModelBase::toJson(m_PasswordHashAlgorithm);
    }
    if(m_PasswordHashIterationsIsSet)
    {
        val["passwordHashIterations"] = ModelBase::toJson(m_PasswordHashIterations);
    }
    if(m_PasswordSaltSizeIsSet)
    {
        val["passwordSaltSize"] = ModelBase::toJson(m_PasswordSaltSize);
    }
    if(m_OmitAdminPwIsSet)
    {
        val["omitAdminPw"] = ModelBase::toJson(m_OmitAdminPw);
    }
    if(m_SupportAutoSaveIsSet)
    {
        val["supportAutoSave"] = ModelBase::toJson(m_SupportAutoSave);
    }
    if(m_PasswordMaxAgeIsSet)
    {
        val["passwordMaxAge"] = ModelBase::toJson(m_PasswordMaxAge);
    }
    if(m_InitialPasswordChangeIsSet)
    {
        val["initialPasswordChange"] = ModelBase::toJson(m_InitialPasswordChange);
    }
    if(m_PasswordHistorySizeIsSet)
    {
        val["passwordHistorySize"] = ModelBase::toJson(m_PasswordHistorySize);
    }
    if(m_PasswordExpiryForAdminIsSet)
    {
        val["passwordExpiryForAdmin"] = ModelBase::toJson(m_PasswordExpiryForAdmin);
    }
    if(m_CacheExpirationIsSet)
    {
        val["cacheExpiration"] = ModelBase::toJson(m_CacheExpiration);
    }
    if(m_EnableRFC7613UsercaseMappedProfileIsSet)
    {
        val["enableRFC7613UsercaseMappedProfile"] = ModelBase::toJson(m_EnableRFC7613UsercaseMappedProfile);
    }
    

    return val;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("usersPath") != val.end())
    {
        if(!val["usersPath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["usersPath"]);
            setUsersPath( newItem );
        }
        
    }
    if(val.find("groupsPath") != val.end())
    {
        if(!val["groupsPath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["groupsPath"]);
            setGroupsPath( newItem );
        }
        
    }
    if(val.find("systemRelativePath") != val.end())
    {
        if(!val["systemRelativePath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["systemRelativePath"]);
            setSystemRelativePath( newItem );
        }
        
    }
    if(val.find("defaultDepth") != val.end())
    {
        if(!val["defaultDepth"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["defaultDepth"]);
            setDefaultDepth( newItem );
        }
        
    }
    if(val.find("importBehavior") != val.end())
    {
        if(!val["importBehavior"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["importBehavior"]);
            setImportBehavior( newItem );
        }
        
    }
    if(val.find("passwordHashAlgorithm") != val.end())
    {
        if(!val["passwordHashAlgorithm"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["passwordHashAlgorithm"]);
            setPasswordHashAlgorithm( newItem );
        }
        
    }
    if(val.find("passwordHashIterations") != val.end())
    {
        if(!val["passwordHashIterations"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["passwordHashIterations"]);
            setPasswordHashIterations( newItem );
        }
        
    }
    if(val.find("passwordSaltSize") != val.end())
    {
        if(!val["passwordSaltSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["passwordSaltSize"]);
            setPasswordSaltSize( newItem );
        }
        
    }
    if(val.find("omitAdminPw") != val.end())
    {
        if(!val["omitAdminPw"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["omitAdminPw"]);
            setOmitAdminPw( newItem );
        }
        
    }
    if(val.find("supportAutoSave") != val.end())
    {
        if(!val["supportAutoSave"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["supportAutoSave"]);
            setSupportAutoSave( newItem );
        }
        
    }
    if(val.find("passwordMaxAge") != val.end())
    {
        if(!val["passwordMaxAge"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["passwordMaxAge"]);
            setPasswordMaxAge( newItem );
        }
        
    }
    if(val.find("initialPasswordChange") != val.end())
    {
        if(!val["initialPasswordChange"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["initialPasswordChange"]);
            setInitialPasswordChange( newItem );
        }
        
    }
    if(val.find("passwordHistorySize") != val.end())
    {
        if(!val["passwordHistorySize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["passwordHistorySize"]);
            setPasswordHistorySize( newItem );
        }
        
    }
    if(val.find("passwordExpiryForAdmin") != val.end())
    {
        if(!val["passwordExpiryForAdmin"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["passwordExpiryForAdmin"]);
            setPasswordExpiryForAdmin( newItem );
        }
        
    }
    if(val.find("cacheExpiration") != val.end())
    {
        if(!val["cacheExpiration"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cacheExpiration"]);
            setCacheExpiration( newItem );
        }
        
    }
    if(val.find("enableRFC7613UsercaseMappedProfile") != val.end())
    {
        if(!val["enableRFC7613UsercaseMappedProfile"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enableRFC7613UsercaseMappedProfile"]);
            setEnableRFC7613UsercaseMappedProfile( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getUsersPath() const
{
    return m_UsersPath;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setUsersPath(ConfigNodePropertyString const& value)
{
    m_UsersPath = value;
    m_UsersPathIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::usersPathIsSet() const
{
    return m_UsersPathIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetUsersPath()
{
    m_UsersPathIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getGroupsPath() const
{
    return m_GroupsPath;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setGroupsPath(ConfigNodePropertyString const& value)
{
    m_GroupsPath = value;
    m_GroupsPathIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::groupsPathIsSet() const
{
    return m_GroupsPathIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetGroupsPath()
{
    m_GroupsPathIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getSystemRelativePath() const
{
    return m_SystemRelativePath;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setSystemRelativePath(ConfigNodePropertyString const& value)
{
    m_SystemRelativePath = value;
    m_SystemRelativePathIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::systemRelativePathIsSet() const
{
    return m_SystemRelativePathIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetSystemRelativePath()
{
    m_SystemRelativePathIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getDefaultDepth() const
{
    return m_DefaultDepth;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setDefaultDepth(ConfigNodePropertyInteger const& value)
{
    m_DefaultDepth = value;
    m_DefaultDepthIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::defaultDepthIsSet() const
{
    return m_DefaultDepthIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetDefaultDepth()
{
    m_DefaultDepthIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getImportBehavior() const
{
    return m_ImportBehavior;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setImportBehavior(ConfigNodePropertyDropDown const& value)
{
    m_ImportBehavior = value;
    m_ImportBehaviorIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::importBehaviorIsSet() const
{
    return m_ImportBehaviorIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetImportBehavior()
{
    m_ImportBehaviorIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHashAlgorithm() const
{
    return m_PasswordHashAlgorithm;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHashAlgorithm(ConfigNodePropertyString const& value)
{
    m_PasswordHashAlgorithm = value;
    m_PasswordHashAlgorithmIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordHashAlgorithmIsSet() const
{
    return m_PasswordHashAlgorithmIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordHashAlgorithm()
{
    m_PasswordHashAlgorithmIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHashIterations() const
{
    return m_PasswordHashIterations;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHashIterations(ConfigNodePropertyInteger const& value)
{
    m_PasswordHashIterations = value;
    m_PasswordHashIterationsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordHashIterationsIsSet() const
{
    return m_PasswordHashIterationsIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordHashIterations()
{
    m_PasswordHashIterationsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordSaltSize() const
{
    return m_PasswordSaltSize;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordSaltSize(ConfigNodePropertyInteger const& value)
{
    m_PasswordSaltSize = value;
    m_PasswordSaltSizeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordSaltSizeIsSet() const
{
    return m_PasswordSaltSizeIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordSaltSize()
{
    m_PasswordSaltSizeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getOmitAdminPw() const
{
    return m_OmitAdminPw;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setOmitAdminPw(ConfigNodePropertyBoolean const& value)
{
    m_OmitAdminPw = value;
    m_OmitAdminPwIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::omitAdminPwIsSet() const
{
    return m_OmitAdminPwIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetOmitAdminPw()
{
    m_OmitAdminPwIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getSupportAutoSave() const
{
    return m_SupportAutoSave;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setSupportAutoSave(ConfigNodePropertyBoolean const& value)
{
    m_SupportAutoSave = value;
    m_SupportAutoSaveIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::supportAutoSaveIsSet() const
{
    return m_SupportAutoSaveIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetSupportAutoSave()
{
    m_SupportAutoSaveIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordMaxAge() const
{
    return m_PasswordMaxAge;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordMaxAge(ConfigNodePropertyInteger const& value)
{
    m_PasswordMaxAge = value;
    m_PasswordMaxAgeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordMaxAgeIsSet() const
{
    return m_PasswordMaxAgeIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordMaxAge()
{
    m_PasswordMaxAgeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getInitialPasswordChange() const
{
    return m_InitialPasswordChange;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setInitialPasswordChange(ConfigNodePropertyBoolean const& value)
{
    m_InitialPasswordChange = value;
    m_InitialPasswordChangeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::initialPasswordChangeIsSet() const
{
    return m_InitialPasswordChangeIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetInitialPasswordChange()
{
    m_InitialPasswordChangeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHistorySize() const
{
    return m_PasswordHistorySize;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHistorySize(ConfigNodePropertyInteger const& value)
{
    m_PasswordHistorySize = value;
    m_PasswordHistorySizeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordHistorySizeIsSet() const
{
    return m_PasswordHistorySizeIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordHistorySize()
{
    m_PasswordHistorySizeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordExpiryForAdmin() const
{
    return m_PasswordExpiryForAdmin;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordExpiryForAdmin(ConfigNodePropertyBoolean const& value)
{
    m_PasswordExpiryForAdmin = value;
    m_PasswordExpiryForAdminIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordExpiryForAdminIsSet() const
{
    return m_PasswordExpiryForAdminIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordExpiryForAdmin()
{
    m_PasswordExpiryForAdminIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getCacheExpiration() const
{
    return m_CacheExpiration;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setCacheExpiration(ConfigNodePropertyInteger const& value)
{
    m_CacheExpiration = value;
    m_CacheExpirationIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::cacheExpirationIsSet() const
{
    return m_CacheExpirationIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetCacheExpiration()
{
    m_CacheExpirationIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getEnableRFC7613UsercaseMappedProfile() const
{
    return m_EnableRFC7613UsercaseMappedProfile;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setEnableRFC7613UsercaseMappedProfile(ConfigNodePropertyBoolean const& value)
{
    m_EnableRFC7613UsercaseMappedProfile = value;
    m_EnableRFC7613UsercaseMappedProfileIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::enableRFC7613UsercaseMappedProfileIsSet() const
{
    return m_EnableRFC7613UsercaseMappedProfileIsSet;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetEnableRFC7613UsercaseMappedProfile()
{
    m_EnableRFC7613UsercaseMappedProfileIsSet = false;
}

}
}
}
}

