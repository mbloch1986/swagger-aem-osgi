/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingEngineImplLogRequestLoggerProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingEngineImplLogRequestLoggerProperties :  IEquatable<OrgApacheSlingEngineImplLogRequestLoggerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingEngineImplLogRequestLoggerProperties" /> class.
        /// </summary>
        /// <param name="requestLogOutput">requestLogOutput.</param>
        /// <param name="requestLogOutputtype">requestLogOutputtype.</param>
        /// <param name="requestLogEnabled">requestLogEnabled.</param>
        /// <param name="accessLogOutput">accessLogOutput.</param>
        /// <param name="accessLogOutputtype">accessLogOutputtype.</param>
        /// <param name="accessLogEnabled">accessLogEnabled.</param>
        public OrgApacheSlingEngineImplLogRequestLoggerProperties(ConfigNodePropertyString requestLogOutput = default(ConfigNodePropertyString), ConfigNodePropertyDropDown requestLogOutputtype = default(ConfigNodePropertyDropDown), ConfigNodePropertyBoolean requestLogEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyString accessLogOutput = default(ConfigNodePropertyString), ConfigNodePropertyDropDown accessLogOutputtype = default(ConfigNodePropertyDropDown), ConfigNodePropertyBoolean accessLogEnabled = default(ConfigNodePropertyBoolean))
        {
            this.RequestLogOutput = requestLogOutput;
            this.RequestLogOutputtype = requestLogOutputtype;
            this.RequestLogEnabled = requestLogEnabled;
            this.AccessLogOutput = accessLogOutput;
            this.AccessLogOutputtype = accessLogOutputtype;
            this.AccessLogEnabled = accessLogEnabled;
        }
        
        /// <summary>
        /// Gets or Sets RequestLogOutput
        /// </summary>
        [DataMember(Name="request.log.output", EmitDefaultValue=false)]
        public ConfigNodePropertyString RequestLogOutput { get; set; }

        /// <summary>
        /// Gets or Sets RequestLogOutputtype
        /// </summary>
        [DataMember(Name="request.log.outputtype", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown RequestLogOutputtype { get; set; }

        /// <summary>
        /// Gets or Sets RequestLogEnabled
        /// </summary>
        [DataMember(Name="request.log.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean RequestLogEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AccessLogOutput
        /// </summary>
        [DataMember(Name="access.log.output", EmitDefaultValue=false)]
        public ConfigNodePropertyString AccessLogOutput { get; set; }

        /// <summary>
        /// Gets or Sets AccessLogOutputtype
        /// </summary>
        [DataMember(Name="access.log.outputtype", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown AccessLogOutputtype { get; set; }

        /// <summary>
        /// Gets or Sets AccessLogEnabled
        /// </summary>
        [DataMember(Name="access.log.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean AccessLogEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingEngineImplLogRequestLoggerProperties {\n");
            sb.Append("  RequestLogOutput: ").Append(RequestLogOutput).Append("\n");
            sb.Append("  RequestLogOutputtype: ").Append(RequestLogOutputtype).Append("\n");
            sb.Append("  RequestLogEnabled: ").Append(RequestLogEnabled).Append("\n");
            sb.Append("  AccessLogOutput: ").Append(AccessLogOutput).Append("\n");
            sb.Append("  AccessLogOutputtype: ").Append(AccessLogOutputtype).Append("\n");
            sb.Append("  AccessLogEnabled: ").Append(AccessLogEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingEngineImplLogRequestLoggerProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingEngineImplLogRequestLoggerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingEngineImplLogRequestLoggerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingEngineImplLogRequestLoggerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestLogOutput == input.RequestLogOutput ||
                    (this.RequestLogOutput != null &&
                    this.RequestLogOutput.Equals(input.RequestLogOutput))
                ) && 
                (
                    this.RequestLogOutputtype == input.RequestLogOutputtype ||
                    (this.RequestLogOutputtype != null &&
                    this.RequestLogOutputtype.Equals(input.RequestLogOutputtype))
                ) && 
                (
                    this.RequestLogEnabled == input.RequestLogEnabled ||
                    (this.RequestLogEnabled != null &&
                    this.RequestLogEnabled.Equals(input.RequestLogEnabled))
                ) && 
                (
                    this.AccessLogOutput == input.AccessLogOutput ||
                    (this.AccessLogOutput != null &&
                    this.AccessLogOutput.Equals(input.AccessLogOutput))
                ) && 
                (
                    this.AccessLogOutputtype == input.AccessLogOutputtype ||
                    (this.AccessLogOutputtype != null &&
                    this.AccessLogOutputtype.Equals(input.AccessLogOutputtype))
                ) && 
                (
                    this.AccessLogEnabled == input.AccessLogEnabled ||
                    (this.AccessLogEnabled != null &&
                    this.AccessLogEnabled.Equals(input.AccessLogEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestLogOutput != null)
                    hashCode = hashCode * 59 + this.RequestLogOutput.GetHashCode();
                if (this.RequestLogOutputtype != null)
                    hashCode = hashCode * 59 + this.RequestLogOutputtype.GetHashCode();
                if (this.RequestLogEnabled != null)
                    hashCode = hashCode * 59 + this.RequestLogEnabled.GetHashCode();
                if (this.AccessLogOutput != null)
                    hashCode = hashCode * 59 + this.AccessLogOutput.GetHashCode();
                if (this.AccessLogOutputtype != null)
                    hashCode = hashCode * 59 + this.AccessLogOutputtype.GetHashCode();
                if (this.AccessLogEnabled != null)
                    hashCode = hashCode * 59 + this.AccessLogEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
