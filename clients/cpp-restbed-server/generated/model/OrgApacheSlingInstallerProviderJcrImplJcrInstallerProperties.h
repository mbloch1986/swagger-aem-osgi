/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties_H_
#define OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties
{
public:
    OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties();
    virtual ~OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getHandlerSchemes() const;
    void setHandlerSchemes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSlingJcrinstallFolderNameRegexp() const;
    void setSlingJcrinstallFolderNameRegexp(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSlingJcrinstallFolderMaxDepth() const;
    void setSlingJcrinstallFolderMaxDepth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getSlingJcrinstallSearchPath() const;
    void setSlingJcrinstallSearchPath(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSlingJcrinstallNewConfigPath() const;
    void setSlingJcrinstallNewConfigPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSlingJcrinstallSignalPath() const;
    void setSlingJcrinstallSignalPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSlingJcrinstallEnableWriteback() const;
    void setSlingJcrinstallEnableWriteback(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Handler_schemes;
    std::shared_ptr<ConfigNodePropertyString> m_Sling_jcrinstall_folder_name_regexp;
    std::shared_ptr<ConfigNodePropertyInteger> m_Sling_jcrinstall_folder_max_depth;
    std::shared_ptr<ConfigNodePropertyArray> m_Sling_jcrinstall_search_path;
    std::shared_ptr<ConfigNodePropertyString> m_Sling_jcrinstall_new_config_path;
    std::shared_ptr<ConfigNodePropertyString> m_Sling_jcrinstall_signal_path;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Sling_jcrinstall_enable_writeback;
};

}
}
}
}

#endif /* OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties_H_ */
